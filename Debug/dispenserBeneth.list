
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019680  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b90  08019810  08019810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d3a0  0801d3a0  0001f168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d3a0  0801d3a0  0001e3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d3a8  0801d3a8  0001f168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d3a8  0801d3a8  0001e3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d3ac  0801d3ac  0001e3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0801d3b0  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001f168  2**0
                  CONTENTS
 10 .bss          0000e3dc  20000168  20000168  0001f168  2**2
                  ALLOC
 11 .eth_desc     0000001c  2000e544  2000e544  0001f168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e560  2000e560  0001f168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e560  2000e560  0001f168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0001f168  2**0
                  CONTENTS, READONLY
 15 .debug_info   00038c56  00000000  00000000  0001f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009620  00000000  00000000  00057dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029e8  00000000  00000000  00061410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000020c1  00000000  00000000  00063df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00014bef  00000000  00000000  00065eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004147f  00000000  00000000  0007aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f637c  00000000  00000000  000bbf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b22a3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b6b8  00000000  00000000  001b22e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000079  00000000  00000000  001bd9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080197f8 	.word	0x080197f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	080197f8 	.word	0x080197f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000188 	.word	0x20000188
 80005dc:	20000228 	.word	0x20000228

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f00a f9b3 	bl	800a968 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0801981c 	.word	0x0801981c
 8000614:	20000184 	.word	0x20000184

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000620:	f017 f98c 	bl	801793c <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000624:	f006 fed2 	bl	80073cc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f00a f9e9 	bl	800aa00 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x10>

08000630 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800064a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800064e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000650:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000652:	4a25      	ldr	r2, [pc, #148]	@ (80006e8 <MX_FSMC_Init+0xb8>)
 8000654:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000656:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000658:	2204      	movs	r2, #4
 800065a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800065c:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800066a:	2210      	movs	r2, #16
 800066c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80006b2:	23ff      	movs	r3, #255	@ 0xff
 80006b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80006b6:	230f      	movs	r3, #15
 80006b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80006ba:	2310      	movs	r3, #16
 80006bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80006be:	2311      	movs	r3, #17
 80006c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_FSMC_Init+0xb4>)
 80006ce:	f004 fc0b 	bl	8004ee8 <HAL_SRAM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80006d8:	f000 f984 	bl	80009e4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000428 	.word	0x20000428
 80006e8:	a0000104 	.word	0xa0000104

080006ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <HAL_FSMC_MspInit+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d151      	bne.n	80007ac <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_FSMC_MspInit+0xc8>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <HAL_FSMC_MspInit+0xcc>)
 8000714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000716:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <HAL_FSMC_MspInit+0xcc>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6393      	str	r3, [r2, #56]	@ 0x38
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <HAL_FSMC_MspInit+0xcc>)
 8000720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800072a:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 800072e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800073c:	230c      	movs	r3, #12
 800073e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	481d      	ldr	r0, [pc, #116]	@ (80007bc <HAL_FSMC_MspInit+0xd0>)
 8000746:	f002 fb3d 	bl	8002dc4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800074a:	f240 433f 	movw	r3, #1087	@ 0x43f
 800074e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800075c:	230c      	movs	r3, #12
 800075e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <HAL_FSMC_MspInit+0xd4>)
 8000766:	f002 fb2d 	bl	8002dc4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800076a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800076e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800077c:	230c      	movs	r3, #12
 800077e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <HAL_FSMC_MspInit+0xd8>)
 8000786:	f002 fb1d 	bl	8002dc4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800078a:	f64f 7333 	movw	r3, #65331	@ 0xff33
 800078e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <HAL_FSMC_MspInit+0xdc>)
 80007a6:	f002 fb0d 	bl	8002dc4 <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FSMC_MspInit+0xc2>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000478 	.word	0x20000478
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40021800 	.word	0x40021800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40020c00 	.word	0x40020c00

080007cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007d4:	f7ff ff8a 	bl	80006ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a32      	ldr	r2, [pc, #200]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2b      	ldr	r2, [pc, #172]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a24      	ldr	r2, [pc, #144]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_GPIO_Init+0xd8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

}
 80008aa:	bf00      	nop
 80008ac:	3724      	adds	r7, #36	@ 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 ff04 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f812 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f7ff ff8a 	bl	80007e0 <MX_GPIO_Init>
  MX_FSMC_Init();
 80008cc:	f7ff feb0 	bl	8000630 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80008d0:	f000 fc28 	bl	8001124 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80008d4:	f000 fc50 	bl	8001178 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80008d8:	f000 fbc6 	bl	8001068 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008dc:	f7ff fe80 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008e0:	f00a f82b 	bl	800a93a <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 ff33 	bl	8001750 <HAL_Delay>
 80008ea:	e7fb      	b.n	80008e4 <main+0x28>

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	@ 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	@ 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f017 feed 	bl	80186da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a27      	ldr	r2, [pc, #156]	@ (80009b8 <SystemClock_Config+0xcc>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000920:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <SystemClock_Config+0xd0>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800095c:	2319      	movs	r3, #25
 800095e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000960:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000964:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800096a:	2307      	movs	r3, #7
 800096c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fe2e 	bl	80045d4 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800097e:	f000 f831 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800098e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2105      	movs	r1, #5
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 f88f 	bl	8004ac4 <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009ac:	f000 f81a 	bl	80009e4 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3750      	adds	r7, #80	@ 0x50
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009d2:	f000 fe9d 	bl	8001710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40002000 	.word	0x40002000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b092      	sub	sp, #72	@ 0x48
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a84      	ldr	r2, [pc, #528]	@ (8000c20 <HAL_ETH_MspInit+0x230>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	f040 8101 	bne.w	8000c16 <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a18:	4b82      	ldr	r3, [pc, #520]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	4a81      	ldr	r2, [pc, #516]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a24:	4b7f      	ldr	r3, [pc, #508]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a34:	4b7b      	ldr	r3, [pc, #492]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a7a      	ldr	r2, [pc, #488]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a40:	4b78      	ldr	r3, [pc, #480]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a50:	4b74      	ldr	r3, [pc, #464]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a73      	ldr	r2, [pc, #460]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5c:	4b71      	ldr	r3, [pc, #452]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	4a6c      	ldr	r2, [pc, #432]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a78:	4b6a      	ldr	r3, [pc, #424]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	4b66      	ldr	r3, [pc, #408]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a65      	ldr	r2, [pc, #404]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b63      	ldr	r3, [pc, #396]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000aaa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	4b58      	ldr	r3, [pc, #352]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac4:	4a57      	ldr	r2, [pc, #348]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000acc:	4b55      	ldr	r3, [pc, #340]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	4b51      	ldr	r3, [pc, #324]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	4a50      	ldr	r2, [pc, #320]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	4a49      	ldr	r2, [pc, #292]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b04:	4b47      	ldr	r3, [pc, #284]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b43      	ldr	r3, [pc, #268]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a42      	ldr	r2, [pc, #264]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b20:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b3c      	ldr	r3, [pc, #240]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	4a3b      	ldr	r2, [pc, #236]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3c:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <HAL_ETH_MspInit+0x234>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b60:	4619      	mov	r1, r3
 8000b62:	4831      	ldr	r0, [pc, #196]	@ (8000c28 <HAL_ETH_MspInit+0x238>)
 8000b64:	f002 f92e 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b68:	2386      	movs	r3, #134	@ 0x86
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b80:	4619      	mov	r1, r3
 8000b82:	482a      	ldr	r0, [pc, #168]	@ (8000c2c <HAL_ETH_MspInit+0x23c>)
 8000b84:	f002 f91e 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b88:	2330      	movs	r3, #48	@ 0x30
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4821      	ldr	r0, [pc, #132]	@ (8000c28 <HAL_ETH_MspInit+0x238>)
 8000ba4:	f002 f90e 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000ba8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481a      	ldr	r0, [pc, #104]	@ (8000c30 <HAL_ETH_MspInit+0x240>)
 8000bc6:	f002 f8fd 	bl	8002dc4 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <HAL_ETH_MspInit+0x244>)
 8000be2:	f002 f8ef 	bl	8002dc4 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_ETH_MspInit+0x244>)
 8000bec:	f002 fa86 	bl	80030fc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 fdad 	bl	8001750 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <HAL_ETH_MspInit+0x244>)
 8000bfc:	f002 fa7e 	bl	80030fc <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f000 fda5 	bl	8001750 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2106      	movs	r1, #6
 8000c0a:	203d      	movs	r0, #61	@ 0x3d
 8000c0c:	f000 fe7c 	bl	8001908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000c10:	203d      	movs	r0, #61	@ 0x3d
 8000c12:	f000 fe95 	bl	8001940 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c16:	bf00      	nop
 8000c18:	3748      	adds	r7, #72	@ 0x48
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40028000 	.word	0x40028000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40021800 	.word	0x40021800
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a11      	ldr	r2, [pc, #68]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210f      	movs	r1, #15
 8000c7a:	f06f 0001 	mvn.w	r0, #1
 8000c7e:	f000 fe43 	bl	8001908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	4a32      	ldr	r2, [pc, #200]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	f107 0210 	add.w	r2, r7, #16
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 f8dc 	bl	8004e84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd6:	f004 f8ad 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8000cda:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cde:	f004 f8a9 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <HAL_InitTick+0xe8>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <HAL_InitTick+0xec>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	@ (8000d80 <HAL_InitTick+0xf0>)
 8000cfa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_InitTick+0xec>)
 8000cfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d08:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000d1c:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d1e:	f004 f92b 	bl	8004f78 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d32:	f004 f971 	bl	8005018 <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000d44:	202d      	movs	r0, #45	@ 0x2d
 8000d46:	f000 fdfb 	bl	8001940 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d808      	bhi.n	8000d62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	202d      	movs	r0, #45	@ 0x2d
 8000d56:	f000 fdd7 	bl	8001908 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_InitTick+0xf4>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e002      	b.n	8000d68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3738      	adds	r7, #56	@ 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	2000047c 	.word	0x2000047c
 8000d80:	40002000 	.word	0x40002000
 8000d84:	20000004 	.word	0x20000004

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000dc6:	f004 f997 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000047c 	.word	0x2000047c

08000dd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <TIM7_IRQHandler+0x10>)
 8000dda:	f004 f98d 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004c8 	.word	0x200004c8

08000de8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b0ae      	sub	sp, #184	@ 0xb8
 8000dec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t dma_status = ETH->DMASR;
 8000dee:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <ETH_IRQHandler+0xa4>)
 8000df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), 
           "ETH_IRQ: DMASR=0x%08lX, NIS=%lu, AIS=%lu, RS=%lu, TS=%lu", 
           dma_status,
           (dma_status & ETH_DMASR_NIS) ? 1UL : 0UL,  // Normal interrupt
 8000dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dfe:	0c1b      	lsrs	r3, r3, #16
  snprintf(debug_msg, sizeof(debug_msg), 
 8000e00:	f003 0301 	and.w	r3, r3, #1
           (dma_status & ETH_DMASR_AIS) ? 1UL : 0UL,  // Abnormal interrupt  
 8000e04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000e08:	0bd2      	lsrs	r2, r2, #15
  snprintf(debug_msg, sizeof(debug_msg), 
 8000e0a:	f002 0201 	and.w	r2, r2, #1
           (dma_status & ETH_DMASR_RS) ? 1UL : 0UL,   // Receive status
 8000e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000e12:	0989      	lsrs	r1, r1, #6
  snprintf(debug_msg, sizeof(debug_msg), 
 8000e14:	f001 0101 	and.w	r1, r1, #1
 8000e18:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000e1c:	f000 0001 	and.w	r0, r0, #1
 8000e20:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000e24:	9003      	str	r0, [sp, #12]
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <ETH_IRQHandler+0xa8>)
 8000e32:	2180      	movs	r1, #128	@ 0x80
 8000e34:	4620      	mov	r0, r4
 8000e36:	f017 fbad 	bl	8018594 <sniprintf>
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f016 fe32 	bl	8017ab8 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e54:	480f      	ldr	r0, [pc, #60]	@ (8000e94 <ETH_IRQHandler+0xac>)
 8000e56:	f001 f90f 	bl	8002078 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <ETH_IRQHandler+0xb0>)
 8000e5c:	463c      	mov	r4, r7
 8000e5e:	461d      	mov	r5, r3
 8000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	8023      	strh	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9ae 	bl	80001d0 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f016 fe1b 	bl	8017ab8 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	37a8      	adds	r7, #168	@ 0xa8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40028000 	.word	0x40028000
 8000e90:	08019838 	.word	0x08019838
 8000e94:	20005104 	.word	0x20005104
 8000e98:	08019874 	.word	0x08019874

08000e9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <OTG_FS_IRQHandler+0x10>)
 8000ea2:	f002 fa88 	bl	80033b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000dcf4 	.word	0x2000dcf4

08000eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_kill>:

int _kill(int pid, int sig)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <_kill+0x20>)
 8000ecc:	2216      	movs	r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2000e534 	.word	0x2000e534

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe5 	bl	8000ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <_exit+0x12>

08000efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e00a      	b.n	8000f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0c:	f3af 8000 	nop.w
 8000f10:	4601      	mov	r1, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	60ba      	str	r2, [r7, #8]
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbf0      	blt.n	8000f0c <_read+0x12>
  }

  return len;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e009      	b.n	8000f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf1      	blt.n	8000f46 <_write+0x12>
  }
  return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_close>:

int _close(int file)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f94:	605a      	str	r2, [r3, #4]
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_isatty>:

int _isatty(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d205      	bcs.n	8001010 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <_sbrk+0x6c>)
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20020000 	.word	0x20020000
 8001034:	00000400 	.word	0x00000400
 8001038:	200004c4 	.word	0x200004c4
 800103c:	2000e560 	.word	0x2000e560
 8001040:	2000e534 	.word	0x2000e534

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <MX_TIM7_Init+0x64>)
 8001078:	4a15      	ldr	r2, [pc, #84]	@ (80010d0 <MX_TIM7_Init+0x68>)
 800107a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_TIM7_Init+0x64>)
 800107e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001082:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_TIM7_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_TIM7_Init+0x64>)
 800108c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_TIM7_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM7_Init+0x64>)
 800109a:	f003 ff6d 	bl	8004f78 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80010a4:	f7ff fc9e 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_TIM7_Init+0x64>)
 80010b6:	f004 f9dd 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f7ff fc90 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200004c8 	.word	0x200004c8
 80010d0:	40001400 	.word	0x40001400

080010d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_TIM_Base_MspInit+0x48>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d115      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_TIM_Base_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	2037      	movs	r0, #55	@ 0x37
 8001108:	f000 fbfe 	bl	8001908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800110c:	2037      	movs	r0, #55	@ 0x37
 800110e:	f000 fc17 	bl	8001940 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40001400 	.word	0x40001400
 8001120:	40023800 	.word	0x40023800

08001124 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <MX_USART1_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_USART1_UART_Init+0x4c>)
 800115c:	f004 fa1a 	bl	8005594 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f7ff fc3d 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000510 	.word	0x20000510
 8001174:	40011000 	.word	0x40011000

08001178 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <MX_USART6_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001184:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001188:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011b0:	f004 f9f0 	bl	8005594 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f7ff fc13 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000558 	.word	0x20000558
 80011c8:	40011400 	.word	0x40011400

080011cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	@ 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a32      	ldr	r2, [pc, #200]	@ (80012b4 <HAL_UART_MspInit+0xe8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12d      	bne.n	800124a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a30      	ldr	r2, [pc, #192]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b2e      	ldr	r3, [pc, #184]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a29      	ldr	r2, [pc, #164]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001226:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001238:	2307      	movs	r3, #7
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	481e      	ldr	r0, [pc, #120]	@ (80012bc <HAL_UART_MspInit+0xf0>)
 8001244:	f001 fdbe 	bl	8002dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001248:	e030      	b.n	80012ac <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_UART_MspInit+0xf4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12b      	bne.n	80012ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6453      	str	r3, [r2, #68]	@ 0x44
 8001264:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_UART_MspInit+0xec>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128c:	23c0      	movs	r3, #192	@ 0xc0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800129c:	2308      	movs	r3, #8
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <HAL_UART_MspInit+0xf8>)
 80012a8:	f001 fd8c 	bl	8002dc4 <HAL_GPIO_Init>
}
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	@ 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40011000 	.word	0x40011000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40011400 	.word	0x40011400
 80012c4:	40020800 	.word	0x40020800

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012cc:	f7ff feba 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f017 fa9d 	bl	8018834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fadf 	bl	80008bc <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800130c:	0801d3b0 	.word	0x0801d3b0
  ldr r2, =_sbss
 8001310:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001314:	2000e544 	.word	0x2000e544

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>

0800131a <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <eth_chip_regster_bus_io+0x28>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <eth_chip_regster_bus_io+0x28>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <eth_chip_regster_bus_io+0x28>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e014      	b.n	8001372 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f107 0208 	add.w	r2, r7, #8
 80013a0:	2102      	movs	r1, #2
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	4798      	blx	r3

    switch (regvalue)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	2b1c      	cmp	r3, #28
 80013aa:	d02d      	beq.n	8001408 <eth_chip_init+0x88>
 80013ac:	2b1c      	cmp	r3, #28
 80013ae:	d847      	bhi.n	8001440 <eth_chip_init+0xc0>
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <eth_chip_init+0x3a>
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	d036      	beq.n	8001426 <eth_chip_init+0xa6>
 80013b8:	e042      	b.n	8001440 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f107 0208 	add.w	r2, r7, #8
 80013c2:	2103      	movs	r1, #3
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	4798      	blx	r3

            if (regvalue == 0x128)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80013ce:	d10e      	bne.n	80013ee <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 80013d0:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <eth_chip_init+0x1fc>)
 80013d2:	2211      	movs	r2, #17
 80013d4:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 80013d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001580 <eth_chip_init+0x200>)
 80013d8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80013dc:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 80013de:	4b69      	ldr	r3, [pc, #420]	@ (8001584 <eth_chip_init+0x204>)
 80013e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e4:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 80013e6:	4b68      	ldr	r3, [pc, #416]	@ (8001588 <eth_chip_init+0x208>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 80013ec:	e028      	b.n	8001440 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 80013ee:	4b63      	ldr	r3, [pc, #396]	@ (800157c <eth_chip_init+0x1fc>)
 80013f0:	2210      	movs	r2, #16
 80013f2:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 80013f4:	4b62      	ldr	r3, [pc, #392]	@ (8001580 <eth_chip_init+0x200>)
 80013f6:	2222      	movs	r2, #34	@ 0x22
 80013f8:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 80013fa:	4b62      	ldr	r3, [pc, #392]	@ (8001584 <eth_chip_init+0x204>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 8001400:	4b61      	ldr	r3, [pc, #388]	@ (8001588 <eth_chip_init+0x208>)
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
            break;
 8001406:	e01b      	b.n	8001440 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 8001408:	4b5c      	ldr	r3, [pc, #368]	@ (800157c <eth_chip_init+0x1fc>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 800140e:	4b5c      	ldr	r3, [pc, #368]	@ (8001580 <eth_chip_init+0x200>)
 8001410:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001414:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 8001416:	4b5b      	ldr	r3, [pc, #364]	@ (8001584 <eth_chip_init+0x204>)
 8001418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800141c:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 800141e:	4b5a      	ldr	r3, [pc, #360]	@ (8001588 <eth_chip_init+0x208>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
            break;
 8001424:	e00c      	b.n	8001440 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 8001426:	4b55      	ldr	r3, [pc, #340]	@ (800157c <eth_chip_init+0x1fc>)
 8001428:	221f      	movs	r2, #31
 800142a:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 800142c:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <eth_chip_init+0x200>)
 800142e:	2204      	movs	r2, #4
 8001430:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 8001432:	4b54      	ldr	r3, [pc, #336]	@ (8001584 <eth_chip_init+0x204>)
 8001434:	2210      	movs	r2, #16
 8001436:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 8001438:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <eth_chip_init+0x208>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
            break;
 800143e:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d17e      	bne.n	8001546 <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e01e      	b.n	80014a0 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a45      	ldr	r2, [pc, #276]	@ (800157c <eth_chip_init+0x1fc>)
 8001468:	8812      	ldrh	r2, [r2, #0]
 800146a:	4611      	mov	r1, r2
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	4798      	blx	r3
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	da03      	bge.n	8001482 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 800147a:	f06f 0304 	mvn.w	r3, #4
 800147e:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8001480:	e00b      	b.n	800149a <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	429a      	cmp	r2, r3
 800148c:	d105      	bne.n	800149a <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
                break;
 8001498:	e005      	b.n	80014a6 <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b1f      	cmp	r3, #31
 80014a4:	d9dd      	bls.n	8001462 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b1f      	cmp	r3, #31
 80014ac:	d902      	bls.n	80014b4 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 80014ae:	f06f 0302 	mvn.w	r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d145      	bne.n	8001546 <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6810      	ldr	r0, [r2, #0]
 80014c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c6:	2100      	movs	r1, #0
 80014c8:	4798      	blx	r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db37      	blt.n	8001540 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6810      	ldr	r0, [r2, #0]
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	2100      	movs	r1, #0
 80014de:	4798      	blx	r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db28      	blt.n	8001538 <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80014f0:	e01c      	b.n	800152c <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4798      	blx	r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001504:	d80e      	bhi.n	8001524 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2100      	movs	r1, #0
 8001514:	4798      	blx	r3
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	da07      	bge.n	800152c <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 800151c:	f06f 0304 	mvn.w	r3, #4
 8001520:	613b      	str	r3, [r7, #16]
                                break;
 8001522:	e010      	b.n	8001546 <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 8001524:	f06f 0301 	mvn.w	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
                            break;
 800152a:	e00c      	b.n	8001546 <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1dd      	bne.n	80014f2 <eth_chip_init+0x172>
 8001536:	e006      	b.n	8001546 <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 8001538:	f06f 0304 	mvn.w	r3, #4
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	e002      	b.n	8001546 <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 8001540:	f06f 0303 	mvn.w	r3, #3
 8001544:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d112      	bne.n	8001572 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4798      	blx	r3
 8001552:	4603      	mov	r3, r0
 8001554:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 8001556:	bf00      	nop
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4798      	blx	r3
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800156a:	d9f5      	bls.n	8001558 <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	605a      	str	r2, [r3, #4]
    }

    return status;
 8001572:	693b      	ldr	r3, [r7, #16]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200005a4 	.word	0x200005a4
 8001580:	200005a6 	.word	0x200005a6
 8001584:	200005a8 	.word	0x200005a8
 8001588:	200005a0 	.word	0x200005a0

0800158c <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6810      	ldr	r0, [r2, #0]
 80015a4:	f107 0208 	add.w	r2, r7, #8
 80015a8:	2100      	movs	r1, #0
 80015aa:	4798      	blx	r3
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db11      	blt.n	80015d6 <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80015b8:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6810      	ldr	r0, [r2, #0]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	2100      	movs	r1, #0
 80015c6:	4798      	blx	r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da06      	bge.n	80015dc <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 80015ce:	f06f 0303 	mvn.w	r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e002      	b.n	80015dc <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 80015d6:	f06f 0304 	mvn.w	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
    }

    return status;
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	f107 0208 	add.w	r2, r7, #8
 8001602:	2100      	movs	r1, #0
 8001604:	4798      	blx	r3
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	db11      	blt.n	8001630 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001612:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6810      	ldr	r0, [r2, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	2100      	movs	r1, #0
 8001620:	4798      	blx	r3
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	da06      	bge.n	8001636 <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8001628:	f06f 0303 	mvn.w	r3, #3
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e002      	b.n	8001636 <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8001630:	f06f 0304 	mvn.w	r3, #4
 8001634:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6810      	ldr	r0, [r2, #0]
 8001654:	4a1a      	ldr	r2, [pc, #104]	@ (80016c0 <eth_chip_get_link_state+0x80>)
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	da02      	bge.n	800166c <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 8001666:	f06f 0304 	mvn.w	r3, #4
 800166a:	e024      	b.n	80016b6 <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <eth_chip_get_link_state+0x84>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <eth_chip_get_link_state+0x84>)
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	4293      	cmp	r3, r2
 800167c:	d008      	beq.n	8001690 <eth_chip_get_link_state+0x50>
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <eth_chip_get_link_state+0x88>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 800168c:	2302      	movs	r3, #2
 800168e:	e012      	b.n	80016b6 <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <eth_chip_get_link_state+0x84>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <eth_chip_get_link_state+0x84>)
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	4293      	cmp	r3, r2
 80016a0:	d001      	beq.n	80016a6 <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e007      	b.n	80016b6 <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 80016b0:	2304      	movs	r3, #4
 80016b2:	e000      	b.n	80016b6 <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 80016b4:	2305      	movs	r3, #5
    }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200005a4 	.word	0x200005a4
 80016c4:	200005a6 	.word	0x200005a6
 80016c8:	200005a8 	.word	0x200005a8

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f8fc 	bl	80018f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f7ff fac8 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fa9a 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	200005ac 	.word	0x200005ac

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200005ac 	.word	0x200005ac

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	@ (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	@ (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	@ (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff4c 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191a:	f7ff ff61 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800191e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	6978      	ldr	r0, [r7, #20]
 8001926:	f7ff ffb1 	bl	800188c <NVIC_EncodePriority>
 800192a:	4602      	mov	r2, r0
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff80 	bl	8001838 <__NVIC_SetPriority>
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff54 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e08a      	b.n	8001a84 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f835 	bl	80009f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b40      	ldr	r3, [pc, #256]	@ (8001a8c <HAL_ETH_Init+0x130>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a8c <HAL_ETH_Init+0x130>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001994:	6453      	str	r3, [r2, #68]	@ 0x44
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_ETH_Init+0x130>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <HAL_ETH_Init+0x134>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001a90 <HAL_ETH_Init+0x134>)
 80019a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80019ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ae:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <HAL_ETH_Init+0x134>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4936      	ldr	r1, [pc, #216]	@ (8001a90 <HAL_ETH_Init+0x134>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019bc:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <HAL_ETH_Init+0x134>)
 80019be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d8:	f7ff feae 	bl	8001738 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019de:	e011      	b.n	8001a04 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019e0:	f7ff feaa 	bl	8001738 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019ee:	d909      	bls.n	8001a04 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	22e0      	movs	r2, #224	@ 0xe0
 80019fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e03f      	b.n	8001a84 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1e4      	bne.n	80019e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 ff16 	bl	8002848 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 ffc1 	bl	80029a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 f817 	bl	8002a56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 ff7f 	bl	8002934 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001a44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a5a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001a6e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800

08001a94 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d161      	bne.n	8001b6a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9f4 	bl	8001ea8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fe41 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ae8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aec:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b04:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fd3b 	bl	8002582 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0208 	orr.w	r2, r2, #8
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7ff fe13 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0204 	orr.w	r2, r2, #4
 8001b40:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001b54:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001b58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b5c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2240      	movs	r2, #64	@ 0x40
 8001b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b82:	2b40      	cmp	r3, #64	@ 0x40
 8001b84:	d170      	bne.n	8001c68 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001ba0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001ba4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ba8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bc0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f023 0302 	bic.w	r3, r3, #2
 8001bd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bd8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0204 	bic.w	r2, r2, #4
 8001be8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fdac 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fcbe 	bl	8002582 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0208 	bic.w	r2, r2, #8
 8001c14:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fd96 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e00e      	b.n	8001c50 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	3212      	adds	r2, #18
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d9ed      	bls.n	8001c32 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e045      	b.n	8001d22 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c9c:	2b40      	cmp	r3, #64	@ 0x40
 8001c9e:	d13f      	bne.n	8001d20 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 ff41 	bl	8002b34 <ETH_Prepare_Tx_Descriptors>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbe:	f043 0202 	orr.w	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e02a      	b.n	8001d22 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ccc:	f3bf 8f4f 	dsb	sy
}
 8001cd0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d904      	bls.n	8001cee <HAL_ETH_Transmit_IT+0x7c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	1f1a      	subs	r2, r3, #4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	461a      	mov	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0a4      	b.n	8001ea0 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d5c:	2b40      	cmp	r3, #64	@ 0x40
 8001d5e:	d001      	beq.n	8001d64 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e09d      	b.n	8001ea0 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	3212      	adds	r2, #18
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d7a:	f1c3 0304 	rsb	r3, r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d80:	e066      	b.n	8001e50 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_ETH_ReadData+0x88>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03c      	beq.n	8001e2c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001dd4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f006 fd30 	bl	8008870 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	441a      	add	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d902      	bls.n	8001e3e <HAL_ETH_ReadData+0x114>
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	3212      	adds	r2, #18
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db06      	blt.n	8001e66 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d202      	bcs.n	8001e66 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d08d      	beq.n	8001d82 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	441a      	add	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f814 	bl	8001ea8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ebc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	3212      	adds	r2, #18
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ece:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ed0:	e044      	b.n	8001f5c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d112      	bne.n	8001f00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 fc96 	bl	8008810 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	74fb      	strb	r3, [r7, #19]
 8001eee:	e007      	b.n	8001f00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	461a      	mov	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02a      	beq.n	8001f5c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6053      	str	r3, [r2, #4]
 8001f1e:	e005      	b.n	8001f2c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d902      	bls.n	8001f4a <ETH_UpdateDescriptor+0xa2>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3b04      	subs	r3, #4
 8001f48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	3212      	adds	r2, #18
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <ETH_UpdateDescriptor+0xc0>
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1b4      	bne.n	8001ed2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d01a      	beq.n	8001fa8 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3303      	adds	r3, #3
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001f7c:	f3bf 8f5f 	dmb	sy
}
 8001f80:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6919      	ldr	r1, [r3, #16]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	18ca      	adds	r2, r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3318      	adds	r3, #24
 8001fbc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fce:	e047      	b.n	8002060 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	3301      	adds	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d902      	bls.n	8001ffc <HAL_ETH_ReleaseTxPacket+0x4c>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3b04      	subs	r3, #4
 8001ffa:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02c      	beq.n	8002060 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db1f      	blt.n	800205c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	3304      	adds	r3, #4
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	f006 fc61 	bl	80088f0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3304      	adds	r3, #4
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	3301      	adds	r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d902      	bls.n	800204e <HAL_ETH_ReleaseTxPacket+0x9e>
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3b04      	subs	r3, #4
 800204c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c
 800205a:	e001      	b.n	8002060 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_ETH_ReleaseTxPacket+0xbc>
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1b1      	bne.n	8001fd0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80020a0:	4b4b      	ldr	r3, [pc, #300]	@ (80021d0 <HAL_ETH_IRQHandler+0x158>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <HAL_ETH_IRQHandler+0x56>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_ETH_IRQHandler+0x15c>)
 80020c6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f005 fd07 	bl	8007adc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00f      	beq.n	80020f8 <HAL_ETH_IRQHandler+0x80>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ea:	461a      	mov	r2, r3
 80020ec:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80020f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f005 fd02 	bl	8007afc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d042      	beq.n	8002188 <HAL_ETH_IRQHandler+0x110>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03d      	beq.n	8002188 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f043 0208 	orr.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01a      	beq.n	800215c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	4b29      	ldr	r3, [pc, #164]	@ (80021d8 <HAL_ETH_IRQHandler+0x160>)
 8002132:	4013      	ands	r3, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800214c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002150:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	22e0      	movs	r2, #224	@ 0xe0
 8002156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800215a:	e012      	b.n	8002182 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	f248 6380 	movw	r3, #34432	@ 0x8680
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217a:	461a      	mov	r2, r3
 800217c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002180:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fcca 	bl	8007b1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f81a 	bl	80021dc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_ETH_IRQHandler+0x158>)
 80021bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021c0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f814 	bl	80021f0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40013c00 	.word	0x40013c00
 80021d4:	00010040 	.word	0x00010040
 80021d8:	007e2000 	.word	0x007e2000

080021dc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 031c 	and.w	r3, r3, #28
 8002220:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	02db      	lsls	r3, r3, #11
 8002226:	b29b      	uxth	r3, r3
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002254:	f7ff fa70 	bl	8001738 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800225a:	e00d      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800225c:	f7ff fa6c 	bl	8001738 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226a:	d301      	bcc.n	8002270 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e010      	b.n	8002292 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ec      	bne.n	800225c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 031c 	and.w	r3, r3, #28
 80022b6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	02db      	lsls	r3, r3, #11
 80022bc:	b29b      	uxth	r3, r3
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f4:	f7ff fa20 	bl	8001738 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022fa:	e00d      	b.n	8002318 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022fc:	f7ff fa1c 	bl	8001738 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800230a:	d301      	bcc.n	8002310 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e009      	b.n	8002324 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ec      	bne.n	80022fc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0e6      	b.n	800250e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00b      	b.n	8002546 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002534:	2b10      	cmp	r3, #16
 8002536:	d105      	bne.n	8002544 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f846 	bl	80025cc <ETH_SetMACConfig>

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff f8cc 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025c2:	6193      	str	r3, [r2, #24]
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <ETH_SetMACConfig+0x164>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7b9b      	ldrb	r3, [r3, #14]
 80025ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	7c12      	ldrb	r2, [r2, #16]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d102      	bne.n	80025fa <ETH_SetMACConfig+0x2e>
 80025f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x30>
 80025fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	7c52      	ldrb	r2, [r2, #17]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d102      	bne.n	800260c <ETH_SetMACConfig+0x40>
 8002606:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800260a:	e000      	b.n	800260e <ETH_SetMACConfig+0x42>
 800260c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800260e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002614:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7fdb      	ldrb	r3, [r3, #31]
 800261a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800261c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002622:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	7f92      	ldrb	r2, [r2, #30]
 8002628:	2a00      	cmp	r2, #0
 800262a:	d102      	bne.n	8002632 <ETH_SetMACConfig+0x66>
 800262c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002630:	e000      	b.n	8002634 <ETH_SetMACConfig+0x68>
 8002632:	2200      	movs	r2, #0
                        macconf->Speed |
 8002634:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	7f1b      	ldrb	r3, [r3, #28]
 800263a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800263c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002642:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	791b      	ldrb	r3, [r3, #4]
 8002648:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800264a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002652:	2a00      	cmp	r2, #0
 8002654:	d102      	bne.n	800265c <ETH_SetMACConfig+0x90>
 8002656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265a:	e000      	b.n	800265e <ETH_SetMACConfig+0x92>
 800265c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800265e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7bdb      	ldrb	r3, [r3, #15]
 8002664:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002666:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800266c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002674:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002676:	4313      	orrs	r3, r2
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff f85e 	bl	8001750 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	d101      	bne.n	80026c2 <ETH_SetMACConfig+0xf6>
 80026be:	2280      	movs	r2, #128	@ 0x80
 80026c0:	e000      	b.n	80026c4 <ETH_SetMACConfig+0xf8>
 80026c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d101      	bne.n	80026da <ETH_SetMACConfig+0x10e>
 80026d6:	2208      	movs	r2, #8
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x110>
 80026da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80026e4:	2a01      	cmp	r2, #1
 80026e6:	d101      	bne.n	80026ec <ETH_SetMACConfig+0x120>
 80026e8:	2204      	movs	r2, #4
 80026ea:	e000      	b.n	80026ee <ETH_SetMACConfig+0x122>
 80026ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026f6:	2a01      	cmp	r2, #1
 80026f8:	d101      	bne.n	80026fe <ETH_SetMACConfig+0x132>
 80026fa:	2202      	movs	r2, #2
 80026fc:	e000      	b.n	8002700 <ETH_SetMACConfig+0x134>
 80026fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002700:	4313      	orrs	r3, r2
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002718:	2001      	movs	r0, #1
 800271a:	f7ff f819 	bl	8001750 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	fd20810f 	.word	0xfd20810f

08002734 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <ETH_SetDMAConfig+0x110>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7b1b      	ldrb	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <ETH_SetDMAConfig+0x2c>
 800275a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800275e:	e000      	b.n	8002762 <ETH_SetDMAConfig+0x2e>
 8002760:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	7b5b      	ldrb	r3, [r3, #13]
 8002766:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002768:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	7f52      	ldrb	r2, [r2, #29]
 800276e:	2a00      	cmp	r2, #0
 8002770:	d102      	bne.n	8002778 <ETH_SetDMAConfig+0x44>
 8002772:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002776:	e000      	b.n	800277a <ETH_SetDMAConfig+0x46>
 8002778:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800277a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7b9b      	ldrb	r3, [r3, #14]
 8002780:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002782:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002788:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7f1b      	ldrb	r3, [r3, #28]
 800278e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002790:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7f9b      	ldrb	r3, [r3, #30]
 8002796:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002798:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800279e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe ffc0 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002806:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800280c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800281a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002828:	2001      	movs	r0, #1
 800282a:	f7fe ff91 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f8de3f23 	.word	0xf8de3f23

08002848 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b0a6      	sub	sp, #152	@ 0x98
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800288a:	2300      	movs	r3, #0
 800288c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002894:	2300      	movs	r3, #0
 8002896:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fe7f 	bl	80025cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028dc:	2301      	movs	r3, #1
 80028de:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002902:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002904:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002908:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800290a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002916:	2300      	movs	r3, #0
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff05 	bl	8002734 <ETH_SetDMAConfig>
}
 800292a:	bf00      	nop
 800292c:	3798      	adds	r7, #152	@ 0x98
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3305      	adds	r3, #5
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	3204      	adds	r2, #4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <ETH_MACAddressConfig+0x68>)
 8002956:	4413      	add	r3, r2
 8002958:	461a      	mov	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3303      	adds	r3, #3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	061a      	lsls	r2, r3, #24
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3302      	adds	r3, #2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4313      	orrs	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <ETH_MACAddressConfig+0x6c>)
 8002986:	4413      	add	r3, r2
 8002988:	461a      	mov	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40028040 	.word	0x40028040
 80029a0:	40028044 	.word	0x40028044

080029a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e03e      	b.n	8002a30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	3206      	adds	r2, #6
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d80c      	bhi.n	8002a14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68d9      	ldr	r1, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	e004      	b.n	8002a1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d9bd      	bls.n	80029b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a48:	611a      	str	r2, [r3, #16]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e048      	b.n	8002af6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6919      	ldr	r1, [r3, #16]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	3212      	adds	r2, #18
 8002ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d80c      	bhi.n	8002ae6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	e004      	b.n	8002af0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d9b3      	bls.n	8002a64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b091      	sub	sp, #68	@ 0x44
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3318      	adds	r3, #24
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b76:	d007      	beq.n	8002b88 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e115      	b.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	3301      	adds	r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002ba4:	f023 031f 	bic.w	r3, r3, #31
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	6852      	ldr	r2, [r2, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c12:	e084      	b.n	8002d1e <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e005      	b.n	8002c40 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c42:	3301      	adds	r3, #1
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d902      	bls.n	8002c52 <ETH_Prepare_Tx_Descriptors+0x11e>
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c68:	d007      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6e:	3304      	adds	r3, #4
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d029      	beq.n	8002cce <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c8c:	e019      	b.n	8002cc2 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c8e:	f3bf 8f5f 	dmb	sy
}
 8002c92:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d902      	bls.n	8002cb2 <ETH_Prepare_Tx_Descriptors+0x17e>
 8002cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d3e1      	bcc.n	8002c8e <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e074      	b.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	3301      	adds	r3, #1
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002cf8:	f023 031f 	bic.w	r3, r3, #31
 8002cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfe:	6852      	ldr	r2, [r2, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d04:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	3301      	adds	r3, #1
 8002d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002d0c:	f3bf 8f5f 	dmb	sy
}
 8002d10:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f af76 	bne.w	8002c14 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e005      	b.n	8002d48 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002d5e:	f3bf 8f5f 	dmb	sy
}
 8002d62:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d78:	3304      	adds	r3, #4
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d84:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d86:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d8c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	4413      	add	r3, r2
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3744      	adds	r7, #68	@ 0x44
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	@ 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e16b      	b.n	80030b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de0:	2201      	movs	r2, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f040 815a 	bne.w	80030b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d005      	beq.n	8002e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d130      	bne.n	8002e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 0201 	and.w	r2, r3, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d017      	beq.n	8002eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d123      	bne.n	8002f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	08da      	lsrs	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3208      	adds	r2, #8
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80b4 	beq.w	80030b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b60      	ldr	r3, [pc, #384]	@ (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	4a5f      	ldr	r2, [pc, #380]	@ (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80030d0 <HAL_GPIO_Init+0x30c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f66:	4a5b      	ldr	r2, [pc, #364]	@ (80030d4 <HAL_GPIO_Init+0x310>)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	@ (80030d8 <HAL_GPIO_Init+0x314>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <HAL_GPIO_Init+0x226>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a51      	ldr	r2, [pc, #324]	@ (80030dc <HAL_GPIO_Init+0x318>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d025      	beq.n	8002fe6 <HAL_GPIO_Init+0x222>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	@ (80030e0 <HAL_GPIO_Init+0x31c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_GPIO_Init+0x21e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80030e4 <HAL_GPIO_Init+0x320>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_Init+0x21a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	@ (80030e8 <HAL_GPIO_Init+0x324>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x216>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80030ec <HAL_GPIO_Init+0x328>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_Init+0x212>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <HAL_GPIO_Init+0x32c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80030f4 <HAL_GPIO_Init+0x330>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_Init+0x20a>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00e      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	e00c      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	e00a      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e008      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e004      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e002      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_GPIO_Init+0x228>
 8002fea:	2300      	movs	r3, #0
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f002 0203 	and.w	r2, r2, #3
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	4093      	lsls	r3, r2
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ffc:	4935      	ldr	r1, [pc, #212]	@ (80030d4 <HAL_GPIO_Init+0x310>)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302e:	4a32      	ldr	r2, [pc, #200]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003034:	4b30      	ldr	r3, [pc, #192]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003058:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800305e:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ac:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <HAL_GPIO_Init+0x334>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	f67f ae90 	bls.w	8002de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40013800 	.word	0x40013800
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40020400 	.word	0x40020400
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020c00 	.word	0x40020c00
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40021400 	.word	0x40021400
 80030f0:	40021800 	.word	0x40021800
 80030f4:	40021c00 	.word	0x40021c00
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af02      	add	r7, sp, #8
 8003134:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e101      	b.n	8003344 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f014 fdf4 	bl	8017d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800316e:	d102      	bne.n	8003176 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f002 feb5 	bl	8005eea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7c1a      	ldrb	r2, [r3, #16]
 8003188:	f88d 2000 	strb.w	r2, [sp]
 800318c:	3304      	adds	r3, #4
 800318e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003190:	f002 fd94 	bl	8005cbc <USB_CoreInit>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0ce      	b.n	8003344 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fead 	bl	8005f0c <USB_SetCurrentMode>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0bf      	b.n	8003344 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e04a      	b.n	8003260 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3315      	adds	r3, #21
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3314      	adds	r3, #20
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	b298      	uxth	r0, r3
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	332e      	adds	r3, #46	@ 0x2e
 8003206:	4602      	mov	r2, r0
 8003208:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3318      	adds	r3, #24
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	331c      	adds	r3, #28
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3320      	adds	r3, #32
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	3324      	adds	r3, #36	@ 0x24
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3301      	adds	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3af      	bcc.n	80031ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e044      	b.n	80032fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	3301      	adds	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	429a      	cmp	r2, r3
 8003302:	d3b5      	bcc.n	8003270 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7c1a      	ldrb	r2, [r3, #16]
 800330c:	f88d 2000 	strb.w	r2, [sp]
 8003310:	3304      	adds	r3, #4
 8003312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003314:	f002 fe46 	bl	8005fa4 <USB_DevInit>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00c      	b.n	8003344 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fe90 	bl	8007062 <USB_DevDisconnect>

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_PCD_Start+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e022      	b.n	80033ae <HAL_PCD_Start+0x62>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fd97 	bl	8005ec8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fe3e 	bl	8007020 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b590      	push	{r4, r7, lr}
 80033b8:	b08d      	sub	sp, #52	@ 0x34
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fefc 	bl	80071ca <USB_GetMode>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 848c 	bne.w	8003cf2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 fe60 	bl	80070a4 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8482 	beq.w	8003cf0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f003 fe4d 	bl	80070a4 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d107      	bne.n	8003424 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f002 0202 	and.w	r2, r2, #2
 8003422:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fe3b 	bl	80070a4 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b10      	cmp	r3, #16
 8003436:	d161      	bne.n	80034fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0210 	bic.w	r2, r2, #16
 8003446:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800346e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003472:	d124      	bne.n	80034be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d035      	beq.n	80034ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800348a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6a38      	ldr	r0, [r7, #32]
 8003494:	f003 fc72 	bl	8006d7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a4:	441a      	add	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b6:	441a      	add	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	615a      	str	r2, [r3, #20]
 80034bc:	e016      	b.n	80034ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80034c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034c8:	d110      	bne.n	80034ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034d0:	2208      	movs	r2, #8
 80034d2:	4619      	mov	r1, r3
 80034d4:	6a38      	ldr	r0, [r7, #32]
 80034d6:	f003 fc51 	bl	8006d7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e6:	441a      	add	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0210 	orr.w	r2, r2, #16
 80034fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fdcf 	bl	80070a4 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800350c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003510:	f040 80a7 	bne.w	8003662 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fdd4 	bl	80070ca <USB_ReadDevAllOutEpInterrupt>
 8003522:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003524:	e099      	b.n	800365a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 808e 	beq.w	800364e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f003 fdf8 	bl	8007132 <USB_ReadDevOutEPInterrupt>
 8003542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	2301      	movs	r3, #1
 800355e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fea4 	bl	80042b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	2308      	movs	r3, #8
 8003582:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 ff7a 	bl	8004480 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a2:	461a      	mov	r2, r3
 80035a4:	2310      	movs	r3, #16
 80035a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d030      	beq.n	8003614 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ba:	2b80      	cmp	r3, #128	@ 0x80
 80035bc:	d109      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	78db      	ldrb	r3, [r3, #3]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d108      	bne.n	8003602 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f014 fca9 	bl	8017f54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360e:	461a      	mov	r2, r3
 8003610:	2302      	movs	r3, #2
 8003612:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	2320      	movs	r3, #32
 800362e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800364c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	3301      	adds	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f af62 	bne.w	8003526 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fd1c 	bl	80070a4 <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003672:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003676:	f040 80db 	bne.w	8003830 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f003 fd3d 	bl	80070fe <USB_ReadDevAllInEpInterrupt>
 8003684:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800368a:	e0cd      	b.n	8003828 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80c2 	beq.w	800381c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fd63 	bl	800716e <USB_ReadDevInEPInterrupt>
 80036a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d057      	beq.n	8003764 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	2201      	movs	r2, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036d4:	4013      	ands	r3, r2
 80036d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e4:	461a      	mov	r2, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d132      	bne.n	8003758 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3320      	adds	r3, #32
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4403      	add	r3, r0
 8003712:	331c      	adds	r3, #28
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4419      	add	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4403      	add	r3, r0
 8003726:	3320      	adds	r3, #32
 8003728:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <HAL_PCD_IRQHandler+0x3a2>
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3324      	adds	r3, #36	@ 0x24
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003750:	461a      	mov	r2, r3
 8003752:	2101      	movs	r1, #1
 8003754:	f003 fd6a 	bl	800722c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f014 fb73 	bl	8017e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377a:	461a      	mov	r2, r3
 800377c:	2308      	movs	r3, #8
 800377e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003796:	461a      	mov	r2, r3
 8003798:	2310      	movs	r3, #16
 800379a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b2:	461a      	mov	r2, r3
 80037b4:	2340      	movs	r3, #64	@ 0x40
 80037b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d023      	beq.n	800380a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037c4:	6a38      	ldr	r0, [r7, #32]
 80037c6:	f002 fd51 	bl	800626c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	3310      	adds	r3, #16
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f014 fbc0 	bl	8017f78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003804:	461a      	mov	r2, r3
 8003806:	2302      	movs	r3, #2
 8003808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003814:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fcbd 	bl	8004196 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	3301      	adds	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	f47f af2e 	bne.w	800368c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fc35 	bl	80070a4 <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003844:	d122      	bne.n	800388c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003860:	2b01      	cmp	r3, #1
 8003862:	d108      	bne.n	8003876 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800386c:	2100      	movs	r1, #0
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fea4 	bl	80045bc <HAL_PCDEx_LPM_Callback>
 8003874:	e002      	b.n	800387c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f014 fb5e 	bl	8017f38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800388a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fc07 	bl	80070a4 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a0:	d112      	bne.n	80038c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f014 fb1a 	bl	8017eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80038c6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 fbe9 	bl	80070a4 <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038dc:	f040 80b7 	bne.w	8003a4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2110      	movs	r1, #16
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fcb6 	bl	800626c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003904:	e046      	b.n	8003994 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003918:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003934:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003938:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800394c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003968:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800396c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	440a      	add	r2, r1
 8003984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003988:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800398c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	3301      	adds	r3, #1
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	461a      	mov	r2, r3
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	4293      	cmp	r3, r2
 800399e:	d3b2      	bcc.n	8003906 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80039b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7bdb      	ldrb	r3, [r3, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039cc:	f043 030b 	orr.w	r3, r3, #11
 80039d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e2:	f043 030b 	orr.w	r3, r3, #11
 80039e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e8:	e015      	b.n	8003a16 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039fc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a10:	f043 030b 	orr.w	r3, r3, #11
 8003a14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f003 fbf7 	bl	800722c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fb26 	bl	80070a4 <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a62:	d123      	bne.n	8003aac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fbbc 	bl	80071e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fc73 	bl	800635e <USB_GetDevSpeed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681c      	ldr	r4, [r3, #0]
 8003a84:	f001 f9ca 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4620      	mov	r0, r4
 8003a92:	f002 f977 	bl	8005d84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f014 f9ff 	bl	8017e9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 faf7 	bl	80070a4 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d10a      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f014 f9dc 	bl	8017e7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 0208 	and.w	r2, r2, #8
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fae2 	bl	80070a4 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d123      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	e014      	b.n	8003b26 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fb0a 	bl	8004134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	3301      	adds	r3, #1
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	791b      	ldrb	r3, [r3, #4]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d3e4      	bcc.n	8003afc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fab4 	bl	80070a4 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d13c      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b48:	2301      	movs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4c:	e02b      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d115      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da12      	bge.n	8003ba0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3317      	adds	r3, #23
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 faca 	bl	8004134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d3cd      	bcc.n	8003b4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fa6c 	bl	80070a4 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd6:	d156      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd8:	2301      	movs	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bdc:	e045      	b.n	8003c6a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12e      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da2b      	bge.n	8003c64 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	0c1a      	lsrs	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c16:	4053      	eors	r3, r2
 8003c18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d121      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c60:	6053      	str	r3, [r2, #4]
            break;
 8003c62:	e008      	b.n	8003c76 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	3301      	adds	r3, #1
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	791b      	ldrb	r3, [r3, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d3b3      	bcc.n	8003bde <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 fa0a 	bl	80070a4 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f014 f97d 	bl	8017f9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 f9f4 	bl	80070a4 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d115      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f014 f96d 	bl	8017fb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	e000      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cf0:	bf00      	nop
    }
  }
}
 8003cf2:	3734      	adds	r7, #52	@ 0x34
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd90      	pop	{r4, r7, pc}

08003cf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_PCD_SetAddress+0x1a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e012      	b.n	8003d38 <HAL_PCD_SetAddress+0x40>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 f953 	bl	8006fd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	70fb      	strb	r3, [r7, #3]
 8003d52:	460b      	mov	r3, r1
 8003d54:	803b      	strh	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da0f      	bge.n	8003d86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	3310      	adds	r3, #16
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	705a      	strb	r2, [r3, #1]
 8003d84:	e00f      	b.n	8003da6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003db2:	883b      	ldrh	r3, [r7, #0]
 8003db4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	78ba      	ldrb	r2, [r7, #2]
 8003dc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dd4:	78bb      	ldrb	r3, [r7, #2]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d102      	bne.n	8003de0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_PCD_EP_Open+0xae>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e00e      	b.n	8003e0c <HAL_PCD_EP_Open+0xcc>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f002 fad3 	bl	80063a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da0f      	bge.n	8003e48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	3310      	adds	r3, #16
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	705a      	strb	r2, [r3, #1]
 8003e46:	e00f      	b.n	8003e68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_PCD_EP_Close+0x6e>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e00e      	b.n	8003ea0 <HAL_PCD_EP_Close+0x8c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f002 fb11 	bl	80064b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eea:	7afb      	ldrb	r3, [r7, #11]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	799b      	ldrb	r3, [r3, #6]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	799b      	ldrb	r3, [r3, #6]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	f002 fbae 	bl	8006670 <USB_EPStartXfer>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f40:	681b      	ldr	r3, [r3, #0]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	799b      	ldrb	r3, [r3, #6]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	799b      	ldrb	r3, [r3, #6]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6979      	ldr	r1, [r7, #20]
 8003fb4:	f002 fb5c 	bl	8006670 <USB_EPStartXfer>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	7912      	ldrb	r2, [r2, #4]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04f      	b.n	8004080 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da0f      	bge.n	8004008 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	3310      	adds	r3, #16
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	705a      	strb	r2, [r3, #1]
 8004006:	e00d      	b.n	8004024 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	3304      	adds	r3, #4
 800401c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_PCD_EP_SetStall+0x82>
 8004040:	2302      	movs	r3, #2
 8004042:	e01d      	b.n	8004080 <HAL_PCD_EP_SetStall+0xbe>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	4618      	mov	r0, r3
 8004054:	f002 feea 	bl	8006e2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7999      	ldrb	r1, [r3, #6]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004070:	461a      	mov	r2, r3
 8004072:	f003 f8db 	bl	800722c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	7912      	ldrb	r2, [r2, #4]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da0f      	bge.n	80040ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3310      	adds	r3, #16
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	705a      	strb	r2, [r3, #1]
 80040cc:	e00f      	b.n	80040ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_PCD_EP_ClrStall+0x86>
 800410a:	2302      	movs	r3, #2
 800410c:	e00e      	b.n	800412c <HAL_PCD_EP_ClrStall+0xa4>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	4618      	mov	r0, r3
 800411e:	f002 fef3 	bl	8006f08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da0c      	bge.n	8004162 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3310      	adds	r3, #16
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e00c      	b.n	800417c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	4618      	mov	r0, r3
 8004184:	f002 fd12 	bl	8006bac <USB_EPStopXfer>
 8004188:	4603      	mov	r3, r0
 800418a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800418c:	7afb      	ldrb	r3, [r7, #11]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08a      	sub	sp, #40	@ 0x28
 800419a:	af02      	add	r7, sp, #8
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3310      	adds	r3, #16
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d901      	bls.n	80041ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3303      	adds	r3, #3
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f2:	e02a      	b.n	800424a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	429a      	cmp	r2, r3
 8004208:	d902      	bls.n	8004210 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3303      	adds	r3, #3
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68d9      	ldr	r1, [r3, #12]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4603      	mov	r3, r0
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f002 fd67 	bl	8006d00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	429a      	cmp	r2, r3
 800425e:	d809      	bhi.n	8004274 <PCD_WriteEmptyTxFifo+0xde>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004268:	429a      	cmp	r2, r3
 800426a:	d203      	bcs.n	8004274 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1bf      	bne.n	80041f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d811      	bhi.n	80042a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	43db      	mvns	r3, r3
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a0:	4013      	ands	r3, r2
 80042a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	333c      	adds	r3, #60	@ 0x3c
 80042c8:	3304      	adds	r3, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	799b      	ldrb	r3, [r3, #6]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d17b      	bne.n	80043de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d015      	beq.n	800431c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4a61      	ldr	r2, [pc, #388]	@ (8004478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f240 80b9 	bls.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80b3 	beq.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	e0a7      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2320      	movs	r3, #32
 8004336:	6093      	str	r3, [r2, #8]
 8004338:	e098      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8093 	bne.w	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4a4b      	ldr	r2, [pc, #300]	@ (8004478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d90f      	bls.n	800436e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800436a:	6093      	str	r3, [r2, #8]
 800436c:	e07e      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	3304      	adds	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	440b      	add	r3, r1
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d114      	bne.n	80043d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043b8:	461a      	mov	r2, r3
 80043ba:	2101      	movs	r1, #1
 80043bc:	f002 ff36 	bl	800722c <USB_EP0_OutStart>
 80043c0:	e006      	b.n	80043d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	441a      	add	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f013 fd1c 	bl	8017e14 <HAL_PCD_DataOutStageCallback>
 80043dc:	e046      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a26      	ldr	r2, [pc, #152]	@ (800447c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d124      	bne.n	8004430 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e032      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2320      	movs	r3, #32
 8004420:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f013 fcf3 	bl	8017e14 <HAL_PCD_DataOutStageCallback>
 800442e:	e01d      	b.n	800446c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d114      	bne.n	8004460 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004458:	461a      	mov	r2, r3
 800445a:	2100      	movs	r1, #0
 800445c:	f002 fee6 	bl	800722c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f013 fcd4 	bl	8017e14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	4f54300a 	.word	0x4f54300a
 800447c:	4f54310a 	.word	0x4f54310a

08004480 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	333c      	adds	r3, #60	@ 0x3c
 8004498:	3304      	adds	r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a15      	ldr	r2, [pc, #84]	@ (8004508 <PCD_EP_OutSetupPacket_int+0x88>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d90e      	bls.n	80044d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044cc:	461a      	mov	r2, r3
 80044ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f013 fc8b 	bl	8017df0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <PCD_EP_OutSetupPacket_int+0x88>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d90c      	bls.n	80044fc <PCD_EP_OutSetupPacket_int+0x7c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	799b      	ldrb	r3, [r3, #6]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d108      	bne.n	80044fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044f4:	461a      	mov	r2, r3
 80044f6:	2101      	movs	r1, #1
 80044f8:	f002 fe98 	bl	800722c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	4f54300a 	.word	0x4f54300a

0800450c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
 8004518:	4613      	mov	r3, r2
 800451a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800452a:	883b      	ldrh	r3, [r7, #0]
 800452c:	0419      	lsls	r1, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	430a      	orrs	r2, r1
 8004536:	629a      	str	r2, [r3, #40]	@ 0x28
 8004538:	e028      	b.n	800458c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4413      	add	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004548:	2300      	movs	r3, #0
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e00d      	b.n	800456a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3340      	adds	r3, #64	@ 0x40
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	3301      	adds	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	429a      	cmp	r2, r3
 8004572:	d3ec      	bcc.n	800454e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004574:	883b      	ldrh	r3, [r7, #0]
 8004576:	0418      	lsls	r0, r3, #16
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	3b01      	subs	r3, #1
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	4302      	orrs	r2, r0
 8004584:	3340      	adds	r3, #64	@ 0x40
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e267      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d075      	beq.n	80046de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045f2:	4b88      	ldr	r3, [pc, #544]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00c      	beq.n	8004618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fe:	4b85      	ldr	r3, [pc, #532]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004606:	2b08      	cmp	r3, #8
 8004608:	d112      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b82      	ldr	r3, [pc, #520]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004616:	d10b      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b7e      	ldr	r3, [pc, #504]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05b      	beq.n	80046dc <HAL_RCC_OscConfig+0x108>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d157      	bne.n	80046dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e242      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004638:	d106      	bne.n	8004648 <HAL_RCC_OscConfig+0x74>
 800463a:	4b76      	ldr	r3, [pc, #472]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e01d      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x98>
 8004652:	4b70      	ldr	r3, [pc, #448]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6f      	ldr	r2, [pc, #444]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b6d      	ldr	r3, [pc, #436]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6c      	ldr	r2, [pc, #432]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 800466c:	4b69      	ldr	r3, [pc, #420]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a68      	ldr	r2, [pc, #416]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b66      	ldr	r3, [pc, #408]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a65      	ldr	r2, [pc, #404]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd f854 	bl	8001738 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fd f850 	bl	8001738 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	@ 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e207      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0xc0>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd f840 	bl	8001738 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd f83c 	bl	8001738 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	@ 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1f3      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	4b51      	ldr	r3, [pc, #324]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0xe8>
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d063      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f6:	4b47      	ldr	r3, [pc, #284]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d11c      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004702:	4b44      	ldr	r3, [pc, #272]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d116      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470e:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c7      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4937      	ldr	r1, [pc, #220]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	e03a      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004744:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCC_OscConfig+0x244>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fc fff5 	bl	8001738 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fc fff1 	bl	8001738 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1a8      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	4b2b      	ldr	r3, [pc, #172]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b28      	ldr	r3, [pc, #160]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4925      	ldr	r1, [pc, #148]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	e015      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b24      	ldr	r3, [pc, #144]	@ (8004818 <HAL_RCC_OscConfig+0x244>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fc ffd4 	bl	8001738 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004794:	f7fc ffd0 	bl	8001738 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e187      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d036      	beq.n	800482c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c6:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_RCC_OscConfig+0x248>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fc ffb4 	bl	8001738 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fc ffb0 	bl	8001738 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e167      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80047e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x200>
 80047f2:	e01b      	b.n	800482c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_OscConfig+0x248>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fc ff9d 	bl	8001738 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	e00e      	b.n	8004820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004802:	f7fc ff99 	bl	8001738 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d907      	bls.n	8004820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e150      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	42470000 	.word	0x42470000
 800481c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	4b88      	ldr	r3, [pc, #544]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ea      	bne.n	8004802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8097 	beq.w	8004968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483e:	4b81      	ldr	r3, [pc, #516]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	4a7c      	ldr	r2, [pc, #496]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	@ 0x40
 800485a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b77      	ldr	r3, [pc, #476]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b74      	ldr	r3, [pc, #464]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a73      	ldr	r2, [pc, #460]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fc ff59 	bl	8001738 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fc ff55 	bl	8001738 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e10c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x2ea>
 80048b0:	4b64      	ldr	r3, [pc, #400]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a63      	ldr	r2, [pc, #396]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80048bc:	e01c      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x30c>
 80048c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048e0:	4b58      	ldr	r3, [pc, #352]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e4:	4a57      	ldr	r2, [pc, #348]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ec:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a54      	ldr	r2, [pc, #336]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 0304 	bic.w	r3, r3, #4
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fc ff1a 	bl	8001738 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	e00a      	b.n	800491e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fc ff16 	bl	8001738 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0cb      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	4b49      	ldr	r3, [pc, #292]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ee      	beq.n	8004908 <HAL_RCC_OscConfig+0x334>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fc ff04 	bl	8001738 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fc ff00 	bl	8001738 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0b5      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ee      	bne.n	8004934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b39      	ldr	r3, [pc, #228]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	4a38      	ldr	r2, [pc, #224]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80a1 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004972:	4b34      	ldr	r3, [pc, #208]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b08      	cmp	r3, #8
 800497c:	d05c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d141      	bne.n	8004a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fc fed4 	bl	8001738 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004994:	f7fc fed0 	bl	8001738 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e087      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b27      	ldr	r3, [pc, #156]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	491b      	ldr	r1, [pc, #108]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fc fea9 	bl	8001738 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fc fea5 	bl	8001738 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e05c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fc:	4b11      	ldr	r3, [pc, #68]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x416>
 8004a08:	e054      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fe92 	bl	8001738 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fc fe8e 	bl	8001738 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e045      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x444>
 8004a36:	e03d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e038      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d028      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d121      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11a      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a80:	4013      	ands	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d111      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800

08004ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0cc      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d90c      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b65      	ldr	r3, [pc, #404]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b63      	ldr	r3, [pc, #396]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b8      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b18:	4b59      	ldr	r3, [pc, #356]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b30:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a52      	ldr	r2, [pc, #328]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b50      	ldr	r3, [pc, #320]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	494d      	ldr	r1, [pc, #308]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d044      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d119      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b82:	4b3f      	ldr	r3, [pc, #252]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e06f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e067      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba2:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4934      	ldr	r1, [pc, #208]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fc fdc0 	bl	8001738 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbc:	f7fc fdbc 	bl	8001738 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e04f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 020c 	and.w	r2, r3, #12
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1eb      	bne.n	8004bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b25      	ldr	r3, [pc, #148]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d20c      	bcs.n	8004c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b22      	ldr	r3, [pc, #136]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e032      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4916      	ldr	r1, [pc, #88]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c36:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	490e      	ldr	r1, [pc, #56]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c4a:	f000 f821 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	490a      	ldr	r1, [pc, #40]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc f810 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023c00 	.word	0x40023c00
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0801d170 	.word	0x0801d170
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	20000004 	.word	0x20000004

08004c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b090      	sub	sp, #64	@ 0x40
 8004c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca8:	4b59      	ldr	r3, [pc, #356]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	f200 80a1 	bhi.w	8004dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x3a>
 8004cc2:	e09b      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cc8:	e09b      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cca:	4b53      	ldr	r3, [pc, #332]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cce:	e098      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cda:	4b4d      	ldr	r3, [pc, #308]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d028      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	2200      	movs	r2, #0
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4b47      	ldr	r3, [pc, #284]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cfc:	fb03 f201 	mul.w	r2, r3, r1
 8004d00:	2300      	movs	r3, #0
 8004d02:	fb00 f303 	mul.w	r3, r0, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	4a43      	ldr	r2, [pc, #268]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8004d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d10:	460a      	mov	r2, r1
 8004d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d16:	4413      	add	r3, r2
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	61fa      	str	r2, [r7, #28]
 8004d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d2a:	f7fb faa9 	bl	8000280 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4613      	mov	r3, r2
 8004d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d36:	e053      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d38:	4b35      	ldr	r3, [pc, #212]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	2200      	movs	r2, #0
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	617a      	str	r2, [r7, #20]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d4a:	f04f 0b00 	mov.w	fp, #0
 8004d4e:	4652      	mov	r2, sl
 8004d50:	465b      	mov	r3, fp
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	0159      	lsls	r1, r3, #5
 8004d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d60:	0150      	lsls	r0, r2, #5
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	ebb2 080a 	subs.w	r8, r2, sl
 8004d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d82:	ebb2 0408 	subs.w	r4, r2, r8
 8004d86:	eb63 0509 	sbc.w	r5, r3, r9
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	00eb      	lsls	r3, r5, #3
 8004d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d98:	00e2      	lsls	r2, r4, #3
 8004d9a:	4614      	mov	r4, r2
 8004d9c:	461d      	mov	r5, r3
 8004d9e:	eb14 030a 	adds.w	r3, r4, sl
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	eb45 030b 	adc.w	r3, r5, fp
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db6:	4629      	mov	r1, r5
 8004db8:	028b      	lsls	r3, r1, #10
 8004dba:	4621      	mov	r1, r4
 8004dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	028a      	lsls	r2, r1, #10
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	60fa      	str	r2, [r7, #12]
 8004dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dd4:	f7fb fa54 	bl	8000280 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3740      	adds	r7, #64	@ 0x40
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	017d7840 	.word	0x017d7840

08004e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e38:	f7ff fff0 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0a9b      	lsrs	r3, r3, #10
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4903      	ldr	r1, [pc, #12]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0801d180 	.word	0x0801d180

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e60:	f7ff ffdc 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0b5b      	lsrs	r3, r3, #13
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4903      	ldr	r1, [pc, #12]	@ (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0801d180 	.word	0x0801d180

08004e84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	220f      	movs	r2, #15
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e94:	4b12      	ldr	r3, [pc, #72]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec6:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <HAL_RCC_GetClockConfig+0x60>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40023c00 	.word	0x40023c00

08004ee8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e038      	b.n	8004f70 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7fb fc5a 	bl	80007cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 fdfa 	bl	8005b1c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	f000 fe5c 	bl	8005bf0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6858      	ldr	r0, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	f000 fe81 	bl	8005c4c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6892      	ldr	r2, [r2, #8]
 8004f5e:	f041 0101 	orr.w	r1, r1, #1
 8004f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e041      	b.n	800500e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc f898 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f000 f9b6 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e04e      	b.n	80050ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	@ (80050dc <HAL_TIM_Base_Start_IT+0xc4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505a:	d01d      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1f      	ldr	r2, [pc, #124]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a19      	ldr	r2, [pc, #100]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a18      	ldr	r2, [pc, #96]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d010      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e007      	b.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40001800 	.word	0x40001800

080050f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8d2 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8c4 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8d5 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0204 	mvn.w	r2, #4
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8ac 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f89e 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8af 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0208 	mvn.w	r2, #8
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2204      	movs	r2, #4
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f886 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f878 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f889 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f860 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f852 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f863 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fbae 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f97c 	bl	8005580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f834 	bl	8005314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0220 	mvn.w	r2, #32
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f94e 	bl	800556c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a43      	ldr	r2, [pc, #268]	@ (8005448 <TIM_Base_SetConfig+0x120>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d00f      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a40      	ldr	r2, [pc, #256]	@ (800544c <TIM_Base_SetConfig+0x124>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3f      	ldr	r2, [pc, #252]	@ (8005450 <TIM_Base_SetConfig+0x128>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3e      	ldr	r2, [pc, #248]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3d      	ldr	r2, [pc, #244]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a32      	ldr	r2, [pc, #200]	@ (8005448 <TIM_Base_SetConfig+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d027      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2f      	ldr	r2, [pc, #188]	@ (800544c <TIM_Base_SetConfig+0x124>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d023      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2e      	ldr	r2, [pc, #184]	@ (8005450 <TIM_Base_SetConfig+0x128>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2d      	ldr	r2, [pc, #180]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	@ (800545c <TIM_Base_SetConfig+0x134>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a29      	ldr	r2, [pc, #164]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	@ (8005468 <TIM_Base_SetConfig+0x140>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a27      	ldr	r2, [pc, #156]	@ (800546c <TIM_Base_SetConfig+0x144>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <TIM_Base_SetConfig+0x148>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a0e      	ldr	r2, [pc, #56]	@ (8005448 <TIM_Base_SetConfig+0x120>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_Base_SetConfig+0xf2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d103      	bne.n	8005422 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f043 0204 	orr.w	r2, r3, #4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40010400 	.word	0x40010400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	40001800 	.word	0x40001800
 800546c:	40001c00 	.word	0x40001c00
 8005470:	40002000 	.word	0x40002000

08005474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e05a      	b.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d8:	d01d      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1a      	ldr	r2, [pc, #104]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a17      	ldr	r2, [pc, #92]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a15      	ldr	r2, [pc, #84]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d10c      	bne.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4313      	orrs	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40014000 	.word	0x40014000
 8005568:	40001800 	.word	0x40001800

0800556c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e042      	b.n	800562c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fe06 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	@ 0x24
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f82b 	bl	8005634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800560c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b0c0      	sub	sp, #256	@ 0x100
 800563a:	af00      	add	r7, sp, #0
 800563c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	ea40 0301 	orr.w	r3, r0, r1
 800565c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	431a      	orrs	r2, r3
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	431a      	orrs	r2, r3
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800568c:	f021 010c 	bic.w	r1, r1, #12
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800569a:	430b      	orrs	r3, r1
 800569c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	6999      	ldr	r1, [r3, #24]
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	ea40 0301 	orr.w	r3, r0, r1
 80056ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005900 <UART_SetConfig+0x2cc>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d005      	beq.n	80056d4 <UART_SetConfig+0xa0>
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005904 <UART_SetConfig+0x2d0>)
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d104      	bne.n	80056de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7ff fbc2 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80056d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056dc:	e003      	b.n	80056e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7ff fba9 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 80056e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f0:	f040 810c 	bne.w	800590c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	1891      	adds	r1, r2, r2
 800570c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800570e:	415b      	adcs	r3, r3
 8005710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005716:	4621      	mov	r1, r4
 8005718:	eb12 0801 	adds.w	r8, r2, r1
 800571c:	4629      	mov	r1, r5
 800571e:	eb43 0901 	adc.w	r9, r3, r1
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800572e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005736:	4690      	mov	r8, r2
 8005738:	4699      	mov	r9, r3
 800573a:	4623      	mov	r3, r4
 800573c:	eb18 0303 	adds.w	r3, r8, r3
 8005740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005744:	462b      	mov	r3, r5
 8005746:	eb49 0303 	adc.w	r3, r9, r3
 800574a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800575a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800575e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005762:	460b      	mov	r3, r1
 8005764:	18db      	adds	r3, r3, r3
 8005766:	653b      	str	r3, [r7, #80]	@ 0x50
 8005768:	4613      	mov	r3, r2
 800576a:	eb42 0303 	adc.w	r3, r2, r3
 800576e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005778:	f7fa fd82 	bl	8000280 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4b61      	ldr	r3, [pc, #388]	@ (8005908 <UART_SetConfig+0x2d4>)
 8005782:	fba3 2302 	umull	r2, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	011c      	lsls	r4, r3, #4
 800578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005794:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800579c:	4642      	mov	r2, r8
 800579e:	464b      	mov	r3, r9
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057a4:	415b      	adcs	r3, r3
 80057a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057ac:	4641      	mov	r1, r8
 80057ae:	eb12 0a01 	adds.w	sl, r2, r1
 80057b2:	4649      	mov	r1, r9
 80057b4:	eb43 0b01 	adc.w	fp, r3, r1
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057cc:	4692      	mov	sl, r2
 80057ce:	469b      	mov	fp, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	eb1a 0303 	adds.w	r3, sl, r3
 80057d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057da:	464b      	mov	r3, r9
 80057dc:	eb4b 0303 	adc.w	r3, fp, r3
 80057e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057f8:	460b      	mov	r3, r1
 80057fa:	18db      	adds	r3, r3, r3
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fe:	4613      	mov	r3, r2
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	647b      	str	r3, [r7, #68]	@ 0x44
 8005806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800580a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800580e:	f7fa fd37 	bl	8000280 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4611      	mov	r1, r2
 8005818:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <UART_SetConfig+0x2d4>)
 800581a:	fba3 2301 	umull	r2, r3, r3, r1
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2264      	movs	r2, #100	@ 0x64
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	1acb      	subs	r3, r1, r3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800582e:	4b36      	ldr	r3, [pc, #216]	@ (8005908 <UART_SetConfig+0x2d4>)
 8005830:	fba3 2302 	umull	r2, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800583c:	441c      	add	r4, r3
 800583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005842:	2200      	movs	r2, #0
 8005844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005848:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800584c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	1891      	adds	r1, r2, r2
 8005856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005858:	415b      	adcs	r3, r3
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005860:	4641      	mov	r1, r8
 8005862:	1851      	adds	r1, r2, r1
 8005864:	6339      	str	r1, [r7, #48]	@ 0x30
 8005866:	4649      	mov	r1, r9
 8005868:	414b      	adcs	r3, r1
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005878:	4659      	mov	r1, fp
 800587a:	00cb      	lsls	r3, r1, #3
 800587c:	4651      	mov	r1, sl
 800587e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005882:	4651      	mov	r1, sl
 8005884:	00ca      	lsls	r2, r1, #3
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	4603      	mov	r3, r0
 800588c:	4642      	mov	r2, r8
 800588e:	189b      	adds	r3, r3, r2
 8005890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005894:	464b      	mov	r3, r9
 8005896:	460a      	mov	r2, r1
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058b4:	460b      	mov	r3, r1
 80058b6:	18db      	adds	r3, r3, r3
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ba:	4613      	mov	r3, r2
 80058bc:	eb42 0303 	adc.w	r3, r2, r3
 80058c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058ca:	f7fa fcd9 	bl	8000280 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <UART_SetConfig+0x2d4>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	@ 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	3332      	adds	r3, #50	@ 0x32
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <UART_SetConfig+0x2d4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 0207 	and.w	r2, r3, #7
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4422      	add	r2, r4
 80058fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058fc:	e106      	b.n	8005b0c <UART_SetConfig+0x4d8>
 80058fe:	bf00      	nop
 8005900:	40011000 	.word	0x40011000
 8005904:	40011400 	.word	0x40011400
 8005908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800591a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	1891      	adds	r1, r2, r2
 8005924:	6239      	str	r1, [r7, #32]
 8005926:	415b      	adcs	r3, r3
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
 800592a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800592e:	4641      	mov	r1, r8
 8005930:	1854      	adds	r4, r2, r1
 8005932:	4649      	mov	r1, r9
 8005934:	eb43 0501 	adc.w	r5, r3, r1
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	00eb      	lsls	r3, r5, #3
 8005942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005946:	00e2      	lsls	r2, r4, #3
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	4643      	mov	r3, r8
 800594e:	18e3      	adds	r3, r4, r3
 8005950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005954:	464b      	mov	r3, r9
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800596a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800597a:	4629      	mov	r1, r5
 800597c:	008b      	lsls	r3, r1, #2
 800597e:	4621      	mov	r1, r4
 8005980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005984:	4621      	mov	r1, r4
 8005986:	008a      	lsls	r2, r1, #2
 8005988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800598c:	f7fa fc78 	bl	8000280 <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4b60      	ldr	r3, [pc, #384]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005996:	fba3 2302 	umull	r2, r3, r3, r2
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	011c      	lsls	r4, r3, #4
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	61b9      	str	r1, [r7, #24]
 80059b8:	415b      	adcs	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c0:	4641      	mov	r1, r8
 80059c2:	1851      	adds	r1, r2, r1
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	4649      	mov	r1, r9
 80059c8:	414b      	adcs	r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	00cb      	lsls	r3, r1, #3
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e2:	4651      	mov	r1, sl
 80059e4:	00ca      	lsls	r2, r1, #3
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	4642      	mov	r2, r8
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059f4:	464b      	mov	r3, r9
 80059f6:	460a      	mov	r2, r1
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a18:	4649      	mov	r1, r9
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a22:	4641      	mov	r1, r8
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a2a:	f7fa fc29 	bl	8000280 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2264      	movs	r2, #100	@ 0x64
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	1acb      	subs	r3, r1, r3
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	3332      	adds	r3, #50	@ 0x32
 8005a48:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a54:	441c      	add	r4, r3
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a74:	4641      	mov	r1, r8
 8005a76:	1851      	adds	r1, r2, r1
 8005a78:	6039      	str	r1, [r7, #0]
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	414b      	adcs	r3, r1
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	00cb      	lsls	r3, r1, #3
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a96:	4651      	mov	r1, sl
 8005a98:	00ca      	lsls	r2, r1, #3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	eb42 0303 	adc.w	r3, r2, r3
 8005aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ac8:	4649      	mov	r1, r9
 8005aca:	008b      	lsls	r3, r1, #2
 8005acc:	4641      	mov	r1, r8
 8005ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	008a      	lsls	r2, r1, #2
 8005ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ada:	f7fa fbd1 	bl	8000280 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	@ 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3332      	adds	r3, #50	@ 0x32
 8005af6:	4a08      	ldr	r2, [pc, #32]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4422      	add	r2, r4
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b12:	46bd      	mov	sp, r7
 8005b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b18:	51eb851f 	.word	0x51eb851f

08005b1c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	f023 0101 	bic.w	r1, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d102      	bne.n	8005b4c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005b46:	2340      	movs	r3, #64	@ 0x40
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e001      	b.n	8005b50 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005b5c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005b62:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005b68:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005b6e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005b74:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005b7a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005b80:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005b86:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005b8c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005baa:	4b10      	ldr	r3, [pc, #64]	@ (8005bec <FSMC_NORSRAM_Init+0xd0>)
 8005bac:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bb4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005bbc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	ea02 0103 	and.w	r1, r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4319      	orrs	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	0008fb7f 	.word	0x0008fb7f

08005bf0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005c06:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005c0e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005c16:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005c20:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	3b02      	subs	r3, #2
 8005c28:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005c36:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c60:	d11d      	bne.n	8005c9e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c6a:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	0112      	lsls	r2, r2, #4
 8005c78:	4311      	orrs	r1, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	0212      	lsls	r2, r2, #8
 8005c80:	4311      	orrs	r1, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	6992      	ldr	r2, [r2, #24]
 8005c86:	4311      	orrs	r1, r2
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68d2      	ldr	r2, [r2, #12]
 8005c8c:	0412      	lsls	r2, r2, #16
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	ea43 0102 	orr.w	r1, r3, r2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005c9c:	e005      	b.n	8005caa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	cff00000 	.word	0xcff00000

08005cbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	f107 001c 	add.w	r0, r7, #28
 8005cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d123      	bne.n	8005d1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 fae8 	bl	80072e8 <USB_CoreReset>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
 8005d1c:	e01b      	b.n	8005d56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fadc 	bl	80072e8 <USB_CoreReset>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d48:	e005      	b.n	8005d56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d56:	7fbb      	ldrb	r3, [r7, #30]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10b      	bne.n	8005d74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f043 0206 	orr.w	r2, r3, #6
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d80:	b004      	add	sp, #16
 8005d82:	4770      	bx	lr

08005d84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d165      	bne.n	8005e64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4a41      	ldr	r2, [pc, #260]	@ (8005ea0 <USB_SetTurnaroundTime+0x11c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d906      	bls.n	8005dae <USB_SetTurnaroundTime+0x2a>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4a40      	ldr	r2, [pc, #256]	@ (8005ea4 <USB_SetTurnaroundTime+0x120>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d202      	bcs.n	8005dae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005da8:	230f      	movs	r3, #15
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	e062      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea4 <USB_SetTurnaroundTime+0x120>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d306      	bcc.n	8005dc4 <USB_SetTurnaroundTime+0x40>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ea8 <USB_SetTurnaroundTime+0x124>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d202      	bcs.n	8005dc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dbe:	230e      	movs	r3, #14
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e057      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4a38      	ldr	r2, [pc, #224]	@ (8005ea8 <USB_SetTurnaroundTime+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d306      	bcc.n	8005dda <USB_SetTurnaroundTime+0x56>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a37      	ldr	r2, [pc, #220]	@ (8005eac <USB_SetTurnaroundTime+0x128>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d202      	bcs.n	8005dda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dd4:	230d      	movs	r3, #13
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e04c      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4a33      	ldr	r2, [pc, #204]	@ (8005eac <USB_SetTurnaroundTime+0x128>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d306      	bcc.n	8005df0 <USB_SetTurnaroundTime+0x6c>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4a32      	ldr	r2, [pc, #200]	@ (8005eb0 <USB_SetTurnaroundTime+0x12c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d802      	bhi.n	8005df0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dea:	230c      	movs	r3, #12
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	e041      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb0 <USB_SetTurnaroundTime+0x12c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d906      	bls.n	8005e06 <USB_SetTurnaroundTime+0x82>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb4 <USB_SetTurnaroundTime+0x130>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d802      	bhi.n	8005e06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e00:	230b      	movs	r3, #11
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e036      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb4 <USB_SetTurnaroundTime+0x130>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d906      	bls.n	8005e1c <USB_SetTurnaroundTime+0x98>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a29      	ldr	r2, [pc, #164]	@ (8005eb8 <USB_SetTurnaroundTime+0x134>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d802      	bhi.n	8005e1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e16:	230a      	movs	r3, #10
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e02b      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a26      	ldr	r2, [pc, #152]	@ (8005eb8 <USB_SetTurnaroundTime+0x134>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d906      	bls.n	8005e32 <USB_SetTurnaroundTime+0xae>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a25      	ldr	r2, [pc, #148]	@ (8005ebc <USB_SetTurnaroundTime+0x138>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d202      	bcs.n	8005e32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e2c:	2309      	movs	r3, #9
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e020      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a21      	ldr	r2, [pc, #132]	@ (8005ebc <USB_SetTurnaroundTime+0x138>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d306      	bcc.n	8005e48 <USB_SetTurnaroundTime+0xc4>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a20      	ldr	r2, [pc, #128]	@ (8005ec0 <USB_SetTurnaroundTime+0x13c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d802      	bhi.n	8005e48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e42:	2308      	movs	r3, #8
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e015      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec0 <USB_SetTurnaroundTime+0x13c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d906      	bls.n	8005e5e <USB_SetTurnaroundTime+0xda>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec4 <USB_SetTurnaroundTime+0x140>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d202      	bcs.n	8005e5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e58:	2307      	movs	r3, #7
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e00a      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e5e:	2306      	movs	r3, #6
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e007      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e6a:	2309      	movs	r3, #9
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e001      	b.n	8005e74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e70:	2309      	movs	r3, #9
 8005e72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	00d8acbf 	.word	0x00d8acbf
 8005ea4:	00e4e1c0 	.word	0x00e4e1c0
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	01067380 	.word	0x01067380
 8005eb0:	011a499f 	.word	0x011a499f
 8005eb4:	01312cff 	.word	0x01312cff
 8005eb8:	014ca43f 	.word	0x014ca43f
 8005ebc:	016e3600 	.word	0x016e3600
 8005ec0:	01a6ab1f 	.word	0x01a6ab1f
 8005ec4:	01e84800 	.word	0x01e84800

08005ec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f043 0201 	orr.w	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d115      	bne.n	8005f5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f3a:	200a      	movs	r0, #10
 8005f3c:	f7fb fc08 	bl	8001750 <HAL_Delay>
      ms += 10U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	330a      	adds	r3, #10
 8005f44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f93f 	bl	80071ca <USB_GetMode>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d01e      	beq.n	8005f90 <USB_SetCurrentMode+0x84>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f56:	d9f0      	bls.n	8005f3a <USB_SetCurrentMode+0x2e>
 8005f58:	e01a      	b.n	8005f90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d115      	bne.n	8005f8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f6c:	200a      	movs	r0, #10
 8005f6e:	f7fb fbef 	bl	8001750 <HAL_Delay>
      ms += 10U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	330a      	adds	r3, #10
 8005f76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f926 	bl	80071ca <USB_GetMode>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <USB_SetCurrentMode+0x84>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f88:	d9f0      	bls.n	8005f6c <USB_SetCurrentMode+0x60>
 8005f8a:	e001      	b.n	8005f90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e005      	b.n	8005f9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f94:	d101      	bne.n	8005f9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	e009      	b.n	8005fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3340      	adds	r3, #64	@ 0x40
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b0e      	cmp	r3, #14
 8005fdc:	d9f2      	bls.n	8005fc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11c      	bne.n	8006020 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	@ 0x38
 800601e:	e00b      	b.n	8006038 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006024:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800603e:	461a      	mov	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006044:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006048:	2b01      	cmp	r3, #1
 800604a:	d10d      	bne.n	8006068 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f968 	bl	800632c <USB_SetDevSpeed>
 800605c:	e008      	b.n	8006070 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800605e:	2101      	movs	r1, #1
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f963 	bl	800632c <USB_SetDevSpeed>
 8006066:	e003      	b.n	8006070 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006068:	2103      	movs	r1, #3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f95e 	bl	800632c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006070:	2110      	movs	r1, #16
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8fa 	bl	800626c <USB_FlushTxFifo>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f924 	bl	80062d0 <USB_FlushRxFifo>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006098:	461a      	mov	r2, r3
 800609a:	2300      	movs	r3, #0
 800609c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b0:	461a      	mov	r2, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e043      	b.n	8006144 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060d2:	d118      	bne.n	8006106 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e013      	b.n	8006118 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e008      	b.n	8006118 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006112:	461a      	mov	r2, r3
 8006114:	2300      	movs	r3, #0
 8006116:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	2300      	movs	r3, #0
 8006128:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006136:	461a      	mov	r2, r3
 8006138:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800613c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006148:	461a      	mov	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4293      	cmp	r3, r2
 800614e:	d3b5      	bcc.n	80060bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e043      	b.n	80061de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800616c:	d118      	bne.n	80061a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	e013      	b.n	80061b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006196:	461a      	mov	r2, r3
 8006198:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e008      	b.n	80061b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ac:	461a      	mov	r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	461a      	mov	r2, r3
 80061c0:	2300      	movs	r3, #0
 80061c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d0:	461a      	mov	r2, r3
 80061d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3301      	adds	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d3b5      	bcc.n	8006156 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800620a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800620c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f043 0210 	orr.w	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <USB_DevInit+0x2c4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800622c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f043 0208 	orr.w	r2, r3, #8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006240:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006244:	2b01      	cmp	r3, #1
 8006246:	d107      	bne.n	8006258 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006250:	f043 0304 	orr.w	r3, r3, #4
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006264:	b004      	add	sp, #16
 8006266:	4770      	bx	lr
 8006268:	803c3800 	.word	0x803c3800

0800626c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006286:	d901      	bls.n	800628c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e01b      	b.n	80062c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	daf2      	bge.n	800627a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	019b      	lsls	r3, r3, #6
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b0:	d901      	bls.n	80062b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e006      	b.n	80062c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d0f0      	beq.n	80062a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062e8:	d901      	bls.n	80062ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e018      	b.n	8006320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	daf2      	bge.n	80062dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2210      	movs	r2, #16
 80062fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800630c:	d901      	bls.n	8006312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e006      	b.n	8006320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b10      	cmp	r3, #16
 800631c:	d0f0      	beq.n	8006300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0306 	and.w	r3, r3, #6
 8006376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]
 8006382:	e00a      	b.n	800639a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d002      	beq.n	8006390 <USB_GetDevSpeed+0x32>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d102      	bne.n	8006396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006390:	2302      	movs	r3, #2
 8006392:	75fb      	strb	r3, [r7, #23]
 8006394:	e001      	b.n	800639a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006396:	230f      	movs	r3, #15
 8006398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
}
 800639c:	4618      	mov	r0, r3
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d13a      	bne.n	800643a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	b29b      	uxth	r3, r3
 80063dc:	68f9      	ldr	r1, [r7, #12]
 80063de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d155      	bne.n	80064a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	059b      	lsls	r3, r3, #22
 800641e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006420:	4313      	orrs	r3, r2
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800642e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e036      	b.n	80064a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	2101      	movs	r1, #1
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006458:	4313      	orrs	r3, r2
 800645a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11a      	bne.n	80064a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	791b      	ldrb	r3, [r3, #4]
 800648c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800648e:	430b      	orrs	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d161      	bne.n	8006598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ea:	d11f      	bne.n	800652c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006506:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800650a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800652a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800654c:	4013      	ands	r3, r2
 800654e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f303 	lsl.w	r3, r1, r3
 8006566:	b29b      	uxth	r3, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006570:	4013      	ands	r3, r2
 8006572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0159      	lsls	r1, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	440b      	add	r3, r1
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	4619      	mov	r1, r3
 8006590:	4b35      	ldr	r3, [pc, #212]	@ (8006668 <USB_DeactivateEndpoint+0x1b0>)
 8006592:	4013      	ands	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
 8006596:	e060      	b.n	800665a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ae:	d11f      	bne.n	80065f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	43db      	mvns	r3, r3
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006610:	4013      	ands	r3, r2
 8006612:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	2101      	movs	r1, #1
 8006626:	fa01 f303 	lsl.w	r3, r1, r3
 800662a:	041b      	lsls	r3, r3, #16
 800662c:	43db      	mvns	r3, r3
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006634:	4013      	ands	r3, r2
 8006636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	0159      	lsls	r1, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	440b      	add	r3, r1
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	4619      	mov	r1, r3
 8006654:	4b05      	ldr	r3, [pc, #20]	@ (800666c <USB_DeactivateEndpoint+0x1b4>)
 8006656:	4013      	ands	r3, r2
 8006658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	ec337800 	.word	0xec337800
 800666c:	eff37800 	.word	0xeff37800

08006670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	@ 0x28
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 817f 	bne.w	8006990 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d132      	bne.n	8006700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f8:	0cdb      	lsrs	r3, r3, #19
 80066fa:	04db      	lsls	r3, r3, #19
 80066fc:	6113      	str	r3, [r2, #16]
 80066fe:	e097      	b.n	8006830 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671a:	0cdb      	lsrs	r3, r3, #19
 800671c:	04db      	lsls	r3, r3, #19
 800671e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800673a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800673e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006742:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11a      	bne.n	8006780 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	d903      	bls.n	800675e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800677c:	6113      	str	r3, [r2, #16]
 800677e:	e044      	b.n	800680a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4413      	add	r3, r2
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	04d9      	lsls	r1, r3, #19
 80067a8:	4ba4      	ldr	r3, [pc, #656]	@ (8006a3c <USB_EPStartXfer+0x3cc>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	0148      	lsls	r0, r1, #5
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	4401      	add	r1, r0
 80067b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80067b8:	4313      	orrs	r3, r2
 80067ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	791b      	ldrb	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d122      	bne.n	800680a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80067e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	8afb      	ldrh	r3, [r7, #22]
 80067f4:	075b      	lsls	r3, r3, #29
 80067f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80067fa:	69b9      	ldr	r1, [r7, #24]
 80067fc:	0148      	lsls	r0, r1, #5
 80067fe:	69f9      	ldr	r1, [r7, #28]
 8006800:	4401      	add	r1, r0
 8006802:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006806:	4313      	orrs	r3, r2
 8006808:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006820:	69b9      	ldr	r1, [r7, #24]
 8006822:	0148      	lsls	r0, r1, #5
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	4401      	add	r1, r0
 8006828:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800682c:	4313      	orrs	r3, r2
 800682e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d14b      	bne.n	80068ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684a:	461a      	mov	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	791b      	ldrb	r3, [r3, #4]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d128      	bne.n	80068ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d110      	bne.n	800688c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006884:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e00f      	b.n	80068ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e166      	b.n	8006b9c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	791b      	ldrb	r3, [r3, #4]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d015      	beq.n	8006922 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 814e 	beq.w	8006b9c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	69f9      	ldr	r1, [r7, #28]
 8006918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800691c:	4313      	orrs	r3, r2
 800691e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006920:	e13c      	b.n	8006b9c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692e:	2b00      	cmp	r3, #0
 8006930:	d110      	bne.n	8006954 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e00f      	b.n	8006974 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	440a      	add	r2, r1
 800696a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006972:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	68d9      	ldr	r1, [r3, #12]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	b298      	uxth	r0, r3
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4603      	mov	r3, r0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f9b9 	bl	8006d00 <USB_WritePacket>
 800698e:	e105      	b.n	8006b9c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069aa:	0cdb      	lsrs	r3, r3, #19
 80069ac:	04db      	lsls	r3, r3, #19
 80069ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d132      	bne.n	8006a40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a08:	69b9      	ldr	r1, [r7, #24]
 8006a0a:	0148      	lsls	r0, r1, #5
 8006a0c:	69f9      	ldr	r1, [r7, #28]
 8006a0e:	4401      	add	r1, r0
 8006a10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a14:	4313      	orrs	r3, r2
 8006a16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a36:	6113      	str	r3, [r2, #16]
 8006a38:	e062      	b.n	8006b00 <USB_EPStartXfer+0x490>
 8006a3a:	bf00      	nop
 8006a3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d123      	bne.n	8006a90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	0148      	lsls	r0, r1, #5
 8006a62:	69f9      	ldr	r1, [r7, #28]
 8006a64:	4401      	add	r1, r0
 8006a66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
 8006a8e:	e037      	b.n	8006b00 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	8afa      	ldrh	r2, [r7, #22]
 8006aac:	fb03 f202 	mul.w	r2, r3, r2
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	8afb      	ldrh	r3, [r7, #22]
 8006ac4:	04d9      	lsls	r1, r3, #19
 8006ac6:	4b38      	ldr	r3, [pc, #224]	@ (8006ba8 <USB_EPStartXfer+0x538>)
 8006ac8:	400b      	ands	r3, r1
 8006aca:	69b9      	ldr	r1, [r7, #24]
 8006acc:	0148      	lsls	r0, r1, #5
 8006ace:	69f9      	ldr	r1, [r7, #28]
 8006ad0:	4401      	add	r1, r0
 8006ad2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af0:	69b9      	ldr	r1, [r7, #24]
 8006af2:	0148      	lsls	r0, r1, #5
 8006af4:	69f9      	ldr	r1, [r7, #28]
 8006af6:	4401      	add	r1, r0
 8006af8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006afc:	4313      	orrs	r3, r2
 8006afe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d10d      	bne.n	8006b22 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	68d9      	ldr	r1, [r3, #12]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	460a      	mov	r2, r1
 8006b20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d128      	bne.n	8006b7c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d110      	bne.n	8006b5c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e00f      	b.n	8006b7c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	1ff80000 	.word	0x1ff80000

08006bac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d14a      	bne.n	8006c60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006be2:	f040 8086 	bne.w	8006cf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	7812      	ldrb	r2, [r2, #0]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d902      	bls.n	8006c44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
          break;
 8006c42:	e056      	b.n	8006cf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c5c:	d0e7      	beq.n	8006c2e <USB_EPStopXfer+0x82>
 8006c5e:	e048      	b.n	8006cf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c78:	d13b      	bne.n	8006cf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	7812      	ldrb	r2, [r2, #0]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	7812      	ldrb	r2, [r2, #0]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d902      	bls.n	8006cd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd6:	e00c      	b.n	8006cf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf0:	d0e7      	beq.n	8006cc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	@ 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	460b      	mov	r3, r1
 8006d10:	71fb      	strb	r3, [r7, #7]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d123      	bne.n	8006d6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d26:	88bb      	ldrh	r3, [r7, #4]
 8006d28:	3303      	adds	r3, #3
 8006d2a:	089b      	lsrs	r3, r3, #2
 8006d2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e018      	b.n	8006d66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	031a      	lsls	r2, r3, #12
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d40:	461a      	mov	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	3301      	adds	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	3301      	adds	r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	3301      	adds	r3, #1
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d3e2      	bcc.n	8006d34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3724      	adds	r7, #36	@ 0x24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b08b      	sub	sp, #44	@ 0x2c
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006da2:	2300      	movs	r3, #0
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	e014      	b.n	8006dd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	3301      	adds	r3, #1
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	3301      	adds	r3, #1
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	623b      	str	r3, [r7, #32]
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3e6      	bcc.n	8006da8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dda:	8bfb      	ldrh	r3, [r7, #30]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dea:	461a      	mov	r2, r3
 8006dec:	f107 0310 	add.w	r3, r7, #16
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	701a      	strb	r2, [r3, #0]
      i++;
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	3301      	adds	r3, #1
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e12:	8bfb      	ldrh	r3, [r7, #30]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e18:	8bfb      	ldrh	r3, [r7, #30]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1ea      	bne.n	8006df4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	372c      	adds	r7, #44	@ 0x2c
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d12c      	bne.n	8006ea2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	db12      	blt.n	8006e80 <USB_EPSetStall+0x54>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00f      	beq.n	8006e80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	e02b      	b.n	8006efa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db12      	blt.n	8006eda <USB_EPSetStall+0xae>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00f      	beq.n	8006eda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ed8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ef8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	791b      	ldrb	r3, [r3, #4]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d003      	beq.n	8006f54 <USB_EPClearStall+0x4c>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	791b      	ldrb	r3, [r3, #4]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d138      	bne.n	8006fc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e027      	b.n	8006fc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	791b      	ldrb	r3, [r3, #4]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d003      	beq.n	8006fa6 <USB_EPClearStall+0x9e>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	791b      	ldrb	r3, [r3, #4]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d10f      	bne.n	8006fc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ff2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006ff6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800704e:	f023 0302 	bic.w	r3, r3, #2
 8007052:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800707c:	f023 0303 	bic.w	r3, r3, #3
 8007080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4013      	ands	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	0c1b      	lsrs	r3, r3, #16
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	b29b      	uxth	r3, r3
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007160:	68bb      	ldr	r3, [r7, #8]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007190:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	01db      	lsls	r3, r3, #7
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4013      	ands	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071bc:	68bb      	ldr	r3, [r7, #8]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0301 	and.w	r3, r3, #1
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007200:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007204:	f023 0307 	bic.w	r3, r3, #7
 8007208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800721c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	460b      	mov	r3, r1
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	333c      	adds	r3, #60	@ 0x3c
 8007242:	3304      	adds	r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4a26      	ldr	r2, [pc, #152]	@ (80072e4 <USB_EP0_OutStart+0xb8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d90a      	bls.n	8007266 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800725c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007260:	d101      	bne.n	8007266 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e037      	b.n	80072d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007280:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007294:	f043 0318 	orr.w	r3, r3, #24
 8007298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80072ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d10f      	bne.n	80072d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80072d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	4f54300a 	.word	0x4f54300a

080072e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007300:	d901      	bls.n	8007306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e022      	b.n	800734c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	daf2      	bge.n	80072f4 <USB_CoreReset+0xc>

  count = 10U;
 800730e:	230a      	movs	r3, #10
 8007310:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007312:	e002      	b.n	800731a <USB_CoreReset+0x32>
  {
    count--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b01      	subs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f9      	bne.n	8007314 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f043 0201 	orr.w	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007338:	d901      	bls.n	800733e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e006      	b.n	800734c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b01      	cmp	r3, #1
 8007348:	d0f0      	beq.n	800732c <USB_CoreReset+0x44>

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7f8 ff35 	bl	80001d0 <strlen>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <lwip_cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	b29b      	uxth	r3, r3
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f010 fb9e 	bl	8017ab8 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 800737c:	2001      	movs	r0, #1
 800737e:	f7fa f9e7 	bl	8001750 <HAL_Delay>
  }
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b0a6      	sub	sp, #152	@ 0x98
 8007390:	af02      	add	r7, sp, #8
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 8007396:	f7fa f9cf 	bl	8001738 <HAL_GetTick>
 800739a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800739e:	f107 000c 	add.w	r0, r7, #12
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ae:	4a06      	ldr	r2, [pc, #24]	@ (80073c8 <lwip_cdc_debug_log+0x3c>)
 80073b0:	2180      	movs	r1, #128	@ 0x80
 80073b2:	f011 f8ef 	bl	8018594 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 80073b6:	f107 030c 	add.w	r3, r7, #12
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ffcc 	bl	8007358 <lwip_cdc_debug_printf>
}
 80073c0:	bf00      	nop
 80073c2:	3790      	adds	r7, #144	@ 0x90
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08019898 	.word	0x08019898

080073cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80073cc:	b5b0      	push	{r4, r5, r7, lr}
 80073ce:	b0ac      	sub	sp, #176	@ 0xb0
 80073d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80073d2:	4bac      	ldr	r3, [pc, #688]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80073d4:	22c0      	movs	r2, #192	@ 0xc0
 80073d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80073d8:	4baa      	ldr	r3, [pc, #680]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80073da:	22a8      	movs	r2, #168	@ 0xa8
 80073dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 80073de:	4ba9      	ldr	r3, [pc, #676]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80073e0:	220a      	movs	r2, #10
 80073e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 80073e4:	4ba7      	ldr	r3, [pc, #668]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80073e6:	2258      	movs	r2, #88	@ 0x58
 80073e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80073ea:	4ba7      	ldr	r3, [pc, #668]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80073ec:	22ff      	movs	r2, #255	@ 0xff
 80073ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80073f0:	4ba5      	ldr	r3, [pc, #660]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80073f2:	22ff      	movs	r2, #255	@ 0xff
 80073f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80073f6:	4ba4      	ldr	r3, [pc, #656]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80073f8:	22ff      	movs	r2, #255	@ 0xff
 80073fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80073fc:	4ba2      	ldr	r3, [pc, #648]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80073fe:	2200      	movs	r2, #0
 8007400:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007402:	4ba2      	ldr	r3, [pc, #648]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007408:	4ba0      	ldr	r3, [pc, #640]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800740a:	2200      	movs	r2, #0
 800740c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800740e:	4b9f      	ldr	r3, [pc, #636]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007410:	2200      	movs	r2, #0
 8007412:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007414:	4b9d      	ldr	r3, [pc, #628]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007416:	2200      	movs	r2, #0
 8007418:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800741a:	4b9a      	ldr	r3, [pc, #616]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	461c      	mov	r4, r3
 8007420:	4b98      	ldr	r3, [pc, #608]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	461a      	mov	r2, r3
 8007426:	4b97      	ldr	r3, [pc, #604]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007428:	789b      	ldrb	r3, [r3, #2]
 800742a:	4619      	mov	r1, r3
 800742c:	4b95      	ldr	r3, [pc, #596]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800742e:	78db      	ldrb	r3, [r3, #3]
 8007430:	f107 0020 	add.w	r0, r7, #32
 8007434:	9302      	str	r3, [sp, #8]
 8007436:	9101      	str	r1, [sp, #4]
 8007438:	9200      	str	r2, [sp, #0]
 800743a:	4623      	mov	r3, r4
 800743c:	4a94      	ldr	r2, [pc, #592]	@ (8007690 <MX_LWIP_Init+0x2c4>)
 800743e:	2180      	movs	r1, #128	@ 0x80
 8007440:	f011 f8a8 	bl	8018594 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 8007444:	f107 0320 	add.w	r3, r7, #32
 8007448:	4619      	mov	r1, r3
 800744a:	4892      	ldr	r0, [pc, #584]	@ (8007694 <MX_LWIP_Init+0x2c8>)
 800744c:	f7ff ff9e 	bl	800738c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007450:	4b8d      	ldr	r3, [pc, #564]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	461c      	mov	r4, r3
 8007456:	4b8c      	ldr	r3, [pc, #560]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	461a      	mov	r2, r3
 800745c:	4b8a      	ldr	r3, [pc, #552]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 800745e:	789b      	ldrb	r3, [r3, #2]
 8007460:	4619      	mov	r1, r3
 8007462:	4b89      	ldr	r3, [pc, #548]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007464:	78db      	ldrb	r3, [r3, #3]
 8007466:	f107 0020 	add.w	r0, r7, #32
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	9101      	str	r1, [sp, #4]
 800746e:	9200      	str	r2, [sp, #0]
 8007470:	4623      	mov	r3, r4
 8007472:	4a89      	ldr	r2, [pc, #548]	@ (8007698 <MX_LWIP_Init+0x2cc>)
 8007474:	2180      	movs	r1, #128	@ 0x80
 8007476:	f011 f88d 	bl	8018594 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800747a:	f107 0320 	add.w	r3, r7, #32
 800747e:	4619      	mov	r1, r3
 8007480:	4884      	ldr	r0, [pc, #528]	@ (8007694 <MX_LWIP_Init+0x2c8>)
 8007482:	f7ff ff83 	bl	800738c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007486:	4b81      	ldr	r3, [pc, #516]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	461c      	mov	r4, r3
 800748c:	4b7f      	ldr	r3, [pc, #508]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	461a      	mov	r2, r3
 8007492:	4b7e      	ldr	r3, [pc, #504]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	4619      	mov	r1, r3
 8007498:	4b7c      	ldr	r3, [pc, #496]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800749a:	78db      	ldrb	r3, [r3, #3]
 800749c:	f107 0020 	add.w	r0, r7, #32
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	9101      	str	r1, [sp, #4]
 80074a4:	9200      	str	r2, [sp, #0]
 80074a6:	4623      	mov	r3, r4
 80074a8:	4a7c      	ldr	r2, [pc, #496]	@ (800769c <MX_LWIP_Init+0x2d0>)
 80074aa:	2180      	movs	r1, #128	@ 0x80
 80074ac:	f011 f872 	bl	8018594 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 80074b0:	f107 0320 	add.w	r3, r7, #32
 80074b4:	4619      	mov	r1, r3
 80074b6:	4877      	ldr	r0, [pc, #476]	@ (8007694 <MX_LWIP_Init+0x2c8>)
 80074b8:	f7ff ff68 	bl	800738c <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80074bc:	2100      	movs	r1, #0
 80074be:	2000      	movs	r0, #0
 80074c0:	f006 fad2 	bl	800da68 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80074c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	061a      	lsls	r2, r3, #24
 80074ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	431a      	orrs	r2, r3
 80074d2:	4b6c      	ldr	r3, [pc, #432]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	4313      	orrs	r3, r2
 80074da:	4a6a      	ldr	r2, [pc, #424]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074dc:	78d2      	ldrb	r2, [r2, #3]
 80074de:	4313      	orrs	r3, r2
 80074e0:	061a      	lsls	r2, r3, #24
 80074e2:	4b68      	ldr	r3, [pc, #416]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	0619      	lsls	r1, r3, #24
 80074e8:	4b66      	ldr	r3, [pc, #408]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	041b      	lsls	r3, r3, #16
 80074ee:	4319      	orrs	r1, r3
 80074f0:	4b64      	ldr	r3, [pc, #400]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074f2:	789b      	ldrb	r3, [r3, #2]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	430b      	orrs	r3, r1
 80074f8:	4962      	ldr	r1, [pc, #392]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 80074fa:	78c9      	ldrb	r1, [r1, #3]
 80074fc:	430b      	orrs	r3, r1
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007504:	431a      	orrs	r2, r3
 8007506:	4b5f      	ldr	r3, [pc, #380]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	0619      	lsls	r1, r3, #24
 800750c:	4b5d      	ldr	r3, [pc, #372]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	4319      	orrs	r1, r3
 8007514:	4b5b      	ldr	r3, [pc, #364]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007516:	789b      	ldrb	r3, [r3, #2]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	430b      	orrs	r3, r1
 800751c:	4959      	ldr	r1, [pc, #356]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800751e:	78c9      	ldrb	r1, [r1, #3]
 8007520:	430b      	orrs	r3, r1
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007528:	431a      	orrs	r2, r3
 800752a:	4b56      	ldr	r3, [pc, #344]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	0619      	lsls	r1, r3, #24
 8007530:	4b54      	ldr	r3, [pc, #336]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	4319      	orrs	r1, r3
 8007538:	4b52      	ldr	r3, [pc, #328]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 800753a:	789b      	ldrb	r3, [r3, #2]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	430b      	orrs	r3, r1
 8007540:	4950      	ldr	r1, [pc, #320]	@ (8007684 <MX_LWIP_Init+0x2b8>)
 8007542:	78c9      	ldrb	r1, [r1, #3]
 8007544:	430b      	orrs	r3, r1
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	4313      	orrs	r3, r2
 800754a:	4a55      	ldr	r2, [pc, #340]	@ (80076a0 <MX_LWIP_Init+0x2d4>)
 800754c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800754e:	4b4e      	ldr	r3, [pc, #312]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	061a      	lsls	r2, r3, #24
 8007554:	4b4c      	ldr	r3, [pc, #304]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	431a      	orrs	r2, r3
 800755c:	4b4a      	ldr	r3, [pc, #296]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 800755e:	789b      	ldrb	r3, [r3, #2]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	4313      	orrs	r3, r2
 8007564:	4a48      	ldr	r2, [pc, #288]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007566:	78d2      	ldrb	r2, [r2, #3]
 8007568:	4313      	orrs	r3, r2
 800756a:	061a      	lsls	r2, r3, #24
 800756c:	4b46      	ldr	r3, [pc, #280]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	0619      	lsls	r1, r3, #24
 8007572:	4b45      	ldr	r3, [pc, #276]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	4319      	orrs	r1, r3
 800757a:	4b43      	ldr	r3, [pc, #268]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 800757c:	789b      	ldrb	r3, [r3, #2]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	430b      	orrs	r3, r1
 8007582:	4941      	ldr	r1, [pc, #260]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007584:	78c9      	ldrb	r1, [r1, #3]
 8007586:	430b      	orrs	r3, r1
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800758e:	431a      	orrs	r2, r3
 8007590:	4b3d      	ldr	r3, [pc, #244]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	0619      	lsls	r1, r3, #24
 8007596:	4b3c      	ldr	r3, [pc, #240]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	4319      	orrs	r1, r3
 800759e:	4b3a      	ldr	r3, [pc, #232]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075a0:	789b      	ldrb	r3, [r3, #2]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	430b      	orrs	r3, r1
 80075a6:	4938      	ldr	r1, [pc, #224]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075a8:	78c9      	ldrb	r1, [r1, #3]
 80075aa:	430b      	orrs	r3, r1
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075b2:	431a      	orrs	r2, r3
 80075b4:	4b34      	ldr	r3, [pc, #208]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	0619      	lsls	r1, r3, #24
 80075ba:	4b33      	ldr	r3, [pc, #204]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	4319      	orrs	r1, r3
 80075c2:	4b31      	ldr	r3, [pc, #196]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	430b      	orrs	r3, r1
 80075ca:	492f      	ldr	r1, [pc, #188]	@ (8007688 <MX_LWIP_Init+0x2bc>)
 80075cc:	78c9      	ldrb	r1, [r1, #3]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	4313      	orrs	r3, r2
 80075d4:	4a33      	ldr	r2, [pc, #204]	@ (80076a4 <MX_LWIP_Init+0x2d8>)
 80075d6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80075d8:	4b2c      	ldr	r3, [pc, #176]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	061a      	lsls	r2, r3, #24
 80075de:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	431a      	orrs	r2, r3
 80075e6:	4b29      	ldr	r3, [pc, #164]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075e8:	789b      	ldrb	r3, [r3, #2]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	4313      	orrs	r3, r2
 80075ee:	4a27      	ldr	r2, [pc, #156]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075f0:	78d2      	ldrb	r2, [r2, #3]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	061a      	lsls	r2, r3, #24
 80075f6:	4b25      	ldr	r3, [pc, #148]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	0619      	lsls	r1, r3, #24
 80075fc:	4b23      	ldr	r3, [pc, #140]	@ (800768c <MX_LWIP_Init+0x2c0>)
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	4319      	orrs	r1, r3
 8007604:	4b21      	ldr	r3, [pc, #132]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007606:	789b      	ldrb	r3, [r3, #2]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	430b      	orrs	r3, r1
 800760c:	491f      	ldr	r1, [pc, #124]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800760e:	78c9      	ldrb	r1, [r1, #3]
 8007610:	430b      	orrs	r3, r1
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007618:	431a      	orrs	r2, r3
 800761a:	4b1c      	ldr	r3, [pc, #112]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	0619      	lsls	r1, r3, #24
 8007620:	4b1a      	ldr	r3, [pc, #104]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	4319      	orrs	r1, r3
 8007628:	4b18      	ldr	r3, [pc, #96]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800762a:	789b      	ldrb	r3, [r3, #2]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	430b      	orrs	r3, r1
 8007630:	4916      	ldr	r1, [pc, #88]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007632:	78c9      	ldrb	r1, [r1, #3]
 8007634:	430b      	orrs	r3, r1
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800763c:	431a      	orrs	r2, r3
 800763e:	4b13      	ldr	r3, [pc, #76]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	0619      	lsls	r1, r3, #24
 8007644:	4b11      	ldr	r3, [pc, #68]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	4319      	orrs	r1, r3
 800764c:	4b0f      	ldr	r3, [pc, #60]	@ (800768c <MX_LWIP_Init+0x2c0>)
 800764e:	789b      	ldrb	r3, [r3, #2]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	430b      	orrs	r3, r1
 8007654:	490d      	ldr	r1, [pc, #52]	@ (800768c <MX_LWIP_Init+0x2c0>)
 8007656:	78c9      	ldrb	r1, [r1, #3]
 8007658:	430b      	orrs	r3, r1
 800765a:	0e1b      	lsrs	r3, r3, #24
 800765c:	4313      	orrs	r3, r2
 800765e:	4a12      	ldr	r2, [pc, #72]	@ (80076a8 <MX_LWIP_Init+0x2dc>)
 8007660:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007662:	4b12      	ldr	r3, [pc, #72]	@ (80076ac <MX_LWIP_Init+0x2e0>)
 8007664:	9302      	str	r3, [sp, #8]
 8007666:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <MX_LWIP_Init+0x2e4>)
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	2300      	movs	r3, #0
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <MX_LWIP_Init+0x2dc>)
 8007670:	4a0c      	ldr	r2, [pc, #48]	@ (80076a4 <MX_LWIP_Init+0x2d8>)
 8007672:	490b      	ldr	r1, [pc, #44]	@ (80076a0 <MX_LWIP_Init+0x2d4>)
 8007674:	480f      	ldr	r0, [pc, #60]	@ (80076b4 <MX_LWIP_Init+0x2e8>)
 8007676:	f006 ffc1 	bl	800e5fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800767a:	480e      	ldr	r0, [pc, #56]	@ (80076b4 <MX_LWIP_Init+0x2e8>)
 800767c:	f007 f970 	bl	800e960 <netif_set_default>
 8007680:	e01a      	b.n	80076b8 <MX_LWIP_Init+0x2ec>
 8007682:	bf00      	nop
 8007684:	200005f0 	.word	0x200005f0
 8007688:	200005f4 	.word	0x200005f4
 800768c:	200005f8 	.word	0x200005f8
 8007690:	08019ac0 	.word	0x08019ac0
 8007694:	08019ad0 	.word	0x08019ad0
 8007698:	08019adc 	.word	0x08019adc
 800769c:	08019af4 	.word	0x08019af4
 80076a0:	200005e4 	.word	0x200005e4
 80076a4:	200005e8 	.word	0x200005e8
 80076a8:	200005ec 	.word	0x200005ec
 80076ac:	0800d9a5 	.word	0x0800d9a5
 80076b0:	080081f9 	.word	0x080081f9
 80076b4:	200005b0 	.word	0x200005b0

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80076b8:	4812      	ldr	r0, [pc, #72]	@ (8007704 <MX_LWIP_Init+0x338>)
 80076ba:	f007 f961 	bl	800e980 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80076be:	4912      	ldr	r1, [pc, #72]	@ (8007708 <MX_LWIP_Init+0x33c>)
 80076c0:	4810      	ldr	r0, [pc, #64]	@ (8007704 <MX_LWIP_Init+0x338>)
 80076c2:	f007 fa2d 	bl	800eb20 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 80076c6:	4911      	ldr	r1, [pc, #68]	@ (800770c <MX_LWIP_Init+0x340>)
 80076c8:	4811      	ldr	r0, [pc, #68]	@ (8007710 <MX_LWIP_Init+0x344>)
 80076ca:	f7ff fe5f 	bl	800738c <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80076ce:	4b11      	ldr	r3, [pc, #68]	@ (8007714 <MX_LWIP_Init+0x348>)
 80076d0:	1d3c      	adds	r4, r7, #4
 80076d2:	461d      	mov	r5, r3
 80076d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80076dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	4908      	ldr	r1, [pc, #32]	@ (8007704 <MX_LWIP_Init+0x338>)
 80076e4:	4618      	mov	r0, r3
 80076e6:	f003 f93f 	bl	800a968 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 80076ea:	490b      	ldr	r1, [pc, #44]	@ (8007718 <MX_LWIP_Init+0x34c>)
 80076ec:	4808      	ldr	r0, [pc, #32]	@ (8007710 <MX_LWIP_Init+0x344>)
 80076ee:	f7ff fe4d 	bl	800738c <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 80076f2:	490a      	ldr	r1, [pc, #40]	@ (800771c <MX_LWIP_Init+0x350>)
 80076f4:	4806      	ldr	r0, [pc, #24]	@ (8007710 <MX_LWIP_Init+0x344>)
 80076f6:	f7ff fe49 	bl	800738c <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 80076fa:	bf00      	nop
 80076fc:	37a0      	adds	r7, #160	@ 0xa0
 80076fe:	46bd      	mov	sp, r7
 8007700:	bdb0      	pop	{r4, r5, r7, pc}
 8007702:	bf00      	nop
 8007704:	200005b0 	.word	0x200005b0
 8007708:	08007721 	.word	0x08007721
 800770c:	08019b0c 	.word	0x08019b0c
 8007710:	08019ad0 	.word	0x08019ad0
 8007714:	08019b90 	.word	0x08019b90
 8007718:	08019b34 	.word	0x08019b34
 800771c:	08019b5c 	.word	0x08019b5c

08007720 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b0a2      	sub	sp, #136	@ 0x88
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 8007738:	490f      	ldr	r1, [pc, #60]	@ (8007778 <ethernet_link_status_updated+0x58>)
 800773a:	4810      	ldr	r0, [pc, #64]	@ (800777c <ethernet_link_status_updated+0x5c>)
 800773c:	f7ff fe26 	bl	800738c <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	4618      	mov	r0, r3
 8007746:	f00f f83f 	bl	80167c8 <ip4addr_ntoa>
 800774a:	4603      	mov	r3, r0
 800774c:	f107 0008 	add.w	r0, r7, #8
 8007750:	4a0b      	ldr	r2, [pc, #44]	@ (8007780 <ethernet_link_status_updated+0x60>)
 8007752:	2180      	movs	r1, #128	@ 0x80
 8007754:	f010 ff1e 	bl	8018594 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 8007758:	f107 0308 	add.w	r3, r7, #8
 800775c:	4619      	mov	r1, r3
 800775e:	4807      	ldr	r0, [pc, #28]	@ (800777c <ethernet_link_status_updated+0x5c>)
 8007760:	f7ff fe14 	bl	800738c <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 8007764:	e003      	b.n	800776e <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 8007766:	4907      	ldr	r1, [pc, #28]	@ (8007784 <ethernet_link_status_updated+0x64>)
 8007768:	4804      	ldr	r0, [pc, #16]	@ (800777c <ethernet_link_status_updated+0x5c>)
 800776a:	f7ff fe0f 	bl	800738c <lwip_cdc_debug_log>
}
 800776e:	bf00      	nop
 8007770:	3788      	adds	r7, #136	@ 0x88
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	08019bac 	.word	0x08019bac
 800777c:	08019bc4 	.word	0x08019bc4
 8007780:	08019bd0 	.word	0x08019bd0
 8007784:	08019be8 	.word	0x08019be8

08007788 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7f8 fd1d 	bl	80001d0 <strlen>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f010 f986 	bl	8017ab8 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 80077ac:	2001      	movs	r0, #1
 80077ae:	f7f9 ffcf 	bl	8001750 <HAL_Delay>
  }
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b0a6      	sub	sp, #152	@ 0x98
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 80077c6:	f7f9 ffb7 	bl	8001738 <HAL_GetTick>
 80077ca:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 80077ce:	f107 000c 	add.w	r0, r7, #12
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077de:	4a06      	ldr	r2, [pc, #24]	@ (80077f8 <cdc_debug_log+0x3c>)
 80077e0:	2180      	movs	r1, #128	@ 0x80
 80077e2:	f010 fed7 	bl	8018594 <sniprintf>
  cdc_debug_printf(debug_buf);
 80077e6:	f107 030c 	add.w	r3, r7, #12
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff ffcc 	bl	8007788 <cdc_debug_printf>
}
 80077f0:	bf00      	nop
 80077f2:	3790      	adds	r7, #144	@ 0x90
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	08019c04 	.word	0x08019c04

080077fc <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 80077fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fe:	b0cf      	sub	sp, #316	@ 0x13c
 8007800:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 8007802:	495d      	ldr	r1, [pc, #372]	@ (8007978 <debug_eth_dma_descriptors+0x17c>)
 8007804:	485d      	ldr	r0, [pc, #372]	@ (800797c <debug_eth_dma_descriptors+0x180>)
 8007806:	f7ff ffd9 	bl	80077bc <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800780a:	2300      	movs	r3, #0
 800780c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007810:	e048      	b.n	80078a4 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 8007812:	495b      	ldr	r1, [pc, #364]	@ (8007980 <debug_eth_dma_descriptors+0x184>)
 8007814:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	440b      	add	r3, r1
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 8007828:	4955      	ldr	r1, [pc, #340]	@ (8007980 <debug_eth_dma_descriptors+0x184>)
 800782a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	440b      	add	r3, r1
 8007838:	3308      	adds	r3, #8
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 8007840:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007844:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 8007846:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800784a:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800784c:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 8007850:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8007854:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 8007856:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800785a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800785e:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 8007860:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 8007864:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8007868:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800786a:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800786e:	1d3e      	adds	r6, r7, #4
 8007870:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 8007874:	9505      	str	r5, [sp, #20]
 8007876:	9404      	str	r4, [sp, #16]
 8007878:	9003      	str	r0, [sp, #12]
 800787a:	9102      	str	r1, [sp, #8]
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007884:	4a3f      	ldr	r2, [pc, #252]	@ (8007984 <debug_eth_dma_descriptors+0x188>)
 8007886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800788a:	4630      	mov	r0, r6
 800788c:	f010 fe82 	bl	8018594 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8007890:	1d3b      	adds	r3, r7, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4839      	ldr	r0, [pc, #228]	@ (800797c <debug_eth_dma_descriptors+0x180>)
 8007896:	f7ff ff91 	bl	80077bc <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800789a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800789e:	3301      	adds	r3, #1
 80078a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80078a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d9b2      	bls.n	8007812 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 80078ac:	4936      	ldr	r1, [pc, #216]	@ (8007988 <debug_eth_dma_descriptors+0x18c>)
 80078ae:	4833      	ldr	r0, [pc, #204]	@ (800797c <debug_eth_dma_descriptors+0x180>)
 80078b0:	f7ff ff84 	bl	80077bc <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 80078b4:	2300      	movs	r3, #0
 80078b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80078ba:	e053      	b.n	8007964 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 80078bc:	4933      	ldr	r1, [pc, #204]	@ (800798c <debug_eth_dma_descriptors+0x190>)
 80078be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	440b      	add	r3, r1
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 80078d2:	492e      	ldr	r1, [pc, #184]	@ (800798c <debug_eth_dma_descriptors+0x190>)
 80078d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	440b      	add	r3, r1
 80078e2:	3304      	adds	r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 80078ea:	4928      	ldr	r1, [pc, #160]	@ (800798c <debug_eth_dma_descriptors+0x190>)
 80078ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	440b      	add	r3, r1
 80078fa:	3308      	adds	r3, #8
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 8007908:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800790c:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800790e:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 8007912:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8007916:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 8007918:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800791c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8007920:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 8007922:	f000 0001 	and.w	r0, r0, #1
 8007926:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800792a:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800792e:	1d3e      	adds	r6, r7, #4
 8007930:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 8007934:	9505      	str	r5, [sp, #20]
 8007936:	9404      	str	r4, [sp, #16]
 8007938:	9003      	str	r0, [sp, #12]
 800793a:	9102      	str	r1, [sp, #8]
 800793c:	9201      	str	r2, [sp, #4]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007944:	4a12      	ldr	r2, [pc, #72]	@ (8007990 <debug_eth_dma_descriptors+0x194>)
 8007946:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800794a:	4630      	mov	r0, r6
 800794c:	f010 fe22 	bl	8018594 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4809      	ldr	r0, [pc, #36]	@ (800797c <debug_eth_dma_descriptors+0x180>)
 8007956:	f7ff ff31 	bl	80077bc <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800795a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800795e:	3301      	adds	r3, #1
 8007960:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007964:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007968:	2b03      	cmp	r3, #3
 800796a:	d9a7      	bls.n	80078bc <debug_eth_dma_descriptors+0xc0>
  }
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8007974:	46bd      	mov	sp, r7
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007978:	08019ce4 	.word	0x08019ce4
 800797c:	08019d04 	.word	0x08019d04
 8007980:	20004f88 	.word	0x20004f88
 8007984:	08019d10 	.word	0x08019d10
 8007988:	08019d4c 	.word	0x08019d4c
 800798c:	20005028 	.word	0x20005028
 8007990:	08019d6c 	.word	0x08019d6c

08007994 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b0a0      	sub	sp, #128	@ 0x80
 8007998:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800799a:	4b25      	ldr	r3, [pc, #148]	@ (8007a30 <debug_eth_dma_registers+0x9c>)
 800799c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4638      	mov	r0, r7
 80079a4:	4a23      	ldr	r2, [pc, #140]	@ (8007a34 <debug_eth_dma_registers+0xa0>)
 80079a6:	2180      	movs	r1, #128	@ 0x80
 80079a8:	f010 fdf4 	bl	8018594 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 80079ac:	463b      	mov	r3, r7
 80079ae:	4619      	mov	r1, r3
 80079b0:	4821      	ldr	r0, [pc, #132]	@ (8007a38 <debug_eth_dma_registers+0xa4>)
 80079b2:	f7ff ff03 	bl	80077bc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 80079b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a30 <debug_eth_dma_registers+0x9c>)
 80079b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4638      	mov	r0, r7
 80079c0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a3c <debug_eth_dma_registers+0xa8>)
 80079c2:	2180      	movs	r1, #128	@ 0x80
 80079c4:	f010 fde6 	bl	8018594 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 80079c8:	463b      	mov	r3, r7
 80079ca:	4619      	mov	r1, r3
 80079cc:	481a      	ldr	r0, [pc, #104]	@ (8007a38 <debug_eth_dma_registers+0xa4>)
 80079ce:	f7ff fef5 	bl	80077bc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 80079d2:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <debug_eth_dma_registers+0x9c>)
 80079d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	4638      	mov	r0, r7
 80079dc:	4a18      	ldr	r2, [pc, #96]	@ (8007a40 <debug_eth_dma_registers+0xac>)
 80079de:	2180      	movs	r1, #128	@ 0x80
 80079e0:	f010 fdd8 	bl	8018594 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 80079e4:	463b      	mov	r3, r7
 80079e6:	4619      	mov	r1, r3
 80079e8:	4813      	ldr	r0, [pc, #76]	@ (8007a38 <debug_eth_dma_registers+0xa4>)
 80079ea:	f7ff fee7 	bl	80077bc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 80079ee:	4b10      	ldr	r3, [pc, #64]	@ (8007a30 <debug_eth_dma_registers+0x9c>)
 80079f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4638      	mov	r0, r7
 80079f8:	4a12      	ldr	r2, [pc, #72]	@ (8007a44 <debug_eth_dma_registers+0xb0>)
 80079fa:	2180      	movs	r1, #128	@ 0x80
 80079fc:	f010 fdca 	bl	8018594 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8007a00:	463b      	mov	r3, r7
 8007a02:	4619      	mov	r1, r3
 8007a04:	480c      	ldr	r0, [pc, #48]	@ (8007a38 <debug_eth_dma_registers+0xa4>)
 8007a06:	f7ff fed9 	bl	80077bc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 8007a0a:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <debug_eth_dma_registers+0x9c>)
 8007a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	4638      	mov	r0, r7
 8007a14:	4a0c      	ldr	r2, [pc, #48]	@ (8007a48 <debug_eth_dma_registers+0xb4>)
 8007a16:	2180      	movs	r1, #128	@ 0x80
 8007a18:	f010 fdbc 	bl	8018594 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4805      	ldr	r0, [pc, #20]	@ (8007a38 <debug_eth_dma_registers+0xa4>)
 8007a22:	f7ff fecb 	bl	80077bc <cdc_debug_log>
}
 8007a26:	bf00      	nop
 8007a28:	3780      	adds	r7, #128	@ 0x80
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40028000 	.word	0x40028000
 8007a34:	08019da8 	.word	0x08019da8
 8007a38:	08019db8 	.word	0x08019db8
 8007a3c:	08019dc0 	.word	0x08019dc0
 8007a40:	08019dd0 	.word	0x08019dd0
 8007a44:	08019de0 	.word	0x08019de0
 8007a48:	08019df4 	.word	0x08019df4

08007a4c <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b0a2      	sub	sp, #136	@ 0x88
 8007a50:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 8007a52:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <debug_eth_config+0x78>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4638      	mov	r0, r7
 8007a58:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <debug_eth_config+0x7c>)
 8007a5a:	2180      	movs	r1, #128	@ 0x80
 8007a5c:	f010 fd9a 	bl	8018594 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8007a60:	463b      	mov	r3, r7
 8007a62:	4619      	mov	r1, r3
 8007a64:	4819      	ldr	r0, [pc, #100]	@ (8007acc <debug_eth_config+0x80>)
 8007a66:	f7ff fea9 	bl	80077bc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 8007a6a:	4b16      	ldr	r3, [pc, #88]	@ (8007ac4 <debug_eth_config+0x78>)
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	4638      	mov	r0, r7
 8007a70:	4a17      	ldr	r2, [pc, #92]	@ (8007ad0 <debug_eth_config+0x84>)
 8007a72:	2180      	movs	r1, #128	@ 0x80
 8007a74:	f010 fd8e 	bl	8018594 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8007a78:	463b      	mov	r3, r7
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4813      	ldr	r0, [pc, #76]	@ (8007acc <debug_eth_config+0x80>)
 8007a7e:	f7ff fe9d 	bl	80077bc <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 8007a82:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <debug_eth_config+0x78>)
 8007a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	4a11      	ldr	r2, [pc, #68]	@ (8007ad4 <debug_eth_config+0x88>)
 8007a8e:	2180      	movs	r1, #128	@ 0x80
 8007a90:	f010 fd80 	bl	8018594 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8007a94:	463b      	mov	r3, r7
 8007a96:	4619      	mov	r1, r3
 8007a98:	480c      	ldr	r0, [pc, #48]	@ (8007acc <debug_eth_config+0x80>)
 8007a9a:	f7ff fe8f 	bl	80077bc <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	230c      	movs	r3, #12
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad8 <debug_eth_config+0x8c>)
 8007aac:	2180      	movs	r1, #128	@ 0x80
 8007aae:	f010 fd71 	bl	8018594 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4805      	ldr	r0, [pc, #20]	@ (8007acc <debug_eth_config+0x80>)
 8007ab8:	f7ff fe80 	bl	80077bc <cdc_debug_log>
}
 8007abc:	bf00      	nop
 8007abe:	3780      	adds	r7, #128	@ 0x80
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40028000 	.word	0x40028000
 8007ac8:	08019e08 	.word	0x08019e08
 8007acc:	08019e18 	.word	0x08019e18
 8007ad0:	08019e20 	.word	0x08019e20
 8007ad4:	08019e30 	.word	0x08019e30
 8007ad8:	08019e40 	.word	0x08019e40

08007adc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007ae4:	4b04      	ldr	r3, [pc, #16]	@ (8007af8 <HAL_ETH_RxCpltCallback+0x1c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f003 f8b9 	bl	800ac60 <osSemaphoreRelease>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200050fc 	.word	0x200050fc

08007afc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <HAL_ETH_TxCpltCallback+0x1c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f003 f8a9 	bl	800ac60 <osSemaphoreRelease>
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20005100 	.word	0x20005100

08007b1c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fa fd1f 	bl	8002568 <HAL_ETH_GetDMAError>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b30:	2b80      	cmp	r3, #128	@ 0x80
 8007b32:	d104      	bne.n	8007b3e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007b34:	4b04      	ldr	r3, [pc, #16]	@ (8007b48 <HAL_ETH_ErrorCallback+0x2c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f003 f891 	bl	800ac60 <osSemaphoreRelease>
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200050fc 	.word	0x200050fc

08007b4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b0ce      	sub	sp, #312	@ 0x138
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b5a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007b62:	4bba      	ldr	r3, [pc, #744]	@ (8007e4c <low_level_init+0x300>)
 8007b64:	4aba      	ldr	r2, [pc, #744]	@ (8007e50 <low_level_init+0x304>)
 8007b66:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 8007b6e:	2380      	movs	r3, #128	@ 0x80
 8007b70:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 8007b74:	23e1      	movs	r3, #225	@ 0xe1
 8007b76:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 8007b8c:	4aaf      	ldr	r2, [pc, #700]	@ (8007e4c <low_level_init+0x300>)
 8007b8e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8007b92:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007b94:	4bad      	ldr	r3, [pc, #692]	@ (8007e4c <low_level_init+0x300>)
 8007b96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007b9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007b9c:	4bab      	ldr	r3, [pc, #684]	@ (8007e4c <low_level_init+0x300>)
 8007b9e:	4aad      	ldr	r2, [pc, #692]	@ (8007e54 <low_level_init+0x308>)
 8007ba0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007ba2:	4baa      	ldr	r3, [pc, #680]	@ (8007e4c <low_level_init+0x300>)
 8007ba4:	4aac      	ldr	r2, [pc, #688]	@ (8007e58 <low_level_init+0x30c>)
 8007ba6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8007e4c <low_level_init+0x300>)
 8007baa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007bae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007bb0:	48a6      	ldr	r0, [pc, #664]	@ (8007e4c <low_level_init+0x300>)
 8007bb2:	f7f9 fed3 	bl	800195c <HAL_ETH_Init>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007bbc:	2238      	movs	r2, #56	@ 0x38
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	48a6      	ldr	r0, [pc, #664]	@ (8007e5c <low_level_init+0x310>)
 8007bc2:	f010 fd8a 	bl	80186da <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007bc6:	4ba5      	ldr	r3, [pc, #660]	@ (8007e5c <low_level_init+0x310>)
 8007bc8:	2221      	movs	r2, #33	@ 0x21
 8007bca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8007e5c <low_level_init+0x310>)
 8007bce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007bd2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007bd4:	4ba1      	ldr	r3, [pc, #644]	@ (8007e5c <low_level_init+0x310>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007bda:	48a1      	ldr	r0, [pc, #644]	@ (8007e60 <low_level_init+0x314>)
 8007bdc:	f006 fbc8 	bl	800e370 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007be0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2206      	movs	r2, #6
 8007bec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007bf0:	4b96      	ldr	r3, [pc, #600]	@ (8007e4c <low_level_init+0x300>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007c04:	4b91      	ldr	r3, [pc, #580]	@ (8007e4c <low_level_init+0x300>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	785a      	ldrb	r2, [r3, #1]
 8007c0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007c18:	4b8c      	ldr	r3, [pc, #560]	@ (8007e4c <low_level_init+0x300>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	789a      	ldrb	r2, [r3, #2]
 8007c1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007c2c:	4b87      	ldr	r3, [pc, #540]	@ (8007e4c <low_level_init+0x300>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	78da      	ldrb	r2, [r3, #3]
 8007c32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007c40:	4b82      	ldr	r3, [pc, #520]	@ (8007e4c <low_level_init+0x300>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	791a      	ldrb	r2, [r3, #4]
 8007c46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007c54:	4b7d      	ldr	r3, [pc, #500]	@ (8007e4c <low_level_init+0x300>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	795a      	ldrb	r2, [r3, #5]
 8007c5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007c68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007c76:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c86:	f043 030a 	orr.w	r3, r3, #10
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8007ca6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007caa:	2101      	movs	r1, #1
 8007cac:	4618      	mov	r0, r3
 8007cae:	f002 ff57 	bl	800ab60 <osSemaphoreCreate>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8007e64 <low_level_init+0x318>)
 8007cb6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8007cc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 ff48 	bl	800ab60 <osSemaphoreCreate>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4a65      	ldr	r2, [pc, #404]	@ (8007e68 <low_level_init+0x31c>)
 8007cd4:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8007cd6:	4b63      	ldr	r3, [pc, #396]	@ (8007e64 <low_level_init+0x318>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f002 ff71 	bl	800abc4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8007ce2:	4b61      	ldr	r3, [pc, #388]	@ (8007e68 <low_level_init+0x31c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f002 ff6b 	bl	800abc4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007cee:	4b5f      	ldr	r3, [pc, #380]	@ (8007e6c <low_level_init+0x320>)
 8007cf0:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8007cf4:	461d      	mov	r5, r3
 8007cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007d02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d0a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	4610      	mov	r0, r2
 8007d12:	f002 fe29 	bl	800a968 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8007d16:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 8158 	bne.w	8007fd0 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 8007d20:	4953      	ldr	r1, [pc, #332]	@ (8007e70 <low_level_init+0x324>)
 8007d22:	4854      	ldr	r0, [pc, #336]	@ (8007e74 <low_level_init+0x328>)
 8007d24:	f7ff fd4a 	bl	80077bc <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 8007d28:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <low_level_init+0x32c>)
 8007d2a:	4a54      	ldr	r2, [pc, #336]	@ (8007e7c <low_level_init+0x330>)
 8007d2c:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 8007d2e:	4b52      	ldr	r3, [pc, #328]	@ (8007e78 <low_level_init+0x32c>)
 8007d30:	4a53      	ldr	r2, [pc, #332]	@ (8007e80 <low_level_init+0x334>)
 8007d32:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 8007d34:	4b50      	ldr	r3, [pc, #320]	@ (8007e78 <low_level_init+0x32c>)
 8007d36:	4a53      	ldr	r2, [pc, #332]	@ (8007e84 <low_level_init+0x338>)
 8007d38:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 8007d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e78 <low_level_init+0x32c>)
 8007d3c:	4a52      	ldr	r2, [pc, #328]	@ (8007e88 <low_level_init+0x33c>)
 8007d3e:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 8007d40:	4b4d      	ldr	r3, [pc, #308]	@ (8007e78 <low_level_init+0x32c>)
 8007d42:	4a52      	ldr	r2, [pc, #328]	@ (8007e8c <low_level_init+0x340>)
 8007d44:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 8007d46:	494c      	ldr	r1, [pc, #304]	@ (8007e78 <low_level_init+0x32c>)
 8007d48:	4851      	ldr	r0, [pc, #324]	@ (8007e90 <low_level_init+0x344>)
 8007d4a:	f7f9 fae6 	bl	800131a <eth_chip_regster_bus_io>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 8007d54:	494f      	ldr	r1, [pc, #316]	@ (8007e94 <low_level_init+0x348>)
 8007d56:	4847      	ldr	r0, [pc, #284]	@ (8007e74 <low_level_init+0x328>)
 8007d58:	f7ff fd30 	bl	80077bc <cdc_debug_log>
      Error_Handler();
 8007d5c:	f7f8 fe42 	bl	80009e4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 8007d60:	494d      	ldr	r1, [pc, #308]	@ (8007e98 <low_level_init+0x34c>)
 8007d62:	4844      	ldr	r0, [pc, #272]	@ (8007e74 <low_level_init+0x328>)
 8007d64:	f7ff fd2a 	bl	80077bc <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 8007d68:	4849      	ldr	r0, [pc, #292]	@ (8007e90 <low_level_init+0x344>)
 8007d6a:	f7f9 fb09 	bl	8001380 <eth_chip_init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 8007d74:	4949      	ldr	r1, [pc, #292]	@ (8007e9c <low_level_init+0x350>)
 8007d76:	483f      	ldr	r0, [pc, #252]	@ (8007e74 <low_level_init+0x328>)
 8007d78:	f7ff fd20 	bl	80077bc <cdc_debug_log>
      Error_Handler();
 8007d7c:	f7f8 fe32 	bl	80009e4 <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 8007d80:	4b43      	ldr	r3, [pc, #268]	@ (8007e90 <low_level_init+0x344>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f107 0008 	add.w	r0, r7, #8
 8007d88:	4a45      	ldr	r2, [pc, #276]	@ (8007ea0 <low_level_init+0x354>)
 8007d8a:	2140      	movs	r1, #64	@ 0x40
 8007d8c:	f010 fc02 	bl	8018594 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 8007d90:	f107 0308 	add.w	r3, r7, #8
 8007d94:	4619      	mov	r1, r3
 8007d96:	4837      	ldr	r0, [pc, #220]	@ (8007e74 <low_level_init+0x328>)
 8007d98:	f7ff fd10 	bl	80077bc <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 8007d9c:	483c      	ldr	r0, [pc, #240]	@ (8007e90 <low_level_init+0x344>)
 8007d9e:	f7f9 fbf5 	bl	800158c <eth_chip_disable_power_down_mode>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 8007da8:	493e      	ldr	r1, [pc, #248]	@ (8007ea4 <low_level_init+0x358>)
 8007daa:	4832      	ldr	r0, [pc, #200]	@ (8007e74 <low_level_init+0x328>)
 8007dac:	f7ff fd06 	bl	80077bc <cdc_debug_log>
      Error_Handler();
 8007db0:	f7f8 fe18 	bl	80009e4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 8007db4:	493c      	ldr	r1, [pc, #240]	@ (8007ea8 <low_level_init+0x35c>)
 8007db6:	482f      	ldr	r0, [pc, #188]	@ (8007e74 <low_level_init+0x328>)
 8007db8:	f7ff fd00 	bl	80077bc <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 8007dbc:	4834      	ldr	r0, [pc, #208]	@ (8007e90 <low_level_init+0x344>)
 8007dbe:	f7f9 fc12 	bl	80015e6 <eth_chip_start_auto_nego>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 8007dc8:	4938      	ldr	r1, [pc, #224]	@ (8007eac <low_level_init+0x360>)
 8007dca:	482a      	ldr	r0, [pc, #168]	@ (8007e74 <low_level_init+0x328>)
 8007dcc:	f7ff fcf6 	bl	80077bc <cdc_debug_log>
      Error_Handler();
 8007dd0:	f7f8 fe08 	bl	80009e4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 8007dd4:	4936      	ldr	r1, [pc, #216]	@ (8007eb0 <low_level_init+0x364>)
 8007dd6:	4827      	ldr	r0, [pc, #156]	@ (8007e74 <low_level_init+0x328>)
 8007dd8:	f7ff fcf0 	bl	80077bc <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 8007de2:	2064      	movs	r0, #100	@ 0x64
 8007de4:	f7f9 fcb4 	bl	8001750 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 8007de8:	4829      	ldr	r0, [pc, #164]	@ (8007e90 <low_level_init+0x344>)
 8007dea:	f7f9 fc29 	bl	8001640 <eth_chip_get_link_state>
 8007dee:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 8007df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007df6:	3301      	adds	r3, #1
 8007df8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 8007dfc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8007e00:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb4 <low_level_init+0x368>)
 8007e02:	fba3 2301 	umull	r2, r3, r3, r1
 8007e06:	08da      	lsrs	r2, r3, #3
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	1aca      	subs	r2, r1, r3
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d110      	bne.n	8007e38 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 8007e16:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8007e1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e24:	4a24      	ldr	r2, [pc, #144]	@ (8007eb8 <low_level_init+0x36c>)
 8007e26:	2140      	movs	r1, #64	@ 0x40
 8007e28:	f010 fbb4 	bl	8018594 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 8007e2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007e30:	4619      	mov	r1, r3
 8007e32:	4810      	ldr	r0, [pc, #64]	@ (8007e74 <low_level_init+0x328>)
 8007e34:	f7ff fcc2 	bl	80077bc <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e3c:	2b32      	cmp	r3, #50	@ 0x32
 8007e3e:	d93f      	bls.n	8007ec0 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 8007e40:	491e      	ldr	r1, [pc, #120]	@ (8007ebc <low_level_init+0x370>)
 8007e42:	480c      	ldr	r0, [pc, #48]	@ (8007e74 <low_level_init+0x328>)
 8007e44:	f7ff fcba 	bl	80077bc <cdc_debug_log>
        break;
 8007e48:	e043      	b.n	8007ed2 <low_level_init+0x386>
 8007e4a:	bf00      	nop
 8007e4c:	20005104 	.word	0x20005104
 8007e50:	40028000 	.word	0x40028000
 8007e54:	20005028 	.word	0x20005028
 8007e58:	20004f88 	.word	0x20004f88
 8007e5c:	200051b4 	.word	0x200051b4
 8007e60:	0801d188 	.word	0x0801d188
 8007e64:	200050fc 	.word	0x200050fc
 8007e68:	20005100 	.word	0x20005100
 8007e6c:	0801a170 	.word	0x0801a170
 8007e70:	08019e70 	.word	0x08019e70
 8007e74:	08019e94 	.word	0x08019e94
 8007e78:	200050e8 	.word	0x200050e8
 8007e7c:	080082a5 	.word	0x080082a5
 8007e80:	080082d1 	.word	0x080082d1
 8007e84:	080082f9 	.word	0x080082f9
 8007e88:	08008351 	.word	0x08008351
 8007e8c:	080083ad 	.word	0x080083ad
 8007e90:	200050c8 	.word	0x200050c8
 8007e94:	08019ea0 	.word	0x08019ea0
 8007e98:	08019ec4 	.word	0x08019ec4
 8007e9c:	08019ef0 	.word	0x08019ef0
 8007ea0:	08019f10 	.word	0x08019f10
 8007ea4:	08019f34 	.word	0x08019f34
 8007ea8:	08019f5c 	.word	0x08019f5c
 8007eac:	08019f7c 	.word	0x08019f7c
 8007eb0:	08019fa0 	.word	0x08019fa0
 8007eb4:	cccccccd 	.word	0xcccccccd
 8007eb8:	08019fc8 	.word	0x08019fc8
 8007ebc:	08019fec 	.word	0x08019fec
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 8007ec0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d08c      	beq.n	8007de2 <low_level_init+0x296>
 8007ec8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007ecc:	f113 0f05 	cmn.w	r3, #5
 8007ed0:	d087      	beq.n	8007de2 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 8007ed2:	4843      	ldr	r0, [pc, #268]	@ (8007fe0 <low_level_init+0x494>)
 8007ed4:	f7f9 fbb4 	bl	8001640 <eth_chip_get_link_state>
 8007ed8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 8007edc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8007ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8007fe4 <low_level_init+0x498>)
 8007ee6:	2140      	movs	r1, #64	@ 0x40
 8007ee8:	f010 fb54 	bl	8018594 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 8007eec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	483d      	ldr	r0, [pc, #244]	@ (8007fe8 <low_level_init+0x49c>)
 8007ef4:	f7ff fc62 	bl	80077bc <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 8007ef8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007efc:	f113 0f05 	cmn.w	r3, #5
 8007f00:	d053      	beq.n	8007faa <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 8007f02:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8007f06:	4619      	mov	r1, r3
 8007f08:	4838      	ldr	r0, [pc, #224]	@ (8007fec <low_level_init+0x4a0>)
 8007f0a:	f7fa fa0f 	bl	800232c <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 8007f0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f12:	3b02      	subs	r3, #2
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d83b      	bhi.n	8007f90 <low_level_init+0x444>
 8007f18:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <low_level_init+0x3d4>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f4b 	.word	0x08007f4b
 8007f28:	08007f63 	.word	0x08007f63
 8007f2c:	08007f7b 	.word	0x08007f7b
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007f30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 8007f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 8007f40:	492b      	ldr	r1, [pc, #172]	@ (8007ff0 <low_level_init+0x4a4>)
 8007f42:	4829      	ldr	r0, [pc, #164]	@ (8007fe8 <low_level_init+0x49c>)
 8007f44:	f7ff fc3a 	bl	80077bc <cdc_debug_log>
          break;
 8007f48:	e02f      	b.n	8007faa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 8007f50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 8007f58:	4926      	ldr	r1, [pc, #152]	@ (8007ff4 <low_level_init+0x4a8>)
 8007f5a:	4823      	ldr	r0, [pc, #140]	@ (8007fe8 <low_level_init+0x49c>)
 8007f5c:	f7ff fc2e 	bl	80077bc <cdc_debug_log>
          break;
 8007f60:	e023      	b.n	8007faa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007f62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 8007f70:	4921      	ldr	r1, [pc, #132]	@ (8007ff8 <low_level_init+0x4ac>)
 8007f72:	481d      	ldr	r0, [pc, #116]	@ (8007fe8 <low_level_init+0x49c>)
 8007f74:	f7ff fc22 	bl	80077bc <cdc_debug_log>
          break;
 8007f78:	e017      	b.n	8007faa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 8007f86:	491d      	ldr	r1, [pc, #116]	@ (8007ffc <low_level_init+0x4b0>)
 8007f88:	4817      	ldr	r0, [pc, #92]	@ (8007fe8 <low_level_init+0x49c>)
 8007f8a:	f7ff fc17 	bl	80077bc <cdc_debug_log>
          break;
 8007f8e:	e00c      	b.n	8007faa <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 8007f98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 8007fa0:	4917      	ldr	r1, [pc, #92]	@ (8008000 <low_level_init+0x4b4>)
 8007fa2:	4811      	ldr	r0, [pc, #68]	@ (8007fe8 <low_level_init+0x49c>)
 8007fa4:	f7ff fc0a 	bl	80077bc <cdc_debug_log>
          break;
 8007fa8:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 8007faa:	4916      	ldr	r1, [pc, #88]	@ (8008004 <low_level_init+0x4b8>)
 8007fac:	480e      	ldr	r0, [pc, #56]	@ (8007fe8 <low_level_init+0x49c>)
 8007fae:	f7ff fc05 	bl	80077bc <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 8007fb2:	4915      	ldr	r1, [pc, #84]	@ (8008008 <low_level_init+0x4bc>)
 8007fb4:	4815      	ldr	r0, [pc, #84]	@ (800800c <low_level_init+0x4c0>)
 8007fb6:	f7ff fc01 	bl	80077bc <cdc_debug_log>
    debug_eth_config();
 8007fba:	f7ff fd47 	bl	8007a4c <debug_eth_config>
    debug_eth_dma_registers();
 8007fbe:	f7ff fce9 	bl	8007994 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 8007fc2:	f7ff fc1b 	bl	80077fc <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 8007fc6:	4912      	ldr	r1, [pc, #72]	@ (8008010 <low_level_init+0x4c4>)
 8007fc8:	4810      	ldr	r0, [pc, #64]	@ (800800c <low_level_init+0x4c0>)
 8007fca:	f7ff fbf7 	bl	80077bc <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fce:	e001      	b.n	8007fd4 <low_level_init+0x488>
    Error_Handler();
 8007fd0:	f7f8 fd08 	bl	80009e4 <Error_Handler>
}
 8007fd4:	bf00      	nop
 8007fd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200050c8 	.word	0x200050c8
 8007fe4:	0801a01c 	.word	0x0801a01c
 8007fe8:	08019e94 	.word	0x08019e94
 8007fec:	20005104 	.word	0x20005104
 8007ff0:	0801a038 	.word	0x0801a038
 8007ff4:	0801a058 	.word	0x0801a058
 8007ff8:	0801a078 	.word	0x0801a078
 8007ffc:	0801a094 	.word	0x0801a094
 8008000:	0801a0b0 	.word	0x0801a0b0
 8008004:	0801a0cc 	.word	0x0801a0cc
 8008008:	0801a11c 	.word	0x0801a11c
 800800c:	0801a140 	.word	0x0801a140
 8008010:	0801a14c 	.word	0x0801a14c

08008014 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b092      	sub	sp, #72	@ 0x48
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	2230      	movs	r2, #48	@ 0x30
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f010 fb50 	bl	80186da <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800803a:	f107 030c 	add.w	r3, r7, #12
 800803e:	2230      	movs	r2, #48	@ 0x30
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f010 fb49 	bl	80186da <memset>

  for(q = p; q != NULL; q = q->next)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	643b      	str	r3, [r7, #64]	@ 0x40
 800804c:	e045      	b.n	80080da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800804e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008050:	2b03      	cmp	r3, #3
 8008052:	d902      	bls.n	800805a <low_level_output+0x46>
      return ERR_IF;
 8008054:	f06f 030b 	mvn.w	r3, #11
 8008058:	e07f      	b.n	800815a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800805a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800805c:	6859      	ldr	r1, [r3, #4]
 800805e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008060:	4613      	mov	r3, r2
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	3348      	adds	r3, #72	@ 0x48
 800806a:	443b      	add	r3, r7
 800806c:	3b3c      	subs	r3, #60	@ 0x3c
 800806e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008072:	895b      	ldrh	r3, [r3, #10]
 8008074:	4619      	mov	r1, r3
 8008076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008078:	4613      	mov	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	3348      	adds	r3, #72	@ 0x48
 8008082:	443b      	add	r3, r7
 8008084:	3b38      	subs	r3, #56	@ 0x38
 8008086:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800808a:	2b00      	cmp	r3, #0
 800808c:	d011      	beq.n	80080b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800808e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008090:	1e5a      	subs	r2, r3, #1
 8008092:	f107 000c 	add.w	r0, r7, #12
 8008096:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008098:	460b      	mov	r3, r1
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	440b      	add	r3, r1
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	18c1      	adds	r1, r0, r3
 80080a2:	4613      	mov	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	3348      	adds	r3, #72	@ 0x48
 80080ac:	443b      	add	r3, r7
 80080ae:	3b34      	subs	r3, #52	@ 0x34
 80080b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80080b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80080ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080bc:	4613      	mov	r3, r2
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	3348      	adds	r3, #72	@ 0x48
 80080c6:	443b      	add	r3, r7
 80080c8:	3b34      	subs	r3, #52	@ 0x34
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80080ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d0:	3301      	adds	r3, #1
 80080d2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80080d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1b6      	bne.n	800804e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	891b      	ldrh	r3, [r3, #8]
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008164 <low_level_output+0x150>)
 80080e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80080ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008164 <low_level_output+0x150>)
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80080f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <low_level_output+0x150>)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80080f8:	6838      	ldr	r0, [r7, #0]
 80080fa:	f007 f965 	bl	800f3c8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80080fe:	4919      	ldr	r1, [pc, #100]	@ (8008164 <low_level_output+0x150>)
 8008100:	4819      	ldr	r0, [pc, #100]	@ (8008168 <low_level_output+0x154>)
 8008102:	f7f9 fdb6 	bl	8001c72 <HAL_ETH_Transmit_IT>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008112:	e01b      	b.n	800814c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008114:	4814      	ldr	r0, [pc, #80]	@ (8008168 <low_level_output+0x154>)
 8008116:	f7fa fa1a 	bl	800254e <HAL_ETH_GetError>
 800811a:	4603      	mov	r3, r0
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008124:	4b11      	ldr	r3, [pc, #68]	@ (800816c <low_level_output+0x158>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800812c:	4618      	mov	r0, r3
 800812e:	f002 fd49 	bl	800abc4 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8008132:	480d      	ldr	r0, [pc, #52]	@ (8008168 <low_level_output+0x154>)
 8008134:	f7f9 ff3c 	bl	8001fb0 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8008138:	23fe      	movs	r3, #254	@ 0xfe
 800813a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800813e:	e005      	b.n	800814c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8008140:	6838      	ldr	r0, [r7, #0]
 8008142:	f007 f89b 	bl	800f27c <pbuf_free>
        errval =  ERR_IF;
 8008146:	23f4      	movs	r3, #244	@ 0xf4
 8008148:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800814c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008150:	f113 0f02 	cmn.w	r3, #2
 8008154:	d0d3      	beq.n	80080fe <low_level_output+0xea>

  return errval;
 8008156:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800815a:	4618      	mov	r0, r3
 800815c:	3748      	adds	r7, #72	@ 0x48
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200051b4 	.word	0x200051b4
 8008168:	20005104 	.word	0x20005104
 800816c:	20005100 	.word	0x20005100

08008170 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800817c:	4b07      	ldr	r3, [pc, #28]	@ (800819c <low_level_input+0x2c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	4619      	mov	r1, r3
 800818a:	4805      	ldr	r0, [pc, #20]	@ (80081a0 <low_level_input+0x30>)
 800818c:	f7f9 fdcd 	bl	8001d2a <HAL_ETH_ReadData>
  }

  return p;
 8008190:	68fb      	ldr	r3, [r7, #12]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20004f84 	.word	0x20004f84
 80081a0:	20005104 	.word	0x20005104

080081a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80081b4:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <ethernetif_input+0x50>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f04f 31ff 	mov.w	r1, #4294967295
 80081bc:	4618      	mov	r0, r3
 80081be:	f002 fd01 	bl	800abc4 <osSemaphoreWait>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f5      	bne.n	80081b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80081c8:	68b8      	ldr	r0, [r7, #8]
 80081ca:	f7ff ffd1 	bl	8008170 <low_level_input>
 80081ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	4798      	blx	r3
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f007 f848 	bl	800f27c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1ea      	bne.n	80081c8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80081f2:	e7df      	b.n	80081b4 <ethernetif_input+0x10>
 80081f4:	200050fc 	.word	0x200050fc

080081f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <ethernetif_init+0x1c>
 8008206:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <ethernetif_init+0x48>)
 8008208:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800820c:	490d      	ldr	r1, [pc, #52]	@ (8008244 <ethernetif_init+0x4c>)
 800820e:	480e      	ldr	r0, [pc, #56]	@ (8008248 <ethernetif_init+0x50>)
 8008210:	f010 f9ae 	bl	8018570 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2273      	movs	r2, #115	@ 0x73
 8008218:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2274      	movs	r2, #116	@ 0x74
 8008220:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a09      	ldr	r2, [pc, #36]	@ (800824c <ethernetif_init+0x54>)
 8008228:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a08      	ldr	r2, [pc, #32]	@ (8008250 <ethernetif_init+0x58>)
 800822e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff fc8b 	bl	8007b4c <low_level_init>

  return ERR_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	0801a18c 	.word	0x0801a18c
 8008244:	0801a1a8 	.word	0x0801a1a8
 8008248:	0801a1b8 	.word	0x0801a1b8
 800824c:	08015901 	.word	0x08015901
 8008250:	08008015 	.word	0x08008015

08008254 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	4809      	ldr	r0, [pc, #36]	@ (8008288 <pbuf_free_custom+0x34>)
 8008264:	f006 f974 	bl	800e550 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008268:	4b08      	ldr	r3, [pc, #32]	@ (800828c <pbuf_free_custom+0x38>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d107      	bne.n	8008280 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008270:	4b06      	ldr	r3, [pc, #24]	@ (800828c <pbuf_free_custom+0x38>)
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008276:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <pbuf_free_custom+0x3c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f002 fcf0 	bl	800ac60 <osSemaphoreRelease>
  }
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	0801d188 	.word	0x0801d188
 800828c:	20004f84 	.word	0x20004f84
 8008290:	200050fc 	.word	0x200050fc

08008294 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008298:	f7f9 fa4e 	bl	8001738 <HAL_GetTick>
 800829c:	4603      	mov	r3, r0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 80082a8:	4906      	ldr	r1, [pc, #24]	@ (80082c4 <PHY_IO_Init+0x20>)
 80082aa:	4807      	ldr	r0, [pc, #28]	@ (80082c8 <PHY_IO_Init+0x24>)
 80082ac:	f7ff fa86 	bl	80077bc <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 80082b0:	200a      	movs	r0, #10
 80082b2:	f7f9 fa4d 	bl	8001750 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 80082b6:	4905      	ldr	r1, [pc, #20]	@ (80082cc <PHY_IO_Init+0x28>)
 80082b8:	4803      	ldr	r0, [pc, #12]	@ (80082c8 <PHY_IO_Init+0x24>)
 80082ba:	f7ff fa7f 	bl	80077bc <cdc_debug_log>
  return 0;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	0801a1e0 	.word	0x0801a1e0
 80082c8:	0801a21c 	.word	0x0801a21c
 80082cc:	0801a224 	.word	0x0801a224

080082d0 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 80082d4:	4905      	ldr	r1, [pc, #20]	@ (80082ec <PHY_IO_DeInit+0x1c>)
 80082d6:	4806      	ldr	r0, [pc, #24]	@ (80082f0 <PHY_IO_DeInit+0x20>)
 80082d8:	f7ff fa70 	bl	80077bc <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 80082dc:	4905      	ldr	r1, [pc, #20]	@ (80082f4 <PHY_IO_DeInit+0x24>)
 80082de:	4804      	ldr	r0, [pc, #16]	@ (80082f0 <PHY_IO_DeInit+0x20>)
 80082e0:	f7ff fa6c 	bl	80077bc <cdc_debug_log>
  return 0;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	0801a248 	.word	0x0801a248
 80082f0:	0801a21c 	.word	0x0801a21c
 80082f4:	0801a280 	.word	0x0801a280

080082f8 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b096      	sub	sp, #88	@ 0x58
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	480e      	ldr	r0, [pc, #56]	@ (8008344 <PHY_IO_ReadReg+0x4c>)
 800830c:	f7f9 ff7a 	bl	8002204 <HAL_ETH_ReadPHYRegister>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d011      	beq.n	800833a <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 8008316:	f107 0010 	add.w	r0, r7, #16
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a09      	ldr	r2, [pc, #36]	@ (8008348 <PHY_IO_ReadReg+0x50>)
 8008322:	2140      	movs	r1, #64	@ 0x40
 8008324:	f010 f936 	bl	8018594 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	4619      	mov	r1, r3
 800832e:	4807      	ldr	r0, [pc, #28]	@ (800834c <PHY_IO_ReadReg+0x54>)
 8008330:	f7ff fa44 	bl	80077bc <cdc_debug_log>
    return -1;
 8008334:	f04f 33ff 	mov.w	r3, #4294967295
 8008338:	e000      	b.n	800833c <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3750      	adds	r7, #80	@ 0x50
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20005104 	.word	0x20005104
 8008348:	0801a298 	.word	0x0801a298
 800834c:	0801a21c 	.word	0x0801a21c

08008350 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b096      	sub	sp, #88	@ 0x58
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	68f9      	ldr	r1, [r7, #12]
 8008362:	480f      	ldr	r0, [pc, #60]	@ (80083a0 <PHY_IO_WriteReg+0x50>)
 8008364:	f7f9 ff99 	bl	800229a <HAL_ETH_WritePHYRegister>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d013      	beq.n	8008396 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800836e:	f107 0010 	add.w	r0, r7, #16
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <PHY_IO_WriteReg+0x54>)
 800837e:	2140      	movs	r1, #64	@ 0x40
 8008380:	f010 f908 	bl	8018594 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 8008384:	f107 0310 	add.w	r3, r7, #16
 8008388:	4619      	mov	r1, r3
 800838a:	4807      	ldr	r0, [pc, #28]	@ (80083a8 <PHY_IO_WriteReg+0x58>)
 800838c:	f7ff fa16 	bl	80077bc <cdc_debug_log>
    return -1;
 8008390:	f04f 33ff 	mov.w	r3, #4294967295
 8008394:	e000      	b.n	8008398 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3750      	adds	r7, #80	@ 0x50
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20005104 	.word	0x20005104
 80083a4:	0801a2c0 	.word	0x0801a2c0
 80083a8:	0801a21c 	.word	0x0801a21c

080083ac <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083b0:	f7f9 f9c2 	bl	8001738 <HAL_GetTick>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b0b0      	sub	sp, #192	@ 0xc0
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083d0:	2300      	movs	r3, #0
 80083d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 80083dc:	49be      	ldr	r1, [pc, #760]	@ (80086d8 <ethernet_link_thread+0x31c>)
 80083de:	48bf      	ldr	r0, [pc, #764]	@ (80086dc <ethernet_link_thread+0x320>)
 80083e0:	f7ff f9ec 	bl	80077bc <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 80083e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e8:	3301      	adds	r3, #1
 80083ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 80083ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083f2:	4bbb      	ldr	r3, [pc, #748]	@ (80086e0 <ethernet_link_thread+0x324>)
 80083f4:	fba3 1302 	umull	r1, r3, r3, r2
 80083f8:	091b      	lsrs	r3, r3, #4
 80083fa:	2132      	movs	r1, #50	@ 0x32
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 8008406:	f107 0008 	add.w	r0, r7, #8
 800840a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800840e:	4ab5      	ldr	r2, [pc, #724]	@ (80086e4 <ethernet_link_thread+0x328>)
 8008410:	2120      	movs	r1, #32
 8008412:	f010 f8bf 	bl	8018594 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4619      	mov	r1, r3
 800841c:	48af      	ldr	r0, [pc, #700]	@ (80086dc <ethernet_link_thread+0x320>)
 800841e:	f7ff f9cd 	bl	80077bc <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 8008422:	48b1      	ldr	r0, [pc, #708]	@ (80086e8 <ethernet_link_thread+0x32c>)
 8008424:	f7f9 f90c 	bl	8001640 <eth_chip_get_link_state>
 8008428:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800842c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008430:	f113 0f05 	cmn.w	r3, #5
 8008434:	f000 8111 	beq.w	800865a <ethernet_link_thread+0x29e>
 8008438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800843c:	2b01      	cmp	r3, #1
 800843e:	f000 810c 	beq.w	800865a <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 8008442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008446:	3b02      	subs	r3, #2
 8008448:	2b04      	cmp	r3, #4
 800844a:	d874      	bhi.n	8008536 <ethernet_link_thread+0x17a>
 800844c:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <ethernet_link_thread+0x98>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008469 	.word	0x08008469
 8008458:	08008491 	.word	0x08008491
 800845c:	080084b9 	.word	0x080084b9
 8008460:	080084e1 	.word	0x080084e1
 8008464:	08008509 	.word	0x08008509
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 8008468:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800846c:	4b9c      	ldr	r3, [pc, #624]	@ (80086e0 <ethernet_link_thread+0x324>)
 800846e:	fba3 1302 	umull	r1, r3, r3, r2
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	2132      	movs	r1, #50	@ 0x32
 8008476:	fb01 f303 	mul.w	r3, r1, r3
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <ethernet_link_thread+0xcc>
 8008480:	499a      	ldr	r1, [pc, #616]	@ (80086ec <ethernet_link_thread+0x330>)
 8008482:	4896      	ldr	r0, [pc, #600]	@ (80086dc <ethernet_link_thread+0x320>)
 8008484:	f7ff f99a 	bl	80077bc <cdc_debug_log>
          linkup = 1;
 8008488:	2301      	movs	r3, #1
 800848a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800848e:	e066      	b.n	800855e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 8008490:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008494:	4b92      	ldr	r3, [pc, #584]	@ (80086e0 <ethernet_link_thread+0x324>)
 8008496:	fba3 1302 	umull	r1, r3, r3, r2
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	2132      	movs	r1, #50	@ 0x32
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d103      	bne.n	80084b0 <ethernet_link_thread+0xf4>
 80084a8:	4991      	ldr	r1, [pc, #580]	@ (80086f0 <ethernet_link_thread+0x334>)
 80084aa:	488c      	ldr	r0, [pc, #560]	@ (80086dc <ethernet_link_thread+0x320>)
 80084ac:	f7ff f986 	bl	80077bc <cdc_debug_log>
          linkup = 1;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 80084b6:	e052      	b.n	800855e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 80084b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084bc:	4b88      	ldr	r3, [pc, #544]	@ (80086e0 <ethernet_link_thread+0x324>)
 80084be:	fba3 1302 	umull	r1, r3, r3, r2
 80084c2:	091b      	lsrs	r3, r3, #4
 80084c4:	2132      	movs	r1, #50	@ 0x32
 80084c6:	fb01 f303 	mul.w	r3, r1, r3
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <ethernet_link_thread+0x11c>
 80084d0:	4988      	ldr	r1, [pc, #544]	@ (80086f4 <ethernet_link_thread+0x338>)
 80084d2:	4882      	ldr	r0, [pc, #520]	@ (80086dc <ethernet_link_thread+0x320>)
 80084d4:	f7ff f972 	bl	80077bc <cdc_debug_log>
          linkup = 1;
 80084d8:	2301      	movs	r3, #1
 80084da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 80084de:	e03e      	b.n	800855e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 80084e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084e4:	4b7e      	ldr	r3, [pc, #504]	@ (80086e0 <ethernet_link_thread+0x324>)
 80084e6:	fba3 1302 	umull	r1, r3, r3, r2
 80084ea:	091b      	lsrs	r3, r3, #4
 80084ec:	2132      	movs	r1, #50	@ 0x32
 80084ee:	fb01 f303 	mul.w	r3, r1, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <ethernet_link_thread+0x144>
 80084f8:	497f      	ldr	r1, [pc, #508]	@ (80086f8 <ethernet_link_thread+0x33c>)
 80084fa:	4878      	ldr	r0, [pc, #480]	@ (80086dc <ethernet_link_thread+0x320>)
 80084fc:	f7ff f95e 	bl	80077bc <cdc_debug_log>
          linkup = 1;
 8008500:	2301      	movs	r3, #1
 8008502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 8008506:	e02a      	b.n	800855e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 8008508:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800850c:	4b74      	ldr	r3, [pc, #464]	@ (80086e0 <ethernet_link_thread+0x324>)
 800850e:	fba3 1302 	umull	r1, r3, r3, r2
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	2132      	movs	r1, #50	@ 0x32
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 8008520:	4976      	ldr	r1, [pc, #472]	@ (80086fc <ethernet_link_thread+0x340>)
 8008522:	486e      	ldr	r0, [pc, #440]	@ (80086dc <ethernet_link_thread+0x320>)
 8008524:	f7ff f94a 	bl	80077bc <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 8008528:	486f      	ldr	r0, [pc, #444]	@ (80086e8 <ethernet_link_thread+0x32c>)
 800852a:	f7f9 f85c 	bl	80015e6 <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 8008534:	e013      	b.n	800855e <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 8008536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800853a:	4b69      	ldr	r3, [pc, #420]	@ (80086e0 <ethernet_link_thread+0x324>)
 800853c:	fba3 1302 	umull	r1, r3, r3, r2
 8008540:	091b      	lsrs	r3, r3, #4
 8008542:	2132      	movs	r1, #50	@ 0x32
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <ethernet_link_thread+0x19a>
 800854e:	496c      	ldr	r1, [pc, #432]	@ (8008700 <ethernet_link_thread+0x344>)
 8008550:	4862      	ldr	r0, [pc, #392]	@ (80086dc <ethernet_link_thread+0x320>)
 8008552:	f7ff f933 	bl	80077bc <cdc_debug_log>
          linkup = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800855c:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800855e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8113 	beq.w	800878e <ethernet_link_thread+0x3d2>
 8008568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800856c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 810a 	bne.w	800878e <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800857a:	4962      	ldr	r1, [pc, #392]	@ (8008704 <ethernet_link_thread+0x348>)
 800857c:	4857      	ldr	r0, [pc, #348]	@ (80086dc <ethernet_link_thread+0x320>)
 800857e:	f7ff f91d 	bl	80077bc <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 8008582:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008586:	4619      	mov	r1, r3
 8008588:	485f      	ldr	r0, [pc, #380]	@ (8008708 <ethernet_link_thread+0x34c>)
 800858a:	f7f9 fecf 	bl	800232c <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800858e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008592:	3b02      	subs	r3, #2
 8008594:	2b03      	cmp	r3, #3
 8008596:	d833      	bhi.n	8008600 <ethernet_link_thread+0x244>
 8008598:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <ethernet_link_thread+0x1e4>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085c7 	.word	0x080085c7
 80085a8:	080085db 	.word	0x080085db
 80085ac:	080085ef 	.word	0x080085ef
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 80085b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085b4:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 80085b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 80085bc:	4953      	ldr	r1, [pc, #332]	@ (800870c <ethernet_link_thread+0x350>)
 80085be:	4847      	ldr	r0, [pc, #284]	@ (80086dc <ethernet_link_thread+0x320>)
 80085c0:	f7ff f8fc 	bl	80077bc <cdc_debug_log>
            break;
 80085c4:	e01c      	b.n	8008600 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 80085ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 80085d0:	494f      	ldr	r1, [pc, #316]	@ (8008710 <ethernet_link_thread+0x354>)
 80085d2:	4842      	ldr	r0, [pc, #264]	@ (80086dc <ethernet_link_thread+0x320>)
 80085d4:	f7ff f8f2 	bl	80077bc <cdc_debug_log>
            break;
 80085d8:	e012      	b.n	8008600 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 80085da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085de:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 80085e0:	2300      	movs	r3, #0
 80085e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 80085e4:	494b      	ldr	r1, [pc, #300]	@ (8008714 <ethernet_link_thread+0x358>)
 80085e6:	483d      	ldr	r0, [pc, #244]	@ (80086dc <ethernet_link_thread+0x320>)
 80085e8:	f7ff f8e8 	bl	80077bc <cdc_debug_log>
            break;
 80085ec:	e008      	b.n	8008600 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 80085f2:	2300      	movs	r3, #0
 80085f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 80085f6:	4948      	ldr	r1, [pc, #288]	@ (8008718 <ethernet_link_thread+0x35c>)
 80085f8:	4838      	ldr	r0, [pc, #224]	@ (80086dc <ethernet_link_thread+0x320>)
 80085fa:	f7ff f8df 	bl	80077bc <cdc_debug_log>
            break;
 80085fe:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 8008600:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008604:	4619      	mov	r1, r3
 8008606:	4840      	ldr	r0, [pc, #256]	@ (8008708 <ethernet_link_thread+0x34c>)
 8008608:	f7f9 ff87 	bl	800251a <HAL_ETH_SetMACConfig>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 8008612:	4942      	ldr	r1, [pc, #264]	@ (800871c <ethernet_link_thread+0x360>)
 8008614:	4831      	ldr	r0, [pc, #196]	@ (80086dc <ethernet_link_thread+0x320>)
 8008616:	f7ff f8d1 	bl	80077bc <cdc_debug_log>
 800861a:	e003      	b.n	8008624 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800861c:	4940      	ldr	r1, [pc, #256]	@ (8008720 <ethernet_link_thread+0x364>)
 800861e:	482f      	ldr	r0, [pc, #188]	@ (80086dc <ethernet_link_thread+0x320>)
 8008620:	f7ff f8cc 	bl	80077bc <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 8008624:	4838      	ldr	r0, [pc, #224]	@ (8008708 <ethernet_link_thread+0x34c>)
 8008626:	f7f9 fa35 	bl	8001a94 <HAL_ETH_Start_IT>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 8008630:	493c      	ldr	r1, [pc, #240]	@ (8008724 <ethernet_link_thread+0x368>)
 8008632:	482a      	ldr	r0, [pc, #168]	@ (80086dc <ethernet_link_thread+0x320>)
 8008634:	f7ff f8c2 	bl	80077bc <cdc_debug_log>
 8008638:	e003      	b.n	8008642 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800863a:	493b      	ldr	r1, [pc, #236]	@ (8008728 <ethernet_link_thread+0x36c>)
 800863c:	4827      	ldr	r0, [pc, #156]	@ (80086dc <ethernet_link_thread+0x320>)
 800863e:	f7ff f8bd 	bl	80077bc <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 8008642:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8008646:	f006 fa07 	bl	800ea58 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800864a:	4938      	ldr	r1, [pc, #224]	@ (800872c <ethernet_link_thread+0x370>)
 800864c:	4823      	ldr	r0, [pc, #140]	@ (80086dc <ethernet_link_thread+0x320>)
 800864e:	f7ff f8b5 	bl	80077bc <cdc_debug_log>
        linkchanged = 1;
 8008652:	2301      	movs	r3, #1
 8008654:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 8008658:	e099      	b.n	800878e <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800865a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800865e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008662:	089b      	lsrs	r3, r3, #2
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01e      	beq.n	80086ac <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800866e:	4930      	ldr	r1, [pc, #192]	@ (8008730 <ethernet_link_thread+0x374>)
 8008670:	481a      	ldr	r0, [pc, #104]	@ (80086dc <ethernet_link_thread+0x320>)
 8008672:	f7ff f8a3 	bl	80077bc <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 8008676:	4824      	ldr	r0, [pc, #144]	@ (8008708 <ethernet_link_thread+0x34c>)
 8008678:	f7f9 fa7c 	bl	8001b74 <HAL_ETH_Stop_IT>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 8008682:	492c      	ldr	r1, [pc, #176]	@ (8008734 <ethernet_link_thread+0x378>)
 8008684:	4815      	ldr	r0, [pc, #84]	@ (80086dc <ethernet_link_thread+0x320>)
 8008686:	f7ff f899 	bl	80077bc <cdc_debug_log>
 800868a:	e003      	b.n	8008694 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800868c:	492a      	ldr	r1, [pc, #168]	@ (8008738 <ethernet_link_thread+0x37c>)
 800868e:	4813      	ldr	r0, [pc, #76]	@ (80086dc <ethernet_link_thread+0x320>)
 8008690:	f7ff f894 	bl	80077bc <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 8008694:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8008698:	f006 fa12 	bl	800eac0 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800869c:	4927      	ldr	r1, [pc, #156]	@ (800873c <ethernet_link_thread+0x380>)
 800869e:	480f      	ldr	r0, [pc, #60]	@ (80086dc <ethernet_link_thread+0x320>)
 80086a0:	f7ff f88c 	bl	80077bc <cdc_debug_log>
        linkchanged = 1;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086aa:	e06c      	b.n	8008786 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 80086ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086b0:	4b0b      	ldr	r3, [pc, #44]	@ (80086e0 <ethernet_link_thread+0x324>)
 80086b2:	fba3 1302 	umull	r1, r3, r3, r2
 80086b6:	091b      	lsrs	r3, r3, #4
 80086b8:	2132      	movs	r1, #50	@ 0x32
 80086ba:	fb01 f303 	mul.w	r3, r1, r3
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d160      	bne.n	8008786 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 80086c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086c8:	f113 0f05 	cmn.w	r3, #5
 80086cc:	d13a      	bne.n	8008744 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 80086ce:	491c      	ldr	r1, [pc, #112]	@ (8008740 <ethernet_link_thread+0x384>)
 80086d0:	4802      	ldr	r0, [pc, #8]	@ (80086dc <ethernet_link_thread+0x320>)
 80086d2:	f7ff f873 	bl	80077bc <cdc_debug_log>
 80086d6:	e056      	b.n	8008786 <ethernet_link_thread+0x3ca>
 80086d8:	0801a2f4 	.word	0x0801a2f4
 80086dc:	0801a318 	.word	0x0801a318
 80086e0:	51eb851f 	.word	0x51eb851f
 80086e4:	0801a324 	.word	0x0801a324
 80086e8:	200050c8 	.word	0x200050c8
 80086ec:	0801a334 	.word	0x0801a334
 80086f0:	0801a34c 	.word	0x0801a34c
 80086f4:	0801a364 	.word	0x0801a364
 80086f8:	0801a37c 	.word	0x0801a37c
 80086fc:	0801a394 	.word	0x0801a394
 8008700:	0801a3c0 	.word	0x0801a3c0
 8008704:	0801a3d4 	.word	0x0801a3d4
 8008708:	20005104 	.word	0x20005104
 800870c:	0801a400 	.word	0x0801a400
 8008710:	0801a420 	.word	0x0801a420
 8008714:	0801a440 	.word	0x0801a440
 8008718:	0801a460 	.word	0x0801a460
 800871c:	0801a480 	.word	0x0801a480
 8008720:	0801a4a0 	.word	0x0801a4a0
 8008724:	0801a4c8 	.word	0x0801a4c8
 8008728:	0801a4dc 	.word	0x0801a4dc
 800872c:	0801a4f8 	.word	0x0801a4f8
 8008730:	0801a51c 	.word	0x0801a51c
 8008734:	0801a544 	.word	0x0801a544
 8008738:	0801a558 	.word	0x0801a558
 800873c:	0801a574 	.word	0x0801a574
 8008740:	0801a598 	.word	0x0801a598
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 8008744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10e      	bne.n	800876a <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800874c:	4926      	ldr	r1, [pc, #152]	@ (80087e8 <ethernet_link_thread+0x42c>)
 800874e:	4827      	ldr	r0, [pc, #156]	@ (80087ec <ethernet_link_thread+0x430>)
 8008750:	f7ff f834 	bl	80077bc <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 8008754:	4826      	ldr	r0, [pc, #152]	@ (80087f0 <ethernet_link_thread+0x434>)
 8008756:	f7f8 ff46 	bl	80015e6 <eth_chip_start_auto_nego>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d112      	bne.n	8008786 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 8008760:	4924      	ldr	r1, [pc, #144]	@ (80087f4 <ethernet_link_thread+0x438>)
 8008762:	4822      	ldr	r0, [pc, #136]	@ (80087ec <ethernet_link_thread+0x430>)
 8008764:	f7ff f82a 	bl	80077bc <cdc_debug_log>
 8008768:	e00d      	b.n	8008786 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800876a:	f107 0008 	add.w	r0, r7, #8
 800876e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008772:	4a21      	ldr	r2, [pc, #132]	@ (80087f8 <ethernet_link_thread+0x43c>)
 8008774:	2140      	movs	r1, #64	@ 0x40
 8008776:	f00f ff0d 	bl	8018594 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4619      	mov	r1, r3
 8008780:	481a      	ldr	r0, [pc, #104]	@ (80087ec <ethernet_link_thread+0x430>)
 8008782:	f7ff f81b 	bl	80077bc <cdc_debug_log>
        }
      }
      linkup = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800878c:	e000      	b.n	8008790 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800878e:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 8008790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00c      	beq.n	80087b2 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800879e:	4917      	ldr	r1, [pc, #92]	@ (80087fc <ethernet_link_thread+0x440>)
 80087a0:	4812      	ldr	r0, [pc, #72]	@ (80087ec <ethernet_link_thread+0x430>)
 80087a2:	f7ff f80b 	bl	80077bc <cdc_debug_log>
      debug_eth_dma_registers();
 80087a6:	f7ff f8f5 	bl	8007994 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 80087aa:	4915      	ldr	r1, [pc, #84]	@ (8008800 <ethernet_link_thread+0x444>)
 80087ac:	480f      	ldr	r0, [pc, #60]	@ (80087ec <ethernet_link_thread+0x430>)
 80087ae:	f7ff f805 	bl	80077bc <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 80087b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087b6:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <ethernet_link_thread+0x448>)
 80087b8:	fba3 1302 	umull	r1, r3, r3, r2
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	2164      	movs	r1, #100	@ 0x64
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 80087ca:	490f      	ldr	r1, [pc, #60]	@ (8008808 <ethernet_link_thread+0x44c>)
 80087cc:	4807      	ldr	r0, [pc, #28]	@ (80087ec <ethernet_link_thread+0x430>)
 80087ce:	f7fe fff5 	bl	80077bc <cdc_debug_log>
      debug_eth_dma_registers();
 80087d2:	f7ff f8df 	bl	8007994 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 80087d6:	490d      	ldr	r1, [pc, #52]	@ (800880c <ethernet_link_thread+0x450>)
 80087d8:	4804      	ldr	r0, [pc, #16]	@ (80087ec <ethernet_link_thread+0x430>)
 80087da:	f7fe ffef 	bl	80077bc <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80087de:	2064      	movs	r0, #100	@ 0x64
 80087e0:	f002 f90e 	bl	800aa00 <osDelay>
    link_check_counter++;
 80087e4:	e5fe      	b.n	80083e4 <ethernet_link_thread+0x28>
 80087e6:	bf00      	nop
 80087e8:	0801a5b0 	.word	0x0801a5b0
 80087ec:	0801a318 	.word	0x0801a318
 80087f0:	200050c8 	.word	0x200050c8
 80087f4:	0801a5dc 	.word	0x0801a5dc
 80087f8:	0801a5f8 	.word	0x0801a5f8
 80087fc:	0801a610 	.word	0x0801a610
 8008800:	0801a638 	.word	0x0801a638
 8008804:	51eb851f 	.word	0x51eb851f
 8008808:	0801a654 	.word	0x0801a654
 800880c:	0801a678 	.word	0x0801a678

08008810 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af02      	add	r7, sp, #8
 8008816:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008818:	4812      	ldr	r0, [pc, #72]	@ (8008864 <HAL_ETH_RxAllocateCallback+0x54>)
 800881a:	f005 fe25 	bl	800e468 <memp_malloc_pool>
 800881e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d014      	beq.n	8008850 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f103 0220 	add.w	r2, r3, #32
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a0d      	ldr	r2, [pc, #52]	@ (8008868 <HAL_ETH_RxAllocateCallback+0x58>)
 8008834:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800883e:	9201      	str	r2, [sp, #4]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2241      	movs	r2, #65	@ 0x41
 8008846:	2100      	movs	r1, #0
 8008848:	2000      	movs	r0, #0
 800884a:	f006 fb5d 	bl	800ef08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800884e:	e005      	b.n	800885c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008850:	4b06      	ldr	r3, [pc, #24]	@ (800886c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008852:	2201      	movs	r2, #1
 8008854:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	0801d188 	.word	0x0801d188
 8008868:	08008255 	.word	0x08008255
 800886c:	20004f84 	.word	0x20004f84

08008870 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	@ 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3b20      	subs	r3, #32
 800888e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2200      	movs	r2, #0
 800889a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	887a      	ldrh	r2, [r7, #2]
 80088a0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e003      	b.n	80088ba <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	e009      	b.n	80088dc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	891a      	ldrh	r2, [r3, #8]
 80088cc:	887b      	ldrh	r3, [r7, #2]
 80088ce:	4413      	add	r3, r2
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f2      	bne.n	80088c8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3724      	adds	r7, #36	@ 0x24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f006 fcbf 	bl	800f27c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008914:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008918:	f00f fce6 	bl	80182e8 <USBD_static_malloc>
 800891c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	32b0      	adds	r2, #176	@ 0xb0
 800892e:	2100      	movs	r1, #0
 8008930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008934:	2302      	movs	r3, #2
 8008936:	e0d4      	b.n	8008ae2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008938:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800893c:	2100      	movs	r1, #0
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f00f fecb 	bl	80186da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32b0      	adds	r2, #176	@ 0xb0
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	32b0      	adds	r2, #176	@ 0xb0
 800895e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7c1b      	ldrb	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d138      	bne.n	80089e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008970:	4b5e      	ldr	r3, [pc, #376]	@ (8008aec <USBD_CDC_Init+0x1e4>)
 8008972:	7819      	ldrb	r1, [r3, #0]
 8008974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008978:	2202      	movs	r2, #2
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f00f fb91 	bl	80180a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008980:	4b5a      	ldr	r3, [pc, #360]	@ (8008aec <USBD_CDC_Init+0x1e4>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3323      	adds	r3, #35	@ 0x23
 8008996:	2201      	movs	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800899a:	4b55      	ldr	r3, [pc, #340]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 800899c:	7819      	ldrb	r1, [r3, #0]
 800899e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089a2:	2202      	movs	r2, #2
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f00f fb7c 	bl	80180a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089aa:	4b51      	ldr	r3, [pc, #324]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	f003 020f 	and.w	r2, r3, #15
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089c6:	4b4b      	ldr	r3, [pc, #300]	@ (8008af4 <USBD_CDC_Init+0x1ec>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	331c      	adds	r3, #28
 80089dc:	2210      	movs	r2, #16
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e035      	b.n	8008a4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089e2:	4b42      	ldr	r3, [pc, #264]	@ (8008aec <USBD_CDC_Init+0x1e4>)
 80089e4:	7819      	ldrb	r1, [r3, #0]
 80089e6:	2340      	movs	r3, #64	@ 0x40
 80089e8:	2202      	movs	r2, #2
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f00f fb59 	bl	80180a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089f0:	4b3e      	ldr	r3, [pc, #248]	@ (8008aec <USBD_CDC_Init+0x1e4>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 020f 	and.w	r2, r3, #15
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	3323      	adds	r3, #35	@ 0x23
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a0a:	4b39      	ldr	r3, [pc, #228]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 8008a0c:	7819      	ldrb	r1, [r3, #0]
 8008a0e:	2340      	movs	r3, #64	@ 0x40
 8008a10:	2202      	movs	r2, #2
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f00f fb45 	bl	80180a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a18:	4b35      	ldr	r3, [pc, #212]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 020f 	and.w	r2, r3, #15
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008a30:	2201      	movs	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a34:	4b2f      	ldr	r3, [pc, #188]	@ (8008af4 <USBD_CDC_Init+0x1ec>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	331c      	adds	r3, #28
 8008a4a:	2210      	movs	r2, #16
 8008a4c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a4e:	4b29      	ldr	r3, [pc, #164]	@ (8008af4 <USBD_CDC_Init+0x1ec>)
 8008a50:	7819      	ldrb	r1, [r3, #0]
 8008a52:	2308      	movs	r3, #8
 8008a54:	2203      	movs	r2, #3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f00f fb23 	bl	80180a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a5c:	4b25      	ldr	r3, [pc, #148]	@ (8008af4 <USBD_CDC_Init+0x1ec>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3323      	adds	r3, #35	@ 0x23
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	33b0      	adds	r3, #176	@ 0xb0
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008aac:	2302      	movs	r3, #2
 8008aae:	e018      	b.n	8008ae2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	7c1b      	ldrb	r3, [r3, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 8008aba:	7819      	ldrb	r1, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f00f fbda 	bl	8018280 <USBD_LL_PrepareReceive>
 8008acc:	e008      	b.n	8008ae0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ace:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <USBD_CDC_Init+0x1e8>)
 8008ad0:	7819      	ldrb	r1, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ad8:	2340      	movs	r3, #64	@ 0x40
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f00f fbd0 	bl	8018280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000093 	.word	0x20000093
 8008af0:	20000094 	.word	0x20000094
 8008af4:	20000095 	.word	0x20000095

08008af8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b04:	4b3a      	ldr	r3, [pc, #232]	@ (8008bf0 <USBD_CDC_DeInit+0xf8>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f00f faef 	bl	80180ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b10:	4b37      	ldr	r3, [pc, #220]	@ (8008bf0 <USBD_CDC_DeInit+0xf8>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 020f 	and.w	r2, r3, #15
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	440b      	add	r3, r1
 8008b24:	3323      	adds	r3, #35	@ 0x23
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b2a:	4b32      	ldr	r3, [pc, #200]	@ (8008bf4 <USBD_CDC_DeInit+0xfc>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f00f fadc 	bl	80180ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b36:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf4 <USBD_CDC_DeInit+0xfc>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 020f 	and.w	r2, r3, #15
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b52:	4b29      	ldr	r3, [pc, #164]	@ (8008bf8 <USBD_CDC_DeInit+0x100>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f00f fac8 	bl	80180ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b5e:	4b26      	ldr	r3, [pc, #152]	@ (8008bf8 <USBD_CDC_DeInit+0x100>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 020f 	and.w	r2, r3, #15
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	3323      	adds	r3, #35	@ 0x23
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b78:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf8 <USBD_CDC_DeInit+0x100>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 020f 	and.w	r2, r3, #15
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	331c      	adds	r3, #28
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32b0      	adds	r2, #176	@ 0xb0
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01f      	beq.n	8008be4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	33b0      	adds	r3, #176	@ 0xb0
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	32b0      	adds	r2, #176	@ 0xb0
 8008bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00f fb9c 	bl	8018304 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32b0      	adds	r2, #176	@ 0xb0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000093 	.word	0x20000093
 8008bf4:	20000094 	.word	0x20000094
 8008bf8:	20000095 	.word	0x20000095

08008bfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	32b0      	adds	r2, #176	@ 0xb0
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e0bf      	b.n	8008dac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d050      	beq.n	8008cda <USBD_CDC_Setup+0xde>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	f040 80af 	bne.w	8008d9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d03a      	beq.n	8008cbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da1b      	bge.n	8008c88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	33b0      	adds	r3, #176	@ 0xb0
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	88d2      	ldrh	r2, [r2, #6]
 8008c6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b07      	cmp	r3, #7
 8008c74:	bf28      	it	cs
 8008c76:	2307      	movcs	r3, #7
 8008c78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	89fa      	ldrh	r2, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fda9 	bl	800a7d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c86:	e090      	b.n	8008daa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	785a      	ldrb	r2, [r3, #1]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	88db      	ldrh	r3, [r3, #6]
 8008c96:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c98:	d803      	bhi.n	8008ca2 <USBD_CDC_Setup+0xa6>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	e000      	b.n	8008ca4 <USBD_CDC_Setup+0xa8>
 8008ca2:	2240      	movs	r2, #64	@ 0x40
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008caa:	6939      	ldr	r1, [r7, #16]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fdbe 	bl	800a836 <USBD_CtlPrepareRx>
      break;
 8008cba:	e076      	b.n	8008daa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	33b0      	adds	r3, #176	@ 0xb0
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	7850      	ldrb	r0, [r2, #1]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	4798      	blx	r3
      break;
 8008cd8:	e067      	b.n	8008daa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b0b      	cmp	r3, #11
 8008ce0:	d851      	bhi.n	8008d86 <USBD_CDC_Setup+0x18a>
 8008ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <USBD_CDC_Setup+0xec>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d19 	.word	0x08008d19
 8008cec:	08008d95 	.word	0x08008d95
 8008cf0:	08008d87 	.word	0x08008d87
 8008cf4:	08008d87 	.word	0x08008d87
 8008cf8:	08008d87 	.word	0x08008d87
 8008cfc:	08008d87 	.word	0x08008d87
 8008d00:	08008d87 	.word	0x08008d87
 8008d04:	08008d87 	.word	0x08008d87
 8008d08:	08008d87 	.word	0x08008d87
 8008d0c:	08008d87 	.word	0x08008d87
 8008d10:	08008d43 	.word	0x08008d43
 8008d14:	08008d6d 	.word	0x08008d6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d107      	bne.n	8008d34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d24:	f107 030a 	add.w	r3, r7, #10
 8008d28:	2202      	movs	r2, #2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fd53 	bl	800a7d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d32:	e032      	b.n	8008d9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 fcd1 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d40:	e02b      	b.n	8008d9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d107      	bne.n	8008d5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d4e:	f107 030d 	add.w	r3, r7, #13
 8008d52:	2201      	movs	r2, #1
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 fd3e 	bl	800a7d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d5c:	e01d      	b.n	8008d9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fcbc 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	75fb      	strb	r3, [r7, #23]
          break;
 8008d6a:	e016      	b.n	8008d9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d00f      	beq.n	8008d98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fcaf 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d84:	e008      	b.n	8008d98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fca8 	bl	800a6de <USBD_CtlError>
          ret = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	75fb      	strb	r3, [r7, #23]
          break;
 8008d92:	e002      	b.n	8008d9a <USBD_CDC_Setup+0x19e>
          break;
 8008d94:	bf00      	nop
 8008d96:	e008      	b.n	8008daa <USBD_CDC_Setup+0x1ae>
          break;
 8008d98:	bf00      	nop
      }
      break;
 8008d9a:	e006      	b.n	8008daa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fc9d 	bl	800a6de <USBD_CtlError>
      ret = USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	75fb      	strb	r3, [r7, #23]
      break;
 8008da8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32b0      	adds	r2, #176	@ 0xb0
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e065      	b.n	8008eaa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	32b0      	adds	r2, #176	@ 0xb0
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	f003 020f 	and.w	r2, r3, #15
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	3314      	adds	r3, #20
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d02f      	beq.n	8008e68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	f003 020f 	and.w	r2, r3, #15
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	3314      	adds	r3, #20
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	f003 010f 	and.w	r1, r3, #15
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	460b      	mov	r3, r1
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	440b      	add	r3, r1
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4403      	add	r3, r0
 8008e30:	331c      	adds	r3, #28
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d112      	bne.n	8008e68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f003 020f 	and.w	r2, r3, #15
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	3314      	adds	r3, #20
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e5a:	78f9      	ldrb	r1, [r7, #3]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2200      	movs	r2, #0
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f00f f9ec 	bl	801823e <USBD_LL_Transmit>
 8008e66:	e01f      	b.n	8008ea8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	33b0      	adds	r3, #176	@ 0xb0
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d010      	beq.n	8008ea8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	33b0      	adds	r3, #176	@ 0xb0
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	32b0      	adds	r2, #176	@ 0xb0
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32b0      	adds	r2, #176	@ 0xb0
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e01a      	b.n	8008f1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f00f f9ea 	bl	80182c2 <USBD_LL_GetRxDataSize>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	33b0      	adds	r3, #176	@ 0xb0
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f14:	4611      	mov	r1, r2
 8008f16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	32b0      	adds	r2, #176	@ 0xb0
 8008f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e024      	b.n	8008f8e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	33b0      	adds	r3, #176	@ 0xb0
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d019      	beq.n	8008f8c <USBD_CDC_EP0_RxReady+0x6a>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f5e:	2bff      	cmp	r3, #255	@ 0xff
 8008f60:	d014      	beq.n	8008f8c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	33b0      	adds	r3, #176	@ 0xb0
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	22ff      	movs	r2, #255	@ 0xff
 8008f88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fa0:	2182      	movs	r1, #130	@ 0x82
 8008fa2:	4818      	ldr	r0, [pc, #96]	@ (8009004 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fa4:	f000 fd62 	bl	8009a6c <USBD_GetEpDesc>
 8008fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008faa:	2101      	movs	r1, #1
 8008fac:	4815      	ldr	r0, [pc, #84]	@ (8009004 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fae:	f000 fd5d 	bl	8009a6c <USBD_GetEpDesc>
 8008fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fb4:	2181      	movs	r1, #129	@ 0x81
 8008fb6:	4813      	ldr	r0, [pc, #76]	@ (8009004 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fb8:	f000 fd58 	bl	8009a6c <USBD_GetEpDesc>
 8008fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2210      	movs	r2, #16
 8008fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fd8:	711a      	strb	r2, [r3, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fec:	711a      	strb	r2, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2243      	movs	r2, #67	@ 0x43
 8008ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000050 	.word	0x20000050

08009008 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009010:	2182      	movs	r1, #130	@ 0x82
 8009012:	4818      	ldr	r0, [pc, #96]	@ (8009074 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009014:	f000 fd2a 	bl	8009a6c <USBD_GetEpDesc>
 8009018:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800901a:	2101      	movs	r1, #1
 800901c:	4815      	ldr	r0, [pc, #84]	@ (8009074 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800901e:	f000 fd25 	bl	8009a6c <USBD_GetEpDesc>
 8009022:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009024:	2181      	movs	r1, #129	@ 0x81
 8009026:	4813      	ldr	r0, [pc, #76]	@ (8009074 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009028:	f000 fd20 	bl	8009a6c <USBD_GetEpDesc>
 800902c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2210      	movs	r2, #16
 8009038:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2200      	movs	r2, #0
 8009044:	711a      	strb	r2, [r3, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f042 0202 	orr.w	r2, r2, #2
 800904c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f042 0202 	orr.w	r2, r2, #2
 8009060:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2243      	movs	r2, #67	@ 0x43
 8009066:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009068:	4b02      	ldr	r3, [pc, #8]	@ (8009074 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000050 	.word	0x20000050

08009078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009080:	2182      	movs	r1, #130	@ 0x82
 8009082:	4818      	ldr	r0, [pc, #96]	@ (80090e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009084:	f000 fcf2 	bl	8009a6c <USBD_GetEpDesc>
 8009088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800908a:	2101      	movs	r1, #1
 800908c:	4815      	ldr	r0, [pc, #84]	@ (80090e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800908e:	f000 fced 	bl	8009a6c <USBD_GetEpDesc>
 8009092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009094:	2181      	movs	r1, #129	@ 0x81
 8009096:	4813      	ldr	r0, [pc, #76]	@ (80090e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009098:	f000 fce8 	bl	8009a6c <USBD_GetEpDesc>
 800909c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2210      	movs	r2, #16
 80090a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090b8:	711a      	strb	r2, [r3, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090cc:	711a      	strb	r2, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2243      	movs	r2, #67	@ 0x43
 80090d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090d8:	4b02      	ldr	r3, [pc, #8]	@ (80090e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000050 	.word	0x20000050

080090e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	220a      	movs	r2, #10
 80090f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090f6:	4b03      	ldr	r3, [pc, #12]	@ (8009104 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	2000000c 	.word	0x2000000c

08009108 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009118:	2303      	movs	r3, #3
 800911a:	e009      	b.n	8009130 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	33b0      	adds	r3, #176	@ 0xb0
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	32b0      	adds	r2, #176	@ 0xb0
 8009152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009156:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800915e:	2303      	movs	r3, #3
 8009160:	e008      	b.n	8009174 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	32b0      	adds	r2, #176	@ 0xb0
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e004      	b.n	80091ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	32b0      	adds	r2, #176	@ 0xb0
 80091ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	e025      	b.n	800922e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d11f      	bne.n	800922c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80091f4:	4b10      	ldr	r3, [pc, #64]	@ (8009238 <USBD_CDC_TransmitPacket+0x7c>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4403      	add	r3, r0
 800920e:	3314      	adds	r3, #20
 8009210:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009212:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <USBD_CDC_TransmitPacket+0x7c>)
 8009214:	7819      	ldrb	r1, [r3, #0]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f00f f80b 	bl	801823e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000093 	.word	0x20000093

0800923c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32b0      	adds	r2, #176	@ 0xb0
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32b0      	adds	r2, #176	@ 0xb0
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	e018      	b.n	800929c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7c1b      	ldrb	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009272:	4b0c      	ldr	r3, [pc, #48]	@ (80092a4 <USBD_CDC_ReceivePacket+0x68>)
 8009274:	7819      	ldrb	r1, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800927c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f00e fffd 	bl	8018280 <USBD_LL_PrepareReceive>
 8009286:	e008      	b.n	800929a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <USBD_CDC_ReceivePacket+0x68>)
 800928a:	7819      	ldrb	r1, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009292:	2340      	movs	r3, #64	@ 0x40
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f00e fff3 	bl	8018280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000094 	.word	0x20000094

080092a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092bc:	2303      	movs	r3, #3
 80092be:	e01f      	b.n	8009300 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	79fa      	ldrb	r2, [r7, #7]
 80092f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f00e fe6d 	bl	8017fd4 <USBD_LL_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	e025      	b.n	800936c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	32ae      	adds	r2, #174	@ 0xae
 8009332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00f      	beq.n	800935c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32ae      	adds	r2, #174	@ 0xae
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	f107 020e 	add.w	r2, r7, #14
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	4602      	mov	r2, r0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f00e fe75 	bl	801806c <USBD_LL_Start>
 8009382:	4603      	mov	r3, r0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	4611      	mov	r1, r2
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009400:	2303      	movs	r3, #3
 8009402:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f001 f922 	bl	800a66a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009434:	461a      	mov	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	2b02      	cmp	r3, #2
 8009448:	d01a      	beq.n	8009480 <USBD_LL_SetupStage+0x72>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d822      	bhi.n	8009494 <USBD_LL_SetupStage+0x86>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <USBD_LL_SetupStage+0x4a>
 8009452:	2b01      	cmp	r3, #1
 8009454:	d00a      	beq.n	800946c <USBD_LL_SetupStage+0x5e>
 8009456:	e01d      	b.n	8009494 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fb77 	bl	8009b54 <USBD_StdDevReq>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
      break;
 800946a:	e020      	b.n	80094ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fbdf 	bl	8009c38 <USBD_StdItfReq>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]
      break;
 800947e:	e016      	b.n	80094ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fc41 	bl	8009d10 <USBD_StdEPReq>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
      break;
 8009492:	e00c      	b.n	80094ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800949a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f00e fe42 	bl	801812c <USBD_LL_StallEP>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
      break;
 80094ac:	bf00      	nop
  }

  return ret;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	460b      	mov	r3, r1
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d177      	bne.n	80095c0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80094d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094de:	2b03      	cmp	r3, #3
 80094e0:	f040 80a1 	bne.w	8009626 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	8992      	ldrh	r2, [r2, #12]
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d91c      	bls.n	800952a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	8992      	ldrh	r2, [r2, #12]
 80094f8:	1a9a      	subs	r2, r3, r2
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	8992      	ldrh	r2, [r2, #12]
 8009506:	441a      	add	r2, r3
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	6919      	ldr	r1, [r3, #16]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	899b      	ldrh	r3, [r3, #12]
 8009514:	461a      	mov	r2, r3
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4293      	cmp	r3, r2
 800951c:	bf38      	it	cc
 800951e:	4613      	movcc	r3, r2
 8009520:	461a      	mov	r2, r3
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f001 f9a8 	bl	800a878 <USBD_CtlContinueRx>
 8009528:	e07d      	b.n	8009626 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009530:	f003 031f 	and.w	r3, r3, #31
 8009534:	2b02      	cmp	r3, #2
 8009536:	d014      	beq.n	8009562 <USBD_LL_DataOutStage+0xaa>
 8009538:	2b02      	cmp	r3, #2
 800953a:	d81d      	bhi.n	8009578 <USBD_LL_DataOutStage+0xc0>
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <USBD_LL_DataOutStage+0x8e>
 8009540:	2b01      	cmp	r3, #1
 8009542:	d003      	beq.n	800954c <USBD_LL_DataOutStage+0x94>
 8009544:	e018      	b.n	8009578 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	75bb      	strb	r3, [r7, #22]
            break;
 800954a:	e018      	b.n	800957e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009552:	b2db      	uxtb	r3, r3
 8009554:	4619      	mov	r1, r3
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fa6e 	bl	8009a38 <USBD_CoreFindIF>
 800955c:	4603      	mov	r3, r0
 800955e:	75bb      	strb	r3, [r7, #22]
            break;
 8009560:	e00d      	b.n	800957e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009568:	b2db      	uxtb	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fa70 	bl	8009a52 <USBD_CoreFindEP>
 8009572:	4603      	mov	r3, r0
 8009574:	75bb      	strb	r3, [r7, #22]
            break;
 8009576:	e002      	b.n	800957e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	75bb      	strb	r3, [r7, #22]
            break;
 800957c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800957e:	7dbb      	ldrb	r3, [r7, #22]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d119      	bne.n	80095b8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b03      	cmp	r3, #3
 800958e:	d113      	bne.n	80095b8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009590:	7dba      	ldrb	r2, [r7, #22]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	32ae      	adds	r2, #174	@ 0xae
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80095a0:	7dba      	ldrb	r2, [r7, #22]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80095a8:	7dba      	ldrb	r2, [r7, #22]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	32ae      	adds	r2, #174	@ 0xae
 80095ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f001 f96e 	bl	800a89a <USBD_CtlSendStatus>
 80095be:	e032      	b.n	8009626 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	4619      	mov	r1, r3
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fa41 	bl	8009a52 <USBD_CoreFindEP>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095d4:	7dbb      	ldrb	r3, [r7, #22]
 80095d6:	2bff      	cmp	r3, #255	@ 0xff
 80095d8:	d025      	beq.n	8009626 <USBD_LL_DataOutStage+0x16e>
 80095da:	7dbb      	ldrb	r3, [r7, #22]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d122      	bne.n	8009626 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d117      	bne.n	800961c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095ec:	7dba      	ldrb	r2, [r7, #22]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	32ae      	adds	r2, #174	@ 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00f      	beq.n	800961c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80095fc:	7dba      	ldrb	r2, [r7, #22]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009604:	7dba      	ldrb	r2, [r7, #22]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	32ae      	adds	r2, #174	@ 0xae
 800960a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	7afa      	ldrb	r2, [r7, #11]
 8009612:	4611      	mov	r1, r2
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	4798      	blx	r3
 8009618:	4603      	mov	r3, r0
 800961a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	e000      	b.n	8009628 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	460b      	mov	r3, r1
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800963e:	7afb      	ldrb	r3, [r7, #11]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d178      	bne.n	8009736 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3314      	adds	r3, #20
 8009648:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009650:	2b02      	cmp	r3, #2
 8009652:	d163      	bne.n	800971c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	8992      	ldrh	r2, [r2, #12]
 800965c:	4293      	cmp	r3, r2
 800965e:	d91c      	bls.n	800969a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	8992      	ldrh	r2, [r2, #12]
 8009668:	1a9a      	subs	r2, r3, r2
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	8992      	ldrh	r2, [r2, #12]
 8009676:	441a      	add	r2, r3
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6919      	ldr	r1, [r3, #16]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	461a      	mov	r2, r3
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f001 f8c4 	bl	800a814 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800968c:	2300      	movs	r3, #0
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f00e fdf4 	bl	8018280 <USBD_LL_PrepareReceive>
 8009698:	e040      	b.n	800971c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	899b      	ldrh	r3, [r3, #12]
 800969e:	461a      	mov	r2, r3
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d11c      	bne.n	80096e2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d316      	bcc.n	80096e2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096be:	429a      	cmp	r2, r3
 80096c0:	d20f      	bcs.n	80096e2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 f8a4 	bl	800a814 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	2100      	movs	r1, #0
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f00e fdd0 	bl	8018280 <USBD_LL_PrepareReceive>
 80096e0:	e01c      	b.n	800971c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d10f      	bne.n	800970e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800970e:	2180      	movs	r1, #128	@ 0x80
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f00e fd0b 	bl	801812c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 f8d2 	bl	800a8c0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d03a      	beq.n	800979c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff fe30 	bl	800938c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009734:	e032      	b.n	800979c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800973c:	b2db      	uxtb	r3, r3
 800973e:	4619      	mov	r1, r3
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f986 	bl	8009a52 <USBD_CoreFindEP>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2bff      	cmp	r3, #255	@ 0xff
 800974e:	d025      	beq.n	800979c <USBD_LL_DataInStage+0x16c>
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d122      	bne.n	800979c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d11c      	bne.n	800979c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009762:	7dfa      	ldrb	r2, [r7, #23]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	32ae      	adds	r2, #174	@ 0xae
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d014      	beq.n	800979c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8009772:	7dfa      	ldrb	r2, [r7, #23]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800977a:	7dfa      	ldrb	r2, [r7, #23]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	32ae      	adds	r2, #174	@ 0xae
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	7afa      	ldrb	r2, [r7, #11]
 8009788:	4611      	mov	r1, r2
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	4798      	blx	r3
 800978e:	4603      	mov	r3, r0
 8009790:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009792:	7dbb      	ldrb	r3, [r7, #22]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8009798:	7dbb      	ldrb	r3, [r7, #22]
 800979a:	e000      	b.n	800979e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d014      	beq.n	800980c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00e      	beq.n	800980c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6852      	ldr	r2, [r2, #4]
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	4611      	mov	r1, r2
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	4798      	blx	r3
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800980c:	2340      	movs	r3, #64	@ 0x40
 800980e:	2200      	movs	r2, #0
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f00e fc45 	bl	80180a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2240      	movs	r2, #64	@ 0x40
 8009824:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009828:	2340      	movs	r3, #64	@ 0x40
 800982a:	2200      	movs	r2, #0
 800982c:	2180      	movs	r1, #128	@ 0x80
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f00e fc37 	bl	80180a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2240      	movs	r2, #64	@ 0x40
 8009840:	841a      	strh	r2, [r3, #32]

  return ret;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	78fa      	ldrb	r2, [r7, #3]
 800985c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b04      	cmp	r3, #4
 800987e:	d006      	beq.n	800988e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009886:	b2da      	uxtb	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2204      	movs	r2, #4
 8009892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d106      	bne.n	80098c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d110      	bne.n	800990a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32ae      	adds	r2, #174	@ 0xae
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009932:	2303      	movs	r3, #3
 8009934:	e01c      	b.n	8009970 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b03      	cmp	r3, #3
 8009940:	d115      	bne.n	800996e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	32ae      	adds	r2, #174	@ 0xae
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32ae      	adds	r2, #174	@ 0xae
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	78fa      	ldrb	r2, [r7, #3]
 8009968:	4611      	mov	r1, r2
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	32ae      	adds	r2, #174	@ 0xae
 800998e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009996:	2303      	movs	r3, #3
 8009998:	e01c      	b.n	80099d4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d115      	bne.n	80099d2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	32ae      	adds	r2, #174	@ 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00b      	beq.n	80099d2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	32ae      	adds	r2, #174	@ 0xae
 80099c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ca:	78fa      	ldrb	r2, [r7, #3]
 80099cc:	4611      	mov	r1, r2
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00e      	beq.n	8009a2e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6852      	ldr	r2, [r2, #4]
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	4611      	mov	r1, r2
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a5e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	885b      	ldrh	r3, [r3, #2]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d91f      	bls.n	8009ad2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a98:	e013      	b.n	8009ac2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a9a:	f107 030a 	add.w	r3, r7, #10
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6978      	ldr	r0, [r7, #20]
 8009aa2:	f000 f81b 	bl	8009adc <USBD_GetNextDesc>
 8009aa6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	785b      	ldrb	r3, [r3, #1]
 8009aac:	2b05      	cmp	r3, #5
 8009aae:	d108      	bne.n	8009ac2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	789b      	ldrb	r3, [r3, #2]
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d008      	beq.n	8009ad0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	885b      	ldrh	r3, [r3, #2]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	897b      	ldrh	r3, [r7, #10]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d8e5      	bhi.n	8009a9a <USBD_GetEpDesc+0x2e>
 8009ace:	e000      	b.n	8009ad2 <USBD_GetEpDesc+0x66>
          break;
 8009ad0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ad2:	693b      	ldr	r3, [r7, #16]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	4413      	add	r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b06:	68fb      	ldr	r3, [r7, #12]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	b21a      	sxth	r2, r3
 8009b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	b21b      	sxth	r3, r3
 8009b42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b44:	89fb      	ldrh	r3, [r7, #14]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
	...

08009b54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b6a:	2b40      	cmp	r3, #64	@ 0x40
 8009b6c:	d005      	beq.n	8009b7a <USBD_StdDevReq+0x26>
 8009b6e:	2b40      	cmp	r3, #64	@ 0x40
 8009b70:	d857      	bhi.n	8009c22 <USBD_StdDevReq+0xce>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00f      	beq.n	8009b96 <USBD_StdDevReq+0x42>
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d153      	bne.n	8009c22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	32ae      	adds	r2, #174	@ 0xae
 8009b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
      break;
 8009b94:	e04a      	b.n	8009c2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	2b09      	cmp	r3, #9
 8009b9c:	d83b      	bhi.n	8009c16 <USBD_StdDevReq+0xc2>
 8009b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <USBD_StdDevReq+0x50>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009c0d 	.word	0x08009c0d
 8009bac:	08009c17 	.word	0x08009c17
 8009bb0:	08009c03 	.word	0x08009c03
 8009bb4:	08009c17 	.word	0x08009c17
 8009bb8:	08009bd7 	.word	0x08009bd7
 8009bbc:	08009bcd 	.word	0x08009bcd
 8009bc0:	08009c17 	.word	0x08009c17
 8009bc4:	08009bef 	.word	0x08009bef
 8009bc8:	08009be1 	.word	0x08009be1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa3e 	bl	800a050 <USBD_GetDescriptor>
          break;
 8009bd4:	e024      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fba3 	bl	800a324 <USBD_SetAddress>
          break;
 8009bde:	e01f      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fbe2 	bl	800a3ac <USBD_SetConfig>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
          break;
 8009bec:	e018      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fc85 	bl	800a500 <USBD_GetConfig>
          break;
 8009bf6:	e013      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fcb6 	bl	800a56c <USBD_GetStatus>
          break;
 8009c00:	e00e      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fce5 	bl	800a5d4 <USBD_SetFeature>
          break;
 8009c0a:	e009      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fd09 	bl	800a626 <USBD_ClrFeature>
          break;
 8009c14:	e004      	b.n	8009c20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fd60 	bl	800a6de <USBD_CtlError>
          break;
 8009c1e:	bf00      	nop
      }
      break;
 8009c20:	e004      	b.n	8009c2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fd5a 	bl	800a6de <USBD_CtlError>
      break;
 8009c2a:	bf00      	nop
  }

  return ret;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop

08009c38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c4e:	2b40      	cmp	r3, #64	@ 0x40
 8009c50:	d005      	beq.n	8009c5e <USBD_StdItfReq+0x26>
 8009c52:	2b40      	cmp	r3, #64	@ 0x40
 8009c54:	d852      	bhi.n	8009cfc <USBD_StdItfReq+0xc4>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <USBD_StdItfReq+0x26>
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	d14e      	bne.n	8009cfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	3b01      	subs	r3, #1
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d840      	bhi.n	8009cee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	889b      	ldrh	r3, [r3, #4]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d836      	bhi.n	8009ce4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	889b      	ldrh	r3, [r3, #4]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff feda 	bl	8009a38 <USBD_CoreFindIF>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2bff      	cmp	r3, #255	@ 0xff
 8009c8c:	d01d      	beq.n	8009cca <USBD_StdItfReq+0x92>
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d11a      	bne.n	8009cca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c94:	7bba      	ldrb	r2, [r7, #14]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32ae      	adds	r2, #174	@ 0xae
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00f      	beq.n	8009cc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ca4:	7bba      	ldrb	r2, [r7, #14]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009cac:	7bba      	ldrb	r2, [r7, #14]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	32ae      	adds	r2, #174	@ 0xae
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cc2:	e004      	b.n	8009cce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cc8:	e001      	b.n	8009cce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	88db      	ldrh	r3, [r3, #6]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d110      	bne.n	8009cf8 <USBD_StdItfReq+0xc0>
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10d      	bne.n	8009cf8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fddc 	bl	800a89a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ce2:	e009      	b.n	8009cf8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fcf9 	bl	800a6de <USBD_CtlError>
          break;
 8009cec:	e004      	b.n	8009cf8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fcf4 	bl	800a6de <USBD_CtlError>
          break;
 8009cf6:	e000      	b.n	8009cfa <USBD_StdItfReq+0xc2>
          break;
 8009cf8:	bf00      	nop
      }
      break;
 8009cfa:	e004      	b.n	8009d06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fced 	bl	800a6de <USBD_CtlError>
      break;
 8009d04:	bf00      	nop
  }

  return ret;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	889b      	ldrh	r3, [r3, #4]
 8009d22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d2c:	2b40      	cmp	r3, #64	@ 0x40
 8009d2e:	d007      	beq.n	8009d40 <USBD_StdEPReq+0x30>
 8009d30:	2b40      	cmp	r3, #64	@ 0x40
 8009d32:	f200 8181 	bhi.w	800a038 <USBD_StdEPReq+0x328>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d02a      	beq.n	8009d90 <USBD_StdEPReq+0x80>
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	f040 817c 	bne.w	800a038 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fe84 	bl	8009a52 <USBD_CoreFindEP>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d4e:	7b7b      	ldrb	r3, [r7, #13]
 8009d50:	2bff      	cmp	r3, #255	@ 0xff
 8009d52:	f000 8176 	beq.w	800a042 <USBD_StdEPReq+0x332>
 8009d56:	7b7b      	ldrb	r3, [r7, #13]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f040 8172 	bne.w	800a042 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009d5e:	7b7a      	ldrb	r2, [r7, #13]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d66:	7b7a      	ldrb	r2, [r7, #13]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	32ae      	adds	r2, #174	@ 0xae
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 8165 	beq.w	800a042 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d78:	7b7a      	ldrb	r2, [r7, #13]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	32ae      	adds	r2, #174	@ 0xae
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d8e:	e158      	b.n	800a042 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d008      	beq.n	8009daa <USBD_StdEPReq+0x9a>
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	f300 8147 	bgt.w	800a02c <USBD_StdEPReq+0x31c>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 809b 	beq.w	8009eda <USBD_StdEPReq+0x1ca>
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d03c      	beq.n	8009e22 <USBD_StdEPReq+0x112>
 8009da8:	e140      	b.n	800a02c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d002      	beq.n	8009dbc <USBD_StdEPReq+0xac>
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d016      	beq.n	8009de8 <USBD_StdEPReq+0xd8>
 8009dba:	e02c      	b.n	8009e16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00d      	beq.n	8009dde <USBD_StdEPReq+0xce>
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b80      	cmp	r3, #128	@ 0x80
 8009dc6:	d00a      	beq.n	8009dde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f00e f9ad 	bl	801812c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dd2:	2180      	movs	r1, #128	@ 0x80
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f00e f9a9 	bl	801812c <USBD_LL_StallEP>
 8009dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ddc:	e020      	b.n	8009e20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc7c 	bl	800a6de <USBD_CtlError>
              break;
 8009de6:	e01b      	b.n	8009e20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	885b      	ldrh	r3, [r3, #2]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10e      	bne.n	8009e0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <USBD_StdEPReq+0xfe>
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	2b80      	cmp	r3, #128	@ 0x80
 8009dfa:	d008      	beq.n	8009e0e <USBD_StdEPReq+0xfe>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	88db      	ldrh	r3, [r3, #6]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f00e f98f 	bl	801812c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fd43 	bl	800a89a <USBD_CtlSendStatus>

              break;
 8009e14:	e004      	b.n	8009e20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fc60 	bl	800a6de <USBD_CtlError>
              break;
 8009e1e:	bf00      	nop
          }
          break;
 8009e20:	e109      	b.n	800a036 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d002      	beq.n	8009e34 <USBD_StdEPReq+0x124>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d016      	beq.n	8009e60 <USBD_StdEPReq+0x150>
 8009e32:	e04b      	b.n	8009ecc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <USBD_StdEPReq+0x146>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d00a      	beq.n	8009e56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f00e f971 	bl	801812c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e4a:	2180      	movs	r1, #128	@ 0x80
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f00e f96d 	bl	801812c <USBD_LL_StallEP>
 8009e52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e54:	e040      	b.n	8009ed8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fc40 	bl	800a6de <USBD_CtlError>
              break;
 8009e5e:	e03b      	b.n	8009ed8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d136      	bne.n	8009ed6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f00e f977 	bl	801816a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fd0c 	bl	800a89a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fde3 	bl	8009a52 <USBD_CoreFindEP>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e90:	7b7b      	ldrb	r3, [r7, #13]
 8009e92:	2bff      	cmp	r3, #255	@ 0xff
 8009e94:	d01f      	beq.n	8009ed6 <USBD_StdEPReq+0x1c6>
 8009e96:	7b7b      	ldrb	r3, [r7, #13]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11c      	bne.n	8009ed6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e9c:	7b7a      	ldrb	r2, [r7, #13]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ea4:	7b7a      	ldrb	r2, [r7, #13]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32ae      	adds	r2, #174	@ 0xae
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d010      	beq.n	8009ed6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009eb4:	7b7a      	ldrb	r2, [r7, #13]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	32ae      	adds	r2, #174	@ 0xae
 8009eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009eca:	e004      	b.n	8009ed6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fc05 	bl	800a6de <USBD_CtlError>
              break;
 8009ed4:	e000      	b.n	8009ed8 <USBD_StdEPReq+0x1c8>
              break;
 8009ed6:	bf00      	nop
          }
          break;
 8009ed8:	e0ad      	b.n	800a036 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d002      	beq.n	8009eec <USBD_StdEPReq+0x1dc>
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d033      	beq.n	8009f52 <USBD_StdEPReq+0x242>
 8009eea:	e099      	b.n	800a020 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <USBD_StdEPReq+0x1f2>
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b80      	cmp	r3, #128	@ 0x80
 8009ef6:	d004      	beq.n	8009f02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fbef 	bl	800a6de <USBD_CtlError>
                break;
 8009f00:	e093      	b.n	800a02a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da0b      	bge.n	8009f22 <USBD_StdEPReq+0x212>
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	3310      	adds	r3, #16
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	3304      	adds	r3, #4
 8009f20:	e00b      	b.n	8009f3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	4413      	add	r3, r2
 8009f38:	3304      	adds	r3, #4
 8009f3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	330e      	adds	r3, #14
 8009f46:	2202      	movs	r2, #2
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fc44 	bl	800a7d8 <USBD_CtlSendData>
              break;
 8009f50:	e06b      	b.n	800a02a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da11      	bge.n	8009f7e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	f003 020f 	and.w	r2, r3, #15
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3323      	adds	r3, #35	@ 0x23
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d117      	bne.n	8009fa4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fbb1 	bl	800a6de <USBD_CtlError>
                  break;
 8009f7c:	e055      	b.n	800a02a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	f003 020f 	and.w	r2, r3, #15
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d104      	bne.n	8009fa4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fb9e 	bl	800a6de <USBD_CtlError>
                  break;
 8009fa2:	e042      	b.n	800a02a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	da0b      	bge.n	8009fc4 <USBD_StdEPReq+0x2b4>
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	3310      	adds	r3, #16
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	e00b      	b.n	8009fdc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	4413      	add	r3, r2
 8009fda:	3304      	adds	r3, #4
 8009fdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <USBD_StdEPReq+0x2da>
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b80      	cmp	r3, #128	@ 0x80
 8009fe8:	d103      	bne.n	8009ff2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2200      	movs	r2, #0
 8009fee:	739a      	strb	r2, [r3, #14]
 8009ff0:	e00e      	b.n	800a010 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f00e f8d6 	bl	80181a8 <USBD_LL_IsStallEP>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2201      	movs	r2, #1
 800a006:	739a      	strb	r2, [r3, #14]
 800a008:	e002      	b.n	800a010 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2200      	movs	r2, #0
 800a00e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	330e      	adds	r3, #14
 800a014:	2202      	movs	r2, #2
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fbdd 	bl	800a7d8 <USBD_CtlSendData>
              break;
 800a01e:	e004      	b.n	800a02a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fb5b 	bl	800a6de <USBD_CtlError>
              break;
 800a028:	bf00      	nop
          }
          break;
 800a02a:	e004      	b.n	800a036 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fb55 	bl	800a6de <USBD_CtlError>
          break;
 800a034:	bf00      	nop
      }
      break;
 800a036:	e005      	b.n	800a044 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fb4f 	bl	800a6de <USBD_CtlError>
      break;
 800a040:	e000      	b.n	800a044 <USBD_StdEPReq+0x334>
      break;
 800a042:	bf00      	nop
  }

  return ret;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	885b      	ldrh	r3, [r3, #2]
 800a06a:	0a1b      	lsrs	r3, r3, #8
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	3b01      	subs	r3, #1
 800a070:	2b06      	cmp	r3, #6
 800a072:	f200 8128 	bhi.w	800a2c6 <USBD_GetDescriptor+0x276>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <USBD_GetDescriptor+0x2c>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a099 	.word	0x0800a099
 800a080:	0800a0b1 	.word	0x0800a0b1
 800a084:	0800a0f1 	.word	0x0800a0f1
 800a088:	0800a2c7 	.word	0x0800a2c7
 800a08c:	0800a2c7 	.word	0x0800a2c7
 800a090:	0800a267 	.word	0x0800a267
 800a094:	0800a293 	.word	0x0800a293
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
      break;
 800a0ae:	e112      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10d      	bne.n	800a0d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c0:	f107 0208 	add.w	r2, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0d2:	e100      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0dc:	f107 0208 	add.w	r2, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	701a      	strb	r2, [r3, #0]
      break;
 800a0ee:	e0f2      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	885b      	ldrh	r3, [r3, #2]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	f200 80ac 	bhi.w	800a254 <USBD_GetDescriptor+0x204>
 800a0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a104 <USBD_GetDescriptor+0xb4>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a185 	.word	0x0800a185
 800a110:	0800a1b9 	.word	0x0800a1b9
 800a114:	0800a1ed 	.word	0x0800a1ed
 800a118:	0800a221 	.word	0x0800a221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e091      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 facb 	bl	800a6de <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e089      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e077      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fab1 	bl	800a6de <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e06f      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e05d      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa97 	bl	800a6de <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e055      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e043      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa7d 	bl	800a6de <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e03b      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20e:	e029      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa63 	bl	800a6de <USBD_CtlError>
            err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
          break;
 800a21e:	e021      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a242:	e00f      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa49 	bl	800a6de <USBD_CtlError>
            err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
          break;
 800a252:	e007      	b.n	800a264 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa41 	bl	800a6de <USBD_CtlError>
          err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a262:	bf00      	nop
      }
      break;
 800a264:	e037      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a276:	f107 0208 	add.w	r2, r7, #8
 800a27a:	4610      	mov	r0, r2
 800a27c:	4798      	blx	r3
 800a27e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a280:	e029      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa2a 	bl	800a6de <USBD_CtlError>
        err++;
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	3301      	adds	r3, #1
 800a28e:	72fb      	strb	r3, [r7, #11]
      break;
 800a290:	e021      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7c1b      	ldrb	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10d      	bne.n	800a2b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a2:	f107 0208 	add.w	r2, r7, #8
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	4798      	blx	r3
 800a2aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2b4:	e00f      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa10 	bl	800a6de <USBD_CtlError>
        err++;
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c4:	e007      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa08 	bl	800a6de <USBD_CtlError>
      err++;
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2d4:	bf00      	nop
  }

  if (err != 0U)
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11e      	bne.n	800a31a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d016      	beq.n	800a312 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88da      	ldrh	r2, [r3, #6]
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	bf28      	it	cs
 800a2f4:	4613      	movcs	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2fa:	893b      	ldrh	r3, [r7, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa69 	bl	800a7d8 <USBD_CtlSendData>
 800a306:	e009      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9e7 	bl	800a6de <USBD_CtlError>
 800a310:	e004      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fac1 	bl	800a89a <USBD_CtlSendStatus>
 800a318:	e000      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    return;
 800a31a:	bf00      	nop
  }
}
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop

0800a324 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	889b      	ldrh	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d131      	bne.n	800a39a <USBD_SetAddress+0x76>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	88db      	ldrh	r3, [r3, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d12d      	bne.n	800a39a <USBD_SetAddress+0x76>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	885b      	ldrh	r3, [r3, #2]
 800a342:	2b7f      	cmp	r3, #127	@ 0x7f
 800a344:	d829      	bhi.n	800a39a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d104      	bne.n	800a368 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f9bc 	bl	800a6de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	e01d      	b.n	800a3a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7bfa      	ldrb	r2, [r7, #15]
 800a36c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f00d ff43 	bl	8018200 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa8d 	bl	800a89a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2202      	movs	r2, #2
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	e009      	b.n	800a3a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a398:	e004      	b.n	800a3a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f99e 	bl	800a6de <USBD_CtlError>
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b4e      	ldr	r3, [pc, #312]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a3c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3c4:	4b4d      	ldr	r3, [pc, #308]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d905      	bls.n	800a3d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f985 	bl	800a6de <USBD_CtlError>
    return USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e08c      	b.n	800a4f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d002      	beq.n	800a3ea <USBD_SetConfig+0x3e>
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d029      	beq.n	800a43c <USBD_SetConfig+0x90>
 800a3e8:	e075      	b.n	800a4d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3ea:	4b44      	ldr	r3, [pc, #272]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d020      	beq.n	800a434 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3f2:	4b42      	ldr	r3, [pc, #264]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe ffcd 	bl	80093a2 <USBD_SetClassConfig>
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f962 	bl	800a6de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2202      	movs	r2, #2
 800a41e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a422:	e065      	b.n	800a4f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fa38 	bl	800a89a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2203      	movs	r2, #3
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a432:	e05d      	b.n	800a4f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa30 	bl	800a89a <USBD_CtlSendStatus>
      break;
 800a43a:	e059      	b.n	800a4f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a43c:	4b2f      	ldr	r3, [pc, #188]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d112      	bne.n	800a46a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a44c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a456:	4b29      	ldr	r3, [pc, #164]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fe ffbc 	bl	80093da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa19 	bl	800a89a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a468:	e042      	b.n	800a4f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a46a:	4b24      	ldr	r3, [pc, #144]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d02a      	beq.n	800a4ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7fe ffaa 	bl	80093da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a486:	4b1d      	ldr	r3, [pc, #116]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a490:	4b1a      	ldr	r3, [pc, #104]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe ff83 	bl	80093a2 <USBD_SetClassConfig>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00f      	beq.n	800a4c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f918 	bl	800a6de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7fe ff8f 	bl	80093da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4c4:	e014      	b.n	800a4f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9e7 	bl	800a89a <USBD_CtlSendStatus>
      break;
 800a4cc:	e010      	b.n	800a4f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f9e3 	bl	800a89a <USBD_CtlSendStatus>
      break;
 800a4d4:	e00c      	b.n	800a4f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f900 	bl	800a6de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4de:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <USBD_SetConfig+0x150>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7fe ff78 	bl	80093da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ee:	bf00      	nop
  }

  return ret;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200051ec 	.word	0x200051ec

0800a500 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	88db      	ldrh	r3, [r3, #6]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d004      	beq.n	800a51c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f8e2 	bl	800a6de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a51a:	e023      	b.n	800a564 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	dc02      	bgt.n	800a52e <USBD_GetConfig+0x2e>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc03      	bgt.n	800a534 <USBD_GetConfig+0x34>
 800a52c:	e015      	b.n	800a55a <USBD_GetConfig+0x5a>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d00b      	beq.n	800a54a <USBD_GetConfig+0x4a>
 800a532:	e012      	b.n	800a55a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3308      	adds	r3, #8
 800a53e:	2201      	movs	r2, #1
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f948 	bl	800a7d8 <USBD_CtlSendData>
        break;
 800a548:	e00c      	b.n	800a564 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2201      	movs	r2, #1
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f940 	bl	800a7d8 <USBD_CtlSendData>
        break;
 800a558:	e004      	b.n	800a564 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8be 	bl	800a6de <USBD_CtlError>
        break;
 800a562:	bf00      	nop
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	3b01      	subs	r3, #1
 800a580:	2b02      	cmp	r3, #2
 800a582:	d81e      	bhi.n	800a5c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	88db      	ldrh	r3, [r3, #6]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d004      	beq.n	800a596 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8a5 	bl	800a6de <USBD_CtlError>
        break;
 800a594:	e01a      	b.n	800a5cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f043 0202 	orr.w	r2, r3, #2
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f90c 	bl	800a7d8 <USBD_CtlSendData>
      break;
 800a5c0:	e004      	b.n	800a5cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f88a 	bl	800a6de <USBD_CtlError>
      break;
 800a5ca:	bf00      	nop
  }
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d107      	bne.n	800a5f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f953 	bl	800a89a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5f4:	e013      	b.n	800a61e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d10b      	bne.n	800a616 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	889b      	ldrh	r3, [r3, #4]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	b29b      	uxth	r3, r3
 800a606:	b2da      	uxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f943 	bl	800a89a <USBD_CtlSendStatus>
}
 800a614:	e003      	b.n	800a61e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f860 	bl	800a6de <USBD_CtlError>
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a636:	b2db      	uxtb	r3, r3
 800a638:	3b01      	subs	r3, #1
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d80b      	bhi.n	800a656 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	885b      	ldrh	r3, [r3, #2]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10c      	bne.n	800a660 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f923 	bl	800a89a <USBD_CtlSendStatus>
      }
      break;
 800a654:	e004      	b.n	800a660 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f840 	bl	800a6de <USBD_CtlError>
      break;
 800a65e:	e000      	b.n	800a662 <USBD_ClrFeature+0x3c>
      break;
 800a660:	bf00      	nop
  }
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3301      	adds	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7ff fa3d 	bl	8009b14 <SWAPBYTE>
 800a69a:	4603      	mov	r3, r0
 800a69c:	461a      	mov	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fa30 	bl	8009b14 <SWAPBYTE>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff fa23 	bl	8009b14 <SWAPBYTE>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	80da      	strh	r2, [r3, #6]
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6e8:	2180      	movs	r1, #128	@ 0x80
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f00d fd1e 	bl	801812c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f00d fd1a 	bl	801812c <USBD_LL_StallEP>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d042      	beq.n	800a79c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f842 	bl	800a7a4 <USBD_GetLen>
 800a720:	4603      	mov	r3, r0
 800a722:	3301      	adds	r3, #1
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a72a:	d808      	bhi.n	800a73e <USBD_GetString+0x3e>
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	f000 f839 	bl	800a7a4 <USBD_GetLen>
 800a732:	4603      	mov	r3, r0
 800a734:	3301      	adds	r3, #1
 800a736:	b29b      	uxth	r3, r3
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	e001      	b.n	800a742 <USBD_GetString+0x42>
 800a73e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	4413      	add	r3, r2
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	7812      	ldrb	r2, [r2, #0]
 800a750:	701a      	strb	r2, [r3, #0]
  idx++;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	3301      	adds	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	4413      	add	r3, r2
 800a75e:	2203      	movs	r2, #3
 800a760:	701a      	strb	r2, [r3, #0]
  idx++;
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	3301      	adds	r3, #1
 800a766:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a768:	e013      	b.n	800a792 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	3301      	adds	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]
    idx++;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	3301      	adds	r3, #1
 800a780:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	4413      	add	r3, r2
 800a788:	2200      	movs	r2, #0
 800a78a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	3301      	adds	r3, #1
 800a790:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e7      	bne.n	800a76a <USBD_GetString+0x6a>
 800a79a:	e000      	b.n	800a79e <USBD_GetString+0x9e>
    return;
 800a79c:	bf00      	nop
  }
}
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7b4:	e005      	b.n	800a7c2 <USBD_GetLen+0x1e>
  {
    len++;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f5      	bne.n	800a7b6 <USBD_GetLen+0x12>
  }

  return len;
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	2100      	movs	r1, #0
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f00d fd1a 	bl	801823e <USBD_LL_Transmit>

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	2100      	movs	r1, #0
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f00d fd09 	bl	801823e <USBD_LL_Transmit>

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2203      	movs	r2, #3
 800a846:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	2100      	movs	r1, #0
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f00d fd09 	bl	8018280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	2100      	movs	r1, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f00d fcf8 	bl	8018280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2204      	movs	r2, #4
 800a8a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f00d fcc4 	bl	801823e <USBD_LL_Transmit>

  return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2205      	movs	r2, #5
 800a8cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f00d fcd2 	bl	8018280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8f8:	2b84      	cmp	r3, #132	@ 0x84
 800a8fa:	d005      	beq.n	800a908 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	3303      	adds	r3, #3
 800a906:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91c:	f3ef 8305 	mrs	r3, IPSR
 800a920:	607b      	str	r3, [r7, #4]
  return(result);
 800a922:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a924:	2b00      	cmp	r3, #0
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
}
 800a92e:	4618      	mov	r0, r3
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a93e:	f001 fc95 	bl	800c26c <vTaskStartScheduler>
  
  return osOK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	bd80      	pop	{r7, pc}

0800a948 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a94c:	f7ff ffe3 	bl	800a916 <inHandlerMode>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a956:	f001 fdaf 	bl	800c4b8 <xTaskGetTickCountFromISR>
 800a95a:	4603      	mov	r3, r0
 800a95c:	e002      	b.n	800a964 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a95e:	f001 fd9b 	bl	800c498 <xTaskGetTickCount>
 800a962:	4603      	mov	r3, r0
  }
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}

0800a968 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	b089      	sub	sp, #36	@ 0x24
 800a96c:	af04      	add	r7, sp, #16
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d020      	beq.n	800a9bc <osThreadCreate+0x54>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d01c      	beq.n	800a9bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685c      	ldr	r4, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691e      	ldr	r6, [r3, #16]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a994:	4618      	mov	r0, r3
 800a996:	f7ff ffa6 	bl	800a8e6 <makeFreeRtosPriority>
 800a99a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9a4:	9202      	str	r2, [sp, #8]
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	9100      	str	r1, [sp, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f001 fa75 	bl	800bea0 <xTaskCreateStatic>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	e01c      	b.n	800a9f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685c      	ldr	r4, [r3, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff ff88 	bl	800a8e6 <makeFreeRtosPriority>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	9200      	str	r2, [sp, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 faba 	bl	800bf60 <xTaskCreate>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d001      	beq.n	800a9f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e000      	b.n	800a9f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <osDelay+0x16>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	e000      	b.n	800aa18 <osDelay+0x18>
 800aa16:	2301      	movs	r3, #1
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 fbf1 	bl	800c200 <vTaskDelay>
  
  return osOK;
 800aa1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	2001      	movs	r0, #1
 800aa40:	f000 fc47 	bl	800b2d2 <xQueueCreateMutexStatic>
 800aa44:	4603      	mov	r3, r0
 800aa46:	e003      	b.n	800aa50 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aa48:	2001      	movs	r0, #1
 800aa4a:	f000 fc2a 	bl	800b2a2 <xQueueCreateMutex>
 800aa4e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa62:	2300      	movs	r3, #0
 800aa64:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <osMutexWait+0x18>
    return osErrorParameter;
 800aa6c:	2380      	movs	r3, #128	@ 0x80
 800aa6e:	e03a      	b.n	800aae6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d103      	bne.n	800aa84 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e009      	b.n	800aa98 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d006      	beq.n	800aa98 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <osMutexWait+0x40>
      ticks = 1;
 800aa94:	2301      	movs	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa98:	f7ff ff3d 	bl	800a916 <inHandlerMode>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d017      	beq.n	800aad2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aaa2:	f107 0308 	add.w	r3, r7, #8
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 f84e 	bl	800bb4c <xQueueReceiveFromISR>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d001      	beq.n	800aaba <osMutexWait+0x62>
      return osErrorOS;
 800aab6:	23ff      	movs	r3, #255	@ 0xff
 800aab8:	e015      	b.n	800aae6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d011      	beq.n	800aae4 <osMutexWait+0x8c>
 800aac0:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf0 <osMutexWait+0x98>)
 800aac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	e008      	b.n	800aae4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800aad2:	68f9      	ldr	r1, [r7, #12]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 ff29 	bl	800b92c <xQueueSemaphoreTake>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d001      	beq.n	800aae4 <osMutexWait+0x8c>
    return osErrorOS;
 800aae0:	23ff      	movs	r3, #255	@ 0xff
 800aae2:	e000      	b.n	800aae6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ab04:	f7ff ff07 	bl	800a916 <inHandlerMode>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d016      	beq.n	800ab3c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fd97 	bl	800b648 <xQueueGiveFromISR>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d001      	beq.n	800ab24 <osMutexRelease+0x30>
      return osErrorOS;
 800ab20:	23ff      	movs	r3, #255	@ 0xff
 800ab22:	e017      	b.n	800ab54 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d013      	beq.n	800ab52 <osMutexRelease+0x5e>
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab5c <osMutexRelease+0x68>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	e00a      	b.n	800ab52 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2100      	movs	r1, #0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fbe0 	bl	800b308 <xQueueGenericSend>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d001      	beq.n	800ab52 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ab4e:	23ff      	movs	r3, #255	@ 0xff
 800ab50:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ab52:	68fb      	ldr	r3, [r7, #12]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00f      	beq.n	800ab92 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d10a      	bne.n	800ab8e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2203      	movs	r2, #3
 800ab7e:	9200      	str	r2, [sp, #0]
 800ab80:	2200      	movs	r2, #0
 800ab82:	2100      	movs	r1, #0
 800ab84:	2001      	movs	r0, #1
 800ab86:	f000 fa9b 	bl	800b0c0 <xQueueGenericCreateStatic>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	e016      	b.n	800abbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e014      	b.n	800abbc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d110      	bne.n	800abba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ab98:	2203      	movs	r2, #3
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	f000 fb0c 	bl	800b1ba <xQueueGenericCreate>
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <osSemaphoreCreate+0x56>
 800abaa:	2300      	movs	r3, #0
 800abac:	2200      	movs	r2, #0
 800abae:	2100      	movs	r1, #0
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f000 fba9 	bl	800b308 <xQueueGenericSend>
      return sema;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	e000      	b.n	800abbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800abba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800abd8:	2380      	movs	r3, #128	@ 0x80
 800abda:	e03a      	b.n	800ac52 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d103      	bne.n	800abf0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e009      	b.n	800ac04 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d006      	beq.n	800ac04 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <osSemaphoreWait+0x40>
      ticks = 1;
 800ac00:	2301      	movs	r3, #1
 800ac02:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ac04:	f7ff fe87 	bl	800a916 <inHandlerMode>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d017      	beq.n	800ac3e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac0e:	f107 0308 	add.w	r3, r7, #8
 800ac12:	461a      	mov	r2, r3
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 ff98 	bl	800bb4c <xQueueReceiveFromISR>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d001      	beq.n	800ac26 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ac22:	23ff      	movs	r3, #255	@ 0xff
 800ac24:	e015      	b.n	800ac52 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d011      	beq.n	800ac50 <osSemaphoreWait+0x8c>
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac5c <osSemaphoreWait+0x98>)
 800ac2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	e008      	b.n	800ac50 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fe73 	bl	800b92c <xQueueSemaphoreTake>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d001      	beq.n	800ac50 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ac4c:	23ff      	movs	r3, #255	@ 0xff
 800ac4e:	e000      	b.n	800ac52 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	e000ed04 	.word	0xe000ed04

0800ac60 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ac70:	f7ff fe51 	bl	800a916 <inHandlerMode>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d016      	beq.n	800aca8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac7a:	f107 0308 	add.w	r3, r7, #8
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fce1 	bl	800b648 <xQueueGiveFromISR>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d001      	beq.n	800ac90 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ac8c:	23ff      	movs	r3, #255	@ 0xff
 800ac8e:	e017      	b.n	800acc0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d013      	beq.n	800acbe <osSemaphoreRelease+0x5e>
 800ac96:	4b0c      	ldr	r3, [pc, #48]	@ (800acc8 <osSemaphoreRelease+0x68>)
 800ac98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	e00a      	b.n	800acbe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aca8:	2300      	movs	r3, #0
 800acaa:	2200      	movs	r2, #0
 800acac:	2100      	movs	r1, #0
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb2a 	bl	800b308 <xQueueGenericSend>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d001      	beq.n	800acbe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800acba:	23ff      	movs	r3, #255	@ 0xff
 800acbc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b085      	sub	sp, #20
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d011      	beq.n	800ad02 <osMessageCreate+0x36>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6859      	ldr	r1, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	2400      	movs	r4, #0
 800acf8:	9400      	str	r4, [sp, #0]
 800acfa:	f000 f9e1 	bl	800b0c0 <xQueueGenericCreateStatic>
 800acfe:	4603      	mov	r3, r0
 800ad00:	e008      	b.n	800ad14 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f000 fa54 	bl	800b1ba <xQueueGenericCreate>
 800ad12:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd90      	pop	{r4, r7, pc}

0800ad1c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <osMessagePut+0x1e>
    ticks = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ad3a:	f7ff fdec 	bl	800a916 <inHandlerMode>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d018      	beq.n	800ad76 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ad44:	f107 0210 	add.w	r2, r7, #16
 800ad48:	f107 0108 	add.w	r1, r7, #8
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 fbdc 	bl	800b50c <xQueueGenericSendFromISR>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d001      	beq.n	800ad5e <osMessagePut+0x42>
      return osErrorOS;
 800ad5a:	23ff      	movs	r3, #255	@ 0xff
 800ad5c:	e018      	b.n	800ad90 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d014      	beq.n	800ad8e <osMessagePut+0x72>
 800ad64:	4b0c      	ldr	r3, [pc, #48]	@ (800ad98 <osMessagePut+0x7c>)
 800ad66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	e00b      	b.n	800ad8e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ad76:	f107 0108 	add.w	r1, r7, #8
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 fac2 	bl	800b308 <xQueueGenericSend>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d001      	beq.n	800ad8e <osMessagePut+0x72>
      return osErrorOS;
 800ad8a:	23ff      	movs	r3, #255	@ 0xff
 800ad8c:	e000      	b.n	800ad90 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b08b      	sub	sp, #44	@ 0x2c
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10a      	bne.n	800adcc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800adb6:	2380      	movs	r3, #128	@ 0x80
 800adb8:	617b      	str	r3, [r7, #20]
    return event;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	461c      	mov	r4, r3
 800adbe:	f107 0314 	add.w	r3, r7, #20
 800adc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adca:	e054      	b.n	800ae76 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800adcc:	2300      	movs	r3, #0
 800adce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adda:	d103      	bne.n	800ade4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ade2:	e009      	b.n	800adf8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d006      	beq.n	800adf8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <osMessageGet+0x5c>
      ticks = 1;
 800adf4:	2301      	movs	r3, #1
 800adf6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800adf8:	f7ff fd8d 	bl	800a916 <inHandlerMode>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d01c      	beq.n	800ae3c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ae02:	f107 0220 	add.w	r2, r7, #32
 800ae06:	f107 0314 	add.w	r3, r7, #20
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	68b8      	ldr	r0, [r7, #8]
 800ae10:	f000 fe9c 	bl	800bb4c <xQueueReceiveFromISR>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d102      	bne.n	800ae20 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ae1a:	2310      	movs	r3, #16
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	e001      	b.n	800ae24 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01d      	beq.n	800ae66 <osMessageGet+0xca>
 800ae2a:	4b15      	ldr	r3, [pc, #84]	@ (800ae80 <osMessageGet+0xe4>)
 800ae2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	e014      	b.n	800ae66 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ae3c:	f107 0314 	add.w	r3, r7, #20
 800ae40:	3304      	adds	r3, #4
 800ae42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae44:	4619      	mov	r1, r3
 800ae46:	68b8      	ldr	r0, [r7, #8]
 800ae48:	f000 fc8e 	bl	800b768 <xQueueReceive>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d102      	bne.n	800ae58 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ae52:	2310      	movs	r3, #16
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	e006      	b.n	800ae66 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <osMessageGet+0xc6>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e000      	b.n	800ae64 <osMessageGet+0xc8>
 800ae62:	2340      	movs	r3, #64	@ 0x40
 800ae64:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	461c      	mov	r4, r3
 800ae6a:	f107 0314 	add.w	r3, r7, #20
 800ae6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	372c      	adds	r7, #44	@ 0x2c
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd90      	pop	{r4, r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f103 0208 	add.w	r2, r3, #8
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f103 0208 	add.w	r2, r3, #8
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f103 0208 	add.w	r2, r3, #8
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aede:	b480      	push	{r7}
 800aee0:	b085      	sub	sp, #20
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]
}
 800af1a:	bf00      	nop
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af26:	b480      	push	{r7}
 800af28:	b085      	sub	sp, #20
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3c:	d103      	bne.n	800af46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e00c      	b.n	800af60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3308      	adds	r3, #8
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e002      	b.n	800af54 <vListInsert+0x2e>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d2f6      	bcs.n	800af4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
}
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6892      	ldr	r2, [r2, #8]
 800afae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6852      	ldr	r2, [r2, #4]
 800afb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d103      	bne.n	800afcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	1e5a      	subs	r2, r3, #1
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b018:	f002 f8be 	bl	800d198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b024:	68f9      	ldr	r1, [r7, #12]
 800b026:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	441a      	add	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b048:	3b01      	subs	r3, #1
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b04e:	fb01 f303 	mul.w	r3, r1, r3
 800b052:	441a      	add	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	22ff      	movs	r2, #255	@ 0xff
 800b05c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	22ff      	movs	r2, #255	@ 0xff
 800b064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d114      	bne.n	800b098 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d01a      	beq.n	800b0ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3310      	adds	r3, #16
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 fb72 	bl	800c764 <xTaskRemoveFromEventList>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d012      	beq.n	800b0ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b086:	4b0d      	ldr	r3, [pc, #52]	@ (800b0bc <xQueueGenericReset+0xd0>)
 800b088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	e009      	b.n	800b0ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3310      	adds	r3, #16
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fef1 	bl	800ae84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3324      	adds	r3, #36	@ 0x24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff feec 	bl	800ae84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0ac:	f002 f8a6 	bl	800d1fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0b0:	2301      	movs	r3, #1
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	@ 0x38
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10b      	bne.n	800b0ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	e7fd      	b.n	800b0e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10b      	bne.n	800b10a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop
 800b108:	e7fd      	b.n	800b106 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <xQueueGenericCreateStatic+0x56>
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <xQueueGenericCreateStatic+0x5a>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <xQueueGenericCreateStatic+0x5c>
 800b11a:	2300      	movs	r3, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	623b      	str	r3, [r7, #32]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <xQueueGenericCreateStatic+0x84>
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <xQueueGenericCreateStatic+0x88>
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <xQueueGenericCreateStatic+0x8a>
 800b148:	2300      	movs	r3, #0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	61fb      	str	r3, [r7, #28]
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	e7fd      	b.n	800b162 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b166:	2348      	movs	r3, #72	@ 0x48
 800b168:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b48      	cmp	r3, #72	@ 0x48
 800b16e:	d00b      	beq.n	800b188 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	61bb      	str	r3, [r7, #24]
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	e7fd      	b.n	800b184 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b188:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00d      	beq.n	800b1b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b19c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 f840 	bl	800b230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3730      	adds	r7, #48	@ 0x30
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b08a      	sub	sp, #40	@ 0x28
 800b1be:	af02      	add	r7, sp, #8
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10b      	bne.n	800b1e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	613b      	str	r3, [r7, #16]
}
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
 800b1e4:	e7fd      	b.n	800b1e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
 800b1ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	3348      	adds	r3, #72	@ 0x48
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f002 f8f1 	bl	800d3dc <pvPortMalloc>
 800b1fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d011      	beq.n	800b226 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	3348      	adds	r3, #72	@ 0x48
 800b20a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b214:	79fa      	ldrb	r2, [r7, #7]
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4613      	mov	r3, r2
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f805 	bl	800b230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b226:	69bb      	ldr	r3, [r7, #24]
	}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d103      	bne.n	800b24c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	e002      	b.n	800b252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b25e:	2101      	movs	r1, #1
 800b260:	69b8      	ldr	r0, [r7, #24]
 800b262:	f7ff fec3 	bl	800afec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b266:	bf00      	nop
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b082      	sub	sp, #8
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b28e:	2300      	movs	r3, #0
 800b290:	2200      	movs	r2, #0
 800b292:	2100      	movs	r1, #0
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f837 	bl	800b308 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b086      	sub	sp, #24
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6939      	ldr	r1, [r7, #16]
 800b2ba:	6978      	ldr	r0, [r7, #20]
 800b2bc:	f7ff ff7d 	bl	800b1ba <xQueueGenericCreate>
 800b2c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f7ff ffd3 	bl	800b26e <prvInitialiseMutex>

		return xNewQueue;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
	}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b088      	sub	sp, #32
 800b2d6:	af02      	add	r7, sp, #8
 800b2d8:	4603      	mov	r3, r0
 800b2da:	6039      	str	r1, [r7, #0]
 800b2dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	6939      	ldr	r1, [r7, #16]
 800b2f0:	6978      	ldr	r0, [r7, #20]
 800b2f2:	f7ff fee5 	bl	800b0c0 <xQueueGenericCreateStatic>
 800b2f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff ffb8 	bl	800b26e <prvInitialiseMutex>

		return xNewQueue;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
	}
 800b300:	4618      	mov	r0, r3
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08e      	sub	sp, #56	@ 0x38
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b316:	2300      	movs	r3, #0
 800b318:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10b      	bne.n	800b33c <xQueueGenericSend+0x34>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	e7fd      	b.n	800b338 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d103      	bne.n	800b34a <xQueueGenericSend+0x42>
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <xQueueGenericSend+0x46>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e000      	b.n	800b350 <xQueueGenericSend+0x48>
 800b34e:	2300      	movs	r3, #0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10b      	bne.n	800b36c <xQueueGenericSend+0x64>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d103      	bne.n	800b37a <xQueueGenericSend+0x72>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b376:	2b01      	cmp	r3, #1
 800b378:	d101      	bne.n	800b37e <xQueueGenericSend+0x76>
 800b37a:	2301      	movs	r3, #1
 800b37c:	e000      	b.n	800b380 <xQueueGenericSend+0x78>
 800b37e:	2300      	movs	r3, #0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10b      	bne.n	800b39c <xQueueGenericSend+0x94>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	623b      	str	r3, [r7, #32]
}
 800b396:	bf00      	nop
 800b398:	bf00      	nop
 800b39a:	e7fd      	b.n	800b398 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b39c:	f001 fba8 	bl	800caf0 <xTaskGetSchedulerState>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <xQueueGenericSend+0xa4>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <xQueueGenericSend+0xa8>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e000      	b.n	800b3b2 <xQueueGenericSend+0xaa>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10b      	bne.n	800b3ce <xQueueGenericSend+0xc6>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	61fb      	str	r3, [r7, #28]
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	e7fd      	b.n	800b3ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3ce:	f001 fee3 	bl	800d198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d302      	bcc.n	800b3e4 <xQueueGenericSend+0xdc>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d129      	bne.n	800b438 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3ea:	f000 fc49 	bl	800bc80 <prvCopyDataToQueue>
 800b3ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d010      	beq.n	800b41a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	3324      	adds	r3, #36	@ 0x24
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 f9b1 	bl	800c764 <xTaskRemoveFromEventList>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d013      	beq.n	800b430 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b408:	4b3f      	ldr	r3, [pc, #252]	@ (800b508 <xQueueGenericSend+0x200>)
 800b40a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	e00a      	b.n	800b430 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d007      	beq.n	800b430 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b420:	4b39      	ldr	r3, [pc, #228]	@ (800b508 <xQueueGenericSend+0x200>)
 800b422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b430:	f001 fee4 	bl	800d1fc <vPortExitCritical>
				return pdPASS;
 800b434:	2301      	movs	r3, #1
 800b436:	e063      	b.n	800b500 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b43e:	f001 fedd 	bl	800d1fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b442:	2300      	movs	r3, #0
 800b444:	e05c      	b.n	800b500 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b44c:	f107 0314 	add.w	r3, r7, #20
 800b450:	4618      	mov	r0, r3
 800b452:	f001 f9eb 	bl	800c82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b456:	2301      	movs	r3, #1
 800b458:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b45a:	f001 fecf 	bl	800d1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b45e:	f000 ff6f 	bl	800c340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b462:	f001 fe99 	bl	800d198 <vPortEnterCritical>
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b46c:	b25b      	sxtb	r3, r3
 800b46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b472:	d103      	bne.n	800b47c <xQueueGenericSend+0x174>
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b482:	b25b      	sxtb	r3, r3
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b488:	d103      	bne.n	800b492 <xQueueGenericSend+0x18a>
 800b48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b492:	f001 feb3 	bl	800d1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b496:	1d3a      	adds	r2, r7, #4
 800b498:	f107 0314 	add.w	r3, r7, #20
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 f9da 	bl	800c858 <xTaskCheckForTimeOut>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d124      	bne.n	800b4f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ac:	f000 fce0 	bl	800be70 <prvIsQueueFull>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d018      	beq.n	800b4e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 f92a 	bl	800c718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4c6:	f000 fc6b 	bl	800bda0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4ca:	f000 ff47 	bl	800c35c <xTaskResumeAll>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f47f af7c 	bne.w	800b3ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <xQueueGenericSend+0x200>)
 800b4d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	e772      	b.n	800b3ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b4e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ea:	f000 fc59 	bl	800bda0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4ee:	f000 ff35 	bl	800c35c <xTaskResumeAll>
 800b4f2:	e76c      	b.n	800b3ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b4f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4f6:	f000 fc53 	bl	800bda0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4fa:	f000 ff2f 	bl	800c35c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b500:	4618      	mov	r0, r3
 800b502:	3738      	adds	r7, #56	@ 0x38
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	e000ed04 	.word	0xe000ed04

0800b50c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b090      	sub	sp, #64	@ 0x40
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10b      	bne.n	800b53c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <xQueueGenericSendFromISR+0x3e>
 800b542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <xQueueGenericSendFromISR+0x42>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xQueueGenericSendFromISR+0x44>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10b      	bne.n	800b56c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b566:	bf00      	nop
 800b568:	bf00      	nop
 800b56a:	e7fd      	b.n	800b568 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d103      	bne.n	800b57a <xQueueGenericSendFromISR+0x6e>
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b576:	2b01      	cmp	r3, #1
 800b578:	d101      	bne.n	800b57e <xQueueGenericSendFromISR+0x72>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <xQueueGenericSendFromISR+0x74>
 800b57e:	2300      	movs	r3, #0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	623b      	str	r3, [r7, #32]
}
 800b596:	bf00      	nop
 800b598:	bf00      	nop
 800b59a:	e7fd      	b.n	800b598 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b59c:	f001 fedc 	bl	800d358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5a0:	f3ef 8211 	mrs	r2, BASEPRI
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	61fa      	str	r2, [r7, #28]
 800b5b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d302      	bcc.n	800b5ce <xQueueGenericSendFromISR+0xc2>
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d12f      	bne.n	800b62e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5e4:	f000 fb4c 	bl	800bc80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d112      	bne.n	800b618 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d016      	beq.n	800b628 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	3324      	adds	r3, #36	@ 0x24
 800b5fe:	4618      	mov	r0, r3
 800b600:	f001 f8b0 	bl	800c764 <xTaskRemoveFromEventList>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00e      	beq.n	800b628 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00b      	beq.n	800b628 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e007      	b.n	800b628 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b618:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b61c:	3301      	adds	r3, #1
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	b25a      	sxtb	r2, r3
 800b622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b628:	2301      	movs	r3, #1
 800b62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b62c:	e001      	b.n	800b632 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b634:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b63c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b640:	4618      	mov	r0, r3
 800b642:	3740      	adds	r7, #64	@ 0x40
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08e      	sub	sp, #56	@ 0x38
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	623b      	str	r3, [r7, #32]
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00b      	beq.n	800b694 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	61fb      	str	r3, [r7, #28]
}
 800b68e:	bf00      	nop
 800b690:	bf00      	nop
 800b692:	e7fd      	b.n	800b690 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d103      	bne.n	800b6a4 <xQueueGiveFromISR+0x5c>
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <xQueueGiveFromISR+0x60>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e000      	b.n	800b6aa <xQueueGiveFromISR+0x62>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	61bb      	str	r3, [r7, #24]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6c6:	f001 fe47 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800b6ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	617a      	str	r2, [r7, #20]
 800b6e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b6e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d22b      	bcs.n	800b74e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b706:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d112      	bne.n	800b738 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	3324      	adds	r3, #36	@ 0x24
 800b71e:	4618      	mov	r0, r3
 800b720:	f001 f820 	bl	800c764 <xTaskRemoveFromEventList>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00b      	beq.n	800b748 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2201      	movs	r2, #1
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	e007      	b.n	800b748 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b73c:	3301      	adds	r3, #1
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	b25a      	sxtb	r2, r3
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b748:	2301      	movs	r3, #1
 800b74a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74c:	e001      	b.n	800b752 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	637b      	str	r3, [r7, #52]	@ 0x34
 800b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b754:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f383 8811 	msr	BASEPRI, r3
}
 800b75c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b760:	4618      	mov	r0, r3
 800b762:	3738      	adds	r7, #56	@ 0x38
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08c      	sub	sp, #48	@ 0x30
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b774:	2300      	movs	r3, #0
 800b776:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10b      	bne.n	800b79a <xQueueReceive+0x32>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	623b      	str	r3, [r7, #32]
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	e7fd      	b.n	800b796 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d103      	bne.n	800b7a8 <xQueueReceive+0x40>
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d101      	bne.n	800b7ac <xQueueReceive+0x44>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e000      	b.n	800b7ae <xQueueReceive+0x46>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10b      	bne.n	800b7ca <xQueueReceive+0x62>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	61fb      	str	r3, [r7, #28]
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	e7fd      	b.n	800b7c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ca:	f001 f991 	bl	800caf0 <xTaskGetSchedulerState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueReceive+0x72>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueReceive+0x76>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueReceive+0x78>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <xQueueReceive+0x94>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61bb      	str	r3, [r7, #24]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fc:	f001 fccc 	bl	800d198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b804:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d01f      	beq.n	800b84c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b810:	f000 faa0 	bl	800bd54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b816:	1e5a      	subs	r2, r3, #1
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00f      	beq.n	800b844 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b826:	3310      	adds	r3, #16
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 ff9b 	bl	800c764 <xTaskRemoveFromEventList>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b834:	4b3c      	ldr	r3, [pc, #240]	@ (800b928 <xQueueReceive+0x1c0>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b844:	f001 fcda 	bl	800d1fc <vPortExitCritical>
				return pdPASS;
 800b848:	2301      	movs	r3, #1
 800b84a:	e069      	b.n	800b920 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d103      	bne.n	800b85a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b852:	f001 fcd3 	bl	800d1fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b856:	2300      	movs	r3, #0
 800b858:	e062      	b.n	800b920 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b860:	f107 0310 	add.w	r3, r7, #16
 800b864:	4618      	mov	r0, r3
 800b866:	f000 ffe1 	bl	800c82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b86e:	f001 fcc5 	bl	800d1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b872:	f000 fd65 	bl	800c340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b876:	f001 fc8f 	bl	800d198 <vPortEnterCritical>
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b880:	b25b      	sxtb	r3, r3
 800b882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b886:	d103      	bne.n	800b890 <xQueueReceive+0x128>
 800b888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b896:	b25b      	sxtb	r3, r3
 800b898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89c:	d103      	bne.n	800b8a6 <xQueueReceive+0x13e>
 800b89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8a6:	f001 fca9 	bl	800d1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8aa:	1d3a      	adds	r2, r7, #4
 800b8ac:	f107 0310 	add.w	r3, r7, #16
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 ffd0 	bl	800c858 <xTaskCheckForTimeOut>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d123      	bne.n	800b906 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8c0:	f000 fac0 	bl	800be44 <prvIsQueueEmpty>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d017      	beq.n	800b8fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8cc:	3324      	adds	r3, #36	@ 0x24
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 ff20 	bl	800c718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8da:	f000 fa61 	bl	800bda0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8de:	f000 fd3d 	bl	800c35c <xTaskResumeAll>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d189      	bne.n	800b7fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b928 <xQueueReceive+0x1c0>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	e780      	b.n	800b7fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8fc:	f000 fa50 	bl	800bda0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b900:	f000 fd2c 	bl	800c35c <xTaskResumeAll>
 800b904:	e77a      	b.n	800b7fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b908:	f000 fa4a 	bl	800bda0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b90c:	f000 fd26 	bl	800c35c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b912:	f000 fa97 	bl	800be44 <prvIsQueueEmpty>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f43f af6f 	beq.w	800b7fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b91e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b920:	4618      	mov	r0, r3
 800b922:	3730      	adds	r7, #48	@ 0x30
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	@ 0x38
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b936:	2300      	movs	r3, #0
 800b938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b93e:	2300      	movs	r3, #0
 800b940:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10b      	bne.n	800b960 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	623b      	str	r3, [r7, #32]
}
 800b95a:	bf00      	nop
 800b95c:	bf00      	nop
 800b95e:	e7fd      	b.n	800b95c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	61fb      	str	r3, [r7, #28]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b980:	f001 f8b6 	bl	800caf0 <xTaskGetSchedulerState>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <xQueueSemaphoreTake+0x64>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <xQueueSemaphoreTake+0x68>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <xQueueSemaphoreTake+0x6a>
 800b994:	2300      	movs	r3, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	61bb      	str	r3, [r7, #24]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9b2:	f001 fbf1 	bl	800d198 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d024      	beq.n	800ba0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b9d2:	f001 fa39 	bl	800ce48 <pvTaskIncrementMutexHeldCount>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00f      	beq.n	800ba04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e6:	3310      	adds	r3, #16
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 febb 	bl	800c764 <xTaskRemoveFromEventList>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9f4:	4b54      	ldr	r3, [pc, #336]	@ (800bb48 <xQueueSemaphoreTake+0x21c>)
 800b9f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba04:	f001 fbfa 	bl	800d1fc <vPortExitCritical>
				return pdPASS;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e098      	b.n	800bb3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d112      	bne.n	800ba38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	617b      	str	r3, [r7, #20]
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	e7fd      	b.n	800ba2c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba30:	f001 fbe4 	bl	800d1fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba34:	2300      	movs	r3, #0
 800ba36:	e082      	b.n	800bb3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 fef2 	bl	800c82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba4c:	f001 fbd6 	bl	800d1fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba50:	f000 fc76 	bl	800c340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba54:	f001 fba0 	bl	800d198 <vPortEnterCritical>
 800ba58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba5e:	b25b      	sxtb	r3, r3
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba64:	d103      	bne.n	800ba6e <xQueueSemaphoreTake+0x142>
 800ba66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba74:	b25b      	sxtb	r3, r3
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d103      	bne.n	800ba84 <xQueueSemaphoreTake+0x158>
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba84:	f001 fbba 	bl	800d1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba88:	463a      	mov	r2, r7
 800ba8a:	f107 030c 	add.w	r3, r7, #12
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 fee1 	bl	800c858 <xTaskCheckForTimeOut>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d132      	bne.n	800bb02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba9e:	f000 f9d1 	bl	800be44 <prvIsQueueEmpty>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d026      	beq.n	800baf6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bab0:	f001 fb72 	bl	800d198 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	4618      	mov	r0, r3
 800baba:	f001 f837 	bl	800cb2c <xTaskPriorityInherit>
 800babe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bac0:	f001 fb9c 	bl	800d1fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	3324      	adds	r3, #36	@ 0x24
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	4611      	mov	r1, r2
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 fe23 	bl	800c718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bad4:	f000 f964 	bl	800bda0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bad8:	f000 fc40 	bl	800c35c <xTaskResumeAll>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f47f af67 	bne.w	800b9b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bae4:	4b18      	ldr	r3, [pc, #96]	@ (800bb48 <xQueueSemaphoreTake+0x21c>)
 800bae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	e75d      	b.n	800b9b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800baf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800baf8:	f000 f952 	bl	800bda0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bafc:	f000 fc2e 	bl	800c35c <xTaskResumeAll>
 800bb00:	e757      	b.n	800b9b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb04:	f000 f94c 	bl	800bda0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb08:	f000 fc28 	bl	800c35c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb0e:	f000 f999 	bl	800be44 <prvIsQueueEmpty>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f43f af4c 	beq.w	800b9b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bb20:	f001 fb3a 	bl	800d198 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb26:	f000 f893 	bl	800bc50 <prvGetDisinheritPriorityAfterTimeout>
 800bb2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 f8f8 	bl	800cd28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb38:	f001 fb60 	bl	800d1fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3738      	adds	r7, #56	@ 0x38
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08e      	sub	sp, #56	@ 0x38
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10b      	bne.n	800bb7a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	623b      	str	r3, [r7, #32]
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	e7fd      	b.n	800bb76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d103      	bne.n	800bb88 <xQueueReceiveFromISR+0x3c>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <xQueueReceiveFromISR+0x40>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <xQueueReceiveFromISR+0x42>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	61fb      	str	r3, [r7, #28]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbaa:	f001 fbd5 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800bbae:	f3ef 8211 	mrs	r2, BASEPRI
 800bbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	61ba      	str	r2, [r7, #24]
 800bbc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bbc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d02f      	beq.n	800bc36 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbe4:	f000 f8b6 	bl	800bd54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbea:	1e5a      	subs	r2, r3, #1
 800bbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bbf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf8:	d112      	bne.n	800bc20 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d016      	beq.n	800bc30 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc04:	3310      	adds	r3, #16
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fdac 	bl	800c764 <xTaskRemoveFromEventList>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00e      	beq.n	800bc30 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e007      	b.n	800bc30 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bc20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc24:	3301      	adds	r3, #1
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	b25a      	sxtb	r2, r3
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bc30:	2301      	movs	r3, #1
 800bc32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc34:	e001      	b.n	800bc3a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f383 8811 	msr	BASEPRI, r3
}
 800bc44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3738      	adds	r7, #56	@ 0x38
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d006      	beq.n	800bc6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f1c3 0307 	rsb	r3, r3, #7
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e001      	b.n	800bc72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bc72:	68fb      	ldr	r3, [r7, #12]
	}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10d      	bne.n	800bcba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d14d      	bne.n	800bd42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 ffb4 	bl	800cc18 <xTaskPriorityDisinherit>
 800bcb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	609a      	str	r2, [r3, #8]
 800bcb8:	e043      	b.n	800bd42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d119      	bne.n	800bcf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6858      	ldr	r0, [r3, #4]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc8:	461a      	mov	r2, r3
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	f00c fdd9 	bl	8018882 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcd8:	441a      	add	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d32b      	bcc.n	800bd42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	605a      	str	r2, [r3, #4]
 800bcf2:	e026      	b.n	800bd42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68d8      	ldr	r0, [r3, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	f00c fdbf 	bl	8018882 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	441a      	add	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d207      	bcs.n	800bd30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd28:	425b      	negs	r3, r3
 800bd2a:	441a      	add	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d105      	bne.n	800bd42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bd4a:	697b      	ldr	r3, [r7, #20]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d018      	beq.n	800bd98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68da      	ldr	r2, [r3, #12]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd6e:	441a      	add	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d303      	bcc.n	800bd88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68d9      	ldr	r1, [r3, #12]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd90:	461a      	mov	r2, r3
 800bd92:	6838      	ldr	r0, [r7, #0]
 800bd94:	f00c fd75 	bl	8018882 <memcpy>
	}
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bda8:	f001 f9f6 	bl	800d198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdb4:	e011      	b.n	800bdda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d012      	beq.n	800bde4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3324      	adds	r3, #36	@ 0x24
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fcce 	bl	800c764 <xTaskRemoveFromEventList>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdce:	f000 fda7 	bl	800c920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dce9      	bgt.n	800bdb6 <prvUnlockQueue+0x16>
 800bde2:	e000      	b.n	800bde6 <prvUnlockQueue+0x46>
					break;
 800bde4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	22ff      	movs	r2, #255	@ 0xff
 800bdea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bdee:	f001 fa05 	bl	800d1fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bdf2:	f001 f9d1 	bl	800d198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bdfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdfe:	e011      	b.n	800be24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d012      	beq.n	800be2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3310      	adds	r3, #16
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fca9 	bl	800c764 <xTaskRemoveFromEventList>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be18:	f000 fd82 	bl	800c920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	3b01      	subs	r3, #1
 800be20:	b2db      	uxtb	r3, r3
 800be22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dce9      	bgt.n	800be00 <prvUnlockQueue+0x60>
 800be2c:	e000      	b.n	800be30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	22ff      	movs	r2, #255	@ 0xff
 800be34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be38:	f001 f9e0 	bl	800d1fc <vPortExitCritical>
}
 800be3c:	bf00      	nop
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be4c:	f001 f9a4 	bl	800d198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be58:	2301      	movs	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e001      	b.n	800be62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be62:	f001 f9cb 	bl	800d1fc <vPortExitCritical>

	return xReturn;
 800be66:	68fb      	ldr	r3, [r7, #12]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be78:	f001 f98e 	bl	800d198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be84:	429a      	cmp	r2, r3
 800be86:	d102      	bne.n	800be8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e001      	b.n	800be92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be92:	f001 f9b3 	bl	800d1fc <vPortExitCritical>

	return xReturn;
 800be96:	68fb      	ldr	r3, [r7, #12]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b08e      	sub	sp, #56	@ 0x38
 800bea4:	af04      	add	r7, sp, #16
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800beae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10b      	bne.n	800becc <xTaskCreateStatic+0x2c>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	623b      	str	r3, [r7, #32]
}
 800bec6:	bf00      	nop
 800bec8:	bf00      	nop
 800beca:	e7fd      	b.n	800bec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800becc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10b      	bne.n	800beea <xTaskCreateStatic+0x4a>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	61fb      	str	r3, [r7, #28]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800beea:	23a0      	movs	r3, #160	@ 0xa0
 800beec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2ba0      	cmp	r3, #160	@ 0xa0
 800bef2:	d00b      	beq.n	800bf0c <xTaskCreateStatic+0x6c>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	61bb      	str	r3, [r7, #24]
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	e7fd      	b.n	800bf08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01e      	beq.n	800bf52 <xTaskCreateStatic+0xb2>
 800bf14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01b      	beq.n	800bf52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9303      	str	r3, [sp, #12]
 800bf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf32:	9302      	str	r3, [sp, #8]
 800bf34:	f107 0314 	add.w	r3, r7, #20
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 f851 	bl	800bfec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf4c:	f000 f8ee 	bl	800c12c <prvAddNewTaskToReadyList>
 800bf50:	e001      	b.n	800bf56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf56:	697b      	ldr	r3, [r7, #20]
	}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3728      	adds	r7, #40	@ 0x28
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08c      	sub	sp, #48	@ 0x30
 800bf64:	af04      	add	r7, sp, #16
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 fa31 	bl	800d3dc <pvPortMalloc>
 800bf7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf82:	20a0      	movs	r0, #160	@ 0xa0
 800bf84:	f001 fa2a 	bl	800d3dc <pvPortMalloc>
 800bf88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf96:	e005      	b.n	800bfa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf98:	6978      	ldr	r0, [r7, #20]
 800bf9a:	f001 faed 	bl	800d578 <vPortFree>
 800bf9e:	e001      	b.n	800bfa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d017      	beq.n	800bfda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9303      	str	r3, [sp, #12]
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	9302      	str	r3, [sp, #8]
 800bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f80f 	bl	800bfec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfce:	69f8      	ldr	r0, [r7, #28]
 800bfd0:	f000 f8ac 	bl	800c12c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	61bb      	str	r3, [r7, #24]
 800bfd8:	e002      	b.n	800bfe0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
	}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c004:	3b01      	subs	r3, #1
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	f023 0307 	bic.w	r3, r3, #7
 800c012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	617b      	str	r3, [r7, #20]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01f      	beq.n	800c07c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c03c:	2300      	movs	r3, #0
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	e012      	b.n	800c068 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	4413      	add	r3, r2
 800c048:	7819      	ldrb	r1, [r3, #0]
 800c04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	4413      	add	r3, r2
 800c050:	3334      	adds	r3, #52	@ 0x34
 800c052:	460a      	mov	r2, r1
 800c054:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	4413      	add	r3, r2
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	3301      	adds	r3, #1
 800c066:	61fb      	str	r3, [r7, #28]
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2b0f      	cmp	r3, #15
 800c06c:	d9e9      	bls.n	800c042 <prvInitialiseNewTask+0x56>
 800c06e:	e000      	b.n	800c072 <prvInitialiseNewTask+0x86>
			{
				break;
 800c070:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	2200      	movs	r2, #0
 800c076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c07a:	e003      	b.n	800c084 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	2b06      	cmp	r3, #6
 800c088:	d901      	bls.n	800c08e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c08a:	2306      	movs	r3, #6
 800c08c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c092:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c098:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09c:	2200      	movs	r2, #0
 800c09e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe ff0d 	bl	800aec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ac:	3318      	adds	r3, #24
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe ff08 	bl	800aec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0bc:	f1c3 0207 	rsb	r2, r3, #7
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0dc:	334c      	adds	r3, #76	@ 0x4c
 800c0de:	224c      	movs	r2, #76	@ 0x4c
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f00c faf9 	bl	80186da <memset>
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ea:	4a0d      	ldr	r2, [pc, #52]	@ (800c120 <prvInitialiseNewTask+0x134>)
 800c0ec:	651a      	str	r2, [r3, #80]	@ 0x50
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	4a0c      	ldr	r2, [pc, #48]	@ (800c124 <prvInitialiseNewTask+0x138>)
 800c0f2:	655a      	str	r2, [r3, #84]	@ 0x54
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c128 <prvInitialiseNewTask+0x13c>)
 800c0f8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	68f9      	ldr	r1, [r7, #12]
 800c0fe:	69b8      	ldr	r0, [r7, #24]
 800c100:	f000 ff1c 	bl	800cf3c <pxPortInitialiseStack>
 800c104:	4602      	mov	r2, r0
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c116:	bf00      	nop
 800c118:	3720      	adds	r7, #32
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	2000e3f8 	.word	0x2000e3f8
 800c124:	2000e460 	.word	0x2000e460
 800c128:	2000e4c8 	.word	0x2000e4c8

0800c12c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c134:	f001 f830 	bl	800d198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c138:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e4 <prvAddNewTaskToReadyList+0xb8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	4a29      	ldr	r2, [pc, #164]	@ (800c1e4 <prvAddNewTaskToReadyList+0xb8>)
 800c140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c142:	4b29      	ldr	r3, [pc, #164]	@ (800c1e8 <prvAddNewTaskToReadyList+0xbc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c14a:	4a27      	ldr	r2, [pc, #156]	@ (800c1e8 <prvAddNewTaskToReadyList+0xbc>)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c150:	4b24      	ldr	r3, [pc, #144]	@ (800c1e4 <prvAddNewTaskToReadyList+0xb8>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d110      	bne.n	800c17a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c158:	f000 fc06 	bl	800c968 <prvInitialiseTaskLists>
 800c15c:	e00d      	b.n	800c17a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c15e:	4b23      	ldr	r3, [pc, #140]	@ (800c1ec <prvAddNewTaskToReadyList+0xc0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d109      	bne.n	800c17a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c166:	4b20      	ldr	r3, [pc, #128]	@ (800c1e8 <prvAddNewTaskToReadyList+0xbc>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c170:	429a      	cmp	r2, r3
 800c172:	d802      	bhi.n	800c17a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c174:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e8 <prvAddNewTaskToReadyList+0xbc>)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c17a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f0 <prvAddNewTaskToReadyList+0xc4>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	4a1b      	ldr	r2, [pc, #108]	@ (800c1f0 <prvAddNewTaskToReadyList+0xc4>)
 800c182:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c188:	2201      	movs	r2, #1
 800c18a:	409a      	lsls	r2, r3
 800c18c:	4b19      	ldr	r3, [pc, #100]	@ (800c1f4 <prvAddNewTaskToReadyList+0xc8>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4313      	orrs	r3, r2
 800c192:	4a18      	ldr	r2, [pc, #96]	@ (800c1f4 <prvAddNewTaskToReadyList+0xc8>)
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4a15      	ldr	r2, [pc, #84]	@ (800c1f8 <prvAddNewTaskToReadyList+0xcc>)
 800c1a4:	441a      	add	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7fe fe96 	bl	800aede <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1b2:	f001 f823 	bl	800d1fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <prvAddNewTaskToReadyList+0xc0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00e      	beq.n	800c1dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1be:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e8 <prvAddNewTaskToReadyList+0xbc>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d207      	bcs.n	800c1dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c1fc <prvAddNewTaskToReadyList+0xd0>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	200052f0 	.word	0x200052f0
 800c1e8:	200051f0 	.word	0x200051f0
 800c1ec:	200052fc 	.word	0x200052fc
 800c1f0:	2000530c 	.word	0x2000530c
 800c1f4:	200052f8 	.word	0x200052f8
 800c1f8:	200051f4 	.word	0x200051f4
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c212:	4b14      	ldr	r3, [pc, #80]	@ (800c264 <vTaskDelay+0x64>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00b      	beq.n	800c232 <vTaskDelay+0x32>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60bb      	str	r3, [r7, #8]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c232:	f000 f885 	bl	800c340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fe19 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c23e:	f000 f88d 	bl	800c35c <xTaskResumeAll>
 800c242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d107      	bne.n	800c25a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c24a:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <vTaskDelay+0x68>)
 800c24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20005318 	.word	0x20005318
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08a      	sub	sp, #40	@ 0x28
 800c270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c27a:	463a      	mov	r2, r7
 800c27c:	1d39      	adds	r1, r7, #4
 800c27e:	f107 0308 	add.w	r3, r7, #8
 800c282:	4618      	mov	r0, r3
 800c284:	f7f4 f992 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	9202      	str	r2, [sp, #8]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2300      	movs	r3, #0
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	2300      	movs	r3, #0
 800c298:	460a      	mov	r2, r1
 800c29a:	4921      	ldr	r1, [pc, #132]	@ (800c320 <vTaskStartScheduler+0xb4>)
 800c29c:	4821      	ldr	r0, [pc, #132]	@ (800c324 <vTaskStartScheduler+0xb8>)
 800c29e:	f7ff fdff 	bl	800bea0 <xTaskCreateStatic>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4a20      	ldr	r2, [pc, #128]	@ (800c328 <vTaskStartScheduler+0xbc>)
 800c2a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2a8:	4b1f      	ldr	r3, [pc, #124]	@ (800c328 <vTaskStartScheduler+0xbc>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	e001      	b.n	800c2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d11b      	bne.n	800c2f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	613b      	str	r3, [r7, #16]
}
 800c2d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2d4:	4b15      	ldr	r3, [pc, #84]	@ (800c32c <vTaskStartScheduler+0xc0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	334c      	adds	r3, #76	@ 0x4c
 800c2da:	4a15      	ldr	r2, [pc, #84]	@ (800c330 <vTaskStartScheduler+0xc4>)
 800c2dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2de:	4b15      	ldr	r3, [pc, #84]	@ (800c334 <vTaskStartScheduler+0xc8>)
 800c2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2e6:	4b14      	ldr	r3, [pc, #80]	@ (800c338 <vTaskStartScheduler+0xcc>)
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2ec:	4b13      	ldr	r3, [pc, #76]	@ (800c33c <vTaskStartScheduler+0xd0>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2f2:	f000 fead 	bl	800d050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2f6:	e00f      	b.n	800c318 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fe:	d10b      	bne.n	800c318 <vTaskStartScheduler+0xac>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	60fb      	str	r3, [r7, #12]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <vTaskStartScheduler+0xa8>
}
 800c318:	bf00      	nop
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	0801a698 	.word	0x0801a698
 800c324:	0800c939 	.word	0x0800c939
 800c328:	20005314 	.word	0x20005314
 800c32c:	200051f0 	.word	0x200051f0
 800c330:	20000118 	.word	0x20000118
 800c334:	20005310 	.word	0x20005310
 800c338:	200052fc 	.word	0x200052fc
 800c33c:	200052f4 	.word	0x200052f4

0800c340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c344:	4b04      	ldr	r3, [pc, #16]	@ (800c358 <vTaskSuspendAll+0x18>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3301      	adds	r3, #1
 800c34a:	4a03      	ldr	r2, [pc, #12]	@ (800c358 <vTaskSuspendAll+0x18>)
 800c34c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c34e:	bf00      	nop
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	20005318 	.word	0x20005318

0800c35c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c36a:	4b42      	ldr	r3, [pc, #264]	@ (800c474 <xTaskResumeAll+0x118>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <xTaskResumeAll+0x2e>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	603b      	str	r3, [r7, #0]
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	e7fd      	b.n	800c386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c38a:	f000 ff05 	bl	800d198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c38e:	4b39      	ldr	r3, [pc, #228]	@ (800c474 <xTaskResumeAll+0x118>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3b01      	subs	r3, #1
 800c394:	4a37      	ldr	r2, [pc, #220]	@ (800c474 <xTaskResumeAll+0x118>)
 800c396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c398:	4b36      	ldr	r3, [pc, #216]	@ (800c474 <xTaskResumeAll+0x118>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d161      	bne.n	800c464 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3a0:	4b35      	ldr	r3, [pc, #212]	@ (800c478 <xTaskResumeAll+0x11c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d05d      	beq.n	800c464 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a8:	e02e      	b.n	800c408 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3aa:	4b34      	ldr	r3, [pc, #208]	@ (800c47c <xTaskResumeAll+0x120>)
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3318      	adds	r3, #24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe fdee 	bl	800af98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe fde9 	bl	800af98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	409a      	lsls	r2, r3
 800c3ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c480 <xTaskResumeAll+0x124>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	4a2a      	ldr	r2, [pc, #168]	@ (800c480 <xTaskResumeAll+0x124>)
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3dc:	4613      	mov	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4a27      	ldr	r2, [pc, #156]	@ (800c484 <xTaskResumeAll+0x128>)
 800c3e6:	441a      	add	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	f7fe fd75 	bl	800aede <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f8:	4b23      	ldr	r3, [pc, #140]	@ (800c488 <xTaskResumeAll+0x12c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d302      	bcc.n	800c408 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c402:	4b22      	ldr	r3, [pc, #136]	@ (800c48c <xTaskResumeAll+0x130>)
 800c404:	2201      	movs	r2, #1
 800c406:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c408:	4b1c      	ldr	r3, [pc, #112]	@ (800c47c <xTaskResumeAll+0x120>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1cc      	bne.n	800c3aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c416:	f000 fb4b 	bl	800cab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c41a:	4b1d      	ldr	r3, [pc, #116]	@ (800c490 <xTaskResumeAll+0x134>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d010      	beq.n	800c448 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c426:	f000 f859 	bl	800c4dc <xTaskIncrementTick>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c430:	4b16      	ldr	r3, [pc, #88]	@ (800c48c <xTaskResumeAll+0x130>)
 800c432:	2201      	movs	r2, #1
 800c434:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3b01      	subs	r3, #1
 800c43a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1f1      	bne.n	800c426 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c442:	4b13      	ldr	r3, [pc, #76]	@ (800c490 <xTaskResumeAll+0x134>)
 800c444:	2200      	movs	r2, #0
 800c446:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c448:	4b10      	ldr	r3, [pc, #64]	@ (800c48c <xTaskResumeAll+0x130>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d009      	beq.n	800c464 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c450:	2301      	movs	r3, #1
 800c452:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c454:	4b0f      	ldr	r3, [pc, #60]	@ (800c494 <xTaskResumeAll+0x138>)
 800c456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c464:	f000 feca 	bl	800d1fc <vPortExitCritical>

	return xAlreadyYielded;
 800c468:	68bb      	ldr	r3, [r7, #8]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20005318 	.word	0x20005318
 800c478:	200052f0 	.word	0x200052f0
 800c47c:	200052b0 	.word	0x200052b0
 800c480:	200052f8 	.word	0x200052f8
 800c484:	200051f4 	.word	0x200051f4
 800c488:	200051f0 	.word	0x200051f0
 800c48c:	20005304 	.word	0x20005304
 800c490:	20005300 	.word	0x20005300
 800c494:	e000ed04 	.word	0xe000ed04

0800c498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c49e:	4b05      	ldr	r3, [pc, #20]	@ (800c4b4 <xTaskGetTickCount+0x1c>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4a4:	687b      	ldr	r3, [r7, #4]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	200052f4 	.word	0x200052f4

0800c4b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4be:	f000 ff4b 	bl	800d358 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c4c6:	4b04      	ldr	r3, [pc, #16]	@ (800c4d8 <xTaskGetTickCountFromISR+0x20>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4cc:	683b      	ldr	r3, [r7, #0]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200052f4 	.word	0x200052f4

0800c4dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4e6:	4b4f      	ldr	r3, [pc, #316]	@ (800c624 <xTaskIncrementTick+0x148>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f040 808f 	bne.w	800c60e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4f0:	4b4d      	ldr	r3, [pc, #308]	@ (800c628 <xTaskIncrementTick+0x14c>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4f8:	4a4b      	ldr	r2, [pc, #300]	@ (800c628 <xTaskIncrementTick+0x14c>)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d121      	bne.n	800c548 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c504:	4b49      	ldr	r3, [pc, #292]	@ (800c62c <xTaskIncrementTick+0x150>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	603b      	str	r3, [r7, #0]
}
 800c520:	bf00      	nop
 800c522:	bf00      	nop
 800c524:	e7fd      	b.n	800c522 <xTaskIncrementTick+0x46>
 800c526:	4b41      	ldr	r3, [pc, #260]	@ (800c62c <xTaskIncrementTick+0x150>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	4b40      	ldr	r3, [pc, #256]	@ (800c630 <xTaskIncrementTick+0x154>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a3e      	ldr	r2, [pc, #248]	@ (800c62c <xTaskIncrementTick+0x150>)
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	4a3e      	ldr	r2, [pc, #248]	@ (800c630 <xTaskIncrementTick+0x154>)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	4b3e      	ldr	r3, [pc, #248]	@ (800c634 <xTaskIncrementTick+0x158>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3301      	adds	r3, #1
 800c540:	4a3c      	ldr	r2, [pc, #240]	@ (800c634 <xTaskIncrementTick+0x158>)
 800c542:	6013      	str	r3, [r2, #0]
 800c544:	f000 fab4 	bl	800cab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c548:	4b3b      	ldr	r3, [pc, #236]	@ (800c638 <xTaskIncrementTick+0x15c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d348      	bcc.n	800c5e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c552:	4b36      	ldr	r3, [pc, #216]	@ (800c62c <xTaskIncrementTick+0x150>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d104      	bne.n	800c566 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c55c:	4b36      	ldr	r3, [pc, #216]	@ (800c638 <xTaskIncrementTick+0x15c>)
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	601a      	str	r2, [r3, #0]
					break;
 800c564:	e03e      	b.n	800c5e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c566:	4b31      	ldr	r3, [pc, #196]	@ (800c62c <xTaskIncrementTick+0x150>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d203      	bcs.n	800c586 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c57e:	4a2e      	ldr	r2, [pc, #184]	@ (800c638 <xTaskIncrementTick+0x15c>)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c584:	e02e      	b.n	800c5e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	3304      	adds	r3, #4
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe fd04 	bl	800af98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	3318      	adds	r3, #24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fcfb 	bl	800af98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	409a      	lsls	r2, r3
 800c5aa:	4b24      	ldr	r3, [pc, #144]	@ (800c63c <xTaskIncrementTick+0x160>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	4a22      	ldr	r2, [pc, #136]	@ (800c63c <xTaskIncrementTick+0x160>)
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4a1f      	ldr	r2, [pc, #124]	@ (800c640 <xTaskIncrementTick+0x164>)
 800c5c2:	441a      	add	r2, r3
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7fe fc87 	bl	800aede <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d4:	4b1b      	ldr	r3, [pc, #108]	@ (800c644 <xTaskIncrementTick+0x168>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d3b9      	bcc.n	800c552 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5e2:	e7b6      	b.n	800c552 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5e4:	4b17      	ldr	r3, [pc, #92]	@ (800c644 <xTaskIncrementTick+0x168>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ea:	4915      	ldr	r1, [pc, #84]	@ (800c640 <xTaskIncrementTick+0x164>)
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	440b      	add	r3, r1
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d901      	bls.n	800c600 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c600:	4b11      	ldr	r3, [pc, #68]	@ (800c648 <xTaskIncrementTick+0x16c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e004      	b.n	800c618 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c60e:	4b0f      	ldr	r3, [pc, #60]	@ (800c64c <xTaskIncrementTick+0x170>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a0d      	ldr	r2, [pc, #52]	@ (800c64c <xTaskIncrementTick+0x170>)
 800c616:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c618:	697b      	ldr	r3, [r7, #20]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20005318 	.word	0x20005318
 800c628:	200052f4 	.word	0x200052f4
 800c62c:	200052a8 	.word	0x200052a8
 800c630:	200052ac 	.word	0x200052ac
 800c634:	20005308 	.word	0x20005308
 800c638:	20005310 	.word	0x20005310
 800c63c:	200052f8 	.word	0x200052f8
 800c640:	200051f4 	.word	0x200051f4
 800c644:	200051f0 	.word	0x200051f0
 800c648:	20005304 	.word	0x20005304
 800c64c:	20005300 	.word	0x20005300

0800c650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c656:	4b2a      	ldr	r3, [pc, #168]	@ (800c700 <vTaskSwitchContext+0xb0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c65e:	4b29      	ldr	r3, [pc, #164]	@ (800c704 <vTaskSwitchContext+0xb4>)
 800c660:	2201      	movs	r2, #1
 800c662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c664:	e045      	b.n	800c6f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800c666:	4b27      	ldr	r3, [pc, #156]	@ (800c704 <vTaskSwitchContext+0xb4>)
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c66c:	4b26      	ldr	r3, [pc, #152]	@ (800c708 <vTaskSwitchContext+0xb8>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	fab3 f383 	clz	r3, r3
 800c678:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	f1c3 031f 	rsb	r3, r3, #31
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	4922      	ldr	r1, [pc, #136]	@ (800c70c <vTaskSwitchContext+0xbc>)
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10b      	bne.n	800c6ae <vTaskSwitchContext+0x5e>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	607b      	str	r3, [r7, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <vTaskSwitchContext+0x5a>
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4a14      	ldr	r2, [pc, #80]	@ (800c70c <vTaskSwitchContext+0xbc>)
 800c6ba:	4413      	add	r3, r2
 800c6bc:	613b      	str	r3, [r7, #16]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	605a      	str	r2, [r3, #4]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d104      	bne.n	800c6de <vTaskSwitchContext+0x8e>
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	605a      	str	r2, [r3, #4]
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c710 <vTaskSwitchContext+0xc0>)
 800c6e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6e8:	4b09      	ldr	r3, [pc, #36]	@ (800c710 <vTaskSwitchContext+0xc0>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	334c      	adds	r3, #76	@ 0x4c
 800c6ee:	4a09      	ldr	r2, [pc, #36]	@ (800c714 <vTaskSwitchContext+0xc4>)
 800c6f0:	6013      	str	r3, [r2, #0]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20005318 	.word	0x20005318
 800c704:	20005304 	.word	0x20005304
 800c708:	200052f8 	.word	0x200052f8
 800c70c:	200051f4 	.word	0x200051f4
 800c710:	200051f0 	.word	0x200051f0
 800c714:	20000118 	.word	0x20000118

0800c718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10b      	bne.n	800c740 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	60fb      	str	r3, [r7, #12]
}
 800c73a:	bf00      	nop
 800c73c:	bf00      	nop
 800c73e:	e7fd      	b.n	800c73c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c740:	4b07      	ldr	r3, [pc, #28]	@ (800c760 <vTaskPlaceOnEventList+0x48>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3318      	adds	r3, #24
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7fe fbec 	bl	800af26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c74e:	2101      	movs	r1, #1
 800c750:	6838      	ldr	r0, [r7, #0]
 800c752:	f000 fb8d 	bl	800ce70 <prvAddCurrentTaskToDelayedList>
}
 800c756:	bf00      	nop
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	200051f0 	.word	0x200051f0

0800c764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10b      	bne.n	800c792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	60fb      	str	r3, [r7, #12]
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	e7fd      	b.n	800c78e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	3318      	adds	r3, #24
 800c796:	4618      	mov	r0, r3
 800c798:	f7fe fbfe 	bl	800af98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c79c:	4b1d      	ldr	r3, [pc, #116]	@ (800c814 <xTaskRemoveFromEventList+0xb0>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d11c      	bne.n	800c7de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe fbf5 	bl	800af98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	409a      	lsls	r2, r3
 800c7b6:	4b18      	ldr	r3, [pc, #96]	@ (800c818 <xTaskRemoveFromEventList+0xb4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	4a16      	ldr	r2, [pc, #88]	@ (800c818 <xTaskRemoveFromEventList+0xb4>)
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4a13      	ldr	r2, [pc, #76]	@ (800c81c <xTaskRemoveFromEventList+0xb8>)
 800c7ce:	441a      	add	r2, r3
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4610      	mov	r0, r2
 800c7d8:	f7fe fb81 	bl	800aede <vListInsertEnd>
 800c7dc:	e005      	b.n	800c7ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3318      	adds	r3, #24
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	480e      	ldr	r0, [pc, #56]	@ (800c820 <xTaskRemoveFromEventList+0xbc>)
 800c7e6:	f7fe fb7a 	bl	800aede <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c824 <xTaskRemoveFromEventList+0xc0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d905      	bls.n	800c804 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c828 <xTaskRemoveFromEventList+0xc4>)
 800c7fe:	2201      	movs	r2, #1
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	e001      	b.n	800c808 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c808:	697b      	ldr	r3, [r7, #20]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20005318 	.word	0x20005318
 800c818:	200052f8 	.word	0x200052f8
 800c81c:	200051f4 	.word	0x200051f4
 800c820:	200052b0 	.word	0x200052b0
 800c824:	200051f0 	.word	0x200051f0
 800c828:	20005304 	.word	0x20005304

0800c82c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c834:	4b06      	ldr	r3, [pc, #24]	@ (800c850 <vTaskInternalSetTimeOutState+0x24>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c83c:	4b05      	ldr	r3, [pc, #20]	@ (800c854 <vTaskInternalSetTimeOutState+0x28>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	605a      	str	r2, [r3, #4]
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	20005308 	.word	0x20005308
 800c854:	200052f4 	.word	0x200052f4

0800c858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10b      	bne.n	800c880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	613b      	str	r3, [r7, #16]
}
 800c87a:	bf00      	nop
 800c87c:	bf00      	nop
 800c87e:	e7fd      	b.n	800c87c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10b      	bne.n	800c89e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60fb      	str	r3, [r7, #12]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c89e:	f000 fc7b 	bl	800d198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <xTaskCheckForTimeOut+0xc0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	69ba      	ldr	r2, [r7, #24]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ba:	d102      	bne.n	800c8c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	e023      	b.n	800c90a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	4b15      	ldr	r3, [pc, #84]	@ (800c91c <xTaskCheckForTimeOut+0xc4>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d007      	beq.n	800c8de <xTaskCheckForTimeOut+0x86>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	69ba      	ldr	r2, [r7, #24]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d302      	bcc.n	800c8de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	61fb      	str	r3, [r7, #28]
 800c8dc:	e015      	b.n	800c90a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d20b      	bcs.n	800c900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff ff99 	bl	800c82c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	61fb      	str	r3, [r7, #28]
 800c8fe:	e004      	b.n	800c90a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c906:	2301      	movs	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c90a:	f000 fc77 	bl	800d1fc <vPortExitCritical>

	return xReturn;
 800c90e:	69fb      	ldr	r3, [r7, #28]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3720      	adds	r7, #32
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	200052f4 	.word	0x200052f4
 800c91c:	20005308 	.word	0x20005308

0800c920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c924:	4b03      	ldr	r3, [pc, #12]	@ (800c934 <vTaskMissedYield+0x14>)
 800c926:	2201      	movs	r2, #1
 800c928:	601a      	str	r2, [r3, #0]
}
 800c92a:	bf00      	nop
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	20005304 	.word	0x20005304

0800c938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c940:	f000 f852 	bl	800c9e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c944:	4b06      	ldr	r3, [pc, #24]	@ (800c960 <prvIdleTask+0x28>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d9f9      	bls.n	800c940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c94c:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <prvIdleTask+0x2c>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c95c:	e7f0      	b.n	800c940 <prvIdleTask+0x8>
 800c95e:	bf00      	nop
 800c960:	200051f4 	.word	0x200051f4
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c96e:	2300      	movs	r3, #0
 800c970:	607b      	str	r3, [r7, #4]
 800c972:	e00c      	b.n	800c98e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4a12      	ldr	r2, [pc, #72]	@ (800c9c8 <prvInitialiseTaskLists+0x60>)
 800c980:	4413      	add	r3, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fa7e 	bl	800ae84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3301      	adds	r3, #1
 800c98c:	607b      	str	r3, [r7, #4]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b06      	cmp	r3, #6
 800c992:	d9ef      	bls.n	800c974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c994:	480d      	ldr	r0, [pc, #52]	@ (800c9cc <prvInitialiseTaskLists+0x64>)
 800c996:	f7fe fa75 	bl	800ae84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c99a:	480d      	ldr	r0, [pc, #52]	@ (800c9d0 <prvInitialiseTaskLists+0x68>)
 800c99c:	f7fe fa72 	bl	800ae84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9a0:	480c      	ldr	r0, [pc, #48]	@ (800c9d4 <prvInitialiseTaskLists+0x6c>)
 800c9a2:	f7fe fa6f 	bl	800ae84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9a6:	480c      	ldr	r0, [pc, #48]	@ (800c9d8 <prvInitialiseTaskLists+0x70>)
 800c9a8:	f7fe fa6c 	bl	800ae84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9ac:	480b      	ldr	r0, [pc, #44]	@ (800c9dc <prvInitialiseTaskLists+0x74>)
 800c9ae:	f7fe fa69 	bl	800ae84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <prvInitialiseTaskLists+0x78>)
 800c9b4:	4a05      	ldr	r2, [pc, #20]	@ (800c9cc <prvInitialiseTaskLists+0x64>)
 800c9b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e4 <prvInitialiseTaskLists+0x7c>)
 800c9ba:	4a05      	ldr	r2, [pc, #20]	@ (800c9d0 <prvInitialiseTaskLists+0x68>)
 800c9bc:	601a      	str	r2, [r3, #0]
}
 800c9be:	bf00      	nop
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200051f4 	.word	0x200051f4
 800c9cc:	20005280 	.word	0x20005280
 800c9d0:	20005294 	.word	0x20005294
 800c9d4:	200052b0 	.word	0x200052b0
 800c9d8:	200052c4 	.word	0x200052c4
 800c9dc:	200052dc 	.word	0x200052dc
 800c9e0:	200052a8 	.word	0x200052a8
 800c9e4:	200052ac 	.word	0x200052ac

0800c9e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9ee:	e019      	b.n	800ca24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9f0:	f000 fbd2 	bl	800d198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f4:	4b10      	ldr	r3, [pc, #64]	@ (800ca38 <prvCheckTasksWaitingTermination+0x50>)
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe fac9 	bl	800af98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca06:	4b0d      	ldr	r3, [pc, #52]	@ (800ca3c <prvCheckTasksWaitingTermination+0x54>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ca3c <prvCheckTasksWaitingTermination+0x54>)
 800ca0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca10:	4b0b      	ldr	r3, [pc, #44]	@ (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3b01      	subs	r3, #1
 800ca16:	4a0a      	ldr	r2, [pc, #40]	@ (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca1a:	f000 fbef 	bl	800d1fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f810 	bl	800ca44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca24:	4b06      	ldr	r3, [pc, #24]	@ (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e1      	bne.n	800c9f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca2c:	bf00      	nop
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	200052c4 	.word	0x200052c4
 800ca3c:	200052f0 	.word	0x200052f0
 800ca40:	200052d8 	.word	0x200052d8

0800ca44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	334c      	adds	r3, #76	@ 0x4c
 800ca50:	4618      	mov	r0, r3
 800ca52:	f00b fe5b 	bl	801870c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d108      	bne.n	800ca72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fd87 	bl	800d578 <vPortFree>
				vPortFree( pxTCB );
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fd84 	bl	800d578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca70:	e019      	b.n	800caa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d103      	bne.n	800ca84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fd7b 	bl	800d578 <vPortFree>
	}
 800ca82:	e010      	b.n	800caa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d00b      	beq.n	800caa6 <prvDeleteTCB+0x62>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	60fb      	str	r3, [r7, #12]
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	e7fd      	b.n	800caa2 <prvDeleteTCB+0x5e>
	}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cab6:	4b0c      	ldr	r3, [pc, #48]	@ (800cae8 <prvResetNextTaskUnblockTime+0x38>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cac0:	4b0a      	ldr	r3, [pc, #40]	@ (800caec <prvResetNextTaskUnblockTime+0x3c>)
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295
 800cac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cac8:	e008      	b.n	800cadc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caca:	4b07      	ldr	r3, [pc, #28]	@ (800cae8 <prvResetNextTaskUnblockTime+0x38>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4a04      	ldr	r2, [pc, #16]	@ (800caec <prvResetNextTaskUnblockTime+0x3c>)
 800cada:	6013      	str	r3, [r2, #0]
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	200052a8 	.word	0x200052a8
 800caec:	20005310 	.word	0x20005310

0800caf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800caf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb24 <xTaskGetSchedulerState+0x34>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cafe:	2301      	movs	r3, #1
 800cb00:	607b      	str	r3, [r7, #4]
 800cb02:	e008      	b.n	800cb16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb04:	4b08      	ldr	r3, [pc, #32]	@ (800cb28 <xTaskGetSchedulerState+0x38>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	607b      	str	r3, [r7, #4]
 800cb10:	e001      	b.n	800cb16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb12:	2300      	movs	r3, #0
 800cb14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb16:	687b      	ldr	r3, [r7, #4]
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	200052fc 	.word	0x200052fc
 800cb28:	20005318 	.word	0x20005318

0800cb2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d05e      	beq.n	800cc00 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb46:	4b31      	ldr	r3, [pc, #196]	@ (800cc0c <xTaskPriorityInherit+0xe0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d24e      	bcs.n	800cbee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	db06      	blt.n	800cb66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb58:	4b2c      	ldr	r3, [pc, #176]	@ (800cc0c <xTaskPriorityInherit+0xe0>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb5e:	f1c3 0207 	rsb	r2, r3, #7
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6959      	ldr	r1, [r3, #20]
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4a26      	ldr	r2, [pc, #152]	@ (800cc10 <xTaskPriorityInherit+0xe4>)
 800cb78:	4413      	add	r3, r2
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	d12f      	bne.n	800cbde <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fa08 	bl	800af98 <uxListRemove>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb92:	2201      	movs	r2, #1
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	43da      	mvns	r2, r3
 800cb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800cc14 <xTaskPriorityInherit+0xe8>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4013      	ands	r3, r2
 800cba0:	4a1c      	ldr	r2, [pc, #112]	@ (800cc14 <xTaskPriorityInherit+0xe8>)
 800cba2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cba4:	4b19      	ldr	r3, [pc, #100]	@ (800cc0c <xTaskPriorityInherit+0xe0>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	4b17      	ldr	r3, [pc, #92]	@ (800cc14 <xTaskPriorityInherit+0xe8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	4a15      	ldr	r2, [pc, #84]	@ (800cc14 <xTaskPriorityInherit+0xe8>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4a10      	ldr	r2, [pc, #64]	@ (800cc10 <xTaskPriorityInherit+0xe4>)
 800cbce:	441a      	add	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7fe f981 	bl	800aede <vListInsertEnd>
 800cbdc:	e004      	b.n	800cbe8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbde:	4b0b      	ldr	r3, [pc, #44]	@ (800cc0c <xTaskPriorityInherit+0xe0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	e008      	b.n	800cc00 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbf2:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <xTaskPriorityInherit+0xe0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d201      	bcs.n	800cc00 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc00:	68fb      	ldr	r3, [r7, #12]
	}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	200051f0 	.word	0x200051f0
 800cc10:	200051f4 	.word	0x200051f4
 800cc14:	200052f8 	.word	0x200052f8

0800cc18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d070      	beq.n	800cd10 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc2e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd1c <xTaskPriorityDisinherit+0x104>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d00b      	beq.n	800cc50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	60fb      	str	r3, [r7, #12]
}
 800cc4a:	bf00      	nop
 800cc4c:	bf00      	nop
 800cc4e:	e7fd      	b.n	800cc4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10b      	bne.n	800cc70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60bb      	str	r3, [r7, #8]
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	e7fd      	b.n	800cc6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc74:	1e5a      	subs	r2, r3, #1
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d044      	beq.n	800cd10 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d140      	bne.n	800cd10 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	3304      	adds	r3, #4
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe f980 	bl	800af98 <uxListRemove>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d115      	bne.n	800ccca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca2:	491f      	ldr	r1, [pc, #124]	@ (800cd20 <xTaskPriorityDisinherit+0x108>)
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	440b      	add	r3, r1
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <xTaskPriorityDisinherit+0xb2>
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb8:	2201      	movs	r2, #1
 800ccba:	fa02 f303 	lsl.w	r3, r2, r3
 800ccbe:	43da      	mvns	r2, r3
 800ccc0:	4b18      	ldr	r3, [pc, #96]	@ (800cd24 <xTaskPriorityDisinherit+0x10c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	4a17      	ldr	r2, [pc, #92]	@ (800cd24 <xTaskPriorityDisinherit+0x10c>)
 800ccc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd6:	f1c3 0207 	rsb	r2, r3, #7
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce2:	2201      	movs	r2, #1
 800cce4:	409a      	lsls	r2, r3
 800cce6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd24 <xTaskPriorityDisinherit+0x10c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	4a0d      	ldr	r2, [pc, #52]	@ (800cd24 <xTaskPriorityDisinherit+0x10c>)
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4a08      	ldr	r2, [pc, #32]	@ (800cd20 <xTaskPriorityDisinherit+0x108>)
 800ccfe:	441a      	add	r2, r3
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	3304      	adds	r3, #4
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	f7fe f8e9 	bl	800aede <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd10:	697b      	ldr	r3, [r7, #20]
	}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	200051f0 	.word	0x200051f0
 800cd20:	200051f4 	.word	0x200051f4
 800cd24:	200052f8 	.word	0x200052f8

0800cd28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cd36:	2301      	movs	r3, #1
 800cd38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d079      	beq.n	800ce34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10b      	bne.n	800cd60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	60fb      	str	r3, [r7, #12]
}
 800cd5a:	bf00      	nop
 800cd5c:	bf00      	nop
 800cd5e:	e7fd      	b.n	800cd5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d902      	bls.n	800cd70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	61fb      	str	r3, [r7, #28]
 800cd6e:	e002      	b.n	800cd76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd7a:	69fa      	ldr	r2, [r7, #28]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d059      	beq.n	800ce34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d154      	bne.n	800ce34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	69ba      	ldr	r2, [r7, #24]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d10b      	bne.n	800cdac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	60bb      	str	r3, [r7, #8]
}
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	e7fd      	b.n	800cda8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	db04      	blt.n	800cdca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	f1c3 0207 	rsb	r2, r3, #7
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	6959      	ldr	r1, [r3, #20]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4a19      	ldr	r2, [pc, #100]	@ (800ce40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cdda:	4413      	add	r3, r2
 800cddc:	4299      	cmp	r1, r3
 800cdde:	d129      	bne.n	800ce34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	3304      	adds	r3, #4
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe f8d7 	bl	800af98 <uxListRemove>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10a      	bne.n	800ce06 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfa:	43da      	mvns	r2, r3
 800cdfc:	4b11      	ldr	r3, [pc, #68]	@ (800ce44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4013      	ands	r3, r2
 800ce02:	4a10      	ldr	r2, [pc, #64]	@ (800ce44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ce04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	409a      	lsls	r2, r3
 800ce0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	4a0b      	ldr	r2, [pc, #44]	@ (800ce44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4a06      	ldr	r2, [pc, #24]	@ (800ce40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce26:	441a      	add	r2, r3
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4610      	mov	r0, r2
 800ce30:	f7fe f855 	bl	800aede <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce34:	bf00      	nop
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	200051f0 	.word	0x200051f0
 800ce40:	200051f4 	.word	0x200051f4
 800ce44:	200052f8 	.word	0x200052f8

0800ce48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d004      	beq.n	800ce5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce54:	4b05      	ldr	r3, [pc, #20]	@ (800ce6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ce5a:	3201      	adds	r2, #1
 800ce5c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ce5e:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ce60:	681b      	ldr	r3, [r3, #0]
	}
 800ce62:	4618      	mov	r0, r3
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	200051f0 	.word	0x200051f0

0800ce70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce7a:	4b29      	ldr	r3, [pc, #164]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce80:	4b28      	ldr	r3, [pc, #160]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe f886 	bl	800af98 <uxListRemove>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ce92:	4b24      	ldr	r3, [pc, #144]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce98:	2201      	movs	r2, #1
 800ce9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9e:	43da      	mvns	r2, r3
 800cea0:	4b21      	ldr	r3, [pc, #132]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4013      	ands	r3, r2
 800cea6:	4a20      	ldr	r2, [pc, #128]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cea8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb0:	d10a      	bne.n	800cec8 <prvAddCurrentTaskToDelayedList+0x58>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d007      	beq.n	800cec8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceb8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3304      	adds	r3, #4
 800cebe:	4619      	mov	r1, r3
 800cec0:	481a      	ldr	r0, [pc, #104]	@ (800cf2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cec2:	f7fe f80c 	bl	800aede <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cec6:	e026      	b.n	800cf16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ced0:	4b14      	ldr	r3, [pc, #80]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d209      	bcs.n	800cef4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cee0:	4b13      	ldr	r3, [pc, #76]	@ (800cf30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	4b0f      	ldr	r3, [pc, #60]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3304      	adds	r3, #4
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	f7fe f81a 	bl	800af26 <vListInsert>
}
 800cef2:	e010      	b.n	800cf16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cef4:	4b0f      	ldr	r3, [pc, #60]	@ (800cf34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b0a      	ldr	r3, [pc, #40]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7fe f810 	bl	800af26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf06:	4b0c      	ldr	r3, [pc, #48]	@ (800cf38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d202      	bcs.n	800cf16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf10:	4a09      	ldr	r2, [pc, #36]	@ (800cf38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	6013      	str	r3, [r2, #0]
}
 800cf16:	bf00      	nop
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	200052f4 	.word	0x200052f4
 800cf24:	200051f0 	.word	0x200051f0
 800cf28:	200052f8 	.word	0x200052f8
 800cf2c:	200052dc 	.word	0x200052dc
 800cf30:	200052ac 	.word	0x200052ac
 800cf34:	200052a8 	.word	0x200052a8
 800cf38:	20005310 	.word	0x20005310

0800cf3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3b04      	subs	r3, #4
 800cf4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cf54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3b04      	subs	r3, #4
 800cf5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	f023 0201 	bic.w	r2, r3, #1
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3b04      	subs	r3, #4
 800cf6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf6c:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa0 <pxPortInitialiseStack+0x64>)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3b14      	subs	r3, #20
 800cf76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3b04      	subs	r3, #4
 800cf82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f06f 0202 	mvn.w	r2, #2
 800cf8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3b20      	subs	r3, #32
 800cf90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf92:	68fb      	ldr	r3, [r7, #12]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	0800cfa5 	.word	0x0800cfa5

0800cfa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfae:	4b13      	ldr	r3, [pc, #76]	@ (800cffc <prvTaskExitError+0x58>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb6:	d00b      	beq.n	800cfd0 <prvTaskExitError+0x2c>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	60fb      	str	r3, [r7, #12]
}
 800cfca:	bf00      	nop
 800cfcc:	bf00      	nop
 800cfce:	e7fd      	b.n	800cfcc <prvTaskExitError+0x28>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	60bb      	str	r3, [r7, #8]
}
 800cfe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfe4:	bf00      	nop
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d0fc      	beq.n	800cfe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	20000098 	.word	0x20000098

0800d000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d000:	4b07      	ldr	r3, [pc, #28]	@ (800d020 <pxCurrentTCBConst2>)
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	6808      	ldr	r0, [r1, #0]
 800d006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	f380 8809 	msr	PSP, r0
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f04f 0000 	mov.w	r0, #0
 800d016:	f380 8811 	msr	BASEPRI, r0
 800d01a:	4770      	bx	lr
 800d01c:	f3af 8000 	nop.w

0800d020 <pxCurrentTCBConst2>:
 800d020:	200051f0 	.word	0x200051f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d028:	4808      	ldr	r0, [pc, #32]	@ (800d04c <prvPortStartFirstTask+0x24>)
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	6800      	ldr	r0, [r0, #0]
 800d02e:	f380 8808 	msr	MSP, r0
 800d032:	f04f 0000 	mov.w	r0, #0
 800d036:	f380 8814 	msr	CONTROL, r0
 800d03a:	b662      	cpsie	i
 800d03c:	b661      	cpsie	f
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	df00      	svc	0
 800d048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d04a:	bf00      	nop
 800d04c:	e000ed08 	.word	0xe000ed08

0800d050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d056:	4b47      	ldr	r3, [pc, #284]	@ (800d174 <xPortStartScheduler+0x124>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a47      	ldr	r2, [pc, #284]	@ (800d178 <xPortStartScheduler+0x128>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d10b      	bne.n	800d078 <xPortStartScheduler+0x28>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	60fb      	str	r3, [r7, #12]
}
 800d072:	bf00      	nop
 800d074:	bf00      	nop
 800d076:	e7fd      	b.n	800d074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d078:	4b3e      	ldr	r3, [pc, #248]	@ (800d174 <xPortStartScheduler+0x124>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <xPortStartScheduler+0x12c>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d10b      	bne.n	800d09a <xPortStartScheduler+0x4a>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	613b      	str	r3, [r7, #16]
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	e7fd      	b.n	800d096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d09a:	4b39      	ldr	r3, [pc, #228]	@ (800d180 <xPortStartScheduler+0x130>)
 800d09c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	22ff      	movs	r2, #255	@ 0xff
 800d0aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0b4:	78fb      	ldrb	r3, [r7, #3]
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	4b31      	ldr	r3, [pc, #196]	@ (800d184 <xPortStartScheduler+0x134>)
 800d0c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0c2:	4b31      	ldr	r3, [pc, #196]	@ (800d188 <xPortStartScheduler+0x138>)
 800d0c4:	2207      	movs	r2, #7
 800d0c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0c8:	e009      	b.n	800d0de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d0ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d188 <xPortStartScheduler+0x138>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d188 <xPortStartScheduler+0x138>)
 800d0d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0d4:	78fb      	ldrb	r3, [r7, #3]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0de:	78fb      	ldrb	r3, [r7, #3]
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0e6:	2b80      	cmp	r3, #128	@ 0x80
 800d0e8:	d0ef      	beq.n	800d0ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0ea:	4b27      	ldr	r3, [pc, #156]	@ (800d188 <xPortStartScheduler+0x138>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f1c3 0307 	rsb	r3, r3, #7
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d00b      	beq.n	800d10e <xPortStartScheduler+0xbe>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60bb      	str	r3, [r7, #8]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d10e:	4b1e      	ldr	r3, [pc, #120]	@ (800d188 <xPortStartScheduler+0x138>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	021b      	lsls	r3, r3, #8
 800d114:	4a1c      	ldr	r2, [pc, #112]	@ (800d188 <xPortStartScheduler+0x138>)
 800d116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d118:	4b1b      	ldr	r3, [pc, #108]	@ (800d188 <xPortStartScheduler+0x138>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d120:	4a19      	ldr	r2, [pc, #100]	@ (800d188 <xPortStartScheduler+0x138>)
 800d122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	b2da      	uxtb	r2, r3
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d12c:	4b17      	ldr	r3, [pc, #92]	@ (800d18c <xPortStartScheduler+0x13c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a16      	ldr	r2, [pc, #88]	@ (800d18c <xPortStartScheduler+0x13c>)
 800d132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d138:	4b14      	ldr	r3, [pc, #80]	@ (800d18c <xPortStartScheduler+0x13c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a13      	ldr	r2, [pc, #76]	@ (800d18c <xPortStartScheduler+0x13c>)
 800d13e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d144:	f000 f8da 	bl	800d2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <xPortStartScheduler+0x140>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d14e:	f000 f8f9 	bl	800d344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d152:	4b10      	ldr	r3, [pc, #64]	@ (800d194 <xPortStartScheduler+0x144>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a0f      	ldr	r2, [pc, #60]	@ (800d194 <xPortStartScheduler+0x144>)
 800d158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d15c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d15e:	f7ff ff63 	bl	800d028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d162:	f7ff fa75 	bl	800c650 <vTaskSwitchContext>
	prvTaskExitError();
 800d166:	f7ff ff1d 	bl	800cfa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3718      	adds	r7, #24
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	e000ed00 	.word	0xe000ed00
 800d178:	410fc271 	.word	0x410fc271
 800d17c:	410fc270 	.word	0x410fc270
 800d180:	e000e400 	.word	0xe000e400
 800d184:	2000531c 	.word	0x2000531c
 800d188:	20005320 	.word	0x20005320
 800d18c:	e000ed20 	.word	0xe000ed20
 800d190:	20000098 	.word	0x20000098
 800d194:	e000ef34 	.word	0xe000ef34

0800d198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	607b      	str	r3, [r7, #4]
}
 800d1b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1b2:	4b10      	ldr	r3, [pc, #64]	@ (800d1f4 <vPortEnterCritical+0x5c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	4a0e      	ldr	r2, [pc, #56]	@ (800d1f4 <vPortEnterCritical+0x5c>)
 800d1ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f4 <vPortEnterCritical+0x5c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d110      	bne.n	800d1e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d1f8 <vPortEnterCritical+0x60>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	603b      	str	r3, [r7, #0]
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	e7fd      	b.n	800d1e2 <vPortEnterCritical+0x4a>
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20000098 	.word	0x20000098
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d202:	4b12      	ldr	r3, [pc, #72]	@ (800d24c <vPortExitCritical+0x50>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10b      	bne.n	800d222 <vPortExitCritical+0x26>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	607b      	str	r3, [r7, #4]
}
 800d21c:	bf00      	nop
 800d21e:	bf00      	nop
 800d220:	e7fd      	b.n	800d21e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d222:	4b0a      	ldr	r3, [pc, #40]	@ (800d24c <vPortExitCritical+0x50>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3b01      	subs	r3, #1
 800d228:	4a08      	ldr	r2, [pc, #32]	@ (800d24c <vPortExitCritical+0x50>)
 800d22a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d22c:	4b07      	ldr	r3, [pc, #28]	@ (800d24c <vPortExitCritical+0x50>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d105      	bne.n	800d240 <vPortExitCritical+0x44>
 800d234:	2300      	movs	r3, #0
 800d236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	f383 8811 	msr	BASEPRI, r3
}
 800d23e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	20000098 	.word	0x20000098

0800d250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d250:	f3ef 8009 	mrs	r0, PSP
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4b15      	ldr	r3, [pc, #84]	@ (800d2b0 <pxCurrentTCBConst>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f01e 0f10 	tst.w	lr, #16
 800d260:	bf08      	it	eq
 800d262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	6010      	str	r0, [r2, #0]
 800d26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d274:	f380 8811 	msr	BASEPRI, r0
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f7ff f9e6 	bl	800c650 <vTaskSwitchContext>
 800d284:	f04f 0000 	mov.w	r0, #0
 800d288:	f380 8811 	msr	BASEPRI, r0
 800d28c:	bc09      	pop	{r0, r3}
 800d28e:	6819      	ldr	r1, [r3, #0]
 800d290:	6808      	ldr	r0, [r1, #0]
 800d292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d296:	f01e 0f10 	tst.w	lr, #16
 800d29a:	bf08      	it	eq
 800d29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2a0:	f380 8809 	msr	PSP, r0
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w

0800d2b0 <pxCurrentTCBConst>:
 800d2b0:	200051f0 	.word	0x200051f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	607b      	str	r3, [r7, #4]
}
 800d2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2d2:	f7ff f903 	bl	800c4dc <xTaskIncrementTick>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2dc:	4b06      	ldr	r3, [pc, #24]	@ (800d2f8 <SysTick_Handler+0x40>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f383 8811 	msr	BASEPRI, r3
}
 800d2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d300:	4b0b      	ldr	r3, [pc, #44]	@ (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d306:	4b0b      	ldr	r3, [pc, #44]	@ (800d334 <vPortSetupTimerInterrupt+0x38>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	@ (800d338 <vPortSetupTimerInterrupt+0x3c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a0a      	ldr	r2, [pc, #40]	@ (800d33c <vPortSetupTimerInterrupt+0x40>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	4a09      	ldr	r2, [pc, #36]	@ (800d340 <vPortSetupTimerInterrupt+0x44>)
 800d31a:	3b01      	subs	r3, #1
 800d31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d31e:	4b04      	ldr	r3, [pc, #16]	@ (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d320:	2207      	movs	r2, #7
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	e000e010 	.word	0xe000e010
 800d334:	e000e018 	.word	0xe000e018
 800d338:	20000000 	.word	0x20000000
 800d33c:	10624dd3 	.word	0x10624dd3
 800d340:	e000e014 	.word	0xe000e014

0800d344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d354 <vPortEnableVFP+0x10>
 800d348:	6801      	ldr	r1, [r0, #0]
 800d34a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d34e:	6001      	str	r1, [r0, #0]
 800d350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d352:	bf00      	nop
 800d354:	e000ed88 	.word	0xe000ed88

0800d358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d35e:	f3ef 8305 	mrs	r3, IPSR
 800d362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d915      	bls.n	800d396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d36a:	4a18      	ldr	r2, [pc, #96]	@ (800d3cc <vPortValidateInterruptPriority+0x74>)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d374:	4b16      	ldr	r3, [pc, #88]	@ (800d3d0 <vPortValidateInterruptPriority+0x78>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	7afa      	ldrb	r2, [r7, #11]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d20b      	bcs.n	800d396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
 800d392:	bf00      	nop
 800d394:	e7fd      	b.n	800d392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d396:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d4 <vPortValidateInterruptPriority+0x7c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d39e:	4b0e      	ldr	r3, [pc, #56]	@ (800d3d8 <vPortValidateInterruptPriority+0x80>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d90b      	bls.n	800d3be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	603b      	str	r3, [r7, #0]
}
 800d3b8:	bf00      	nop
 800d3ba:	bf00      	nop
 800d3bc:	e7fd      	b.n	800d3ba <vPortValidateInterruptPriority+0x62>
	}
 800d3be:	bf00      	nop
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	e000e3f0 	.word	0xe000e3f0
 800d3d0:	2000531c 	.word	0x2000531c
 800d3d4:	e000ed0c 	.word	0xe000ed0c
 800d3d8:	20005320 	.word	0x20005320

0800d3dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b08a      	sub	sp, #40	@ 0x28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3e8:	f7fe ffaa 	bl	800c340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800d560 <pvPortMalloc+0x184>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3f4:	f000 f924 	bl	800d640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d564 <pvPortMalloc+0x188>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4013      	ands	r3, r2
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 8095 	bne.w	800d530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01e      	beq.n	800d44a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d40c:	2208      	movs	r2, #8
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4413      	add	r3, r2
 800d412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d015      	beq.n	800d44a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f023 0307 	bic.w	r3, r3, #7
 800d424:	3308      	adds	r3, #8
 800d426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f003 0307 	and.w	r3, r3, #7
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00b      	beq.n	800d44a <pvPortMalloc+0x6e>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	617b      	str	r3, [r7, #20]
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop
 800d448:	e7fd      	b.n	800d446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d06f      	beq.n	800d530 <pvPortMalloc+0x154>
 800d450:	4b45      	ldr	r3, [pc, #276]	@ (800d568 <pvPortMalloc+0x18c>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	429a      	cmp	r2, r3
 800d458:	d86a      	bhi.n	800d530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d45a:	4b44      	ldr	r3, [pc, #272]	@ (800d56c <pvPortMalloc+0x190>)
 800d45c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d45e:	4b43      	ldr	r3, [pc, #268]	@ (800d56c <pvPortMalloc+0x190>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d464:	e004      	b.n	800d470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	429a      	cmp	r2, r3
 800d478:	d903      	bls.n	800d482 <pvPortMalloc+0xa6>
 800d47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1f1      	bne.n	800d466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d482:	4b37      	ldr	r3, [pc, #220]	@ (800d560 <pvPortMalloc+0x184>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d488:	429a      	cmp	r2, r3
 800d48a:	d051      	beq.n	800d530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2208      	movs	r2, #8
 800d492:	4413      	add	r3, r2
 800d494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	1ad2      	subs	r2, r2, r3
 800d4a6:	2308      	movs	r3, #8
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d920      	bls.n	800d4f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	f003 0307 	and.w	r3, r3, #7
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00b      	beq.n	800d4d8 <pvPortMalloc+0xfc>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	613b      	str	r3, [r7, #16]
}
 800d4d2:	bf00      	nop
 800d4d4:	bf00      	nop
 800d4d6:	e7fd      	b.n	800d4d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4ea:	69b8      	ldr	r0, [r7, #24]
 800d4ec:	f000 f90a 	bl	800d704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d568 <pvPortMalloc+0x18c>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d568 <pvPortMalloc+0x18c>)
 800d4fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d568 <pvPortMalloc+0x18c>)
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	4b1b      	ldr	r3, [pc, #108]	@ (800d570 <pvPortMalloc+0x194>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	429a      	cmp	r2, r3
 800d508:	d203      	bcs.n	800d512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d50a:	4b17      	ldr	r3, [pc, #92]	@ (800d568 <pvPortMalloc+0x18c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a18      	ldr	r2, [pc, #96]	@ (800d570 <pvPortMalloc+0x194>)
 800d510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	4b13      	ldr	r3, [pc, #76]	@ (800d564 <pvPortMalloc+0x188>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	431a      	orrs	r2, r3
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d526:	4b13      	ldr	r3, [pc, #76]	@ (800d574 <pvPortMalloc+0x198>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	4a11      	ldr	r2, [pc, #68]	@ (800d574 <pvPortMalloc+0x198>)
 800d52e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d530:	f7fe ff14 	bl	800c35c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <pvPortMalloc+0x17a>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	60fb      	str	r3, [r7, #12]
}
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	e7fd      	b.n	800d552 <pvPortMalloc+0x176>
	return pvReturn;
 800d556:	69fb      	ldr	r3, [r7, #28]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3728      	adds	r7, #40	@ 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20008f2c 	.word	0x20008f2c
 800d564:	20008f40 	.word	0x20008f40
 800d568:	20008f30 	.word	0x20008f30
 800d56c:	20008f24 	.word	0x20008f24
 800d570:	20008f34 	.word	0x20008f34
 800d574:	20008f38 	.word	0x20008f38

0800d578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d04f      	beq.n	800d62a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d58a:	2308      	movs	r3, #8
 800d58c:	425b      	negs	r3, r3
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4413      	add	r3, r2
 800d592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	4b25      	ldr	r3, [pc, #148]	@ (800d634 <vPortFree+0xbc>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10b      	bne.n	800d5be <vPortFree+0x46>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60fb      	str	r3, [r7, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	e7fd      	b.n	800d5ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00b      	beq.n	800d5de <vPortFree+0x66>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	60bb      	str	r3, [r7, #8]
}
 800d5d8:	bf00      	nop
 800d5da:	bf00      	nop
 800d5dc:	e7fd      	b.n	800d5da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	4b14      	ldr	r3, [pc, #80]	@ (800d634 <vPortFree+0xbc>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d01e      	beq.n	800d62a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d11a      	bne.n	800d62a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d634 <vPortFree+0xbc>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	43db      	mvns	r3, r3
 800d5fe:	401a      	ands	r2, r3
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d604:	f7fe fe9c 	bl	800c340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	4b0a      	ldr	r3, [pc, #40]	@ (800d638 <vPortFree+0xc0>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4413      	add	r3, r2
 800d612:	4a09      	ldr	r2, [pc, #36]	@ (800d638 <vPortFree+0xc0>)
 800d614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d616:	6938      	ldr	r0, [r7, #16]
 800d618:	f000 f874 	bl	800d704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d61c:	4b07      	ldr	r3, [pc, #28]	@ (800d63c <vPortFree+0xc4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	4a06      	ldr	r2, [pc, #24]	@ (800d63c <vPortFree+0xc4>)
 800d624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d626:	f7fe fe99 	bl	800c35c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d62a:	bf00      	nop
 800d62c:	3718      	adds	r7, #24
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20008f40 	.word	0x20008f40
 800d638:	20008f30 	.word	0x20008f30
 800d63c:	20008f3c 	.word	0x20008f3c

0800d640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d64a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d64c:	4b27      	ldr	r3, [pc, #156]	@ (800d6ec <prvHeapInit+0xac>)
 800d64e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00c      	beq.n	800d674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3307      	adds	r3, #7
 800d65e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f023 0307 	bic.w	r3, r3, #7
 800d666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	4a1f      	ldr	r2, [pc, #124]	@ (800d6ec <prvHeapInit+0xac>)
 800d670:	4413      	add	r3, r2
 800d672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d678:	4a1d      	ldr	r2, [pc, #116]	@ (800d6f0 <prvHeapInit+0xb0>)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d67e:	4b1c      	ldr	r3, [pc, #112]	@ (800d6f0 <prvHeapInit+0xb0>)
 800d680:	2200      	movs	r2, #0
 800d682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	4413      	add	r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d68c:	2208      	movs	r2, #8
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	1a9b      	subs	r3, r3, r2
 800d692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0307 	bic.w	r3, r3, #7
 800d69a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4a15      	ldr	r2, [pc, #84]	@ (800d6f4 <prvHeapInit+0xb4>)
 800d6a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6a2:	4b14      	ldr	r3, [pc, #80]	@ (800d6f4 <prvHeapInit+0xb4>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6aa:	4b12      	ldr	r3, [pc, #72]	@ (800d6f4 <prvHeapInit+0xb4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	1ad2      	subs	r2, r2, r3
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f4 <prvHeapInit+0xb4>)
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f8 <prvHeapInit+0xb8>)
 800d6ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4a09      	ldr	r2, [pc, #36]	@ (800d6fc <prvHeapInit+0xbc>)
 800d6d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6d8:	4b09      	ldr	r3, [pc, #36]	@ (800d700 <prvHeapInit+0xc0>)
 800d6da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d6de:	601a      	str	r2, [r3, #0]
}
 800d6e0:	bf00      	nop
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	20005324 	.word	0x20005324
 800d6f0:	20008f24 	.word	0x20008f24
 800d6f4:	20008f2c 	.word	0x20008f2c
 800d6f8:	20008f34 	.word	0x20008f34
 800d6fc:	20008f30 	.word	0x20008f30
 800d700:	20008f40 	.word	0x20008f40

0800d704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d70c:	4b28      	ldr	r3, [pc, #160]	@ (800d7b0 <prvInsertBlockIntoFreeList+0xac>)
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	e002      	b.n	800d718 <prvInsertBlockIntoFreeList+0x14>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d8f7      	bhi.n	800d712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	4413      	add	r3, r2
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	429a      	cmp	r2, r3
 800d732:	d108      	bne.n	800d746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	441a      	add	r2, r3
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	441a      	add	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d118      	bne.n	800d78c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	4b15      	ldr	r3, [pc, #84]	@ (800d7b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	429a      	cmp	r2, r3
 800d764:	d00d      	beq.n	800d782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	441a      	add	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	e008      	b.n	800d794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d782:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	e003      	b.n	800d794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d002      	beq.n	800d7a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7a2:	bf00      	nop
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	20008f24 	.word	0x20008f24
 800d7b4:	20008f2c 	.word	0x20008f2c

0800d7b8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d7c2:	f007 fa8f 	bl	8014ce4 <sys_timeouts_sleeptime>
 800d7c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ce:	d10b      	bne.n	800d7e8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d7d0:	4813      	ldr	r0, [pc, #76]	@ (800d820 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7d2:	f00a f862 	bl	801789a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f009 ffd4 	bl	8017788 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d7e0:	480f      	ldr	r0, [pc, #60]	@ (800d820 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7e2:	f00a f84b 	bl	801787c <sys_mutex_lock>
    return;
 800d7e6:	e018      	b.n	800d81a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d7ee:	f007 fa3f 	bl	8014c70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d7f2:	e7e6      	b.n	800d7c2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d7f4:	480a      	ldr	r0, [pc, #40]	@ (800d820 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7f6:	f00a f850 	bl	801789a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f009 ffc2 	bl	8017788 <sys_arch_mbox_fetch>
 800d804:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d806:	4806      	ldr	r0, [pc, #24]	@ (800d820 <tcpip_timeouts_mbox_fetch+0x68>)
 800d808:	f00a f838 	bl	801787c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d812:	d102      	bne.n	800d81a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d814:	f007 fa2c 	bl	8014c70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d818:	e7d3      	b.n	800d7c2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20008f50 	.word	0x20008f50

0800d824 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d82c:	4810      	ldr	r0, [pc, #64]	@ (800d870 <tcpip_thread+0x4c>)
 800d82e:	f00a f825 	bl	801787c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d832:	4b10      	ldr	r3, [pc, #64]	@ (800d874 <tcpip_thread+0x50>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d005      	beq.n	800d846 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d83a:	4b0e      	ldr	r3, [pc, #56]	@ (800d874 <tcpip_thread+0x50>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a0e      	ldr	r2, [pc, #56]	@ (800d878 <tcpip_thread+0x54>)
 800d840:	6812      	ldr	r2, [r2, #0]
 800d842:	4610      	mov	r0, r2
 800d844:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d846:	f107 030c 	add.w	r3, r7, #12
 800d84a:	4619      	mov	r1, r3
 800d84c:	480b      	ldr	r0, [pc, #44]	@ (800d87c <tcpip_thread+0x58>)
 800d84e:	f7ff ffb3 	bl	800d7b8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d858:	4b09      	ldr	r3, [pc, #36]	@ (800d880 <tcpip_thread+0x5c>)
 800d85a:	2291      	movs	r2, #145	@ 0x91
 800d85c:	4909      	ldr	r1, [pc, #36]	@ (800d884 <tcpip_thread+0x60>)
 800d85e:	480a      	ldr	r0, [pc, #40]	@ (800d888 <tcpip_thread+0x64>)
 800d860:	f00a fe86 	bl	8018570 <iprintf>
      continue;
 800d864:	e003      	b.n	800d86e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f80f 	bl	800d88c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d86e:	e7ea      	b.n	800d846 <tcpip_thread+0x22>
 800d870:	20008f50 	.word	0x20008f50
 800d874:	20008f44 	.word	0x20008f44
 800d878:	20008f48 	.word	0x20008f48
 800d87c:	20008f4c 	.word	0x20008f4c
 800d880:	0801a6a0 	.word	0x0801a6a0
 800d884:	0801a6d0 	.word	0x0801a6d0
 800d888:	0801a6f0 	.word	0x0801a6f0

0800d88c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d026      	beq.n	800d8ea <tcpip_thread_handle_msg+0x5e>
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	dc2b      	bgt.n	800d8f8 <tcpip_thread_handle_msg+0x6c>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <tcpip_thread_handle_msg+0x1e>
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d015      	beq.n	800d8d4 <tcpip_thread_handle_msg+0x48>
 800d8a8:	e026      	b.n	800d8f8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	6850      	ldr	r0, [r2, #4]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	6892      	ldr	r2, [r2, #8]
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	4798      	blx	r3
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d004      	beq.n	800d8ca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 fcd9 	bl	800f27c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	2009      	movs	r0, #9
 800d8ce:	f000 fe63 	bl	800e598 <memp_free>
      break;
 800d8d2:	e018      	b.n	800d906 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	6892      	ldr	r2, [r2, #8]
 800d8dc:	4610      	mov	r0, r2
 800d8de:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	2008      	movs	r0, #8
 800d8e4:	f000 fe58 	bl	800e598 <memp_free>
      break;
 800d8e8:	e00d      	b.n	800d906 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	6892      	ldr	r2, [r2, #8]
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	4798      	blx	r3
      break;
 800d8f6:	e006      	b.n	800d906 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d8f8:	4b05      	ldr	r3, [pc, #20]	@ (800d910 <tcpip_thread_handle_msg+0x84>)
 800d8fa:	22cf      	movs	r2, #207	@ 0xcf
 800d8fc:	4905      	ldr	r1, [pc, #20]	@ (800d914 <tcpip_thread_handle_msg+0x88>)
 800d8fe:	4806      	ldr	r0, [pc, #24]	@ (800d918 <tcpip_thread_handle_msg+0x8c>)
 800d900:	f00a fe36 	bl	8018570 <iprintf>
      break;
 800d904:	bf00      	nop
  }
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	0801a6a0 	.word	0x0801a6a0
 800d914:	0801a6d0 	.word	0x0801a6d0
 800d918:	0801a6f0 	.word	0x0801a6f0

0800d91c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d928:	481a      	ldr	r0, [pc, #104]	@ (800d994 <tcpip_inpkt+0x78>)
 800d92a:	f009 ff6c 	bl	8017806 <sys_mbox_valid>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d105      	bne.n	800d940 <tcpip_inpkt+0x24>
 800d934:	4b18      	ldr	r3, [pc, #96]	@ (800d998 <tcpip_inpkt+0x7c>)
 800d936:	22fc      	movs	r2, #252	@ 0xfc
 800d938:	4918      	ldr	r1, [pc, #96]	@ (800d99c <tcpip_inpkt+0x80>)
 800d93a:	4819      	ldr	r0, [pc, #100]	@ (800d9a0 <tcpip_inpkt+0x84>)
 800d93c:	f00a fe18 	bl	8018570 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d940:	2009      	movs	r0, #9
 800d942:	f000 fdb3 	bl	800e4ac <memp_malloc>
 800d946:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d94e:	f04f 33ff 	mov.w	r3, #4294967295
 800d952:	e01a      	b.n	800d98a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2200      	movs	r2, #0
 800d958:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d96c:	6979      	ldr	r1, [r7, #20]
 800d96e:	4809      	ldr	r0, [pc, #36]	@ (800d994 <tcpip_inpkt+0x78>)
 800d970:	f009 fef0 	bl	8017754 <sys_mbox_trypost>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d006      	beq.n	800d988 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d97a:	6979      	ldr	r1, [r7, #20]
 800d97c:	2009      	movs	r0, #9
 800d97e:	f000 fe0b 	bl	800e598 <memp_free>
    return ERR_MEM;
 800d982:	f04f 33ff 	mov.w	r3, #4294967295
 800d986:	e000      	b.n	800d98a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d988:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	20008f4c 	.word	0x20008f4c
 800d998:	0801a6a0 	.word	0x0801a6a0
 800d99c:	0801a718 	.word	0x0801a718
 800d9a0:	0801a6f0 	.word	0x0801a6f0

0800d9a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9b4:	f003 0318 	and.w	r3, r3, #24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d9bc:	4a08      	ldr	r2, [pc, #32]	@ (800d9e0 <tcpip_input+0x3c>)
 800d9be:	6839      	ldr	r1, [r7, #0]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff ffab 	bl	800d91c <tcpip_inpkt>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	e005      	b.n	800d9d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d9ca:	4a06      	ldr	r2, [pc, #24]	@ (800d9e4 <tcpip_input+0x40>)
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7ff ffa4 	bl	800d91c <tcpip_inpkt>
 800d9d4:	4603      	mov	r3, r0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	08017565 	.word	0x08017565
 800d9e4:	0801634d 	.word	0x0801634d

0800d9e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d9f2:	4819      	ldr	r0, [pc, #100]	@ (800da58 <tcpip_try_callback+0x70>)
 800d9f4:	f009 ff07 	bl	8017806 <sys_mbox_valid>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d106      	bne.n	800da0c <tcpip_try_callback+0x24>
 800d9fe:	4b17      	ldr	r3, [pc, #92]	@ (800da5c <tcpip_try_callback+0x74>)
 800da00:	f240 125d 	movw	r2, #349	@ 0x15d
 800da04:	4916      	ldr	r1, [pc, #88]	@ (800da60 <tcpip_try_callback+0x78>)
 800da06:	4817      	ldr	r0, [pc, #92]	@ (800da64 <tcpip_try_callback+0x7c>)
 800da08:	f00a fdb2 	bl	8018570 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800da0c:	2008      	movs	r0, #8
 800da0e:	f000 fd4d 	bl	800e4ac <memp_malloc>
 800da12:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800da1a:	f04f 33ff 	mov.w	r3, #4294967295
 800da1e:	e017      	b.n	800da50 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800da32:	68f9      	ldr	r1, [r7, #12]
 800da34:	4808      	ldr	r0, [pc, #32]	@ (800da58 <tcpip_try_callback+0x70>)
 800da36:	f009 fe8d 	bl	8017754 <sys_mbox_trypost>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d006      	beq.n	800da4e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800da40:	68f9      	ldr	r1, [r7, #12]
 800da42:	2008      	movs	r0, #8
 800da44:	f000 fda8 	bl	800e598 <memp_free>
    return ERR_MEM;
 800da48:	f04f 33ff 	mov.w	r3, #4294967295
 800da4c:	e000      	b.n	800da50 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	20008f4c 	.word	0x20008f4c
 800da5c:	0801a6a0 	.word	0x0801a6a0
 800da60:	0801a718 	.word	0x0801a718
 800da64:	0801a6f0 	.word	0x0801a6f0

0800da68 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  lwip_init();
 800da72:	f000 f872 	bl	800db5a <lwip_init>

  tcpip_init_done = initfunc;
 800da76:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <tcpip_init+0x6c>)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800da7c:	4a16      	ldr	r2, [pc, #88]	@ (800dad8 <tcpip_init+0x70>)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800da82:	2106      	movs	r1, #6
 800da84:	4815      	ldr	r0, [pc, #84]	@ (800dadc <tcpip_init+0x74>)
 800da86:	f009 fe43 	bl	8017710 <sys_mbox_new>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d006      	beq.n	800da9e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800da90:	4b13      	ldr	r3, [pc, #76]	@ (800dae0 <tcpip_init+0x78>)
 800da92:	f240 2261 	movw	r2, #609	@ 0x261
 800da96:	4913      	ldr	r1, [pc, #76]	@ (800dae4 <tcpip_init+0x7c>)
 800da98:	4813      	ldr	r0, [pc, #76]	@ (800dae8 <tcpip_init+0x80>)
 800da9a:	f00a fd69 	bl	8018570 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800da9e:	4813      	ldr	r0, [pc, #76]	@ (800daec <tcpip_init+0x84>)
 800daa0:	f009 fed0 	bl	8017844 <sys_mutex_new>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d006      	beq.n	800dab8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800daaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dae0 <tcpip_init+0x78>)
 800daac:	f240 2265 	movw	r2, #613	@ 0x265
 800dab0:	490f      	ldr	r1, [pc, #60]	@ (800daf0 <tcpip_init+0x88>)
 800dab2:	480d      	ldr	r0, [pc, #52]	@ (800dae8 <tcpip_init+0x80>)
 800dab4:	f00a fd5c 	bl	8018570 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dab8:	2300      	movs	r3, #0
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dac0:	2200      	movs	r2, #0
 800dac2:	490c      	ldr	r1, [pc, #48]	@ (800daf4 <tcpip_init+0x8c>)
 800dac4:	480c      	ldr	r0, [pc, #48]	@ (800daf8 <tcpip_init+0x90>)
 800dac6:	f009 fef5 	bl	80178b4 <sys_thread_new>
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	20008f44 	.word	0x20008f44
 800dad8:	20008f48 	.word	0x20008f48
 800dadc:	20008f4c 	.word	0x20008f4c
 800dae0:	0801a6a0 	.word	0x0801a6a0
 800dae4:	0801a728 	.word	0x0801a728
 800dae8:	0801a6f0 	.word	0x0801a6f0
 800daec:	20008f50 	.word	0x20008f50
 800daf0:	0801a74c 	.word	0x0801a74c
 800daf4:	0800d825 	.word	0x0800d825
 800daf8:	0801a770 	.word	0x0801a770

0800dafc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800db06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db0a:	021b      	lsls	r3, r3, #8
 800db0c:	b21a      	sxth	r2, r3
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	0a1b      	lsrs	r3, r3, #8
 800db12:	b29b      	uxth	r3, r3
 800db14:	b21b      	sxth	r3, r3
 800db16:	4313      	orrs	r3, r2
 800db18:	b21b      	sxth	r3, r3
 800db1a:	b29b      	uxth	r3, r3
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	061a      	lsls	r2, r3, #24
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	021b      	lsls	r3, r3, #8
 800db38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db3c:	431a      	orrs	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db46:	431a      	orrs	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	0e1b      	lsrs	r3, r3, #24
 800db4c:	4313      	orrs	r3, r2
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800db64:	f009 fe60 	bl	8017828 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800db68:	f000 f8d4 	bl	800dd14 <mem_init>
  memp_init();
 800db6c:	f000 fc30 	bl	800e3d0 <memp_init>
  pbuf_init();
  netif_init();
 800db70:	f000 fd3c 	bl	800e5ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800db74:	f007 f8ee 	bl	8014d54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800db78:	f001 fe1a 	bl	800f7b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800db7c:	f007 f830 	bl	8014be0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800db80:	bf00      	nop
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800db92:	4b05      	ldr	r3, [pc, #20]	@ (800dba8 <ptr_to_mem+0x20>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	88fb      	ldrh	r3, [r7, #6]
 800db98:	4413      	add	r3, r2
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	200095c0 	.word	0x200095c0

0800dbac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dbb4:	4b05      	ldr	r3, [pc, #20]	@ (800dbcc <mem_to_ptr+0x20>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	b29b      	uxth	r3, r3
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	200095c0 	.word	0x200095c0

0800dbd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dbd8:	4b45      	ldr	r3, [pc, #276]	@ (800dcf0 <plug_holes+0x120>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d206      	bcs.n	800dbf0 <plug_holes+0x20>
 800dbe2:	4b44      	ldr	r3, [pc, #272]	@ (800dcf4 <plug_holes+0x124>)
 800dbe4:	f240 12df 	movw	r2, #479	@ 0x1df
 800dbe8:	4943      	ldr	r1, [pc, #268]	@ (800dcf8 <plug_holes+0x128>)
 800dbea:	4844      	ldr	r0, [pc, #272]	@ (800dcfc <plug_holes+0x12c>)
 800dbec:	f00a fcc0 	bl	8018570 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dbf0:	4b43      	ldr	r3, [pc, #268]	@ (800dd00 <plug_holes+0x130>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d306      	bcc.n	800dc08 <plug_holes+0x38>
 800dbfa:	4b3e      	ldr	r3, [pc, #248]	@ (800dcf4 <plug_holes+0x124>)
 800dbfc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dc00:	4940      	ldr	r1, [pc, #256]	@ (800dd04 <plug_holes+0x134>)
 800dc02:	483e      	ldr	r0, [pc, #248]	@ (800dcfc <plug_holes+0x12c>)
 800dc04:	f00a fcb4 	bl	8018570 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	791b      	ldrb	r3, [r3, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d006      	beq.n	800dc1e <plug_holes+0x4e>
 800dc10:	4b38      	ldr	r3, [pc, #224]	@ (800dcf4 <plug_holes+0x124>)
 800dc12:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800dc16:	493c      	ldr	r1, [pc, #240]	@ (800dd08 <plug_holes+0x138>)
 800dc18:	4838      	ldr	r0, [pc, #224]	@ (800dcfc <plug_holes+0x12c>)
 800dc1a:	f00a fca9 	bl	8018570 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dc26:	d906      	bls.n	800dc36 <plug_holes+0x66>
 800dc28:	4b32      	ldr	r3, [pc, #200]	@ (800dcf4 <plug_holes+0x124>)
 800dc2a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800dc2e:	4937      	ldr	r1, [pc, #220]	@ (800dd0c <plug_holes+0x13c>)
 800dc30:	4832      	ldr	r0, [pc, #200]	@ (800dcfc <plug_holes+0x12c>)
 800dc32:	f00a fc9d 	bl	8018570 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff ffa4 	bl	800db88 <ptr_to_mem>
 800dc40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d024      	beq.n	800dc94 <plug_holes+0xc4>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	791b      	ldrb	r3, [r3, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d120      	bne.n	800dc94 <plug_holes+0xc4>
 800dc52:	4b2b      	ldr	r3, [pc, #172]	@ (800dd00 <plug_holes+0x130>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d01b      	beq.n	800dc94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dc5c:	4b2c      	ldr	r3, [pc, #176]	@ (800dd10 <plug_holes+0x140>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d102      	bne.n	800dc6c <plug_holes+0x9c>
      lfree = mem;
 800dc66:	4a2a      	ldr	r2, [pc, #168]	@ (800dd10 <plug_holes+0x140>)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	881a      	ldrh	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dc7c:	d00a      	beq.n	800dc94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff ff80 	bl	800db88 <ptr_to_mem>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff ff8e 	bl	800dbac <mem_to_ptr>
 800dc90:	4603      	mov	r3, r0
 800dc92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	885b      	ldrh	r3, [r3, #2]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff ff75 	bl	800db88 <ptr_to_mem>
 800dc9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d01f      	beq.n	800dce8 <plug_holes+0x118>
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	791b      	ldrb	r3, [r3, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d11b      	bne.n	800dce8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dcb0:	4b17      	ldr	r3, [pc, #92]	@ (800dd10 <plug_holes+0x140>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d102      	bne.n	800dcc0 <plug_holes+0xf0>
      lfree = pmem;
 800dcba:	4a15      	ldr	r2, [pc, #84]	@ (800dd10 <plug_holes+0x140>)
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	881a      	ldrh	r2, [r3, #0]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dcd0:	d00a      	beq.n	800dce8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff ff56 	bl	800db88 <ptr_to_mem>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	68b8      	ldr	r0, [r7, #8]
 800dce0:	f7ff ff64 	bl	800dbac <mem_to_ptr>
 800dce4:	4603      	mov	r3, r0
 800dce6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dce8:	bf00      	nop
 800dcea:	3714      	adds	r7, #20
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd90      	pop	{r4, r7, pc}
 800dcf0:	200095c0 	.word	0x200095c0
 800dcf4:	0801a780 	.word	0x0801a780
 800dcf8:	0801a7b0 	.word	0x0801a7b0
 800dcfc:	0801a7c8 	.word	0x0801a7c8
 800dd00:	200095c4 	.word	0x200095c4
 800dd04:	0801a7f0 	.word	0x0801a7f0
 800dd08:	0801a80c 	.word	0x0801a80c
 800dd0c:	0801a828 	.word	0x0801a828
 800dd10:	200095cc 	.word	0x200095cc

0800dd14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dd1a:	4b1f      	ldr	r3, [pc, #124]	@ (800dd98 <mem_init+0x84>)
 800dd1c:	3303      	adds	r3, #3
 800dd1e:	f023 0303 	bic.w	r3, r3, #3
 800dd22:	461a      	mov	r2, r3
 800dd24:	4b1d      	ldr	r3, [pc, #116]	@ (800dd9c <mem_init+0x88>)
 800dd26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dd28:	4b1c      	ldr	r3, [pc, #112]	@ (800dd9c <mem_init+0x88>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dd34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dd42:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800dd46:	f7ff ff1f 	bl	800db88 <ptr_to_mem>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4a14      	ldr	r2, [pc, #80]	@ (800dda0 <mem_init+0x8c>)
 800dd4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dd50:	4b13      	ldr	r3, [pc, #76]	@ (800dda0 <mem_init+0x8c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2201      	movs	r2, #1
 800dd56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dd58:	4b11      	ldr	r3, [pc, #68]	@ (800dda0 <mem_init+0x8c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dd60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dd62:	4b0f      	ldr	r3, [pc, #60]	@ (800dda0 <mem_init+0x8c>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dd6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dd6c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd9c <mem_init+0x88>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a0c      	ldr	r2, [pc, #48]	@ (800dda4 <mem_init+0x90>)
 800dd72:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dd74:	480c      	ldr	r0, [pc, #48]	@ (800dda8 <mem_init+0x94>)
 800dd76:	f009 fd65 	bl	8017844 <sys_mutex_new>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d006      	beq.n	800dd8e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dd80:	4b0a      	ldr	r3, [pc, #40]	@ (800ddac <mem_init+0x98>)
 800dd82:	f240 221f 	movw	r2, #543	@ 0x21f
 800dd86:	490a      	ldr	r1, [pc, #40]	@ (800ddb0 <mem_init+0x9c>)
 800dd88:	480a      	ldr	r0, [pc, #40]	@ (800ddb4 <mem_init+0xa0>)
 800dd8a:	f00a fbf1 	bl	8018570 <iprintf>
  }
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20008f6c 	.word	0x20008f6c
 800dd9c:	200095c0 	.word	0x200095c0
 800dda0:	200095c4 	.word	0x200095c4
 800dda4:	200095cc 	.word	0x200095cc
 800dda8:	200095c8 	.word	0x200095c8
 800ddac:	0801a780 	.word	0x0801a780
 800ddb0:	0801a854 	.word	0x0801a854
 800ddb4:	0801a7c8 	.word	0x0801a7c8

0800ddb8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff fef3 	bl	800dbac <mem_to_ptr>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff feda 	bl	800db88 <ptr_to_mem>
 800ddd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	885b      	ldrh	r3, [r3, #2]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7ff fed4 	bl	800db88 <ptr_to_mem>
 800dde0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ddea:	d818      	bhi.n	800de1e <mem_link_valid+0x66>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	885b      	ldrh	r3, [r3, #2]
 800ddf0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ddf4:	d813      	bhi.n	800de1e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ddfa:	8afa      	ldrh	r2, [r7, #22]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d004      	beq.n	800de0a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	8afa      	ldrh	r2, [r7, #22]
 800de06:	429a      	cmp	r2, r3
 800de08:	d109      	bne.n	800de1e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800de0a:	4b08      	ldr	r3, [pc, #32]	@ (800de2c <mem_link_valid+0x74>)
 800de0c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	429a      	cmp	r2, r3
 800de12:	d006      	beq.n	800de22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	885b      	ldrh	r3, [r3, #2]
 800de18:	8afa      	ldrh	r2, [r7, #22]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d001      	beq.n	800de22 <mem_link_valid+0x6a>
    return 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	e000      	b.n	800de24 <mem_link_valid+0x6c>
  }
  return 1;
 800de22:	2301      	movs	r3, #1
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	200095c4 	.word	0x200095c4

0800de30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d070      	beq.n	800df20 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f003 0303 	and.w	r3, r3, #3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00d      	beq.n	800de64 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800de48:	4b37      	ldr	r3, [pc, #220]	@ (800df28 <mem_free+0xf8>)
 800de4a:	f240 2273 	movw	r2, #627	@ 0x273
 800de4e:	4937      	ldr	r1, [pc, #220]	@ (800df2c <mem_free+0xfc>)
 800de50:	4837      	ldr	r0, [pc, #220]	@ (800df30 <mem_free+0x100>)
 800de52:	f00a fb8d 	bl	8018570 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de56:	f009 fd53 	bl	8017900 <sys_arch_protect>
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f009 fd5d 	bl	801791c <sys_arch_unprotect>
    return;
 800de62:	e05e      	b.n	800df22 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3b08      	subs	r3, #8
 800de68:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800de6a:	4b32      	ldr	r3, [pc, #200]	@ (800df34 <mem_free+0x104>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69fa      	ldr	r2, [r7, #28]
 800de70:	429a      	cmp	r2, r3
 800de72:	d306      	bcc.n	800de82 <mem_free+0x52>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f103 020c 	add.w	r2, r3, #12
 800de7a:	4b2f      	ldr	r3, [pc, #188]	@ (800df38 <mem_free+0x108>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d90d      	bls.n	800de9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800de82:	4b29      	ldr	r3, [pc, #164]	@ (800df28 <mem_free+0xf8>)
 800de84:	f240 227f 	movw	r2, #639	@ 0x27f
 800de88:	492c      	ldr	r1, [pc, #176]	@ (800df3c <mem_free+0x10c>)
 800de8a:	4829      	ldr	r0, [pc, #164]	@ (800df30 <mem_free+0x100>)
 800de8c:	f00a fb70 	bl	8018570 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de90:	f009 fd36 	bl	8017900 <sys_arch_protect>
 800de94:	6138      	str	r0, [r7, #16]
 800de96:	6938      	ldr	r0, [r7, #16]
 800de98:	f009 fd40 	bl	801791c <sys_arch_unprotect>
    return;
 800de9c:	e041      	b.n	800df22 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de9e:	4828      	ldr	r0, [pc, #160]	@ (800df40 <mem_free+0x110>)
 800dea0:	f009 fcec 	bl	801787c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	791b      	ldrb	r3, [r3, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d110      	bne.n	800dece <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800deac:	4b1e      	ldr	r3, [pc, #120]	@ (800df28 <mem_free+0xf8>)
 800deae:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800deb2:	4924      	ldr	r1, [pc, #144]	@ (800df44 <mem_free+0x114>)
 800deb4:	481e      	ldr	r0, [pc, #120]	@ (800df30 <mem_free+0x100>)
 800deb6:	f00a fb5b 	bl	8018570 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800deba:	4821      	ldr	r0, [pc, #132]	@ (800df40 <mem_free+0x110>)
 800debc:	f009 fced 	bl	801789a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dec0:	f009 fd1e 	bl	8017900 <sys_arch_protect>
 800dec4:	6178      	str	r0, [r7, #20]
 800dec6:	6978      	ldr	r0, [r7, #20]
 800dec8:	f009 fd28 	bl	801791c <sys_arch_unprotect>
    return;
 800decc:	e029      	b.n	800df22 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dece:	69f8      	ldr	r0, [r7, #28]
 800ded0:	f7ff ff72 	bl	800ddb8 <mem_link_valid>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d110      	bne.n	800defc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800deda:	4b13      	ldr	r3, [pc, #76]	@ (800df28 <mem_free+0xf8>)
 800dedc:	f240 2295 	movw	r2, #661	@ 0x295
 800dee0:	4919      	ldr	r1, [pc, #100]	@ (800df48 <mem_free+0x118>)
 800dee2:	4813      	ldr	r0, [pc, #76]	@ (800df30 <mem_free+0x100>)
 800dee4:	f00a fb44 	bl	8018570 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dee8:	4815      	ldr	r0, [pc, #84]	@ (800df40 <mem_free+0x110>)
 800deea:	f009 fcd6 	bl	801789a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800deee:	f009 fd07 	bl	8017900 <sys_arch_protect>
 800def2:	61b8      	str	r0, [r7, #24]
 800def4:	69b8      	ldr	r0, [r7, #24]
 800def6:	f009 fd11 	bl	801791c <sys_arch_unprotect>
    return;
 800defa:	e012      	b.n	800df22 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	2200      	movs	r2, #0
 800df00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800df02:	4b12      	ldr	r3, [pc, #72]	@ (800df4c <mem_free+0x11c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69fa      	ldr	r2, [r7, #28]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d202      	bcs.n	800df12 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800df0c:	4a0f      	ldr	r2, [pc, #60]	@ (800df4c <mem_free+0x11c>)
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800df12:	69f8      	ldr	r0, [r7, #28]
 800df14:	f7ff fe5c 	bl	800dbd0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800df18:	4809      	ldr	r0, [pc, #36]	@ (800df40 <mem_free+0x110>)
 800df1a:	f009 fcbe 	bl	801789a <sys_mutex_unlock>
 800df1e:	e000      	b.n	800df22 <mem_free+0xf2>
    return;
 800df20:	bf00      	nop
}
 800df22:	3720      	adds	r7, #32
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	0801a780 	.word	0x0801a780
 800df2c:	0801a870 	.word	0x0801a870
 800df30:	0801a7c8 	.word	0x0801a7c8
 800df34:	200095c0 	.word	0x200095c0
 800df38:	200095c4 	.word	0x200095c4
 800df3c:	0801a894 	.word	0x0801a894
 800df40:	200095c8 	.word	0x200095c8
 800df44:	0801a8b0 	.word	0x0801a8b0
 800df48:	0801a8d8 	.word	0x0801a8d8
 800df4c:	200095cc 	.word	0x200095cc

0800df50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b088      	sub	sp, #32
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800df5c:	887b      	ldrh	r3, [r7, #2]
 800df5e:	3303      	adds	r3, #3
 800df60:	b29b      	uxth	r3, r3
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800df68:	8bfb      	ldrh	r3, [r7, #30]
 800df6a:	2b0b      	cmp	r3, #11
 800df6c:	d801      	bhi.n	800df72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800df6e:	230c      	movs	r3, #12
 800df70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800df72:	8bfb      	ldrh	r3, [r7, #30]
 800df74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800df78:	d803      	bhi.n	800df82 <mem_trim+0x32>
 800df7a:	8bfa      	ldrh	r2, [r7, #30]
 800df7c:	887b      	ldrh	r3, [r7, #2]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d201      	bcs.n	800df86 <mem_trim+0x36>
    return NULL;
 800df82:	2300      	movs	r3, #0
 800df84:	e0d8      	b.n	800e138 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800df86:	4b6e      	ldr	r3, [pc, #440]	@ (800e140 <mem_trim+0x1f0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d304      	bcc.n	800df9a <mem_trim+0x4a>
 800df90:	4b6c      	ldr	r3, [pc, #432]	@ (800e144 <mem_trim+0x1f4>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	429a      	cmp	r2, r3
 800df98:	d306      	bcc.n	800dfa8 <mem_trim+0x58>
 800df9a:	4b6b      	ldr	r3, [pc, #428]	@ (800e148 <mem_trim+0x1f8>)
 800df9c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dfa0:	496a      	ldr	r1, [pc, #424]	@ (800e14c <mem_trim+0x1fc>)
 800dfa2:	486b      	ldr	r0, [pc, #428]	@ (800e150 <mem_trim+0x200>)
 800dfa4:	f00a fae4 	bl	8018570 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dfa8:	4b65      	ldr	r3, [pc, #404]	@ (800e140 <mem_trim+0x1f0>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d304      	bcc.n	800dfbc <mem_trim+0x6c>
 800dfb2:	4b64      	ldr	r3, [pc, #400]	@ (800e144 <mem_trim+0x1f4>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d307      	bcc.n	800dfcc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dfbc:	f009 fca0 	bl	8017900 <sys_arch_protect>
 800dfc0:	60b8      	str	r0, [r7, #8]
 800dfc2:	68b8      	ldr	r0, [r7, #8]
 800dfc4:	f009 fcaa 	bl	801791c <sys_arch_unprotect>
    return rmem;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	e0b5      	b.n	800e138 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3b08      	subs	r3, #8
 800dfd0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f7ff fdea 	bl	800dbac <mem_to_ptr>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	881a      	ldrh	r2, [r3, #0]
 800dfe0:	8afb      	ldrh	r3, [r7, #22]
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	3b08      	subs	r3, #8
 800dfe8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dfea:	8bfa      	ldrh	r2, [r7, #30]
 800dfec:	8abb      	ldrh	r3, [r7, #20]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d906      	bls.n	800e000 <mem_trim+0xb0>
 800dff2:	4b55      	ldr	r3, [pc, #340]	@ (800e148 <mem_trim+0x1f8>)
 800dff4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800dff8:	4956      	ldr	r1, [pc, #344]	@ (800e154 <mem_trim+0x204>)
 800dffa:	4855      	ldr	r0, [pc, #340]	@ (800e150 <mem_trim+0x200>)
 800dffc:	f00a fab8 	bl	8018570 <iprintf>
  if (newsize > size) {
 800e000:	8bfa      	ldrh	r2, [r7, #30]
 800e002:	8abb      	ldrh	r3, [r7, #20]
 800e004:	429a      	cmp	r2, r3
 800e006:	d901      	bls.n	800e00c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e008:	2300      	movs	r3, #0
 800e00a:	e095      	b.n	800e138 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e00c:	8bfa      	ldrh	r2, [r7, #30]
 800e00e:	8abb      	ldrh	r3, [r7, #20]
 800e010:	429a      	cmp	r2, r3
 800e012:	d101      	bne.n	800e018 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	e08f      	b.n	800e138 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e018:	484f      	ldr	r0, [pc, #316]	@ (800e158 <mem_trim+0x208>)
 800e01a:	f009 fc2f 	bl	801787c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff fdb0 	bl	800db88 <ptr_to_mem>
 800e028:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	791b      	ldrb	r3, [r3, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d13f      	bne.n	800e0b2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e03a:	d106      	bne.n	800e04a <mem_trim+0xfa>
 800e03c:	4b42      	ldr	r3, [pc, #264]	@ (800e148 <mem_trim+0x1f8>)
 800e03e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e042:	4946      	ldr	r1, [pc, #280]	@ (800e15c <mem_trim+0x20c>)
 800e044:	4842      	ldr	r0, [pc, #264]	@ (800e150 <mem_trim+0x200>)
 800e046:	f00a fa93 	bl	8018570 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e050:	8afa      	ldrh	r2, [r7, #22]
 800e052:	8bfb      	ldrh	r3, [r7, #30]
 800e054:	4413      	add	r3, r2
 800e056:	b29b      	uxth	r3, r3
 800e058:	3308      	adds	r3, #8
 800e05a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e05c:	4b40      	ldr	r3, [pc, #256]	@ (800e160 <mem_trim+0x210>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	429a      	cmp	r2, r3
 800e064:	d106      	bne.n	800e074 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e066:	89fb      	ldrh	r3, [r7, #14]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fd8d 	bl	800db88 <ptr_to_mem>
 800e06e:	4603      	mov	r3, r0
 800e070:	4a3b      	ldr	r2, [pc, #236]	@ (800e160 <mem_trim+0x210>)
 800e072:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e074:	89fb      	ldrh	r3, [r7, #14]
 800e076:	4618      	mov	r0, r3
 800e078:	f7ff fd86 	bl	800db88 <ptr_to_mem>
 800e07c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2200      	movs	r2, #0
 800e082:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	89ba      	ldrh	r2, [r7, #12]
 800e088:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	8afa      	ldrh	r2, [r7, #22]
 800e08e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	89fa      	ldrh	r2, [r7, #14]
 800e094:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e09e:	d047      	beq.n	800e130 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff fd6f 	bl	800db88 <ptr_to_mem>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	8053      	strh	r3, [r2, #2]
 800e0b0:	e03e      	b.n	800e130 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e0b2:	8bfb      	ldrh	r3, [r7, #30]
 800e0b4:	f103 0214 	add.w	r2, r3, #20
 800e0b8:	8abb      	ldrh	r3, [r7, #20]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d838      	bhi.n	800e130 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e0be:	8afa      	ldrh	r2, [r7, #22]
 800e0c0:	8bfb      	ldrh	r3, [r7, #30]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e0d2:	d106      	bne.n	800e0e2 <mem_trim+0x192>
 800e0d4:	4b1c      	ldr	r3, [pc, #112]	@ (800e148 <mem_trim+0x1f8>)
 800e0d6:	f240 3216 	movw	r2, #790	@ 0x316
 800e0da:	4920      	ldr	r1, [pc, #128]	@ (800e15c <mem_trim+0x20c>)
 800e0dc:	481c      	ldr	r0, [pc, #112]	@ (800e150 <mem_trim+0x200>)
 800e0de:	f00a fa47 	bl	8018570 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e0e2:	89fb      	ldrh	r3, [r7, #14]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7ff fd4f 	bl	800db88 <ptr_to_mem>
 800e0ea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800e160 <mem_trim+0x210>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d202      	bcs.n	800e0fc <mem_trim+0x1ac>
      lfree = mem2;
 800e0f6:	4a1a      	ldr	r2, [pc, #104]	@ (800e160 <mem_trim+0x210>)
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	2200      	movs	r2, #0
 800e100:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	881a      	ldrh	r2, [r3, #0]
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	8afa      	ldrh	r2, [r7, #22]
 800e10e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	89fa      	ldrh	r2, [r7, #14]
 800e114:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e11e:	d007      	beq.n	800e130 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	f7ff fd2f 	bl	800db88 <ptr_to_mem>
 800e12a:	4602      	mov	r2, r0
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e130:	4809      	ldr	r0, [pc, #36]	@ (800e158 <mem_trim+0x208>)
 800e132:	f009 fbb2 	bl	801789a <sys_mutex_unlock>
  return rmem;
 800e136:	687b      	ldr	r3, [r7, #4]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3720      	adds	r7, #32
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	200095c0 	.word	0x200095c0
 800e144:	200095c4 	.word	0x200095c4
 800e148:	0801a780 	.word	0x0801a780
 800e14c:	0801a90c 	.word	0x0801a90c
 800e150:	0801a7c8 	.word	0x0801a7c8
 800e154:	0801a924 	.word	0x0801a924
 800e158:	200095c8 	.word	0x200095c8
 800e15c:	0801a944 	.word	0x0801a944
 800e160:	200095cc 	.word	0x200095cc

0800e164 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d101      	bne.n	800e178 <mem_malloc+0x14>
    return NULL;
 800e174:	2300      	movs	r3, #0
 800e176:	e0e2      	b.n	800e33e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e178:	88fb      	ldrh	r3, [r7, #6]
 800e17a:	3303      	adds	r3, #3
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f023 0303 	bic.w	r3, r3, #3
 800e182:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e184:	8bbb      	ldrh	r3, [r7, #28]
 800e186:	2b0b      	cmp	r3, #11
 800e188:	d801      	bhi.n	800e18e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e18a:	230c      	movs	r3, #12
 800e18c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e18e:	8bbb      	ldrh	r3, [r7, #28]
 800e190:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e194:	d803      	bhi.n	800e19e <mem_malloc+0x3a>
 800e196:	8bba      	ldrh	r2, [r7, #28]
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d201      	bcs.n	800e1a2 <mem_malloc+0x3e>
    return NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e0cd      	b.n	800e33e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e1a2:	4869      	ldr	r0, [pc, #420]	@ (800e348 <mem_malloc+0x1e4>)
 800e1a4:	f009 fb6a 	bl	801787c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e1a8:	4b68      	ldr	r3, [pc, #416]	@ (800e34c <mem_malloc+0x1e8>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7ff fcfd 	bl	800dbac <mem_to_ptr>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	83fb      	strh	r3, [r7, #30]
 800e1b6:	e0b7      	b.n	800e328 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e1b8:	8bfb      	ldrh	r3, [r7, #30]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff fce4 	bl	800db88 <ptr_to_mem>
 800e1c0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	791b      	ldrb	r3, [r3, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f040 80a7 	bne.w	800e31a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	8bfb      	ldrh	r3, [r7, #30]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	f1a3 0208 	sub.w	r2, r3, #8
 800e1da:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	f0c0 809c 	bcc.w	800e31a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	8bfb      	ldrh	r3, [r7, #30]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	f1a3 0208 	sub.w	r2, r3, #8
 800e1f0:	8bbb      	ldrh	r3, [r7, #28]
 800e1f2:	3314      	adds	r3, #20
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d333      	bcc.n	800e260 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e1f8:	8bfa      	ldrh	r2, [r7, #30]
 800e1fa:	8bbb      	ldrh	r3, [r7, #28]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	3308      	adds	r3, #8
 800e202:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e204:	8a7b      	ldrh	r3, [r7, #18]
 800e206:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e20a:	d106      	bne.n	800e21a <mem_malloc+0xb6>
 800e20c:	4b50      	ldr	r3, [pc, #320]	@ (800e350 <mem_malloc+0x1ec>)
 800e20e:	f240 3287 	movw	r2, #903	@ 0x387
 800e212:	4950      	ldr	r1, [pc, #320]	@ (800e354 <mem_malloc+0x1f0>)
 800e214:	4850      	ldr	r0, [pc, #320]	@ (800e358 <mem_malloc+0x1f4>)
 800e216:	f00a f9ab 	bl	8018570 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e21a:	8a7b      	ldrh	r3, [r7, #18]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7ff fcb3 	bl	800db88 <ptr_to_mem>
 800e222:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	881a      	ldrh	r2, [r3, #0]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8bfa      	ldrh	r2, [r7, #30]
 800e236:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	8a7a      	ldrh	r2, [r7, #18]
 800e23c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	2201      	movs	r2, #1
 800e242:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e24c:	d00b      	beq.n	800e266 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f7ff fc98 	bl	800db88 <ptr_to_mem>
 800e258:	4602      	mov	r2, r0
 800e25a:	8a7b      	ldrh	r3, [r7, #18]
 800e25c:	8053      	strh	r3, [r2, #2]
 800e25e:	e002      	b.n	800e266 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2201      	movs	r2, #1
 800e264:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e266:	4b39      	ldr	r3, [pc, #228]	@ (800e34c <mem_malloc+0x1e8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d127      	bne.n	800e2c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e270:	4b36      	ldr	r3, [pc, #216]	@ (800e34c <mem_malloc+0x1e8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e276:	e005      	b.n	800e284 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7ff fc83 	bl	800db88 <ptr_to_mem>
 800e282:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	791b      	ldrb	r3, [r3, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <mem_malloc+0x132>
 800e28c:	4b33      	ldr	r3, [pc, #204]	@ (800e35c <mem_malloc+0x1f8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	429a      	cmp	r2, r3
 800e294:	d1f0      	bne.n	800e278 <mem_malloc+0x114>
          }
          lfree = cur;
 800e296:	4a2d      	ldr	r2, [pc, #180]	@ (800e34c <mem_malloc+0x1e8>)
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e29c:	4b2b      	ldr	r3, [pc, #172]	@ (800e34c <mem_malloc+0x1e8>)
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e35c <mem_malloc+0x1f8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d00b      	beq.n	800e2c0 <mem_malloc+0x15c>
 800e2a8:	4b28      	ldr	r3, [pc, #160]	@ (800e34c <mem_malloc+0x1e8>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	791b      	ldrb	r3, [r3, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d006      	beq.n	800e2c0 <mem_malloc+0x15c>
 800e2b2:	4b27      	ldr	r3, [pc, #156]	@ (800e350 <mem_malloc+0x1ec>)
 800e2b4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e2b8:	4929      	ldr	r1, [pc, #164]	@ (800e360 <mem_malloc+0x1fc>)
 800e2ba:	4827      	ldr	r0, [pc, #156]	@ (800e358 <mem_malloc+0x1f4>)
 800e2bc:	f00a f958 	bl	8018570 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e2c0:	4821      	ldr	r0, [pc, #132]	@ (800e348 <mem_malloc+0x1e4>)
 800e2c2:	f009 faea 	bl	801789a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e2c6:	8bba      	ldrh	r2, [r7, #28]
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	4a23      	ldr	r2, [pc, #140]	@ (800e35c <mem_malloc+0x1f8>)
 800e2d0:	6812      	ldr	r2, [r2, #0]
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d906      	bls.n	800e2e4 <mem_malloc+0x180>
 800e2d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e350 <mem_malloc+0x1ec>)
 800e2d8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e2dc:	4921      	ldr	r1, [pc, #132]	@ (800e364 <mem_malloc+0x200>)
 800e2de:	481e      	ldr	r0, [pc, #120]	@ (800e358 <mem_malloc+0x1f4>)
 800e2e0:	f00a f946 	bl	8018570 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	f003 0303 	and.w	r3, r3, #3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d006      	beq.n	800e2fc <mem_malloc+0x198>
 800e2ee:	4b18      	ldr	r3, [pc, #96]	@ (800e350 <mem_malloc+0x1ec>)
 800e2f0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e2f4:	491c      	ldr	r1, [pc, #112]	@ (800e368 <mem_malloc+0x204>)
 800e2f6:	4818      	ldr	r0, [pc, #96]	@ (800e358 <mem_malloc+0x1f4>)
 800e2f8:	f00a f93a 	bl	8018570 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f003 0303 	and.w	r3, r3, #3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d006      	beq.n	800e314 <mem_malloc+0x1b0>
 800e306:	4b12      	ldr	r3, [pc, #72]	@ (800e350 <mem_malloc+0x1ec>)
 800e308:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e30c:	4917      	ldr	r1, [pc, #92]	@ (800e36c <mem_malloc+0x208>)
 800e30e:	4812      	ldr	r0, [pc, #72]	@ (800e358 <mem_malloc+0x1f4>)
 800e310:	f00a f92e 	bl	8018570 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	3308      	adds	r3, #8
 800e318:	e011      	b.n	800e33e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e31a:	8bfb      	ldrh	r3, [r7, #30]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff fc33 	bl	800db88 <ptr_to_mem>
 800e322:	4603      	mov	r3, r0
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e328:	8bfa      	ldrh	r2, [r7, #30]
 800e32a:	8bbb      	ldrh	r3, [r7, #28]
 800e32c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800e330:	429a      	cmp	r2, r3
 800e332:	f4ff af41 	bcc.w	800e1b8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e336:	4804      	ldr	r0, [pc, #16]	@ (800e348 <mem_malloc+0x1e4>)
 800e338:	f009 faaf 	bl	801789a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3720      	adds	r7, #32
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	200095c8 	.word	0x200095c8
 800e34c:	200095cc 	.word	0x200095cc
 800e350:	0801a780 	.word	0x0801a780
 800e354:	0801a944 	.word	0x0801a944
 800e358:	0801a7c8 	.word	0x0801a7c8
 800e35c:	200095c4 	.word	0x200095c4
 800e360:	0801a958 	.word	0x0801a958
 800e364:	0801a974 	.word	0x0801a974
 800e368:	0801a9a4 	.word	0x0801a9a4
 800e36c:	0801a9d4 	.word	0x0801a9d4

0800e370 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	3303      	adds	r3, #3
 800e386:	f023 0303 	bic.w	r3, r3, #3
 800e38a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e38c:	2300      	movs	r3, #0
 800e38e:	60fb      	str	r3, [r7, #12]
 800e390:	e011      	b.n	800e3b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	885b      	ldrh	r3, [r3, #2]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	dbe7      	blt.n	800e392 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e3c2:	bf00      	nop
 800e3c4:	bf00      	nop
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	80fb      	strh	r3, [r7, #6]
 800e3da:	e009      	b.n	800e3f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e3dc:	88fb      	ldrh	r3, [r7, #6]
 800e3de:	4a08      	ldr	r2, [pc, #32]	@ (800e400 <memp_init+0x30>)
 800e3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff ffc3 	bl	800e370 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3ea:	88fb      	ldrh	r3, [r7, #6]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	80fb      	strh	r3, [r7, #6]
 800e3f0:	88fb      	ldrh	r3, [r7, #6]
 800e3f2:	2b0c      	cmp	r3, #12
 800e3f4:	d9f2      	bls.n	800e3dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e3f6:	bf00      	nop
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	0801d230 	.word	0x0801d230

0800e404 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e40c:	f009 fa78 	bl	8017900 <sys_arch_protect>
 800e410:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d015      	beq.n	800e44c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <do_memp_malloc_pool+0x3e>
 800e434:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <do_memp_malloc_pool+0x58>)
 800e436:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e43a:	4909      	ldr	r1, [pc, #36]	@ (800e460 <do_memp_malloc_pool+0x5c>)
 800e43c:	4809      	ldr	r0, [pc, #36]	@ (800e464 <do_memp_malloc_pool+0x60>)
 800e43e:	f00a f897 	bl	8018570 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f009 fa6a 	bl	801791c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	e003      	b.n	800e454 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f009 fa65 	bl	801791c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	0801a9f8 	.word	0x0801a9f8
 800e460:	0801aa28 	.word	0x0801aa28
 800e464:	0801aa4c 	.word	0x0801aa4c

0800e468 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <memp_malloc_pool+0x1c>
 800e476:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a0 <memp_malloc_pool+0x38>)
 800e478:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e47c:	4909      	ldr	r1, [pc, #36]	@ (800e4a4 <memp_malloc_pool+0x3c>)
 800e47e:	480a      	ldr	r0, [pc, #40]	@ (800e4a8 <memp_malloc_pool+0x40>)
 800e480:	f00a f876 	bl	8018570 <iprintf>
  if (desc == NULL) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d101      	bne.n	800e48e <memp_malloc_pool+0x26>
    return NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	e003      	b.n	800e496 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff ffb8 	bl	800e404 <do_memp_malloc_pool>
 800e494:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	0801a9f8 	.word	0x0801a9f8
 800e4a4:	0801aa74 	.word	0x0801aa74
 800e4a8:	0801aa4c 	.word	0x0801aa4c

0800e4ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	2b0c      	cmp	r3, #12
 800e4ba:	d908      	bls.n	800e4ce <memp_malloc+0x22>
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <memp_malloc+0x3c>)
 800e4be:	f240 1257 	movw	r2, #343	@ 0x157
 800e4c2:	490a      	ldr	r1, [pc, #40]	@ (800e4ec <memp_malloc+0x40>)
 800e4c4:	480a      	ldr	r0, [pc, #40]	@ (800e4f0 <memp_malloc+0x44>)
 800e4c6:	f00a f853 	bl	8018570 <iprintf>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e008      	b.n	800e4e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	4a08      	ldr	r2, [pc, #32]	@ (800e4f4 <memp_malloc+0x48>)
 800e4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7ff ff94 	bl	800e404 <do_memp_malloc_pool>
 800e4dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e4de:	68fb      	ldr	r3, [r7, #12]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0801a9f8 	.word	0x0801a9f8
 800e4ec:	0801aa88 	.word	0x0801aa88
 800e4f0:	0801aa4c 	.word	0x0801aa4c
 800e4f4:	0801d230 	.word	0x0801d230

0800e4f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	f003 0303 	and.w	r3, r3, #3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d006      	beq.n	800e51a <do_memp_free_pool+0x22>
 800e50c:	4b0d      	ldr	r3, [pc, #52]	@ (800e544 <do_memp_free_pool+0x4c>)
 800e50e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e512:	490d      	ldr	r1, [pc, #52]	@ (800e548 <do_memp_free_pool+0x50>)
 800e514:	480d      	ldr	r0, [pc, #52]	@ (800e54c <do_memp_free_pool+0x54>)
 800e516:	f00a f82b 	bl	8018570 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e51e:	f009 f9ef 	bl	8017900 <sys_arch_protect>
 800e522:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e536:	68b8      	ldr	r0, [r7, #8]
 800e538:	f009 f9f0 	bl	801791c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	0801a9f8 	.word	0x0801a9f8
 800e548:	0801aaa8 	.word	0x0801aaa8
 800e54c:	0801aa4c 	.word	0x0801aa4c

0800e550 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d106      	bne.n	800e56e <memp_free_pool+0x1e>
 800e560:	4b0a      	ldr	r3, [pc, #40]	@ (800e58c <memp_free_pool+0x3c>)
 800e562:	f240 1295 	movw	r2, #405	@ 0x195
 800e566:	490a      	ldr	r1, [pc, #40]	@ (800e590 <memp_free_pool+0x40>)
 800e568:	480a      	ldr	r0, [pc, #40]	@ (800e594 <memp_free_pool+0x44>)
 800e56a:	f00a f801 	bl	8018570 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <memp_free_pool+0x34>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d004      	beq.n	800e584 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7ff ffbb 	bl	800e4f8 <do_memp_free_pool>
 800e582:	e000      	b.n	800e586 <memp_free_pool+0x36>
    return;
 800e584:	bf00      	nop
}
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	0801a9f8 	.word	0x0801a9f8
 800e590:	0801aa74 	.word	0x0801aa74
 800e594:	0801aa4c 	.word	0x0801aa4c

0800e598 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e5a4:	79fb      	ldrb	r3, [r7, #7]
 800e5a6:	2b0c      	cmp	r3, #12
 800e5a8:	d907      	bls.n	800e5ba <memp_free+0x22>
 800e5aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e5dc <memp_free+0x44>)
 800e5ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e5b0:	490b      	ldr	r1, [pc, #44]	@ (800e5e0 <memp_free+0x48>)
 800e5b2:	480c      	ldr	r0, [pc, #48]	@ (800e5e4 <memp_free+0x4c>)
 800e5b4:	f009 ffdc 	bl	8018570 <iprintf>
 800e5b8:	e00c      	b.n	800e5d4 <memp_free+0x3c>

  if (mem == NULL) {
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d008      	beq.n	800e5d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	4a09      	ldr	r2, [pc, #36]	@ (800e5e8 <memp_free+0x50>)
 800e5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff ff94 	bl	800e4f8 <do_memp_free_pool>
 800e5d0:	e000      	b.n	800e5d4 <memp_free+0x3c>
    return;
 800e5d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	0801a9f8 	.word	0x0801a9f8
 800e5e0:	0801aac8 	.word	0x0801aac8
 800e5e4:	0801aa4c 	.word	0x0801aa4c
 800e5e8:	0801d230 	.word	0x0801d230

0800e5ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e5f0:	bf00      	nop
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
	...

0800e5fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d108      	bne.n	800e622 <netif_add+0x26>
 800e610:	4b57      	ldr	r3, [pc, #348]	@ (800e770 <netif_add+0x174>)
 800e612:	f240 1227 	movw	r2, #295	@ 0x127
 800e616:	4957      	ldr	r1, [pc, #348]	@ (800e774 <netif_add+0x178>)
 800e618:	4857      	ldr	r0, [pc, #348]	@ (800e778 <netif_add+0x17c>)
 800e61a:	f009 ffa9 	bl	8018570 <iprintf>
 800e61e:	2300      	movs	r3, #0
 800e620:	e0a2      	b.n	800e768 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d108      	bne.n	800e63a <netif_add+0x3e>
 800e628:	4b51      	ldr	r3, [pc, #324]	@ (800e770 <netif_add+0x174>)
 800e62a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e62e:	4953      	ldr	r1, [pc, #332]	@ (800e77c <netif_add+0x180>)
 800e630:	4851      	ldr	r0, [pc, #324]	@ (800e778 <netif_add+0x17c>)
 800e632:	f009 ff9d 	bl	8018570 <iprintf>
 800e636:	2300      	movs	r3, #0
 800e638:	e096      	b.n	800e768 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e640:	4b4f      	ldr	r3, [pc, #316]	@ (800e780 <netif_add+0x184>)
 800e642:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e64a:	4b4d      	ldr	r3, [pc, #308]	@ (800e780 <netif_add+0x184>)
 800e64c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e654:	4b4a      	ldr	r3, [pc, #296]	@ (800e780 <netif_add+0x184>)
 800e656:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4a45      	ldr	r2, [pc, #276]	@ (800e784 <netif_add+0x188>)
 800e66e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6a3a      	ldr	r2, [r7, #32]
 800e688:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e68a:	4b3f      	ldr	r3, [pc, #252]	@ (800e788 <netif_add+0x18c>)
 800e68c:	781a      	ldrb	r2, [r3, #0]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e698:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f000 f913 	bl	800e8cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	4798      	blx	r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <netif_add+0xba>
    return NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e058      	b.n	800e768 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6bc:	2bff      	cmp	r3, #255	@ 0xff
 800e6be:	d103      	bne.n	800e6c8 <netif_add+0xcc>
        netif->num = 0;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e6cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e78c <netif_add+0x190>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	617b      	str	r3, [r7, #20]
 800e6d2:	e02b      	b.n	800e72c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d106      	bne.n	800e6ea <netif_add+0xee>
 800e6dc:	4b24      	ldr	r3, [pc, #144]	@ (800e770 <netif_add+0x174>)
 800e6de:	f240 128b 	movw	r2, #395	@ 0x18b
 800e6e2:	492b      	ldr	r1, [pc, #172]	@ (800e790 <netif_add+0x194>)
 800e6e4:	4824      	ldr	r0, [pc, #144]	@ (800e778 <netif_add+0x17c>)
 800e6e6:	f009 ff43 	bl	8018570 <iprintf>
        num_netifs++;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2bff      	cmp	r3, #255	@ 0xff
 800e6f4:	dd06      	ble.n	800e704 <netif_add+0x108>
 800e6f6:	4b1e      	ldr	r3, [pc, #120]	@ (800e770 <netif_add+0x174>)
 800e6f8:	f240 128d 	movw	r2, #397	@ 0x18d
 800e6fc:	4925      	ldr	r1, [pc, #148]	@ (800e794 <netif_add+0x198>)
 800e6fe:	481e      	ldr	r0, [pc, #120]	@ (800e778 <netif_add+0x17c>)
 800e700:	f009 ff36 	bl	8018570 <iprintf>
        if (netif2->num == netif->num) {
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e710:	429a      	cmp	r2, r3
 800e712:	d108      	bne.n	800e726 <netif_add+0x12a>
          netif->num++;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e71a:	3301      	adds	r3, #1
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e724:	e005      	b.n	800e732 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1d0      	bne.n	800e6d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1be      	bne.n	800e6b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e73e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e740:	d103      	bne.n	800e74a <netif_add+0x14e>
    netif_num = 0;
 800e742:	4b11      	ldr	r3, [pc, #68]	@ (800e788 <netif_add+0x18c>)
 800e744:	2200      	movs	r2, #0
 800e746:	701a      	strb	r2, [r3, #0]
 800e748:	e006      	b.n	800e758 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e750:	3301      	adds	r3, #1
 800e752:	b2da      	uxtb	r2, r3
 800e754:	4b0c      	ldr	r3, [pc, #48]	@ (800e788 <netif_add+0x18c>)
 800e756:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e758:	4b0c      	ldr	r3, [pc, #48]	@ (800e78c <netif_add+0x190>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e760:	4a0a      	ldr	r2, [pc, #40]	@ (800e78c <netif_add+0x190>)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e766:	68fb      	ldr	r3, [r7, #12]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3718      	adds	r7, #24
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	0801aae4 	.word	0x0801aae4
 800e774:	0801ab78 	.word	0x0801ab78
 800e778:	0801ab34 	.word	0x0801ab34
 800e77c:	0801ab94 	.word	0x0801ab94
 800e780:	0801d2a4 	.word	0x0801d2a4
 800e784:	0800eb43 	.word	0x0800eb43
 800e788:	2000c6a4 	.word	0x2000c6a4
 800e78c:	2000c69c 	.word	0x2000c69c
 800e790:	0801abb8 	.word	0x0801abb8
 800e794:	0801abcc 	.word	0x0801abcc

0800e798 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f002 fb4d 	bl	8010e44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f006 fc5b 	bl	8015068 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e7b2:	bf00      	nop
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
	...

0800e7bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d106      	bne.n	800e7dc <netif_do_set_ipaddr+0x20>
 800e7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e844 <netif_do_set_ipaddr+0x88>)
 800e7d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e7d4:	491c      	ldr	r1, [pc, #112]	@ (800e848 <netif_do_set_ipaddr+0x8c>)
 800e7d6:	481d      	ldr	r0, [pc, #116]	@ (800e84c <netif_do_set_ipaddr+0x90>)
 800e7d8:	f009 feca 	bl	8018570 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d106      	bne.n	800e7f0 <netif_do_set_ipaddr+0x34>
 800e7e2:	4b18      	ldr	r3, [pc, #96]	@ (800e844 <netif_do_set_ipaddr+0x88>)
 800e7e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e7e8:	4917      	ldr	r1, [pc, #92]	@ (800e848 <netif_do_set_ipaddr+0x8c>)
 800e7ea:	4818      	ldr	r0, [pc, #96]	@ (800e84c <netif_do_set_ipaddr+0x90>)
 800e7ec:	f009 fec0 	bl	8018570 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d01c      	beq.n	800e838 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3304      	adds	r3, #4
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e80e:	f107 0314 	add.w	r3, r7, #20
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7ff ffbf 	bl	800e798 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <netif_do_set_ipaddr+0x6a>
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	e000      	b.n	800e828 <netif_do_set_ipaddr+0x6c>
 800e826:	2300      	movs	r3, #0
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e82c:	2101      	movs	r1, #1
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f000 f8d2 	bl	800e9d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e834:	2301      	movs	r3, #1
 800e836:	e000      	b.n	800e83a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	0801aae4 	.word	0x0801aae4
 800e848:	0801abfc 	.word	0x0801abfc
 800e84c:	0801ab34 	.word	0x0801ab34

0800e850 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	3308      	adds	r3, #8
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d00a      	beq.n	800e880 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <netif_do_set_netmask+0x26>
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	e000      	b.n	800e878 <netif_do_set_netmask+0x28>
 800e876:	2300      	movs	r3, #0
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e87c:	2301      	movs	r3, #1
 800e87e:	e000      	b.n	800e882 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	3714      	adds	r7, #20
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e88e:	b480      	push	{r7}
 800e890:	b085      	sub	sp, #20
 800e892:	af00      	add	r7, sp, #0
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	60b9      	str	r1, [r7, #8]
 800e898:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	330c      	adds	r3, #12
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d00a      	beq.n	800e8be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <netif_do_set_gw+0x26>
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	e000      	b.n	800e8b6 <netif_do_set_gw+0x28>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e000      	b.n	800e8c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e8e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e95c <netif_set_addr+0x90>)
 800e8ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e8f2:	4b1a      	ldr	r3, [pc, #104]	@ (800e95c <netif_set_addr+0x90>)
 800e8f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e8fc:	4b17      	ldr	r3, [pc, #92]	@ (800e95c <netif_set_addr+0x90>)
 800e8fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d003      	beq.n	800e90e <netif_set_addr+0x42>
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <netif_set_addr+0x46>
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <netif_set_addr+0x48>
 800e912:	2300      	movs	r3, #0
 800e914:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d006      	beq.n	800e92a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e91c:	f107 0310 	add.w	r3, r7, #16
 800e920:	461a      	mov	r2, r3
 800e922:	68b9      	ldr	r1, [r7, #8]
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7ff ff49 	bl	800e7bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e92a:	69fa      	ldr	r2, [r7, #28]
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f7ff ff8e 	bl	800e850 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e934:	69ba      	ldr	r2, [r7, #24]
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7ff ffa8 	bl	800e88e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d106      	bne.n	800e952 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e944:	f107 0310 	add.w	r3, r7, #16
 800e948:	461a      	mov	r2, r3
 800e94a:	68b9      	ldr	r1, [r7, #8]
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7ff ff35 	bl	800e7bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e952:	bf00      	nop
 800e954:	3720      	adds	r7, #32
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	0801d2a4 	.word	0x0801d2a4

0800e960 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e968:	4a04      	ldr	r2, [pc, #16]	@ (800e97c <netif_set_default+0x1c>)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e96e:	bf00      	nop
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	2000c6a0 	.word	0x2000c6a0

0800e980 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d107      	bne.n	800e99e <netif_set_up+0x1e>
 800e98e:	4b0f      	ldr	r3, [pc, #60]	@ (800e9cc <netif_set_up+0x4c>)
 800e990:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e994:	490e      	ldr	r1, [pc, #56]	@ (800e9d0 <netif_set_up+0x50>)
 800e996:	480f      	ldr	r0, [pc, #60]	@ (800e9d4 <netif_set_up+0x54>)
 800e998:	f009 fdea 	bl	8018570 <iprintf>
 800e99c:	e013      	b.n	800e9c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9a4:	f003 0301 	and.w	r3, r3, #1
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10c      	bne.n	800e9c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9b2:	f043 0301 	orr.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e9be:	2103      	movs	r1, #3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f809 	bl	800e9d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	0801aae4 	.word	0x0801aae4
 800e9d0:	0801ac6c 	.word	0x0801ac6c
 800e9d4:	0801ab34 	.word	0x0801ab34

0800e9d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <netif_issue_reports+0x20>
 800e9ea:	4b18      	ldr	r3, [pc, #96]	@ (800ea4c <netif_issue_reports+0x74>)
 800e9ec:	f240 326d 	movw	r2, #877	@ 0x36d
 800e9f0:	4917      	ldr	r1, [pc, #92]	@ (800ea50 <netif_issue_reports+0x78>)
 800e9f2:	4818      	ldr	r0, [pc, #96]	@ (800ea54 <netif_issue_reports+0x7c>)
 800e9f4:	f009 fdbc 	bl	8018570 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9fe:	f003 0304 	and.w	r3, r3, #4
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d01e      	beq.n	800ea44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d017      	beq.n	800ea44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ea14:	78fb      	ldrb	r3, [r7, #3]
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d013      	beq.n	800ea46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3304      	adds	r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00e      	beq.n	800ea46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea2e:	f003 0308 	and.w	r3, r3, #8
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d007      	beq.n	800ea46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3304      	adds	r3, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f007 fa4d 	bl	8015edc <etharp_request>
 800ea42:	e000      	b.n	800ea46 <netif_issue_reports+0x6e>
    return;
 800ea44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	0801aae4 	.word	0x0801aae4
 800ea50:	0801ac88 	.word	0x0801ac88
 800ea54:	0801ab34 	.word	0x0801ab34

0800ea58 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d107      	bne.n	800ea76 <netif_set_link_up+0x1e>
 800ea66:	4b13      	ldr	r3, [pc, #76]	@ (800eab4 <netif_set_link_up+0x5c>)
 800ea68:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ea6c:	4912      	ldr	r1, [pc, #72]	@ (800eab8 <netif_set_link_up+0x60>)
 800ea6e:	4813      	ldr	r0, [pc, #76]	@ (800eabc <netif_set_link_up+0x64>)
 800ea70:	f009 fd7e 	bl	8018570 <iprintf>
 800ea74:	e01b      	b.n	800eaae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d114      	bne.n	800eaae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea8a:	f043 0304 	orr.w	r3, r3, #4
 800ea8e:	b2da      	uxtb	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea96:	2103      	movs	r1, #3
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff ff9d 	bl	800e9d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	69db      	ldr	r3, [r3, #28]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d003      	beq.n	800eaae <netif_set_link_up+0x56>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	69db      	ldr	r3, [r3, #28]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	0801aae4 	.word	0x0801aae4
 800eab8:	0801accc 	.word	0x0801accc
 800eabc:	0801ab34 	.word	0x0801ab34

0800eac0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d107      	bne.n	800eade <netif_set_link_down+0x1e>
 800eace:	4b11      	ldr	r3, [pc, #68]	@ (800eb14 <netif_set_link_down+0x54>)
 800ead0:	f240 4206 	movw	r2, #1030	@ 0x406
 800ead4:	4910      	ldr	r1, [pc, #64]	@ (800eb18 <netif_set_link_down+0x58>)
 800ead6:	4811      	ldr	r0, [pc, #68]	@ (800eb1c <netif_set_link_down+0x5c>)
 800ead8:	f009 fd4a 	bl	8018570 <iprintf>
 800eadc:	e017      	b.n	800eb0e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eae4:	f003 0304 	and.w	r3, r3, #4
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d010      	beq.n	800eb0e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eaf2:	f023 0304 	bic.w	r3, r3, #4
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	69db      	ldr	r3, [r3, #28]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <netif_set_link_down+0x4e>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	0801aae4 	.word	0x0801aae4
 800eb18:	0801acf0 	.word	0x0801acf0
 800eb1c:	0801ab34 	.word	0x0801ab34

0800eb20 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	61da      	str	r2, [r3, #28]
  }
}
 800eb36:	bf00      	nop
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eb42:	b480      	push	{r7}
 800eb44:	b085      	sub	sp, #20
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	60f8      	str	r0, [r7, #12]
 800eb4a:	60b9      	str	r1, [r7, #8]
 800eb4c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eb4e:	f06f 030b 	mvn.w	r3, #11
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3714      	adds	r7, #20
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
	...

0800eb60 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eb6a:	79fb      	ldrb	r3, [r7, #7]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d013      	beq.n	800eb98 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eb70:	4b0d      	ldr	r3, [pc, #52]	@ (800eba8 <netif_get_by_index+0x48>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	e00c      	b.n	800eb92 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb7e:	3301      	adds	r3, #1
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	79fa      	ldrb	r2, [r7, #7]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d101      	bne.n	800eb8c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	e006      	b.n	800eb9a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1ef      	bne.n	800eb78 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	2000c69c 	.word	0x2000c69c

0800ebac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ebb2:	f008 fea5 	bl	8017900 <sys_arch_protect>
 800ebb6:	6038      	str	r0, [r7, #0]
 800ebb8:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <pbuf_free_ooseq+0x44>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	701a      	strb	r2, [r3, #0]
 800ebbe:	6838      	ldr	r0, [r7, #0]
 800ebc0:	f008 feac 	bl	801791c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebc4:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf4 <pbuf_free_ooseq+0x48>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	607b      	str	r3, [r7, #4]
 800ebca:	e00a      	b.n	800ebe2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d003      	beq.n	800ebdc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f002 f973 	bl	8010ec0 <tcp_free_ooseq>
      return;
 800ebda:	e005      	b.n	800ebe8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	607b      	str	r3, [r7, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d1f1      	bne.n	800ebcc <pbuf_free_ooseq+0x20>
    }
  }
}
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	2000c6a5 	.word	0x2000c6a5
 800ebf4:	2000c6b4 	.word	0x2000c6b4

0800ebf8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ec00:	f7ff ffd4 	bl	800ebac <pbuf_free_ooseq>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ec12:	f008 fe75 	bl	8017900 <sys_arch_protect>
 800ec16:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ec18:	4b0f      	ldr	r3, [pc, #60]	@ (800ec58 <pbuf_pool_is_empty+0x4c>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec58 <pbuf_pool_is_empty+0x4c>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f008 fe79 	bl	801791c <sys_arch_unprotect>

  if (!queued) {
 800ec2a:	78fb      	ldrb	r3, [r7, #3]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10f      	bne.n	800ec50 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ec30:	2100      	movs	r1, #0
 800ec32:	480a      	ldr	r0, [pc, #40]	@ (800ec5c <pbuf_pool_is_empty+0x50>)
 800ec34:	f7fe fed8 	bl	800d9e8 <tcpip_try_callback>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d008      	beq.n	800ec50 <pbuf_pool_is_empty+0x44>
 800ec3e:	f008 fe5f 	bl	8017900 <sys_arch_protect>
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	4b04      	ldr	r3, [pc, #16]	@ (800ec58 <pbuf_pool_is_empty+0x4c>)
 800ec46:	2200      	movs	r2, #0
 800ec48:	701a      	strb	r2, [r3, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f008 fe66 	bl	801791c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	2000c6a5 	.word	0x2000c6a5
 800ec5c:	0800ebf9 	.word	0x0800ebf9

0800ec60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	460b      	mov	r3, r1
 800ec70:	80fb      	strh	r3, [r7, #6]
 800ec72:	4613      	mov	r3, r2
 800ec74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	88fa      	ldrh	r2, [r7, #6]
 800ec86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	88ba      	ldrh	r2, [r7, #4]
 800ec8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec8e:	8b3b      	ldrh	r3, [r7, #24]
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	7f3a      	ldrb	r2, [r7, #28]
 800ec9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	73da      	strb	r2, [r3, #15]
}
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08c      	sub	sp, #48	@ 0x30
 800ecb8:	af02      	add	r7, sp, #8
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71fb      	strb	r3, [r7, #7]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	80bb      	strh	r3, [r7, #4]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ecca:	887b      	ldrh	r3, [r7, #2]
 800eccc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ecd0:	d07f      	beq.n	800edd2 <pbuf_alloc+0x11e>
 800ecd2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ecd6:	f300 80c8 	bgt.w	800ee6a <pbuf_alloc+0x1b6>
 800ecda:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ecde:	d010      	beq.n	800ed02 <pbuf_alloc+0x4e>
 800ece0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ece4:	f300 80c1 	bgt.w	800ee6a <pbuf_alloc+0x1b6>
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d002      	beq.n	800ecf2 <pbuf_alloc+0x3e>
 800ecec:	2b41      	cmp	r3, #65	@ 0x41
 800ecee:	f040 80bc 	bne.w	800ee6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ecf2:	887a      	ldrh	r2, [r7, #2]
 800ecf4:	88bb      	ldrh	r3, [r7, #4]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f000 f8d1 	bl	800eea0 <pbuf_alloc_reference>
 800ecfe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ed00:	e0bd      	b.n	800ee7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ed02:	2300      	movs	r3, #0
 800ed04:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ed0a:	88bb      	ldrh	r3, [r7, #4]
 800ed0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ed0e:	200c      	movs	r0, #12
 800ed10:	f7ff fbcc 	bl	800e4ac <memp_malloc>
 800ed14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d109      	bne.n	800ed30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ed1c:	f7ff ff76 	bl	800ec0c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ed20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ed26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed28:	f000 faa8 	bl	800f27c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e0a7      	b.n	800ee80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ed30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed32:	3303      	adds	r3, #3
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	f023 0303 	bic.w	r3, r3, #3
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	8b7a      	ldrh	r2, [r7, #26]
 800ed44:	4293      	cmp	r3, r2
 800ed46:	bf28      	it	cs
 800ed48:	4613      	movcs	r3, r2
 800ed4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ed4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed4e:	3310      	adds	r3, #16
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	4413      	add	r3, r2
 800ed54:	3303      	adds	r3, #3
 800ed56:	f023 0303 	bic.w	r3, r3, #3
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	89f9      	ldrh	r1, [r7, #14]
 800ed5e:	8b7a      	ldrh	r2, [r7, #26]
 800ed60:	2300      	movs	r3, #0
 800ed62:	9301      	str	r3, [sp, #4]
 800ed64:	887b      	ldrh	r3, [r7, #2]
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	6938      	ldr	r0, [r7, #16]
 800ed6e:	f7ff ff77 	bl	800ec60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f003 0303 	and.w	r3, r3, #3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <pbuf_alloc+0xd8>
 800ed7e:	4b42      	ldr	r3, [pc, #264]	@ (800ee88 <pbuf_alloc+0x1d4>)
 800ed80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ed84:	4941      	ldr	r1, [pc, #260]	@ (800ee8c <pbuf_alloc+0x1d8>)
 800ed86:	4842      	ldr	r0, [pc, #264]	@ (800ee90 <pbuf_alloc+0x1dc>)
 800ed88:	f009 fbf2 	bl	8018570 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed8e:	3303      	adds	r3, #3
 800ed90:	f023 0303 	bic.w	r3, r3, #3
 800ed94:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ed98:	d106      	bne.n	800eda8 <pbuf_alloc+0xf4>
 800ed9a:	4b3b      	ldr	r3, [pc, #236]	@ (800ee88 <pbuf_alloc+0x1d4>)
 800ed9c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800eda0:	493c      	ldr	r1, [pc, #240]	@ (800ee94 <pbuf_alloc+0x1e0>)
 800eda2:	483b      	ldr	r0, [pc, #236]	@ (800ee90 <pbuf_alloc+0x1dc>)
 800eda4:	f009 fbe4 	bl	8018570 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800eda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d102      	bne.n	800edb4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800edb2:	e002      	b.n	800edba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800edbe:	8b7a      	ldrh	r2, [r7, #26]
 800edc0:	89fb      	ldrh	r3, [r7, #14]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800edca:	8b7b      	ldrh	r3, [r7, #26]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d19e      	bne.n	800ed0e <pbuf_alloc+0x5a>
      break;
 800edd0:	e055      	b.n	800ee7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800edd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edd4:	3303      	adds	r3, #3
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	f023 0303 	bic.w	r3, r3, #3
 800eddc:	b29a      	uxth	r2, r3
 800edde:	88bb      	ldrh	r3, [r7, #4]
 800ede0:	3303      	adds	r3, #3
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	f023 0303 	bic.w	r3, r3, #3
 800ede8:	b29b      	uxth	r3, r3
 800edea:	4413      	add	r3, r2
 800edec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800edee:	8b3b      	ldrh	r3, [r7, #24]
 800edf0:	3310      	adds	r3, #16
 800edf2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800edf4:	8b3a      	ldrh	r2, [r7, #24]
 800edf6:	88bb      	ldrh	r3, [r7, #4]
 800edf8:	3303      	adds	r3, #3
 800edfa:	f023 0303 	bic.w	r3, r3, #3
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d306      	bcc.n	800ee10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ee02:	8afa      	ldrh	r2, [r7, #22]
 800ee04:	88bb      	ldrh	r3, [r7, #4]
 800ee06:	3303      	adds	r3, #3
 800ee08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d201      	bcs.n	800ee14 <pbuf_alloc+0x160>
        return NULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e035      	b.n	800ee80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ee14:	8afb      	ldrh	r3, [r7, #22]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff f9a4 	bl	800e164 <mem_malloc>
 800ee1c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d101      	bne.n	800ee28 <pbuf_alloc+0x174>
        return NULL;
 800ee24:	2300      	movs	r3, #0
 800ee26:	e02b      	b.n	800ee80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ee28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee2a:	3310      	adds	r3, #16
 800ee2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee2e:	4413      	add	r3, r2
 800ee30:	3303      	adds	r3, #3
 800ee32:	f023 0303 	bic.w	r3, r3, #3
 800ee36:	4618      	mov	r0, r3
 800ee38:	88b9      	ldrh	r1, [r7, #4]
 800ee3a:	88ba      	ldrh	r2, [r7, #4]
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	887b      	ldrh	r3, [r7, #2]
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	460b      	mov	r3, r1
 800ee46:	4601      	mov	r1, r0
 800ee48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee4a:	f7ff ff09 	bl	800ec60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f003 0303 	and.w	r3, r3, #3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d010      	beq.n	800ee7c <pbuf_alloc+0x1c8>
 800ee5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee88 <pbuf_alloc+0x1d4>)
 800ee5c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ee60:	490d      	ldr	r1, [pc, #52]	@ (800ee98 <pbuf_alloc+0x1e4>)
 800ee62:	480b      	ldr	r0, [pc, #44]	@ (800ee90 <pbuf_alloc+0x1dc>)
 800ee64:	f009 fb84 	bl	8018570 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ee68:	e008      	b.n	800ee7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ee6a:	4b07      	ldr	r3, [pc, #28]	@ (800ee88 <pbuf_alloc+0x1d4>)
 800ee6c:	f240 1227 	movw	r2, #295	@ 0x127
 800ee70:	490a      	ldr	r1, [pc, #40]	@ (800ee9c <pbuf_alloc+0x1e8>)
 800ee72:	4807      	ldr	r0, [pc, #28]	@ (800ee90 <pbuf_alloc+0x1dc>)
 800ee74:	f009 fb7c 	bl	8018570 <iprintf>
      return NULL;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e001      	b.n	800ee80 <pbuf_alloc+0x1cc>
      break;
 800ee7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3728      	adds	r7, #40	@ 0x28
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801ad14 	.word	0x0801ad14
 800ee8c:	0801ad44 	.word	0x0801ad44
 800ee90:	0801ad74 	.word	0x0801ad74
 800ee94:	0801ad9c 	.word	0x0801ad9c
 800ee98:	0801add0 	.word	0x0801add0
 800ee9c:	0801adfc 	.word	0x0801adfc

0800eea0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af02      	add	r7, sp, #8
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	807b      	strh	r3, [r7, #2]
 800eeac:	4613      	mov	r3, r2
 800eeae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eeb0:	883b      	ldrh	r3, [r7, #0]
 800eeb2:	2b41      	cmp	r3, #65	@ 0x41
 800eeb4:	d009      	beq.n	800eeca <pbuf_alloc_reference+0x2a>
 800eeb6:	883b      	ldrh	r3, [r7, #0]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d006      	beq.n	800eeca <pbuf_alloc_reference+0x2a>
 800eebc:	4b0f      	ldr	r3, [pc, #60]	@ (800eefc <pbuf_alloc_reference+0x5c>)
 800eebe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800eec2:	490f      	ldr	r1, [pc, #60]	@ (800ef00 <pbuf_alloc_reference+0x60>)
 800eec4:	480f      	ldr	r0, [pc, #60]	@ (800ef04 <pbuf_alloc_reference+0x64>)
 800eec6:	f009 fb53 	bl	8018570 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eeca:	200b      	movs	r0, #11
 800eecc:	f7ff faee 	bl	800e4ac <memp_malloc>
 800eed0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d101      	bne.n	800eedc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eed8:	2300      	movs	r3, #0
 800eeda:	e00b      	b.n	800eef4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eedc:	8879      	ldrh	r1, [r7, #2]
 800eede:	887a      	ldrh	r2, [r7, #2]
 800eee0:	2300      	movs	r3, #0
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	883b      	ldrh	r3, [r7, #0]
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	460b      	mov	r3, r1
 800eeea:	6879      	ldr	r1, [r7, #4]
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7ff feb7 	bl	800ec60 <pbuf_init_alloced_pbuf>
  return p;
 800eef2:	68fb      	ldr	r3, [r7, #12]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	0801ad14 	.word	0x0801ad14
 800ef00:	0801ae18 	.word	0x0801ae18
 800ef04:	0801ad74 	.word	0x0801ad74

0800ef08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	607b      	str	r3, [r7, #4]
 800ef10:	4603      	mov	r3, r0
 800ef12:	73fb      	strb	r3, [r7, #15]
 800ef14:	460b      	mov	r3, r1
 800ef16:	81bb      	strh	r3, [r7, #12]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
 800ef1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ef20:	8a7b      	ldrh	r3, [r7, #18]
 800ef22:	3303      	adds	r3, #3
 800ef24:	f023 0203 	bic.w	r2, r3, #3
 800ef28:	89bb      	ldrh	r3, [r7, #12]
 800ef2a:	441a      	add	r2, r3
 800ef2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d901      	bls.n	800ef36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ef32:	2300      	movs	r3, #0
 800ef34:	e018      	b.n	800ef68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d007      	beq.n	800ef4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ef3c:	8a7b      	ldrh	r3, [r7, #18]
 800ef3e:	3303      	adds	r3, #3
 800ef40:	f023 0303 	bic.w	r3, r3, #3
 800ef44:	6a3a      	ldr	r2, [r7, #32]
 800ef46:	4413      	add	r3, r2
 800ef48:	617b      	str	r3, [r7, #20]
 800ef4a:	e001      	b.n	800ef50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	89b9      	ldrh	r1, [r7, #12]
 800ef54:	89ba      	ldrh	r2, [r7, #12]
 800ef56:	2302      	movs	r3, #2
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	897b      	ldrh	r3, [r7, #10]
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	6979      	ldr	r1, [r7, #20]
 800ef62:	f7ff fe7d 	bl	800ec60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ef66:	687b      	ldr	r3, [r7, #4]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d106      	bne.n	800ef90 <pbuf_realloc+0x20>
 800ef82:	4b3a      	ldr	r3, [pc, #232]	@ (800f06c <pbuf_realloc+0xfc>)
 800ef84:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ef88:	4939      	ldr	r1, [pc, #228]	@ (800f070 <pbuf_realloc+0x100>)
 800ef8a:	483a      	ldr	r0, [pc, #232]	@ (800f074 <pbuf_realloc+0x104>)
 800ef8c:	f009 faf0 	bl	8018570 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	891b      	ldrh	r3, [r3, #8]
 800ef94:	887a      	ldrh	r2, [r7, #2]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d263      	bcs.n	800f062 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	891a      	ldrh	r2, [r3, #8]
 800ef9e:	887b      	ldrh	r3, [r7, #2]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800efa4:	887b      	ldrh	r3, [r7, #2]
 800efa6:	817b      	strh	r3, [r7, #10]
  q = p;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800efac:	e018      	b.n	800efe0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	895b      	ldrh	r3, [r3, #10]
 800efb2:	897a      	ldrh	r2, [r7, #10]
 800efb4:	1ad3      	subs	r3, r2, r3
 800efb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	891a      	ldrh	r2, [r3, #8]
 800efbc:	893b      	ldrh	r3, [r7, #8]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <pbuf_realloc+0x70>
 800efd2:	4b26      	ldr	r3, [pc, #152]	@ (800f06c <pbuf_realloc+0xfc>)
 800efd4:	f240 12af 	movw	r2, #431	@ 0x1af
 800efd8:	4927      	ldr	r1, [pc, #156]	@ (800f078 <pbuf_realloc+0x108>)
 800efda:	4826      	ldr	r0, [pc, #152]	@ (800f074 <pbuf_realloc+0x104>)
 800efdc:	f009 fac8 	bl	8018570 <iprintf>
  while (rem_len > q->len) {
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	895b      	ldrh	r3, [r3, #10]
 800efe4:	897a      	ldrh	r2, [r7, #10]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d8e1      	bhi.n	800efae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	7b1b      	ldrb	r3, [r3, #12]
 800efee:	f003 030f 	and.w	r3, r3, #15
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d121      	bne.n	800f03a <pbuf_realloc+0xca>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	895b      	ldrh	r3, [r3, #10]
 800effa:	897a      	ldrh	r2, [r7, #10]
 800effc:	429a      	cmp	r2, r3
 800effe:	d01c      	beq.n	800f03a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	7b5b      	ldrb	r3, [r3, #13]
 800f004:	f003 0302 	and.w	r3, r3, #2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d116      	bne.n	800f03a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	685a      	ldr	r2, [r3, #4]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	b29a      	uxth	r2, r3
 800f016:	897b      	ldrh	r3, [r7, #10]
 800f018:	4413      	add	r3, r2
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4619      	mov	r1, r3
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7fe ff96 	bl	800df50 <mem_trim>
 800f024:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d106      	bne.n	800f03a <pbuf_realloc+0xca>
 800f02c:	4b0f      	ldr	r3, [pc, #60]	@ (800f06c <pbuf_realloc+0xfc>)
 800f02e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f032:	4912      	ldr	r1, [pc, #72]	@ (800f07c <pbuf_realloc+0x10c>)
 800f034:	480f      	ldr	r0, [pc, #60]	@ (800f074 <pbuf_realloc+0x104>)
 800f036:	f009 fa9b 	bl	8018570 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	897a      	ldrh	r2, [r7, #10]
 800f03e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	895a      	ldrh	r2, [r3, #10]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4618      	mov	r0, r3
 800f056:	f000 f911 	bl	800f27c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	e000      	b.n	800f064 <pbuf_realloc+0xf4>
    return;
 800f062:	bf00      	nop

}
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	0801ad14 	.word	0x0801ad14
 800f070:	0801ae2c 	.word	0x0801ae2c
 800f074:	0801ad74 	.word	0x0801ad74
 800f078:	0801ae44 	.word	0x0801ae44
 800f07c:	0801ae5c 	.word	0x0801ae5c

0800f080 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	4613      	mov	r3, r2
 800f08c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d106      	bne.n	800f0a2 <pbuf_add_header_impl+0x22>
 800f094:	4b2b      	ldr	r3, [pc, #172]	@ (800f144 <pbuf_add_header_impl+0xc4>)
 800f096:	f240 12df 	movw	r2, #479	@ 0x1df
 800f09a:	492b      	ldr	r1, [pc, #172]	@ (800f148 <pbuf_add_header_impl+0xc8>)
 800f09c:	482b      	ldr	r0, [pc, #172]	@ (800f14c <pbuf_add_header_impl+0xcc>)
 800f09e:	f009 fa67 	bl	8018570 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d003      	beq.n	800f0b0 <pbuf_add_header_impl+0x30>
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ae:	d301      	bcc.n	800f0b4 <pbuf_add_header_impl+0x34>
    return 1;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e043      	b.n	800f13c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d101      	bne.n	800f0be <pbuf_add_header_impl+0x3e>
    return 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e03e      	b.n	800f13c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	891a      	ldrh	r2, [r3, #8]
 800f0c6:	8a7b      	ldrh	r3, [r7, #18]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	8a7a      	ldrh	r2, [r7, #18]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d901      	bls.n	800f0d6 <pbuf_add_header_impl+0x56>
    return 1;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e032      	b.n	800f13c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	7b1b      	ldrb	r3, [r3, #12]
 800f0da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f0dc:	8a3b      	ldrh	r3, [r7, #16]
 800f0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00c      	beq.n	800f100 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	425b      	negs	r3, r3
 800f0ee:	4413      	add	r3, r2
 800f0f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3310      	adds	r3, #16
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d20d      	bcs.n	800f118 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e01d      	b.n	800f13c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d006      	beq.n	800f114 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	685a      	ldr	r2, [r3, #4]
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	425b      	negs	r3, r3
 800f10e:	4413      	add	r3, r2
 800f110:	617b      	str	r3, [r7, #20]
 800f112:	e001      	b.n	800f118 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f114:	2301      	movs	r3, #1
 800f116:	e011      	b.n	800f13c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	895a      	ldrh	r2, [r3, #10]
 800f122:	8a7b      	ldrh	r3, [r7, #18]
 800f124:	4413      	add	r3, r2
 800f126:	b29a      	uxth	r2, r3
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	891a      	ldrh	r2, [r3, #8]
 800f130:	8a7b      	ldrh	r3, [r7, #18]
 800f132:	4413      	add	r3, r2
 800f134:	b29a      	uxth	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	811a      	strh	r2, [r3, #8]


  return 0;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	0801ad14 	.word	0x0801ad14
 800f148:	0801ae78 	.word	0x0801ae78
 800f14c:	0801ad74 	.word	0x0801ad74

0800f150 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f15a:	2200      	movs	r2, #0
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7ff ff8e 	bl	800f080 <pbuf_add_header_impl>
 800f164:	4603      	mov	r3, r0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
	...

0800f170 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d106      	bne.n	800f18e <pbuf_remove_header+0x1e>
 800f180:	4b20      	ldr	r3, [pc, #128]	@ (800f204 <pbuf_remove_header+0x94>)
 800f182:	f240 224b 	movw	r2, #587	@ 0x24b
 800f186:	4920      	ldr	r1, [pc, #128]	@ (800f208 <pbuf_remove_header+0x98>)
 800f188:	4820      	ldr	r0, [pc, #128]	@ (800f20c <pbuf_remove_header+0x9c>)
 800f18a:	f009 f9f1 	bl	8018570 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d003      	beq.n	800f19c <pbuf_remove_header+0x2c>
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f19a:	d301      	bcc.n	800f1a0 <pbuf_remove_header+0x30>
    return 1;
 800f19c:	2301      	movs	r3, #1
 800f19e:	e02c      	b.n	800f1fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <pbuf_remove_header+0x3a>
    return 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e027      	b.n	800f1fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	895b      	ldrh	r3, [r3, #10]
 800f1b2:	89fa      	ldrh	r2, [r7, #14]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d908      	bls.n	800f1ca <pbuf_remove_header+0x5a>
 800f1b8:	4b12      	ldr	r3, [pc, #72]	@ (800f204 <pbuf_remove_header+0x94>)
 800f1ba:	f240 2255 	movw	r2, #597	@ 0x255
 800f1be:	4914      	ldr	r1, [pc, #80]	@ (800f210 <pbuf_remove_header+0xa0>)
 800f1c0:	4812      	ldr	r0, [pc, #72]	@ (800f20c <pbuf_remove_header+0x9c>)
 800f1c2:	f009 f9d5 	bl	8018570 <iprintf>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e017      	b.n	800f1fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685a      	ldr	r2, [r3, #4]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	441a      	add	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	895a      	ldrh	r2, [r3, #10]
 800f1e0:	89fb      	ldrh	r3, [r7, #14]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	891a      	ldrh	r2, [r3, #8]
 800f1ee:	89fb      	ldrh	r3, [r7, #14]
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	0801ad14 	.word	0x0801ad14
 800f208:	0801ae78 	.word	0x0801ae78
 800f20c:	0801ad74 	.word	0x0801ad74
 800f210:	0801ae84 	.word	0x0801ae84

0800f214 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	807b      	strh	r3, [r7, #2]
 800f220:	4613      	mov	r3, r2
 800f222:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da08      	bge.n	800f23e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f22c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f230:	425b      	negs	r3, r3
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7ff ff9b 	bl	800f170 <pbuf_remove_header>
 800f23a:	4603      	mov	r3, r0
 800f23c:	e007      	b.n	800f24e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f23e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f242:	787a      	ldrb	r2, [r7, #1]
 800f244:	4619      	mov	r1, r3
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7ff ff1a 	bl	800f080 <pbuf_add_header_impl>
 800f24c:	4603      	mov	r3, r0
  }
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	460b      	mov	r3, r1
 800f260:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f266:	2201      	movs	r2, #1
 800f268:	4619      	mov	r1, r3
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7ff ffd2 	bl	800f214 <pbuf_header_impl>
 800f270:	4603      	mov	r3, r0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10b      	bne.n	800f2a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d106      	bne.n	800f29e <pbuf_free+0x22>
 800f290:	4b3b      	ldr	r3, [pc, #236]	@ (800f380 <pbuf_free+0x104>)
 800f292:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f296:	493b      	ldr	r1, [pc, #236]	@ (800f384 <pbuf_free+0x108>)
 800f298:	483b      	ldr	r0, [pc, #236]	@ (800f388 <pbuf_free+0x10c>)
 800f29a:	f009 f969 	bl	8018570 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	e069      	b.n	800f376 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f2a6:	e062      	b.n	800f36e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f2a8:	f008 fb2a 	bl	8017900 <sys_arch_protect>
 800f2ac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	7b9b      	ldrb	r3, [r3, #14]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <pbuf_free+0x48>
 800f2b6:	4b32      	ldr	r3, [pc, #200]	@ (800f380 <pbuf_free+0x104>)
 800f2b8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f2bc:	4933      	ldr	r1, [pc, #204]	@ (800f38c <pbuf_free+0x110>)
 800f2be:	4832      	ldr	r0, [pc, #200]	@ (800f388 <pbuf_free+0x10c>)
 800f2c0:	f009 f956 	bl	8018570 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	7b9b      	ldrb	r3, [r3, #14]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	b2da      	uxtb	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	739a      	strb	r2, [r3, #14]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	7b9b      	ldrb	r3, [r3, #14]
 800f2d4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f2d6:	69b8      	ldr	r0, [r7, #24]
 800f2d8:	f008 fb20 	bl	801791c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d143      	bne.n	800f36a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7b1b      	ldrb	r3, [r3, #12]
 800f2ec:	f003 030f 	and.w	r3, r3, #15
 800f2f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	7b5b      	ldrb	r3, [r3, #13]
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d011      	beq.n	800f322 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <pbuf_free+0x9c>
 800f30a:	4b1d      	ldr	r3, [pc, #116]	@ (800f380 <pbuf_free+0x104>)
 800f30c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f310:	491f      	ldr	r1, [pc, #124]	@ (800f390 <pbuf_free+0x114>)
 800f312:	481d      	ldr	r0, [pc, #116]	@ (800f388 <pbuf_free+0x10c>)
 800f314:	f009 f92c 	bl	8018570 <iprintf>
        pc->custom_free_function(p);
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	4798      	blx	r3
 800f320:	e01d      	b.n	800f35e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f322:	7bfb      	ldrb	r3, [r7, #15]
 800f324:	2b02      	cmp	r3, #2
 800f326:	d104      	bne.n	800f332 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	200c      	movs	r0, #12
 800f32c:	f7ff f934 	bl	800e598 <memp_free>
 800f330:	e015      	b.n	800f35e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d104      	bne.n	800f342 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	200b      	movs	r0, #11
 800f33c:	f7ff f92c 	bl	800e598 <memp_free>
 800f340:	e00d      	b.n	800f35e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d103      	bne.n	800f350 <pbuf_free+0xd4>
          mem_free(p);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f7fe fd71 	bl	800de30 <mem_free>
 800f34e:	e006      	b.n	800f35e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f350:	4b0b      	ldr	r3, [pc, #44]	@ (800f380 <pbuf_free+0x104>)
 800f352:	f240 320f 	movw	r2, #783	@ 0x30f
 800f356:	490f      	ldr	r1, [pc, #60]	@ (800f394 <pbuf_free+0x118>)
 800f358:	480b      	ldr	r0, [pc, #44]	@ (800f388 <pbuf_free+0x10c>)
 800f35a:	f009 f909 	bl	8018570 <iprintf>
        }
      }
      count++;
 800f35e:	7ffb      	ldrb	r3, [r7, #31]
 800f360:	3301      	adds	r3, #1
 800f362:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	607b      	str	r3, [r7, #4]
 800f368:	e001      	b.n	800f36e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d199      	bne.n	800f2a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f374:	7ffb      	ldrb	r3, [r7, #31]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	0801ad14 	.word	0x0801ad14
 800f384:	0801ae78 	.word	0x0801ae78
 800f388:	0801ad74 	.word	0x0801ad74
 800f38c:	0801aea4 	.word	0x0801aea4
 800f390:	0801aebc 	.word	0x0801aebc
 800f394:	0801aee0 	.word	0x0801aee0

0800f398 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f3a4:	e005      	b.n	800f3b2 <pbuf_clen+0x1a>
    ++len;
 800f3a6:	89fb      	ldrh	r3, [r7, #14]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1f6      	bne.n	800f3a6 <pbuf_clen+0xe>
  }
  return len;
 800f3b8:	89fb      	ldrh	r3, [r7, #14]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3714      	adds	r7, #20
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
	...

0800f3c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d016      	beq.n	800f404 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f3d6:	f008 fa93 	bl	8017900 <sys_arch_protect>
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	7b9b      	ldrb	r3, [r3, #14]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	739a      	strb	r2, [r3, #14]
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f008 fa97 	bl	801791c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	7b9b      	ldrb	r3, [r3, #14]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d106      	bne.n	800f404 <pbuf_ref+0x3c>
 800f3f6:	4b05      	ldr	r3, [pc, #20]	@ (800f40c <pbuf_ref+0x44>)
 800f3f8:	f240 3242 	movw	r2, #834	@ 0x342
 800f3fc:	4904      	ldr	r1, [pc, #16]	@ (800f410 <pbuf_ref+0x48>)
 800f3fe:	4805      	ldr	r0, [pc, #20]	@ (800f414 <pbuf_ref+0x4c>)
 800f400:	f009 f8b6 	bl	8018570 <iprintf>
  }
}
 800f404:	bf00      	nop
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	0801ad14 	.word	0x0801ad14
 800f410:	0801aef4 	.word	0x0801aef4
 800f414:	0801ad74 	.word	0x0801ad74

0800f418 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d002      	beq.n	800f42e <pbuf_cat+0x16>
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d107      	bne.n	800f43e <pbuf_cat+0x26>
 800f42e:	4b20      	ldr	r3, [pc, #128]	@ (800f4b0 <pbuf_cat+0x98>)
 800f430:	f240 3259 	movw	r2, #857	@ 0x359
 800f434:	491f      	ldr	r1, [pc, #124]	@ (800f4b4 <pbuf_cat+0x9c>)
 800f436:	4820      	ldr	r0, [pc, #128]	@ (800f4b8 <pbuf_cat+0xa0>)
 800f438:	f009 f89a 	bl	8018570 <iprintf>
 800f43c:	e034      	b.n	800f4a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	e00a      	b.n	800f45a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	891a      	ldrh	r2, [r3, #8]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	891b      	ldrh	r3, [r3, #8]
 800f44c:	4413      	add	r3, r2
 800f44e:	b29a      	uxth	r2, r3
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1f0      	bne.n	800f444 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	891a      	ldrh	r2, [r3, #8]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	895b      	ldrh	r3, [r3, #10]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d006      	beq.n	800f47c <pbuf_cat+0x64>
 800f46e:	4b10      	ldr	r3, [pc, #64]	@ (800f4b0 <pbuf_cat+0x98>)
 800f470:	f240 3262 	movw	r2, #866	@ 0x362
 800f474:	4911      	ldr	r1, [pc, #68]	@ (800f4bc <pbuf_cat+0xa4>)
 800f476:	4810      	ldr	r0, [pc, #64]	@ (800f4b8 <pbuf_cat+0xa0>)
 800f478:	f009 f87a 	bl	8018570 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <pbuf_cat+0x7a>
 800f484:	4b0a      	ldr	r3, [pc, #40]	@ (800f4b0 <pbuf_cat+0x98>)
 800f486:	f240 3263 	movw	r2, #867	@ 0x363
 800f48a:	490d      	ldr	r1, [pc, #52]	@ (800f4c0 <pbuf_cat+0xa8>)
 800f48c:	480a      	ldr	r0, [pc, #40]	@ (800f4b8 <pbuf_cat+0xa0>)
 800f48e:	f009 f86f 	bl	8018570 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	891a      	ldrh	r2, [r3, #8]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	891b      	ldrh	r3, [r3, #8]
 800f49a:	4413      	add	r3, r2
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	0801ad14 	.word	0x0801ad14
 800f4b4:	0801af08 	.word	0x0801af08
 800f4b8:	0801ad74 	.word	0x0801ad74
 800f4bc:	0801af40 	.word	0x0801af40
 800f4c0:	0801af70 	.word	0x0801af70

0800f4c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	617b      	str	r3, [r7, #20]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d008      	beq.n	800f4ee <pbuf_copy+0x2a>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d005      	beq.n	800f4ee <pbuf_copy+0x2a>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	891a      	ldrh	r2, [r3, #8]
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	891b      	ldrh	r3, [r3, #8]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d209      	bcs.n	800f502 <pbuf_copy+0x3e>
 800f4ee:	4b57      	ldr	r3, [pc, #348]	@ (800f64c <pbuf_copy+0x188>)
 800f4f0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f4f4:	4956      	ldr	r1, [pc, #344]	@ (800f650 <pbuf_copy+0x18c>)
 800f4f6:	4857      	ldr	r0, [pc, #348]	@ (800f654 <pbuf_copy+0x190>)
 800f4f8:	f009 f83a 	bl	8018570 <iprintf>
 800f4fc:	f06f 030f 	mvn.w	r3, #15
 800f500:	e09f      	b.n	800f642 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	895b      	ldrh	r3, [r3, #10]
 800f506:	461a      	mov	r2, r3
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	1ad2      	subs	r2, r2, r3
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	895b      	ldrh	r3, [r3, #10]
 800f510:	4619      	mov	r1, r3
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	1acb      	subs	r3, r1, r3
 800f516:	429a      	cmp	r2, r3
 800f518:	d306      	bcc.n	800f528 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	895b      	ldrh	r3, [r3, #10]
 800f51e:	461a      	mov	r2, r3
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	60fb      	str	r3, [r7, #12]
 800f526:	e005      	b.n	800f534 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	895b      	ldrh	r3, [r3, #10]
 800f52c:	461a      	mov	r2, r3
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	18d0      	adds	r0, r2, r3
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	685a      	ldr	r2, [r3, #4]
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	4413      	add	r3, r2
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	4619      	mov	r1, r3
 800f548:	f009 f99b 	bl	8018882 <memcpy>
    offset_to += len;
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	4413      	add	r3, r2
 800f552:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f554:	693a      	ldr	r2, [r7, #16]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	4413      	add	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	895b      	ldrh	r3, [r3, #10]
 800f560:	461a      	mov	r2, r3
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	4293      	cmp	r3, r2
 800f566:	d906      	bls.n	800f576 <pbuf_copy+0xb2>
 800f568:	4b38      	ldr	r3, [pc, #224]	@ (800f64c <pbuf_copy+0x188>)
 800f56a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f56e:	493a      	ldr	r1, [pc, #232]	@ (800f658 <pbuf_copy+0x194>)
 800f570:	4838      	ldr	r0, [pc, #224]	@ (800f654 <pbuf_copy+0x190>)
 800f572:	f008 fffd 	bl	8018570 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	895b      	ldrh	r3, [r3, #10]
 800f57a:	461a      	mov	r2, r3
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	4293      	cmp	r3, r2
 800f580:	d906      	bls.n	800f590 <pbuf_copy+0xcc>
 800f582:	4b32      	ldr	r3, [pc, #200]	@ (800f64c <pbuf_copy+0x188>)
 800f584:	f240 32da 	movw	r2, #986	@ 0x3da
 800f588:	4934      	ldr	r1, [pc, #208]	@ (800f65c <pbuf_copy+0x198>)
 800f58a:	4832      	ldr	r0, [pc, #200]	@ (800f654 <pbuf_copy+0x190>)
 800f58c:	f008 fff0 	bl	8018570 <iprintf>
    if (offset_from >= p_from->len) {
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	895b      	ldrh	r3, [r3, #10]
 800f594:	461a      	mov	r2, r3
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	4293      	cmp	r3, r2
 800f59a:	d304      	bcc.n	800f5a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	895b      	ldrh	r3, [r3, #10]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d114      	bne.n	800f5dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10c      	bne.n	800f5dc <pbuf_copy+0x118>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d009      	beq.n	800f5dc <pbuf_copy+0x118>
 800f5c8:	4b20      	ldr	r3, [pc, #128]	@ (800f64c <pbuf_copy+0x188>)
 800f5ca:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f5ce:	4924      	ldr	r1, [pc, #144]	@ (800f660 <pbuf_copy+0x19c>)
 800f5d0:	4820      	ldr	r0, [pc, #128]	@ (800f654 <pbuf_copy+0x190>)
 800f5d2:	f008 ffcd 	bl	8018570 <iprintf>
 800f5d6:	f06f 030f 	mvn.w	r3, #15
 800f5da:	e032      	b.n	800f642 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d013      	beq.n	800f60a <pbuf_copy+0x146>
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	895a      	ldrh	r2, [r3, #10]
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	891b      	ldrh	r3, [r3, #8]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d10d      	bne.n	800f60a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <pbuf_copy+0x146>
 800f5f6:	4b15      	ldr	r3, [pc, #84]	@ (800f64c <pbuf_copy+0x188>)
 800f5f8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f5fc:	4919      	ldr	r1, [pc, #100]	@ (800f664 <pbuf_copy+0x1a0>)
 800f5fe:	4815      	ldr	r0, [pc, #84]	@ (800f654 <pbuf_copy+0x190>)
 800f600:	f008 ffb6 	bl	8018570 <iprintf>
 800f604:	f06f 0305 	mvn.w	r3, #5
 800f608:	e01b      	b.n	800f642 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d013      	beq.n	800f638 <pbuf_copy+0x174>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	895a      	ldrh	r2, [r3, #10]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	891b      	ldrh	r3, [r3, #8]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d10d      	bne.n	800f638 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d009      	beq.n	800f638 <pbuf_copy+0x174>
 800f624:	4b09      	ldr	r3, [pc, #36]	@ (800f64c <pbuf_copy+0x188>)
 800f626:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f62a:	490e      	ldr	r1, [pc, #56]	@ (800f664 <pbuf_copy+0x1a0>)
 800f62c:	4809      	ldr	r0, [pc, #36]	@ (800f654 <pbuf_copy+0x190>)
 800f62e:	f008 ff9f 	bl	8018570 <iprintf>
 800f632:	f06f 0305 	mvn.w	r3, #5
 800f636:	e004      	b.n	800f642 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f47f af61 	bne.w	800f502 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3718      	adds	r7, #24
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	0801ad14 	.word	0x0801ad14
 800f650:	0801afbc 	.word	0x0801afbc
 800f654:	0801ad74 	.word	0x0801ad74
 800f658:	0801afec 	.word	0x0801afec
 800f65c:	0801b004 	.word	0x0801b004
 800f660:	0801b020 	.word	0x0801b020
 800f664:	0801b030 	.word	0x0801b030

0800f668 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b088      	sub	sp, #32
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	4611      	mov	r1, r2
 800f674:	461a      	mov	r2, r3
 800f676:	460b      	mov	r3, r1
 800f678:	80fb      	strh	r3, [r7, #6]
 800f67a:	4613      	mov	r3, r2
 800f67c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d108      	bne.n	800f69e <pbuf_copy_partial+0x36>
 800f68c:	4b2b      	ldr	r3, [pc, #172]	@ (800f73c <pbuf_copy_partial+0xd4>)
 800f68e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f692:	492b      	ldr	r1, [pc, #172]	@ (800f740 <pbuf_copy_partial+0xd8>)
 800f694:	482b      	ldr	r0, [pc, #172]	@ (800f744 <pbuf_copy_partial+0xdc>)
 800f696:	f008 ff6b 	bl	8018570 <iprintf>
 800f69a:	2300      	movs	r3, #0
 800f69c:	e04a      	b.n	800f734 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d108      	bne.n	800f6b6 <pbuf_copy_partial+0x4e>
 800f6a4:	4b25      	ldr	r3, [pc, #148]	@ (800f73c <pbuf_copy_partial+0xd4>)
 800f6a6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f6aa:	4927      	ldr	r1, [pc, #156]	@ (800f748 <pbuf_copy_partial+0xe0>)
 800f6ac:	4825      	ldr	r0, [pc, #148]	@ (800f744 <pbuf_copy_partial+0xdc>)
 800f6ae:	f008 ff5f 	bl	8018570 <iprintf>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	e03e      	b.n	800f734 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	61fb      	str	r3, [r7, #28]
 800f6ba:	e034      	b.n	800f726 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f6bc:	88bb      	ldrh	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00a      	beq.n	800f6d8 <pbuf_copy_partial+0x70>
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	895b      	ldrh	r3, [r3, #10]
 800f6c6:	88ba      	ldrh	r2, [r7, #4]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d305      	bcc.n	800f6d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	895b      	ldrh	r3, [r3, #10]
 800f6d0:	88ba      	ldrh	r2, [r7, #4]
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	80bb      	strh	r3, [r7, #4]
 800f6d6:	e023      	b.n	800f720 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	895a      	ldrh	r2, [r3, #10]
 800f6dc:	88bb      	ldrh	r3, [r7, #4]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f6e2:	8b3a      	ldrh	r2, [r7, #24]
 800f6e4:	88fb      	ldrh	r3, [r7, #6]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d901      	bls.n	800f6ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f6ea:	88fb      	ldrh	r3, [r7, #6]
 800f6ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f6ee:	8b7b      	ldrh	r3, [r7, #26]
 800f6f0:	68ba      	ldr	r2, [r7, #8]
 800f6f2:	18d0      	adds	r0, r2, r3
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	88bb      	ldrh	r3, [r7, #4]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	8b3a      	ldrh	r2, [r7, #24]
 800f6fe:	4619      	mov	r1, r3
 800f700:	f009 f8bf 	bl	8018882 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f704:	8afa      	ldrh	r2, [r7, #22]
 800f706:	8b3b      	ldrh	r3, [r7, #24]
 800f708:	4413      	add	r3, r2
 800f70a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f70c:	8b7a      	ldrh	r2, [r7, #26]
 800f70e:	8b3b      	ldrh	r3, [r7, #24]
 800f710:	4413      	add	r3, r2
 800f712:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f714:	88fa      	ldrh	r2, [r7, #6]
 800f716:	8b3b      	ldrh	r3, [r7, #24]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	61fb      	str	r3, [r7, #28]
 800f726:	88fb      	ldrh	r3, [r7, #6]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <pbuf_copy_partial+0xca>
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1c4      	bne.n	800f6bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f732:	8afb      	ldrh	r3, [r7, #22]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3720      	adds	r7, #32
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	0801ad14 	.word	0x0801ad14
 800f740:	0801b05c 	.word	0x0801b05c
 800f744:	0801ad74 	.word	0x0801ad74
 800f748:	0801b07c 	.word	0x0801b07c

0800f74c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	603a      	str	r2, [r7, #0]
 800f756:	71fb      	strb	r3, [r7, #7]
 800f758:	460b      	mov	r3, r1
 800f75a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	8919      	ldrh	r1, [r3, #8]
 800f760:	88ba      	ldrh	r2, [r7, #4]
 800f762:	79fb      	ldrb	r3, [r7, #7]
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff faa5 	bl	800ecb4 <pbuf_alloc>
 800f76a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d101      	bne.n	800f776 <pbuf_clone+0x2a>
    return NULL;
 800f772:	2300      	movs	r3, #0
 800f774:	e011      	b.n	800f79a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff fea3 	bl	800f4c4 <pbuf_copy>
 800f77e:	4603      	mov	r3, r0
 800f780:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f782:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <pbuf_clone+0x4c>
 800f78a:	4b06      	ldr	r3, [pc, #24]	@ (800f7a4 <pbuf_clone+0x58>)
 800f78c:	f240 5224 	movw	r2, #1316	@ 0x524
 800f790:	4905      	ldr	r1, [pc, #20]	@ (800f7a8 <pbuf_clone+0x5c>)
 800f792:	4806      	ldr	r0, [pc, #24]	@ (800f7ac <pbuf_clone+0x60>)
 800f794:	f008 feec 	bl	8018570 <iprintf>
  return q;
 800f798:	68fb      	ldr	r3, [r7, #12]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	0801ad14 	.word	0x0801ad14
 800f7a8:	0801b188 	.word	0x0801b188
 800f7ac:	0801ad74 	.word	0x0801ad74

0800f7b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f7b4:	f008 fddc 	bl	8018370 <rand>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	4b01      	ldr	r3, [pc, #4]	@ (800f7d0 <tcp_init+0x20>)
 800f7ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7cc:	bf00      	nop
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	2000009c 	.word	0x2000009c

0800f7d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	7d1b      	ldrb	r3, [r3, #20]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d105      	bne.n	800f7f0 <tcp_free+0x1c>
 800f7e4:	4b06      	ldr	r3, [pc, #24]	@ (800f800 <tcp_free+0x2c>)
 800f7e6:	22d4      	movs	r2, #212	@ 0xd4
 800f7e8:	4906      	ldr	r1, [pc, #24]	@ (800f804 <tcp_free+0x30>)
 800f7ea:	4807      	ldr	r0, [pc, #28]	@ (800f808 <tcp_free+0x34>)
 800f7ec:	f008 fec0 	bl	8018570 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f7f0:	6879      	ldr	r1, [r7, #4]
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	f7fe fed0 	bl	800e598 <memp_free>
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	0801b214 	.word	0x0801b214
 800f804:	0801b244 	.word	0x0801b244
 800f808:	0801b258 	.word	0x0801b258

0800f80c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d105      	bne.n	800f828 <tcp_free_listen+0x1c>
 800f81c:	4b06      	ldr	r3, [pc, #24]	@ (800f838 <tcp_free_listen+0x2c>)
 800f81e:	22df      	movs	r2, #223	@ 0xdf
 800f820:	4906      	ldr	r1, [pc, #24]	@ (800f83c <tcp_free_listen+0x30>)
 800f822:	4807      	ldr	r0, [pc, #28]	@ (800f840 <tcp_free_listen+0x34>)
 800f824:	f008 fea4 	bl	8018570 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f828:	6879      	ldr	r1, [r7, #4]
 800f82a:	2002      	movs	r0, #2
 800f82c:	f7fe feb4 	bl	800e598 <memp_free>
}
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	0801b214 	.word	0x0801b214
 800f83c:	0801b280 	.word	0x0801b280
 800f840:	0801b258 	.word	0x0801b258

0800f844 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f848:	f000 fea4 	bl	8010594 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f84c:	4b07      	ldr	r3, [pc, #28]	@ (800f86c <tcp_tmr+0x28>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	3301      	adds	r3, #1
 800f852:	b2da      	uxtb	r2, r3
 800f854:	4b05      	ldr	r3, [pc, #20]	@ (800f86c <tcp_tmr+0x28>)
 800f856:	701a      	strb	r2, [r3, #0]
 800f858:	4b04      	ldr	r3, [pc, #16]	@ (800f86c <tcp_tmr+0x28>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f864:	f000 fb54 	bl	800ff10 <tcp_slowtmr>
  }
}
 800f868:	bf00      	nop
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	2000c6bd 	.word	0x2000c6bd

0800f870 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d105      	bne.n	800f88c <tcp_remove_listener+0x1c>
 800f880:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b8 <tcp_remove_listener+0x48>)
 800f882:	22ff      	movs	r2, #255	@ 0xff
 800f884:	490d      	ldr	r1, [pc, #52]	@ (800f8bc <tcp_remove_listener+0x4c>)
 800f886:	480e      	ldr	r0, [pc, #56]	@ (800f8c0 <tcp_remove_listener+0x50>)
 800f888:	f008 fe72 	bl	8018570 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	60fb      	str	r3, [r7, #12]
 800f890:	e00a      	b.n	800f8a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d102      	bne.n	800f8a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1f1      	bne.n	800f892 <tcp_remove_listener+0x22>
    }
  }
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	0801b214 	.word	0x0801b214
 800f8bc:	0801b29c 	.word	0x0801b29c
 800f8c0:	0801b258 	.word	0x0801b258

0800f8c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_listen_closed+0x1c>
 800f8d2:	4b14      	ldr	r3, [pc, #80]	@ (800f924 <tcp_listen_closed+0x60>)
 800f8d4:	f240 1211 	movw	r2, #273	@ 0x111
 800f8d8:	4913      	ldr	r1, [pc, #76]	@ (800f928 <tcp_listen_closed+0x64>)
 800f8da:	4814      	ldr	r0, [pc, #80]	@ (800f92c <tcp_listen_closed+0x68>)
 800f8dc:	f008 fe48 	bl	8018570 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d006      	beq.n	800f8f6 <tcp_listen_closed+0x32>
 800f8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f924 <tcp_listen_closed+0x60>)
 800f8ea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f8ee:	4910      	ldr	r1, [pc, #64]	@ (800f930 <tcp_listen_closed+0x6c>)
 800f8f0:	480e      	ldr	r0, [pc, #56]	@ (800f92c <tcp_listen_closed+0x68>)
 800f8f2:	f008 fe3d 	bl	8018570 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	60fb      	str	r3, [r7, #12]
 800f8fa:	e00b      	b.n	800f914 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f8fc:	4a0d      	ldr	r2, [pc, #52]	@ (800f934 <tcp_listen_closed+0x70>)
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	6879      	ldr	r1, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff ffb1 	bl	800f870 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3301      	adds	r3, #1
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b03      	cmp	r3, #3
 800f918:	d9f0      	bls.n	800f8fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	0801b214 	.word	0x0801b214
 800f928:	0801b2c4 	.word	0x0801b2c4
 800f92c:	0801b258 	.word	0x0801b258
 800f930:	0801b2d0 	.word	0x0801b2d0
 800f934:	0801d27c 	.word	0x0801d27c

0800f938 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f938:	b5b0      	push	{r4, r5, r7, lr}
 800f93a:	b088      	sub	sp, #32
 800f93c:	af04      	add	r7, sp, #16
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_close_shutdown+0x20>
 800f94a:	4b63      	ldr	r3, [pc, #396]	@ (800fad8 <tcp_close_shutdown+0x1a0>)
 800f94c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f950:	4962      	ldr	r1, [pc, #392]	@ (800fadc <tcp_close_shutdown+0x1a4>)
 800f952:	4863      	ldr	r0, [pc, #396]	@ (800fae0 <tcp_close_shutdown+0x1a8>)
 800f954:	f008 fe0c 	bl	8018570 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f958:	78fb      	ldrb	r3, [r7, #3]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d066      	beq.n	800fa2c <tcp_close_shutdown+0xf4>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	7d1b      	ldrb	r3, [r3, #20]
 800f962:	2b04      	cmp	r3, #4
 800f964:	d003      	beq.n	800f96e <tcp_close_shutdown+0x36>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	7d1b      	ldrb	r3, [r3, #20]
 800f96a:	2b07      	cmp	r3, #7
 800f96c:	d15e      	bne.n	800fa2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f972:	2b00      	cmp	r3, #0
 800f974:	d104      	bne.n	800f980 <tcp_close_shutdown+0x48>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f97a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f97e:	d055      	beq.n	800fa2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	8b5b      	ldrh	r3, [r3, #26]
 800f984:	f003 0310 	and.w	r3, r3, #16
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d106      	bne.n	800f99a <tcp_close_shutdown+0x62>
 800f98c:	4b52      	ldr	r3, [pc, #328]	@ (800fad8 <tcp_close_shutdown+0x1a0>)
 800f98e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f992:	4954      	ldr	r1, [pc, #336]	@ (800fae4 <tcp_close_shutdown+0x1ac>)
 800f994:	4852      	ldr	r0, [pc, #328]	@ (800fae0 <tcp_close_shutdown+0x1a8>)
 800f996:	f008 fdeb 	bl	8018570 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f9a2:	687d      	ldr	r5, [r7, #4]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	8ad2      	ldrh	r2, [r2, #22]
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	8b09      	ldrh	r1, [r1, #24]
 800f9b0:	9102      	str	r1, [sp, #8]
 800f9b2:	9201      	str	r2, [sp, #4]
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	462b      	mov	r3, r5
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f004 fe8d 	bl	80146dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f001 f8c8 	bl	8010b58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f9c8:	4b47      	ldr	r3, [pc, #284]	@ (800fae8 <tcp_close_shutdown+0x1b0>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d105      	bne.n	800f9de <tcp_close_shutdown+0xa6>
 800f9d2:	4b45      	ldr	r3, [pc, #276]	@ (800fae8 <tcp_close_shutdown+0x1b0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	4a43      	ldr	r2, [pc, #268]	@ (800fae8 <tcp_close_shutdown+0x1b0>)
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	e013      	b.n	800fa06 <tcp_close_shutdown+0xce>
 800f9de:	4b42      	ldr	r3, [pc, #264]	@ (800fae8 <tcp_close_shutdown+0x1b0>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	60fb      	str	r3, [r7, #12]
 800f9e4:	e00c      	b.n	800fa00 <tcp_close_shutdown+0xc8>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d104      	bne.n	800f9fa <tcp_close_shutdown+0xc2>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	68da      	ldr	r2, [r3, #12]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	60da      	str	r2, [r3, #12]
 800f9f8:	e005      	b.n	800fa06 <tcp_close_shutdown+0xce>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1ef      	bne.n	800f9e6 <tcp_close_shutdown+0xae>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	60da      	str	r2, [r3, #12]
 800fa0c:	4b37      	ldr	r3, [pc, #220]	@ (800faec <tcp_close_shutdown+0x1b4>)
 800fa0e:	2201      	movs	r2, #1
 800fa10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fa12:	4b37      	ldr	r3, [pc, #220]	@ (800faf0 <tcp_close_shutdown+0x1b8>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d102      	bne.n	800fa22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fa1c:	f003 fd5c 	bl	80134d8 <tcp_trigger_input_pcb_close>
 800fa20:	e002      	b.n	800fa28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7ff fed6 	bl	800f7d4 <tcp_free>
      }
      return ERR_OK;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e050      	b.n	800face <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	7d1b      	ldrb	r3, [r3, #20]
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d03b      	beq.n	800faac <tcp_close_shutdown+0x174>
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	dc44      	bgt.n	800fac2 <tcp_close_shutdown+0x18a>
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d002      	beq.n	800fa42 <tcp_close_shutdown+0x10a>
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d02a      	beq.n	800fa96 <tcp_close_shutdown+0x15e>
 800fa40:	e03f      	b.n	800fac2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	8adb      	ldrh	r3, [r3, #22]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d021      	beq.n	800fa8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa4a:	4b2a      	ldr	r3, [pc, #168]	@ (800faf4 <tcp_close_shutdown+0x1bc>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d105      	bne.n	800fa60 <tcp_close_shutdown+0x128>
 800fa54:	4b27      	ldr	r3, [pc, #156]	@ (800faf4 <tcp_close_shutdown+0x1bc>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	4a26      	ldr	r2, [pc, #152]	@ (800faf4 <tcp_close_shutdown+0x1bc>)
 800fa5c:	6013      	str	r3, [r2, #0]
 800fa5e:	e013      	b.n	800fa88 <tcp_close_shutdown+0x150>
 800fa60:	4b24      	ldr	r3, [pc, #144]	@ (800faf4 <tcp_close_shutdown+0x1bc>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	60bb      	str	r3, [r7, #8]
 800fa66:	e00c      	b.n	800fa82 <tcp_close_shutdown+0x14a>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d104      	bne.n	800fa7c <tcp_close_shutdown+0x144>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	68da      	ldr	r2, [r3, #12]
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	e005      	b.n	800fa88 <tcp_close_shutdown+0x150>
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	60bb      	str	r3, [r7, #8]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1ef      	bne.n	800fa68 <tcp_close_shutdown+0x130>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7ff fea0 	bl	800f7d4 <tcp_free>
      break;
 800fa94:	e01a      	b.n	800facc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff ff14 	bl	800f8c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	4816      	ldr	r0, [pc, #88]	@ (800faf8 <tcp_close_shutdown+0x1c0>)
 800faa0:	f001 f8aa 	bl	8010bf8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7ff feb1 	bl	800f80c <tcp_free_listen>
      break;
 800faaa:	e00f      	b.n	800facc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800faac:	6879      	ldr	r1, [r7, #4]
 800faae:	480e      	ldr	r0, [pc, #56]	@ (800fae8 <tcp_close_shutdown+0x1b0>)
 800fab0:	f001 f8a2 	bl	8010bf8 <tcp_pcb_remove>
 800fab4:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <tcp_close_shutdown+0x1b4>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff fe8a 	bl	800f7d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fac0:	e004      	b.n	800facc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f81a 	bl	800fafc <tcp_close_shutdown_fin>
 800fac8:	4603      	mov	r3, r0
 800faca:	e000      	b.n	800face <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bdb0      	pop	{r4, r5, r7, pc}
 800fad6:	bf00      	nop
 800fad8:	0801b214 	.word	0x0801b214
 800fadc:	0801b2e8 	.word	0x0801b2e8
 800fae0:	0801b258 	.word	0x0801b258
 800fae4:	0801b308 	.word	0x0801b308
 800fae8:	2000c6b4 	.word	0x2000c6b4
 800faec:	2000c6bc 	.word	0x2000c6bc
 800faf0:	2000c6f4 	.word	0x2000c6f4
 800faf4:	2000c6ac 	.word	0x2000c6ac
 800faf8:	2000c6b0 	.word	0x2000c6b0

0800fafc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <tcp_close_shutdown_fin+0x1c>
 800fb0a:	4b2e      	ldr	r3, [pc, #184]	@ (800fbc4 <tcp_close_shutdown_fin+0xc8>)
 800fb0c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fb10:	492d      	ldr	r1, [pc, #180]	@ (800fbc8 <tcp_close_shutdown_fin+0xcc>)
 800fb12:	482e      	ldr	r0, [pc, #184]	@ (800fbcc <tcp_close_shutdown_fin+0xd0>)
 800fb14:	f008 fd2c 	bl	8018570 <iprintf>

  switch (pcb->state) {
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	2b07      	cmp	r3, #7
 800fb1e:	d020      	beq.n	800fb62 <tcp_close_shutdown_fin+0x66>
 800fb20:	2b07      	cmp	r3, #7
 800fb22:	dc2b      	bgt.n	800fb7c <tcp_close_shutdown_fin+0x80>
 800fb24:	2b03      	cmp	r3, #3
 800fb26:	d002      	beq.n	800fb2e <tcp_close_shutdown_fin+0x32>
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d00d      	beq.n	800fb48 <tcp_close_shutdown_fin+0x4c>
 800fb2c:	e026      	b.n	800fb7c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f003 fee2 	bl	80138f8 <tcp_send_fin>
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d11f      	bne.n	800fb80 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2205      	movs	r2, #5
 800fb44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb46:	e01b      	b.n	800fb80 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f003 fed5 	bl	80138f8 <tcp_send_fin>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d114      	bne.n	800fb84 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2205      	movs	r2, #5
 800fb5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb60:	e010      	b.n	800fb84 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f003 fec8 	bl	80138f8 <tcp_send_fin>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d109      	bne.n	800fb88 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2209      	movs	r2, #9
 800fb78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb7a:	e005      	b.n	800fb88 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e01c      	b.n	800fbba <tcp_close_shutdown_fin+0xbe>
      break;
 800fb80:	bf00      	nop
 800fb82:	e002      	b.n	800fb8a <tcp_close_shutdown_fin+0x8e>
      break;
 800fb84:	bf00      	nop
 800fb86:	e000      	b.n	800fb8a <tcp_close_shutdown_fin+0x8e>
      break;
 800fb88:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d103      	bne.n	800fb9a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f003 ffee 	bl	8013b74 <tcp_output>
 800fb98:	e00d      	b.n	800fbb6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba2:	d108      	bne.n	800fbb6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	8b5b      	ldrh	r3, [r3, #26]
 800fba8:	f043 0308 	orr.w	r3, r3, #8
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e001      	b.n	800fbba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	0801b214 	.word	0x0801b214
 800fbc8:	0801b2c4 	.word	0x0801b2c4
 800fbcc:	0801b258 	.word	0x0801b258

0800fbd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d109      	bne.n	800fbf2 <tcp_close+0x22>
 800fbde:	4b0f      	ldr	r3, [pc, #60]	@ (800fc1c <tcp_close+0x4c>)
 800fbe0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fbe4:	490e      	ldr	r1, [pc, #56]	@ (800fc20 <tcp_close+0x50>)
 800fbe6:	480f      	ldr	r0, [pc, #60]	@ (800fc24 <tcp_close+0x54>)
 800fbe8:	f008 fcc2 	bl	8018570 <iprintf>
 800fbec:	f06f 030f 	mvn.w	r3, #15
 800fbf0:	e00f      	b.n	800fc12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	7d1b      	ldrb	r3, [r3, #20]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d006      	beq.n	800fc08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8b5b      	ldrh	r3, [r3, #26]
 800fbfe:	f043 0310 	orr.w	r3, r3, #16
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fc08:	2101      	movs	r1, #1
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f7ff fe94 	bl	800f938 <tcp_close_shutdown>
 800fc10:	4603      	mov	r3, r0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	0801b214 	.word	0x0801b214
 800fc20:	0801b324 	.word	0x0801b324
 800fc24:	0801b258 	.word	0x0801b258

0800fc28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08e      	sub	sp, #56	@ 0x38
 800fc2c:	af04      	add	r7, sp, #16
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d107      	bne.n	800fc48 <tcp_abandon+0x20>
 800fc38:	4b52      	ldr	r3, [pc, #328]	@ (800fd84 <tcp_abandon+0x15c>)
 800fc3a:	f240 223d 	movw	r2, #573	@ 0x23d
 800fc3e:	4952      	ldr	r1, [pc, #328]	@ (800fd88 <tcp_abandon+0x160>)
 800fc40:	4852      	ldr	r0, [pc, #328]	@ (800fd8c <tcp_abandon+0x164>)
 800fc42:	f008 fc95 	bl	8018570 <iprintf>
 800fc46:	e099      	b.n	800fd7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7d1b      	ldrb	r3, [r3, #20]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d106      	bne.n	800fc5e <tcp_abandon+0x36>
 800fc50:	4b4c      	ldr	r3, [pc, #304]	@ (800fd84 <tcp_abandon+0x15c>)
 800fc52:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800fc56:	494e      	ldr	r1, [pc, #312]	@ (800fd90 <tcp_abandon+0x168>)
 800fc58:	484c      	ldr	r0, [pc, #304]	@ (800fd8c <tcp_abandon+0x164>)
 800fc5a:	f008 fc89 	bl	8018570 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7d1b      	ldrb	r3, [r3, #20]
 800fc62:	2b0a      	cmp	r3, #10
 800fc64:	d107      	bne.n	800fc76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	484a      	ldr	r0, [pc, #296]	@ (800fd94 <tcp_abandon+0x16c>)
 800fc6a:	f000 ffc5 	bl	8010bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7ff fdb0 	bl	800f7d4 <tcp_free>
 800fc74:	e082      	b.n	800fd7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fc76:	2300      	movs	r3, #0
 800fc78:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	7d1b      	ldrb	r3, [r3, #20]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d126      	bne.n	800fcee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	8adb      	ldrh	r3, [r3, #22]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d02e      	beq.n	800fd06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fca8:	4b3b      	ldr	r3, [pc, #236]	@ (800fd98 <tcp_abandon+0x170>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d105      	bne.n	800fcbe <tcp_abandon+0x96>
 800fcb2:	4b39      	ldr	r3, [pc, #228]	@ (800fd98 <tcp_abandon+0x170>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	4a37      	ldr	r2, [pc, #220]	@ (800fd98 <tcp_abandon+0x170>)
 800fcba:	6013      	str	r3, [r2, #0]
 800fcbc:	e013      	b.n	800fce6 <tcp_abandon+0xbe>
 800fcbe:	4b36      	ldr	r3, [pc, #216]	@ (800fd98 <tcp_abandon+0x170>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	61fb      	str	r3, [r7, #28]
 800fcc4:	e00c      	b.n	800fce0 <tcp_abandon+0xb8>
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d104      	bne.n	800fcda <tcp_abandon+0xb2>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68da      	ldr	r2, [r3, #12]
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	60da      	str	r2, [r3, #12]
 800fcd8:	e005      	b.n	800fce6 <tcp_abandon+0xbe>
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1ef      	bne.n	800fcc6 <tcp_abandon+0x9e>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	60da      	str	r2, [r3, #12]
 800fcec:	e00b      	b.n	800fd06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8adb      	ldrh	r3, [r3, #22]
 800fcf6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fcf8:	6879      	ldr	r1, [r7, #4]
 800fcfa:	4828      	ldr	r0, [pc, #160]	@ (800fd9c <tcp_abandon+0x174>)
 800fcfc:	f000 ff7c 	bl	8010bf8 <tcp_pcb_remove>
 800fd00:	4b27      	ldr	r3, [pc, #156]	@ (800fda0 <tcp_abandon+0x178>)
 800fd02:	2201      	movs	r2, #1
 800fd04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d004      	beq.n	800fd18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fd1e 	bl	8010754 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 fd15 	bl	8010754 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d004      	beq.n	800fd3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fd0c 	bl	8010754 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00e      	beq.n	800fd60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	8b12      	ldrh	r2, [r2, #24]
 800fd4c:	9202      	str	r2, [sp, #8]
 800fd4e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fd50:	9201      	str	r2, [sp, #4]
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	460b      	mov	r3, r1
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	69b9      	ldr	r1, [r7, #24]
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f004 fcbe 	bl	80146dc <tcp_rst>
    }
    last_state = pcb->state;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	7d1b      	ldrb	r3, [r3, #20]
 800fd64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7ff fd34 	bl	800f7d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d004      	beq.n	800fd7c <tcp_abandon+0x154>
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	f06f 010c 	mvn.w	r1, #12
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	4798      	blx	r3
  }
}
 800fd7c:	3728      	adds	r7, #40	@ 0x28
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	0801b214 	.word	0x0801b214
 800fd88:	0801b358 	.word	0x0801b358
 800fd8c:	0801b258 	.word	0x0801b258
 800fd90:	0801b374 	.word	0x0801b374
 800fd94:	2000c6b8 	.word	0x2000c6b8
 800fd98:	2000c6ac 	.word	0x2000c6ac
 800fd9c:	2000c6b4 	.word	0x2000c6b4
 800fda0:	2000c6bc 	.word	0x2000c6bc

0800fda4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fdac:	2101      	movs	r1, #1
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff ff3a 	bl	800fc28 <tcp_abandon>
}
 800fdb4:	bf00      	nop
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <tcp_update_rcv_ann_wnd+0x1c>
 800fdca:	4b25      	ldr	r3, [pc, #148]	@ (800fe60 <tcp_update_rcv_ann_wnd+0xa4>)
 800fdcc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800fdd0:	4924      	ldr	r1, [pc, #144]	@ (800fe64 <tcp_update_rcv_ann_wnd+0xa8>)
 800fdd2:	4825      	ldr	r0, [pc, #148]	@ (800fe68 <tcp_update_rcv_ann_wnd+0xac>)
 800fdd4:	f008 fbcc 	bl	8018570 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800fde0:	4413      	add	r3, r2
 800fde2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800fdec:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800fdf0:	bf28      	it	cs
 800fdf2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800fdf6:	b292      	uxth	r2, r2
 800fdf8:	4413      	add	r3, r2
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	db08      	blt.n	800fe14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	e020      	b.n	800fe56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	dd03      	ble.n	800fe2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fe28:	e014      	b.n	800fe54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe3c:	d306      	bcc.n	800fe4c <tcp_update_rcv_ann_wnd+0x90>
 800fe3e:	4b08      	ldr	r3, [pc, #32]	@ (800fe60 <tcp_update_rcv_ann_wnd+0xa4>)
 800fe40:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800fe44:	4909      	ldr	r1, [pc, #36]	@ (800fe6c <tcp_update_rcv_ann_wnd+0xb0>)
 800fe46:	4808      	ldr	r0, [pc, #32]	@ (800fe68 <tcp_update_rcv_ann_wnd+0xac>)
 800fe48:	f008 fb92 	bl	8018570 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800fe54:	2300      	movs	r3, #0
  }
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	0801b214 	.word	0x0801b214
 800fe64:	0801b470 	.word	0x0801b470
 800fe68:	0801b258 	.word	0x0801b258
 800fe6c:	0801b494 	.word	0x0801b494

0800fe70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	460b      	mov	r3, r1
 800fe7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d107      	bne.n	800fe92 <tcp_recved+0x22>
 800fe82:	4b1f      	ldr	r3, [pc, #124]	@ (800ff00 <tcp_recved+0x90>)
 800fe84:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800fe88:	491e      	ldr	r1, [pc, #120]	@ (800ff04 <tcp_recved+0x94>)
 800fe8a:	481f      	ldr	r0, [pc, #124]	@ (800ff08 <tcp_recved+0x98>)
 800fe8c:	f008 fb70 	bl	8018570 <iprintf>
 800fe90:	e032      	b.n	800fef8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	7d1b      	ldrb	r3, [r3, #20]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d106      	bne.n	800fea8 <tcp_recved+0x38>
 800fe9a:	4b19      	ldr	r3, [pc, #100]	@ (800ff00 <tcp_recved+0x90>)
 800fe9c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800fea0:	491a      	ldr	r1, [pc, #104]	@ (800ff0c <tcp_recved+0x9c>)
 800fea2:	4819      	ldr	r0, [pc, #100]	@ (800ff08 <tcp_recved+0x98>)
 800fea4:	f008 fb64 	bl	8018570 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800feac:	887b      	ldrh	r3, [r7, #2]
 800feae:	4413      	add	r3, r2
 800feb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800feb2:	89fb      	ldrh	r3, [r7, #14]
 800feb4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800feb8:	d804      	bhi.n	800fec4 <tcp_recved+0x54>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800febe:	89fa      	ldrh	r2, [r7, #14]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d204      	bcs.n	800fece <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800feca:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fecc:	e002      	b.n	800fed4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	89fa      	ldrh	r2, [r7, #14]
 800fed2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7ff ff71 	bl	800fdbc <tcp_update_rcv_ann_wnd>
 800feda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fee2:	d309      	bcc.n	800fef8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	8b5b      	ldrh	r3, [r3, #26]
 800fee8:	f043 0302 	orr.w	r3, r3, #2
 800feec:	b29a      	uxth	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f003 fe3e 	bl	8013b74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	0801b214 	.word	0x0801b214
 800ff04:	0801b4b0 	.word	0x0801b4b0
 800ff08:	0801b258 	.word	0x0801b258
 800ff0c:	0801b4c8 	.word	0x0801b4c8

0800ff10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ff10:	b5b0      	push	{r4, r5, r7, lr}
 800ff12:	b090      	sub	sp, #64	@ 0x40
 800ff14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ff16:	2300      	movs	r3, #0
 800ff18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ff1c:	4b95      	ldr	r3, [pc, #596]	@ (8010174 <tcp_slowtmr+0x264>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3301      	adds	r3, #1
 800ff22:	4a94      	ldr	r2, [pc, #592]	@ (8010174 <tcp_slowtmr+0x264>)
 800ff24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ff26:	4b94      	ldr	r3, [pc, #592]	@ (8010178 <tcp_slowtmr+0x268>)
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	b2da      	uxtb	r2, r3
 800ff2e:	4b92      	ldr	r3, [pc, #584]	@ (8010178 <tcp_slowtmr+0x268>)
 800ff30:	701a      	strb	r2, [r3, #0]
 800ff32:	e000      	b.n	800ff36 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ff34:	bf00      	nop
  prev = NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ff3a:	4b90      	ldr	r3, [pc, #576]	@ (801017c <tcp_slowtmr+0x26c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ff40:	e29f      	b.n	8010482 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ff42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff44:	7d1b      	ldrb	r3, [r3, #20]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_slowtmr+0x48>
 800ff4a:	4b8d      	ldr	r3, [pc, #564]	@ (8010180 <tcp_slowtmr+0x270>)
 800ff4c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ff50:	498c      	ldr	r1, [pc, #560]	@ (8010184 <tcp_slowtmr+0x274>)
 800ff52:	488d      	ldr	r0, [pc, #564]	@ (8010188 <tcp_slowtmr+0x278>)
 800ff54:	f008 fb0c 	bl	8018570 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ff58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5a:	7d1b      	ldrb	r3, [r3, #20]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d106      	bne.n	800ff6e <tcp_slowtmr+0x5e>
 800ff60:	4b87      	ldr	r3, [pc, #540]	@ (8010180 <tcp_slowtmr+0x270>)
 800ff62:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ff66:	4989      	ldr	r1, [pc, #548]	@ (801018c <tcp_slowtmr+0x27c>)
 800ff68:	4887      	ldr	r0, [pc, #540]	@ (8010188 <tcp_slowtmr+0x278>)
 800ff6a:	f008 fb01 	bl	8018570 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ff6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	2b0a      	cmp	r3, #10
 800ff74:	d106      	bne.n	800ff84 <tcp_slowtmr+0x74>
 800ff76:	4b82      	ldr	r3, [pc, #520]	@ (8010180 <tcp_slowtmr+0x270>)
 800ff78:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ff7c:	4984      	ldr	r1, [pc, #528]	@ (8010190 <tcp_slowtmr+0x280>)
 800ff7e:	4882      	ldr	r0, [pc, #520]	@ (8010188 <tcp_slowtmr+0x278>)
 800ff80:	f008 faf6 	bl	8018570 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ff84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff86:	7f9a      	ldrb	r2, [r3, #30]
 800ff88:	4b7b      	ldr	r3, [pc, #492]	@ (8010178 <tcp_slowtmr+0x268>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d105      	bne.n	800ff9c <tcp_slowtmr+0x8c>
      prev = pcb;
 800ff90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff92:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ff9a:	e272      	b.n	8010482 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800ff9c:	4b76      	ldr	r3, [pc, #472]	@ (8010178 <tcp_slowtmr+0x268>)
 800ff9e:	781a      	ldrb	r2, [r3, #0]
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ffb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffb2:	7d1b      	ldrb	r3, [r3, #20]
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d10a      	bne.n	800ffce <tcp_slowtmr+0xbe>
 800ffb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ffbe:	2b05      	cmp	r3, #5
 800ffc0:	d905      	bls.n	800ffce <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ffc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ffcc:	e11e      	b.n	801020c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ffce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ffd4:	2b0b      	cmp	r3, #11
 800ffd6:	d905      	bls.n	800ffe4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ffd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffdc:	3301      	adds	r3, #1
 800ffde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ffe2:	e113      	b.n	801020c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ffe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d075      	beq.n	80100da <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ffee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d006      	beq.n	8010004 <tcp_slowtmr+0xf4>
 800fff6:	4b62      	ldr	r3, [pc, #392]	@ (8010180 <tcp_slowtmr+0x270>)
 800fff8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800fffc:	4965      	ldr	r1, [pc, #404]	@ (8010194 <tcp_slowtmr+0x284>)
 800fffe:	4862      	ldr	r0, [pc, #392]	@ (8010188 <tcp_slowtmr+0x278>)
 8010000:	f008 fab6 	bl	8018570 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <tcp_slowtmr+0x10a>
 801000c:	4b5c      	ldr	r3, [pc, #368]	@ (8010180 <tcp_slowtmr+0x270>)
 801000e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8010012:	4961      	ldr	r1, [pc, #388]	@ (8010198 <tcp_slowtmr+0x288>)
 8010014:	485c      	ldr	r0, [pc, #368]	@ (8010188 <tcp_slowtmr+0x278>)
 8010016:	f008 faab 	bl	8018570 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801001a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801001c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010020:	2b0b      	cmp	r3, #11
 8010022:	d905      	bls.n	8010030 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010028:	3301      	adds	r3, #1
 801002a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801002e:	e0ed      	b.n	801020c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010032:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010036:	3b01      	subs	r3, #1
 8010038:	4a58      	ldr	r2, [pc, #352]	@ (801019c <tcp_slowtmr+0x28c>)
 801003a:	5cd3      	ldrb	r3, [r2, r3]
 801003c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801003e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010040:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010044:	7c7a      	ldrb	r2, [r7, #17]
 8010046:	429a      	cmp	r2, r3
 8010048:	d907      	bls.n	801005a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801004a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801004c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010050:	3301      	adds	r3, #1
 8010052:	b2da      	uxtb	r2, r3
 8010054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010056:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801005a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801005c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010060:	7c7a      	ldrb	r2, [r7, #17]
 8010062:	429a      	cmp	r2, r3
 8010064:	f200 80d2 	bhi.w	801020c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010068:	2301      	movs	r3, #1
 801006a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801006c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801006e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010072:	2b00      	cmp	r3, #0
 8010074:	d108      	bne.n	8010088 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010076:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010078:	f004 fc24 	bl	80148c4 <tcp_zero_window_probe>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d014      	beq.n	80100ac <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8010082:	2300      	movs	r3, #0
 8010084:	623b      	str	r3, [r7, #32]
 8010086:	e011      	b.n	80100ac <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801008a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801008e:	4619      	mov	r1, r3
 8010090:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010092:	f003 fae9 	bl	8013668 <tcp_split_unsent_seg>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d107      	bne.n	80100ac <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801009c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801009e:	f003 fd69 	bl	8013b74 <tcp_output>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 80ac 	beq.w	801020c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80100b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80100bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80100c2:	2b06      	cmp	r3, #6
 80100c4:	f200 80a2 	bhi.w	801020c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80100c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80100d8:	e098      	b.n	801020c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	db0f      	blt.n	8010104 <tcp_slowtmr+0x1f4>
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80100ea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d008      	beq.n	8010104 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80100f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	3301      	adds	r3, #1
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	b21a      	sxth	r2, r3
 8010100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010102:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010106:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801010a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801010c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010110:	429a      	cmp	r2, r3
 8010112:	db7b      	blt.n	801020c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010116:	f004 f821 	bl	801415c <tcp_rexmit_rto_prepare>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d007      	beq.n	8010130 <tcp_slowtmr+0x220>
 8010120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010124:	2b00      	cmp	r3, #0
 8010126:	d171      	bne.n	801020c <tcp_slowtmr+0x2fc>
 8010128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801012a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801012c:	2b00      	cmp	r3, #0
 801012e:	d06d      	beq.n	801020c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8010130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010132:	7d1b      	ldrb	r3, [r3, #20]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d03a      	beq.n	80101ae <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801013e:	2b0c      	cmp	r3, #12
 8010140:	bf28      	it	cs
 8010142:	230c      	movcs	r3, #12
 8010144:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010148:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801014c:	10db      	asrs	r3, r3, #3
 801014e:	b21b      	sxth	r3, r3
 8010150:	461a      	mov	r2, r3
 8010152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010154:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010158:	4413      	add	r3, r2
 801015a:	7efa      	ldrb	r2, [r7, #27]
 801015c:	4910      	ldr	r1, [pc, #64]	@ (80101a0 <tcp_slowtmr+0x290>)
 801015e:	5c8a      	ldrb	r2, [r1, r2]
 8010160:	4093      	lsls	r3, r2
 8010162:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801016a:	4293      	cmp	r3, r2
 801016c:	dc1a      	bgt.n	80101a4 <tcp_slowtmr+0x294>
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	b21a      	sxth	r2, r3
 8010172:	e019      	b.n	80101a8 <tcp_slowtmr+0x298>
 8010174:	2000c6a8 	.word	0x2000c6a8
 8010178:	2000c6be 	.word	0x2000c6be
 801017c:	2000c6b4 	.word	0x2000c6b4
 8010180:	0801b214 	.word	0x0801b214
 8010184:	0801b558 	.word	0x0801b558
 8010188:	0801b258 	.word	0x0801b258
 801018c:	0801b584 	.word	0x0801b584
 8010190:	0801b5b0 	.word	0x0801b5b0
 8010194:	0801b5e0 	.word	0x0801b5e0
 8010198:	0801b614 	.word	0x0801b614
 801019c:	0801d274 	.word	0x0801d274
 80101a0:	0801d264 	.word	0x0801d264
 80101a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80101a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80101ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b0:	2200      	movs	r2, #0
 80101b2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80101ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80101c0:	4293      	cmp	r3, r2
 80101c2:	bf28      	it	cs
 80101c4:	4613      	movcs	r3, r2
 80101c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80101c8:	8a7b      	ldrh	r3, [r7, #18]
 80101ca:	085b      	lsrs	r3, r3, #1
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80101d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80101da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d206      	bcs.n	80101f4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80101e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80101f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80101f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80101fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010200:	2200      	movs	r2, #0
 8010202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010208:	f004 f818 	bl	801423c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020e:	7d1b      	ldrb	r3, [r3, #20]
 8010210:	2b06      	cmp	r3, #6
 8010212:	d111      	bne.n	8010238 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	8b5b      	ldrh	r3, [r3, #26]
 8010218:	f003 0310 	and.w	r3, r3, #16
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00b      	beq.n	8010238 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010220:	4b9d      	ldr	r3, [pc, #628]	@ (8010498 <tcp_slowtmr+0x588>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010226:	6a1b      	ldr	r3, [r3, #32]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	2b28      	cmp	r3, #40	@ 0x28
 801022c:	d904      	bls.n	8010238 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801022e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010232:	3301      	adds	r3, #1
 8010234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023a:	7a5b      	ldrb	r3, [r3, #9]
 801023c:	f003 0308 	and.w	r3, r3, #8
 8010240:	2b00      	cmp	r3, #0
 8010242:	d04c      	beq.n	80102de <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8010244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010246:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010248:	2b04      	cmp	r3, #4
 801024a:	d003      	beq.n	8010254 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801024c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010250:	2b07      	cmp	r3, #7
 8010252:	d144      	bne.n	80102de <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010254:	4b90      	ldr	r3, [pc, #576]	@ (8010498 <tcp_slowtmr+0x588>)
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025a:	6a1b      	ldr	r3, [r3, #32]
 801025c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801025e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010264:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8010268:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 801026c:	498b      	ldr	r1, [pc, #556]	@ (801049c <tcp_slowtmr+0x58c>)
 801026e:	fba1 1303 	umull	r1, r3, r1, r3
 8010272:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010274:	429a      	cmp	r2, r3
 8010276:	d90a      	bls.n	801028e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8010278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801027c:	3301      	adds	r3, #1
 801027e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010282:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010286:	3301      	adds	r3, #1
 8010288:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801028c:	e027      	b.n	80102de <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801028e:	4b82      	ldr	r3, [pc, #520]	@ (8010498 <tcp_slowtmr+0x588>)
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010294:	6a1b      	ldr	r3, [r3, #32]
 8010296:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801029e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80102a4:	4618      	mov	r0, r3
 80102a6:	4b7e      	ldr	r3, [pc, #504]	@ (80104a0 <tcp_slowtmr+0x590>)
 80102a8:	fb00 f303 	mul.w	r3, r0, r3
 80102ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80102ae:	497b      	ldr	r1, [pc, #492]	@ (801049c <tcp_slowtmr+0x58c>)
 80102b0:	fba1 1303 	umull	r1, r3, r1, r3
 80102b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d911      	bls.n	80102de <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80102ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102bc:	f004 fac2 	bl	8014844 <tcp_keepalive>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80102c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d107      	bne.n	80102de <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80102ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80102d4:	3301      	adds	r3, #1
 80102d6:	b2da      	uxtb	r2, r3
 80102d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102da:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80102de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d011      	beq.n	801030a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80102e6:	4b6c      	ldr	r3, [pc, #432]	@ (8010498 <tcp_slowtmr+0x588>)
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	1ad2      	subs	r2, r2, r3
 80102f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80102f6:	4619      	mov	r1, r3
 80102f8:	460b      	mov	r3, r1
 80102fa:	005b      	lsls	r3, r3, #1
 80102fc:	440b      	add	r3, r1
 80102fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010300:	429a      	cmp	r2, r3
 8010302:	d302      	bcc.n	801030a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8010304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010306:	f000 fddb 	bl	8010ec0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801030a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030c:	7d1b      	ldrb	r3, [r3, #20]
 801030e:	2b03      	cmp	r3, #3
 8010310:	d10b      	bne.n	801032a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010312:	4b61      	ldr	r3, [pc, #388]	@ (8010498 <tcp_slowtmr+0x588>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	2b28      	cmp	r3, #40	@ 0x28
 801031e:	d904      	bls.n	801032a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8010320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010324:	3301      	adds	r3, #1
 8010326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801032a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801032c:	7d1b      	ldrb	r3, [r3, #20]
 801032e:	2b09      	cmp	r3, #9
 8010330:	d10b      	bne.n	801034a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010332:	4b59      	ldr	r3, [pc, #356]	@ (8010498 <tcp_slowtmr+0x588>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	2bf0      	cmp	r3, #240	@ 0xf0
 801033e:	d904      	bls.n	801034a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8010340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010344:	3301      	adds	r3, #1
 8010346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801034a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801034e:	2b00      	cmp	r3, #0
 8010350:	d060      	beq.n	8010414 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8010352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010358:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801035a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801035c:	f000 fbfc 	bl	8010b58 <tcp_pcb_purge>
      if (prev != NULL) {
 8010360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010362:	2b00      	cmp	r3, #0
 8010364:	d010      	beq.n	8010388 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010366:	4b4f      	ldr	r3, [pc, #316]	@ (80104a4 <tcp_slowtmr+0x594>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801036c:	429a      	cmp	r2, r3
 801036e:	d106      	bne.n	801037e <tcp_slowtmr+0x46e>
 8010370:	4b4d      	ldr	r3, [pc, #308]	@ (80104a8 <tcp_slowtmr+0x598>)
 8010372:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010376:	494d      	ldr	r1, [pc, #308]	@ (80104ac <tcp_slowtmr+0x59c>)
 8010378:	484d      	ldr	r0, [pc, #308]	@ (80104b0 <tcp_slowtmr+0x5a0>)
 801037a:	f008 f8f9 	bl	8018570 <iprintf>
        prev->next = pcb->next;
 801037e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010380:	68da      	ldr	r2, [r3, #12]
 8010382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010384:	60da      	str	r2, [r3, #12]
 8010386:	e00f      	b.n	80103a8 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010388:	4b46      	ldr	r3, [pc, #280]	@ (80104a4 <tcp_slowtmr+0x594>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801038e:	429a      	cmp	r2, r3
 8010390:	d006      	beq.n	80103a0 <tcp_slowtmr+0x490>
 8010392:	4b45      	ldr	r3, [pc, #276]	@ (80104a8 <tcp_slowtmr+0x598>)
 8010394:	f240 5271 	movw	r2, #1393	@ 0x571
 8010398:	4946      	ldr	r1, [pc, #280]	@ (80104b4 <tcp_slowtmr+0x5a4>)
 801039a:	4845      	ldr	r0, [pc, #276]	@ (80104b0 <tcp_slowtmr+0x5a0>)
 801039c:	f008 f8e8 	bl	8018570 <iprintf>
        tcp_active_pcbs = pcb->next;
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	4a3f      	ldr	r2, [pc, #252]	@ (80104a4 <tcp_slowtmr+0x594>)
 80103a6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80103a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d013      	beq.n	80103d8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80103b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80103b8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80103ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103bc:	3304      	adds	r3, #4
 80103be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103c0:	8ad2      	ldrh	r2, [r2, #22]
 80103c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103c4:	8b09      	ldrh	r1, [r1, #24]
 80103c6:	9102      	str	r1, [sp, #8]
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	462b      	mov	r3, r5
 80103ce:	4622      	mov	r2, r4
 80103d0:	4601      	mov	r1, r0
 80103d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103d4:	f004 f982 	bl	80146dc <tcp_rst>
      err_arg = pcb->callback_arg;
 80103d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80103de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80103e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80103e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80103ee:	6838      	ldr	r0, [r7, #0]
 80103f0:	f7ff f9f0 	bl	800f7d4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80103f4:	4b30      	ldr	r3, [pc, #192]	@ (80104b8 <tcp_slowtmr+0x5a8>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d004      	beq.n	801040a <tcp_slowtmr+0x4fa>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f06f 010c 	mvn.w	r1, #12
 8010406:	68b8      	ldr	r0, [r7, #8]
 8010408:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801040a:	4b2b      	ldr	r3, [pc, #172]	@ (80104b8 <tcp_slowtmr+0x5a8>)
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d037      	beq.n	8010482 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8010412:	e590      	b.n	800ff36 <tcp_slowtmr+0x26>
      prev = pcb;
 8010414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010416:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801041e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010420:	7f1b      	ldrb	r3, [r3, #28]
 8010422:	3301      	adds	r3, #1
 8010424:	b2da      	uxtb	r2, r3
 8010426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010428:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801042a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042c:	7f1a      	ldrb	r2, [r3, #28]
 801042e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010430:	7f5b      	ldrb	r3, [r3, #29]
 8010432:	429a      	cmp	r2, r3
 8010434:	d325      	bcc.n	8010482 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8010436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010438:	2200      	movs	r2, #0
 801043a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801043c:	4b1e      	ldr	r3, [pc, #120]	@ (80104b8 <tcp_slowtmr+0x5a8>)
 801043e:	2200      	movs	r2, #0
 8010440:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00b      	beq.n	8010464 <tcp_slowtmr+0x554>
 801044c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010454:	6912      	ldr	r2, [r2, #16]
 8010456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010458:	4610      	mov	r0, r2
 801045a:	4798      	blx	r3
 801045c:	4603      	mov	r3, r0
 801045e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010462:	e002      	b.n	801046a <tcp_slowtmr+0x55a>
 8010464:	2300      	movs	r3, #0
 8010466:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801046a:	4b13      	ldr	r3, [pc, #76]	@ (80104b8 <tcp_slowtmr+0x5a8>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f47f ad60 	bne.w	800ff34 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010474:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010478:	2b00      	cmp	r3, #0
 801047a:	d102      	bne.n	8010482 <tcp_slowtmr+0x572>
          tcp_output(prev);
 801047c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801047e:	f003 fb79 	bl	8013b74 <tcp_output>
  while (pcb != NULL) {
 8010482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010484:	2b00      	cmp	r3, #0
 8010486:	f47f ad5c 	bne.w	800ff42 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801048e:	4b0b      	ldr	r3, [pc, #44]	@ (80104bc <tcp_slowtmr+0x5ac>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010494:	e067      	b.n	8010566 <tcp_slowtmr+0x656>
 8010496:	bf00      	nop
 8010498:	2000c6a8 	.word	0x2000c6a8
 801049c:	10624dd3 	.word	0x10624dd3
 80104a0:	000124f8 	.word	0x000124f8
 80104a4:	2000c6b4 	.word	0x2000c6b4
 80104a8:	0801b214 	.word	0x0801b214
 80104ac:	0801b64c 	.word	0x0801b64c
 80104b0:	0801b258 	.word	0x0801b258
 80104b4:	0801b678 	.word	0x0801b678
 80104b8:	2000c6bc 	.word	0x2000c6bc
 80104bc:	2000c6b8 	.word	0x2000c6b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80104c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
 80104c4:	2b0a      	cmp	r3, #10
 80104c6:	d006      	beq.n	80104d6 <tcp_slowtmr+0x5c6>
 80104c8:	4b2b      	ldr	r3, [pc, #172]	@ (8010578 <tcp_slowtmr+0x668>)
 80104ca:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80104ce:	492b      	ldr	r1, [pc, #172]	@ (801057c <tcp_slowtmr+0x66c>)
 80104d0:	482b      	ldr	r0, [pc, #172]	@ (8010580 <tcp_slowtmr+0x670>)
 80104d2:	f008 f84d 	bl	8018570 <iprintf>
    pcb_remove = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104dc:	4b29      	ldr	r3, [pc, #164]	@ (8010584 <tcp_slowtmr+0x674>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	2bf0      	cmp	r3, #240	@ 0xf0
 80104e8:	d904      	bls.n	80104f4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80104ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104ee:	3301      	adds	r3, #1
 80104f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80104f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d02f      	beq.n	801055c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80104fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104fe:	f000 fb2b 	bl	8010b58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010504:	2b00      	cmp	r3, #0
 8010506:	d010      	beq.n	801052a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010508:	4b1f      	ldr	r3, [pc, #124]	@ (8010588 <tcp_slowtmr+0x678>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801050e:	429a      	cmp	r2, r3
 8010510:	d106      	bne.n	8010520 <tcp_slowtmr+0x610>
 8010512:	4b19      	ldr	r3, [pc, #100]	@ (8010578 <tcp_slowtmr+0x668>)
 8010514:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010518:	491c      	ldr	r1, [pc, #112]	@ (801058c <tcp_slowtmr+0x67c>)
 801051a:	4819      	ldr	r0, [pc, #100]	@ (8010580 <tcp_slowtmr+0x670>)
 801051c:	f008 f828 	bl	8018570 <iprintf>
        prev->next = pcb->next;
 8010520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010522:	68da      	ldr	r2, [r3, #12]
 8010524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010526:	60da      	str	r2, [r3, #12]
 8010528:	e00f      	b.n	801054a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801052a:	4b17      	ldr	r3, [pc, #92]	@ (8010588 <tcp_slowtmr+0x678>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010530:	429a      	cmp	r2, r3
 8010532:	d006      	beq.n	8010542 <tcp_slowtmr+0x632>
 8010534:	4b10      	ldr	r3, [pc, #64]	@ (8010578 <tcp_slowtmr+0x668>)
 8010536:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801053a:	4915      	ldr	r1, [pc, #84]	@ (8010590 <tcp_slowtmr+0x680>)
 801053c:	4810      	ldr	r0, [pc, #64]	@ (8010580 <tcp_slowtmr+0x670>)
 801053e:	f008 f817 	bl	8018570 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	4a10      	ldr	r2, [pc, #64]	@ (8010588 <tcp_slowtmr+0x678>)
 8010548:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801054a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801054e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010554:	69f8      	ldr	r0, [r7, #28]
 8010556:	f7ff f93d 	bl	800f7d4 <tcp_free>
 801055a:	e004      	b.n	8010566 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801055c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801055e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1a9      	bne.n	80104c0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801056c:	bf00      	nop
 801056e:	bf00      	nop
 8010570:	3730      	adds	r7, #48	@ 0x30
 8010572:	46bd      	mov	sp, r7
 8010574:	bdb0      	pop	{r4, r5, r7, pc}
 8010576:	bf00      	nop
 8010578:	0801b214 	.word	0x0801b214
 801057c:	0801b6a4 	.word	0x0801b6a4
 8010580:	0801b258 	.word	0x0801b258
 8010584:	2000c6a8 	.word	0x2000c6a8
 8010588:	2000c6b8 	.word	0x2000c6b8
 801058c:	0801b6d4 	.word	0x0801b6d4
 8010590:	0801b6fc 	.word	0x0801b6fc

08010594 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801059a:	4b2d      	ldr	r3, [pc, #180]	@ (8010650 <tcp_fasttmr+0xbc>)
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	3301      	adds	r3, #1
 80105a0:	b2da      	uxtb	r2, r3
 80105a2:	4b2b      	ldr	r3, [pc, #172]	@ (8010650 <tcp_fasttmr+0xbc>)
 80105a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80105a6:	4b2b      	ldr	r3, [pc, #172]	@ (8010654 <tcp_fasttmr+0xc0>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80105ac:	e048      	b.n	8010640 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7f9a      	ldrb	r2, [r3, #30]
 80105b2:	4b27      	ldr	r3, [pc, #156]	@ (8010650 <tcp_fasttmr+0xbc>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d03f      	beq.n	801063a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80105ba:	4b25      	ldr	r3, [pc, #148]	@ (8010650 <tcp_fasttmr+0xbc>)
 80105bc:	781a      	ldrb	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8b5b      	ldrh	r3, [r3, #26]
 80105c6:	f003 0301 	and.w	r3, r3, #1
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d010      	beq.n	80105f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	8b5b      	ldrh	r3, [r3, #26]
 80105d2:	f043 0302 	orr.w	r3, r3, #2
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f003 fac9 	bl	8013b74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	8b5b      	ldrh	r3, [r3, #26]
 80105e6:	f023 0303 	bic.w	r3, r3, #3
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	8b5b      	ldrh	r3, [r3, #26]
 80105f4:	f003 0308 	and.w	r3, r3, #8
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d009      	beq.n	8010610 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f023 0308 	bic.w	r3, r3, #8
 8010604:	b29a      	uxth	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff fa76 	bl	800fafc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00a      	beq.n	8010634 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801061e:	4b0e      	ldr	r3, [pc, #56]	@ (8010658 <tcp_fasttmr+0xc4>)
 8010620:	2200      	movs	r2, #0
 8010622:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f819 	bl	801065c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801062a:	4b0b      	ldr	r3, [pc, #44]	@ (8010658 <tcp_fasttmr+0xc4>)
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d000      	beq.n	8010634 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010632:	e7b8      	b.n	80105a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	607b      	str	r3, [r7, #4]
 8010638:	e002      	b.n	8010640 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1b3      	bne.n	80105ae <tcp_fasttmr+0x1a>
    }
  }
}
 8010646:	bf00      	nop
 8010648:	bf00      	nop
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	2000c6be 	.word	0x2000c6be
 8010654:	2000c6b4 	.word	0x2000c6b4
 8010658:	2000c6bc 	.word	0x2000c6bc

0801065c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801065c:	b590      	push	{r4, r7, lr}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <tcp_process_refused_data+0x22>
 801066a:	4b37      	ldr	r3, [pc, #220]	@ (8010748 <tcp_process_refused_data+0xec>)
 801066c:	f240 6209 	movw	r2, #1545	@ 0x609
 8010670:	4936      	ldr	r1, [pc, #216]	@ (801074c <tcp_process_refused_data+0xf0>)
 8010672:	4837      	ldr	r0, [pc, #220]	@ (8010750 <tcp_process_refused_data+0xf4>)
 8010674:	f007 ff7c 	bl	8018570 <iprintf>
 8010678:	f06f 030f 	mvn.w	r3, #15
 801067c:	e060      	b.n	8010740 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010682:	7b5b      	ldrb	r3, [r3, #13]
 8010684:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801068a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <tcp_process_refused_data+0x58>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6918      	ldr	r0, [r3, #16]
 80106a6:	2300      	movs	r3, #0
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	6879      	ldr	r1, [r7, #4]
 80106ac:	47a0      	blx	r4
 80106ae:	4603      	mov	r3, r0
 80106b0:	73fb      	strb	r3, [r7, #15]
 80106b2:	e007      	b.n	80106c4 <tcp_process_refused_data+0x68>
 80106b4:	2300      	movs	r3, #0
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	2000      	movs	r0, #0
 80106bc:	f000 f8a4 	bl	8010808 <tcp_recv_null>
 80106c0:	4603      	mov	r3, r0
 80106c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d12a      	bne.n	8010722 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	f003 0320 	and.w	r3, r3, #32
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d033      	beq.n	801073e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80106de:	d005      	beq.n	80106ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106e4:	3301      	adds	r3, #1
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00b      	beq.n	801070e <tcp_process_refused_data+0xb2>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6918      	ldr	r0, [r3, #16]
 8010700:	2300      	movs	r3, #0
 8010702:	2200      	movs	r2, #0
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	47a0      	blx	r4
 8010708:	4603      	mov	r3, r0
 801070a:	73fb      	strb	r3, [r7, #15]
 801070c:	e001      	b.n	8010712 <tcp_process_refused_data+0xb6>
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010716:	f113 0f0d 	cmn.w	r3, #13
 801071a:	d110      	bne.n	801073e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801071c:	f06f 030c 	mvn.w	r3, #12
 8010720:	e00e      	b.n	8010740 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010726:	f113 0f0d 	cmn.w	r3, #13
 801072a:	d102      	bne.n	8010732 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801072c:	f06f 030c 	mvn.w	r3, #12
 8010730:	e006      	b.n	8010740 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010738:	f06f 0304 	mvn.w	r3, #4
 801073c:	e000      	b.n	8010740 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}
 8010748:	0801b214 	.word	0x0801b214
 801074c:	0801b724 	.word	0x0801b724
 8010750:	0801b258 	.word	0x0801b258

08010754 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801075c:	e007      	b.n	801076e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 f80a 	bl	801077e <tcp_seg_free>
    seg = next;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1f4      	bne.n	801075e <tcp_segs_free+0xa>
  }
}
 8010774:	bf00      	nop
 8010776:	bf00      	nop
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d00c      	beq.n	80107a6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d004      	beq.n	801079e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe fd6f 	bl	800f27c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	2003      	movs	r0, #3
 80107a2:	f7fd fef9 	bl	800e598 <memp_free>
  }
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
	...

080107b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d106      	bne.n	80107cc <tcp_seg_copy+0x1c>
 80107be:	4b0f      	ldr	r3, [pc, #60]	@ (80107fc <tcp_seg_copy+0x4c>)
 80107c0:	f240 6282 	movw	r2, #1666	@ 0x682
 80107c4:	490e      	ldr	r1, [pc, #56]	@ (8010800 <tcp_seg_copy+0x50>)
 80107c6:	480f      	ldr	r0, [pc, #60]	@ (8010804 <tcp_seg_copy+0x54>)
 80107c8:	f007 fed2 	bl	8018570 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80107cc:	2003      	movs	r0, #3
 80107ce:	f7fd fe6d 	bl	800e4ac <memp_malloc>
 80107d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <tcp_seg_copy+0x2e>
    return NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	e00a      	b.n	80107f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80107de:	2210      	movs	r2, #16
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f008 f84d 	bl	8018882 <memcpy>
  pbuf_ref(cseg->p);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe fdeb 	bl	800f3c8 <pbuf_ref>
  return cseg;
 80107f2:	68fb      	ldr	r3, [r7, #12]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	0801b214 	.word	0x0801b214
 8010800:	0801b768 	.word	0x0801b768
 8010804:	0801b258 	.word	0x0801b258

08010808 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d109      	bne.n	8010830 <tcp_recv_null+0x28>
 801081c:	4b12      	ldr	r3, [pc, #72]	@ (8010868 <tcp_recv_null+0x60>)
 801081e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010822:	4912      	ldr	r1, [pc, #72]	@ (801086c <tcp_recv_null+0x64>)
 8010824:	4812      	ldr	r0, [pc, #72]	@ (8010870 <tcp_recv_null+0x68>)
 8010826:	f007 fea3 	bl	8018570 <iprintf>
 801082a:	f06f 030f 	mvn.w	r3, #15
 801082e:	e016      	b.n	801085e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d009      	beq.n	801084a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	891b      	ldrh	r3, [r3, #8]
 801083a:	4619      	mov	r1, r3
 801083c:	68b8      	ldr	r0, [r7, #8]
 801083e:	f7ff fb17 	bl	800fe70 <tcp_recved>
    pbuf_free(p);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7fe fd1a 	bl	800f27c <pbuf_free>
 8010848:	e008      	b.n	801085c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801084a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d104      	bne.n	801085c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010852:	68b8      	ldr	r0, [r7, #8]
 8010854:	f7ff f9bc 	bl	800fbd0 <tcp_close>
 8010858:	4603      	mov	r3, r0
 801085a:	e000      	b.n	801085e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	0801b214 	.word	0x0801b214
 801086c:	0801b784 	.word	0x0801b784
 8010870:	0801b258 	.word	0x0801b258

08010874 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010882:	2b00      	cmp	r3, #0
 8010884:	db01      	blt.n	801088a <tcp_kill_prio+0x16>
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	e000      	b.n	801088c <tcp_kill_prio+0x18>
 801088a:	237f      	movs	r3, #127	@ 0x7f
 801088c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801088e:	7afb      	ldrb	r3, [r7, #11]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d034      	beq.n	80108fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	3b01      	subs	r3, #1
 8010898:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a2:	4b19      	ldr	r3, [pc, #100]	@ (8010908 <tcp_kill_prio+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	617b      	str	r3, [r7, #20]
 80108a8:	e01f      	b.n	80108ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	7d5b      	ldrb	r3, [r3, #21]
 80108ae:	7afa      	ldrb	r2, [r7, #11]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d80c      	bhi.n	80108ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80108b8:	7afa      	ldrb	r2, [r7, #11]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d112      	bne.n	80108e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108be:	4b13      	ldr	r3, [pc, #76]	@ (801090c <tcp_kill_prio+0x98>)
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d80a      	bhi.n	80108e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80108ce:	4b0f      	ldr	r3, [pc, #60]	@ (801090c <tcp_kill_prio+0x98>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	7d5b      	ldrb	r3, [r3, #21]
 80108e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	617b      	str	r3, [r7, #20]
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1dc      	bne.n	80108aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d004      	beq.n	8010900 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80108f6:	6938      	ldr	r0, [r7, #16]
 80108f8:	f7ff fa54 	bl	800fda4 <tcp_abort>
 80108fc:	e000      	b.n	8010900 <tcp_kill_prio+0x8c>
    return;
 80108fe:	bf00      	nop
  }
}
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	2000c6b4 	.word	0x2000c6b4
 801090c:	2000c6a8 	.word	0x2000c6a8

08010910 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	4603      	mov	r3, r0
 8010918:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	2b08      	cmp	r3, #8
 801091e:	d009      	beq.n	8010934 <tcp_kill_state+0x24>
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	2b09      	cmp	r3, #9
 8010924:	d006      	beq.n	8010934 <tcp_kill_state+0x24>
 8010926:	4b1a      	ldr	r3, [pc, #104]	@ (8010990 <tcp_kill_state+0x80>)
 8010928:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801092c:	4919      	ldr	r1, [pc, #100]	@ (8010994 <tcp_kill_state+0x84>)
 801092e:	481a      	ldr	r0, [pc, #104]	@ (8010998 <tcp_kill_state+0x88>)
 8010930:	f007 fe1e 	bl	8018570 <iprintf>

  inactivity = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801093c:	4b17      	ldr	r3, [pc, #92]	@ (801099c <tcp_kill_state+0x8c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	617b      	str	r3, [r7, #20]
 8010942:	e017      	b.n	8010974 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	7d1b      	ldrb	r3, [r3, #20]
 8010948:	79fa      	ldrb	r2, [r7, #7]
 801094a:	429a      	cmp	r2, r3
 801094c:	d10f      	bne.n	801096e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801094e:	4b14      	ldr	r3, [pc, #80]	@ (80109a0 <tcp_kill_state+0x90>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	429a      	cmp	r2, r3
 801095c:	d807      	bhi.n	801096e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801095e:	4b10      	ldr	r3, [pc, #64]	@ (80109a0 <tcp_kill_state+0x90>)
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e4      	bne.n	8010944 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d003      	beq.n	8010988 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010980:	2100      	movs	r1, #0
 8010982:	6938      	ldr	r0, [r7, #16]
 8010984:	f7ff f950 	bl	800fc28 <tcp_abandon>
  }
}
 8010988:	bf00      	nop
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	0801b214 	.word	0x0801b214
 8010994:	0801b7a0 	.word	0x0801b7a0
 8010998:	0801b258 	.word	0x0801b258
 801099c:	2000c6b4 	.word	0x2000c6b4
 80109a0:	2000c6a8 	.word	0x2000c6a8

080109a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80109ae:	2300      	movs	r3, #0
 80109b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109b2:	4b12      	ldr	r3, [pc, #72]	@ (80109fc <tcp_kill_timewait+0x58>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	e012      	b.n	80109e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109ba:	4b11      	ldr	r3, [pc, #68]	@ (8010a00 <tcp_kill_timewait+0x5c>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d807      	bhi.n	80109da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80109ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010a00 <tcp_kill_timewait+0x5c>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	60fb      	str	r3, [r7, #12]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1e9      	bne.n	80109ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80109ec:	68b8      	ldr	r0, [r7, #8]
 80109ee:	f7ff f9d9 	bl	800fda4 <tcp_abort>
  }
}
 80109f2:	bf00      	nop
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	2000c6b8 	.word	0x2000c6b8
 8010a00:	2000c6a8 	.word	0x2000c6a8

08010a04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010a0a:	4b10      	ldr	r3, [pc, #64]	@ (8010a4c <tcp_handle_closepend+0x48>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010a10:	e014      	b.n	8010a3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	8b5b      	ldrh	r3, [r3, #26]
 8010a1c:	f003 0308 	and.w	r3, r3, #8
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d009      	beq.n	8010a38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f023 0308 	bic.w	r3, r3, #8
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff f862 	bl	800fafc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1e7      	bne.n	8010a12 <tcp_handle_closepend+0xe>
  }
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	2000c6b4 	.word	0x2000c6b4

08010a50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	f7fd fd26 	bl	800e4ac <memp_malloc>
 8010a60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d126      	bne.n	8010ab6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010a68:	f7ff ffcc 	bl	8010a04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010a6c:	f7ff ff9a 	bl	80109a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a70:	2001      	movs	r0, #1
 8010a72:	f7fd fd1b 	bl	800e4ac <memp_malloc>
 8010a76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d11b      	bne.n	8010ab6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010a7e:	2009      	movs	r0, #9
 8010a80:	f7ff ff46 	bl	8010910 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a84:	2001      	movs	r0, #1
 8010a86:	f7fd fd11 	bl	800e4ac <memp_malloc>
 8010a8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d111      	bne.n	8010ab6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010a92:	2008      	movs	r0, #8
 8010a94:	f7ff ff3c 	bl	8010910 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a98:	2001      	movs	r0, #1
 8010a9a:	f7fd fd07 	bl	800e4ac <memp_malloc>
 8010a9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d107      	bne.n	8010ab6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff fee3 	bl	8010874 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010aae:	2001      	movs	r0, #1
 8010ab0:	f7fd fcfc 	bl	800e4ac <memp_malloc>
 8010ab4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d03f      	beq.n	8010b3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010abc:	229c      	movs	r2, #156	@ 0x9c
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f007 fe0a 	bl	80186da <memset>
    pcb->prio = prio;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	79fa      	ldrb	r2, [r7, #7]
 8010aca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010ad2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	22ff      	movs	r2, #255	@ 0xff
 8010aea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010af2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2206      	movs	r2, #6
 8010af8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2206      	movs	r2, #6
 8010b00:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b08:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010b12:	4b0d      	ldr	r3, [pc, #52]	@ (8010b48 <tcp_alloc+0xf8>)
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b4c <tcp_alloc+0xfc>)
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010b28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4a08      	ldr	r2, [pc, #32]	@ (8010b50 <tcp_alloc+0x100>)
 8010b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	4a07      	ldr	r2, [pc, #28]	@ (8010b54 <tcp_alloc+0x104>)
 8010b38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	2000c6a8 	.word	0x2000c6a8
 8010b4c:	2000c6be 	.word	0x2000c6be
 8010b50:	08010809 	.word	0x08010809
 8010b54:	006ddd00 	.word	0x006ddd00

08010b58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d107      	bne.n	8010b76 <tcp_pcb_purge+0x1e>
 8010b66:	4b21      	ldr	r3, [pc, #132]	@ (8010bec <tcp_pcb_purge+0x94>)
 8010b68:	f640 0251 	movw	r2, #2129	@ 0x851
 8010b6c:	4920      	ldr	r1, [pc, #128]	@ (8010bf0 <tcp_pcb_purge+0x98>)
 8010b6e:	4821      	ldr	r0, [pc, #132]	@ (8010bf4 <tcp_pcb_purge+0x9c>)
 8010b70:	f007 fcfe 	bl	8018570 <iprintf>
 8010b74:	e037      	b.n	8010be6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d033      	beq.n	8010be6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010b82:	2b0a      	cmp	r3, #10
 8010b84:	d02f      	beq.n	8010be6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d02b      	beq.n	8010be6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d007      	beq.n	8010ba6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fb6e 	bl	800f27c <pbuf_free>
      pcb->refused_data = NULL;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f986 	bl	8010ec0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bba:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7ff fdc7 	bl	8010754 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7ff fdc2 	bl	8010754 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	0801b214 	.word	0x0801b214
 8010bf0:	0801b860 	.word	0x0801b860
 8010bf4:	0801b258 	.word	0x0801b258

08010bf8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d106      	bne.n	8010c16 <tcp_pcb_remove+0x1e>
 8010c08:	4b3e      	ldr	r3, [pc, #248]	@ (8010d04 <tcp_pcb_remove+0x10c>)
 8010c0a:	f640 0283 	movw	r2, #2179	@ 0x883
 8010c0e:	493e      	ldr	r1, [pc, #248]	@ (8010d08 <tcp_pcb_remove+0x110>)
 8010c10:	483e      	ldr	r0, [pc, #248]	@ (8010d0c <tcp_pcb_remove+0x114>)
 8010c12:	f007 fcad 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <tcp_pcb_remove+0x32>
 8010c1c:	4b39      	ldr	r3, [pc, #228]	@ (8010d04 <tcp_pcb_remove+0x10c>)
 8010c1e:	f640 0284 	movw	r2, #2180	@ 0x884
 8010c22:	493b      	ldr	r1, [pc, #236]	@ (8010d10 <tcp_pcb_remove+0x118>)
 8010c24:	4839      	ldr	r0, [pc, #228]	@ (8010d0c <tcp_pcb_remove+0x114>)
 8010c26:	f007 fca3 	bl	8018570 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d105      	bne.n	8010c40 <tcp_pcb_remove+0x48>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	e013      	b.n	8010c68 <tcp_pcb_remove+0x70>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	60fb      	str	r3, [r7, #12]
 8010c46:	e00c      	b.n	8010c62 <tcp_pcb_remove+0x6a>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d104      	bne.n	8010c5c <tcp_pcb_remove+0x64>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	e005      	b.n	8010c68 <tcp_pcb_remove+0x70>
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	60fb      	str	r3, [r7, #12]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1ef      	bne.n	8010c48 <tcp_pcb_remove+0x50>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010c6e:	6838      	ldr	r0, [r7, #0]
 8010c70:	f7ff ff72 	bl	8010b58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	7d1b      	ldrb	r3, [r3, #20]
 8010c78:	2b0a      	cmp	r3, #10
 8010c7a:	d013      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d00f      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	8b5b      	ldrh	r3, [r3, #26]
 8010c88:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d009      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	8b5b      	ldrh	r3, [r3, #26]
 8010c94:	f043 0302 	orr.w	r3, r3, #2
 8010c98:	b29a      	uxth	r2, r3
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c9e:	6838      	ldr	r0, [r7, #0]
 8010ca0:	f002 ff68 	bl	8013b74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d020      	beq.n	8010cee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <tcp_pcb_remove+0xca>
 8010cb4:	4b13      	ldr	r3, [pc, #76]	@ (8010d04 <tcp_pcb_remove+0x10c>)
 8010cb6:	f640 0293 	movw	r2, #2195	@ 0x893
 8010cba:	4916      	ldr	r1, [pc, #88]	@ (8010d14 <tcp_pcb_remove+0x11c>)
 8010cbc:	4813      	ldr	r0, [pc, #76]	@ (8010d0c <tcp_pcb_remove+0x114>)
 8010cbe:	f007 fc57 	bl	8018570 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d006      	beq.n	8010cd8 <tcp_pcb_remove+0xe0>
 8010cca:	4b0e      	ldr	r3, [pc, #56]	@ (8010d04 <tcp_pcb_remove+0x10c>)
 8010ccc:	f640 0294 	movw	r2, #2196	@ 0x894
 8010cd0:	4911      	ldr	r1, [pc, #68]	@ (8010d18 <tcp_pcb_remove+0x120>)
 8010cd2:	480e      	ldr	r0, [pc, #56]	@ (8010d0c <tcp_pcb_remove+0x114>)
 8010cd4:	f007 fc4c 	bl	8018570 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d006      	beq.n	8010cee <tcp_pcb_remove+0xf6>
 8010ce0:	4b08      	ldr	r3, [pc, #32]	@ (8010d04 <tcp_pcb_remove+0x10c>)
 8010ce2:	f640 0296 	movw	r2, #2198	@ 0x896
 8010ce6:	490d      	ldr	r1, [pc, #52]	@ (8010d1c <tcp_pcb_remove+0x124>)
 8010ce8:	4808      	ldr	r0, [pc, #32]	@ (8010d0c <tcp_pcb_remove+0x114>)
 8010cea:	f007 fc41 	bl	8018570 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010cfa:	bf00      	nop
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801b214 	.word	0x0801b214
 8010d08:	0801b87c 	.word	0x0801b87c
 8010d0c:	0801b258 	.word	0x0801b258
 8010d10:	0801b898 	.word	0x0801b898
 8010d14:	0801b8b8 	.word	0x0801b8b8
 8010d18:	0801b8d0 	.word	0x0801b8d0
 8010d1c:	0801b8ec 	.word	0x0801b8ec

08010d20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <tcp_next_iss+0x1c>
 8010d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8010d58 <tcp_next_iss+0x38>)
 8010d30:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010d34:	4909      	ldr	r1, [pc, #36]	@ (8010d5c <tcp_next_iss+0x3c>)
 8010d36:	480a      	ldr	r0, [pc, #40]	@ (8010d60 <tcp_next_iss+0x40>)
 8010d38:	f007 fc1a 	bl	8018570 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010d3c:	4b09      	ldr	r3, [pc, #36]	@ (8010d64 <tcp_next_iss+0x44>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	4b09      	ldr	r3, [pc, #36]	@ (8010d68 <tcp_next_iss+0x48>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	4a07      	ldr	r2, [pc, #28]	@ (8010d64 <tcp_next_iss+0x44>)
 8010d48:	6013      	str	r3, [r2, #0]
  return iss;
 8010d4a:	4b06      	ldr	r3, [pc, #24]	@ (8010d64 <tcp_next_iss+0x44>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	0801b214 	.word	0x0801b214
 8010d5c:	0801b904 	.word	0x0801b904
 8010d60:	0801b258 	.word	0x0801b258
 8010d64:	200000a0 	.word	0x200000a0
 8010d68:	2000c6a8 	.word	0x2000c6a8

08010d6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d106      	bne.n	8010d8e <tcp_eff_send_mss_netif+0x22>
 8010d80:	4b14      	ldr	r3, [pc, #80]	@ (8010dd4 <tcp_eff_send_mss_netif+0x68>)
 8010d82:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010d86:	4914      	ldr	r1, [pc, #80]	@ (8010dd8 <tcp_eff_send_mss_netif+0x6c>)
 8010d88:	4814      	ldr	r0, [pc, #80]	@ (8010ddc <tcp_eff_send_mss_netif+0x70>)
 8010d8a:	f007 fbf1 	bl	8018570 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010d94:	89fb      	ldrh	r3, [r7, #14]
 8010d96:	e019      	b.n	8010dcc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010d9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010d9e:	8afb      	ldrh	r3, [r7, #22]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d012      	beq.n	8010dca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010da4:	2328      	movs	r3, #40	@ 0x28
 8010da6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010da8:	8afa      	ldrh	r2, [r7, #22]
 8010daa:	8abb      	ldrh	r3, [r7, #20]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d904      	bls.n	8010dba <tcp_eff_send_mss_netif+0x4e>
 8010db0:	8afa      	ldrh	r2, [r7, #22]
 8010db2:	8abb      	ldrh	r3, [r7, #20]
 8010db4:	1ad3      	subs	r3, r2, r3
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	e000      	b.n	8010dbc <tcp_eff_send_mss_netif+0x50>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010dbe:	8a7a      	ldrh	r2, [r7, #18]
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	bf28      	it	cs
 8010dc6:	4613      	movcs	r3, r2
 8010dc8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010dca:	89fb      	ldrh	r3, [r7, #14]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3718      	adds	r7, #24
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	0801b214 	.word	0x0801b214
 8010dd8:	0801b920 	.word	0x0801b920
 8010ddc:	0801b258 	.word	0x0801b258

08010de0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d119      	bne.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010df4:	4b10      	ldr	r3, [pc, #64]	@ (8010e38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010df6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010dfa:	4910      	ldr	r1, [pc, #64]	@ (8010e3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010dfc:	4810      	ldr	r0, [pc, #64]	@ (8010e40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010dfe:	f007 fbb7 	bl	8018570 <iprintf>

  while (pcb != NULL) {
 8010e02:	e011      	b.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d108      	bne.n	8010e22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f7fe ffc4 	bl	800fda4 <tcp_abort>
      pcb = next;
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	60fb      	str	r3, [r7, #12]
 8010e20:	e002      	b.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d1ea      	bne.n	8010e04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010e2e:	bf00      	nop
 8010e30:	bf00      	nop
 8010e32:	3710      	adds	r7, #16
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	0801b214 	.word	0x0801b214
 8010e3c:	0801b948 	.word	0x0801b948
 8010e40:	0801b258 	.word	0x0801b258

08010e44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d02a      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d026      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010e5c:	4b15      	ldr	r3, [pc, #84]	@ (8010eb4 <tcp_netif_ip_addr_changed+0x70>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4619      	mov	r1, r3
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7ff ffbc 	bl	8010de0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010e68:	4b13      	ldr	r3, [pc, #76]	@ (8010eb8 <tcp_netif_ip_addr_changed+0x74>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff ffb6 	bl	8010de0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d017      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d013      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e82:	4b0e      	ldr	r3, [pc, #56]	@ (8010ebc <tcp_netif_ip_addr_changed+0x78>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	60fb      	str	r3, [r7, #12]
 8010e88:	e00c      	b.n	8010ea4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d103      	bne.n	8010e9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1ef      	bne.n	8010e8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010eaa:	bf00      	nop
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	2000c6b4 	.word	0x2000c6b4
 8010eb8:	2000c6ac 	.word	0x2000c6ac
 8010ebc:	2000c6b0 	.word	0x2000c6b0

08010ec0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d007      	beq.n	8010ee0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fc3d 	bl	8010754 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ee8:	b590      	push	{r4, r7, lr}
 8010eea:	b08d      	sub	sp, #52	@ 0x34
 8010eec:	af04      	add	r7, sp, #16
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d105      	bne.n	8010f04 <tcp_input+0x1c>
 8010ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8011168 <tcp_input+0x280>)
 8010efa:	2283      	movs	r2, #131	@ 0x83
 8010efc:	499b      	ldr	r1, [pc, #620]	@ (801116c <tcp_input+0x284>)
 8010efe:	489c      	ldr	r0, [pc, #624]	@ (8011170 <tcp_input+0x288>)
 8010f00:	f007 fb36 	bl	8018570 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	4a9a      	ldr	r2, [pc, #616]	@ (8011174 <tcp_input+0x28c>)
 8010f0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	895b      	ldrh	r3, [r3, #10]
 8010f10:	2b13      	cmp	r3, #19
 8010f12:	f240 83d1 	bls.w	80116b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f16:	4b98      	ldr	r3, [pc, #608]	@ (8011178 <tcp_input+0x290>)
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	4a97      	ldr	r2, [pc, #604]	@ (8011178 <tcp_input+0x290>)
 8010f1c:	6812      	ldr	r2, [r2, #0]
 8010f1e:	4611      	mov	r1, r2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f005 fc0f 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f040 83c7 	bne.w	80116bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f2e:	4b92      	ldr	r3, [pc, #584]	@ (8011178 <tcp_input+0x290>)
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f36:	2be0      	cmp	r3, #224	@ 0xe0
 8010f38:	f000 83c0 	beq.w	80116bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8011174 <tcp_input+0x28c>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fc fdd9 	bl	800dafc <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	0b1b      	lsrs	r3, r3, #12
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010f56:	7cbb      	ldrb	r3, [r7, #18]
 8010f58:	2b13      	cmp	r3, #19
 8010f5a:	f240 83b1 	bls.w	80116c0 <tcp_input+0x7d8>
 8010f5e:	7cbb      	ldrb	r3, [r7, #18]
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	891b      	ldrh	r3, [r3, #8]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	f200 83aa 	bhi.w	80116c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010f6c:	7cbb      	ldrb	r3, [r7, #18]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	3b14      	subs	r3, #20
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	4b81      	ldr	r3, [pc, #516]	@ (801117c <tcp_input+0x294>)
 8010f76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010f78:	4b81      	ldr	r3, [pc, #516]	@ (8011180 <tcp_input+0x298>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	895a      	ldrh	r2, [r3, #10]
 8010f82:	7cbb      	ldrb	r3, [r7, #18]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d309      	bcc.n	8010f9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010f8a:	4b7c      	ldr	r3, [pc, #496]	@ (801117c <tcp_input+0x294>)
 8010f8c:	881a      	ldrh	r2, [r3, #0]
 8010f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8011184 <tcp_input+0x29c>)
 8010f90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010f92:	7cbb      	ldrb	r3, [r7, #18]
 8010f94:	4619      	mov	r1, r3
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7fe f8ea 	bl	800f170 <pbuf_remove_header>
 8010f9c:	e04e      	b.n	801103c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d105      	bne.n	8010fb2 <tcp_input+0xca>
 8010fa6:	4b70      	ldr	r3, [pc, #448]	@ (8011168 <tcp_input+0x280>)
 8010fa8:	22c2      	movs	r2, #194	@ 0xc2
 8010faa:	4977      	ldr	r1, [pc, #476]	@ (8011188 <tcp_input+0x2a0>)
 8010fac:	4870      	ldr	r0, [pc, #448]	@ (8011170 <tcp_input+0x288>)
 8010fae:	f007 fadf 	bl	8018570 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010fb2:	2114      	movs	r1, #20
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7fe f8db 	bl	800f170 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	895a      	ldrh	r2, [r3, #10]
 8010fbe:	4b71      	ldr	r3, [pc, #452]	@ (8011184 <tcp_input+0x29c>)
 8010fc0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010fc2:	4b6e      	ldr	r3, [pc, #440]	@ (801117c <tcp_input+0x294>)
 8010fc4:	881a      	ldrh	r2, [r3, #0]
 8010fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8011184 <tcp_input+0x29c>)
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010fce:	4b6d      	ldr	r3, [pc, #436]	@ (8011184 <tcp_input+0x29c>)
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7fe f8cb 	bl	800f170 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	895b      	ldrh	r3, [r3, #10]
 8010fe0:	8a3a      	ldrh	r2, [r7, #16]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	f200 836e 	bhi.w	80116c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	4a64      	ldr	r2, [pc, #400]	@ (8011180 <tcp_input+0x298>)
 8010ff0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	8a3a      	ldrh	r2, [r7, #16]
 8010ff8:	4611      	mov	r1, r2
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe f8b8 	bl	800f170 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	891a      	ldrh	r2, [r3, #8]
 8011004:	8a3b      	ldrh	r3, [r7, #16]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	b29a      	uxth	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	895b      	ldrh	r3, [r3, #10]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d005      	beq.n	8011022 <tcp_input+0x13a>
 8011016:	4b54      	ldr	r3, [pc, #336]	@ (8011168 <tcp_input+0x280>)
 8011018:	22df      	movs	r2, #223	@ 0xdf
 801101a:	495c      	ldr	r1, [pc, #368]	@ (801118c <tcp_input+0x2a4>)
 801101c:	4854      	ldr	r0, [pc, #336]	@ (8011170 <tcp_input+0x288>)
 801101e:	f007 faa7 	bl	8018570 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	891a      	ldrh	r2, [r3, #8]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	891b      	ldrh	r3, [r3, #8]
 801102c:	429a      	cmp	r2, r3
 801102e:	d005      	beq.n	801103c <tcp_input+0x154>
 8011030:	4b4d      	ldr	r3, [pc, #308]	@ (8011168 <tcp_input+0x280>)
 8011032:	22e0      	movs	r2, #224	@ 0xe0
 8011034:	4956      	ldr	r1, [pc, #344]	@ (8011190 <tcp_input+0x2a8>)
 8011036:	484e      	ldr	r0, [pc, #312]	@ (8011170 <tcp_input+0x288>)
 8011038:	f007 fa9a 	bl	8018570 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801103c:	4b4d      	ldr	r3, [pc, #308]	@ (8011174 <tcp_input+0x28c>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4a4b      	ldr	r2, [pc, #300]	@ (8011174 <tcp_input+0x28c>)
 8011046:	6814      	ldr	r4, [r2, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc fd57 	bl	800dafc <lwip_htons>
 801104e:	4603      	mov	r3, r0
 8011050:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011052:	4b48      	ldr	r3, [pc, #288]	@ (8011174 <tcp_input+0x28c>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	885b      	ldrh	r3, [r3, #2]
 8011058:	b29b      	uxth	r3, r3
 801105a:	4a46      	ldr	r2, [pc, #280]	@ (8011174 <tcp_input+0x28c>)
 801105c:	6814      	ldr	r4, [r2, #0]
 801105e:	4618      	mov	r0, r3
 8011060:	f7fc fd4c 	bl	800dafc <lwip_htons>
 8011064:	4603      	mov	r3, r0
 8011066:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011068:	4b42      	ldr	r3, [pc, #264]	@ (8011174 <tcp_input+0x28c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	4a41      	ldr	r2, [pc, #260]	@ (8011174 <tcp_input+0x28c>)
 8011070:	6814      	ldr	r4, [r2, #0]
 8011072:	4618      	mov	r0, r3
 8011074:	f7fc fd58 	bl	800db28 <lwip_htonl>
 8011078:	4603      	mov	r3, r0
 801107a:	6063      	str	r3, [r4, #4]
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	4a45      	ldr	r2, [pc, #276]	@ (8011194 <tcp_input+0x2ac>)
 8011080:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011082:	4b3c      	ldr	r3, [pc, #240]	@ (8011174 <tcp_input+0x28c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	4a3a      	ldr	r2, [pc, #232]	@ (8011174 <tcp_input+0x28c>)
 801108a:	6814      	ldr	r4, [r2, #0]
 801108c:	4618      	mov	r0, r3
 801108e:	f7fc fd4b 	bl	800db28 <lwip_htonl>
 8011092:	4603      	mov	r3, r0
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	4a3f      	ldr	r2, [pc, #252]	@ (8011198 <tcp_input+0x2b0>)
 801109a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801109c:	4b35      	ldr	r3, [pc, #212]	@ (8011174 <tcp_input+0x28c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	89db      	ldrh	r3, [r3, #14]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4a33      	ldr	r2, [pc, #204]	@ (8011174 <tcp_input+0x28c>)
 80110a6:	6814      	ldr	r4, [r2, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fc fd27 	bl	800dafc <lwip_htons>
 80110ae:	4603      	mov	r3, r0
 80110b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80110b2:	4b30      	ldr	r3, [pc, #192]	@ (8011174 <tcp_input+0x28c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	899b      	ldrh	r3, [r3, #12]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fc fd1e 	bl	800dafc <lwip_htons>
 80110c0:	4603      	mov	r3, r0
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	4b34      	ldr	r3, [pc, #208]	@ (801119c <tcp_input+0x2b4>)
 80110cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	891a      	ldrh	r2, [r3, #8]
 80110d2:	4b33      	ldr	r3, [pc, #204]	@ (80111a0 <tcp_input+0x2b8>)
 80110d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80110d6:	4b31      	ldr	r3, [pc, #196]	@ (801119c <tcp_input+0x2b4>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 0303 	and.w	r3, r3, #3
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00c      	beq.n	80110fc <tcp_input+0x214>
    tcplen++;
 80110e2:	4b2f      	ldr	r3, [pc, #188]	@ (80111a0 <tcp_input+0x2b8>)
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	3301      	adds	r3, #1
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	4b2d      	ldr	r3, [pc, #180]	@ (80111a0 <tcp_input+0x2b8>)
 80110ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	891a      	ldrh	r2, [r3, #8]
 80110f2:	4b2b      	ldr	r3, [pc, #172]	@ (80111a0 <tcp_input+0x2b8>)
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	f200 82e6 	bhi.w	80116c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011100:	4b28      	ldr	r3, [pc, #160]	@ (80111a4 <tcp_input+0x2bc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	61fb      	str	r3, [r7, #28]
 8011106:	e09d      	b.n	8011244 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d105      	bne.n	801111c <tcp_input+0x234>
 8011110:	4b15      	ldr	r3, [pc, #84]	@ (8011168 <tcp_input+0x280>)
 8011112:	22fb      	movs	r2, #251	@ 0xfb
 8011114:	4924      	ldr	r1, [pc, #144]	@ (80111a8 <tcp_input+0x2c0>)
 8011116:	4816      	ldr	r0, [pc, #88]	@ (8011170 <tcp_input+0x288>)
 8011118:	f007 fa2a 	bl	8018570 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	7d1b      	ldrb	r3, [r3, #20]
 8011120:	2b0a      	cmp	r3, #10
 8011122:	d105      	bne.n	8011130 <tcp_input+0x248>
 8011124:	4b10      	ldr	r3, [pc, #64]	@ (8011168 <tcp_input+0x280>)
 8011126:	22fc      	movs	r2, #252	@ 0xfc
 8011128:	4920      	ldr	r1, [pc, #128]	@ (80111ac <tcp_input+0x2c4>)
 801112a:	4811      	ldr	r0, [pc, #68]	@ (8011170 <tcp_input+0x288>)
 801112c:	f007 fa20 	bl	8018570 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	7d1b      	ldrb	r3, [r3, #20]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d105      	bne.n	8011144 <tcp_input+0x25c>
 8011138:	4b0b      	ldr	r3, [pc, #44]	@ (8011168 <tcp_input+0x280>)
 801113a:	22fd      	movs	r2, #253	@ 0xfd
 801113c:	491c      	ldr	r1, [pc, #112]	@ (80111b0 <tcp_input+0x2c8>)
 801113e:	480c      	ldr	r0, [pc, #48]	@ (8011170 <tcp_input+0x288>)
 8011140:	f007 fa16 	bl	8018570 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	7a1b      	ldrb	r3, [r3, #8]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d033      	beq.n	80111b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	7a1a      	ldrb	r2, [r3, #8]
 8011150:	4b09      	ldr	r3, [pc, #36]	@ (8011178 <tcp_input+0x290>)
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011158:	3301      	adds	r3, #1
 801115a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801115c:	429a      	cmp	r2, r3
 801115e:	d029      	beq.n	80111b4 <tcp_input+0x2cc>
      prev = pcb;
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	61bb      	str	r3, [r7, #24]
      continue;
 8011164:	e06b      	b.n	801123e <tcp_input+0x356>
 8011166:	bf00      	nop
 8011168:	0801b97c 	.word	0x0801b97c
 801116c:	0801b9b0 	.word	0x0801b9b0
 8011170:	0801b9c8 	.word	0x0801b9c8
 8011174:	2000c6d0 	.word	0x2000c6d0
 8011178:	20008f54 	.word	0x20008f54
 801117c:	2000c6d4 	.word	0x2000c6d4
 8011180:	2000c6d8 	.word	0x2000c6d8
 8011184:	2000c6d6 	.word	0x2000c6d6
 8011188:	0801b9f0 	.word	0x0801b9f0
 801118c:	0801ba00 	.word	0x0801ba00
 8011190:	0801ba0c 	.word	0x0801ba0c
 8011194:	2000c6e0 	.word	0x2000c6e0
 8011198:	2000c6e4 	.word	0x2000c6e4
 801119c:	2000c6ec 	.word	0x2000c6ec
 80111a0:	2000c6ea 	.word	0x2000c6ea
 80111a4:	2000c6b4 	.word	0x2000c6b4
 80111a8:	0801ba2c 	.word	0x0801ba2c
 80111ac:	0801ba54 	.word	0x0801ba54
 80111b0:	0801ba80 	.word	0x0801ba80
    }

    if (pcb->remote_port == tcphdr->src &&
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	8b1a      	ldrh	r2, [r3, #24]
 80111b8:	4b72      	ldr	r3, [pc, #456]	@ (8011384 <tcp_input+0x49c>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	881b      	ldrh	r3, [r3, #0]
 80111be:	b29b      	uxth	r3, r3
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d13a      	bne.n	801123a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	8ada      	ldrh	r2, [r3, #22]
 80111c8:	4b6e      	ldr	r3, [pc, #440]	@ (8011384 <tcp_input+0x49c>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	885b      	ldrh	r3, [r3, #2]
 80111ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d132      	bne.n	801123a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	685a      	ldr	r2, [r3, #4]
 80111d8:	4b6b      	ldr	r3, [pc, #428]	@ (8011388 <tcp_input+0x4a0>)
 80111da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80111dc:	429a      	cmp	r2, r3
 80111de:	d12c      	bne.n	801123a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	4b68      	ldr	r3, [pc, #416]	@ (8011388 <tcp_input+0x4a0>)
 80111e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d126      	bne.n	801123a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d106      	bne.n	8011204 <tcp_input+0x31c>
 80111f6:	4b65      	ldr	r3, [pc, #404]	@ (801138c <tcp_input+0x4a4>)
 80111f8:	f240 120d 	movw	r2, #269	@ 0x10d
 80111fc:	4964      	ldr	r1, [pc, #400]	@ (8011390 <tcp_input+0x4a8>)
 80111fe:	4865      	ldr	r0, [pc, #404]	@ (8011394 <tcp_input+0x4ac>)
 8011200:	f007 f9b6 	bl	8018570 <iprintf>
      if (prev != NULL) {
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00a      	beq.n	8011220 <tcp_input+0x338>
        prev->next = pcb->next;
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	68da      	ldr	r2, [r3, #12]
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011212:	4b61      	ldr	r3, [pc, #388]	@ (8011398 <tcp_input+0x4b0>)
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801121a:	4a5f      	ldr	r2, [pc, #380]	@ (8011398 <tcp_input+0x4b0>)
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	69fa      	ldr	r2, [r7, #28]
 8011226:	429a      	cmp	r2, r3
 8011228:	d111      	bne.n	801124e <tcp_input+0x366>
 801122a:	4b58      	ldr	r3, [pc, #352]	@ (801138c <tcp_input+0x4a4>)
 801122c:	f240 1215 	movw	r2, #277	@ 0x115
 8011230:	495a      	ldr	r1, [pc, #360]	@ (801139c <tcp_input+0x4b4>)
 8011232:	4858      	ldr	r0, [pc, #352]	@ (8011394 <tcp_input+0x4ac>)
 8011234:	f007 f99c 	bl	8018570 <iprintf>
      break;
 8011238:	e009      	b.n	801124e <tcp_input+0x366>
    }
    prev = pcb;
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	61fb      	str	r3, [r7, #28]
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	f47f af5e 	bne.w	8011108 <tcp_input+0x220>
 801124c:	e000      	b.n	8011250 <tcp_input+0x368>
      break;
 801124e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f040 80aa 	bne.w	80113ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011258:	4b51      	ldr	r3, [pc, #324]	@ (80113a0 <tcp_input+0x4b8>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	e03f      	b.n	80112e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	7d1b      	ldrb	r3, [r3, #20]
 8011264:	2b0a      	cmp	r3, #10
 8011266:	d006      	beq.n	8011276 <tcp_input+0x38e>
 8011268:	4b48      	ldr	r3, [pc, #288]	@ (801138c <tcp_input+0x4a4>)
 801126a:	f240 121f 	movw	r2, #287	@ 0x11f
 801126e:	494d      	ldr	r1, [pc, #308]	@ (80113a4 <tcp_input+0x4bc>)
 8011270:	4848      	ldr	r0, [pc, #288]	@ (8011394 <tcp_input+0x4ac>)
 8011272:	f007 f97d 	bl	8018570 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	7a1b      	ldrb	r3, [r3, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d009      	beq.n	8011292 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	7a1a      	ldrb	r2, [r3, #8]
 8011282:	4b41      	ldr	r3, [pc, #260]	@ (8011388 <tcp_input+0x4a0>)
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801128a:	3301      	adds	r3, #1
 801128c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801128e:	429a      	cmp	r2, r3
 8011290:	d122      	bne.n	80112d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	8b1a      	ldrh	r2, [r3, #24]
 8011296:	4b3b      	ldr	r3, [pc, #236]	@ (8011384 <tcp_input+0x49c>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	429a      	cmp	r2, r3
 80112a0:	d11b      	bne.n	80112da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	8ada      	ldrh	r2, [r3, #22]
 80112a6:	4b37      	ldr	r3, [pc, #220]	@ (8011384 <tcp_input+0x49c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	885b      	ldrh	r3, [r3, #2]
 80112ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d113      	bne.n	80112da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	4b34      	ldr	r3, [pc, #208]	@ (8011388 <tcp_input+0x4a0>)
 80112b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d10d      	bne.n	80112da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b31      	ldr	r3, [pc, #196]	@ (8011388 <tcp_input+0x4a0>)
 80112c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d107      	bne.n	80112da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80112ca:	69f8      	ldr	r0, [r7, #28]
 80112cc:	f000 fb56 	bl	801197c <tcp_timewait_input>
        }
        pbuf_free(p);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7fd ffd3 	bl	800f27c <pbuf_free>
        return;
 80112d6:	e1fd      	b.n	80116d4 <tcp_input+0x7ec>
        continue;
 80112d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1bc      	bne.n	8011260 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80112e6:	2300      	movs	r3, #0
 80112e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112ea:	4b2f      	ldr	r3, [pc, #188]	@ (80113a8 <tcp_input+0x4c0>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	617b      	str	r3, [r7, #20]
 80112f0:	e02a      	b.n	8011348 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	7a1b      	ldrb	r3, [r3, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00c      	beq.n	8011314 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	7a1a      	ldrb	r2, [r3, #8]
 80112fe:	4b22      	ldr	r3, [pc, #136]	@ (8011388 <tcp_input+0x4a0>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011306:	3301      	adds	r3, #1
 8011308:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801130a:	429a      	cmp	r2, r3
 801130c:	d002      	beq.n	8011314 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	61bb      	str	r3, [r7, #24]
        continue;
 8011312:	e016      	b.n	8011342 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	8ada      	ldrh	r2, [r3, #22]
 8011318:	4b1a      	ldr	r3, [pc, #104]	@ (8011384 <tcp_input+0x49c>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	885b      	ldrh	r3, [r3, #2]
 801131e:	b29b      	uxth	r3, r3
 8011320:	429a      	cmp	r2, r3
 8011322:	d10c      	bne.n	801133e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	4b17      	ldr	r3, [pc, #92]	@ (8011388 <tcp_input+0x4a0>)
 801132a:	695b      	ldr	r3, [r3, #20]
 801132c:	429a      	cmp	r2, r3
 801132e:	d00f      	beq.n	8011350 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00d      	beq.n	8011352 <tcp_input+0x46a>
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d009      	beq.n	8011352 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1d1      	bne.n	80112f2 <tcp_input+0x40a>
 801134e:	e000      	b.n	8011352 <tcp_input+0x46a>
            break;
 8011350:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d029      	beq.n	80113ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00a      	beq.n	8011374 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	68da      	ldr	r2, [r3, #12]
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011366:	4b10      	ldr	r3, [pc, #64]	@ (80113a8 <tcp_input+0x4c0>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801136e:	4a0e      	ldr	r2, [pc, #56]	@ (80113a8 <tcp_input+0x4c0>)
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011374:	6978      	ldr	r0, [r7, #20]
 8011376:	f000 fa03 	bl	8011780 <tcp_listen_input>
      }
      pbuf_free(p);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7fd ff7e 	bl	800f27c <pbuf_free>
      return;
 8011380:	e1a8      	b.n	80116d4 <tcp_input+0x7ec>
 8011382:	bf00      	nop
 8011384:	2000c6d0 	.word	0x2000c6d0
 8011388:	20008f54 	.word	0x20008f54
 801138c:	0801b97c 	.word	0x0801b97c
 8011390:	0801baa8 	.word	0x0801baa8
 8011394:	0801b9c8 	.word	0x0801b9c8
 8011398:	2000c6b4 	.word	0x2000c6b4
 801139c:	0801bad4 	.word	0x0801bad4
 80113a0:	2000c6b8 	.word	0x2000c6b8
 80113a4:	0801bb00 	.word	0x0801bb00
 80113a8:	2000c6b0 	.word	0x2000c6b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f000 8158 	beq.w	8011664 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80113b4:	4b95      	ldr	r3, [pc, #596]	@ (801160c <tcp_input+0x724>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	891a      	ldrh	r2, [r3, #8]
 80113be:	4b93      	ldr	r3, [pc, #588]	@ (801160c <tcp_input+0x724>)
 80113c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80113c2:	4a92      	ldr	r2, [pc, #584]	@ (801160c <tcp_input+0x724>)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80113c8:	4b91      	ldr	r3, [pc, #580]	@ (8011610 <tcp_input+0x728>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a8f      	ldr	r2, [pc, #572]	@ (801160c <tcp_input+0x724>)
 80113ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80113d0:	4b90      	ldr	r3, [pc, #576]	@ (8011614 <tcp_input+0x72c>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80113d6:	4b90      	ldr	r3, [pc, #576]	@ (8011618 <tcp_input+0x730>)
 80113d8:	2200      	movs	r2, #0
 80113da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80113dc:	4b8f      	ldr	r3, [pc, #572]	@ (801161c <tcp_input+0x734>)
 80113de:	2200      	movs	r2, #0
 80113e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80113e2:	4b8f      	ldr	r3, [pc, #572]	@ (8011620 <tcp_input+0x738>)
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	f003 0308 	and.w	r3, r3, #8
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d006      	beq.n	80113fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7b5b      	ldrb	r3, [r3, #13]
 80113f2:	f043 0301 	orr.w	r3, r3, #1
 80113f6:	b2da      	uxtb	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011400:	2b00      	cmp	r3, #0
 8011402:	d017      	beq.n	8011434 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011404:	69f8      	ldr	r0, [r7, #28]
 8011406:	f7ff f929 	bl	801065c <tcp_process_refused_data>
 801140a:	4603      	mov	r3, r0
 801140c:	f113 0f0d 	cmn.w	r3, #13
 8011410:	d007      	beq.n	8011422 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00c      	beq.n	8011434 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801141a:	4b82      	ldr	r3, [pc, #520]	@ (8011624 <tcp_input+0x73c>)
 801141c:	881b      	ldrh	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d008      	beq.n	8011434 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011426:	2b00      	cmp	r3, #0
 8011428:	f040 80e3 	bne.w	80115f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801142c:	69f8      	ldr	r0, [r7, #28]
 801142e:	f003 f9a7 	bl	8014780 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011432:	e0de      	b.n	80115f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011434:	4a7c      	ldr	r2, [pc, #496]	@ (8011628 <tcp_input+0x740>)
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801143a:	69f8      	ldr	r0, [r7, #28]
 801143c:	f000 fb18 	bl	8011a70 <tcp_process>
 8011440:	4603      	mov	r3, r0
 8011442:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011448:	f113 0f0d 	cmn.w	r3, #13
 801144c:	f000 80d3 	beq.w	80115f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011450:	4b71      	ldr	r3, [pc, #452]	@ (8011618 <tcp_input+0x730>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f003 0308 	and.w	r3, r3, #8
 8011458:	2b00      	cmp	r3, #0
 801145a:	d015      	beq.n	8011488 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011462:	2b00      	cmp	r3, #0
 8011464:	d008      	beq.n	8011478 <tcp_input+0x590>
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801146c:	69fa      	ldr	r2, [r7, #28]
 801146e:	6912      	ldr	r2, [r2, #16]
 8011470:	f06f 010d 	mvn.w	r1, #13
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011478:	69f9      	ldr	r1, [r7, #28]
 801147a:	486c      	ldr	r0, [pc, #432]	@ (801162c <tcp_input+0x744>)
 801147c:	f7ff fbbc 	bl	8010bf8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011480:	69f8      	ldr	r0, [r7, #28]
 8011482:	f7fe f9a7 	bl	800f7d4 <tcp_free>
 8011486:	e0da      	b.n	801163e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801148c:	4b63      	ldr	r3, [pc, #396]	@ (801161c <tcp_input+0x734>)
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d01d      	beq.n	80114d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011494:	4b61      	ldr	r3, [pc, #388]	@ (801161c <tcp_input+0x734>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00a      	beq.n	80114ba <tcp_input+0x5d2>
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114aa:	69fa      	ldr	r2, [r7, #28]
 80114ac:	6910      	ldr	r0, [r2, #16]
 80114ae:	89fa      	ldrh	r2, [r7, #14]
 80114b0:	69f9      	ldr	r1, [r7, #28]
 80114b2:	4798      	blx	r3
 80114b4:	4603      	mov	r3, r0
 80114b6:	74fb      	strb	r3, [r7, #19]
 80114b8:	e001      	b.n	80114be <tcp_input+0x5d6>
 80114ba:	2300      	movs	r3, #0
 80114bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80114be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114c2:	f113 0f0d 	cmn.w	r3, #13
 80114c6:	f000 8098 	beq.w	80115fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80114ca:	4b54      	ldr	r3, [pc, #336]	@ (801161c <tcp_input+0x734>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80114d0:	69f8      	ldr	r0, [r7, #28]
 80114d2:	f000 f915 	bl	8011700 <tcp_input_delayed_close>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f040 8090 	bne.w	80115fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80114de:	4b4d      	ldr	r3, [pc, #308]	@ (8011614 <tcp_input+0x72c>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d041      	beq.n	801156a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d006      	beq.n	80114fc <tcp_input+0x614>
 80114ee:	4b50      	ldr	r3, [pc, #320]	@ (8011630 <tcp_input+0x748>)
 80114f0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80114f4:	494f      	ldr	r1, [pc, #316]	@ (8011634 <tcp_input+0x74c>)
 80114f6:	4850      	ldr	r0, [pc, #320]	@ (8011638 <tcp_input+0x750>)
 80114f8:	f007 f83a 	bl	8018570 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	8b5b      	ldrh	r3, [r3, #26]
 8011500:	f003 0310 	and.w	r3, r3, #16
 8011504:	2b00      	cmp	r3, #0
 8011506:	d008      	beq.n	801151a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011508:	4b42      	ldr	r3, [pc, #264]	@ (8011614 <tcp_input+0x72c>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	f7fd feb5 	bl	800f27c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011512:	69f8      	ldr	r0, [r7, #28]
 8011514:	f7fe fc46 	bl	800fda4 <tcp_abort>
            goto aborted;
 8011518:	e091      	b.n	801163e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00c      	beq.n	801153e <tcp_input+0x656>
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	6918      	ldr	r0, [r3, #16]
 801152e:	4b39      	ldr	r3, [pc, #228]	@ (8011614 <tcp_input+0x72c>)
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	2300      	movs	r3, #0
 8011534:	69f9      	ldr	r1, [r7, #28]
 8011536:	47a0      	blx	r4
 8011538:	4603      	mov	r3, r0
 801153a:	74fb      	strb	r3, [r7, #19]
 801153c:	e008      	b.n	8011550 <tcp_input+0x668>
 801153e:	4b35      	ldr	r3, [pc, #212]	@ (8011614 <tcp_input+0x72c>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	2300      	movs	r3, #0
 8011544:	69f9      	ldr	r1, [r7, #28]
 8011546:	2000      	movs	r0, #0
 8011548:	f7ff f95e 	bl	8010808 <tcp_recv_null>
 801154c:	4603      	mov	r3, r0
 801154e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011554:	f113 0f0d 	cmn.w	r3, #13
 8011558:	d053      	beq.n	8011602 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801155a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d003      	beq.n	801156a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011562:	4b2c      	ldr	r3, [pc, #176]	@ (8011614 <tcp_input+0x72c>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801156a:	4b2b      	ldr	r3, [pc, #172]	@ (8011618 <tcp_input+0x730>)
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	f003 0320 	and.w	r3, r3, #32
 8011572:	2b00      	cmp	r3, #0
 8011574:	d030      	beq.n	80115d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801157a:	2b00      	cmp	r3, #0
 801157c:	d009      	beq.n	8011592 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011582:	7b5a      	ldrb	r2, [r3, #13]
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011588:	f042 0220 	orr.w	r2, r2, #32
 801158c:	b2d2      	uxtb	r2, r2
 801158e:	735a      	strb	r2, [r3, #13]
 8011590:	e022      	b.n	80115d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011596:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801159a:	d005      	beq.n	80115a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115a0:	3301      	adds	r3, #1
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00b      	beq.n	80115ca <tcp_input+0x6e2>
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	6918      	ldr	r0, [r3, #16]
 80115bc:	2300      	movs	r3, #0
 80115be:	2200      	movs	r2, #0
 80115c0:	69f9      	ldr	r1, [r7, #28]
 80115c2:	47a0      	blx	r4
 80115c4:	4603      	mov	r3, r0
 80115c6:	74fb      	strb	r3, [r7, #19]
 80115c8:	e001      	b.n	80115ce <tcp_input+0x6e6>
 80115ca:	2300      	movs	r3, #0
 80115cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80115ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115d2:	f113 0f0d 	cmn.w	r3, #13
 80115d6:	d016      	beq.n	8011606 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80115d8:	4b13      	ldr	r3, [pc, #76]	@ (8011628 <tcp_input+0x740>)
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80115de:	69f8      	ldr	r0, [r7, #28]
 80115e0:	f000 f88e 	bl	8011700 <tcp_input_delayed_close>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d128      	bne.n	801163c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80115ea:	69f8      	ldr	r0, [r7, #28]
 80115ec:	f002 fac2 	bl	8013b74 <tcp_output>
 80115f0:	e025      	b.n	801163e <tcp_input+0x756>
        goto aborted;
 80115f2:	bf00      	nop
 80115f4:	e023      	b.n	801163e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80115f6:	bf00      	nop
 80115f8:	e021      	b.n	801163e <tcp_input+0x756>
              goto aborted;
 80115fa:	bf00      	nop
 80115fc:	e01f      	b.n	801163e <tcp_input+0x756>
          goto aborted;
 80115fe:	bf00      	nop
 8011600:	e01d      	b.n	801163e <tcp_input+0x756>
            goto aborted;
 8011602:	bf00      	nop
 8011604:	e01b      	b.n	801163e <tcp_input+0x756>
              goto aborted;
 8011606:	bf00      	nop
 8011608:	e019      	b.n	801163e <tcp_input+0x756>
 801160a:	bf00      	nop
 801160c:	2000c6c0 	.word	0x2000c6c0
 8011610:	2000c6d0 	.word	0x2000c6d0
 8011614:	2000c6f0 	.word	0x2000c6f0
 8011618:	2000c6ed 	.word	0x2000c6ed
 801161c:	2000c6e8 	.word	0x2000c6e8
 8011620:	2000c6ec 	.word	0x2000c6ec
 8011624:	2000c6ea 	.word	0x2000c6ea
 8011628:	2000c6f4 	.word	0x2000c6f4
 801162c:	2000c6b4 	.word	0x2000c6b4
 8011630:	0801b97c 	.word	0x0801b97c
 8011634:	0801bb30 	.word	0x0801bb30
 8011638:	0801b9c8 	.word	0x0801b9c8
          goto aborted;
 801163c:	bf00      	nop
    tcp_input_pcb = NULL;
 801163e:	4b27      	ldr	r3, [pc, #156]	@ (80116dc <tcp_input+0x7f4>)
 8011640:	2200      	movs	r2, #0
 8011642:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011644:	4b26      	ldr	r3, [pc, #152]	@ (80116e0 <tcp_input+0x7f8>)
 8011646:	2200      	movs	r2, #0
 8011648:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801164a:	4b26      	ldr	r3, [pc, #152]	@ (80116e4 <tcp_input+0x7fc>)
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d03f      	beq.n	80116d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011652:	4b24      	ldr	r3, [pc, #144]	@ (80116e4 <tcp_input+0x7fc>)
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	4618      	mov	r0, r3
 8011658:	f7fd fe10 	bl	800f27c <pbuf_free>
      inseg.p = NULL;
 801165c:	4b21      	ldr	r3, [pc, #132]	@ (80116e4 <tcp_input+0x7fc>)
 801165e:	2200      	movs	r2, #0
 8011660:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011662:	e036      	b.n	80116d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011664:	4b20      	ldr	r3, [pc, #128]	@ (80116e8 <tcp_input+0x800>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	899b      	ldrh	r3, [r3, #12]
 801166a:	b29b      	uxth	r3, r3
 801166c:	4618      	mov	r0, r3
 801166e:	f7fc fa45 	bl	800dafc <lwip_htons>
 8011672:	4603      	mov	r3, r0
 8011674:	b2db      	uxtb	r3, r3
 8011676:	f003 0304 	and.w	r3, r3, #4
 801167a:	2b00      	cmp	r3, #0
 801167c:	d118      	bne.n	80116b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801167e:	4b1b      	ldr	r3, [pc, #108]	@ (80116ec <tcp_input+0x804>)
 8011680:	6819      	ldr	r1, [r3, #0]
 8011682:	4b1b      	ldr	r3, [pc, #108]	@ (80116f0 <tcp_input+0x808>)
 8011684:	881b      	ldrh	r3, [r3, #0]
 8011686:	461a      	mov	r2, r3
 8011688:	4b1a      	ldr	r3, [pc, #104]	@ (80116f4 <tcp_input+0x80c>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801168e:	4b16      	ldr	r3, [pc, #88]	@ (80116e8 <tcp_input+0x800>)
 8011690:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011692:	885b      	ldrh	r3, [r3, #2]
 8011694:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011696:	4a14      	ldr	r2, [pc, #80]	@ (80116e8 <tcp_input+0x800>)
 8011698:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801169a:	8812      	ldrh	r2, [r2, #0]
 801169c:	b292      	uxth	r2, r2
 801169e:	9202      	str	r2, [sp, #8]
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	4b15      	ldr	r3, [pc, #84]	@ (80116f8 <tcp_input+0x810>)
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	4b15      	ldr	r3, [pc, #84]	@ (80116fc <tcp_input+0x814>)
 80116a8:	4602      	mov	r2, r0
 80116aa:	2000      	movs	r0, #0
 80116ac:	f003 f816 	bl	80146dc <tcp_rst>
    pbuf_free(p);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7fd fde3 	bl	800f27c <pbuf_free>
  return;
 80116b6:	e00c      	b.n	80116d2 <tcp_input+0x7ea>
    goto dropped;
 80116b8:	bf00      	nop
 80116ba:	e006      	b.n	80116ca <tcp_input+0x7e2>
    goto dropped;
 80116bc:	bf00      	nop
 80116be:	e004      	b.n	80116ca <tcp_input+0x7e2>
    goto dropped;
 80116c0:	bf00      	nop
 80116c2:	e002      	b.n	80116ca <tcp_input+0x7e2>
      goto dropped;
 80116c4:	bf00      	nop
 80116c6:	e000      	b.n	80116ca <tcp_input+0x7e2>
      goto dropped;
 80116c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7fd fdd6 	bl	800f27c <pbuf_free>
 80116d0:	e000      	b.n	80116d4 <tcp_input+0x7ec>
  return;
 80116d2:	bf00      	nop
}
 80116d4:	3724      	adds	r7, #36	@ 0x24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd90      	pop	{r4, r7, pc}
 80116da:	bf00      	nop
 80116dc:	2000c6f4 	.word	0x2000c6f4
 80116e0:	2000c6f0 	.word	0x2000c6f0
 80116e4:	2000c6c0 	.word	0x2000c6c0
 80116e8:	2000c6d0 	.word	0x2000c6d0
 80116ec:	2000c6e4 	.word	0x2000c6e4
 80116f0:	2000c6ea 	.word	0x2000c6ea
 80116f4:	2000c6e0 	.word	0x2000c6e0
 80116f8:	20008f64 	.word	0x20008f64
 80116fc:	20008f68 	.word	0x20008f68

08011700 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d106      	bne.n	801171c <tcp_input_delayed_close+0x1c>
 801170e:	4b17      	ldr	r3, [pc, #92]	@ (801176c <tcp_input_delayed_close+0x6c>)
 8011710:	f240 225a 	movw	r2, #602	@ 0x25a
 8011714:	4916      	ldr	r1, [pc, #88]	@ (8011770 <tcp_input_delayed_close+0x70>)
 8011716:	4817      	ldr	r0, [pc, #92]	@ (8011774 <tcp_input_delayed_close+0x74>)
 8011718:	f006 ff2a 	bl	8018570 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801171c:	4b16      	ldr	r3, [pc, #88]	@ (8011778 <tcp_input_delayed_close+0x78>)
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	f003 0310 	and.w	r3, r3, #16
 8011724:	2b00      	cmp	r3, #0
 8011726:	d01c      	beq.n	8011762 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8b5b      	ldrh	r3, [r3, #26]
 801172c:	f003 0310 	and.w	r3, r3, #16
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10d      	bne.n	8011750 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801173a:	2b00      	cmp	r3, #0
 801173c:	d008      	beq.n	8011750 <tcp_input_delayed_close+0x50>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	6912      	ldr	r2, [r2, #16]
 8011748:	f06f 010e 	mvn.w	r1, #14
 801174c:	4610      	mov	r0, r2
 801174e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	480a      	ldr	r0, [pc, #40]	@ (801177c <tcp_input_delayed_close+0x7c>)
 8011754:	f7ff fa50 	bl	8010bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7fe f83b 	bl	800f7d4 <tcp_free>
    return 1;
 801175e:	2301      	movs	r3, #1
 8011760:	e000      	b.n	8011764 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	0801b97c 	.word	0x0801b97c
 8011770:	0801bb4c 	.word	0x0801bb4c
 8011774:	0801b9c8 	.word	0x0801b9c8
 8011778:	2000c6ed 	.word	0x2000c6ed
 801177c:	2000c6b4 	.word	0x2000c6b4

08011780 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011780:	b590      	push	{r4, r7, lr}
 8011782:	b08b      	sub	sp, #44	@ 0x2c
 8011784:	af04      	add	r7, sp, #16
 8011786:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011788:	4b6f      	ldr	r3, [pc, #444]	@ (8011948 <tcp_listen_input+0x1c8>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 0304 	and.w	r3, r3, #4
 8011790:	2b00      	cmp	r3, #0
 8011792:	f040 80d2 	bne.w	801193a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d106      	bne.n	80117aa <tcp_listen_input+0x2a>
 801179c:	4b6b      	ldr	r3, [pc, #428]	@ (801194c <tcp_listen_input+0x1cc>)
 801179e:	f240 2281 	movw	r2, #641	@ 0x281
 80117a2:	496b      	ldr	r1, [pc, #428]	@ (8011950 <tcp_listen_input+0x1d0>)
 80117a4:	486b      	ldr	r0, [pc, #428]	@ (8011954 <tcp_listen_input+0x1d4>)
 80117a6:	f006 fee3 	bl	8018570 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80117aa:	4b67      	ldr	r3, [pc, #412]	@ (8011948 <tcp_listen_input+0x1c8>)
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 0310 	and.w	r3, r3, #16
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d019      	beq.n	80117ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117b6:	4b68      	ldr	r3, [pc, #416]	@ (8011958 <tcp_listen_input+0x1d8>)
 80117b8:	6819      	ldr	r1, [r3, #0]
 80117ba:	4b68      	ldr	r3, [pc, #416]	@ (801195c <tcp_listen_input+0x1dc>)
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	461a      	mov	r2, r3
 80117c0:	4b67      	ldr	r3, [pc, #412]	@ (8011960 <tcp_listen_input+0x1e0>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117c6:	4b67      	ldr	r3, [pc, #412]	@ (8011964 <tcp_listen_input+0x1e4>)
 80117c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ca:	885b      	ldrh	r3, [r3, #2]
 80117cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ce:	4a65      	ldr	r2, [pc, #404]	@ (8011964 <tcp_listen_input+0x1e4>)
 80117d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117d2:	8812      	ldrh	r2, [r2, #0]
 80117d4:	b292      	uxth	r2, r2
 80117d6:	9202      	str	r2, [sp, #8]
 80117d8:	9301      	str	r3, [sp, #4]
 80117da:	4b63      	ldr	r3, [pc, #396]	@ (8011968 <tcp_listen_input+0x1e8>)
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	4b63      	ldr	r3, [pc, #396]	@ (801196c <tcp_listen_input+0x1ec>)
 80117e0:	4602      	mov	r2, r0
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f002 ff7a 	bl	80146dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80117e8:	e0a9      	b.n	801193e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80117ea:	4b57      	ldr	r3, [pc, #348]	@ (8011948 <tcp_listen_input+0x1c8>)
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	f003 0302 	and.w	r3, r3, #2
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f000 80a3 	beq.w	801193e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7d5b      	ldrb	r3, [r3, #21]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7ff f927 	bl	8010a50 <tcp_alloc>
 8011802:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d111      	bne.n	801182e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	699b      	ldr	r3, [r3, #24]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00a      	beq.n	8011828 <tcp_listen_input+0xa8>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	699b      	ldr	r3, [r3, #24]
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	6910      	ldr	r0, [r2, #16]
 801181a:	f04f 32ff 	mov.w	r2, #4294967295
 801181e:	2100      	movs	r1, #0
 8011820:	4798      	blx	r3
 8011822:	4603      	mov	r3, r0
 8011824:	73bb      	strb	r3, [r7, #14]
      return;
 8011826:	e08b      	b.n	8011940 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011828:	23f0      	movs	r3, #240	@ 0xf0
 801182a:	73bb      	strb	r3, [r7, #14]
      return;
 801182c:	e088      	b.n	8011940 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801182e:	4b50      	ldr	r3, [pc, #320]	@ (8011970 <tcp_listen_input+0x1f0>)
 8011830:	695a      	ldr	r2, [r3, #20]
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011836:	4b4e      	ldr	r3, [pc, #312]	@ (8011970 <tcp_listen_input+0x1f0>)
 8011838:	691a      	ldr	r2, [r3, #16]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	8ada      	ldrh	r2, [r3, #22]
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011846:	4b47      	ldr	r3, [pc, #284]	@ (8011964 <tcp_listen_input+0x1e4>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	b29a      	uxth	r2, r3
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2203      	movs	r2, #3
 8011856:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011858:	4b41      	ldr	r3, [pc, #260]	@ (8011960 <tcp_listen_input+0x1e0>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801186a:	6978      	ldr	r0, [r7, #20]
 801186c:	f7ff fa58 	bl	8010d20 <tcp_next_iss>
 8011870:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	693a      	ldr	r2, [r7, #16]
 8011876:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	693a      	ldr	r2, [r7, #16]
 801187c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	693a      	ldr	r2, [r7, #16]
 8011882:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	693a      	ldr	r2, [r7, #16]
 8011888:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801188a:	4b35      	ldr	r3, [pc, #212]	@ (8011960 <tcp_listen_input+0x1e0>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	1e5a      	subs	r2, r3, #1
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	691a      	ldr	r2, [r3, #16]
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	7a5b      	ldrb	r3, [r3, #9]
 80118a6:	f003 030c 	and.w	r3, r3, #12
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	7a1a      	ldrb	r2, [r3, #8]
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80118b8:	4b2e      	ldr	r3, [pc, #184]	@ (8011974 <tcp_listen_input+0x1f4>)
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	60da      	str	r2, [r3, #12]
 80118c0:	4a2c      	ldr	r2, [pc, #176]	@ (8011974 <tcp_listen_input+0x1f4>)
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	f003 f8cb 	bl	8014a60 <tcp_timer_needed>
 80118ca:	4b2b      	ldr	r3, [pc, #172]	@ (8011978 <tcp_listen_input+0x1f8>)
 80118cc:	2201      	movs	r2, #1
 80118ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80118d0:	6978      	ldr	r0, [r7, #20]
 80118d2:	f001 fd8b 	bl	80133ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80118d6:	4b23      	ldr	r3, [pc, #140]	@ (8011964 <tcp_listen_input+0x1e4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	89db      	ldrh	r3, [r3, #14]
 80118dc:	b29a      	uxth	r2, r3
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	3304      	adds	r3, #4
 80118f8:	4618      	mov	r0, r3
 80118fa:	f004 fc8d 	bl	8016218 <ip4_route>
 80118fe:	4601      	mov	r1, r0
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	3304      	adds	r3, #4
 8011904:	461a      	mov	r2, r3
 8011906:	4620      	mov	r0, r4
 8011908:	f7ff fa30 	bl	8010d6c <tcp_eff_send_mss_netif>
 801190c:	4603      	mov	r3, r0
 801190e:	461a      	mov	r2, r3
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011914:	2112      	movs	r1, #18
 8011916:	6978      	ldr	r0, [r7, #20]
 8011918:	f002 f83e 	bl	8013998 <tcp_enqueue_flags>
 801191c:	4603      	mov	r3, r0
 801191e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d004      	beq.n	8011932 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011928:	2100      	movs	r1, #0
 801192a:	6978      	ldr	r0, [r7, #20]
 801192c:	f7fe f97c 	bl	800fc28 <tcp_abandon>
      return;
 8011930:	e006      	b.n	8011940 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011932:	6978      	ldr	r0, [r7, #20]
 8011934:	f002 f91e 	bl	8013b74 <tcp_output>
  return;
 8011938:	e001      	b.n	801193e <tcp_listen_input+0x1be>
    return;
 801193a:	bf00      	nop
 801193c:	e000      	b.n	8011940 <tcp_listen_input+0x1c0>
  return;
 801193e:	bf00      	nop
}
 8011940:	371c      	adds	r7, #28
 8011942:	46bd      	mov	sp, r7
 8011944:	bd90      	pop	{r4, r7, pc}
 8011946:	bf00      	nop
 8011948:	2000c6ec 	.word	0x2000c6ec
 801194c:	0801b97c 	.word	0x0801b97c
 8011950:	0801bb74 	.word	0x0801bb74
 8011954:	0801b9c8 	.word	0x0801b9c8
 8011958:	2000c6e4 	.word	0x2000c6e4
 801195c:	2000c6ea 	.word	0x2000c6ea
 8011960:	2000c6e0 	.word	0x2000c6e0
 8011964:	2000c6d0 	.word	0x2000c6d0
 8011968:	20008f64 	.word	0x20008f64
 801196c:	20008f68 	.word	0x20008f68
 8011970:	20008f54 	.word	0x20008f54
 8011974:	2000c6b4 	.word	0x2000c6b4
 8011978:	2000c6bc 	.word	0x2000c6bc

0801197c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af04      	add	r7, sp, #16
 8011982:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011984:	4b2f      	ldr	r3, [pc, #188]	@ (8011a44 <tcp_timewait_input+0xc8>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f003 0304 	and.w	r3, r3, #4
 801198c:	2b00      	cmp	r3, #0
 801198e:	d153      	bne.n	8011a38 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <tcp_timewait_input+0x28>
 8011996:	4b2c      	ldr	r3, [pc, #176]	@ (8011a48 <tcp_timewait_input+0xcc>)
 8011998:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801199c:	492b      	ldr	r1, [pc, #172]	@ (8011a4c <tcp_timewait_input+0xd0>)
 801199e:	482c      	ldr	r0, [pc, #176]	@ (8011a50 <tcp_timewait_input+0xd4>)
 80119a0:	f006 fde6 	bl	8018570 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80119a4:	4b27      	ldr	r3, [pc, #156]	@ (8011a44 <tcp_timewait_input+0xc8>)
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	f003 0302 	and.w	r3, r3, #2
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d02a      	beq.n	8011a06 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80119b0:	4b28      	ldr	r3, [pc, #160]	@ (8011a54 <tcp_timewait_input+0xd8>)
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119b8:	1ad3      	subs	r3, r2, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	db2d      	blt.n	8011a1a <tcp_timewait_input+0x9e>
 80119be:	4b25      	ldr	r3, [pc, #148]	@ (8011a54 <tcp_timewait_input+0xd8>)
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c6:	6879      	ldr	r1, [r7, #4]
 80119c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80119ca:	440b      	add	r3, r1
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dc23      	bgt.n	8011a1a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119d2:	4b21      	ldr	r3, [pc, #132]	@ (8011a58 <tcp_timewait_input+0xdc>)
 80119d4:	6819      	ldr	r1, [r3, #0]
 80119d6:	4b21      	ldr	r3, [pc, #132]	@ (8011a5c <tcp_timewait_input+0xe0>)
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	4b1d      	ldr	r3, [pc, #116]	@ (8011a54 <tcp_timewait_input+0xd8>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119e2:	4b1f      	ldr	r3, [pc, #124]	@ (8011a60 <tcp_timewait_input+0xe4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119e6:	885b      	ldrh	r3, [r3, #2]
 80119e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119ea:	4a1d      	ldr	r2, [pc, #116]	@ (8011a60 <tcp_timewait_input+0xe4>)
 80119ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119ee:	8812      	ldrh	r2, [r2, #0]
 80119f0:	b292      	uxth	r2, r2
 80119f2:	9202      	str	r2, [sp, #8]
 80119f4:	9301      	str	r3, [sp, #4]
 80119f6:	4b1b      	ldr	r3, [pc, #108]	@ (8011a64 <tcp_timewait_input+0xe8>)
 80119f8:	9300      	str	r3, [sp, #0]
 80119fa:	4b1b      	ldr	r3, [pc, #108]	@ (8011a68 <tcp_timewait_input+0xec>)
 80119fc:	4602      	mov	r2, r0
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f002 fe6c 	bl	80146dc <tcp_rst>
      return;
 8011a04:	e01b      	b.n	8011a3e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011a06:	4b0f      	ldr	r3, [pc, #60]	@ (8011a44 <tcp_timewait_input+0xc8>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f003 0301 	and.w	r3, r3, #1
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d003      	beq.n	8011a1a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011a12:	4b16      	ldr	r3, [pc, #88]	@ (8011a6c <tcp_timewait_input+0xf0>)
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011a1a:	4b10      	ldr	r3, [pc, #64]	@ (8011a5c <tcp_timewait_input+0xe0>)
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00c      	beq.n	8011a3c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	8b5b      	ldrh	r3, [r3, #26]
 8011a26:	f043 0302 	orr.w	r3, r3, #2
 8011a2a:	b29a      	uxth	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f002 f89f 	bl	8013b74 <tcp_output>
  }
  return;
 8011a36:	e001      	b.n	8011a3c <tcp_timewait_input+0xc0>
    return;
 8011a38:	bf00      	nop
 8011a3a:	e000      	b.n	8011a3e <tcp_timewait_input+0xc2>
  return;
 8011a3c:	bf00      	nop
}
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	2000c6ec 	.word	0x2000c6ec
 8011a48:	0801b97c 	.word	0x0801b97c
 8011a4c:	0801bb94 	.word	0x0801bb94
 8011a50:	0801b9c8 	.word	0x0801b9c8
 8011a54:	2000c6e0 	.word	0x2000c6e0
 8011a58:	2000c6e4 	.word	0x2000c6e4
 8011a5c:	2000c6ea 	.word	0x2000c6ea
 8011a60:	2000c6d0 	.word	0x2000c6d0
 8011a64:	20008f64 	.word	0x20008f64
 8011a68:	20008f68 	.word	0x20008f68
 8011a6c:	2000c6a8 	.word	0x2000c6a8

08011a70 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011a70:	b590      	push	{r4, r7, lr}
 8011a72:	b08d      	sub	sp, #52	@ 0x34
 8011a74:	af04      	add	r7, sp, #16
 8011a76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <tcp_process+0x24>
 8011a86:	4b9d      	ldr	r3, [pc, #628]	@ (8011cfc <tcp_process+0x28c>)
 8011a88:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011a8c:	499c      	ldr	r1, [pc, #624]	@ (8011d00 <tcp_process+0x290>)
 8011a8e:	489d      	ldr	r0, [pc, #628]	@ (8011d04 <tcp_process+0x294>)
 8011a90:	f006 fd6e 	bl	8018570 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011a94:	4b9c      	ldr	r3, [pc, #624]	@ (8011d08 <tcp_process+0x298>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	f003 0304 	and.w	r3, r3, #4
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d04e      	beq.n	8011b3e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	7d1b      	ldrb	r3, [r3, #20]
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d108      	bne.n	8011aba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011aac:	4b97      	ldr	r3, [pc, #604]	@ (8011d0c <tcp_process+0x29c>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d123      	bne.n	8011afc <tcp_process+0x8c>
        acceptable = 1;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	76fb      	strb	r3, [r7, #27]
 8011ab8:	e020      	b.n	8011afc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011abe:	4b94      	ldr	r3, [pc, #592]	@ (8011d10 <tcp_process+0x2a0>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d102      	bne.n	8011acc <tcp_process+0x5c>
        acceptable = 1;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	76fb      	strb	r3, [r7, #27]
 8011aca:	e017      	b.n	8011afc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011acc:	4b90      	ldr	r3, [pc, #576]	@ (8011d10 <tcp_process+0x2a0>)
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	db10      	blt.n	8011afc <tcp_process+0x8c>
 8011ada:	4b8d      	ldr	r3, [pc, #564]	@ (8011d10 <tcp_process+0x2a0>)
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ae2:	6879      	ldr	r1, [r7, #4]
 8011ae4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011ae6:	440b      	add	r3, r1
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	dc06      	bgt.n	8011afc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8b5b      	ldrh	r3, [r3, #26]
 8011af2:	f043 0302 	orr.w	r3, r3, #2
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011afc:	7efb      	ldrb	r3, [r7, #27]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d01b      	beq.n	8011b3a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	7d1b      	ldrb	r3, [r3, #20]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d106      	bne.n	8011b18 <tcp_process+0xa8>
 8011b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8011cfc <tcp_process+0x28c>)
 8011b0c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011b10:	4980      	ldr	r1, [pc, #512]	@ (8011d14 <tcp_process+0x2a4>)
 8011b12:	487c      	ldr	r0, [pc, #496]	@ (8011d04 <tcp_process+0x294>)
 8011b14:	f006 fd2c 	bl	8018570 <iprintf>
      recv_flags |= TF_RESET;
 8011b18:	4b7f      	ldr	r3, [pc, #508]	@ (8011d18 <tcp_process+0x2a8>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	f043 0308 	orr.w	r3, r3, #8
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	4b7d      	ldr	r3, [pc, #500]	@ (8011d18 <tcp_process+0x2a8>)
 8011b24:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f023 0301 	bic.w	r3, r3, #1
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011b34:	f06f 030d 	mvn.w	r3, #13
 8011b38:	e37a      	b.n	8012230 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	e378      	b.n	8012230 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011b3e:	4b72      	ldr	r3, [pc, #456]	@ (8011d08 <tcp_process+0x298>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	f003 0302 	and.w	r3, r3, #2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d010      	beq.n	8011b6c <tcp_process+0xfc>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	7d1b      	ldrb	r3, [r3, #20]
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d00c      	beq.n	8011b6c <tcp_process+0xfc>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	7d1b      	ldrb	r3, [r3, #20]
 8011b56:	2b03      	cmp	r3, #3
 8011b58:	d008      	beq.n	8011b6c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	8b5b      	ldrh	r3, [r3, #26]
 8011b5e:	f043 0302 	orr.w	r3, r3, #2
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	e361      	b.n	8012230 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	8b5b      	ldrh	r3, [r3, #26]
 8011b70:	f003 0310 	and.w	r3, r3, #16
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d103      	bne.n	8011b80 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011b78:	4b68      	ldr	r3, [pc, #416]	@ (8011d1c <tcp_process+0x2ac>)
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f001 fc2b 	bl	80133ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	7d1b      	ldrb	r3, [r3, #20]
 8011b9a:	3b02      	subs	r3, #2
 8011b9c:	2b07      	cmp	r3, #7
 8011b9e:	f200 8337 	bhi.w	8012210 <tcp_process+0x7a0>
 8011ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ba8 <tcp_process+0x138>)
 8011ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba8:	08011bc9 	.word	0x08011bc9
 8011bac:	08011df9 	.word	0x08011df9
 8011bb0:	08011f71 	.word	0x08011f71
 8011bb4:	08011f9b 	.word	0x08011f9b
 8011bb8:	080120bf 	.word	0x080120bf
 8011bbc:	08011f71 	.word	0x08011f71
 8011bc0:	0801214b 	.word	0x0801214b
 8011bc4:	080121db 	.word	0x080121db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8011d08 <tcp_process+0x298>)
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	f003 0310 	and.w	r3, r3, #16
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f000 80e4 	beq.w	8011d9e <tcp_process+0x32e>
 8011bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8011d08 <tcp_process+0x298>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	f003 0302 	and.w	r3, r3, #2
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f000 80dd 	beq.w	8011d9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011be8:	1c5a      	adds	r2, r3, #1
 8011bea:	4b48      	ldr	r3, [pc, #288]	@ (8011d0c <tcp_process+0x29c>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	f040 80d5 	bne.w	8011d9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011bf4:	4b46      	ldr	r3, [pc, #280]	@ (8011d10 <tcp_process+0x2a0>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011c06:	4b41      	ldr	r3, [pc, #260]	@ (8011d0c <tcp_process+0x29c>)
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011c0e:	4b44      	ldr	r3, [pc, #272]	@ (8011d20 <tcp_process+0x2b0>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	89db      	ldrh	r3, [r3, #14]
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011c28:	4b39      	ldr	r3, [pc, #228]	@ (8011d10 <tcp_process+0x2a0>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	1e5a      	subs	r2, r3, #1
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2204      	movs	r2, #4
 8011c36:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	3304      	adds	r3, #4
 8011c40:	4618      	mov	r0, r3
 8011c42:	f004 fae9 	bl	8016218 <ip4_route>
 8011c46:	4601      	mov	r1, r0
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	3304      	adds	r3, #4
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f7ff f88c 	bl	8010d6c <tcp_eff_send_mss_netif>
 8011c54:	4603      	mov	r3, r0
 8011c56:	461a      	mov	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c60:	009a      	lsls	r2, r3, #2
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c66:	005b      	lsls	r3, r3, #1
 8011c68:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011c6c:	428b      	cmp	r3, r1
 8011c6e:	bf38      	it	cc
 8011c70:	460b      	movcc	r3, r1
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d204      	bcs.n	8011c80 <tcp_process+0x210>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	e00d      	b.n	8011c9c <tcp_process+0x22c>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c84:	005b      	lsls	r3, r3, #1
 8011c86:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d904      	bls.n	8011c98 <tcp_process+0x228>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	e001      	b.n	8011c9c <tcp_process+0x22c>
 8011c98:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d106      	bne.n	8011cba <tcp_process+0x24a>
 8011cac:	4b13      	ldr	r3, [pc, #76]	@ (8011cfc <tcp_process+0x28c>)
 8011cae:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011cb2:	491c      	ldr	r1, [pc, #112]	@ (8011d24 <tcp_process+0x2b4>)
 8011cb4:	4813      	ldr	r0, [pc, #76]	@ (8011d04 <tcp_process+0x294>)
 8011cb6:	f006 fc5b 	bl	8018570 <iprintf>
        --pcb->snd_queuelen;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	b29a      	uxth	r2, r3
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011cce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d12a      	bne.n	8011d2c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cda:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_process+0x280>
 8011ce2:	4b06      	ldr	r3, [pc, #24]	@ (8011cfc <tcp_process+0x28c>)
 8011ce4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011ce8:	490f      	ldr	r1, [pc, #60]	@ (8011d28 <tcp_process+0x2b8>)
 8011cea:	4806      	ldr	r0, [pc, #24]	@ (8011d04 <tcp_process+0x294>)
 8011cec:	f006 fc40 	bl	8018570 <iprintf>
          pcb->unsent = rseg->next;
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011cf8:	e01c      	b.n	8011d34 <tcp_process+0x2c4>
 8011cfa:	bf00      	nop
 8011cfc:	0801b97c 	.word	0x0801b97c
 8011d00:	0801bbb4 	.word	0x0801bbb4
 8011d04:	0801b9c8 	.word	0x0801b9c8
 8011d08:	2000c6ec 	.word	0x2000c6ec
 8011d0c:	2000c6e4 	.word	0x2000c6e4
 8011d10:	2000c6e0 	.word	0x2000c6e0
 8011d14:	0801bbd0 	.word	0x0801bbd0
 8011d18:	2000c6ed 	.word	0x2000c6ed
 8011d1c:	2000c6a8 	.word	0x2000c6a8
 8011d20:	2000c6d0 	.word	0x2000c6d0
 8011d24:	0801bbf0 	.word	0x0801bbf0
 8011d28:	0801bc08 	.word	0x0801bc08
        } else {
          pcb->unacked = rseg->next;
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011d34:	69f8      	ldr	r0, [r7, #28]
 8011d36:	f7fe fd22 	bl	801077e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d104      	bne.n	8011d4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d48:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011d4a:	e006      	b.n	8011d5a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00a      	beq.n	8011d7a <tcp_process+0x30a>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	6910      	ldr	r0, [r2, #16]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	4798      	blx	r3
 8011d74:	4603      	mov	r3, r0
 8011d76:	76bb      	strb	r3, [r7, #26]
 8011d78:	e001      	b.n	8011d7e <tcp_process+0x30e>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011d7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011d82:	f113 0f0d 	cmn.w	r3, #13
 8011d86:	d102      	bne.n	8011d8e <tcp_process+0x31e>
          return ERR_ABRT;
 8011d88:	f06f 030c 	mvn.w	r3, #12
 8011d8c:	e250      	b.n	8012230 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	8b5b      	ldrh	r3, [r3, #26]
 8011d92:	f043 0302 	orr.w	r3, r3, #2
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011d9c:	e23a      	b.n	8012214 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011d9e:	4b98      	ldr	r3, [pc, #608]	@ (8012000 <tcp_process+0x590>)
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	f003 0310 	and.w	r3, r3, #16
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 8234 	beq.w	8012214 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dac:	4b95      	ldr	r3, [pc, #596]	@ (8012004 <tcp_process+0x594>)
 8011dae:	6819      	ldr	r1, [r3, #0]
 8011db0:	4b95      	ldr	r3, [pc, #596]	@ (8012008 <tcp_process+0x598>)
 8011db2:	881b      	ldrh	r3, [r3, #0]
 8011db4:	461a      	mov	r2, r3
 8011db6:	4b95      	ldr	r3, [pc, #596]	@ (801200c <tcp_process+0x59c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dbc:	4b94      	ldr	r3, [pc, #592]	@ (8012010 <tcp_process+0x5a0>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dc0:	885b      	ldrh	r3, [r3, #2]
 8011dc2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dc4:	4a92      	ldr	r2, [pc, #584]	@ (8012010 <tcp_process+0x5a0>)
 8011dc6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dc8:	8812      	ldrh	r2, [r2, #0]
 8011dca:	b292      	uxth	r2, r2
 8011dcc:	9202      	str	r2, [sp, #8]
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	4b90      	ldr	r3, [pc, #576]	@ (8012014 <tcp_process+0x5a4>)
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	4b90      	ldr	r3, [pc, #576]	@ (8012018 <tcp_process+0x5a8>)
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f002 fc7f 	bl	80146dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011de4:	2b05      	cmp	r3, #5
 8011de6:	f200 8215 	bhi.w	8012214 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f002 fa4b 	bl	801428c <tcp_rexmit_rto>
      break;
 8011df6:	e20d      	b.n	8012214 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011df8:	4b81      	ldr	r3, [pc, #516]	@ (8012000 <tcp_process+0x590>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	f003 0310 	and.w	r3, r3, #16
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	f000 80a1 	beq.w	8011f48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e06:	4b7f      	ldr	r3, [pc, #508]	@ (8012004 <tcp_process+0x594>)
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	3b01      	subs	r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	db7e      	blt.n	8011f14 <tcp_process+0x4a4>
 8011e16:	4b7b      	ldr	r3, [pc, #492]	@ (8012004 <tcp_process+0x594>)
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	dc77      	bgt.n	8011f14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2204      	movs	r2, #4
 8011e28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d102      	bne.n	8011e38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011e32:	23fa      	movs	r3, #250	@ 0xfa
 8011e34:	76bb      	strb	r3, [r7, #26]
 8011e36:	e01d      	b.n	8011e74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e3c:	699b      	ldr	r3, [r3, #24]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <tcp_process+0x3e0>
 8011e42:	4b76      	ldr	r3, [pc, #472]	@ (801201c <tcp_process+0x5ac>)
 8011e44:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011e48:	4975      	ldr	r1, [pc, #468]	@ (8012020 <tcp_process+0x5b0>)
 8011e4a:	4876      	ldr	r0, [pc, #472]	@ (8012024 <tcp_process+0x5b4>)
 8011e4c:	f006 fb90 	bl	8018570 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00a      	beq.n	8011e70 <tcp_process+0x400>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e5e:	699b      	ldr	r3, [r3, #24]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	6910      	ldr	r0, [r2, #16]
 8011e64:	2200      	movs	r2, #0
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	4798      	blx	r3
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	76bb      	strb	r3, [r7, #26]
 8011e6e:	e001      	b.n	8011e74 <tcp_process+0x404>
 8011e70:	23f0      	movs	r3, #240	@ 0xf0
 8011e72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011e74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00a      	beq.n	8011e92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011e7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e80:	f113 0f0d 	cmn.w	r3, #13
 8011e84:	d002      	beq.n	8011e8c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7fd ff8c 	bl	800fda4 <tcp_abort>
            }
            return ERR_ABRT;
 8011e8c:	f06f 030c 	mvn.w	r3, #12
 8011e90:	e1ce      	b.n	8012230 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 fae0 	bl	8012458 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011e98:	4b63      	ldr	r3, [pc, #396]	@ (8012028 <tcp_process+0x5b8>)
 8011e9a:	881b      	ldrh	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d005      	beq.n	8011eac <tcp_process+0x43c>
            recv_acked--;
 8011ea0:	4b61      	ldr	r3, [pc, #388]	@ (8012028 <tcp_process+0x5b8>)
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8012028 <tcp_process+0x5b8>)
 8011eaa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011eb0:	009a      	lsls	r2, r3, #2
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011ebc:	428b      	cmp	r3, r1
 8011ebe:	bf38      	it	cc
 8011ec0:	460b      	movcc	r3, r1
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d204      	bcs.n	8011ed0 <tcp_process+0x460>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	e00d      	b.n	8011eec <tcp_process+0x47c>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ed4:	005b      	lsls	r3, r3, #1
 8011ed6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011eda:	4293      	cmp	r3, r2
 8011edc:	d904      	bls.n	8011ee8 <tcp_process+0x478>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ee2:	005b      	lsls	r3, r3, #1
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	e001      	b.n	8011eec <tcp_process+0x47c>
 8011ee8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011ef2:	4b4e      	ldr	r3, [pc, #312]	@ (801202c <tcp_process+0x5bc>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d037      	beq.n	8011f6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	8b5b      	ldrh	r3, [r3, #26]
 8011f02:	f043 0302 	orr.w	r3, r3, #2
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2207      	movs	r2, #7
 8011f10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011f12:	e02c      	b.n	8011f6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f14:	4b3b      	ldr	r3, [pc, #236]	@ (8012004 <tcp_process+0x594>)
 8011f16:	6819      	ldr	r1, [r3, #0]
 8011f18:	4b3b      	ldr	r3, [pc, #236]	@ (8012008 <tcp_process+0x598>)
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	4b3b      	ldr	r3, [pc, #236]	@ (801200c <tcp_process+0x59c>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f24:	4b3a      	ldr	r3, [pc, #232]	@ (8012010 <tcp_process+0x5a0>)
 8011f26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f28:	885b      	ldrh	r3, [r3, #2]
 8011f2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f2c:	4a38      	ldr	r2, [pc, #224]	@ (8012010 <tcp_process+0x5a0>)
 8011f2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f30:	8812      	ldrh	r2, [r2, #0]
 8011f32:	b292      	uxth	r2, r2
 8011f34:	9202      	str	r2, [sp, #8]
 8011f36:	9301      	str	r3, [sp, #4]
 8011f38:	4b36      	ldr	r3, [pc, #216]	@ (8012014 <tcp_process+0x5a4>)
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	4b36      	ldr	r3, [pc, #216]	@ (8012018 <tcp_process+0x5a8>)
 8011f3e:	4602      	mov	r2, r0
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f002 fbcb 	bl	80146dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011f46:	e167      	b.n	8012218 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011f48:	4b2d      	ldr	r3, [pc, #180]	@ (8012000 <tcp_process+0x590>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	f003 0302 	and.w	r3, r3, #2
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f000 8161 	beq.w	8012218 <tcp_process+0x7a8>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f5a:	1e5a      	subs	r2, r3, #1
 8011f5c:	4b2b      	ldr	r3, [pc, #172]	@ (801200c <tcp_process+0x59c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	f040 8159 	bne.w	8012218 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f002 f9b2 	bl	80142d0 <tcp_rexmit>
      break;
 8011f6c:	e154      	b.n	8012218 <tcp_process+0x7a8>
 8011f6e:	e153      	b.n	8012218 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 fa71 	bl	8012458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011f76:	4b2d      	ldr	r3, [pc, #180]	@ (801202c <tcp_process+0x5bc>)
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	f003 0320 	and.w	r3, r3, #32
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f000 814c 	beq.w	801221c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	8b5b      	ldrh	r3, [r3, #26]
 8011f88:	f043 0302 	orr.w	r3, r3, #2
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2207      	movs	r2, #7
 8011f96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f98:	e140      	b.n	801221c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fa5c 	bl	8012458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011fa0:	4b22      	ldr	r3, [pc, #136]	@ (801202c <tcp_process+0x5bc>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	f003 0320 	and.w	r3, r3, #32
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d071      	beq.n	8012090 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fac:	4b14      	ldr	r3, [pc, #80]	@ (8012000 <tcp_process+0x590>)
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	f003 0310 	and.w	r3, r3, #16
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d060      	beq.n	801207a <tcp_process+0x60a>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011fbc:	4b11      	ldr	r3, [pc, #68]	@ (8012004 <tcp_process+0x594>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d15a      	bne.n	801207a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d156      	bne.n	801207a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	8b5b      	ldrh	r3, [r3, #26]
 8011fd0:	f043 0302 	orr.w	r3, r3, #2
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7fe fdbc 	bl	8010b58 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011fe0:	4b13      	ldr	r3, [pc, #76]	@ (8012030 <tcp_process+0x5c0>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d105      	bne.n	8011ff6 <tcp_process+0x586>
 8011fea:	4b11      	ldr	r3, [pc, #68]	@ (8012030 <tcp_process+0x5c0>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8012030 <tcp_process+0x5c0>)
 8011ff2:	6013      	str	r3, [r2, #0]
 8011ff4:	e02e      	b.n	8012054 <tcp_process+0x5e4>
 8011ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8012030 <tcp_process+0x5c0>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	617b      	str	r3, [r7, #20]
 8011ffc:	e027      	b.n	801204e <tcp_process+0x5de>
 8011ffe:	bf00      	nop
 8012000:	2000c6ec 	.word	0x2000c6ec
 8012004:	2000c6e4 	.word	0x2000c6e4
 8012008:	2000c6ea 	.word	0x2000c6ea
 801200c:	2000c6e0 	.word	0x2000c6e0
 8012010:	2000c6d0 	.word	0x2000c6d0
 8012014:	20008f64 	.word	0x20008f64
 8012018:	20008f68 	.word	0x20008f68
 801201c:	0801b97c 	.word	0x0801b97c
 8012020:	0801bc1c 	.word	0x0801bc1c
 8012024:	0801b9c8 	.word	0x0801b9c8
 8012028:	2000c6e8 	.word	0x2000c6e8
 801202c:	2000c6ed 	.word	0x2000c6ed
 8012030:	2000c6b4 	.word	0x2000c6b4
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	429a      	cmp	r2, r3
 801203c:	d104      	bne.n	8012048 <tcp_process+0x5d8>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	68da      	ldr	r2, [r3, #12]
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	60da      	str	r2, [r3, #12]
 8012046:	e005      	b.n	8012054 <tcp_process+0x5e4>
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	617b      	str	r3, [r7, #20]
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d1ef      	bne.n	8012034 <tcp_process+0x5c4>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	60da      	str	r2, [r3, #12]
 801205a:	4b77      	ldr	r3, [pc, #476]	@ (8012238 <tcp_process+0x7c8>)
 801205c:	2201      	movs	r2, #1
 801205e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	220a      	movs	r2, #10
 8012064:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012066:	4b75      	ldr	r3, [pc, #468]	@ (801223c <tcp_process+0x7cc>)
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	60da      	str	r2, [r3, #12]
 801206e:	4a73      	ldr	r2, [pc, #460]	@ (801223c <tcp_process+0x7cc>)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6013      	str	r3, [r2, #0]
 8012074:	f002 fcf4 	bl	8014a60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012078:	e0d2      	b.n	8012220 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8b5b      	ldrh	r3, [r3, #26]
 801207e:	f043 0302 	orr.w	r3, r3, #2
 8012082:	b29a      	uxth	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2208      	movs	r2, #8
 801208c:	751a      	strb	r2, [r3, #20]
      break;
 801208e:	e0c7      	b.n	8012220 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012090:	4b6b      	ldr	r3, [pc, #428]	@ (8012240 <tcp_process+0x7d0>)
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	f003 0310 	and.w	r3, r3, #16
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 80c1 	beq.w	8012220 <tcp_process+0x7b0>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80120a2:	4b68      	ldr	r3, [pc, #416]	@ (8012244 <tcp_process+0x7d4>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	f040 80ba 	bne.w	8012220 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f040 80b5 	bne.w	8012220 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2206      	movs	r2, #6
 80120ba:	751a      	strb	r2, [r3, #20]
      break;
 80120bc:	e0b0      	b.n	8012220 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 f9ca 	bl	8012458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80120c4:	4b60      	ldr	r3, [pc, #384]	@ (8012248 <tcp_process+0x7d8>)
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	f003 0320 	and.w	r3, r3, #32
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 80a9 	beq.w	8012224 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8b5b      	ldrh	r3, [r3, #26]
 80120d6:	f043 0302 	orr.w	r3, r3, #2
 80120da:	b29a      	uxth	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7fe fd39 	bl	8010b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80120e6:	4b59      	ldr	r3, [pc, #356]	@ (801224c <tcp_process+0x7dc>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d105      	bne.n	80120fc <tcp_process+0x68c>
 80120f0:	4b56      	ldr	r3, [pc, #344]	@ (801224c <tcp_process+0x7dc>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	4a55      	ldr	r2, [pc, #340]	@ (801224c <tcp_process+0x7dc>)
 80120f8:	6013      	str	r3, [r2, #0]
 80120fa:	e013      	b.n	8012124 <tcp_process+0x6b4>
 80120fc:	4b53      	ldr	r3, [pc, #332]	@ (801224c <tcp_process+0x7dc>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	613b      	str	r3, [r7, #16]
 8012102:	e00c      	b.n	801211e <tcp_process+0x6ae>
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	429a      	cmp	r2, r3
 801210c:	d104      	bne.n	8012118 <tcp_process+0x6a8>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68da      	ldr	r2, [r3, #12]
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	60da      	str	r2, [r3, #12]
 8012116:	e005      	b.n	8012124 <tcp_process+0x6b4>
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	613b      	str	r3, [r7, #16]
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d1ef      	bne.n	8012104 <tcp_process+0x694>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2200      	movs	r2, #0
 8012128:	60da      	str	r2, [r3, #12]
 801212a:	4b43      	ldr	r3, [pc, #268]	@ (8012238 <tcp_process+0x7c8>)
 801212c:	2201      	movs	r2, #1
 801212e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	220a      	movs	r2, #10
 8012134:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012136:	4b41      	ldr	r3, [pc, #260]	@ (801223c <tcp_process+0x7cc>)
 8012138:	681a      	ldr	r2, [r3, #0]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	60da      	str	r2, [r3, #12]
 801213e:	4a3f      	ldr	r2, [pc, #252]	@ (801223c <tcp_process+0x7cc>)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6013      	str	r3, [r2, #0]
 8012144:	f002 fc8c 	bl	8014a60 <tcp_timer_needed>
      }
      break;
 8012148:	e06c      	b.n	8012224 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f984 	bl	8012458 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012150:	4b3b      	ldr	r3, [pc, #236]	@ (8012240 <tcp_process+0x7d0>)
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f003 0310 	and.w	r3, r3, #16
 8012158:	2b00      	cmp	r3, #0
 801215a:	d065      	beq.n	8012228 <tcp_process+0x7b8>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012160:	4b38      	ldr	r3, [pc, #224]	@ (8012244 <tcp_process+0x7d4>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	429a      	cmp	r2, r3
 8012166:	d15f      	bne.n	8012228 <tcp_process+0x7b8>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801216c:	2b00      	cmp	r3, #0
 801216e:	d15b      	bne.n	8012228 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7fe fcf1 	bl	8010b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012176:	4b35      	ldr	r3, [pc, #212]	@ (801224c <tcp_process+0x7dc>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	429a      	cmp	r2, r3
 801217e:	d105      	bne.n	801218c <tcp_process+0x71c>
 8012180:	4b32      	ldr	r3, [pc, #200]	@ (801224c <tcp_process+0x7dc>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	4a31      	ldr	r2, [pc, #196]	@ (801224c <tcp_process+0x7dc>)
 8012188:	6013      	str	r3, [r2, #0]
 801218a:	e013      	b.n	80121b4 <tcp_process+0x744>
 801218c:	4b2f      	ldr	r3, [pc, #188]	@ (801224c <tcp_process+0x7dc>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	60fb      	str	r3, [r7, #12]
 8012192:	e00c      	b.n	80121ae <tcp_process+0x73e>
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	429a      	cmp	r2, r3
 801219c:	d104      	bne.n	80121a8 <tcp_process+0x738>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	68da      	ldr	r2, [r3, #12]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	60da      	str	r2, [r3, #12]
 80121a6:	e005      	b.n	80121b4 <tcp_process+0x744>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	60fb      	str	r3, [r7, #12]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d1ef      	bne.n	8012194 <tcp_process+0x724>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	60da      	str	r2, [r3, #12]
 80121ba:	4b1f      	ldr	r3, [pc, #124]	@ (8012238 <tcp_process+0x7c8>)
 80121bc:	2201      	movs	r2, #1
 80121be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	220a      	movs	r2, #10
 80121c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80121c6:	4b1d      	ldr	r3, [pc, #116]	@ (801223c <tcp_process+0x7cc>)
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	60da      	str	r2, [r3, #12]
 80121ce:	4a1b      	ldr	r2, [pc, #108]	@ (801223c <tcp_process+0x7cc>)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6013      	str	r3, [r2, #0]
 80121d4:	f002 fc44 	bl	8014a60 <tcp_timer_needed>
      }
      break;
 80121d8:	e026      	b.n	8012228 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 f93c 	bl	8012458 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80121e0:	4b17      	ldr	r3, [pc, #92]	@ (8012240 <tcp_process+0x7d0>)
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	f003 0310 	and.w	r3, r3, #16
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d01f      	beq.n	801222c <tcp_process+0x7bc>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80121f0:	4b14      	ldr	r3, [pc, #80]	@ (8012244 <tcp_process+0x7d4>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d119      	bne.n	801222c <tcp_process+0x7bc>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d115      	bne.n	801222c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012200:	4b11      	ldr	r3, [pc, #68]	@ (8012248 <tcp_process+0x7d8>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	f043 0310 	orr.w	r3, r3, #16
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b0f      	ldr	r3, [pc, #60]	@ (8012248 <tcp_process+0x7d8>)
 801220c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801220e:	e00d      	b.n	801222c <tcp_process+0x7bc>
    default:
      break;
 8012210:	bf00      	nop
 8012212:	e00c      	b.n	801222e <tcp_process+0x7be>
      break;
 8012214:	bf00      	nop
 8012216:	e00a      	b.n	801222e <tcp_process+0x7be>
      break;
 8012218:	bf00      	nop
 801221a:	e008      	b.n	801222e <tcp_process+0x7be>
      break;
 801221c:	bf00      	nop
 801221e:	e006      	b.n	801222e <tcp_process+0x7be>
      break;
 8012220:	bf00      	nop
 8012222:	e004      	b.n	801222e <tcp_process+0x7be>
      break;
 8012224:	bf00      	nop
 8012226:	e002      	b.n	801222e <tcp_process+0x7be>
      break;
 8012228:	bf00      	nop
 801222a:	e000      	b.n	801222e <tcp_process+0x7be>
      break;
 801222c:	bf00      	nop
  }
  return ERR_OK;
 801222e:	2300      	movs	r3, #0
}
 8012230:	4618      	mov	r0, r3
 8012232:	3724      	adds	r7, #36	@ 0x24
 8012234:	46bd      	mov	sp, r7
 8012236:	bd90      	pop	{r4, r7, pc}
 8012238:	2000c6bc 	.word	0x2000c6bc
 801223c:	2000c6b8 	.word	0x2000c6b8
 8012240:	2000c6ec 	.word	0x2000c6ec
 8012244:	2000c6e4 	.word	0x2000c6e4
 8012248:	2000c6ed 	.word	0x2000c6ed
 801224c:	2000c6b4 	.word	0x2000c6b4

08012250 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012250:	b590      	push	{r4, r7, lr}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d106      	bne.n	801226e <tcp_oos_insert_segment+0x1e>
 8012260:	4b3b      	ldr	r3, [pc, #236]	@ (8012350 <tcp_oos_insert_segment+0x100>)
 8012262:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012266:	493b      	ldr	r1, [pc, #236]	@ (8012354 <tcp_oos_insert_segment+0x104>)
 8012268:	483b      	ldr	r0, [pc, #236]	@ (8012358 <tcp_oos_insert_segment+0x108>)
 801226a:	f006 f981 	bl	8018570 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	68db      	ldr	r3, [r3, #12]
 8012272:	899b      	ldrh	r3, [r3, #12]
 8012274:	b29b      	uxth	r3, r3
 8012276:	4618      	mov	r0, r3
 8012278:	f7fb fc40 	bl	800dafc <lwip_htons>
 801227c:	4603      	mov	r3, r0
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	2b00      	cmp	r3, #0
 8012286:	d028      	beq.n	80122da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012288:	6838      	ldr	r0, [r7, #0]
 801228a:	f7fe fa63 	bl	8010754 <tcp_segs_free>
    next = NULL;
 801228e:	2300      	movs	r3, #0
 8012290:	603b      	str	r3, [r7, #0]
 8012292:	e056      	b.n	8012342 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	899b      	ldrh	r3, [r3, #12]
 801229a:	b29b      	uxth	r3, r3
 801229c:	4618      	mov	r0, r3
 801229e:	f7fb fc2d 	bl	800dafc <lwip_htons>
 80122a2:	4603      	mov	r3, r0
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d00d      	beq.n	80122ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	899b      	ldrh	r3, [r3, #12]
 80122b4:	b29c      	uxth	r4, r3
 80122b6:	2001      	movs	r0, #1
 80122b8:	f7fb fc20 	bl	800dafc <lwip_htons>
 80122bc:	4603      	mov	r3, r0
 80122be:	461a      	mov	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	4322      	orrs	r2, r4
 80122c6:	b292      	uxth	r2, r2
 80122c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f7fe fa52 	bl	801077e <tcp_seg_free>
    while (next &&
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00e      	beq.n	80122fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	461a      	mov	r2, r3
 80122e6:	4b1d      	ldr	r3, [pc, #116]	@ (801235c <tcp_oos_insert_segment+0x10c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	441a      	add	r2, r3
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	6839      	ldr	r1, [r7, #0]
 80122f4:	8909      	ldrh	r1, [r1, #8]
 80122f6:	440b      	add	r3, r1
 80122f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	daca      	bge.n	8012294 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d01e      	beq.n	8012342 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	891b      	ldrh	r3, [r3, #8]
 8012308:	461a      	mov	r2, r3
 801230a:	4b14      	ldr	r3, [pc, #80]	@ (801235c <tcp_oos_insert_segment+0x10c>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	441a      	add	r2, r3
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012318:	2b00      	cmp	r3, #0
 801231a:	dd12      	ble.n	8012342 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	b29a      	uxth	r2, r3
 8012324:	4b0d      	ldr	r3, [pc, #52]	@ (801235c <tcp_oos_insert_segment+0x10c>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	b29b      	uxth	r3, r3
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	b29a      	uxth	r2, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	685a      	ldr	r2, [r3, #4]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	891b      	ldrh	r3, [r3, #8]
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fc fe17 	bl	800ef70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	683a      	ldr	r2, [r7, #0]
 8012346:	601a      	str	r2, [r3, #0]
}
 8012348:	bf00      	nop
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	bd90      	pop	{r4, r7, pc}
 8012350:	0801b97c 	.word	0x0801b97c
 8012354:	0801bc3c 	.word	0x0801bc3c
 8012358:	0801b9c8 	.word	0x0801b9c8
 801235c:	2000c6e0 	.word	0x2000c6e0

08012360 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012360:	b5b0      	push	{r4, r5, r7, lr}
 8012362:	b086      	sub	sp, #24
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
 801236c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801236e:	e03e      	b.n	80123ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	f7fd f80a 	bl	800f398 <pbuf_clen>
 8012384:	4603      	mov	r3, r0
 8012386:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801238e:	8a7a      	ldrh	r2, [r7, #18]
 8012390:	429a      	cmp	r2, r3
 8012392:	d906      	bls.n	80123a2 <tcp_free_acked_segments+0x42>
 8012394:	4b2a      	ldr	r3, [pc, #168]	@ (8012440 <tcp_free_acked_segments+0xe0>)
 8012396:	f240 4257 	movw	r2, #1111	@ 0x457
 801239a:	492a      	ldr	r1, [pc, #168]	@ (8012444 <tcp_free_acked_segments+0xe4>)
 801239c:	482a      	ldr	r0, [pc, #168]	@ (8012448 <tcp_free_acked_segments+0xe8>)
 801239e:	f006 f8e7 	bl	8018570 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80123a8:	8a7b      	ldrh	r3, [r7, #18]
 80123aa:	1ad3      	subs	r3, r2, r3
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	891a      	ldrh	r2, [r3, #8]
 80123b8:	4b24      	ldr	r3, [pc, #144]	@ (801244c <tcp_free_acked_segments+0xec>)
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	4413      	add	r3, r2
 80123be:	b29a      	uxth	r2, r3
 80123c0:	4b22      	ldr	r3, [pc, #136]	@ (801244c <tcp_free_acked_segments+0xec>)
 80123c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80123c4:	6978      	ldr	r0, [r7, #20]
 80123c6:	f7fe f9da 	bl	801077e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d00c      	beq.n	80123ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d109      	bne.n	80123ee <tcp_free_acked_segments+0x8e>
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d106      	bne.n	80123ee <tcp_free_acked_segments+0x8e>
 80123e0:	4b17      	ldr	r3, [pc, #92]	@ (8012440 <tcp_free_acked_segments+0xe0>)
 80123e2:	f240 4261 	movw	r2, #1121	@ 0x461
 80123e6:	491a      	ldr	r1, [pc, #104]	@ (8012450 <tcp_free_acked_segments+0xf0>)
 80123e8:	4817      	ldr	r0, [pc, #92]	@ (8012448 <tcp_free_acked_segments+0xe8>)
 80123ea:	f006 f8c1 	bl	8018570 <iprintf>
  while (seg_list != NULL &&
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d020      	beq.n	8012436 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fb fb94 	bl	800db28 <lwip_htonl>
 8012400:	4604      	mov	r4, r0
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	891b      	ldrh	r3, [r3, #8]
 8012406:	461d      	mov	r5, r3
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	899b      	ldrh	r3, [r3, #12]
 801240e:	b29b      	uxth	r3, r3
 8012410:	4618      	mov	r0, r3
 8012412:	f7fb fb73 	bl	800dafc <lwip_htons>
 8012416:	4603      	mov	r3, r0
 8012418:	b2db      	uxtb	r3, r3
 801241a:	f003 0303 	and.w	r3, r3, #3
 801241e:	2b00      	cmp	r3, #0
 8012420:	d001      	beq.n	8012426 <tcp_free_acked_segments+0xc6>
 8012422:	2301      	movs	r3, #1
 8012424:	e000      	b.n	8012428 <tcp_free_acked_segments+0xc8>
 8012426:	2300      	movs	r3, #0
 8012428:	442b      	add	r3, r5
 801242a:	18e2      	adds	r2, r4, r3
 801242c:	4b09      	ldr	r3, [pc, #36]	@ (8012454 <tcp_free_acked_segments+0xf4>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012432:	2b00      	cmp	r3, #0
 8012434:	dd9c      	ble.n	8012370 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012436:	68bb      	ldr	r3, [r7, #8]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bdb0      	pop	{r4, r5, r7, pc}
 8012440:	0801b97c 	.word	0x0801b97c
 8012444:	0801bc64 	.word	0x0801bc64
 8012448:	0801b9c8 	.word	0x0801b9c8
 801244c:	2000c6e8 	.word	0x2000c6e8
 8012450:	0801bc8c 	.word	0x0801bc8c
 8012454:	2000c6e4 	.word	0x2000c6e4

08012458 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b094      	sub	sp, #80	@ 0x50
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012460:	2300      	movs	r3, #0
 8012462:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <tcp_receive+0x20>
 801246a:	4b91      	ldr	r3, [pc, #580]	@ (80126b0 <tcp_receive+0x258>)
 801246c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012470:	4990      	ldr	r1, [pc, #576]	@ (80126b4 <tcp_receive+0x25c>)
 8012472:	4891      	ldr	r0, [pc, #580]	@ (80126b8 <tcp_receive+0x260>)
 8012474:	f006 f87c 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	7d1b      	ldrb	r3, [r3, #20]
 801247c:	2b03      	cmp	r3, #3
 801247e:	d806      	bhi.n	801248e <tcp_receive+0x36>
 8012480:	4b8b      	ldr	r3, [pc, #556]	@ (80126b0 <tcp_receive+0x258>)
 8012482:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012486:	498d      	ldr	r1, [pc, #564]	@ (80126bc <tcp_receive+0x264>)
 8012488:	488b      	ldr	r0, [pc, #556]	@ (80126b8 <tcp_receive+0x260>)
 801248a:	f006 f871 	bl	8018570 <iprintf>

  if (flags & TCP_ACK) {
 801248e:	4b8c      	ldr	r3, [pc, #560]	@ (80126c0 <tcp_receive+0x268>)
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	f003 0310 	and.w	r3, r3, #16
 8012496:	2b00      	cmp	r3, #0
 8012498:	f000 8264 	beq.w	8012964 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80124a2:	461a      	mov	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124a8:	4413      	add	r3, r2
 80124aa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80124b0:	4b84      	ldr	r3, [pc, #528]	@ (80126c4 <tcp_receive+0x26c>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	db1b      	blt.n	80124f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80124be:	4b81      	ldr	r3, [pc, #516]	@ (80126c4 <tcp_receive+0x26c>)
 80124c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d106      	bne.n	80124d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80124ca:	4b7f      	ldr	r3, [pc, #508]	@ (80126c8 <tcp_receive+0x270>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	db0e      	blt.n	80124f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80124d8:	4b7b      	ldr	r3, [pc, #492]	@ (80126c8 <tcp_receive+0x270>)
 80124da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124dc:	429a      	cmp	r2, r3
 80124de:	d125      	bne.n	801252c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124e0:	4b7a      	ldr	r3, [pc, #488]	@ (80126cc <tcp_receive+0x274>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	89db      	ldrh	r3, [r3, #14]
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d91c      	bls.n	801252c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80124f2:	4b76      	ldr	r3, [pc, #472]	@ (80126cc <tcp_receive+0x274>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	89db      	ldrh	r3, [r3, #14]
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801250c:	429a      	cmp	r2, r3
 801250e:	d205      	bcs.n	801251c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801251c:	4b69      	ldr	r3, [pc, #420]	@ (80126c4 <tcp_receive+0x26c>)
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012524:	4b68      	ldr	r3, [pc, #416]	@ (80126c8 <tcp_receive+0x270>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801252c:	4b66      	ldr	r3, [pc, #408]	@ (80126c8 <tcp_receive+0x270>)
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	2b00      	cmp	r3, #0
 8012538:	dc58      	bgt.n	80125ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801253a:	4b65      	ldr	r3, [pc, #404]	@ (80126d0 <tcp_receive+0x278>)
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d14b      	bne.n	80125da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801254c:	4413      	add	r3, r2
 801254e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012550:	429a      	cmp	r2, r3
 8012552:	d142      	bne.n	80125da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801255a:	2b00      	cmp	r3, #0
 801255c:	db3d      	blt.n	80125da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012562:	4b59      	ldr	r3, [pc, #356]	@ (80126c8 <tcp_receive+0x270>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	d137      	bne.n	80125da <tcp_receive+0x182>
              found_dupack = 1;
 801256a:	2301      	movs	r3, #1
 801256c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012574:	2bff      	cmp	r3, #255	@ 0xff
 8012576:	d007      	beq.n	8012588 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801257e:	3301      	adds	r3, #1
 8012580:	b2da      	uxtb	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801258e:	2b03      	cmp	r3, #3
 8012590:	d91b      	bls.n	80125ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801259c:	4413      	add	r3, r2
 801259e:	b29a      	uxth	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d30a      	bcc.n	80125c0 <tcp_receive+0x168>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125b4:	4413      	add	r3, r2
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80125be:	e004      	b.n	80125ca <tcp_receive+0x172>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	d902      	bls.n	80125da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f001 fee7 	bl	80143a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80125da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 8161 	bne.w	80128a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80125ea:	e15b      	b.n	80128a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125ec:	4b36      	ldr	r3, [pc, #216]	@ (80126c8 <tcp_receive+0x270>)
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	3b01      	subs	r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f2c0 814e 	blt.w	801289a <tcp_receive+0x442>
 80125fe:	4b32      	ldr	r3, [pc, #200]	@ (80126c8 <tcp_receive+0x270>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	2b00      	cmp	r3, #0
 801260a:	f300 8146 	bgt.w	801289a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	8b5b      	ldrh	r3, [r3, #26]
 8012612:	f003 0304 	and.w	r3, r3, #4
 8012616:	2b00      	cmp	r3, #0
 8012618:	d010      	beq.n	801263c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	8b5b      	ldrh	r3, [r3, #26]
 801261e:	f023 0304 	bic.w	r3, r3, #4
 8012622:	b29a      	uxth	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2200      	movs	r2, #0
 8012640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801264a:	10db      	asrs	r3, r3, #3
 801264c:	b21b      	sxth	r3, r3
 801264e:	b29a      	uxth	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012656:	b29b      	uxth	r3, r3
 8012658:	4413      	add	r3, r2
 801265a:	b29b      	uxth	r3, r3
 801265c:	b21a      	sxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012664:	4b18      	ldr	r3, [pc, #96]	@ (80126c8 <tcp_receive+0x270>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	b29a      	uxth	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801266e:	b29b      	uxth	r3, r3
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801267c:	4b12      	ldr	r3, [pc, #72]	@ (80126c8 <tcp_receive+0x270>)
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	7d1b      	ldrb	r3, [r3, #20]
 8012688:	2b03      	cmp	r3, #3
 801268a:	f240 8097 	bls.w	80127bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801269a:	429a      	cmp	r2, r3
 801269c:	d245      	bcs.n	801272a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	8b5b      	ldrh	r3, [r3, #26]
 80126a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d014      	beq.n	80126d4 <tcp_receive+0x27c>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e013      	b.n	80126d6 <tcp_receive+0x27e>
 80126ae:	bf00      	nop
 80126b0:	0801b97c 	.word	0x0801b97c
 80126b4:	0801bcac 	.word	0x0801bcac
 80126b8:	0801b9c8 	.word	0x0801b9c8
 80126bc:	0801bcc8 	.word	0x0801bcc8
 80126c0:	2000c6ec 	.word	0x2000c6ec
 80126c4:	2000c6e0 	.word	0x2000c6e0
 80126c8:	2000c6e4 	.word	0x2000c6e4
 80126cc:	2000c6d0 	.word	0x2000c6d0
 80126d0:	2000c6ea 	.word	0x2000c6ea
 80126d4:	2302      	movs	r3, #2
 80126d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80126da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80126de:	b29a      	uxth	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126e4:	fb12 f303 	smulbb	r3, r2, r3
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80126ec:	4293      	cmp	r3, r2
 80126ee:	bf28      	it	cs
 80126f0:	4613      	movcs	r3, r2
 80126f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80126fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80126fc:	4413      	add	r3, r2
 80126fe:	b29a      	uxth	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012706:	429a      	cmp	r2, r3
 8012708:	d309      	bcc.n	801271e <tcp_receive+0x2c6>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012710:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012712:	4413      	add	r3, r2
 8012714:	b29a      	uxth	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801271c:	e04e      	b.n	80127bc <tcp_receive+0x364>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012724:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012728:	e048      	b.n	80127bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012730:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012732:	4413      	add	r3, r2
 8012734:	b29a      	uxth	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801273c:	429a      	cmp	r2, r3
 801273e:	d309      	bcc.n	8012754 <tcp_receive+0x2fc>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012746:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012748:	4413      	add	r3, r2
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012752:	e004      	b.n	801275e <tcp_receive+0x306>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801275a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801276a:	429a      	cmp	r2, r3
 801276c:	d326      	bcc.n	80127bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	b29a      	uxth	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801278e:	4413      	add	r3, r2
 8012790:	b29a      	uxth	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012798:	429a      	cmp	r2, r3
 801279a:	d30a      	bcc.n	80127b2 <tcp_receive+0x35a>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127a6:	4413      	add	r3, r2
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80127b0:	e004      	b.n	80127bc <tcp_receive+0x364>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80127b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127c4:	4a98      	ldr	r2, [pc, #608]	@ (8012a28 <tcp_receive+0x5d0>)
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ff fdca 	bl	8012360 <tcp_free_acked_segments>
 80127cc:	4602      	mov	r2, r0
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127da:	4a94      	ldr	r2, [pc, #592]	@ (8012a2c <tcp_receive+0x5d4>)
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f7ff fdbf 	bl	8012360 <tcp_free_acked_segments>
 80127e2:	4602      	mov	r2, r0
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d104      	bne.n	80127fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80127f6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80127f8:	e002      	b.n	8012800 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801280a:	2b00      	cmp	r3, #0
 801280c:	d103      	bne.n	8012816 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801281c:	4b84      	ldr	r3, [pc, #528]	@ (8012a30 <tcp_receive+0x5d8>)
 801281e:	881b      	ldrh	r3, [r3, #0]
 8012820:	4413      	add	r3, r2
 8012822:	b29a      	uxth	r2, r3
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	8b5b      	ldrh	r3, [r3, #26]
 801282e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012832:	2b00      	cmp	r3, #0
 8012834:	d035      	beq.n	80128a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801283a:	2b00      	cmp	r3, #0
 801283c:	d118      	bne.n	8012870 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00c      	beq.n	8012860 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	4618      	mov	r0, r3
 8012854:	f7fb f968 	bl	800db28 <lwip_htonl>
 8012858:	4603      	mov	r3, r0
 801285a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801285c:	2b00      	cmp	r3, #0
 801285e:	dc20      	bgt.n	80128a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012868:	b29a      	uxth	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801286e:	e018      	b.n	80128a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	f7fb f953 	bl	800db28 <lwip_htonl>
 8012882:	4603      	mov	r3, r0
 8012884:	1ae3      	subs	r3, r4, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	dc0b      	bgt.n	80128a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	8b5b      	ldrh	r3, [r3, #26]
 801288e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012892:	b29a      	uxth	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012898:	e003      	b.n	80128a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f001 ff70 	bl	8014780 <tcp_send_empty_ack>
 80128a0:	e000      	b.n	80128a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d05b      	beq.n	8012964 <tcp_receive+0x50c>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80128b0:	4b60      	ldr	r3, [pc, #384]	@ (8012a34 <tcp_receive+0x5dc>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	1ad3      	subs	r3, r2, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	da54      	bge.n	8012964 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80128ba:	4b5f      	ldr	r3, [pc, #380]	@ (8012a38 <tcp_receive+0x5e0>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	b29a      	uxth	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80128ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80128d8:	10db      	asrs	r3, r3, #3
 80128da:	b21b      	sxth	r3, r3
 80128dc:	b29b      	uxth	r3, r3
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80128f2:	4413      	add	r3, r2
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	b21a      	sxth	r2, r3
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80128fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012900:	2b00      	cmp	r3, #0
 8012902:	da05      	bge.n	8012910 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012908:	425b      	negs	r3, r3
 801290a:	b29b      	uxth	r3, r3
 801290c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012910:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801291a:	109b      	asrs	r3, r3, #2
 801291c:	b21b      	sxth	r3, r3
 801291e:	b29b      	uxth	r3, r3
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	b29b      	uxth	r3, r3
 8012924:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801292e:	b29a      	uxth	r2, r3
 8012930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012934:	4413      	add	r3, r2
 8012936:	b29b      	uxth	r3, r3
 8012938:	b21a      	sxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012944:	10db      	asrs	r3, r3, #3
 8012946:	b21b      	sxth	r3, r3
 8012948:	b29a      	uxth	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012950:	b29b      	uxth	r3, r3
 8012952:	4413      	add	r3, r2
 8012954:	b29b      	uxth	r3, r3
 8012956:	b21a      	sxth	r2, r3
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2200      	movs	r2, #0
 8012962:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012964:	4b35      	ldr	r3, [pc, #212]	@ (8012a3c <tcp_receive+0x5e4>)
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 84df 	beq.w	801332c <tcp_receive+0xed4>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	7d1b      	ldrb	r3, [r3, #20]
 8012972:	2b06      	cmp	r3, #6
 8012974:	f200 84da 	bhi.w	801332c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801297c:	4b30      	ldr	r3, [pc, #192]	@ (8012a40 <tcp_receive+0x5e8>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	3b01      	subs	r3, #1
 8012984:	2b00      	cmp	r3, #0
 8012986:	f2c0 808f 	blt.w	8012aa8 <tcp_receive+0x650>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801298e:	4b2b      	ldr	r3, [pc, #172]	@ (8012a3c <tcp_receive+0x5e4>)
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	4619      	mov	r1, r3
 8012994:	4b2a      	ldr	r3, [pc, #168]	@ (8012a40 <tcp_receive+0x5e8>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	440b      	add	r3, r1
 801299a:	1ad3      	subs	r3, r2, r3
 801299c:	3301      	adds	r3, #1
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f300 8082 	bgt.w	8012aa8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80129a4:	4b27      	ldr	r3, [pc, #156]	@ (8012a44 <tcp_receive+0x5ec>)
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129ae:	4b24      	ldr	r3, [pc, #144]	@ (8012a40 <tcp_receive+0x5e8>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	1ad3      	subs	r3, r2, r3
 80129b4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80129b6:	4b23      	ldr	r3, [pc, #140]	@ (8012a44 <tcp_receive+0x5ec>)
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d106      	bne.n	80129cc <tcp_receive+0x574>
 80129be:	4b22      	ldr	r3, [pc, #136]	@ (8012a48 <tcp_receive+0x5f0>)
 80129c0:	f240 5294 	movw	r2, #1428	@ 0x594
 80129c4:	4921      	ldr	r1, [pc, #132]	@ (8012a4c <tcp_receive+0x5f4>)
 80129c6:	4822      	ldr	r0, [pc, #136]	@ (8012a50 <tcp_receive+0x5f8>)
 80129c8:	f005 fdd2 	bl	8018570 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80129cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d906      	bls.n	80129e4 <tcp_receive+0x58c>
 80129d6:	4b1c      	ldr	r3, [pc, #112]	@ (8012a48 <tcp_receive+0x5f0>)
 80129d8:	f240 5295 	movw	r2, #1429	@ 0x595
 80129dc:	491d      	ldr	r1, [pc, #116]	@ (8012a54 <tcp_receive+0x5fc>)
 80129de:	481c      	ldr	r0, [pc, #112]	@ (8012a50 <tcp_receive+0x5f8>)
 80129e0:	f005 fdc6 	bl	8018570 <iprintf>
      off = (u16_t)off32;
 80129e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80129ea:	4b16      	ldr	r3, [pc, #88]	@ (8012a44 <tcp_receive+0x5ec>)
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	891b      	ldrh	r3, [r3, #8]
 80129f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d906      	bls.n	8012a06 <tcp_receive+0x5ae>
 80129f8:	4b13      	ldr	r3, [pc, #76]	@ (8012a48 <tcp_receive+0x5f0>)
 80129fa:	f240 5297 	movw	r2, #1431	@ 0x597
 80129fe:	4916      	ldr	r1, [pc, #88]	@ (8012a58 <tcp_receive+0x600>)
 8012a00:	4813      	ldr	r0, [pc, #76]	@ (8012a50 <tcp_receive+0x5f8>)
 8012a02:	f005 fdb5 	bl	8018570 <iprintf>
      inseg.len -= off;
 8012a06:	4b0f      	ldr	r3, [pc, #60]	@ (8012a44 <tcp_receive+0x5ec>)
 8012a08:	891a      	ldrh	r2, [r3, #8]
 8012a0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	4b0c      	ldr	r3, [pc, #48]	@ (8012a44 <tcp_receive+0x5ec>)
 8012a14:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012a16:	4b0b      	ldr	r3, [pc, #44]	@ (8012a44 <tcp_receive+0x5ec>)
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	891a      	ldrh	r2, [r3, #8]
 8012a1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a20:	1ad3      	subs	r3, r2, r3
 8012a22:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012a24:	e02a      	b.n	8012a7c <tcp_receive+0x624>
 8012a26:	bf00      	nop
 8012a28:	0801bce4 	.word	0x0801bce4
 8012a2c:	0801bcec 	.word	0x0801bcec
 8012a30:	2000c6e8 	.word	0x2000c6e8
 8012a34:	2000c6e4 	.word	0x2000c6e4
 8012a38:	2000c6a8 	.word	0x2000c6a8
 8012a3c:	2000c6ea 	.word	0x2000c6ea
 8012a40:	2000c6e0 	.word	0x2000c6e0
 8012a44:	2000c6c0 	.word	0x2000c6c0
 8012a48:	0801b97c 	.word	0x0801b97c
 8012a4c:	0801bcf4 	.word	0x0801bcf4
 8012a50:	0801b9c8 	.word	0x0801b9c8
 8012a54:	0801bd04 	.word	0x0801bd04
 8012a58:	0801bd14 	.word	0x0801bd14
        off -= p->len;
 8012a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a5e:	895b      	ldrh	r3, [r3, #10]
 8012a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a6c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012a6e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a72:	2200      	movs	r2, #0
 8012a74:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a7e:	895b      	ldrh	r3, [r3, #10]
 8012a80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d8e9      	bhi.n	8012a5c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012a90:	f7fc fb6e 	bl	800f170 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a98:	4a90      	ldr	r2, [pc, #576]	@ (8012cdc <tcp_receive+0x884>)
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	4b90      	ldr	r3, [pc, #576]	@ (8012ce0 <tcp_receive+0x888>)
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	4a8e      	ldr	r2, [pc, #568]	@ (8012cdc <tcp_receive+0x884>)
 8012aa2:	6812      	ldr	r2, [r2, #0]
 8012aa4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012aa6:	e00d      	b.n	8012ac4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8012cdc <tcp_receive+0x884>)
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	da06      	bge.n	8012ac4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	8b5b      	ldrh	r3, [r3, #26]
 8012aba:	f043 0302 	orr.w	r3, r3, #2
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ac4:	4b85      	ldr	r3, [pc, #532]	@ (8012cdc <tcp_receive+0x884>)
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f2c0 8427 	blt.w	8013322 <tcp_receive+0xeca>
 8012ad4:	4b81      	ldr	r3, [pc, #516]	@ (8012cdc <tcp_receive+0x884>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012adc:	6879      	ldr	r1, [r7, #4]
 8012ade:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012ae0:	440b      	add	r3, r1
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f300 841b 	bgt.w	8013322 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012af0:	4b7a      	ldr	r3, [pc, #488]	@ (8012cdc <tcp_receive+0x884>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	f040 8298 	bne.w	801302a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012afa:	4b79      	ldr	r3, [pc, #484]	@ (8012ce0 <tcp_receive+0x888>)
 8012afc:	891c      	ldrh	r4, [r3, #8]
 8012afe:	4b78      	ldr	r3, [pc, #480]	@ (8012ce0 <tcp_receive+0x888>)
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	899b      	ldrh	r3, [r3, #12]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fa fff8 	bl	800dafc <lwip_htons>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	f003 0303 	and.w	r3, r3, #3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d001      	beq.n	8012b1c <tcp_receive+0x6c4>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	e000      	b.n	8012b1e <tcp_receive+0x6c6>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	4423      	add	r3, r4
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	4b70      	ldr	r3, [pc, #448]	@ (8012ce4 <tcp_receive+0x88c>)
 8012b24:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8012ce4 <tcp_receive+0x88c>)
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d274      	bcs.n	8012c1c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b32:	4b6b      	ldr	r3, [pc, #428]	@ (8012ce0 <tcp_receive+0x888>)
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	899b      	ldrh	r3, [r3, #12]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fa ffde 	bl	800dafc <lwip_htons>
 8012b40:	4603      	mov	r3, r0
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d01e      	beq.n	8012b8a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012b4c:	4b64      	ldr	r3, [pc, #400]	@ (8012ce0 <tcp_receive+0x888>)
 8012b4e:	68db      	ldr	r3, [r3, #12]
 8012b50:	899b      	ldrh	r3, [r3, #12]
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	b21b      	sxth	r3, r3
 8012b56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012b5a:	b21c      	sxth	r4, r3
 8012b5c:	4b60      	ldr	r3, [pc, #384]	@ (8012ce0 <tcp_receive+0x888>)
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	899b      	ldrh	r3, [r3, #12]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7fa ffc9 	bl	800dafc <lwip_htons>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	b2db      	uxtb	r3, r3
 8012b6e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fa ffc1 	bl	800dafc <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	b21b      	sxth	r3, r3
 8012b7e:	4323      	orrs	r3, r4
 8012b80:	b21a      	sxth	r2, r3
 8012b82:	4b57      	ldr	r3, [pc, #348]	@ (8012ce0 <tcp_receive+0x888>)
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	b292      	uxth	r2, r2
 8012b88:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012b8e:	4b54      	ldr	r3, [pc, #336]	@ (8012ce0 <tcp_receive+0x888>)
 8012b90:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b92:	4b53      	ldr	r3, [pc, #332]	@ (8012ce0 <tcp_receive+0x888>)
 8012b94:	68db      	ldr	r3, [r3, #12]
 8012b96:	899b      	ldrh	r3, [r3, #12]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fa ffae 	bl	800dafc <lwip_htons>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	f003 0302 	and.w	r3, r3, #2
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d005      	beq.n	8012bb8 <tcp_receive+0x760>
            inseg.len -= 1;
 8012bac:	4b4c      	ldr	r3, [pc, #304]	@ (8012ce0 <tcp_receive+0x888>)
 8012bae:	891b      	ldrh	r3, [r3, #8]
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8012ce0 <tcp_receive+0x888>)
 8012bb6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012bb8:	4b49      	ldr	r3, [pc, #292]	@ (8012ce0 <tcp_receive+0x888>)
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	4a48      	ldr	r2, [pc, #288]	@ (8012ce0 <tcp_receive+0x888>)
 8012bbe:	8912      	ldrh	r2, [r2, #8]
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fc f9d4 	bl	800ef70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012bc8:	4b45      	ldr	r3, [pc, #276]	@ (8012ce0 <tcp_receive+0x888>)
 8012bca:	891c      	ldrh	r4, [r3, #8]
 8012bcc:	4b44      	ldr	r3, [pc, #272]	@ (8012ce0 <tcp_receive+0x888>)
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	899b      	ldrh	r3, [r3, #12]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fa ff91 	bl	800dafc <lwip_htons>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <tcp_receive+0x792>
 8012be6:	2301      	movs	r3, #1
 8012be8:	e000      	b.n	8012bec <tcp_receive+0x794>
 8012bea:	2300      	movs	r3, #0
 8012bec:	4423      	add	r3, r4
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8012ce4 <tcp_receive+0x88c>)
 8012bf2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8012ce4 <tcp_receive+0x88c>)
 8012bf6:	881b      	ldrh	r3, [r3, #0]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4b38      	ldr	r3, [pc, #224]	@ (8012cdc <tcp_receive+0x884>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	441a      	add	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c04:	6879      	ldr	r1, [r7, #4]
 8012c06:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c08:	440b      	add	r3, r1
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d006      	beq.n	8012c1c <tcp_receive+0x7c4>
 8012c0e:	4b36      	ldr	r3, [pc, #216]	@ (8012ce8 <tcp_receive+0x890>)
 8012c10:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012c14:	4935      	ldr	r1, [pc, #212]	@ (8012cec <tcp_receive+0x894>)
 8012c16:	4836      	ldr	r0, [pc, #216]	@ (8012cf0 <tcp_receive+0x898>)
 8012c18:	f005 fcaa 	bl	8018570 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f000 80e6 	beq.w	8012df2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c26:	4b2e      	ldr	r3, [pc, #184]	@ (8012ce0 <tcp_receive+0x888>)
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	899b      	ldrh	r3, [r3, #12]
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fa ff64 	bl	800dafc <lwip_htons>
 8012c34:	4603      	mov	r3, r0
 8012c36:	b2db      	uxtb	r3, r3
 8012c38:	f003 0301 	and.w	r3, r3, #1
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d010      	beq.n	8012c62 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012c40:	e00a      	b.n	8012c58 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c46:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012c52:	68f8      	ldr	r0, [r7, #12]
 8012c54:	f7fd fd93 	bl	801077e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1f0      	bne.n	8012c42 <tcp_receive+0x7ea>
 8012c60:	e0c7      	b.n	8012df2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012c68:	e051      	b.n	8012d0e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	899b      	ldrh	r3, [r3, #12]
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7fa ff42 	bl	800dafc <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	f003 0301 	and.w	r3, r3, #1
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d03c      	beq.n	8012cfe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012c84:	4b16      	ldr	r3, [pc, #88]	@ (8012ce0 <tcp_receive+0x888>)
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	899b      	ldrh	r3, [r3, #12]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7fa ff35 	bl	800dafc <lwip_htons>
 8012c92:	4603      	mov	r3, r0
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d12f      	bne.n	8012cfe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012c9e:	4b10      	ldr	r3, [pc, #64]	@ (8012ce0 <tcp_receive+0x888>)
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	899b      	ldrh	r3, [r3, #12]
 8012ca4:	b29c      	uxth	r4, r3
 8012ca6:	2001      	movs	r0, #1
 8012ca8:	f7fa ff28 	bl	800dafc <lwip_htons>
 8012cac:	4603      	mov	r3, r0
 8012cae:	461a      	mov	r2, r3
 8012cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8012ce0 <tcp_receive+0x888>)
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	4322      	orrs	r2, r4
 8012cb6:	b292      	uxth	r2, r2
 8012cb8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012cba:	4b09      	ldr	r3, [pc, #36]	@ (8012ce0 <tcp_receive+0x888>)
 8012cbc:	891c      	ldrh	r4, [r3, #8]
 8012cbe:	4b08      	ldr	r3, [pc, #32]	@ (8012ce0 <tcp_receive+0x888>)
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	899b      	ldrh	r3, [r3, #12]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fa ff18 	bl	800dafc <lwip_htons>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	f003 0303 	and.w	r3, r3, #3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00d      	beq.n	8012cf4 <tcp_receive+0x89c>
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e00c      	b.n	8012cf6 <tcp_receive+0x89e>
 8012cdc:	2000c6e0 	.word	0x2000c6e0
 8012ce0:	2000c6c0 	.word	0x2000c6c0
 8012ce4:	2000c6ea 	.word	0x2000c6ea
 8012ce8:	0801b97c 	.word	0x0801b97c
 8012cec:	0801bd24 	.word	0x0801bd24
 8012cf0:	0801b9c8 	.word	0x0801b9c8
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	4423      	add	r3, r4
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	4b98      	ldr	r3, [pc, #608]	@ (8012f5c <tcp_receive+0xb04>)
 8012cfc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012d08:	6938      	ldr	r0, [r7, #16]
 8012d0a:	f7fd fd38 	bl	801077e <tcp_seg_free>
            while (next &&
 8012d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00e      	beq.n	8012d32 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012d14:	4b91      	ldr	r3, [pc, #580]	@ (8012f5c <tcp_receive+0xb04>)
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	4b91      	ldr	r3, [pc, #580]	@ (8012f60 <tcp_receive+0xb08>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	441a      	add	r2, r3
 8012d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012d28:	8909      	ldrh	r1, [r1, #8]
 8012d2a:	440b      	add	r3, r1
 8012d2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	da9b      	bge.n	8012c6a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d059      	beq.n	8012dec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012d38:	4b88      	ldr	r3, [pc, #544]	@ (8012f5c <tcp_receive+0xb04>)
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	4b88      	ldr	r3, [pc, #544]	@ (8012f60 <tcp_receive+0xb08>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	441a      	add	r2, r3
 8012d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dd4d      	ble.n	8012dec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	4b81      	ldr	r3, [pc, #516]	@ (8012f60 <tcp_receive+0xb08>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	b29a      	uxth	r2, r3
 8012d62:	4b80      	ldr	r3, [pc, #512]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012d66:	4b7f      	ldr	r3, [pc, #508]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	899b      	ldrh	r3, [r3, #12]
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fa fec4 	bl	800dafc <lwip_htons>
 8012d74:	4603      	mov	r3, r0
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	f003 0302 	and.w	r3, r3, #2
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d005      	beq.n	8012d8c <tcp_receive+0x934>
                inseg.len -= 1;
 8012d80:	4b78      	ldr	r3, [pc, #480]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d82:	891b      	ldrh	r3, [r3, #8]
 8012d84:	3b01      	subs	r3, #1
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	4b76      	ldr	r3, [pc, #472]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012d8c:	4b75      	ldr	r3, [pc, #468]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	4a74      	ldr	r2, [pc, #464]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d92:	8912      	ldrh	r2, [r2, #8]
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fc f8ea 	bl	800ef70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012d9c:	4b71      	ldr	r3, [pc, #452]	@ (8012f64 <tcp_receive+0xb0c>)
 8012d9e:	891c      	ldrh	r4, [r3, #8]
 8012da0:	4b70      	ldr	r3, [pc, #448]	@ (8012f64 <tcp_receive+0xb0c>)
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	899b      	ldrh	r3, [r3, #12]
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fa fea7 	bl	800dafc <lwip_htons>
 8012dae:	4603      	mov	r3, r0
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	f003 0303 	and.w	r3, r3, #3
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <tcp_receive+0x966>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e000      	b.n	8012dc0 <tcp_receive+0x968>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	4423      	add	r3, r4
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	4b65      	ldr	r3, [pc, #404]	@ (8012f5c <tcp_receive+0xb04>)
 8012dc6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012dc8:	4b64      	ldr	r3, [pc, #400]	@ (8012f5c <tcp_receive+0xb04>)
 8012dca:	881b      	ldrh	r3, [r3, #0]
 8012dcc:	461a      	mov	r2, r3
 8012dce:	4b64      	ldr	r3, [pc, #400]	@ (8012f60 <tcp_receive+0xb08>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	441a      	add	r2, r3
 8012dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d006      	beq.n	8012dec <tcp_receive+0x994>
 8012dde:	4b62      	ldr	r3, [pc, #392]	@ (8012f68 <tcp_receive+0xb10>)
 8012de0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012de4:	4961      	ldr	r1, [pc, #388]	@ (8012f6c <tcp_receive+0xb14>)
 8012de6:	4862      	ldr	r0, [pc, #392]	@ (8012f70 <tcp_receive+0xb18>)
 8012de8:	f005 fbc2 	bl	8018570 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012df0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012df2:	4b5a      	ldr	r3, [pc, #360]	@ (8012f5c <tcp_receive+0xb04>)
 8012df4:	881b      	ldrh	r3, [r3, #0]
 8012df6:	461a      	mov	r2, r3
 8012df8:	4b59      	ldr	r3, [pc, #356]	@ (8012f60 <tcp_receive+0xb08>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	441a      	add	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012e06:	4b55      	ldr	r3, [pc, #340]	@ (8012f5c <tcp_receive+0xb04>)
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d206      	bcs.n	8012e1c <tcp_receive+0x9c4>
 8012e0e:	4b56      	ldr	r3, [pc, #344]	@ (8012f68 <tcp_receive+0xb10>)
 8012e10:	f240 6207 	movw	r2, #1543	@ 0x607
 8012e14:	4957      	ldr	r1, [pc, #348]	@ (8012f74 <tcp_receive+0xb1c>)
 8012e16:	4856      	ldr	r0, [pc, #344]	@ (8012f70 <tcp_receive+0xb18>)
 8012e18:	f005 fbaa 	bl	8018570 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012e20:	4b4e      	ldr	r3, [pc, #312]	@ (8012f5c <tcp_receive+0xb04>)
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f7fc ffc5 	bl	800fdbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012e32:	4b4c      	ldr	r3, [pc, #304]	@ (8012f64 <tcp_receive+0xb0c>)
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	891b      	ldrh	r3, [r3, #8]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d006      	beq.n	8012e4a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012e3c:	4b49      	ldr	r3, [pc, #292]	@ (8012f64 <tcp_receive+0xb0c>)
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	4a4d      	ldr	r2, [pc, #308]	@ (8012f78 <tcp_receive+0xb20>)
 8012e42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012e44:	4b47      	ldr	r3, [pc, #284]	@ (8012f64 <tcp_receive+0xb0c>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e4a:	4b46      	ldr	r3, [pc, #280]	@ (8012f64 <tcp_receive+0xb0c>)
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	899b      	ldrh	r3, [r3, #12]
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fa fe52 	bl	800dafc <lwip_htons>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	f003 0301 	and.w	r3, r3, #1
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f000 80b8 	beq.w	8012fd6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012e66:	4b45      	ldr	r3, [pc, #276]	@ (8012f7c <tcp_receive+0xb24>)
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	f043 0320 	orr.w	r3, r3, #32
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	4b42      	ldr	r3, [pc, #264]	@ (8012f7c <tcp_receive+0xb24>)
 8012e72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012e74:	e0af      	b.n	8012fd6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e80:	68db      	ldr	r3, [r3, #12]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	4a36      	ldr	r2, [pc, #216]	@ (8012f60 <tcp_receive+0xb08>)
 8012e86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	891b      	ldrh	r3, [r3, #8]
 8012e8c:	461c      	mov	r4, r3
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	899b      	ldrh	r3, [r3, #12]
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fa fe30 	bl	800dafc <lwip_htons>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	f003 0303 	and.w	r3, r3, #3
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d001      	beq.n	8012eac <tcp_receive+0xa54>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e000      	b.n	8012eae <tcp_receive+0xa56>
 8012eac:	2300      	movs	r3, #0
 8012eae:	191a      	adds	r2, r3, r4
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eb4:	441a      	add	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ebe:	461c      	mov	r4, r3
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	891b      	ldrh	r3, [r3, #8]
 8012ec4:	461d      	mov	r5, r3
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	899b      	ldrh	r3, [r3, #12]
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7fa fe14 	bl	800dafc <lwip_htons>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	f003 0303 	and.w	r3, r3, #3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d001      	beq.n	8012ee4 <tcp_receive+0xa8c>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	e000      	b.n	8012ee6 <tcp_receive+0xa8e>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	442b      	add	r3, r5
 8012ee8:	429c      	cmp	r4, r3
 8012eea:	d206      	bcs.n	8012efa <tcp_receive+0xaa2>
 8012eec:	4b1e      	ldr	r3, [pc, #120]	@ (8012f68 <tcp_receive+0xb10>)
 8012eee:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012ef2:	4923      	ldr	r1, [pc, #140]	@ (8012f80 <tcp_receive+0xb28>)
 8012ef4:	481e      	ldr	r0, [pc, #120]	@ (8012f70 <tcp_receive+0xb18>)
 8012ef6:	f005 fb3b 	bl	8018570 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	891b      	ldrh	r3, [r3, #8]
 8012efe:	461c      	mov	r4, r3
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	899b      	ldrh	r3, [r3, #12]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fa fdf7 	bl	800dafc <lwip_htons>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	f003 0303 	and.w	r3, r3, #3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <tcp_receive+0xac6>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <tcp_receive+0xac8>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	1919      	adds	r1, r3, r4
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012f26:	b28b      	uxth	r3, r1
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	b29a      	uxth	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7fc ff43 	bl	800fdbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	891b      	ldrh	r3, [r3, #8]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d028      	beq.n	8012f92 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012f40:	4b0d      	ldr	r3, [pc, #52]	@ (8012f78 <tcp_receive+0xb20>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d01d      	beq.n	8012f84 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012f48:	4b0b      	ldr	r3, [pc, #44]	@ (8012f78 <tcp_receive+0xb20>)
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	4619      	mov	r1, r3
 8012f52:	4610      	mov	r0, r2
 8012f54:	f7fc fa60 	bl	800f418 <pbuf_cat>
 8012f58:	e018      	b.n	8012f8c <tcp_receive+0xb34>
 8012f5a:	bf00      	nop
 8012f5c:	2000c6ea 	.word	0x2000c6ea
 8012f60:	2000c6e0 	.word	0x2000c6e0
 8012f64:	2000c6c0 	.word	0x2000c6c0
 8012f68:	0801b97c 	.word	0x0801b97c
 8012f6c:	0801bd5c 	.word	0x0801bd5c
 8012f70:	0801b9c8 	.word	0x0801b9c8
 8012f74:	0801bd98 	.word	0x0801bd98
 8012f78:	2000c6f0 	.word	0x2000c6f0
 8012f7c:	2000c6ed 	.word	0x2000c6ed
 8012f80:	0801bdb8 	.word	0x0801bdb8
            } else {
              recv_data = cseg->p;
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	4a70      	ldr	r2, [pc, #448]	@ (801314c <tcp_receive+0xcf4>)
 8012f8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	899b      	ldrh	r3, [r3, #12]
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fa fdae 	bl	800dafc <lwip_htons>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	f003 0301 	and.w	r3, r3, #1
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00d      	beq.n	8012fc8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012fac:	4b68      	ldr	r3, [pc, #416]	@ (8013150 <tcp_receive+0xcf8>)
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	f043 0320 	orr.w	r3, r3, #32
 8012fb4:	b2da      	uxtb	r2, r3
 8012fb6:	4b66      	ldr	r3, [pc, #408]	@ (8013150 <tcp_receive+0xcf8>)
 8012fb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	7d1b      	ldrb	r3, [r3, #20]
 8012fbe:	2b04      	cmp	r3, #4
 8012fc0:	d102      	bne.n	8012fc8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2207      	movs	r2, #7
 8012fc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012fd0:	68b8      	ldr	r0, [r7, #8]
 8012fd2:	f7fd fbd4 	bl	801077e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d008      	beq.n	8012ff0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	685a      	ldr	r2, [r3, #4]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8012fea:	429a      	cmp	r2, r3
 8012fec:	f43f af43 	beq.w	8012e76 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	8b5b      	ldrh	r3, [r3, #26]
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00e      	beq.n	801301a <tcp_receive+0xbc2>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	8b5b      	ldrh	r3, [r3, #26]
 8013000:	f023 0301 	bic.w	r3, r3, #1
 8013004:	b29a      	uxth	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	835a      	strh	r2, [r3, #26]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	8b5b      	ldrh	r3, [r3, #26]
 801300e:	f043 0302 	orr.w	r3, r3, #2
 8013012:	b29a      	uxth	r2, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013018:	e187      	b.n	801332a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8b5b      	ldrh	r3, [r3, #26]
 801301e:	f043 0301 	orr.w	r3, r3, #1
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013028:	e17f      	b.n	801332a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013032:	4848      	ldr	r0, [pc, #288]	@ (8013154 <tcp_receive+0xcfc>)
 8013034:	f7fd fbbc 	bl	80107b0 <tcp_seg_copy>
 8013038:	4602      	mov	r2, r0
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	675a      	str	r2, [r3, #116]	@ 0x74
 801303e:	e16c      	b.n	801331a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013040:	2300      	movs	r3, #0
 8013042:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013048:	63bb      	str	r3, [r7, #56]	@ 0x38
 801304a:	e156      	b.n	80132fa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	685a      	ldr	r2, [r3, #4]
 8013052:	4b41      	ldr	r3, [pc, #260]	@ (8013158 <tcp_receive+0xd00>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	429a      	cmp	r2, r3
 8013058:	d11d      	bne.n	8013096 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801305a:	4b3e      	ldr	r3, [pc, #248]	@ (8013154 <tcp_receive+0xcfc>)
 801305c:	891a      	ldrh	r2, [r3, #8]
 801305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013060:	891b      	ldrh	r3, [r3, #8]
 8013062:	429a      	cmp	r2, r3
 8013064:	f240 814e 	bls.w	8013304 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013068:	483a      	ldr	r0, [pc, #232]	@ (8013154 <tcp_receive+0xcfc>)
 801306a:	f7fd fba1 	bl	80107b0 <tcp_seg_copy>
 801306e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	2b00      	cmp	r3, #0
 8013074:	f000 8148 	beq.w	8013308 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801307a:	2b00      	cmp	r3, #0
 801307c:	d003      	beq.n	8013086 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013080:	697a      	ldr	r2, [r7, #20]
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	e002      	b.n	801308c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	697a      	ldr	r2, [r7, #20]
 801308a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801308c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801308e:	6978      	ldr	r0, [r7, #20]
 8013090:	f7ff f8de 	bl	8012250 <tcp_oos_insert_segment>
                }
                break;
 8013094:	e138      	b.n	8013308 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013098:	2b00      	cmp	r3, #0
 801309a:	d117      	bne.n	80130cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801309c:	4b2e      	ldr	r3, [pc, #184]	@ (8013158 <tcp_receive+0xd00>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	1ad3      	subs	r3, r2, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	da57      	bge.n	801315c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130ac:	4829      	ldr	r0, [pc, #164]	@ (8013154 <tcp_receive+0xcfc>)
 80130ae:	f7fd fb7f 	bl	80107b0 <tcp_seg_copy>
 80130b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f000 8128 	beq.w	801330c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	69ba      	ldr	r2, [r7, #24]
 80130c0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80130c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80130c4:	69b8      	ldr	r0, [r7, #24]
 80130c6:	f7ff f8c3 	bl	8012250 <tcp_oos_insert_segment>
                  }
                  break;
 80130ca:	e11f      	b.n	801330c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80130cc:	4b22      	ldr	r3, [pc, #136]	@ (8013158 <tcp_receive+0xd00>)
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130d2:	68db      	ldr	r3, [r3, #12]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	3b01      	subs	r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	db3e      	blt.n	801315c <tcp_receive+0xd04>
 80130de:	4b1e      	ldr	r3, [pc, #120]	@ (8013158 <tcp_receive+0xd00>)
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	1ad3      	subs	r3, r2, r3
 80130ea:	3301      	adds	r3, #1
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	dc35      	bgt.n	801315c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130f0:	4818      	ldr	r0, [pc, #96]	@ (8013154 <tcp_receive+0xcfc>)
 80130f2:	f7fd fb5d 	bl	80107b0 <tcp_seg_copy>
 80130f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	f000 8108 	beq.w	8013310 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013108:	8912      	ldrh	r2, [r2, #8]
 801310a:	441a      	add	r2, r3
 801310c:	4b12      	ldr	r3, [pc, #72]	@ (8013158 <tcp_receive+0xd00>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	1ad3      	subs	r3, r2, r3
 8013112:	2b00      	cmp	r3, #0
 8013114:	dd12      	ble.n	801313c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013116:	4b10      	ldr	r3, [pc, #64]	@ (8013158 <tcp_receive+0xd00>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	b29a      	uxth	r2, r3
 801311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	b29b      	uxth	r3, r3
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	b29a      	uxth	r2, r3
 8013128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801312a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801312c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801312e:	685a      	ldr	r2, [r3, #4]
 8013130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013132:	891b      	ldrh	r3, [r3, #8]
 8013134:	4619      	mov	r1, r3
 8013136:	4610      	mov	r0, r2
 8013138:	f7fb ff1a 	bl	800ef70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801313e:	69fa      	ldr	r2, [r7, #28]
 8013140:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013144:	69f8      	ldr	r0, [r7, #28]
 8013146:	f7ff f883 	bl	8012250 <tcp_oos_insert_segment>
                  }
                  break;
 801314a:	e0e1      	b.n	8013310 <tcp_receive+0xeb8>
 801314c:	2000c6f0 	.word	0x2000c6f0
 8013150:	2000c6ed 	.word	0x2000c6ed
 8013154:	2000c6c0 	.word	0x2000c6c0
 8013158:	2000c6e0 	.word	0x2000c6e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801315c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801315e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	f040 80c5 	bne.w	80132f4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801316a:	4b7f      	ldr	r3, [pc, #508]	@ (8013368 <tcp_receive+0xf10>)
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013170:	68db      	ldr	r3, [r3, #12]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013176:	2b00      	cmp	r3, #0
 8013178:	f340 80bc 	ble.w	80132f4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	899b      	ldrh	r3, [r3, #12]
 8013182:	b29b      	uxth	r3, r3
 8013184:	4618      	mov	r0, r3
 8013186:	f7fa fcb9 	bl	800dafc <lwip_htons>
 801318a:	4603      	mov	r3, r0
 801318c:	b2db      	uxtb	r3, r3
 801318e:	f003 0301 	and.w	r3, r3, #1
 8013192:	2b00      	cmp	r3, #0
 8013194:	f040 80be 	bne.w	8013314 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013198:	4874      	ldr	r0, [pc, #464]	@ (801336c <tcp_receive+0xf14>)
 801319a:	f7fd fb09 	bl	80107b0 <tcp_seg_copy>
 801319e:	4602      	mov	r2, r0
 80131a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80131a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f000 80b5 	beq.w	8013318 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80131ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131b6:	8912      	ldrh	r2, [r2, #8]
 80131b8:	441a      	add	r2, r3
 80131ba:	4b6b      	ldr	r3, [pc, #428]	@ (8013368 <tcp_receive+0xf10>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dd12      	ble.n	80131ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80131c4:	4b68      	ldr	r3, [pc, #416]	@ (8013368 <tcp_receive+0xf10>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80131da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131dc:	685a      	ldr	r2, [r3, #4]
 80131de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e0:	891b      	ldrh	r3, [r3, #8]
 80131e2:	4619      	mov	r1, r3
 80131e4:	4610      	mov	r0, r2
 80131e6:	f7fb fec3 	bl	800ef70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80131ea:	4b61      	ldr	r3, [pc, #388]	@ (8013370 <tcp_receive+0xf18>)
 80131ec:	881b      	ldrh	r3, [r3, #0]
 80131ee:	461a      	mov	r2, r3
 80131f0:	4b5d      	ldr	r3, [pc, #372]	@ (8013368 <tcp_receive+0xf10>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	441a      	add	r2, r3
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80131fe:	440b      	add	r3, r1
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	2b00      	cmp	r3, #0
 8013204:	f340 8088 	ble.w	8013318 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	899b      	ldrh	r3, [r3, #12]
 8013210:	b29b      	uxth	r3, r3
 8013212:	4618      	mov	r0, r3
 8013214:	f7fa fc72 	bl	800dafc <lwip_htons>
 8013218:	4603      	mov	r3, r0
 801321a:	b2db      	uxtb	r3, r3
 801321c:	f003 0301 	and.w	r3, r3, #1
 8013220:	2b00      	cmp	r3, #0
 8013222:	d021      	beq.n	8013268 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	899b      	ldrh	r3, [r3, #12]
 801322c:	b29b      	uxth	r3, r3
 801322e:	b21b      	sxth	r3, r3
 8013230:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013234:	b21c      	sxth	r4, r3
 8013236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	899b      	ldrh	r3, [r3, #12]
 801323e:	b29b      	uxth	r3, r3
 8013240:	4618      	mov	r0, r3
 8013242:	f7fa fc5b 	bl	800dafc <lwip_htons>
 8013246:	4603      	mov	r3, r0
 8013248:	b2db      	uxtb	r3, r3
 801324a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801324e:	b29b      	uxth	r3, r3
 8013250:	4618      	mov	r0, r3
 8013252:	f7fa fc53 	bl	800dafc <lwip_htons>
 8013256:	4603      	mov	r3, r0
 8013258:	b21b      	sxth	r3, r3
 801325a:	4323      	orrs	r3, r4
 801325c:	b21a      	sxth	r2, r3
 801325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	b292      	uxth	r2, r2
 8013266:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801326c:	b29a      	uxth	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013272:	4413      	add	r3, r2
 8013274:	b299      	uxth	r1, r3
 8013276:	4b3c      	ldr	r3, [pc, #240]	@ (8013368 <tcp_receive+0xf10>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	b29a      	uxth	r2, r3
 801327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	1a8a      	subs	r2, r1, r2
 8013282:	b292      	uxth	r2, r2
 8013284:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	891b      	ldrh	r3, [r3, #8]
 8013292:	4619      	mov	r1, r3
 8013294:	4610      	mov	r0, r2
 8013296:	f7fb fe6b 	bl	800ef70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	891c      	ldrh	r4, [r3, #8]
 80132a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	899b      	ldrh	r3, [r3, #12]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fa fc26 	bl	800dafc <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	f003 0303 	and.w	r3, r3, #3
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d001      	beq.n	80132c0 <tcp_receive+0xe68>
 80132bc:	2301      	movs	r3, #1
 80132be:	e000      	b.n	80132c2 <tcp_receive+0xe6a>
 80132c0:	2300      	movs	r3, #0
 80132c2:	4423      	add	r3, r4
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	4b2a      	ldr	r3, [pc, #168]	@ (8013370 <tcp_receive+0xf18>)
 80132c8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80132ca:	4b29      	ldr	r3, [pc, #164]	@ (8013370 <tcp_receive+0xf18>)
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	461a      	mov	r2, r3
 80132d0:	4b25      	ldr	r3, [pc, #148]	@ (8013368 <tcp_receive+0xf10>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	441a      	add	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132da:	6879      	ldr	r1, [r7, #4]
 80132dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80132de:	440b      	add	r3, r1
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d019      	beq.n	8013318 <tcp_receive+0xec0>
 80132e4:	4b23      	ldr	r3, [pc, #140]	@ (8013374 <tcp_receive+0xf1c>)
 80132e6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80132ea:	4923      	ldr	r1, [pc, #140]	@ (8013378 <tcp_receive+0xf20>)
 80132ec:	4823      	ldr	r0, [pc, #140]	@ (801337c <tcp_receive+0xf24>)
 80132ee:	f005 f93f 	bl	8018570 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80132f2:	e011      	b.n	8013318 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80132f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80132fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f47f aea5 	bne.w	801304c <tcp_receive+0xbf4>
 8013302:	e00a      	b.n	801331a <tcp_receive+0xec2>
                break;
 8013304:	bf00      	nop
 8013306:	e008      	b.n	801331a <tcp_receive+0xec2>
                break;
 8013308:	bf00      	nop
 801330a:	e006      	b.n	801331a <tcp_receive+0xec2>
                  break;
 801330c:	bf00      	nop
 801330e:	e004      	b.n	801331a <tcp_receive+0xec2>
                  break;
 8013310:	bf00      	nop
 8013312:	e002      	b.n	801331a <tcp_receive+0xec2>
                  break;
 8013314:	bf00      	nop
 8013316:	e000      	b.n	801331a <tcp_receive+0xec2>
                break;
 8013318:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f001 fa30 	bl	8014780 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013320:	e003      	b.n	801332a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f001 fa2c 	bl	8014780 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013328:	e01a      	b.n	8013360 <tcp_receive+0xf08>
 801332a:	e019      	b.n	8013360 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801332c:	4b0e      	ldr	r3, [pc, #56]	@ (8013368 <tcp_receive+0xf10>)
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013334:	1ad3      	subs	r3, r2, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	db0a      	blt.n	8013350 <tcp_receive+0xef8>
 801333a:	4b0b      	ldr	r3, [pc, #44]	@ (8013368 <tcp_receive+0xf10>)
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013346:	440b      	add	r3, r1
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	3301      	adds	r3, #1
 801334c:	2b00      	cmp	r3, #0
 801334e:	dd07      	ble.n	8013360 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	8b5b      	ldrh	r3, [r3, #26]
 8013354:	f043 0302 	orr.w	r3, r3, #2
 8013358:	b29a      	uxth	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801335e:	e7ff      	b.n	8013360 <tcp_receive+0xf08>
 8013360:	bf00      	nop
 8013362:	3750      	adds	r7, #80	@ 0x50
 8013364:	46bd      	mov	sp, r7
 8013366:	bdb0      	pop	{r4, r5, r7, pc}
 8013368:	2000c6e0 	.word	0x2000c6e0
 801336c:	2000c6c0 	.word	0x2000c6c0
 8013370:	2000c6ea 	.word	0x2000c6ea
 8013374:	0801b97c 	.word	0x0801b97c
 8013378:	0801bd24 	.word	0x0801bd24
 801337c:	0801b9c8 	.word	0x0801b9c8

08013380 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013380:	b480      	push	{r7}
 8013382:	b083      	sub	sp, #12
 8013384:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013386:	4b15      	ldr	r3, [pc, #84]	@ (80133dc <tcp_get_next_optbyte+0x5c>)
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	b291      	uxth	r1, r2
 801338e:	4a13      	ldr	r2, [pc, #76]	@ (80133dc <tcp_get_next_optbyte+0x5c>)
 8013390:	8011      	strh	r1, [r2, #0]
 8013392:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013394:	4b12      	ldr	r3, [pc, #72]	@ (80133e0 <tcp_get_next_optbyte+0x60>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d004      	beq.n	80133a6 <tcp_get_next_optbyte+0x26>
 801339c:	4b11      	ldr	r3, [pc, #68]	@ (80133e4 <tcp_get_next_optbyte+0x64>)
 801339e:	881b      	ldrh	r3, [r3, #0]
 80133a0:	88fa      	ldrh	r2, [r7, #6]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d208      	bcs.n	80133b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80133a6:	4b10      	ldr	r3, [pc, #64]	@ (80133e8 <tcp_get_next_optbyte+0x68>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	3314      	adds	r3, #20
 80133ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80133ae:	88fb      	ldrh	r3, [r7, #6]
 80133b0:	683a      	ldr	r2, [r7, #0]
 80133b2:	4413      	add	r3, r2
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	e00b      	b.n	80133d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80133b8:	88fb      	ldrh	r3, [r7, #6]
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	4b09      	ldr	r3, [pc, #36]	@ (80133e4 <tcp_get_next_optbyte+0x64>)
 80133be:	881b      	ldrh	r3, [r3, #0]
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	1ad3      	subs	r3, r2, r3
 80133c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80133c6:	4b06      	ldr	r3, [pc, #24]	@ (80133e0 <tcp_get_next_optbyte+0x60>)
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	797b      	ldrb	r3, [r7, #5]
 80133cc:	4413      	add	r3, r2
 80133ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr
 80133dc:	2000c6dc 	.word	0x2000c6dc
 80133e0:	2000c6d8 	.word	0x2000c6d8
 80133e4:	2000c6d6 	.word	0x2000c6d6
 80133e8:	2000c6d0 	.word	0x2000c6d0

080133ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <tcp_parseopt+0x1c>
 80133fa:	4b32      	ldr	r3, [pc, #200]	@ (80134c4 <tcp_parseopt+0xd8>)
 80133fc:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013400:	4931      	ldr	r1, [pc, #196]	@ (80134c8 <tcp_parseopt+0xdc>)
 8013402:	4832      	ldr	r0, [pc, #200]	@ (80134cc <tcp_parseopt+0xe0>)
 8013404:	f005 f8b4 	bl	8018570 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013408:	4b31      	ldr	r3, [pc, #196]	@ (80134d0 <tcp_parseopt+0xe4>)
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d056      	beq.n	80134be <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013410:	4b30      	ldr	r3, [pc, #192]	@ (80134d4 <tcp_parseopt+0xe8>)
 8013412:	2200      	movs	r2, #0
 8013414:	801a      	strh	r2, [r3, #0]
 8013416:	e046      	b.n	80134a6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013418:	f7ff ffb2 	bl	8013380 <tcp_get_next_optbyte>
 801341c:	4603      	mov	r3, r0
 801341e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013420:	7bfb      	ldrb	r3, [r7, #15]
 8013422:	2b02      	cmp	r3, #2
 8013424:	d006      	beq.n	8013434 <tcp_parseopt+0x48>
 8013426:	2b02      	cmp	r3, #2
 8013428:	dc2a      	bgt.n	8013480 <tcp_parseopt+0x94>
 801342a:	2b00      	cmp	r3, #0
 801342c:	d042      	beq.n	80134b4 <tcp_parseopt+0xc8>
 801342e:	2b01      	cmp	r3, #1
 8013430:	d038      	beq.n	80134a4 <tcp_parseopt+0xb8>
 8013432:	e025      	b.n	8013480 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013434:	f7ff ffa4 	bl	8013380 <tcp_get_next_optbyte>
 8013438:	4603      	mov	r3, r0
 801343a:	2b04      	cmp	r3, #4
 801343c:	d13c      	bne.n	80134b8 <tcp_parseopt+0xcc>
 801343e:	4b25      	ldr	r3, [pc, #148]	@ (80134d4 <tcp_parseopt+0xe8>)
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	3301      	adds	r3, #1
 8013444:	4a22      	ldr	r2, [pc, #136]	@ (80134d0 <tcp_parseopt+0xe4>)
 8013446:	8812      	ldrh	r2, [r2, #0]
 8013448:	4293      	cmp	r3, r2
 801344a:	da35      	bge.n	80134b8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801344c:	f7ff ff98 	bl	8013380 <tcp_get_next_optbyte>
 8013450:	4603      	mov	r3, r0
 8013452:	021b      	lsls	r3, r3, #8
 8013454:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013456:	f7ff ff93 	bl	8013380 <tcp_get_next_optbyte>
 801345a:	4603      	mov	r3, r0
 801345c:	461a      	mov	r2, r3
 801345e:	89bb      	ldrh	r3, [r7, #12]
 8013460:	4313      	orrs	r3, r2
 8013462:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013464:	89bb      	ldrh	r3, [r7, #12]
 8013466:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801346a:	d804      	bhi.n	8013476 <tcp_parseopt+0x8a>
 801346c:	89bb      	ldrh	r3, [r7, #12]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <tcp_parseopt+0x8a>
 8013472:	89ba      	ldrh	r2, [r7, #12]
 8013474:	e001      	b.n	801347a <tcp_parseopt+0x8e>
 8013476:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801347e:	e012      	b.n	80134a6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013480:	f7ff ff7e 	bl	8013380 <tcp_get_next_optbyte>
 8013484:	4603      	mov	r3, r0
 8013486:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013488:	7afb      	ldrb	r3, [r7, #11]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d916      	bls.n	80134bc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801348e:	7afb      	ldrb	r3, [r7, #11]
 8013490:	b29a      	uxth	r2, r3
 8013492:	4b10      	ldr	r3, [pc, #64]	@ (80134d4 <tcp_parseopt+0xe8>)
 8013494:	881b      	ldrh	r3, [r3, #0]
 8013496:	4413      	add	r3, r2
 8013498:	b29b      	uxth	r3, r3
 801349a:	3b02      	subs	r3, #2
 801349c:	b29a      	uxth	r2, r3
 801349e:	4b0d      	ldr	r3, [pc, #52]	@ (80134d4 <tcp_parseopt+0xe8>)
 80134a0:	801a      	strh	r2, [r3, #0]
 80134a2:	e000      	b.n	80134a6 <tcp_parseopt+0xba>
          break;
 80134a4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80134a6:	4b0b      	ldr	r3, [pc, #44]	@ (80134d4 <tcp_parseopt+0xe8>)
 80134a8:	881a      	ldrh	r2, [r3, #0]
 80134aa:	4b09      	ldr	r3, [pc, #36]	@ (80134d0 <tcp_parseopt+0xe4>)
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d3b2      	bcc.n	8013418 <tcp_parseopt+0x2c>
 80134b2:	e004      	b.n	80134be <tcp_parseopt+0xd2>
          return;
 80134b4:	bf00      	nop
 80134b6:	e002      	b.n	80134be <tcp_parseopt+0xd2>
            return;
 80134b8:	bf00      	nop
 80134ba:	e000      	b.n	80134be <tcp_parseopt+0xd2>
            return;
 80134bc:	bf00      	nop
      }
    }
  }
}
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	0801b97c 	.word	0x0801b97c
 80134c8:	0801bde0 	.word	0x0801bde0
 80134cc:	0801b9c8 	.word	0x0801b9c8
 80134d0:	2000c6d4 	.word	0x2000c6d4
 80134d4:	2000c6dc 	.word	0x2000c6dc

080134d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80134dc:	4b05      	ldr	r3, [pc, #20]	@ (80134f4 <tcp_trigger_input_pcb_close+0x1c>)
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	f043 0310 	orr.w	r3, r3, #16
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	4b03      	ldr	r3, [pc, #12]	@ (80134f4 <tcp_trigger_input_pcb_close+0x1c>)
 80134e8:	701a      	strb	r2, [r3, #0]
}
 80134ea:	bf00      	nop
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr
 80134f4:	2000c6ed 	.word	0x2000c6ed

080134f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00a      	beq.n	8013520 <tcp_route+0x28>
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	7a1b      	ldrb	r3, [r3, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d006      	beq.n	8013520 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	7a1b      	ldrb	r3, [r3, #8]
 8013516:	4618      	mov	r0, r3
 8013518:	f7fb fb22 	bl	800eb60 <netif_get_by_index>
 801351c:	4603      	mov	r3, r0
 801351e:	e003      	b.n	8013528 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f002 fe79 	bl	8016218 <ip4_route>
 8013526:	4603      	mov	r3, r0
  }
}
 8013528:	4618      	mov	r0, r3
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013530:	b590      	push	{r4, r7, lr}
 8013532:	b087      	sub	sp, #28
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	4613      	mov	r3, r2
 801353e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d105      	bne.n	8013552 <tcp_create_segment+0x22>
 8013546:	4b43      	ldr	r3, [pc, #268]	@ (8013654 <tcp_create_segment+0x124>)
 8013548:	22a3      	movs	r2, #163	@ 0xa3
 801354a:	4943      	ldr	r1, [pc, #268]	@ (8013658 <tcp_create_segment+0x128>)
 801354c:	4843      	ldr	r0, [pc, #268]	@ (801365c <tcp_create_segment+0x12c>)
 801354e:	f005 f80f 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d105      	bne.n	8013564 <tcp_create_segment+0x34>
 8013558:	4b3e      	ldr	r3, [pc, #248]	@ (8013654 <tcp_create_segment+0x124>)
 801355a:	22a4      	movs	r2, #164	@ 0xa4
 801355c:	4940      	ldr	r1, [pc, #256]	@ (8013660 <tcp_create_segment+0x130>)
 801355e:	483f      	ldr	r0, [pc, #252]	@ (801365c <tcp_create_segment+0x12c>)
 8013560:	f005 f806 	bl	8018570 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013564:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	b2db      	uxtb	r3, r3
 801356c:	f003 0304 	and.w	r3, r3, #4
 8013570:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013572:	2003      	movs	r0, #3
 8013574:	f7fa ff9a 	bl	800e4ac <memp_malloc>
 8013578:	6138      	str	r0, [r7, #16]
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d104      	bne.n	801358a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013580:	68b8      	ldr	r0, [r7, #8]
 8013582:	f7fb fe7b 	bl	800f27c <pbuf_free>
    return NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	e060      	b.n	801364c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013590:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	2200      	movs	r2, #0
 8013596:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	68ba      	ldr	r2, [r7, #8]
 801359c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	891a      	ldrh	r2, [r3, #8]
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d205      	bcs.n	80135b6 <tcp_create_segment+0x86>
 80135aa:	4b2a      	ldr	r3, [pc, #168]	@ (8013654 <tcp_create_segment+0x124>)
 80135ac:	22b0      	movs	r2, #176	@ 0xb0
 80135ae:	492d      	ldr	r1, [pc, #180]	@ (8013664 <tcp_create_segment+0x134>)
 80135b0:	482a      	ldr	r0, [pc, #168]	@ (801365c <tcp_create_segment+0x12c>)
 80135b2:	f004 ffdd 	bl	8018570 <iprintf>
  seg->len = p->tot_len - optlen;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	891a      	ldrh	r2, [r3, #8]
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
 80135bc:	b29b      	uxth	r3, r3
 80135be:	1ad3      	subs	r3, r2, r3
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80135c6:	2114      	movs	r1, #20
 80135c8:	68b8      	ldr	r0, [r7, #8]
 80135ca:	f7fb fdc1 	bl	800f150 <pbuf_add_header>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d004      	beq.n	80135de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80135d4:	6938      	ldr	r0, [r7, #16]
 80135d6:	f7fd f8d2 	bl	801077e <tcp_seg_free>
    return NULL;
 80135da:	2300      	movs	r3, #0
 80135dc:	e036      	b.n	801364c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	8ada      	ldrh	r2, [r3, #22]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	68dc      	ldr	r4, [r3, #12]
 80135f0:	4610      	mov	r0, r2
 80135f2:	f7fa fa83 	bl	800dafc <lwip_htons>
 80135f6:	4603      	mov	r3, r0
 80135f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	8b1a      	ldrh	r2, [r3, #24]
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	68dc      	ldr	r4, [r3, #12]
 8013602:	4610      	mov	r0, r2
 8013604:	f7fa fa7a 	bl	800dafc <lwip_htons>
 8013608:	4603      	mov	r3, r0
 801360a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	68dc      	ldr	r4, [r3, #12]
 8013610:	6838      	ldr	r0, [r7, #0]
 8013612:	f7fa fa89 	bl	800db28 <lwip_htonl>
 8013616:	4603      	mov	r3, r0
 8013618:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	089b      	lsrs	r3, r3, #2
 801361e:	b2db      	uxtb	r3, r3
 8013620:	3305      	adds	r3, #5
 8013622:	b29b      	uxth	r3, r3
 8013624:	031b      	lsls	r3, r3, #12
 8013626:	b29a      	uxth	r2, r3
 8013628:	79fb      	ldrb	r3, [r7, #7]
 801362a:	b29b      	uxth	r3, r3
 801362c:	4313      	orrs	r3, r2
 801362e:	b29a      	uxth	r2, r3
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	68dc      	ldr	r4, [r3, #12]
 8013634:	4610      	mov	r0, r2
 8013636:	f7fa fa61 	bl	800dafc <lwip_htons>
 801363a:	4603      	mov	r3, r0
 801363c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	2200      	movs	r2, #0
 8013644:	749a      	strb	r2, [r3, #18]
 8013646:	2200      	movs	r2, #0
 8013648:	74da      	strb	r2, [r3, #19]
  return seg;
 801364a:	693b      	ldr	r3, [r7, #16]
}
 801364c:	4618      	mov	r0, r3
 801364e:	371c      	adds	r7, #28
 8013650:	46bd      	mov	sp, r7
 8013652:	bd90      	pop	{r4, r7, pc}
 8013654:	0801bdfc 	.word	0x0801bdfc
 8013658:	0801be30 	.word	0x0801be30
 801365c:	0801be50 	.word	0x0801be50
 8013660:	0801be78 	.word	0x0801be78
 8013664:	0801be9c 	.word	0x0801be9c

08013668 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b08b      	sub	sp, #44	@ 0x2c
 801366c:	af02      	add	r7, sp, #8
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	460b      	mov	r3, r1
 8013672:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013674:	2300      	movs	r3, #0
 8013676:	61fb      	str	r3, [r7, #28]
 8013678:	2300      	movs	r3, #0
 801367a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801367c:	2300      	movs	r3, #0
 801367e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d106      	bne.n	8013694 <tcp_split_unsent_seg+0x2c>
 8013686:	4b95      	ldr	r3, [pc, #596]	@ (80138dc <tcp_split_unsent_seg+0x274>)
 8013688:	f240 324b 	movw	r2, #843	@ 0x34b
 801368c:	4994      	ldr	r1, [pc, #592]	@ (80138e0 <tcp_split_unsent_seg+0x278>)
 801368e:	4895      	ldr	r0, [pc, #596]	@ (80138e4 <tcp_split_unsent_seg+0x27c>)
 8013690:	f004 ff6e 	bl	8018570 <iprintf>

  useg = pcb->unsent;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013698:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	e116      	b.n	80138d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80136a6:	887b      	ldrh	r3, [r7, #2]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d109      	bne.n	80136c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80136ac:	4b8b      	ldr	r3, [pc, #556]	@ (80138dc <tcp_split_unsent_seg+0x274>)
 80136ae:	f240 3253 	movw	r2, #851	@ 0x353
 80136b2:	498d      	ldr	r1, [pc, #564]	@ (80138e8 <tcp_split_unsent_seg+0x280>)
 80136b4:	488b      	ldr	r0, [pc, #556]	@ (80138e4 <tcp_split_unsent_seg+0x27c>)
 80136b6:	f004 ff5b 	bl	8018570 <iprintf>
    return ERR_VAL;
 80136ba:	f06f 0305 	mvn.w	r3, #5
 80136be:	e109      	b.n	80138d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	887a      	ldrh	r2, [r7, #2]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d301      	bcc.n	80136ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80136ca:	2300      	movs	r3, #0
 80136cc:	e102      	b.n	80138d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136d2:	887a      	ldrh	r2, [r7, #2]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d906      	bls.n	80136e6 <tcp_split_unsent_seg+0x7e>
 80136d8:	4b80      	ldr	r3, [pc, #512]	@ (80138dc <tcp_split_unsent_seg+0x274>)
 80136da:	f240 325b 	movw	r2, #859	@ 0x35b
 80136de:	4983      	ldr	r1, [pc, #524]	@ (80138ec <tcp_split_unsent_seg+0x284>)
 80136e0:	4880      	ldr	r0, [pc, #512]	@ (80138e4 <tcp_split_unsent_seg+0x27c>)
 80136e2:	f004 ff45 	bl	8018570 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	891b      	ldrh	r3, [r3, #8]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <tcp_split_unsent_seg+0x94>
 80136ee:	4b7b      	ldr	r3, [pc, #492]	@ (80138dc <tcp_split_unsent_seg+0x274>)
 80136f0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80136f4:	497e      	ldr	r1, [pc, #504]	@ (80138f0 <tcp_split_unsent_seg+0x288>)
 80136f6:	487b      	ldr	r0, [pc, #492]	@ (80138e4 <tcp_split_unsent_seg+0x27c>)
 80136f8:	f004 ff3a 	bl	8018570 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	7a9b      	ldrb	r3, [r3, #10]
 8013700:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013702:	7bfb      	ldrb	r3, [r7, #15]
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	b2db      	uxtb	r3, r3
 8013708:	f003 0304 	and.w	r3, r3, #4
 801370c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	891a      	ldrh	r2, [r3, #8]
 8013712:	887b      	ldrh	r3, [r7, #2]
 8013714:	1ad3      	subs	r3, r2, r3
 8013716:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013718:	7bbb      	ldrb	r3, [r7, #14]
 801371a:	b29a      	uxth	r2, r3
 801371c:	89bb      	ldrh	r3, [r7, #12]
 801371e:	4413      	add	r3, r2
 8013720:	b29b      	uxth	r3, r3
 8013722:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013726:	4619      	mov	r1, r3
 8013728:	2036      	movs	r0, #54	@ 0x36
 801372a:	f7fb fac3 	bl	800ecb4 <pbuf_alloc>
 801372e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	2b00      	cmp	r3, #0
 8013734:	f000 80b7 	beq.w	80138a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	891a      	ldrh	r2, [r3, #8]
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	891b      	ldrh	r3, [r3, #8]
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	b29a      	uxth	r2, r3
 8013746:	887b      	ldrh	r3, [r7, #2]
 8013748:	4413      	add	r3, r2
 801374a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	6858      	ldr	r0, [r3, #4]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	685a      	ldr	r2, [r3, #4]
 8013754:	7bbb      	ldrb	r3, [r7, #14]
 8013756:	18d1      	adds	r1, r2, r3
 8013758:	897b      	ldrh	r3, [r7, #10]
 801375a:	89ba      	ldrh	r2, [r7, #12]
 801375c:	f7fb ff84 	bl	800f668 <pbuf_copy_partial>
 8013760:	4603      	mov	r3, r0
 8013762:	461a      	mov	r2, r3
 8013764:	89bb      	ldrh	r3, [r7, #12]
 8013766:	4293      	cmp	r3, r2
 8013768:	f040 809f 	bne.w	80138aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	68db      	ldr	r3, [r3, #12]
 8013770:	899b      	ldrh	r3, [r3, #12]
 8013772:	b29b      	uxth	r3, r3
 8013774:	4618      	mov	r0, r3
 8013776:	f7fa f9c1 	bl	800dafc <lwip_htons>
 801377a:	4603      	mov	r3, r0
 801377c:	b2db      	uxtb	r3, r3
 801377e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013782:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013784:	2300      	movs	r3, #0
 8013786:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013788:	7efb      	ldrb	r3, [r7, #27]
 801378a:	f003 0308 	and.w	r3, r3, #8
 801378e:	2b00      	cmp	r3, #0
 8013790:	d007      	beq.n	80137a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013792:	7efb      	ldrb	r3, [r7, #27]
 8013794:	f023 0308 	bic.w	r3, r3, #8
 8013798:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801379a:	7ebb      	ldrb	r3, [r7, #26]
 801379c:	f043 0308 	orr.w	r3, r3, #8
 80137a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80137a2:	7efb      	ldrb	r3, [r7, #27]
 80137a4:	f003 0301 	and.w	r3, r3, #1
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d007      	beq.n	80137bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80137ac:	7efb      	ldrb	r3, [r7, #27]
 80137ae:	f023 0301 	bic.w	r3, r3, #1
 80137b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80137b4:	7ebb      	ldrb	r3, [r7, #26]
 80137b6:	f043 0301 	orr.w	r3, r3, #1
 80137ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fa f9b0 	bl	800db28 <lwip_htonl>
 80137c8:	4602      	mov	r2, r0
 80137ca:	887b      	ldrh	r3, [r7, #2]
 80137cc:	18d1      	adds	r1, r2, r3
 80137ce:	7eba      	ldrb	r2, [r7, #26]
 80137d0:	7bfb      	ldrb	r3, [r7, #15]
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	460b      	mov	r3, r1
 80137d6:	6939      	ldr	r1, [r7, #16]
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7ff fea9 	bl	8013530 <tcp_create_segment>
 80137de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d063      	beq.n	80138ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fb fdd4 	bl	800f398 <pbuf_clen>
 80137f0:	4603      	mov	r3, r0
 80137f2:	461a      	mov	r2, r3
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80137fa:	1a9b      	subs	r3, r3, r2
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	6858      	ldr	r0, [r3, #4]
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	891a      	ldrh	r2, [r3, #8]
 801380e:	89bb      	ldrh	r3, [r7, #12]
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	b29b      	uxth	r3, r3
 8013814:	4619      	mov	r1, r3
 8013816:	f7fb fbab 	bl	800ef70 <pbuf_realloc>
  useg->len -= remainder;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	891a      	ldrh	r2, [r3, #8]
 801381e:	89bb      	ldrh	r3, [r7, #12]
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	b29a      	uxth	r2, r3
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	899b      	ldrh	r3, [r3, #12]
 801382e:	b29c      	uxth	r4, r3
 8013830:	7efb      	ldrb	r3, [r7, #27]
 8013832:	b29b      	uxth	r3, r3
 8013834:	4618      	mov	r0, r3
 8013836:	f7fa f961 	bl	800dafc <lwip_htons>
 801383a:	4603      	mov	r3, r0
 801383c:	461a      	mov	r2, r3
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	4322      	orrs	r2, r4
 8013844:	b292      	uxth	r2, r2
 8013846:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	4618      	mov	r0, r3
 801384e:	f7fb fda3 	bl	800f398 <pbuf_clen>
 8013852:	4603      	mov	r3, r0
 8013854:	461a      	mov	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801385c:	4413      	add	r3, r2
 801385e:	b29a      	uxth	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	4618      	mov	r0, r3
 801386c:	f7fb fd94 	bl	800f398 <pbuf_clen>
 8013870:	4603      	mov	r3, r0
 8013872:	461a      	mov	r2, r3
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801387a:	4413      	add	r3, r2
 801387c:	b29a      	uxth	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	69fa      	ldr	r2, [r7, #28]
 8013890:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d103      	bne.n	80138a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80138a2:	2300      	movs	r3, #0
 80138a4:	e016      	b.n	80138d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80138a6:	bf00      	nop
 80138a8:	e002      	b.n	80138b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80138aa:	bf00      	nop
 80138ac:	e000      	b.n	80138b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80138ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <tcp_split_unsent_seg+0x25c>
 80138b6:	4b09      	ldr	r3, [pc, #36]	@ (80138dc <tcp_split_unsent_seg+0x274>)
 80138b8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80138bc:	490d      	ldr	r1, [pc, #52]	@ (80138f4 <tcp_split_unsent_seg+0x28c>)
 80138be:	4809      	ldr	r0, [pc, #36]	@ (80138e4 <tcp_split_unsent_seg+0x27c>)
 80138c0:	f004 fe56 	bl	8018570 <iprintf>
  if (p != NULL) {
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d002      	beq.n	80138d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80138ca:	6938      	ldr	r0, [r7, #16]
 80138cc:	f7fb fcd6 	bl	800f27c <pbuf_free>
  }

  return ERR_MEM;
 80138d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3724      	adds	r7, #36	@ 0x24
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	0801bdfc 	.word	0x0801bdfc
 80138e0:	0801c190 	.word	0x0801c190
 80138e4:	0801be50 	.word	0x0801be50
 80138e8:	0801c1b4 	.word	0x0801c1b4
 80138ec:	0801c1d8 	.word	0x0801c1d8
 80138f0:	0801c1e8 	.word	0x0801c1e8
 80138f4:	0801c1f8 	.word	0x0801c1f8

080138f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80138f8:	b590      	push	{r4, r7, lr}
 80138fa:	b085      	sub	sp, #20
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d106      	bne.n	8013914 <tcp_send_fin+0x1c>
 8013906:	4b21      	ldr	r3, [pc, #132]	@ (801398c <tcp_send_fin+0x94>)
 8013908:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801390c:	4920      	ldr	r1, [pc, #128]	@ (8013990 <tcp_send_fin+0x98>)
 801390e:	4821      	ldr	r0, [pc, #132]	@ (8013994 <tcp_send_fin+0x9c>)
 8013910:	f004 fe2e 	bl	8018570 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d02e      	beq.n	801397a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	e002      	b.n	801392a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1f8      	bne.n	8013924 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	899b      	ldrh	r3, [r3, #12]
 8013938:	b29b      	uxth	r3, r3
 801393a:	4618      	mov	r0, r3
 801393c:	f7fa f8de 	bl	800dafc <lwip_htons>
 8013940:	4603      	mov	r3, r0
 8013942:	b2db      	uxtb	r3, r3
 8013944:	f003 0307 	and.w	r3, r3, #7
 8013948:	2b00      	cmp	r3, #0
 801394a:	d116      	bne.n	801397a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	899b      	ldrh	r3, [r3, #12]
 8013952:	b29c      	uxth	r4, r3
 8013954:	2001      	movs	r0, #1
 8013956:	f7fa f8d1 	bl	800dafc <lwip_htons>
 801395a:	4603      	mov	r3, r0
 801395c:	461a      	mov	r2, r3
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	4322      	orrs	r2, r4
 8013964:	b292      	uxth	r2, r2
 8013966:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	8b5b      	ldrh	r3, [r3, #26]
 801396c:	f043 0320 	orr.w	r3, r3, #32
 8013970:	b29a      	uxth	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013976:	2300      	movs	r3, #0
 8013978:	e004      	b.n	8013984 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801397a:	2101      	movs	r1, #1
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f000 f80b 	bl	8013998 <tcp_enqueue_flags>
 8013982:	4603      	mov	r3, r0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3714      	adds	r7, #20
 8013988:	46bd      	mov	sp, r7
 801398a:	bd90      	pop	{r4, r7, pc}
 801398c:	0801bdfc 	.word	0x0801bdfc
 8013990:	0801c204 	.word	0x0801c204
 8013994:	0801be50 	.word	0x0801be50

08013998 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b08a      	sub	sp, #40	@ 0x28
 801399c:	af02      	add	r7, sp, #8
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	460b      	mov	r3, r1
 80139a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80139ac:	78fb      	ldrb	r3, [r7, #3]
 80139ae:	f003 0303 	and.w	r3, r3, #3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <tcp_enqueue_flags+0x2c>
 80139b6:	4b67      	ldr	r3, [pc, #412]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 80139b8:	f240 4211 	movw	r2, #1041	@ 0x411
 80139bc:	4966      	ldr	r1, [pc, #408]	@ (8013b58 <tcp_enqueue_flags+0x1c0>)
 80139be:	4867      	ldr	r0, [pc, #412]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 80139c0:	f004 fdd6 	bl	8018570 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d106      	bne.n	80139d8 <tcp_enqueue_flags+0x40>
 80139ca:	4b62      	ldr	r3, [pc, #392]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 80139cc:	f240 4213 	movw	r2, #1043	@ 0x413
 80139d0:	4963      	ldr	r1, [pc, #396]	@ (8013b60 <tcp_enqueue_flags+0x1c8>)
 80139d2:	4862      	ldr	r0, [pc, #392]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 80139d4:	f004 fdcc 	bl	8018570 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80139d8:	78fb      	ldrb	r3, [r7, #3]
 80139da:	f003 0302 	and.w	r3, r3, #2
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d001      	beq.n	80139e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80139e2:	2301      	movs	r3, #1
 80139e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139e6:	7ffb      	ldrb	r3, [r7, #31]
 80139e8:	009b      	lsls	r3, r3, #2
 80139ea:	b2db      	uxtb	r3, r3
 80139ec:	f003 0304 	and.w	r3, r3, #4
 80139f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80139f2:	7dfb      	ldrb	r3, [r7, #23]
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80139fa:	4619      	mov	r1, r3
 80139fc:	2036      	movs	r0, #54	@ 0x36
 80139fe:	f7fb f959 	bl	800ecb4 <pbuf_alloc>
 8013a02:	6138      	str	r0, [r7, #16]
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d109      	bne.n	8013a1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	8b5b      	ldrh	r3, [r3, #26]
 8013a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013a18:	f04f 33ff 	mov.w	r3, #4294967295
 8013a1c:	e095      	b.n	8013b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	895a      	ldrh	r2, [r3, #10]
 8013a22:	7dfb      	ldrb	r3, [r7, #23]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d206      	bcs.n	8013a38 <tcp_enqueue_flags+0xa0>
 8013a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 8013a2c:	f240 4239 	movw	r2, #1081	@ 0x439
 8013a30:	494c      	ldr	r1, [pc, #304]	@ (8013b64 <tcp_enqueue_flags+0x1cc>)
 8013a32:	484a      	ldr	r0, [pc, #296]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 8013a34:	f004 fd9c 	bl	8018570 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013a3c:	78fa      	ldrb	r2, [r7, #3]
 8013a3e:	7ffb      	ldrb	r3, [r7, #31]
 8013a40:	9300      	str	r3, [sp, #0]
 8013a42:	460b      	mov	r3, r1
 8013a44:	6939      	ldr	r1, [r7, #16]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7ff fd72 	bl	8013530 <tcp_create_segment>
 8013a4c:	60f8      	str	r0, [r7, #12]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d109      	bne.n	8013a68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	8b5b      	ldrh	r3, [r3, #26]
 8013a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013a62:	f04f 33ff 	mov.w	r3, #4294967295
 8013a66:	e070      	b.n	8013b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	f003 0303 	and.w	r3, r3, #3
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d006      	beq.n	8013a82 <tcp_enqueue_flags+0xea>
 8013a74:	4b37      	ldr	r3, [pc, #220]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 8013a76:	f240 4242 	movw	r2, #1090	@ 0x442
 8013a7a:	493b      	ldr	r1, [pc, #236]	@ (8013b68 <tcp_enqueue_flags+0x1d0>)
 8013a7c:	4837      	ldr	r0, [pc, #220]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 8013a7e:	f004 fd77 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	891b      	ldrh	r3, [r3, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d006      	beq.n	8013a98 <tcp_enqueue_flags+0x100>
 8013a8a:	4b32      	ldr	r3, [pc, #200]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 8013a8c:	f240 4243 	movw	r2, #1091	@ 0x443
 8013a90:	4936      	ldr	r1, [pc, #216]	@ (8013b6c <tcp_enqueue_flags+0x1d4>)
 8013a92:	4832      	ldr	r0, [pc, #200]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 8013a94:	f004 fd6c 	bl	8018570 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d103      	bne.n	8013aa8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	68fa      	ldr	r2, [r7, #12]
 8013aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013aa6:	e00d      	b.n	8013ac4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aac:	61bb      	str	r3, [r7, #24]
 8013aae:	e002      	b.n	8013ab6 <tcp_enqueue_flags+0x11e>
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	61bb      	str	r3, [r7, #24]
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d1f8      	bne.n	8013ab0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013acc:	78fb      	ldrb	r3, [r7, #3]
 8013ace:	f003 0302 	and.w	r3, r3, #2
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d104      	bne.n	8013ae0 <tcp_enqueue_flags+0x148>
 8013ad6:	78fb      	ldrb	r3, [r7, #3]
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d004      	beq.n	8013aea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013aea:	78fb      	ldrb	r3, [r7, #3]
 8013aec:	f003 0301 	and.w	r3, r3, #1
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d006      	beq.n	8013b02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	8b5b      	ldrh	r3, [r3, #26]
 8013af8:	f043 0320 	orr.w	r3, r3, #32
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fb fc46 	bl	800f398 <pbuf_clen>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	461a      	mov	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b16:	4413      	add	r3, r2
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00e      	beq.n	8013b48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d10a      	bne.n	8013b48 <tcp_enqueue_flags+0x1b0>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <tcp_enqueue_flags+0x1b0>
 8013b3a:	4b06      	ldr	r3, [pc, #24]	@ (8013b54 <tcp_enqueue_flags+0x1bc>)
 8013b3c:	f240 4265 	movw	r2, #1125	@ 0x465
 8013b40:	490b      	ldr	r1, [pc, #44]	@ (8013b70 <tcp_enqueue_flags+0x1d8>)
 8013b42:	4806      	ldr	r0, [pc, #24]	@ (8013b5c <tcp_enqueue_flags+0x1c4>)
 8013b44:	f004 fd14 	bl	8018570 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013b48:	2300      	movs	r3, #0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3720      	adds	r7, #32
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}
 8013b52:	bf00      	nop
 8013b54:	0801bdfc 	.word	0x0801bdfc
 8013b58:	0801c220 	.word	0x0801c220
 8013b5c:	0801be50 	.word	0x0801be50
 8013b60:	0801c278 	.word	0x0801c278
 8013b64:	0801c298 	.word	0x0801c298
 8013b68:	0801c2d4 	.word	0x0801c2d4
 8013b6c:	0801c2ec 	.word	0x0801c2ec
 8013b70:	0801c318 	.word	0x0801c318

08013b74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013b74:	b5b0      	push	{r4, r5, r7, lr}
 8013b76:	b08a      	sub	sp, #40	@ 0x28
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d106      	bne.n	8013b90 <tcp_output+0x1c>
 8013b82:	4b8a      	ldr	r3, [pc, #552]	@ (8013dac <tcp_output+0x238>)
 8013b84:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013b88:	4989      	ldr	r1, [pc, #548]	@ (8013db0 <tcp_output+0x23c>)
 8013b8a:	488a      	ldr	r0, [pc, #552]	@ (8013db4 <tcp_output+0x240>)
 8013b8c:	f004 fcf0 	bl	8018570 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	7d1b      	ldrb	r3, [r3, #20]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d106      	bne.n	8013ba6 <tcp_output+0x32>
 8013b98:	4b84      	ldr	r3, [pc, #528]	@ (8013dac <tcp_output+0x238>)
 8013b9a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013b9e:	4986      	ldr	r1, [pc, #536]	@ (8013db8 <tcp_output+0x244>)
 8013ba0:	4884      	ldr	r0, [pc, #528]	@ (8013db4 <tcp_output+0x240>)
 8013ba2:	f004 fce5 	bl	8018570 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013ba6:	4b85      	ldr	r3, [pc, #532]	@ (8013dbc <tcp_output+0x248>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d101      	bne.n	8013bb4 <tcp_output+0x40>
    return ERR_OK;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	e1ce      	b.n	8013f52 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	bf28      	it	cs
 8013bc4:	4613      	movcs	r3, r2
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10b      	bne.n	8013bee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	8b5b      	ldrh	r3, [r3, #26]
 8013bda:	f003 0302 	and.w	r3, r3, #2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f000 81aa 	beq.w	8013f38 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 fdcb 	bl	8014780 <tcp_send_empty_ack>
 8013bea:	4603      	mov	r3, r0
 8013bec:	e1b1      	b.n	8013f52 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013bee:	6879      	ldr	r1, [r7, #4]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	3304      	adds	r3, #4
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7ff fc7e 	bl	80134f8 <tcp_route>
 8013bfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d102      	bne.n	8013c0a <tcp_output+0x96>
    return ERR_RTE;
 8013c04:	f06f 0303 	mvn.w	r3, #3
 8013c08:	e1a3      	b.n	8013f52 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d003      	beq.n	8013c18 <tcp_output+0xa4>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d111      	bne.n	8013c3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d002      	beq.n	8013c24 <tcp_output+0xb0>
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	3304      	adds	r3, #4
 8013c22:	e000      	b.n	8013c26 <tcp_output+0xb2>
 8013c24:	2300      	movs	r3, #0
 8013c26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d102      	bne.n	8013c34 <tcp_output+0xc0>
      return ERR_RTE;
 8013c2e:	f06f 0303 	mvn.w	r3, #3
 8013c32:	e18e      	b.n	8013f52 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f9 ff70 	bl	800db28 <lwip_htonl>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c4e:	1ad3      	subs	r3, r2, r3
 8013c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c52:	8912      	ldrh	r2, [r2, #8]
 8013c54:	4413      	add	r3, r2
 8013c56:	69ba      	ldr	r2, [r7, #24]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d227      	bcs.n	8013cac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013c62:	461a      	mov	r2, r3
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d114      	bne.n	8013c94 <tcp_output+0x120>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d110      	bne.n	8013c94 <tcp_output+0x120>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d10b      	bne.n	8013c94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2201      	movs	r2, #1
 8013c88:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	8b5b      	ldrh	r3, [r3, #26]
 8013c98:	f003 0302 	and.w	r3, r3, #2
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	f000 814d 	beq.w	8013f3c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fd6c 	bl	8014780 <tcp_send_empty_ack>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	e152      	b.n	8013f52 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 811c 	beq.w	8013efa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013cc2:	e002      	b.n	8013cca <tcp_output+0x156>
 8013cc4:	6a3b      	ldr	r3, [r7, #32]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	623b      	str	r3, [r7, #32]
 8013cca:	6a3b      	ldr	r3, [r7, #32]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d1f8      	bne.n	8013cc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013cd2:	e112      	b.n	8013efa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	899b      	ldrh	r3, [r3, #12]
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7f9 ff0d 	bl	800dafc <lwip_htons>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	f003 0304 	and.w	r3, r3, #4
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d006      	beq.n	8013cfc <tcp_output+0x188>
 8013cee:	4b2f      	ldr	r3, [pc, #188]	@ (8013dac <tcp_output+0x238>)
 8013cf0:	f240 5236 	movw	r2, #1334	@ 0x536
 8013cf4:	4932      	ldr	r1, [pc, #200]	@ (8013dc0 <tcp_output+0x24c>)
 8013cf6:	482f      	ldr	r0, [pc, #188]	@ (8013db4 <tcp_output+0x240>)
 8013cf8:	f004 fc3a 	bl	8018570 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d01f      	beq.n	8013d44 <tcp_output+0x1d0>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	8b5b      	ldrh	r3, [r3, #26]
 8013d08:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d119      	bne.n	8013d44 <tcp_output+0x1d0>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d00b      	beq.n	8013d30 <tcp_output+0x1bc>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d110      	bne.n	8013d44 <tcp_output+0x1d0>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d26:	891a      	ldrh	r2, [r3, #8]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d209      	bcs.n	8013d44 <tcp_output+0x1d0>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d004      	beq.n	8013d44 <tcp_output+0x1d0>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d40:	2b08      	cmp	r3, #8
 8013d42:	d901      	bls.n	8013d48 <tcp_output+0x1d4>
 8013d44:	2301      	movs	r3, #1
 8013d46:	e000      	b.n	8013d4a <tcp_output+0x1d6>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d106      	bne.n	8013d5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	8b5b      	ldrh	r3, [r3, #26]
 8013d52:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	f000 80e4 	beq.w	8013f24 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	7d1b      	ldrb	r3, [r3, #20]
 8013d60:	2b02      	cmp	r3, #2
 8013d62:	d00d      	beq.n	8013d80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	899b      	ldrh	r3, [r3, #12]
 8013d6a:	b29c      	uxth	r4, r3
 8013d6c:	2010      	movs	r0, #16
 8013d6e:	f7f9 fec5 	bl	800dafc <lwip_htons>
 8013d72:	4603      	mov	r3, r0
 8013d74:	461a      	mov	r2, r3
 8013d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	4322      	orrs	r2, r4
 8013d7c:	b292      	uxth	r2, r2
 8013d7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013d80:	697a      	ldr	r2, [r7, #20]
 8013d82:	6879      	ldr	r1, [r7, #4]
 8013d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d86:	f000 f909 	bl	8013f9c <tcp_output_segment>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d016      	beq.n	8013dc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	8b5b      	ldrh	r3, [r3, #26]
 8013d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	835a      	strh	r2, [r3, #26]
      return err;
 8013da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013da8:	e0d3      	b.n	8013f52 <tcp_output+0x3de>
 8013daa:	bf00      	nop
 8013dac:	0801bdfc 	.word	0x0801bdfc
 8013db0:	0801c340 	.word	0x0801c340
 8013db4:	0801be50 	.word	0x0801be50
 8013db8:	0801c358 	.word	0x0801c358
 8013dbc:	2000c6f4 	.word	0x2000c6f4
 8013dc0:	0801c380 	.word	0x0801c380
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	7d1b      	ldrb	r3, [r3, #20]
 8013dd0:	2b02      	cmp	r3, #2
 8013dd2:	d006      	beq.n	8013de2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	8b5b      	ldrh	r3, [r3, #26]
 8013dd8:	f023 0303 	bic.w	r3, r3, #3
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7f9 fe9d 	bl	800db28 <lwip_htonl>
 8013dee:	4604      	mov	r4, r0
 8013df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df2:	891b      	ldrh	r3, [r3, #8]
 8013df4:	461d      	mov	r5, r3
 8013df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	899b      	ldrh	r3, [r3, #12]
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f9 fe7c 	bl	800dafc <lwip_htons>
 8013e04:	4603      	mov	r3, r0
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	f003 0303 	and.w	r3, r3, #3
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d001      	beq.n	8013e14 <tcp_output+0x2a0>
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <tcp_output+0x2a2>
 8013e14:	2300      	movs	r3, #0
 8013e16:	442b      	add	r3, r5
 8013e18:	4423      	add	r3, r4
 8013e1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	da02      	bge.n	8013e2e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	68ba      	ldr	r2, [r7, #8]
 8013e2c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e30:	891b      	ldrh	r3, [r3, #8]
 8013e32:	461c      	mov	r4, r3
 8013e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	899b      	ldrh	r3, [r3, #12]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f9 fe5d 	bl	800dafc <lwip_htons>
 8013e42:	4603      	mov	r3, r0
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	f003 0303 	and.w	r3, r3, #3
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <tcp_output+0x2de>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e000      	b.n	8013e54 <tcp_output+0x2e0>
 8013e52:	2300      	movs	r3, #0
 8013e54:	4423      	add	r3, r4
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d049      	beq.n	8013eee <tcp_output+0x37a>
      seg->next = NULL;
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d105      	bne.n	8013e74 <tcp_output+0x300>
        pcb->unacked = seg;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e6c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e70:	623b      	str	r3, [r7, #32]
 8013e72:	e03f      	b.n	8013ef4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f9 fe54 	bl	800db28 <lwip_htonl>
 8013e80:	4604      	mov	r4, r0
 8013e82:	6a3b      	ldr	r3, [r7, #32]
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7f9 fe4d 	bl	800db28 <lwip_htonl>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	1ae3      	subs	r3, r4, r3
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	da24      	bge.n	8013ee0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	3370      	adds	r3, #112	@ 0x70
 8013e9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013e9c:	e002      	b.n	8013ea4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013e9e:	69fb      	ldr	r3, [r7, #28]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013ea4:	69fb      	ldr	r3, [r7, #28]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d011      	beq.n	8013ed0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7f9 fe37 	bl	800db28 <lwip_htonl>
 8013eba:	4604      	mov	r4, r0
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7f9 fe30 	bl	800db28 <lwip_htonl>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	dbe6      	blt.n	8013e9e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013edc:	601a      	str	r2, [r3, #0]
 8013ede:	e009      	b.n	8013ef4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013ee0:	6a3b      	ldr	r3, [r7, #32]
 8013ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ee4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013ee6:	6a3b      	ldr	r3, [r7, #32]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	623b      	str	r3, [r7, #32]
 8013eec:	e002      	b.n	8013ef4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ef0:	f7fc fc45 	bl	801077e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d012      	beq.n	8013f26 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f9 fe0e 	bl	800db28 <lwip_htonl>
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f16:	8912      	ldrh	r2, [r2, #8]
 8013f18:	4413      	add	r3, r2
  while (seg != NULL &&
 8013f1a:	69ba      	ldr	r2, [r7, #24]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	f4bf aed9 	bcs.w	8013cd4 <tcp_output+0x160>
 8013f22:	e000      	b.n	8013f26 <tcp_output+0x3b2>
      break;
 8013f24:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d108      	bne.n	8013f40 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013f36:	e004      	b.n	8013f42 <tcp_output+0x3ce>
    goto output_done;
 8013f38:	bf00      	nop
 8013f3a:	e002      	b.n	8013f42 <tcp_output+0x3ce>
    goto output_done;
 8013f3c:	bf00      	nop
 8013f3e:	e000      	b.n	8013f42 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013f40:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	8b5b      	ldrh	r3, [r3, #26]
 8013f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013f50:	2300      	movs	r3, #0
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3728      	adds	r7, #40	@ 0x28
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bdb0      	pop	{r4, r5, r7, pc}
 8013f5a:	bf00      	nop

08013f5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d106      	bne.n	8013f78 <tcp_output_segment_busy+0x1c>
 8013f6a:	4b09      	ldr	r3, [pc, #36]	@ (8013f90 <tcp_output_segment_busy+0x34>)
 8013f6c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013f70:	4908      	ldr	r1, [pc, #32]	@ (8013f94 <tcp_output_segment_busy+0x38>)
 8013f72:	4809      	ldr	r0, [pc, #36]	@ (8013f98 <tcp_output_segment_busy+0x3c>)
 8013f74:	f004 fafc 	bl	8018570 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	7b9b      	ldrb	r3, [r3, #14]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d001      	beq.n	8013f86 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013f82:	2301      	movs	r3, #1
 8013f84:	e000      	b.n	8013f88 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	0801bdfc 	.word	0x0801bdfc
 8013f94:	0801c398 	.word	0x0801c398
 8013f98:	0801be50 	.word	0x0801be50

08013f9c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013f9c:	b5b0      	push	{r4, r5, r7, lr}
 8013f9e:	b08c      	sub	sp, #48	@ 0x30
 8013fa0:	af04      	add	r7, sp, #16
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <tcp_output_segment+0x20>
 8013fae:	4b64      	ldr	r3, [pc, #400]	@ (8014140 <tcp_output_segment+0x1a4>)
 8013fb0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013fb4:	4963      	ldr	r1, [pc, #396]	@ (8014144 <tcp_output_segment+0x1a8>)
 8013fb6:	4864      	ldr	r0, [pc, #400]	@ (8014148 <tcp_output_segment+0x1ac>)
 8013fb8:	f004 fada 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d106      	bne.n	8013fd0 <tcp_output_segment+0x34>
 8013fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8014140 <tcp_output_segment+0x1a4>)
 8013fc4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013fc8:	4960      	ldr	r1, [pc, #384]	@ (801414c <tcp_output_segment+0x1b0>)
 8013fca:	485f      	ldr	r0, [pc, #380]	@ (8014148 <tcp_output_segment+0x1ac>)
 8013fcc:	f004 fad0 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d106      	bne.n	8013fe4 <tcp_output_segment+0x48>
 8013fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8014140 <tcp_output_segment+0x1a4>)
 8013fd8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013fdc:	495c      	ldr	r1, [pc, #368]	@ (8014150 <tcp_output_segment+0x1b4>)
 8013fde:	485a      	ldr	r0, [pc, #360]	@ (8014148 <tcp_output_segment+0x1ac>)
 8013fe0:	f004 fac6 	bl	8018570 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f7ff ffb9 	bl	8013f5c <tcp_output_segment_busy>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	e0a1      	b.n	8014138 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	68dc      	ldr	r4, [r3, #12]
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	f7f9 fd93 	bl	800db28 <lwip_htonl>
 8014002:	4603      	mov	r3, r0
 8014004:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	68dc      	ldr	r4, [r3, #12]
 801400e:	4610      	mov	r0, r2
 8014010:	f7f9 fd74 	bl	800dafc <lwip_htons>
 8014014:	4603      	mov	r3, r0
 8014016:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014020:	441a      	add	r2, r3
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	3314      	adds	r3, #20
 801402c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	7a9b      	ldrb	r3, [r3, #10]
 8014032:	f003 0301 	and.w	r3, r3, #1
 8014036:	2b00      	cmp	r3, #0
 8014038:	d015      	beq.n	8014066 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	3304      	adds	r3, #4
 801403e:	461a      	mov	r2, r3
 8014040:	6879      	ldr	r1, [r7, #4]
 8014042:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014046:	f7fc fe91 	bl	8010d6c <tcp_eff_send_mss_netif>
 801404a:	4603      	mov	r3, r0
 801404c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801404e:	8b7b      	ldrh	r3, [r7, #26]
 8014050:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014054:	4618      	mov	r0, r3
 8014056:	f7f9 fd67 	bl	800db28 <lwip_htonl>
 801405a:	4602      	mov	r2, r0
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	3304      	adds	r3, #4
 8014064:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801406c:	2b00      	cmp	r3, #0
 801406e:	da02      	bge.n	8014076 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	2200      	movs	r2, #0
 8014074:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10c      	bne.n	8014098 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801407e:	4b35      	ldr	r3, [pc, #212]	@ (8014154 <tcp_output_segment+0x1b8>)
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	f7f9 fd4b 	bl	800db28 <lwip_htonl>
 8014092:	4602      	mov	r2, r0
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	68da      	ldr	r2, [r3, #12]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	8959      	ldrh	r1, [r3, #10]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	8b3a      	ldrh	r2, [r7, #24]
 80140b2:	1a8a      	subs	r2, r1, r2
 80140b4:	b292      	uxth	r2, r2
 80140b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	8919      	ldrh	r1, [r3, #8]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	8b3a      	ldrh	r2, [r7, #24]
 80140c4:	1a8a      	subs	r2, r1, r2
 80140c6:	b292      	uxth	r2, r2
 80140c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	68fa      	ldr	r2, [r7, #12]
 80140d0:	68d2      	ldr	r2, [r2, #12]
 80140d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	2200      	movs	r2, #0
 80140da:	741a      	strb	r2, [r3, #16]
 80140dc:	2200      	movs	r2, #0
 80140de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	68da      	ldr	r2, [r3, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	7a9b      	ldrb	r3, [r3, #10]
 80140e8:	f003 0301 	and.w	r3, r3, #1
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d001      	beq.n	80140f4 <tcp_output_segment+0x158>
 80140f0:	2318      	movs	r3, #24
 80140f2:	e000      	b.n	80140f6 <tcp_output_segment+0x15a>
 80140f4:	2314      	movs	r3, #20
 80140f6:	4413      	add	r3, r2
 80140f8:	69fa      	ldr	r2, [r7, #28]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d006      	beq.n	801410c <tcp_output_segment+0x170>
 80140fe:	4b10      	ldr	r3, [pc, #64]	@ (8014140 <tcp_output_segment+0x1a4>)
 8014100:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014104:	4914      	ldr	r1, [pc, #80]	@ (8014158 <tcp_output_segment+0x1bc>)
 8014106:	4810      	ldr	r0, [pc, #64]	@ (8014148 <tcp_output_segment+0x1ac>)
 8014108:	f004 fa32 	bl	8018570 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6858      	ldr	r0, [r3, #4]
 8014110:	68b9      	ldr	r1, [r7, #8]
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	1d1c      	adds	r4, r3, #4
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	7add      	ldrb	r5, [r3, #11]
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	7a9b      	ldrb	r3, [r3, #10]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	9202      	str	r2, [sp, #8]
 8014122:	2206      	movs	r2, #6
 8014124:	9201      	str	r2, [sp, #4]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	462b      	mov	r3, r5
 801412a:	4622      	mov	r2, r4
 801412c:	f002 fa32 	bl	8016594 <ip4_output_if>
 8014130:	4603      	mov	r3, r0
 8014132:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3720      	adds	r7, #32
 801413c:	46bd      	mov	sp, r7
 801413e:	bdb0      	pop	{r4, r5, r7, pc}
 8014140:	0801bdfc 	.word	0x0801bdfc
 8014144:	0801c3c0 	.word	0x0801c3c0
 8014148:	0801be50 	.word	0x0801be50
 801414c:	0801c3e0 	.word	0x0801c3e0
 8014150:	0801c400 	.word	0x0801c400
 8014154:	2000c6a8 	.word	0x2000c6a8
 8014158:	0801c424 	.word	0x0801c424

0801415c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801415c:	b5b0      	push	{r4, r5, r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d106      	bne.n	8014178 <tcp_rexmit_rto_prepare+0x1c>
 801416a:	4b31      	ldr	r3, [pc, #196]	@ (8014230 <tcp_rexmit_rto_prepare+0xd4>)
 801416c:	f240 6263 	movw	r2, #1635	@ 0x663
 8014170:	4930      	ldr	r1, [pc, #192]	@ (8014234 <tcp_rexmit_rto_prepare+0xd8>)
 8014172:	4831      	ldr	r0, [pc, #196]	@ (8014238 <tcp_rexmit_rto_prepare+0xdc>)
 8014174:	f004 f9fc 	bl	8018570 <iprintf>

  if (pcb->unacked == NULL) {
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014180:	f06f 0305 	mvn.w	r3, #5
 8014184:	e050      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	e00b      	b.n	80141a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f7ff fee4 	bl	8013f5c <tcp_output_segment_busy>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d002      	beq.n	80141a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801419a:	f06f 0305 	mvn.w	r3, #5
 801419e:	e043      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	60fb      	str	r3, [r7, #12]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d1ef      	bne.n	801418e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff fed4 	bl	8013f5c <tcp_output_segment_busy>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d002      	beq.n	80141c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80141ba:	f06f 0305 	mvn.w	r3, #5
 80141be:	e033      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2200      	movs	r2, #0
 80141d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8b5b      	ldrh	r3, [r3, #26]
 80141da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f9 fc9c 	bl	800db28 <lwip_htonl>
 80141f0:	4604      	mov	r4, r0
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	891b      	ldrh	r3, [r3, #8]
 80141f6:	461d      	mov	r5, r3
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	899b      	ldrh	r3, [r3, #12]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4618      	mov	r0, r3
 8014202:	f7f9 fc7b 	bl	800dafc <lwip_htons>
 8014206:	4603      	mov	r3, r0
 8014208:	b2db      	uxtb	r3, r3
 801420a:	f003 0303 	and.w	r3, r3, #3
 801420e:	2b00      	cmp	r3, #0
 8014210:	d001      	beq.n	8014216 <tcp_rexmit_rto_prepare+0xba>
 8014212:	2301      	movs	r3, #1
 8014214:	e000      	b.n	8014218 <tcp_rexmit_rto_prepare+0xbc>
 8014216:	2300      	movs	r3, #0
 8014218:	442b      	add	r3, r5
 801421a:	18e2      	adds	r2, r4, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bdb0      	pop	{r4, r5, r7, pc}
 8014230:	0801bdfc 	.word	0x0801bdfc
 8014234:	0801c438 	.word	0x0801c438
 8014238:	0801be50 	.word	0x0801be50

0801423c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <tcp_rexmit_rto_commit+0x1c>
 801424a:	4b0d      	ldr	r3, [pc, #52]	@ (8014280 <tcp_rexmit_rto_commit+0x44>)
 801424c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014250:	490c      	ldr	r1, [pc, #48]	@ (8014284 <tcp_rexmit_rto_commit+0x48>)
 8014252:	480d      	ldr	r0, [pc, #52]	@ (8014288 <tcp_rexmit_rto_commit+0x4c>)
 8014254:	f004 f98c 	bl	8018570 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801425e:	2bff      	cmp	r3, #255	@ 0xff
 8014260:	d007      	beq.n	8014272 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014268:	3301      	adds	r3, #1
 801426a:	b2da      	uxtb	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7ff fc7e 	bl	8013b74 <tcp_output>
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	0801bdfc 	.word	0x0801bdfc
 8014284:	0801c45c 	.word	0x0801c45c
 8014288:	0801be50 	.word	0x0801be50

0801428c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d106      	bne.n	80142a8 <tcp_rexmit_rto+0x1c>
 801429a:	4b0a      	ldr	r3, [pc, #40]	@ (80142c4 <tcp_rexmit_rto+0x38>)
 801429c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80142a0:	4909      	ldr	r1, [pc, #36]	@ (80142c8 <tcp_rexmit_rto+0x3c>)
 80142a2:	480a      	ldr	r0, [pc, #40]	@ (80142cc <tcp_rexmit_rto+0x40>)
 80142a4:	f004 f964 	bl	8018570 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff ff57 	bl	801415c <tcp_rexmit_rto_prepare>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7ff ffc1 	bl	801423c <tcp_rexmit_rto_commit>
  }
}
 80142ba:	bf00      	nop
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	0801bdfc 	.word	0x0801bdfc
 80142c8:	0801c480 	.word	0x0801c480
 80142cc:	0801be50 	.word	0x0801be50

080142d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80142d0:	b590      	push	{r4, r7, lr}
 80142d2:	b085      	sub	sp, #20
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <tcp_rexmit+0x1c>
 80142de:	4b2f      	ldr	r3, [pc, #188]	@ (801439c <tcp_rexmit+0xcc>)
 80142e0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80142e4:	492e      	ldr	r1, [pc, #184]	@ (80143a0 <tcp_rexmit+0xd0>)
 80142e6:	482f      	ldr	r0, [pc, #188]	@ (80143a4 <tcp_rexmit+0xd4>)
 80142e8:	f004 f942 	bl	8018570 <iprintf>

  if (pcb->unacked == NULL) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d102      	bne.n	80142fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80142f4:	f06f 0305 	mvn.w	r3, #5
 80142f8:	e04c      	b.n	8014394 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014300:	68b8      	ldr	r0, [r7, #8]
 8014302:	f7ff fe2b 	bl	8013f5c <tcp_output_segment_busy>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801430c:	f06f 0305 	mvn.w	r3, #5
 8014310:	e040      	b.n	8014394 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	336c      	adds	r3, #108	@ 0x6c
 801431e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014320:	e002      	b.n	8014328 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d011      	beq.n	8014354 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	f7f9 fbf5 	bl	800db28 <lwip_htonl>
 801433e:	4604      	mov	r4, r0
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f7f9 fbee 	bl	800db28 <lwip_htonl>
 801434c:	4603      	mov	r3, r0
 801434e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014350:	2b00      	cmp	r3, #0
 8014352:	dbe6      	blt.n	8014322 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d103      	bne.n	8014372 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2200      	movs	r2, #0
 801436e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014378:	2bff      	cmp	r3, #255	@ 0xff
 801437a:	d007      	beq.n	801438c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014382:	3301      	adds	r3, #1
 8014384:	b2da      	uxtb	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014392:	2300      	movs	r3, #0
}
 8014394:	4618      	mov	r0, r3
 8014396:	3714      	adds	r7, #20
 8014398:	46bd      	mov	sp, r7
 801439a:	bd90      	pop	{r4, r7, pc}
 801439c:	0801bdfc 	.word	0x0801bdfc
 80143a0:	0801c49c 	.word	0x0801c49c
 80143a4:	0801be50 	.word	0x0801be50

080143a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_rexmit_fast+0x1c>
 80143b6:	4b2a      	ldr	r3, [pc, #168]	@ (8014460 <tcp_rexmit_fast+0xb8>)
 80143b8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80143bc:	4929      	ldr	r1, [pc, #164]	@ (8014464 <tcp_rexmit_fast+0xbc>)
 80143be:	482a      	ldr	r0, [pc, #168]	@ (8014468 <tcp_rexmit_fast+0xc0>)
 80143c0:	f004 f8d6 	bl	8018570 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d044      	beq.n	8014456 <tcp_rexmit_fast+0xae>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	8b5b      	ldrh	r3, [r3, #26]
 80143d0:	f003 0304 	and.w	r3, r3, #4
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d13e      	bne.n	8014456 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff ff79 	bl	80142d0 <tcp_rexmit>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d138      	bne.n	8014456 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80143f0:	4293      	cmp	r3, r2
 80143f2:	bf28      	it	cs
 80143f4:	4613      	movcs	r3, r2
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	0fda      	lsrs	r2, r3, #31
 80143fa:	4413      	add	r3, r2
 80143fc:	105b      	asrs	r3, r3, #1
 80143fe:	b29a      	uxth	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801440c:	461a      	mov	r2, r3
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	429a      	cmp	r2, r3
 8014416:	d206      	bcs.n	8014426 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	b29a      	uxth	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014430:	4619      	mov	r1, r3
 8014432:	0049      	lsls	r1, r1, #1
 8014434:	440b      	add	r3, r1
 8014436:	b29b      	uxth	r3, r3
 8014438:	4413      	add	r3, r2
 801443a:	b29a      	uxth	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	8b5b      	ldrh	r3, [r3, #26]
 8014446:	f043 0304 	orr.w	r3, r3, #4
 801444a:	b29a      	uxth	r2, r3
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014456:	bf00      	nop
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	0801bdfc 	.word	0x0801bdfc
 8014464:	0801c4b4 	.word	0x0801c4b4
 8014468:	0801be50 	.word	0x0801be50

0801446c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	607b      	str	r3, [r7, #4]
 8014476:	460b      	mov	r3, r1
 8014478:	817b      	strh	r3, [r7, #10]
 801447a:	4613      	mov	r3, r2
 801447c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801447e:	897a      	ldrh	r2, [r7, #10]
 8014480:	893b      	ldrh	r3, [r7, #8]
 8014482:	4413      	add	r3, r2
 8014484:	b29b      	uxth	r3, r3
 8014486:	3314      	adds	r3, #20
 8014488:	b29b      	uxth	r3, r3
 801448a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801448e:	4619      	mov	r1, r3
 8014490:	2022      	movs	r0, #34	@ 0x22
 8014492:	f7fa fc0f 	bl	800ecb4 <pbuf_alloc>
 8014496:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d04d      	beq.n	801453a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801449e:	897b      	ldrh	r3, [r7, #10]
 80144a0:	3313      	adds	r3, #19
 80144a2:	697a      	ldr	r2, [r7, #20]
 80144a4:	8952      	ldrh	r2, [r2, #10]
 80144a6:	4293      	cmp	r3, r2
 80144a8:	db06      	blt.n	80144b8 <tcp_output_alloc_header_common+0x4c>
 80144aa:	4b26      	ldr	r3, [pc, #152]	@ (8014544 <tcp_output_alloc_header_common+0xd8>)
 80144ac:	f240 7223 	movw	r2, #1827	@ 0x723
 80144b0:	4925      	ldr	r1, [pc, #148]	@ (8014548 <tcp_output_alloc_header_common+0xdc>)
 80144b2:	4826      	ldr	r0, [pc, #152]	@ (801454c <tcp_output_alloc_header_common+0xe0>)
 80144b4:	f004 f85c 	bl	8018570 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80144be:	8c3b      	ldrh	r3, [r7, #32]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f9 fb1b 	bl	800dafc <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	461a      	mov	r2, r3
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80144ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f9 fb13 	bl	800dafc <lwip_htons>
 80144d6:	4603      	mov	r3, r0
 80144d8:	461a      	mov	r2, r3
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f7f9 fb1f 	bl	800db28 <lwip_htonl>
 80144ea:	4602      	mov	r2, r0
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80144f0:	897b      	ldrh	r3, [r7, #10]
 80144f2:	089b      	lsrs	r3, r3, #2
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	3305      	adds	r3, #5
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	031b      	lsls	r3, r3, #12
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014502:	b29b      	uxth	r3, r3
 8014504:	4313      	orrs	r3, r2
 8014506:	b29b      	uxth	r3, r3
 8014508:	4618      	mov	r0, r3
 801450a:	f7f9 faf7 	bl	800dafc <lwip_htons>
 801450e:	4603      	mov	r3, r0
 8014510:	461a      	mov	r2, r3
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014516:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014518:	4618      	mov	r0, r3
 801451a:	f7f9 faef 	bl	800dafc <lwip_htons>
 801451e:	4603      	mov	r3, r0
 8014520:	461a      	mov	r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	2200      	movs	r2, #0
 801452a:	741a      	strb	r2, [r3, #16]
 801452c:	2200      	movs	r2, #0
 801452e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	2200      	movs	r2, #0
 8014534:	749a      	strb	r2, [r3, #18]
 8014536:	2200      	movs	r2, #0
 8014538:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801453a:	697b      	ldr	r3, [r7, #20]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	0801bdfc 	.word	0x0801bdfc
 8014548:	0801c4d4 	.word	0x0801c4d4
 801454c:	0801be50 	.word	0x0801be50

08014550 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014550:	b5b0      	push	{r4, r5, r7, lr}
 8014552:	b08a      	sub	sp, #40	@ 0x28
 8014554:	af04      	add	r7, sp, #16
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	607b      	str	r3, [r7, #4]
 801455a:	460b      	mov	r3, r1
 801455c:	817b      	strh	r3, [r7, #10]
 801455e:	4613      	mov	r3, r2
 8014560:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d106      	bne.n	8014576 <tcp_output_alloc_header+0x26>
 8014568:	4b15      	ldr	r3, [pc, #84]	@ (80145c0 <tcp_output_alloc_header+0x70>)
 801456a:	f240 7242 	movw	r2, #1858	@ 0x742
 801456e:	4915      	ldr	r1, [pc, #84]	@ (80145c4 <tcp_output_alloc_header+0x74>)
 8014570:	4815      	ldr	r0, [pc, #84]	@ (80145c8 <tcp_output_alloc_header+0x78>)
 8014572:	f003 fffd 	bl	8018570 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	8adb      	ldrh	r3, [r3, #22]
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	8b12      	ldrh	r2, [r2, #24]
 8014582:	68f9      	ldr	r1, [r7, #12]
 8014584:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014586:	893d      	ldrh	r5, [r7, #8]
 8014588:	897c      	ldrh	r4, [r7, #10]
 801458a:	9103      	str	r1, [sp, #12]
 801458c:	2110      	movs	r1, #16
 801458e:	9102      	str	r1, [sp, #8]
 8014590:	9201      	str	r2, [sp, #4]
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	462a      	mov	r2, r5
 8014598:	4621      	mov	r1, r4
 801459a:	f7ff ff67 	bl	801446c <tcp_output_alloc_header_common>
 801459e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d006      	beq.n	80145b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145aa:	68fa      	ldr	r2, [r7, #12]
 80145ac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80145ae:	441a      	add	r2, r3
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80145b4:	697b      	ldr	r3, [r7, #20]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3718      	adds	r7, #24
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bdb0      	pop	{r4, r5, r7, pc}
 80145be:	bf00      	nop
 80145c0:	0801bdfc 	.word	0x0801bdfc
 80145c4:	0801c504 	.word	0x0801c504
 80145c8:	0801be50 	.word	0x0801be50

080145cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4611      	mov	r1, r2
 80145d8:	461a      	mov	r2, r3
 80145da:	460b      	mov	r3, r1
 80145dc:	71fb      	strb	r3, [r7, #7]
 80145de:	4613      	mov	r3, r2
 80145e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d106      	bne.n	80145fa <tcp_output_fill_options+0x2e>
 80145ec:	4b12      	ldr	r3, [pc, #72]	@ (8014638 <tcp_output_fill_options+0x6c>)
 80145ee:	f240 7256 	movw	r2, #1878	@ 0x756
 80145f2:	4912      	ldr	r1, [pc, #72]	@ (801463c <tcp_output_fill_options+0x70>)
 80145f4:	4812      	ldr	r0, [pc, #72]	@ (8014640 <tcp_output_fill_options+0x74>)
 80145f6:	f003 ffbb 	bl	8018570 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	3314      	adds	r3, #20
 8014604:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014606:	8bfb      	ldrh	r3, [r7, #30]
 8014608:	009b      	lsls	r3, r3, #2
 801460a:	461a      	mov	r2, r3
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	f003 0304 	and.w	r3, r3, #4
 8014614:	4413      	add	r3, r2
 8014616:	3314      	adds	r3, #20
 8014618:	69ba      	ldr	r2, [r7, #24]
 801461a:	4413      	add	r3, r2
 801461c:	697a      	ldr	r2, [r7, #20]
 801461e:	429a      	cmp	r2, r3
 8014620:	d006      	beq.n	8014630 <tcp_output_fill_options+0x64>
 8014622:	4b05      	ldr	r3, [pc, #20]	@ (8014638 <tcp_output_fill_options+0x6c>)
 8014624:	f240 7275 	movw	r2, #1909	@ 0x775
 8014628:	4906      	ldr	r1, [pc, #24]	@ (8014644 <tcp_output_fill_options+0x78>)
 801462a:	4805      	ldr	r0, [pc, #20]	@ (8014640 <tcp_output_fill_options+0x74>)
 801462c:	f003 ffa0 	bl	8018570 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014630:	bf00      	nop
 8014632:	3720      	adds	r7, #32
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	0801bdfc 	.word	0x0801bdfc
 801463c:	0801c52c 	.word	0x0801c52c
 8014640:	0801be50 	.word	0x0801be50
 8014644:	0801c424 	.word	0x0801c424

08014648 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b08a      	sub	sp, #40	@ 0x28
 801464c:	af04      	add	r7, sp, #16
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d106      	bne.n	801466a <tcp_output_control_segment+0x22>
 801465c:	4b1c      	ldr	r3, [pc, #112]	@ (80146d0 <tcp_output_control_segment+0x88>)
 801465e:	f240 7287 	movw	r2, #1927	@ 0x787
 8014662:	491c      	ldr	r1, [pc, #112]	@ (80146d4 <tcp_output_control_segment+0x8c>)
 8014664:	481c      	ldr	r0, [pc, #112]	@ (80146d8 <tcp_output_control_segment+0x90>)
 8014666:	f003 ff83 	bl	8018570 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801466a:	683a      	ldr	r2, [r7, #0]
 801466c:	6879      	ldr	r1, [r7, #4]
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7fe ff42 	bl	80134f8 <tcp_route>
 8014674:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d102      	bne.n	8014682 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801467c:	23fc      	movs	r3, #252	@ 0xfc
 801467e:	75fb      	strb	r3, [r7, #23]
 8014680:	e01c      	b.n	80146bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d006      	beq.n	8014696 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	7adb      	ldrb	r3, [r3, #11]
 801468c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	7a9b      	ldrb	r3, [r3, #10]
 8014692:	757b      	strb	r3, [r7, #21]
 8014694:	e003      	b.n	801469e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014696:	23ff      	movs	r3, #255	@ 0xff
 8014698:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801469a:	2300      	movs	r3, #0
 801469c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801469e:	7dba      	ldrb	r2, [r7, #22]
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	9302      	str	r3, [sp, #8]
 80146a4:	2306      	movs	r3, #6
 80146a6:	9301      	str	r3, [sp, #4]
 80146a8:	7d7b      	ldrb	r3, [r7, #21]
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	4613      	mov	r3, r2
 80146ae:	683a      	ldr	r2, [r7, #0]
 80146b0:	6879      	ldr	r1, [r7, #4]
 80146b2:	68b8      	ldr	r0, [r7, #8]
 80146b4:	f001 ff6e 	bl	8016594 <ip4_output_if>
 80146b8:	4603      	mov	r3, r0
 80146ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80146bc:	68b8      	ldr	r0, [r7, #8]
 80146be:	f7fa fddd 	bl	800f27c <pbuf_free>
  return err;
 80146c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3718      	adds	r7, #24
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	0801bdfc 	.word	0x0801bdfc
 80146d4:	0801c554 	.word	0x0801c554
 80146d8:	0801be50 	.word	0x0801be50

080146dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80146dc:	b590      	push	{r4, r7, lr}
 80146de:	b08b      	sub	sp, #44	@ 0x2c
 80146e0:	af04      	add	r7, sp, #16
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]
 80146e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d106      	bne.n	80146fe <tcp_rst+0x22>
 80146f0:	4b1f      	ldr	r3, [pc, #124]	@ (8014770 <tcp_rst+0x94>)
 80146f2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80146f6:	491f      	ldr	r1, [pc, #124]	@ (8014774 <tcp_rst+0x98>)
 80146f8:	481f      	ldr	r0, [pc, #124]	@ (8014778 <tcp_rst+0x9c>)
 80146fa:	f003 ff39 	bl	8018570 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80146fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014700:	2b00      	cmp	r3, #0
 8014702:	d106      	bne.n	8014712 <tcp_rst+0x36>
 8014704:	4b1a      	ldr	r3, [pc, #104]	@ (8014770 <tcp_rst+0x94>)
 8014706:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801470a:	491c      	ldr	r1, [pc, #112]	@ (801477c <tcp_rst+0xa0>)
 801470c:	481a      	ldr	r0, [pc, #104]	@ (8014778 <tcp_rst+0x9c>)
 801470e:	f003 ff2f 	bl	8018570 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014712:	2300      	movs	r3, #0
 8014714:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014716:	f246 0308 	movw	r3, #24584	@ 0x6008
 801471a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801471c:	7dfb      	ldrb	r3, [r7, #23]
 801471e:	b29c      	uxth	r4, r3
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7f9 fa01 	bl	800db28 <lwip_htonl>
 8014726:	4602      	mov	r2, r0
 8014728:	8abb      	ldrh	r3, [r7, #20]
 801472a:	9303      	str	r3, [sp, #12]
 801472c:	2314      	movs	r3, #20
 801472e:	9302      	str	r3, [sp, #8]
 8014730:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014732:	9301      	str	r3, [sp, #4]
 8014734:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	4613      	mov	r3, r2
 801473a:	2200      	movs	r2, #0
 801473c:	4621      	mov	r1, r4
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7ff fe94 	bl	801446c <tcp_output_alloc_header_common>
 8014744:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00c      	beq.n	8014766 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801474c:	7dfb      	ldrb	r3, [r7, #23]
 801474e:	2200      	movs	r2, #0
 8014750:	6939      	ldr	r1, [r7, #16]
 8014752:	68f8      	ldr	r0, [r7, #12]
 8014754:	f7ff ff3a 	bl	80145cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	6939      	ldr	r1, [r7, #16]
 801475e:	68f8      	ldr	r0, [r7, #12]
 8014760:	f7ff ff72 	bl	8014648 <tcp_output_control_segment>
 8014764:	e000      	b.n	8014768 <tcp_rst+0x8c>
    return;
 8014766:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014768:	371c      	adds	r7, #28
 801476a:	46bd      	mov	sp, r7
 801476c:	bd90      	pop	{r4, r7, pc}
 801476e:	bf00      	nop
 8014770:	0801bdfc 	.word	0x0801bdfc
 8014774:	0801c580 	.word	0x0801c580
 8014778:	0801be50 	.word	0x0801be50
 801477c:	0801c59c 	.word	0x0801c59c

08014780 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014780:	b590      	push	{r4, r7, lr}
 8014782:	b087      	sub	sp, #28
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014788:	2300      	movs	r3, #0
 801478a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d106      	bne.n	80147a4 <tcp_send_empty_ack+0x24>
 8014796:	4b28      	ldr	r3, [pc, #160]	@ (8014838 <tcp_send_empty_ack+0xb8>)
 8014798:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801479c:	4927      	ldr	r1, [pc, #156]	@ (801483c <tcp_send_empty_ack+0xbc>)
 801479e:	4828      	ldr	r0, [pc, #160]	@ (8014840 <tcp_send_empty_ack+0xc0>)
 80147a0:	f003 fee6 	bl	8018570 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80147a4:	7dfb      	ldrb	r3, [r7, #23]
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	f003 0304 	and.w	r3, r3, #4
 80147ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80147b0:	7d7b      	ldrb	r3, [r7, #21]
 80147b2:	b29c      	uxth	r4, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f9 f9b5 	bl	800db28 <lwip_htonl>
 80147be:	4603      	mov	r3, r0
 80147c0:	2200      	movs	r2, #0
 80147c2:	4621      	mov	r1, r4
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7ff fec3 	bl	8014550 <tcp_output_alloc_header>
 80147ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d109      	bne.n	80147e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	8b5b      	ldrh	r3, [r3, #26]
 80147d6:	f043 0303 	orr.w	r3, r3, #3
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80147e0:	f06f 0301 	mvn.w	r3, #1
 80147e4:	e023      	b.n	801482e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80147e6:	7dbb      	ldrb	r3, [r7, #22]
 80147e8:	7dfa      	ldrb	r2, [r7, #23]
 80147ea:	6939      	ldr	r1, [r7, #16]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7ff feed 	bl	80145cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	3304      	adds	r3, #4
 80147f8:	6939      	ldr	r1, [r7, #16]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7ff ff24 	bl	8014648 <tcp_output_control_segment>
 8014800:	4603      	mov	r3, r0
 8014802:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d007      	beq.n	801481c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	8b5b      	ldrh	r3, [r3, #26]
 8014810:	f043 0303 	orr.w	r3, r3, #3
 8014814:	b29a      	uxth	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	835a      	strh	r2, [r3, #26]
 801481a:	e006      	b.n	801482a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	8b5b      	ldrh	r3, [r3, #26]
 8014820:	f023 0303 	bic.w	r3, r3, #3
 8014824:	b29a      	uxth	r2, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801482a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801482e:	4618      	mov	r0, r3
 8014830:	371c      	adds	r7, #28
 8014832:	46bd      	mov	sp, r7
 8014834:	bd90      	pop	{r4, r7, pc}
 8014836:	bf00      	nop
 8014838:	0801bdfc 	.word	0x0801bdfc
 801483c:	0801c5b8 	.word	0x0801c5b8
 8014840:	0801be50 	.word	0x0801be50

08014844 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014844:	b590      	push	{r4, r7, lr}
 8014846:	b087      	sub	sp, #28
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801484c:	2300      	movs	r3, #0
 801484e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d106      	bne.n	8014864 <tcp_keepalive+0x20>
 8014856:	4b18      	ldr	r3, [pc, #96]	@ (80148b8 <tcp_keepalive+0x74>)
 8014858:	f640 0224 	movw	r2, #2084	@ 0x824
 801485c:	4917      	ldr	r1, [pc, #92]	@ (80148bc <tcp_keepalive+0x78>)
 801485e:	4818      	ldr	r0, [pc, #96]	@ (80148c0 <tcp_keepalive+0x7c>)
 8014860:	f003 fe86 	bl	8018570 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014864:	7dfb      	ldrb	r3, [r7, #23]
 8014866:	b29c      	uxth	r4, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801486c:	3b01      	subs	r3, #1
 801486e:	4618      	mov	r0, r3
 8014870:	f7f9 f95a 	bl	800db28 <lwip_htonl>
 8014874:	4603      	mov	r3, r0
 8014876:	2200      	movs	r2, #0
 8014878:	4621      	mov	r1, r4
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff fe68 	bl	8014550 <tcp_output_alloc_header>
 8014880:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d102      	bne.n	801488e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014888:	f04f 33ff 	mov.w	r3, #4294967295
 801488c:	e010      	b.n	80148b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801488e:	7dfb      	ldrb	r3, [r7, #23]
 8014890:	2200      	movs	r2, #0
 8014892:	6939      	ldr	r1, [r7, #16]
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7ff fe99 	bl	80145cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	3304      	adds	r3, #4
 80148a0:	6939      	ldr	r1, [r7, #16]
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f7ff fed0 	bl	8014648 <tcp_output_control_segment>
 80148a8:	4603      	mov	r3, r0
 80148aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80148ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	371c      	adds	r7, #28
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd90      	pop	{r4, r7, pc}
 80148b8:	0801bdfc 	.word	0x0801bdfc
 80148bc:	0801c5d8 	.word	0x0801c5d8
 80148c0:	0801be50 	.word	0x0801be50

080148c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80148c4:	b590      	push	{r4, r7, lr}
 80148c6:	b08b      	sub	sp, #44	@ 0x2c
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80148cc:	2300      	movs	r3, #0
 80148ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d106      	bne.n	80148e6 <tcp_zero_window_probe+0x22>
 80148d8:	4b4c      	ldr	r3, [pc, #304]	@ (8014a0c <tcp_zero_window_probe+0x148>)
 80148da:	f640 024f 	movw	r2, #2127	@ 0x84f
 80148de:	494c      	ldr	r1, [pc, #304]	@ (8014a10 <tcp_zero_window_probe+0x14c>)
 80148e0:	484c      	ldr	r0, [pc, #304]	@ (8014a14 <tcp_zero_window_probe+0x150>)
 80148e2:	f003 fe45 	bl	8018570 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80148ec:	6a3b      	ldr	r3, [r7, #32]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d101      	bne.n	80148f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80148f2:	2300      	movs	r3, #0
 80148f4:	e086      	b.n	8014a04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80148fc:	2bff      	cmp	r3, #255	@ 0xff
 80148fe:	d007      	beq.n	8014910 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014906:	3301      	adds	r3, #1
 8014908:	b2da      	uxtb	r2, r3
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014910:	6a3b      	ldr	r3, [r7, #32]
 8014912:	68db      	ldr	r3, [r3, #12]
 8014914:	899b      	ldrh	r3, [r3, #12]
 8014916:	b29b      	uxth	r3, r3
 8014918:	4618      	mov	r0, r3
 801491a:	f7f9 f8ef 	bl	800dafc <lwip_htons>
 801491e:	4603      	mov	r3, r0
 8014920:	b2db      	uxtb	r3, r3
 8014922:	f003 0301 	and.w	r3, r3, #1
 8014926:	2b00      	cmp	r3, #0
 8014928:	d005      	beq.n	8014936 <tcp_zero_window_probe+0x72>
 801492a:	6a3b      	ldr	r3, [r7, #32]
 801492c:	891b      	ldrh	r3, [r3, #8]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <tcp_zero_window_probe+0x72>
 8014932:	2301      	movs	r3, #1
 8014934:	e000      	b.n	8014938 <tcp_zero_window_probe+0x74>
 8014936:	2300      	movs	r3, #0
 8014938:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801493a:	7ffb      	ldrb	r3, [r7, #31]
 801493c:	2b00      	cmp	r3, #0
 801493e:	bf0c      	ite	eq
 8014940:	2301      	moveq	r3, #1
 8014942:	2300      	movne	r3, #0
 8014944:	b2db      	uxtb	r3, r3
 8014946:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801494c:	b299      	uxth	r1, r3
 801494e:	6a3b      	ldr	r3, [r7, #32]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	8bba      	ldrh	r2, [r7, #28]
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f7ff fdfa 	bl	8014550 <tcp_output_alloc_header>
 801495c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d102      	bne.n	801496a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014964:	f04f 33ff 	mov.w	r3, #4294967295
 8014968:	e04c      	b.n	8014a04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014970:	7ffb      	ldrb	r3, [r7, #31]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d011      	beq.n	801499a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	899b      	ldrh	r3, [r3, #12]
 801497a:	b29b      	uxth	r3, r3
 801497c:	b21b      	sxth	r3, r3
 801497e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014982:	b21c      	sxth	r4, r3
 8014984:	2011      	movs	r0, #17
 8014986:	f7f9 f8b9 	bl	800dafc <lwip_htons>
 801498a:	4603      	mov	r3, r0
 801498c:	b21b      	sxth	r3, r3
 801498e:	4323      	orrs	r3, r4
 8014990:	b21b      	sxth	r3, r3
 8014992:	b29a      	uxth	r2, r3
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	819a      	strh	r2, [r3, #12]
 8014998:	e010      	b.n	80149bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	3314      	adds	r3, #20
 80149a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	6858      	ldr	r0, [r3, #4]
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	891a      	ldrh	r2, [r3, #8]
 80149ac:	6a3b      	ldr	r3, [r7, #32]
 80149ae:	891b      	ldrh	r3, [r3, #8]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	2201      	movs	r2, #1
 80149b6:	6939      	ldr	r1, [r7, #16]
 80149b8:	f7fa fe56 	bl	800f668 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80149bc:	6a3b      	ldr	r3, [r7, #32]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7f9 f8b0 	bl	800db28 <lwip_htonl>
 80149c8:	4603      	mov	r3, r0
 80149ca:	3301      	adds	r3, #1
 80149cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	1ad3      	subs	r3, r2, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	da02      	bge.n	80149e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	68fa      	ldr	r2, [r7, #12]
 80149de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149e4:	2200      	movs	r2, #0
 80149e6:	69b9      	ldr	r1, [r7, #24]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff fdef 	bl	80145cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	3304      	adds	r3, #4
 80149f4:	69b9      	ldr	r1, [r7, #24]
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f7ff fe26 	bl	8014648 <tcp_output_control_segment>
 80149fc:	4603      	mov	r3, r0
 80149fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	372c      	adds	r7, #44	@ 0x2c
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd90      	pop	{r4, r7, pc}
 8014a0c:	0801bdfc 	.word	0x0801bdfc
 8014a10:	0801c5f4 	.word	0x0801c5f4
 8014a14:	0801be50 	.word	0x0801be50

08014a18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014a20:	f7fa ff10 	bl	800f844 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014a24:	4b0a      	ldr	r3, [pc, #40]	@ (8014a50 <tcpip_tcp_timer+0x38>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d103      	bne.n	8014a34 <tcpip_tcp_timer+0x1c>
 8014a2c:	4b09      	ldr	r3, [pc, #36]	@ (8014a54 <tcpip_tcp_timer+0x3c>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d005      	beq.n	8014a40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a34:	2200      	movs	r2, #0
 8014a36:	4908      	ldr	r1, [pc, #32]	@ (8014a58 <tcpip_tcp_timer+0x40>)
 8014a38:	20fa      	movs	r0, #250	@ 0xfa
 8014a3a:	f000 f8f3 	bl	8014c24 <sys_timeout>
 8014a3e:	e003      	b.n	8014a48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014a40:	4b06      	ldr	r3, [pc, #24]	@ (8014a5c <tcpip_tcp_timer+0x44>)
 8014a42:	2200      	movs	r2, #0
 8014a44:	601a      	str	r2, [r3, #0]
  }
}
 8014a46:	bf00      	nop
 8014a48:	bf00      	nop
 8014a4a:	3708      	adds	r7, #8
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	2000c6b4 	.word	0x2000c6b4
 8014a54:	2000c6b8 	.word	0x2000c6b8
 8014a58:	08014a19 	.word	0x08014a19
 8014a5c:	2000c700 	.word	0x2000c700

08014a60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014a64:	4b0a      	ldr	r3, [pc, #40]	@ (8014a90 <tcp_timer_needed+0x30>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d10f      	bne.n	8014a8c <tcp_timer_needed+0x2c>
 8014a6c:	4b09      	ldr	r3, [pc, #36]	@ (8014a94 <tcp_timer_needed+0x34>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d103      	bne.n	8014a7c <tcp_timer_needed+0x1c>
 8014a74:	4b08      	ldr	r3, [pc, #32]	@ (8014a98 <tcp_timer_needed+0x38>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d007      	beq.n	8014a8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014a7c:	4b04      	ldr	r3, [pc, #16]	@ (8014a90 <tcp_timer_needed+0x30>)
 8014a7e:	2201      	movs	r2, #1
 8014a80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a82:	2200      	movs	r2, #0
 8014a84:	4905      	ldr	r1, [pc, #20]	@ (8014a9c <tcp_timer_needed+0x3c>)
 8014a86:	20fa      	movs	r0, #250	@ 0xfa
 8014a88:	f000 f8cc 	bl	8014c24 <sys_timeout>
  }
}
 8014a8c:	bf00      	nop
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	2000c700 	.word	0x2000c700
 8014a94:	2000c6b4 	.word	0x2000c6b4
 8014a98:	2000c6b8 	.word	0x2000c6b8
 8014a9c:	08014a19 	.word	0x08014a19

08014aa0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b086      	sub	sp, #24
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014aac:	200a      	movs	r0, #10
 8014aae:	f7f9 fcfd 	bl	800e4ac <memp_malloc>
 8014ab2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d109      	bne.n	8014ace <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d151      	bne.n	8014b64 <sys_timeout_abs+0xc4>
 8014ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8014b6c <sys_timeout_abs+0xcc>)
 8014ac2:	22be      	movs	r2, #190	@ 0xbe
 8014ac4:	492a      	ldr	r1, [pc, #168]	@ (8014b70 <sys_timeout_abs+0xd0>)
 8014ac6:	482b      	ldr	r0, [pc, #172]	@ (8014b74 <sys_timeout_abs+0xd4>)
 8014ac8:	f003 fd52 	bl	8018570 <iprintf>
    return;
 8014acc:	e04a      	b.n	8014b64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	687a      	ldr	r2, [r7, #4]
 8014ade:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	68fa      	ldr	r2, [r7, #12]
 8014ae4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014ae6:	4b24      	ldr	r3, [pc, #144]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d103      	bne.n	8014af6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014aee:	4a22      	ldr	r2, [pc, #136]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	6013      	str	r3, [r2, #0]
    return;
 8014af4:	e037      	b.n	8014b66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	685a      	ldr	r2, [r3, #4]
 8014afa:	4b1f      	ldr	r3, [pc, #124]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	0fdb      	lsrs	r3, r3, #31
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d007      	beq.n	8014b1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014b16:	4a18      	ldr	r2, [pc, #96]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	6013      	str	r3, [r2, #0]
 8014b1c:	e023      	b.n	8014b66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014b1e:	4b16      	ldr	r3, [pc, #88]	@ (8014b78 <sys_timeout_abs+0xd8>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	e01a      	b.n	8014b5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00b      	beq.n	8014b46 <sys_timeout_abs+0xa6>
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	685a      	ldr	r2, [r3, #4]
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	0fdb      	lsrs	r3, r3, #31
 8014b3c:	f003 0301 	and.w	r3, r3, #1
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d007      	beq.n	8014b56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	693a      	ldr	r2, [r7, #16]
 8014b52:	601a      	str	r2, [r3, #0]
        break;
 8014b54:	e007      	b.n	8014b66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	617b      	str	r3, [r7, #20]
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d1e1      	bne.n	8014b26 <sys_timeout_abs+0x86>
 8014b62:	e000      	b.n	8014b66 <sys_timeout_abs+0xc6>
    return;
 8014b64:	bf00      	nop
      }
    }
  }
}
 8014b66:	3718      	adds	r7, #24
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	0801c618 	.word	0x0801c618
 8014b70:	0801c64c 	.word	0x0801c64c
 8014b74:	0801c68c 	.word	0x0801c68c
 8014b78:	2000c6f8 	.word	0x2000c6f8

08014b7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b086      	sub	sp, #24
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	4798      	blx	r3

  now = sys_now();
 8014b8e:	f7f3 fb81 	bl	8008294 <sys_now>
 8014b92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	681a      	ldr	r2, [r3, #0]
 8014b98:	4b0f      	ldr	r3, [pc, #60]	@ (8014bd8 <lwip_cyclic_timer+0x5c>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	1ad3      	subs	r3, r2, r3
 8014ba6:	0fdb      	lsrs	r3, r3, #31
 8014ba8:	f003 0301 	and.w	r3, r3, #1
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d009      	beq.n	8014bc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	4413      	add	r3, r2
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	4907      	ldr	r1, [pc, #28]	@ (8014bdc <lwip_cyclic_timer+0x60>)
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7ff ff6e 	bl	8014aa0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014bc4:	e004      	b.n	8014bd0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014bc6:	687a      	ldr	r2, [r7, #4]
 8014bc8:	4904      	ldr	r1, [pc, #16]	@ (8014bdc <lwip_cyclic_timer+0x60>)
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f7ff ff68 	bl	8014aa0 <sys_timeout_abs>
}
 8014bd0:	bf00      	nop
 8014bd2:	3718      	adds	r7, #24
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	2000c6fc 	.word	0x2000c6fc
 8014bdc:	08014b7d 	.word	0x08014b7d

08014be0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014be6:	2301      	movs	r3, #1
 8014be8:	607b      	str	r3, [r7, #4]
 8014bea:	e00e      	b.n	8014c0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014bec:	4a0b      	ldr	r2, [pc, #44]	@ (8014c1c <sys_timeouts_init+0x3c>)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	00db      	lsls	r3, r3, #3
 8014bf8:	4a08      	ldr	r2, [pc, #32]	@ (8014c1c <sys_timeouts_init+0x3c>)
 8014bfa:	4413      	add	r3, r2
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	4908      	ldr	r1, [pc, #32]	@ (8014c20 <sys_timeouts_init+0x40>)
 8014c00:	f000 f810 	bl	8014c24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	3301      	adds	r3, #1
 8014c08:	607b      	str	r3, [r7, #4]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b02      	cmp	r3, #2
 8014c0e:	d9ed      	bls.n	8014bec <sys_timeouts_init+0xc>
  }
}
 8014c10:	bf00      	nop
 8014c12:	bf00      	nop
 8014c14:	3708      	adds	r7, #8
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	0801d28c 	.word	0x0801d28c
 8014c20:	08014b7d 	.word	0x08014b7d

08014c24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b086      	sub	sp, #24
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014c36:	d306      	bcc.n	8014c46 <sys_timeout+0x22>
 8014c38:	4b0a      	ldr	r3, [pc, #40]	@ (8014c64 <sys_timeout+0x40>)
 8014c3a:	f240 1229 	movw	r2, #297	@ 0x129
 8014c3e:	490a      	ldr	r1, [pc, #40]	@ (8014c68 <sys_timeout+0x44>)
 8014c40:	480a      	ldr	r0, [pc, #40]	@ (8014c6c <sys_timeout+0x48>)
 8014c42:	f003 fc95 	bl	8018570 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014c46:	f7f3 fb25 	bl	8008294 <sys_now>
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	4413      	add	r3, r2
 8014c50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	68b9      	ldr	r1, [r7, #8]
 8014c56:	6978      	ldr	r0, [r7, #20]
 8014c58:	f7ff ff22 	bl	8014aa0 <sys_timeout_abs>
#endif
}
 8014c5c:	bf00      	nop
 8014c5e:	3718      	adds	r7, #24
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	0801c618 	.word	0x0801c618
 8014c68:	0801c6b4 	.word	0x0801c6b4
 8014c6c:	0801c68c 	.word	0x0801c68c

08014c70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014c76:	f7f3 fb0d 	bl	8008294 <sys_now>
 8014c7a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014c7c:	4b17      	ldr	r3, [pc, #92]	@ (8014cdc <sys_check_timeouts+0x6c>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d022      	beq.n	8014cce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	68fa      	ldr	r2, [r7, #12]
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	0fdb      	lsrs	r3, r3, #31
 8014c92:	f003 0301 	and.w	r3, r3, #1
 8014c96:	b2db      	uxtb	r3, r3
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d11a      	bne.n	8014cd2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8014cdc <sys_check_timeouts+0x6c>)
 8014ca2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	689b      	ldr	r3, [r3, #8]
 8014ca8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8014ce0 <sys_check_timeouts+0x70>)
 8014cb6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014cb8:	68b9      	ldr	r1, [r7, #8]
 8014cba:	200a      	movs	r0, #10
 8014cbc:	f7f9 fc6c 	bl	800e598 <memp_free>
    if (handler != NULL) {
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d0da      	beq.n	8014c7c <sys_check_timeouts+0xc>
      handler(arg);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6838      	ldr	r0, [r7, #0]
 8014cca:	4798      	blx	r3
  do {
 8014ccc:	e7d6      	b.n	8014c7c <sys_check_timeouts+0xc>
      return;
 8014cce:	bf00      	nop
 8014cd0:	e000      	b.n	8014cd4 <sys_check_timeouts+0x64>
      return;
 8014cd2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	2000c6f8 	.word	0x2000c6f8
 8014ce0:	2000c6fc 	.word	0x2000c6fc

08014ce4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014cea:	4b16      	ldr	r3, [pc, #88]	@ (8014d44 <sys_timeouts_sleeptime+0x60>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d102      	bne.n	8014cf8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf6:	e020      	b.n	8014d3a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014cf8:	f7f3 facc 	bl	8008294 <sys_now>
 8014cfc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014cfe:	4b11      	ldr	r3, [pc, #68]	@ (8014d44 <sys_timeouts_sleeptime+0x60>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	685a      	ldr	r2, [r3, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	0fdb      	lsrs	r3, r3, #31
 8014d0a:	f003 0301 	and.w	r3, r3, #1
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d001      	beq.n	8014d18 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014d14:	2300      	movs	r3, #0
 8014d16:	e010      	b.n	8014d3a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014d18:	4b0a      	ldr	r3, [pc, #40]	@ (8014d44 <sys_timeouts_sleeptime+0x60>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	685a      	ldr	r2, [r3, #4]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	da06      	bge.n	8014d38 <sys_timeouts_sleeptime+0x54>
 8014d2a:	4b07      	ldr	r3, [pc, #28]	@ (8014d48 <sys_timeouts_sleeptime+0x64>)
 8014d2c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014d30:	4906      	ldr	r1, [pc, #24]	@ (8014d4c <sys_timeouts_sleeptime+0x68>)
 8014d32:	4807      	ldr	r0, [pc, #28]	@ (8014d50 <sys_timeouts_sleeptime+0x6c>)
 8014d34:	f003 fc1c 	bl	8018570 <iprintf>
    return ret;
 8014d38:	683b      	ldr	r3, [r7, #0]
  }
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	2000c6f8 	.word	0x2000c6f8
 8014d48:	0801c618 	.word	0x0801c618
 8014d4c:	0801c6ec 	.word	0x0801c6ec
 8014d50:	0801c68c 	.word	0x0801c68c

08014d54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014d58:	f003 fb0a 	bl	8018370 <rand>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	4b01      	ldr	r3, [pc, #4]	@ (8014d74 <udp_init+0x20>)
 8014d6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014d70:	bf00      	nop
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	200000a4 	.word	0x200000a4

08014d78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	60f8      	str	r0, [r7, #12]
 8014d80:	60b9      	str	r1, [r7, #8]
 8014d82:	4613      	mov	r3, r2
 8014d84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d105      	bne.n	8014d98 <udp_input_local_match+0x20>
 8014d8c:	4b27      	ldr	r3, [pc, #156]	@ (8014e2c <udp_input_local_match+0xb4>)
 8014d8e:	2287      	movs	r2, #135	@ 0x87
 8014d90:	4927      	ldr	r1, [pc, #156]	@ (8014e30 <udp_input_local_match+0xb8>)
 8014d92:	4828      	ldr	r0, [pc, #160]	@ (8014e34 <udp_input_local_match+0xbc>)
 8014d94:	f003 fbec 	bl	8018570 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d105      	bne.n	8014daa <udp_input_local_match+0x32>
 8014d9e:	4b23      	ldr	r3, [pc, #140]	@ (8014e2c <udp_input_local_match+0xb4>)
 8014da0:	2288      	movs	r2, #136	@ 0x88
 8014da2:	4925      	ldr	r1, [pc, #148]	@ (8014e38 <udp_input_local_match+0xc0>)
 8014da4:	4823      	ldr	r0, [pc, #140]	@ (8014e34 <udp_input_local_match+0xbc>)
 8014da6:	f003 fbe3 	bl	8018570 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	7a1b      	ldrb	r3, [r3, #8]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d00b      	beq.n	8014dca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	7a1a      	ldrb	r2, [r3, #8]
 8014db6:	4b21      	ldr	r3, [pc, #132]	@ (8014e3c <udp_input_local_match+0xc4>)
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d001      	beq.n	8014dca <udp_input_local_match+0x52>
    return 0;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	e02b      	b.n	8014e22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014dca:	79fb      	ldrb	r3, [r7, #7]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d018      	beq.n	8014e02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d013      	beq.n	8014dfe <udp_input_local_match+0x86>
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00f      	beq.n	8014dfe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014dde:	4b17      	ldr	r3, [pc, #92]	@ (8014e3c <udp_input_local_match+0xc4>)
 8014de0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de6:	d00a      	beq.n	8014dfe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	4b13      	ldr	r3, [pc, #76]	@ (8014e3c <udp_input_local_match+0xc4>)
 8014dee:	695b      	ldr	r3, [r3, #20]
 8014df0:	405a      	eors	r2, r3
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	3308      	adds	r3, #8
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d110      	bne.n	8014e20 <udp_input_local_match+0xa8>
          return 1;
 8014dfe:	2301      	movs	r3, #1
 8014e00:	e00f      	b.n	8014e22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d009      	beq.n	8014e1c <udp_input_local_match+0xa4>
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d005      	beq.n	8014e1c <udp_input_local_match+0xa4>
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681a      	ldr	r2, [r3, #0]
 8014e14:	4b09      	ldr	r3, [pc, #36]	@ (8014e3c <udp_input_local_match+0xc4>)
 8014e16:	695b      	ldr	r3, [r3, #20]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d101      	bne.n	8014e20 <udp_input_local_match+0xa8>
        return 1;
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	e000      	b.n	8014e22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3710      	adds	r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	0801c700 	.word	0x0801c700
 8014e30:	0801c730 	.word	0x0801c730
 8014e34:	0801c754 	.word	0x0801c754
 8014e38:	0801c77c 	.word	0x0801c77c
 8014e3c:	20008f54 	.word	0x20008f54

08014e40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014e40:	b590      	push	{r4, r7, lr}
 8014e42:	b08d      	sub	sp, #52	@ 0x34
 8014e44:	af02      	add	r7, sp, #8
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d105      	bne.n	8014e60 <udp_input+0x20>
 8014e54:	4b7c      	ldr	r3, [pc, #496]	@ (8015048 <udp_input+0x208>)
 8014e56:	22cf      	movs	r2, #207	@ 0xcf
 8014e58:	497c      	ldr	r1, [pc, #496]	@ (801504c <udp_input+0x20c>)
 8014e5a:	487d      	ldr	r0, [pc, #500]	@ (8015050 <udp_input+0x210>)
 8014e5c:	f003 fb88 	bl	8018570 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d105      	bne.n	8014e72 <udp_input+0x32>
 8014e66:	4b78      	ldr	r3, [pc, #480]	@ (8015048 <udp_input+0x208>)
 8014e68:	22d0      	movs	r2, #208	@ 0xd0
 8014e6a:	497a      	ldr	r1, [pc, #488]	@ (8015054 <udp_input+0x214>)
 8014e6c:	4878      	ldr	r0, [pc, #480]	@ (8015050 <udp_input+0x210>)
 8014e6e:	f003 fb7f 	bl	8018570 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	895b      	ldrh	r3, [r3, #10]
 8014e76:	2b07      	cmp	r3, #7
 8014e78:	d803      	bhi.n	8014e82 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7fa f9fe 	bl	800f27c <pbuf_free>
    goto end;
 8014e80:	e0de      	b.n	8015040 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014e88:	4b73      	ldr	r3, [pc, #460]	@ (8015058 <udp_input+0x218>)
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	4a72      	ldr	r2, [pc, #456]	@ (8015058 <udp_input+0x218>)
 8014e8e:	6812      	ldr	r2, [r2, #0]
 8014e90:	4611      	mov	r1, r2
 8014e92:	4618      	mov	r0, r3
 8014e94:	f001 fc56 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	881b      	ldrh	r3, [r3, #0]
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7f8 fe2a 	bl	800dafc <lwip_htons>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	885b      	ldrh	r3, [r3, #2]
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7f8 fe22 	bl	800dafc <lwip_htons>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ec8:	4b64      	ldr	r3, [pc, #400]	@ (801505c <udp_input+0x21c>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ece:	e054      	b.n	8014f7a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed2:	8a5b      	ldrh	r3, [r3, #18]
 8014ed4:	89fa      	ldrh	r2, [r7, #14]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d14a      	bne.n	8014f70 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014eda:	7cfb      	ldrb	r3, [r7, #19]
 8014edc:	461a      	mov	r2, r3
 8014ede:	6839      	ldr	r1, [r7, #0]
 8014ee0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ee2:	f7ff ff49 	bl	8014d78 <udp_input_local_match>
 8014ee6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d041      	beq.n	8014f70 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eee:	7c1b      	ldrb	r3, [r3, #16]
 8014ef0:	f003 0304 	and.w	r3, r3, #4
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d11d      	bne.n	8014f34 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014ef8:	69fb      	ldr	r3, [r7, #28]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d102      	bne.n	8014f04 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f00:	61fb      	str	r3, [r7, #28]
 8014f02:	e017      	b.n	8014f34 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014f04:	7cfb      	ldrb	r3, [r7, #19]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d014      	beq.n	8014f34 <udp_input+0xf4>
 8014f0a:	4b53      	ldr	r3, [pc, #332]	@ (8015058 <udp_input+0x218>)
 8014f0c:	695b      	ldr	r3, [r3, #20]
 8014f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f12:	d10f      	bne.n	8014f34 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	3304      	adds	r3, #4
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d008      	beq.n	8014f34 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f24:	681a      	ldr	r2, [r3, #0]
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	3304      	adds	r3, #4
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d101      	bne.n	8014f34 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f32:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f36:	8a9b      	ldrh	r3, [r3, #20]
 8014f38:	8a3a      	ldrh	r2, [r7, #16]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d118      	bne.n	8014f70 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f40:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d005      	beq.n	8014f52 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f48:	685a      	ldr	r2, [r3, #4]
 8014f4a:	4b43      	ldr	r3, [pc, #268]	@ (8015058 <udp_input+0x218>)
 8014f4c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d10e      	bne.n	8014f70 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014f52:	6a3b      	ldr	r3, [r7, #32]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d014      	beq.n	8014f82 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f5a:	68da      	ldr	r2, [r3, #12]
 8014f5c:	6a3b      	ldr	r3, [r7, #32]
 8014f5e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014f60:	4b3e      	ldr	r3, [pc, #248]	@ (801505c <udp_input+0x21c>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f66:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014f68:	4a3c      	ldr	r2, [pc, #240]	@ (801505c <udp_input+0x21c>)
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f6c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014f6e:	e008      	b.n	8014f82 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f72:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1a7      	bne.n	8014ed0 <udp_input+0x90>
 8014f80:	e000      	b.n	8014f84 <udp_input+0x144>
        break;
 8014f82:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d101      	bne.n	8014f8e <udp_input+0x14e>
    pcb = uncon_pcb;
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d002      	beq.n	8014f9a <udp_input+0x15a>
    for_us = 1;
 8014f94:	2301      	movs	r3, #1
 8014f96:	76fb      	strb	r3, [r7, #27]
 8014f98:	e00a      	b.n	8014fb0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8015058 <udp_input+0x218>)
 8014fa2:	695b      	ldr	r3, [r3, #20]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	bf0c      	ite	eq
 8014fa8:	2301      	moveq	r3, #1
 8014faa:	2300      	movne	r3, #0
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014fb0:	7efb      	ldrb	r3, [r7, #27]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d041      	beq.n	801503a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014fb6:	2108      	movs	r1, #8
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f7fa f8d9 	bl	800f170 <pbuf_remove_header>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00a      	beq.n	8014fda <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014fc4:	4b20      	ldr	r3, [pc, #128]	@ (8015048 <udp_input+0x208>)
 8014fc6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014fca:	4925      	ldr	r1, [pc, #148]	@ (8015060 <udp_input+0x220>)
 8014fcc:	4820      	ldr	r0, [pc, #128]	@ (8015050 <udp_input+0x210>)
 8014fce:	f003 facf 	bl	8018570 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f7fa f952 	bl	800f27c <pbuf_free>
      goto end;
 8014fd8:	e032      	b.n	8015040 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d012      	beq.n	8015006 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe2:	699b      	ldr	r3, [r3, #24]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d00a      	beq.n	8014ffe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fea:	699c      	ldr	r4, [r3, #24]
 8014fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fee:	69d8      	ldr	r0, [r3, #28]
 8014ff0:	8a3b      	ldrh	r3, [r7, #16]
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8015064 <udp_input+0x224>)
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014ffa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014ffc:	e021      	b.n	8015042 <udp_input+0x202>
        pbuf_free(p);
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f7fa f93c 	bl	800f27c <pbuf_free>
        goto end;
 8015004:	e01c      	b.n	8015040 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015006:	7cfb      	ldrb	r3, [r7, #19]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d112      	bne.n	8015032 <udp_input+0x1f2>
 801500c:	4b12      	ldr	r3, [pc, #72]	@ (8015058 <udp_input+0x218>)
 801500e:	695b      	ldr	r3, [r3, #20]
 8015010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015014:	2be0      	cmp	r3, #224	@ 0xe0
 8015016:	d00c      	beq.n	8015032 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015018:	4b0f      	ldr	r3, [pc, #60]	@ (8015058 <udp_input+0x218>)
 801501a:	899b      	ldrh	r3, [r3, #12]
 801501c:	3308      	adds	r3, #8
 801501e:	b29b      	uxth	r3, r3
 8015020:	b21b      	sxth	r3, r3
 8015022:	4619      	mov	r1, r3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7fa f916 	bl	800f256 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801502a:	2103      	movs	r1, #3
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f001 f869 	bl	8016104 <icmp_dest_unreach>
      pbuf_free(p);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7fa f922 	bl	800f27c <pbuf_free>
  return;
 8015038:	e003      	b.n	8015042 <udp_input+0x202>
    pbuf_free(p);
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7fa f91e 	bl	800f27c <pbuf_free>
  return;
 8015040:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015042:	372c      	adds	r7, #44	@ 0x2c
 8015044:	46bd      	mov	sp, r7
 8015046:	bd90      	pop	{r4, r7, pc}
 8015048:	0801c700 	.word	0x0801c700
 801504c:	0801c7a4 	.word	0x0801c7a4
 8015050:	0801c754 	.word	0x0801c754
 8015054:	0801c7bc 	.word	0x0801c7bc
 8015058:	20008f54 	.word	0x20008f54
 801505c:	2000c704 	.word	0x2000c704
 8015060:	0801c7d8 	.word	0x0801c7d8
 8015064:	20008f64 	.word	0x20008f64

08015068 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015068:	b480      	push	{r7}
 801506a:	b085      	sub	sp, #20
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d01e      	beq.n	80150b6 <udp_netif_ip_addr_changed+0x4e>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d01a      	beq.n	80150b6 <udp_netif_ip_addr_changed+0x4e>
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d017      	beq.n	80150b6 <udp_netif_ip_addr_changed+0x4e>
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d013      	beq.n	80150b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801508e:	4b0d      	ldr	r3, [pc, #52]	@ (80150c4 <udp_netif_ip_addr_changed+0x5c>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	60fb      	str	r3, [r7, #12]
 8015094:	e00c      	b.n	80150b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681a      	ldr	r2, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d103      	bne.n	80150aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	68db      	ldr	r3, [r3, #12]
 80150ae:	60fb      	str	r3, [r7, #12]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d1ef      	bne.n	8015096 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80150b6:	bf00      	nop
 80150b8:	3714      	adds	r7, #20
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr
 80150c2:	bf00      	nop
 80150c4:	2000c704 	.word	0x2000c704

080150c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80150d0:	4915      	ldr	r1, [pc, #84]	@ (8015128 <etharp_free_entry+0x60>)
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	4613      	mov	r3, r2
 80150d6:	005b      	lsls	r3, r3, #1
 80150d8:	4413      	add	r3, r2
 80150da:	00db      	lsls	r3, r3, #3
 80150dc:	440b      	add	r3, r1
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d013      	beq.n	801510c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80150e4:	4910      	ldr	r1, [pc, #64]	@ (8015128 <etharp_free_entry+0x60>)
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	440b      	add	r3, r1
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fa f8c1 	bl	800f27c <pbuf_free>
    arp_table[i].q = NULL;
 80150fa:	490b      	ldr	r1, [pc, #44]	@ (8015128 <etharp_free_entry+0x60>)
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	4613      	mov	r3, r2
 8015100:	005b      	lsls	r3, r3, #1
 8015102:	4413      	add	r3, r2
 8015104:	00db      	lsls	r3, r3, #3
 8015106:	440b      	add	r3, r1
 8015108:	2200      	movs	r2, #0
 801510a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801510c:	4906      	ldr	r1, [pc, #24]	@ (8015128 <etharp_free_entry+0x60>)
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	4613      	mov	r3, r2
 8015112:	005b      	lsls	r3, r3, #1
 8015114:	4413      	add	r3, r2
 8015116:	00db      	lsls	r3, r3, #3
 8015118:	440b      	add	r3, r1
 801511a:	3314      	adds	r3, #20
 801511c:	2200      	movs	r2, #0
 801511e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015120:	bf00      	nop
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	2000c708 	.word	0x2000c708

0801512c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015132:	2300      	movs	r3, #0
 8015134:	607b      	str	r3, [r7, #4]
 8015136:	e096      	b.n	8015266 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015138:	494f      	ldr	r1, [pc, #316]	@ (8015278 <etharp_tmr+0x14c>)
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	4613      	mov	r3, r2
 801513e:	005b      	lsls	r3, r3, #1
 8015140:	4413      	add	r3, r2
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	440b      	add	r3, r1
 8015146:	3314      	adds	r3, #20
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801514c:	78fb      	ldrb	r3, [r7, #3]
 801514e:	2b00      	cmp	r3, #0
 8015150:	f000 8086 	beq.w	8015260 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015154:	4948      	ldr	r1, [pc, #288]	@ (8015278 <etharp_tmr+0x14c>)
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	4613      	mov	r3, r2
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	3312      	adds	r3, #18
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	3301      	adds	r3, #1
 8015168:	b298      	uxth	r0, r3
 801516a:	4943      	ldr	r1, [pc, #268]	@ (8015278 <etharp_tmr+0x14c>)
 801516c:	687a      	ldr	r2, [r7, #4]
 801516e:	4613      	mov	r3, r2
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	4413      	add	r3, r2
 8015174:	00db      	lsls	r3, r3, #3
 8015176:	440b      	add	r3, r1
 8015178:	3312      	adds	r3, #18
 801517a:	4602      	mov	r2, r0
 801517c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801517e:	493e      	ldr	r1, [pc, #248]	@ (8015278 <etharp_tmr+0x14c>)
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	4613      	mov	r3, r2
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	4413      	add	r3, r2
 8015188:	00db      	lsls	r3, r3, #3
 801518a:	440b      	add	r3, r1
 801518c:	3312      	adds	r3, #18
 801518e:	881b      	ldrh	r3, [r3, #0]
 8015190:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015194:	d215      	bcs.n	80151c2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015196:	4938      	ldr	r1, [pc, #224]	@ (8015278 <etharp_tmr+0x14c>)
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	4613      	mov	r3, r2
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4413      	add	r3, r2
 80151a0:	00db      	lsls	r3, r3, #3
 80151a2:	440b      	add	r3, r1
 80151a4:	3314      	adds	r3, #20
 80151a6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d10e      	bne.n	80151ca <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80151ac:	4932      	ldr	r1, [pc, #200]	@ (8015278 <etharp_tmr+0x14c>)
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3312      	adds	r3, #18
 80151bc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80151be:	2b04      	cmp	r3, #4
 80151c0:	d903      	bls.n	80151ca <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f7ff ff80 	bl	80150c8 <etharp_free_entry>
 80151c8:	e04a      	b.n	8015260 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80151ca:	492b      	ldr	r1, [pc, #172]	@ (8015278 <etharp_tmr+0x14c>)
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	4613      	mov	r3, r2
 80151d0:	005b      	lsls	r3, r3, #1
 80151d2:	4413      	add	r3, r2
 80151d4:	00db      	lsls	r3, r3, #3
 80151d6:	440b      	add	r3, r1
 80151d8:	3314      	adds	r3, #20
 80151da:	781b      	ldrb	r3, [r3, #0]
 80151dc:	2b03      	cmp	r3, #3
 80151de:	d10a      	bne.n	80151f6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80151e0:	4925      	ldr	r1, [pc, #148]	@ (8015278 <etharp_tmr+0x14c>)
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	4613      	mov	r3, r2
 80151e6:	005b      	lsls	r3, r3, #1
 80151e8:	4413      	add	r3, r2
 80151ea:	00db      	lsls	r3, r3, #3
 80151ec:	440b      	add	r3, r1
 80151ee:	3314      	adds	r3, #20
 80151f0:	2204      	movs	r2, #4
 80151f2:	701a      	strb	r2, [r3, #0]
 80151f4:	e034      	b.n	8015260 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80151f6:	4920      	ldr	r1, [pc, #128]	@ (8015278 <etharp_tmr+0x14c>)
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	4613      	mov	r3, r2
 80151fc:	005b      	lsls	r3, r3, #1
 80151fe:	4413      	add	r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	440b      	add	r3, r1
 8015204:	3314      	adds	r3, #20
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	2b04      	cmp	r3, #4
 801520a:	d10a      	bne.n	8015222 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801520c:	491a      	ldr	r1, [pc, #104]	@ (8015278 <etharp_tmr+0x14c>)
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	4613      	mov	r3, r2
 8015212:	005b      	lsls	r3, r3, #1
 8015214:	4413      	add	r3, r2
 8015216:	00db      	lsls	r3, r3, #3
 8015218:	440b      	add	r3, r1
 801521a:	3314      	adds	r3, #20
 801521c:	2202      	movs	r2, #2
 801521e:	701a      	strb	r2, [r3, #0]
 8015220:	e01e      	b.n	8015260 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015222:	4915      	ldr	r1, [pc, #84]	@ (8015278 <etharp_tmr+0x14c>)
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	4613      	mov	r3, r2
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	4413      	add	r3, r2
 801522c:	00db      	lsls	r3, r3, #3
 801522e:	440b      	add	r3, r1
 8015230:	3314      	adds	r3, #20
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	2b01      	cmp	r3, #1
 8015236:	d113      	bne.n	8015260 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015238:	490f      	ldr	r1, [pc, #60]	@ (8015278 <etharp_tmr+0x14c>)
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	4613      	mov	r3, r2
 801523e:	005b      	lsls	r3, r3, #1
 8015240:	4413      	add	r3, r2
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	440b      	add	r3, r1
 8015246:	3308      	adds	r3, #8
 8015248:	6818      	ldr	r0, [r3, #0]
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	4613      	mov	r3, r2
 801524e:	005b      	lsls	r3, r3, #1
 8015250:	4413      	add	r3, r2
 8015252:	00db      	lsls	r3, r3, #3
 8015254:	4a08      	ldr	r2, [pc, #32]	@ (8015278 <etharp_tmr+0x14c>)
 8015256:	4413      	add	r3, r2
 8015258:	3304      	adds	r3, #4
 801525a:	4619      	mov	r1, r3
 801525c:	f000 fe3e 	bl	8015edc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	3301      	adds	r3, #1
 8015264:	607b      	str	r3, [r7, #4]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2b09      	cmp	r3, #9
 801526a:	f77f af65 	ble.w	8015138 <etharp_tmr+0xc>
      }
    }
  }
}
 801526e:	bf00      	nop
 8015270:	bf00      	nop
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	2000c708 	.word	0x2000c708

0801527c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b08a      	sub	sp, #40	@ 0x28
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	460b      	mov	r3, r1
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801528a:	230a      	movs	r3, #10
 801528c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801528e:	230a      	movs	r3, #10
 8015290:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015292:	230a      	movs	r3, #10
 8015294:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8015296:	2300      	movs	r3, #0
 8015298:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801529a:	230a      	movs	r3, #10
 801529c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	83bb      	strh	r3, [r7, #28]
 80152a2:	2300      	movs	r3, #0
 80152a4:	837b      	strh	r3, [r7, #26]
 80152a6:	2300      	movs	r3, #0
 80152a8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152aa:	2300      	movs	r3, #0
 80152ac:	843b      	strh	r3, [r7, #32]
 80152ae:	e0ae      	b.n	801540e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80152b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152b4:	49a6      	ldr	r1, [pc, #664]	@ (8015550 <etharp_find_entry+0x2d4>)
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	00db      	lsls	r3, r3, #3
 80152be:	440b      	add	r3, r1
 80152c0:	3314      	adds	r3, #20
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80152c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80152ca:	2b0a      	cmp	r3, #10
 80152cc:	d105      	bne.n	80152da <etharp_find_entry+0x5e>
 80152ce:	7dfb      	ldrb	r3, [r7, #23]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d102      	bne.n	80152da <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80152d4:	8c3b      	ldrh	r3, [r7, #32]
 80152d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80152d8:	e095      	b.n	8015406 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80152da:	7dfb      	ldrb	r3, [r7, #23]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f000 8092 	beq.w	8015406 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80152e2:	7dfb      	ldrb	r3, [r7, #23]
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d009      	beq.n	80152fc <etharp_find_entry+0x80>
 80152e8:	7dfb      	ldrb	r3, [r7, #23]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d806      	bhi.n	80152fc <etharp_find_entry+0x80>
 80152ee:	4b99      	ldr	r3, [pc, #612]	@ (8015554 <etharp_find_entry+0x2d8>)
 80152f0:	f240 1223 	movw	r2, #291	@ 0x123
 80152f4:	4998      	ldr	r1, [pc, #608]	@ (8015558 <etharp_find_entry+0x2dc>)
 80152f6:	4899      	ldr	r0, [pc, #612]	@ (801555c <etharp_find_entry+0x2e0>)
 80152f8:	f003 f93a 	bl	8018570 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d020      	beq.n	8015344 <etharp_find_entry+0xc8>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	6819      	ldr	r1, [r3, #0]
 8015306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801530a:	4891      	ldr	r0, [pc, #580]	@ (8015550 <etharp_find_entry+0x2d4>)
 801530c:	4613      	mov	r3, r2
 801530e:	005b      	lsls	r3, r3, #1
 8015310:	4413      	add	r3, r2
 8015312:	00db      	lsls	r3, r3, #3
 8015314:	4403      	add	r3, r0
 8015316:	3304      	adds	r3, #4
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4299      	cmp	r1, r3
 801531c:	d112      	bne.n	8015344 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d00c      	beq.n	801533e <etharp_find_entry+0xc2>
 8015324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015328:	4989      	ldr	r1, [pc, #548]	@ (8015550 <etharp_find_entry+0x2d4>)
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	440b      	add	r3, r1
 8015334:	3308      	adds	r3, #8
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	687a      	ldr	r2, [r7, #4]
 801533a:	429a      	cmp	r2, r3
 801533c:	d102      	bne.n	8015344 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801533e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015342:	e100      	b.n	8015546 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015344:	7dfb      	ldrb	r3, [r7, #23]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d140      	bne.n	80153cc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801534a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801534e:	4980      	ldr	r1, [pc, #512]	@ (8015550 <etharp_find_entry+0x2d4>)
 8015350:	4613      	mov	r3, r2
 8015352:	005b      	lsls	r3, r3, #1
 8015354:	4413      	add	r3, r2
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	440b      	add	r3, r1
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d01a      	beq.n	8015396 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015364:	497a      	ldr	r1, [pc, #488]	@ (8015550 <etharp_find_entry+0x2d4>)
 8015366:	4613      	mov	r3, r2
 8015368:	005b      	lsls	r3, r3, #1
 801536a:	4413      	add	r3, r2
 801536c:	00db      	lsls	r3, r3, #3
 801536e:	440b      	add	r3, r1
 8015370:	3312      	adds	r3, #18
 8015372:	881b      	ldrh	r3, [r3, #0]
 8015374:	8bba      	ldrh	r2, [r7, #28]
 8015376:	429a      	cmp	r2, r3
 8015378:	d845      	bhi.n	8015406 <etharp_find_entry+0x18a>
            old_queue = i;
 801537a:	8c3b      	ldrh	r3, [r7, #32]
 801537c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801537e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015382:	4973      	ldr	r1, [pc, #460]	@ (8015550 <etharp_find_entry+0x2d4>)
 8015384:	4613      	mov	r3, r2
 8015386:	005b      	lsls	r3, r3, #1
 8015388:	4413      	add	r3, r2
 801538a:	00db      	lsls	r3, r3, #3
 801538c:	440b      	add	r3, r1
 801538e:	3312      	adds	r3, #18
 8015390:	881b      	ldrh	r3, [r3, #0]
 8015392:	83bb      	strh	r3, [r7, #28]
 8015394:	e037      	b.n	8015406 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801539a:	496d      	ldr	r1, [pc, #436]	@ (8015550 <etharp_find_entry+0x2d4>)
 801539c:	4613      	mov	r3, r2
 801539e:	005b      	lsls	r3, r3, #1
 80153a0:	4413      	add	r3, r2
 80153a2:	00db      	lsls	r3, r3, #3
 80153a4:	440b      	add	r3, r1
 80153a6:	3312      	adds	r3, #18
 80153a8:	881b      	ldrh	r3, [r3, #0]
 80153aa:	8b7a      	ldrh	r2, [r7, #26]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d82a      	bhi.n	8015406 <etharp_find_entry+0x18a>
            old_pending = i;
 80153b0:	8c3b      	ldrh	r3, [r7, #32]
 80153b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80153b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153b8:	4965      	ldr	r1, [pc, #404]	@ (8015550 <etharp_find_entry+0x2d4>)
 80153ba:	4613      	mov	r3, r2
 80153bc:	005b      	lsls	r3, r3, #1
 80153be:	4413      	add	r3, r2
 80153c0:	00db      	lsls	r3, r3, #3
 80153c2:	440b      	add	r3, r1
 80153c4:	3312      	adds	r3, #18
 80153c6:	881b      	ldrh	r3, [r3, #0]
 80153c8:	837b      	strh	r3, [r7, #26]
 80153ca:	e01c      	b.n	8015406 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80153cc:	7dfb      	ldrb	r3, [r7, #23]
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d919      	bls.n	8015406 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80153d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153d6:	495e      	ldr	r1, [pc, #376]	@ (8015550 <etharp_find_entry+0x2d4>)
 80153d8:	4613      	mov	r3, r2
 80153da:	005b      	lsls	r3, r3, #1
 80153dc:	4413      	add	r3, r2
 80153de:	00db      	lsls	r3, r3, #3
 80153e0:	440b      	add	r3, r1
 80153e2:	3312      	adds	r3, #18
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	8b3a      	ldrh	r2, [r7, #24]
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d80c      	bhi.n	8015406 <etharp_find_entry+0x18a>
            old_stable = i;
 80153ec:	8c3b      	ldrh	r3, [r7, #32]
 80153ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80153f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f4:	4956      	ldr	r1, [pc, #344]	@ (8015550 <etharp_find_entry+0x2d4>)
 80153f6:	4613      	mov	r3, r2
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	00db      	lsls	r3, r3, #3
 80153fe:	440b      	add	r3, r1
 8015400:	3312      	adds	r3, #18
 8015402:	881b      	ldrh	r3, [r3, #0]
 8015404:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015406:	8c3b      	ldrh	r3, [r7, #32]
 8015408:	3301      	adds	r3, #1
 801540a:	b29b      	uxth	r3, r3
 801540c:	843b      	strh	r3, [r7, #32]
 801540e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015412:	2b09      	cmp	r3, #9
 8015414:	f77f af4c 	ble.w	80152b0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015418:	7afb      	ldrb	r3, [r7, #11]
 801541a:	f003 0302 	and.w	r3, r3, #2
 801541e:	2b00      	cmp	r3, #0
 8015420:	d108      	bne.n	8015434 <etharp_find_entry+0x1b8>
 8015422:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015426:	2b0a      	cmp	r3, #10
 8015428:	d107      	bne.n	801543a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801542a:	7afb      	ldrb	r3, [r7, #11]
 801542c:	f003 0301 	and.w	r3, r3, #1
 8015430:	2b00      	cmp	r3, #0
 8015432:	d102      	bne.n	801543a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015434:	f04f 33ff 	mov.w	r3, #4294967295
 8015438:	e085      	b.n	8015546 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801543a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801543e:	2b09      	cmp	r3, #9
 8015440:	dc02      	bgt.n	8015448 <etharp_find_entry+0x1cc>
    i = empty;
 8015442:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015444:	843b      	strh	r3, [r7, #32]
 8015446:	e039      	b.n	80154bc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015448:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801544c:	2b09      	cmp	r3, #9
 801544e:	dc14      	bgt.n	801547a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015452:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015458:	493d      	ldr	r1, [pc, #244]	@ (8015550 <etharp_find_entry+0x2d4>)
 801545a:	4613      	mov	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	00db      	lsls	r3, r3, #3
 8015462:	440b      	add	r3, r1
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d018      	beq.n	801549c <etharp_find_entry+0x220>
 801546a:	4b3a      	ldr	r3, [pc, #232]	@ (8015554 <etharp_find_entry+0x2d8>)
 801546c:	f240 126d 	movw	r2, #365	@ 0x16d
 8015470:	493b      	ldr	r1, [pc, #236]	@ (8015560 <etharp_find_entry+0x2e4>)
 8015472:	483a      	ldr	r0, [pc, #232]	@ (801555c <etharp_find_entry+0x2e0>)
 8015474:	f003 f87c 	bl	8018570 <iprintf>
 8015478:	e010      	b.n	801549c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801547a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801547e:	2b09      	cmp	r3, #9
 8015480:	dc02      	bgt.n	8015488 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015482:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015484:	843b      	strh	r3, [r7, #32]
 8015486:	e009      	b.n	801549c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015488:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801548c:	2b09      	cmp	r3, #9
 801548e:	dc02      	bgt.n	8015496 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015490:	8bfb      	ldrh	r3, [r7, #30]
 8015492:	843b      	strh	r3, [r7, #32]
 8015494:	e002      	b.n	801549c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015496:	f04f 33ff 	mov.w	r3, #4294967295
 801549a:	e054      	b.n	8015546 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801549c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154a0:	2b09      	cmp	r3, #9
 80154a2:	dd06      	ble.n	80154b2 <etharp_find_entry+0x236>
 80154a4:	4b2b      	ldr	r3, [pc, #172]	@ (8015554 <etharp_find_entry+0x2d8>)
 80154a6:	f240 127f 	movw	r2, #383	@ 0x17f
 80154aa:	492e      	ldr	r1, [pc, #184]	@ (8015564 <etharp_find_entry+0x2e8>)
 80154ac:	482b      	ldr	r0, [pc, #172]	@ (801555c <etharp_find_entry+0x2e0>)
 80154ae:	f003 f85f 	bl	8018570 <iprintf>
    etharp_free_entry(i);
 80154b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff fe06 	bl	80150c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80154bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154c0:	2b09      	cmp	r3, #9
 80154c2:	dd06      	ble.n	80154d2 <etharp_find_entry+0x256>
 80154c4:	4b23      	ldr	r3, [pc, #140]	@ (8015554 <etharp_find_entry+0x2d8>)
 80154c6:	f240 1283 	movw	r2, #387	@ 0x183
 80154ca:	4926      	ldr	r1, [pc, #152]	@ (8015564 <etharp_find_entry+0x2e8>)
 80154cc:	4823      	ldr	r0, [pc, #140]	@ (801555c <etharp_find_entry+0x2e0>)
 80154ce:	f003 f84f 	bl	8018570 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80154d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154d6:	491e      	ldr	r1, [pc, #120]	@ (8015550 <etharp_find_entry+0x2d4>)
 80154d8:	4613      	mov	r3, r2
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	4413      	add	r3, r2
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	440b      	add	r3, r1
 80154e2:	3314      	adds	r3, #20
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d006      	beq.n	80154f8 <etharp_find_entry+0x27c>
 80154ea:	4b1a      	ldr	r3, [pc, #104]	@ (8015554 <etharp_find_entry+0x2d8>)
 80154ec:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80154f0:	491d      	ldr	r1, [pc, #116]	@ (8015568 <etharp_find_entry+0x2ec>)
 80154f2:	481a      	ldr	r0, [pc, #104]	@ (801555c <etharp_find_entry+0x2e0>)
 80154f4:	f003 f83c 	bl	8018570 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00b      	beq.n	8015516 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80154fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	6819      	ldr	r1, [r3, #0]
 8015506:	4812      	ldr	r0, [pc, #72]	@ (8015550 <etharp_find_entry+0x2d4>)
 8015508:	4613      	mov	r3, r2
 801550a:	005b      	lsls	r3, r3, #1
 801550c:	4413      	add	r3, r2
 801550e:	00db      	lsls	r3, r3, #3
 8015510:	4403      	add	r3, r0
 8015512:	3304      	adds	r3, #4
 8015514:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801551a:	490d      	ldr	r1, [pc, #52]	@ (8015550 <etharp_find_entry+0x2d4>)
 801551c:	4613      	mov	r3, r2
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	4413      	add	r3, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	440b      	add	r3, r1
 8015526:	3312      	adds	r3, #18
 8015528:	2200      	movs	r2, #0
 801552a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801552c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015530:	4907      	ldr	r1, [pc, #28]	@ (8015550 <etharp_find_entry+0x2d4>)
 8015532:	4613      	mov	r3, r2
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	4413      	add	r3, r2
 8015538:	00db      	lsls	r3, r3, #3
 801553a:	440b      	add	r3, r1
 801553c:	3308      	adds	r3, #8
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015542:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015546:	4618      	mov	r0, r3
 8015548:	3728      	adds	r7, #40	@ 0x28
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	2000c708 	.word	0x2000c708
 8015554:	0801ca64 	.word	0x0801ca64
 8015558:	0801ca9c 	.word	0x0801ca9c
 801555c:	0801cadc 	.word	0x0801cadc
 8015560:	0801cb04 	.word	0x0801cb04
 8015564:	0801cb1c 	.word	0x0801cb1c
 8015568:	0801cb30 	.word	0x0801cb30

0801556c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af02      	add	r7, sp, #8
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
 8015578:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015580:	2b06      	cmp	r3, #6
 8015582:	d006      	beq.n	8015592 <etharp_update_arp_entry+0x26>
 8015584:	4b48      	ldr	r3, [pc, #288]	@ (80156a8 <etharp_update_arp_entry+0x13c>)
 8015586:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801558a:	4948      	ldr	r1, [pc, #288]	@ (80156ac <etharp_update_arp_entry+0x140>)
 801558c:	4848      	ldr	r0, [pc, #288]	@ (80156b0 <etharp_update_arp_entry+0x144>)
 801558e:	f002 ffef 	bl	8018570 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d012      	beq.n	80155be <etharp_update_arp_entry+0x52>
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00e      	beq.n	80155be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	68f9      	ldr	r1, [r7, #12]
 80155a6:	4618      	mov	r0, r3
 80155a8:	f001 f8cc 	bl	8016744 <ip4_addr_isbroadcast_u32>
 80155ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d105      	bne.n	80155be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80155ba:	2be0      	cmp	r3, #224	@ 0xe0
 80155bc:	d102      	bne.n	80155c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80155be:	f06f 030f 	mvn.w	r3, #15
 80155c2:	e06c      	b.n	801569e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80155c4:	78fb      	ldrb	r3, [r7, #3]
 80155c6:	68fa      	ldr	r2, [r7, #12]
 80155c8:	4619      	mov	r1, r3
 80155ca:	68b8      	ldr	r0, [r7, #8]
 80155cc:	f7ff fe56 	bl	801527c <etharp_find_entry>
 80155d0:	4603      	mov	r3, r0
 80155d2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80155d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	da02      	bge.n	80155e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80155dc:	8afb      	ldrh	r3, [r7, #22]
 80155de:	b25b      	sxtb	r3, r3
 80155e0:	e05d      	b.n	801569e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80155e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155e6:	4933      	ldr	r1, [pc, #204]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 80155e8:	4613      	mov	r3, r2
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	4413      	add	r3, r2
 80155ee:	00db      	lsls	r3, r3, #3
 80155f0:	440b      	add	r3, r1
 80155f2:	3314      	adds	r3, #20
 80155f4:	2202      	movs	r2, #2
 80155f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80155f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155fc:	492d      	ldr	r1, [pc, #180]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	440b      	add	r3, r1
 8015608:	3308      	adds	r3, #8
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801560e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015612:	4613      	mov	r3, r2
 8015614:	005b      	lsls	r3, r3, #1
 8015616:	4413      	add	r3, r2
 8015618:	00db      	lsls	r3, r3, #3
 801561a:	3308      	adds	r3, #8
 801561c:	4a25      	ldr	r2, [pc, #148]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 801561e:	4413      	add	r3, r2
 8015620:	3304      	adds	r3, #4
 8015622:	2206      	movs	r2, #6
 8015624:	6879      	ldr	r1, [r7, #4]
 8015626:	4618      	mov	r0, r3
 8015628:	f003 f92b 	bl	8018882 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801562c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015630:	4920      	ldr	r1, [pc, #128]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 8015632:	4613      	mov	r3, r2
 8015634:	005b      	lsls	r3, r3, #1
 8015636:	4413      	add	r3, r2
 8015638:	00db      	lsls	r3, r3, #3
 801563a:	440b      	add	r3, r1
 801563c:	3312      	adds	r3, #18
 801563e:	2200      	movs	r2, #0
 8015640:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015642:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015646:	491b      	ldr	r1, [pc, #108]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 8015648:	4613      	mov	r3, r2
 801564a:	005b      	lsls	r3, r3, #1
 801564c:	4413      	add	r3, r2
 801564e:	00db      	lsls	r3, r3, #3
 8015650:	440b      	add	r3, r1
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d021      	beq.n	801569c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015658:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801565c:	4915      	ldr	r1, [pc, #84]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 801565e:	4613      	mov	r3, r2
 8015660:	005b      	lsls	r3, r3, #1
 8015662:	4413      	add	r3, r2
 8015664:	00db      	lsls	r3, r3, #3
 8015666:	440b      	add	r3, r1
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801566c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015670:	4910      	ldr	r1, [pc, #64]	@ (80156b4 <etharp_update_arp_entry+0x148>)
 8015672:	4613      	mov	r3, r2
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	4413      	add	r3, r2
 8015678:	00db      	lsls	r3, r3, #3
 801567a:	440b      	add	r3, r1
 801567c:	2200      	movs	r2, #0
 801567e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6939      	ldr	r1, [r7, #16]
 8015690:	68f8      	ldr	r0, [r7, #12]
 8015692:	f001 fff5 	bl	8017680 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015696:	6938      	ldr	r0, [r7, #16]
 8015698:	f7f9 fdf0 	bl	800f27c <pbuf_free>
  }
  return ERR_OK;
 801569c:	2300      	movs	r3, #0
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3718      	adds	r7, #24
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop
 80156a8:	0801ca64 	.word	0x0801ca64
 80156ac:	0801cb5c 	.word	0x0801cb5c
 80156b0:	0801cadc 	.word	0x0801cadc
 80156b4:	2000c708 	.word	0x2000c708

080156b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80156b8:	b5b0      	push	{r4, r5, r7, lr}
 80156ba:	b08a      	sub	sp, #40	@ 0x28
 80156bc:	af04      	add	r7, sp, #16
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d107      	bne.n	80156d8 <etharp_input+0x20>
 80156c8:	4b3d      	ldr	r3, [pc, #244]	@ (80157c0 <etharp_input+0x108>)
 80156ca:	f240 228a 	movw	r2, #650	@ 0x28a
 80156ce:	493d      	ldr	r1, [pc, #244]	@ (80157c4 <etharp_input+0x10c>)
 80156d0:	483d      	ldr	r0, [pc, #244]	@ (80157c8 <etharp_input+0x110>)
 80156d2:	f002 ff4d 	bl	8018570 <iprintf>
 80156d6:	e06f      	b.n	80157b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80156e8:	d10c      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80156ee:	2b06      	cmp	r3, #6
 80156f0:	d108      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80156f6:	2b04      	cmp	r3, #4
 80156f8:	d104      	bne.n	8015704 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	885b      	ldrh	r3, [r3, #2]
 80156fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015700:	2b08      	cmp	r3, #8
 8015702:	d003      	beq.n	801570c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7f9 fdb9 	bl	800f27c <pbuf_free>
    return;
 801570a:	e055      	b.n	80157b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	330e      	adds	r3, #14
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	3318      	adds	r3, #24
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	3304      	adds	r3, #4
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d102      	bne.n	801572c <etharp_input+0x74>
    for_us = 0;
 8015726:	2300      	movs	r3, #0
 8015728:	75fb      	strb	r3, [r7, #23]
 801572a:	e009      	b.n	8015740 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801572c:	68ba      	ldr	r2, [r7, #8]
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	3304      	adds	r3, #4
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	429a      	cmp	r2, r3
 8015736:	bf0c      	ite	eq
 8015738:	2301      	moveq	r3, #1
 801573a:	2300      	movne	r3, #0
 801573c:	b2db      	uxtb	r3, r3
 801573e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	f103 0208 	add.w	r2, r3, #8
 8015746:	7dfb      	ldrb	r3, [r7, #23]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d001      	beq.n	8015750 <etharp_input+0x98>
 801574c:	2301      	movs	r3, #1
 801574e:	e000      	b.n	8015752 <etharp_input+0x9a>
 8015750:	2302      	movs	r3, #2
 8015752:	f107 010c 	add.w	r1, r7, #12
 8015756:	6838      	ldr	r0, [r7, #0]
 8015758:	f7ff ff08 	bl	801556c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	88db      	ldrh	r3, [r3, #6]
 8015760:	b29b      	uxth	r3, r3
 8015762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015766:	d003      	beq.n	8015770 <etharp_input+0xb8>
 8015768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801576c:	d01e      	beq.n	80157ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801576e:	e020      	b.n	80157b2 <etharp_input+0xfa>
      if (for_us) {
 8015770:	7dfb      	ldrb	r3, [r7, #23]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d01c      	beq.n	80157b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801578c:	693a      	ldr	r2, [r7, #16]
 801578e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015790:	2102      	movs	r1, #2
 8015792:	9103      	str	r1, [sp, #12]
 8015794:	f107 010c 	add.w	r1, r7, #12
 8015798:	9102      	str	r1, [sp, #8]
 801579a:	9201      	str	r2, [sp, #4]
 801579c:	9300      	str	r3, [sp, #0]
 801579e:	462b      	mov	r3, r5
 80157a0:	4622      	mov	r2, r4
 80157a2:	4601      	mov	r1, r0
 80157a4:	6838      	ldr	r0, [r7, #0]
 80157a6:	f000 faeb 	bl	8015d80 <etharp_raw>
      break;
 80157aa:	e001      	b.n	80157b0 <etharp_input+0xf8>
      break;
 80157ac:	bf00      	nop
 80157ae:	e000      	b.n	80157b2 <etharp_input+0xfa>
      break;
 80157b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7f9 fd62 	bl	800f27c <pbuf_free>
}
 80157b8:	3718      	adds	r7, #24
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bdb0      	pop	{r4, r5, r7, pc}
 80157be:	bf00      	nop
 80157c0:	0801ca64 	.word	0x0801ca64
 80157c4:	0801cbb4 	.word	0x0801cbb4
 80157c8:	0801cadc 	.word	0x0801cadc

080157cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af02      	add	r7, sp, #8
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	4613      	mov	r3, r2
 80157d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80157da:	79fa      	ldrb	r2, [r7, #7]
 80157dc:	4944      	ldr	r1, [pc, #272]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 80157de:	4613      	mov	r3, r2
 80157e0:	005b      	lsls	r3, r3, #1
 80157e2:	4413      	add	r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	440b      	add	r3, r1
 80157e8:	3314      	adds	r3, #20
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d806      	bhi.n	80157fe <etharp_output_to_arp_index+0x32>
 80157f0:	4b40      	ldr	r3, [pc, #256]	@ (80158f4 <etharp_output_to_arp_index+0x128>)
 80157f2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80157f6:	4940      	ldr	r1, [pc, #256]	@ (80158f8 <etharp_output_to_arp_index+0x12c>)
 80157f8:	4840      	ldr	r0, [pc, #256]	@ (80158fc <etharp_output_to_arp_index+0x130>)
 80157fa:	f002 feb9 	bl	8018570 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80157fe:	79fa      	ldrb	r2, [r7, #7]
 8015800:	493b      	ldr	r1, [pc, #236]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015802:	4613      	mov	r3, r2
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	4413      	add	r3, r2
 8015808:	00db      	lsls	r3, r3, #3
 801580a:	440b      	add	r3, r1
 801580c:	3314      	adds	r3, #20
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	2b02      	cmp	r3, #2
 8015812:	d153      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015814:	79fa      	ldrb	r2, [r7, #7]
 8015816:	4936      	ldr	r1, [pc, #216]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015818:	4613      	mov	r3, r2
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	4413      	add	r3, r2
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	440b      	add	r3, r1
 8015822:	3312      	adds	r3, #18
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801582a:	d919      	bls.n	8015860 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801582c:	79fa      	ldrb	r2, [r7, #7]
 801582e:	4613      	mov	r3, r2
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	4413      	add	r3, r2
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	4a2e      	ldr	r2, [pc, #184]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015838:	4413      	add	r3, r2
 801583a:	3304      	adds	r3, #4
 801583c:	4619      	mov	r1, r3
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f000 fb4c 	bl	8015edc <etharp_request>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d138      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801584a:	79fa      	ldrb	r2, [r7, #7]
 801584c:	4928      	ldr	r1, [pc, #160]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 801584e:	4613      	mov	r3, r2
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	4413      	add	r3, r2
 8015854:	00db      	lsls	r3, r3, #3
 8015856:	440b      	add	r3, r1
 8015858:	3314      	adds	r3, #20
 801585a:	2203      	movs	r2, #3
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	e02d      	b.n	80158bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015860:	79fa      	ldrb	r2, [r7, #7]
 8015862:	4923      	ldr	r1, [pc, #140]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015864:	4613      	mov	r3, r2
 8015866:	005b      	lsls	r3, r3, #1
 8015868:	4413      	add	r3, r2
 801586a:	00db      	lsls	r3, r3, #3
 801586c:	440b      	add	r3, r1
 801586e:	3312      	adds	r3, #18
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015876:	d321      	bcc.n	80158bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015878:	79fa      	ldrb	r2, [r7, #7]
 801587a:	4613      	mov	r3, r2
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	4413      	add	r3, r2
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	4a1b      	ldr	r2, [pc, #108]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015884:	4413      	add	r3, r2
 8015886:	1d19      	adds	r1, r3, #4
 8015888:	79fa      	ldrb	r2, [r7, #7]
 801588a:	4613      	mov	r3, r2
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	4413      	add	r3, r2
 8015890:	00db      	lsls	r3, r3, #3
 8015892:	3308      	adds	r3, #8
 8015894:	4a16      	ldr	r2, [pc, #88]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 8015896:	4413      	add	r3, r2
 8015898:	3304      	adds	r3, #4
 801589a:	461a      	mov	r2, r3
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f000 fafb 	bl	8015e98 <etharp_request_dst>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d109      	bne.n	80158bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158a8:	79fa      	ldrb	r2, [r7, #7]
 80158aa:	4911      	ldr	r1, [pc, #68]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 80158ac:	4613      	mov	r3, r2
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	4413      	add	r3, r2
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	440b      	add	r3, r1
 80158b6:	3314      	adds	r3, #20
 80158b8:	2203      	movs	r2, #3
 80158ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80158c2:	79fa      	ldrb	r2, [r7, #7]
 80158c4:	4613      	mov	r3, r2
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	4413      	add	r3, r2
 80158ca:	00db      	lsls	r3, r3, #3
 80158cc:	3308      	adds	r3, #8
 80158ce:	4a08      	ldr	r2, [pc, #32]	@ (80158f0 <etharp_output_to_arp_index+0x124>)
 80158d0:	4413      	add	r3, r2
 80158d2:	3304      	adds	r3, #4
 80158d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80158d8:	9200      	str	r2, [sp, #0]
 80158da:	460a      	mov	r2, r1
 80158dc:	68b9      	ldr	r1, [r7, #8]
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f001 fece 	bl	8017680 <ethernet_output>
 80158e4:	4603      	mov	r3, r0
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	2000c708 	.word	0x2000c708
 80158f4:	0801ca64 	.word	0x0801ca64
 80158f8:	0801cbd4 	.word	0x0801cbd4
 80158fc:	0801cadc 	.word	0x0801cadc

08015900 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08a      	sub	sp, #40	@ 0x28
 8015904:	af02      	add	r7, sp, #8
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d106      	bne.n	8015924 <etharp_output+0x24>
 8015916:	4b73      	ldr	r3, [pc, #460]	@ (8015ae4 <etharp_output+0x1e4>)
 8015918:	f240 321e 	movw	r2, #798	@ 0x31e
 801591c:	4972      	ldr	r1, [pc, #456]	@ (8015ae8 <etharp_output+0x1e8>)
 801591e:	4873      	ldr	r0, [pc, #460]	@ (8015aec <etharp_output+0x1ec>)
 8015920:	f002 fe26 	bl	8018570 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d106      	bne.n	8015938 <etharp_output+0x38>
 801592a:	4b6e      	ldr	r3, [pc, #440]	@ (8015ae4 <etharp_output+0x1e4>)
 801592c:	f240 321f 	movw	r2, #799	@ 0x31f
 8015930:	496f      	ldr	r1, [pc, #444]	@ (8015af0 <etharp_output+0x1f0>)
 8015932:	486e      	ldr	r0, [pc, #440]	@ (8015aec <etharp_output+0x1ec>)
 8015934:	f002 fe1c 	bl	8018570 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d106      	bne.n	801594c <etharp_output+0x4c>
 801593e:	4b69      	ldr	r3, [pc, #420]	@ (8015ae4 <etharp_output+0x1e4>)
 8015940:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015944:	496b      	ldr	r1, [pc, #428]	@ (8015af4 <etharp_output+0x1f4>)
 8015946:	4869      	ldr	r0, [pc, #420]	@ (8015aec <etharp_output+0x1ec>)
 8015948:	f002 fe12 	bl	8018570 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	68f9      	ldr	r1, [r7, #12]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 fef6 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8015958:	4603      	mov	r3, r0
 801595a:	2b00      	cmp	r3, #0
 801595c:	d002      	beq.n	8015964 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801595e:	4b66      	ldr	r3, [pc, #408]	@ (8015af8 <etharp_output+0x1f8>)
 8015960:	61fb      	str	r3, [r7, #28]
 8015962:	e0af      	b.n	8015ac4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801596c:	2be0      	cmp	r3, #224	@ 0xe0
 801596e:	d118      	bne.n	80159a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015970:	2301      	movs	r3, #1
 8015972:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015974:	2300      	movs	r3, #0
 8015976:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015978:	235e      	movs	r3, #94	@ 0x5e
 801597a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	3301      	adds	r3, #1
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015986:	b2db      	uxtb	r3, r3
 8015988:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	3302      	adds	r3, #2
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	3303      	adds	r3, #3
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801599a:	f107 0310 	add.w	r3, r7, #16
 801599e:	61fb      	str	r3, [r7, #28]
 80159a0:	e090      	b.n	8015ac4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	3304      	adds	r3, #4
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	405a      	eors	r2, r3
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	3308      	adds	r3, #8
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4013      	ands	r3, r2
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d012      	beq.n	80159e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159c0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d00b      	beq.n	80159e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	330c      	adds	r3, #12
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d003      	beq.n	80159da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	330c      	adds	r3, #12
 80159d6:	61bb      	str	r3, [r7, #24]
 80159d8:	e002      	b.n	80159e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80159da:	f06f 0303 	mvn.w	r3, #3
 80159de:	e07d      	b.n	8015adc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80159e0:	4b46      	ldr	r3, [pc, #280]	@ (8015afc <etharp_output+0x1fc>)
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	4619      	mov	r1, r3
 80159e6:	4a46      	ldr	r2, [pc, #280]	@ (8015b00 <etharp_output+0x200>)
 80159e8:	460b      	mov	r3, r1
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	440b      	add	r3, r1
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	4413      	add	r3, r2
 80159f2:	3314      	adds	r3, #20
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d925      	bls.n	8015a46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80159fa:	4b40      	ldr	r3, [pc, #256]	@ (8015afc <etharp_output+0x1fc>)
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	4619      	mov	r1, r3
 8015a00:	4a3f      	ldr	r2, [pc, #252]	@ (8015b00 <etharp_output+0x200>)
 8015a02:	460b      	mov	r3, r1
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	440b      	add	r3, r1
 8015a08:	00db      	lsls	r3, r3, #3
 8015a0a:	4413      	add	r3, r2
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d117      	bne.n	8015a46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	4b38      	ldr	r3, [pc, #224]	@ (8015afc <etharp_output+0x1fc>)
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	4618      	mov	r0, r3
 8015a20:	4937      	ldr	r1, [pc, #220]	@ (8015b00 <etharp_output+0x200>)
 8015a22:	4603      	mov	r3, r0
 8015a24:	005b      	lsls	r3, r3, #1
 8015a26:	4403      	add	r3, r0
 8015a28:	00db      	lsls	r3, r3, #3
 8015a2a:	440b      	add	r3, r1
 8015a2c:	3304      	adds	r3, #4
 8015a2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d108      	bne.n	8015a46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015a34:	4b31      	ldr	r3, [pc, #196]	@ (8015afc <etharp_output+0x1fc>)
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	461a      	mov	r2, r3
 8015a3a:	68b9      	ldr	r1, [r7, #8]
 8015a3c:	68f8      	ldr	r0, [r7, #12]
 8015a3e:	f7ff fec5 	bl	80157cc <etharp_output_to_arp_index>
 8015a42:	4603      	mov	r3, r0
 8015a44:	e04a      	b.n	8015adc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a46:	2300      	movs	r3, #0
 8015a48:	75fb      	strb	r3, [r7, #23]
 8015a4a:	e031      	b.n	8015ab0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a4c:	7dfa      	ldrb	r2, [r7, #23]
 8015a4e:	492c      	ldr	r1, [pc, #176]	@ (8015b00 <etharp_output+0x200>)
 8015a50:	4613      	mov	r3, r2
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	440b      	add	r3, r1
 8015a5a:	3314      	adds	r3, #20
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d923      	bls.n	8015aaa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015a62:	7dfa      	ldrb	r2, [r7, #23]
 8015a64:	4926      	ldr	r1, [pc, #152]	@ (8015b00 <etharp_output+0x200>)
 8015a66:	4613      	mov	r3, r2
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	4413      	add	r3, r2
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	440b      	add	r3, r1
 8015a70:	3308      	adds	r3, #8
 8015a72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a74:	68fa      	ldr	r2, [r7, #12]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d117      	bne.n	8015aaa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	6819      	ldr	r1, [r3, #0]
 8015a7e:	7dfa      	ldrb	r2, [r7, #23]
 8015a80:	481f      	ldr	r0, [pc, #124]	@ (8015b00 <etharp_output+0x200>)
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	4403      	add	r3, r0
 8015a8c:	3304      	adds	r3, #4
 8015a8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015a90:	4299      	cmp	r1, r3
 8015a92:	d10a      	bne.n	8015aaa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015a94:	4a19      	ldr	r2, [pc, #100]	@ (8015afc <etharp_output+0x1fc>)
 8015a96:	7dfb      	ldrb	r3, [r7, #23]
 8015a98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015a9a:	7dfb      	ldrb	r3, [r7, #23]
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	68b9      	ldr	r1, [r7, #8]
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f7ff fe93 	bl	80157cc <etharp_output_to_arp_index>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	e018      	b.n	8015adc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015aaa:	7dfb      	ldrb	r3, [r7, #23]
 8015aac:	3301      	adds	r3, #1
 8015aae:	75fb      	strb	r3, [r7, #23]
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
 8015ab2:	2b09      	cmp	r3, #9
 8015ab4:	d9ca      	bls.n	8015a4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	69b9      	ldr	r1, [r7, #24]
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f000 f822 	bl	8015b04 <etharp_query>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	e00b      	b.n	8015adc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015aca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015ace:	9300      	str	r3, [sp, #0]
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f001 fdd3 	bl	8017680 <ethernet_output>
 8015ada:	4603      	mov	r3, r0
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3720      	adds	r7, #32
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	0801ca64 	.word	0x0801ca64
 8015ae8:	0801cbb4 	.word	0x0801cbb4
 8015aec:	0801cadc 	.word	0x0801cadc
 8015af0:	0801cc04 	.word	0x0801cc04
 8015af4:	0801cba4 	.word	0x0801cba4
 8015af8:	0801d2a8 	.word	0x0801d2a8
 8015afc:	2000c7f8 	.word	0x2000c7f8
 8015b00:	2000c708 	.word	0x2000c708

08015b04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b08c      	sub	sp, #48	@ 0x30
 8015b08:	af02      	add	r7, sp, #8
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	60b9      	str	r1, [r7, #8]
 8015b0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	3326      	adds	r3, #38	@ 0x26
 8015b14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015b16:	23ff      	movs	r3, #255	@ 0xff
 8015b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	68f9      	ldr	r1, [r7, #12]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 fe0c 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10c      	bne.n	8015b4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b3a:	2be0      	cmp	r3, #224	@ 0xe0
 8015b3c:	d006      	beq.n	8015b4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d003      	beq.n	8015b4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b4c:	f06f 030f 	mvn.w	r3, #15
 8015b50:	e101      	b.n	8015d56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	2101      	movs	r1, #1
 8015b56:	68b8      	ldr	r0, [r7, #8]
 8015b58:	f7ff fb90 	bl	801527c <etharp_find_entry>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	da02      	bge.n	8015b6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015b68:	8a7b      	ldrh	r3, [r7, #18]
 8015b6a:	b25b      	sxtb	r3, r3
 8015b6c:	e0f3      	b.n	8015d56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015b6e:	8a7b      	ldrh	r3, [r7, #18]
 8015b70:	2b7e      	cmp	r3, #126	@ 0x7e
 8015b72:	d906      	bls.n	8015b82 <etharp_query+0x7e>
 8015b74:	4b7a      	ldr	r3, [pc, #488]	@ (8015d60 <etharp_query+0x25c>)
 8015b76:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015b7a:	497a      	ldr	r1, [pc, #488]	@ (8015d64 <etharp_query+0x260>)
 8015b7c:	487a      	ldr	r0, [pc, #488]	@ (8015d68 <etharp_query+0x264>)
 8015b7e:	f002 fcf7 	bl	8018570 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015b82:	8a7b      	ldrh	r3, [r7, #18]
 8015b84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015b86:	7c7a      	ldrb	r2, [r7, #17]
 8015b88:	4978      	ldr	r1, [pc, #480]	@ (8015d6c <etharp_query+0x268>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3314      	adds	r3, #20
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d115      	bne.n	8015bc8 <etharp_query+0xc4>
    is_new_entry = 1;
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015ba0:	7c7a      	ldrb	r2, [r7, #17]
 8015ba2:	4972      	ldr	r1, [pc, #456]	@ (8015d6c <etharp_query+0x268>)
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	4413      	add	r3, r2
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	440b      	add	r3, r1
 8015bae:	3314      	adds	r3, #20
 8015bb0:	2201      	movs	r2, #1
 8015bb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015bb4:	7c7a      	ldrb	r2, [r7, #17]
 8015bb6:	496d      	ldr	r1, [pc, #436]	@ (8015d6c <etharp_query+0x268>)
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	3308      	adds	r3, #8
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015bc8:	7c7a      	ldrb	r2, [r7, #17]
 8015bca:	4968      	ldr	r1, [pc, #416]	@ (8015d6c <etharp_query+0x268>)
 8015bcc:	4613      	mov	r3, r2
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	4413      	add	r3, r2
 8015bd2:	00db      	lsls	r3, r3, #3
 8015bd4:	440b      	add	r3, r1
 8015bd6:	3314      	adds	r3, #20
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d011      	beq.n	8015c02 <etharp_query+0xfe>
 8015bde:	7c7a      	ldrb	r2, [r7, #17]
 8015be0:	4962      	ldr	r1, [pc, #392]	@ (8015d6c <etharp_query+0x268>)
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	440b      	add	r3, r1
 8015bec:	3314      	adds	r3, #20
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d806      	bhi.n	8015c02 <etharp_query+0xfe>
 8015bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8015d60 <etharp_query+0x25c>)
 8015bf6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015bfa:	495d      	ldr	r1, [pc, #372]	@ (8015d70 <etharp_query+0x26c>)
 8015bfc:	485a      	ldr	r0, [pc, #360]	@ (8015d68 <etharp_query+0x264>)
 8015bfe:	f002 fcb7 	bl	8018570 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015c02:	6a3b      	ldr	r3, [r7, #32]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d102      	bne.n	8015c0e <etharp_query+0x10a>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d10c      	bne.n	8015c28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015c0e:	68b9      	ldr	r1, [r7, #8]
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f000 f963 	bl	8015edc <etharp_request>
 8015c16:	4603      	mov	r3, r0
 8015c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d102      	bne.n	8015c28 <etharp_query+0x124>
      return result;
 8015c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015c26:	e096      	b.n	8015d56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d106      	bne.n	8015c3c <etharp_query+0x138>
 8015c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8015d60 <etharp_query+0x25c>)
 8015c30:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015c34:	494f      	ldr	r1, [pc, #316]	@ (8015d74 <etharp_query+0x270>)
 8015c36:	484c      	ldr	r0, [pc, #304]	@ (8015d68 <etharp_query+0x264>)
 8015c38:	f002 fc9a 	bl	8018570 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015c3c:	7c7a      	ldrb	r2, [r7, #17]
 8015c3e:	494b      	ldr	r1, [pc, #300]	@ (8015d6c <etharp_query+0x268>)
 8015c40:	4613      	mov	r3, r2
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	4413      	add	r3, r2
 8015c46:	00db      	lsls	r3, r3, #3
 8015c48:	440b      	add	r3, r1
 8015c4a:	3314      	adds	r3, #20
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d917      	bls.n	8015c82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015c52:	4a49      	ldr	r2, [pc, #292]	@ (8015d78 <etharp_query+0x274>)
 8015c54:	7c7b      	ldrb	r3, [r7, #17]
 8015c56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015c58:	7c7a      	ldrb	r2, [r7, #17]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	3308      	adds	r3, #8
 8015c64:	4a41      	ldr	r2, [pc, #260]	@ (8015d6c <etharp_query+0x268>)
 8015c66:	4413      	add	r3, r2
 8015c68:	3304      	adds	r3, #4
 8015c6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015c6e:	9200      	str	r2, [sp, #0]
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	6879      	ldr	r1, [r7, #4]
 8015c74:	68f8      	ldr	r0, [r7, #12]
 8015c76:	f001 fd03 	bl	8017680 <ethernet_output>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015c80:	e067      	b.n	8015d52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015c82:	7c7a      	ldrb	r2, [r7, #17]
 8015c84:	4939      	ldr	r1, [pc, #228]	@ (8015d6c <etharp_query+0x268>)
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	440b      	add	r3, r1
 8015c90:	3314      	adds	r3, #20
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d15c      	bne.n	8015d52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ca0:	e01c      	b.n	8015cdc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	895a      	ldrh	r2, [r3, #10]
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	891b      	ldrh	r3, [r3, #8]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d10a      	bne.n	8015cc4 <etharp_query+0x1c0>
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d006      	beq.n	8015cc4 <etharp_query+0x1c0>
 8015cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8015d60 <etharp_query+0x25c>)
 8015cb8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015cbc:	492f      	ldr	r1, [pc, #188]	@ (8015d7c <etharp_query+0x278>)
 8015cbe:	482a      	ldr	r0, [pc, #168]	@ (8015d68 <etharp_query+0x264>)
 8015cc0:	f002 fc56 	bl	8018570 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	7b1b      	ldrb	r3, [r3, #12]
 8015cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d002      	beq.n	8015cd6 <etharp_query+0x1d2>
        copy_needed = 1;
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	61bb      	str	r3, [r7, #24]
        break;
 8015cd4:	e005      	b.n	8015ce2 <etharp_query+0x1de>
      }
      p = p->next;
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d1df      	bne.n	8015ca2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d007      	beq.n	8015cf8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015cee:	200e      	movs	r0, #14
 8015cf0:	f7f9 fd2c 	bl	800f74c <pbuf_clone>
 8015cf4:	61f8      	str	r0, [r7, #28]
 8015cf6:	e004      	b.n	8015d02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015cfc:	69f8      	ldr	r0, [r7, #28]
 8015cfe:	f7f9 fb63 	bl	800f3c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d021      	beq.n	8015d4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015d08:	7c7a      	ldrb	r2, [r7, #17]
 8015d0a:	4918      	ldr	r1, [pc, #96]	@ (8015d6c <etharp_query+0x268>)
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	440b      	add	r3, r1
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d00a      	beq.n	8015d32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015d1c:	7c7a      	ldrb	r2, [r7, #17]
 8015d1e:	4913      	ldr	r1, [pc, #76]	@ (8015d6c <etharp_query+0x268>)
 8015d20:	4613      	mov	r3, r2
 8015d22:	005b      	lsls	r3, r3, #1
 8015d24:	4413      	add	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	440b      	add	r3, r1
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f9 faa5 	bl	800f27c <pbuf_free>
      }
      arp_table[i].q = p;
 8015d32:	7c7a      	ldrb	r2, [r7, #17]
 8015d34:	490d      	ldr	r1, [pc, #52]	@ (8015d6c <etharp_query+0x268>)
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	69fa      	ldr	r2, [r7, #28]
 8015d42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015d44:	2300      	movs	r3, #0
 8015d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d4a:	e002      	b.n	8015d52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015d4c:	23ff      	movs	r3, #255	@ 0xff
 8015d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015d52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3728      	adds	r7, #40	@ 0x28
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	0801ca64 	.word	0x0801ca64
 8015d64:	0801cc10 	.word	0x0801cc10
 8015d68:	0801cadc 	.word	0x0801cadc
 8015d6c:	2000c708 	.word	0x2000c708
 8015d70:	0801cc20 	.word	0x0801cc20
 8015d74:	0801cc04 	.word	0x0801cc04
 8015d78:	2000c7f8 	.word	0x2000c7f8
 8015d7c:	0801cc48 	.word	0x0801cc48

08015d80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b08a      	sub	sp, #40	@ 0x28
 8015d84:	af02      	add	r7, sp, #8
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	607a      	str	r2, [r7, #4]
 8015d8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d106      	bne.n	8015da6 <etharp_raw+0x26>
 8015d98:	4b3a      	ldr	r3, [pc, #232]	@ (8015e84 <etharp_raw+0x104>)
 8015d9a:	f240 4257 	movw	r2, #1111	@ 0x457
 8015d9e:	493a      	ldr	r1, [pc, #232]	@ (8015e88 <etharp_raw+0x108>)
 8015da0:	483a      	ldr	r0, [pc, #232]	@ (8015e8c <etharp_raw+0x10c>)
 8015da2:	f002 fbe5 	bl	8018570 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015da6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015daa:	211c      	movs	r1, #28
 8015dac:	200e      	movs	r0, #14
 8015dae:	f7f8 ff81 	bl	800ecb4 <pbuf_alloc>
 8015db2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d102      	bne.n	8015dc0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015dba:	f04f 33ff 	mov.w	r3, #4294967295
 8015dbe:	e05d      	b.n	8015e7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015dc0:	69bb      	ldr	r3, [r7, #24]
 8015dc2:	895b      	ldrh	r3, [r3, #10]
 8015dc4:	2b1b      	cmp	r3, #27
 8015dc6:	d806      	bhi.n	8015dd6 <etharp_raw+0x56>
 8015dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8015e84 <etharp_raw+0x104>)
 8015dca:	f240 4262 	movw	r2, #1122	@ 0x462
 8015dce:	4930      	ldr	r1, [pc, #192]	@ (8015e90 <etharp_raw+0x110>)
 8015dd0:	482e      	ldr	r0, [pc, #184]	@ (8015e8c <etharp_raw+0x10c>)
 8015dd2:	f002 fbcd 	bl	8018570 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015ddc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f7 fe8c 	bl	800dafc <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	461a      	mov	r2, r3
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015df2:	2b06      	cmp	r3, #6
 8015df4:	d006      	beq.n	8015e04 <etharp_raw+0x84>
 8015df6:	4b23      	ldr	r3, [pc, #140]	@ (8015e84 <etharp_raw+0x104>)
 8015df8:	f240 4269 	movw	r2, #1129	@ 0x469
 8015dfc:	4925      	ldr	r1, [pc, #148]	@ (8015e94 <etharp_raw+0x114>)
 8015dfe:	4823      	ldr	r0, [pc, #140]	@ (8015e8c <etharp_raw+0x10c>)
 8015e00:	f002 fbb6 	bl	8018570 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	3308      	adds	r3, #8
 8015e08:	2206      	movs	r2, #6
 8015e0a:	6839      	ldr	r1, [r7, #0]
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f002 fd38 	bl	8018882 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	3312      	adds	r3, #18
 8015e16:	2206      	movs	r2, #6
 8015e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f002 fd31 	bl	8018882 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	330e      	adds	r3, #14
 8015e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e26:	6812      	ldr	r2, [r2, #0]
 8015e28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	3318      	adds	r3, #24
 8015e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e30:	6812      	ldr	r2, [r2, #0]
 8015e32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	2200      	movs	r2, #0
 8015e38:	701a      	strb	r2, [r3, #0]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f042 0201 	orr.w	r2, r2, #1
 8015e40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	2200      	movs	r2, #0
 8015e46:	f042 0208 	orr.w	r2, r2, #8
 8015e4a:	709a      	strb	r2, [r3, #2]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	2206      	movs	r2, #6
 8015e54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	2204      	movs	r2, #4
 8015e5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015e5c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	68ba      	ldr	r2, [r7, #8]
 8015e66:	69b9      	ldr	r1, [r7, #24]
 8015e68:	68f8      	ldr	r0, [r7, #12]
 8015e6a:	f001 fc09 	bl	8017680 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015e6e:	69b8      	ldr	r0, [r7, #24]
 8015e70:	f7f9 fa04 	bl	800f27c <pbuf_free>
  p = NULL;
 8015e74:	2300      	movs	r3, #0
 8015e76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3720      	adds	r7, #32
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801ca64 	.word	0x0801ca64
 8015e88:	0801cbb4 	.word	0x0801cbb4
 8015e8c:	0801cadc 	.word	0x0801cadc
 8015e90:	0801cc64 	.word	0x0801cc64
 8015e94:	0801cc98 	.word	0x0801cc98

08015e98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	af04      	add	r7, sp, #16
 8015e9e:	60f8      	str	r0, [r7, #12]
 8015ea0:	60b9      	str	r1, [r7, #8]
 8015ea2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	9203      	str	r2, [sp, #12]
 8015eb8:	68ba      	ldr	r2, [r7, #8]
 8015eba:	9202      	str	r2, [sp, #8]
 8015ebc:	4a06      	ldr	r2, [pc, #24]	@ (8015ed8 <etharp_request_dst+0x40>)
 8015ebe:	9201      	str	r2, [sp, #4]
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f7ff ff5a 	bl	8015d80 <etharp_raw>
 8015ecc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3710      	adds	r7, #16
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	0801d2b0 	.word	0x0801d2b0

08015edc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015ee6:	4a05      	ldr	r2, [pc, #20]	@ (8015efc <etharp_request+0x20>)
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7ff ffd4 	bl	8015e98 <etharp_request_dst>
 8015ef0:	4603      	mov	r3, r0
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	0801d2a8 	.word	0x0801d2a8

08015f00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b08e      	sub	sp, #56	@ 0x38
 8015f04:	af04      	add	r7, sp, #16
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015f0a:	4b78      	ldr	r3, [pc, #480]	@ (80160ec <icmp_input+0x1ec>)
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	f003 030f 	and.w	r3, r3, #15
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	009b      	lsls	r3, r3, #2
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8015f20:	8bfb      	ldrh	r3, [r7, #30]
 8015f22:	2b13      	cmp	r3, #19
 8015f24:	f240 80cf 	bls.w	80160c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	895b      	ldrh	r3, [r3, #10]
 8015f2c:	2b03      	cmp	r3, #3
 8015f2e:	f240 80cc 	bls.w	80160ca <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015f3a:	7f7b      	ldrb	r3, [r7, #29]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	f000 80bb 	beq.w	80160b8 <icmp_input+0x1b8>
 8015f42:	2b08      	cmp	r3, #8
 8015f44:	f040 80bb 	bne.w	80160be <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015f48:	4b69      	ldr	r3, [pc, #420]	@ (80160f0 <icmp_input+0x1f0>)
 8015f4a:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f4c:	4b67      	ldr	r3, [pc, #412]	@ (80160ec <icmp_input+0x1ec>)
 8015f4e:	695b      	ldr	r3, [r3, #20]
 8015f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015f54:	2be0      	cmp	r3, #224	@ 0xe0
 8015f56:	d102      	bne.n	8015f5e <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	3304      	adds	r3, #4
 8015f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015f5e:	4b63      	ldr	r3, [pc, #396]	@ (80160ec <icmp_input+0x1ec>)
 8015f60:	695b      	ldr	r3, [r3, #20]
 8015f62:	4a62      	ldr	r2, [pc, #392]	@ (80160ec <icmp_input+0x1ec>)
 8015f64:	6812      	ldr	r2, [r2, #0]
 8015f66:	4611      	mov	r1, r2
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f000 fbeb 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	3304      	adds	r3, #4
 8015f78:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	891b      	ldrh	r3, [r3, #8]
 8015f7e:	2b07      	cmp	r3, #7
 8015f80:	f240 80a5 	bls.w	80160ce <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015f84:	8bfb      	ldrh	r3, [r7, #30]
 8015f86:	330e      	adds	r3, #14
 8015f88:	4619      	mov	r1, r3
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f7f9 f8e0 	bl	800f150 <pbuf_add_header>
 8015f90:	4603      	mov	r3, r0
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d04b      	beq.n	801602e <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	891a      	ldrh	r2, [r3, #8]
 8015f9a:	8bfb      	ldrh	r3, [r7, #30]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	891b      	ldrh	r3, [r3, #8]
 8015fa4:	8b7a      	ldrh	r2, [r7, #26]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	f0c0 8096 	bcc.w	80160d8 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015fac:	8b7b      	ldrh	r3, [r7, #26]
 8015fae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	200e      	movs	r0, #14
 8015fb6:	f7f8 fe7d 	bl	800ecb4 <pbuf_alloc>
 8015fba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f000 808c 	beq.w	80160dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	895b      	ldrh	r3, [r3, #10]
 8015fc8:	461a      	mov	r2, r3
 8015fca:	8bfb      	ldrh	r3, [r7, #30]
 8015fcc:	3308      	adds	r3, #8
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d203      	bcs.n	8015fda <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015fd2:	6978      	ldr	r0, [r7, #20]
 8015fd4:	f7f9 f952 	bl	800f27c <pbuf_free>
          goto icmperr;
 8015fd8:	e081      	b.n	80160de <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	8bfa      	ldrh	r2, [r7, #30]
 8015fe0:	6a39      	ldr	r1, [r7, #32]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f002 fc4d 	bl	8018882 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015fe8:	8bfb      	ldrh	r3, [r7, #30]
 8015fea:	4619      	mov	r1, r3
 8015fec:	6978      	ldr	r0, [r7, #20]
 8015fee:	f7f9 f8bf 	bl	800f170 <pbuf_remove_header>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d009      	beq.n	801600c <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80160f4 <icmp_input+0x1f4>)
 8015ffa:	22b6      	movs	r2, #182	@ 0xb6
 8015ffc:	493e      	ldr	r1, [pc, #248]	@ (80160f8 <icmp_input+0x1f8>)
 8015ffe:	483f      	ldr	r0, [pc, #252]	@ (80160fc <icmp_input+0x1fc>)
 8016000:	f002 fab6 	bl	8018570 <iprintf>
          pbuf_free(r);
 8016004:	6978      	ldr	r0, [r7, #20]
 8016006:	f7f9 f939 	bl	800f27c <pbuf_free>
          goto icmperr;
 801600a:	e068      	b.n	80160de <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801600c:	6879      	ldr	r1, [r7, #4]
 801600e:	6978      	ldr	r0, [r7, #20]
 8016010:	f7f9 fa58 	bl	800f4c4 <pbuf_copy>
 8016014:	4603      	mov	r3, r0
 8016016:	2b00      	cmp	r3, #0
 8016018:	d003      	beq.n	8016022 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801601a:	6978      	ldr	r0, [r7, #20]
 801601c:	f7f9 f92e 	bl	800f27c <pbuf_free>
          goto icmperr;
 8016020:	e05d      	b.n	80160de <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f7f9 f92a 	bl	800f27c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	607b      	str	r3, [r7, #4]
 801602c:	e00f      	b.n	801604e <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801602e:	8bfb      	ldrh	r3, [r7, #30]
 8016030:	330e      	adds	r3, #14
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7f9 f89b 	bl	800f170 <pbuf_remove_header>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d006      	beq.n	801604e <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016040:	4b2c      	ldr	r3, [pc, #176]	@ (80160f4 <icmp_input+0x1f4>)
 8016042:	22c7      	movs	r2, #199	@ 0xc7
 8016044:	492e      	ldr	r1, [pc, #184]	@ (8016100 <icmp_input+0x200>)
 8016046:	482d      	ldr	r0, [pc, #180]	@ (80160fc <icmp_input+0x1fc>)
 8016048:	f002 fa92 	bl	8018570 <iprintf>
          goto icmperr;
 801604c:	e047      	b.n	80160de <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016054:	8bfb      	ldrh	r3, [r7, #30]
 8016056:	4619      	mov	r1, r3
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7f9 f879 	bl	800f150 <pbuf_add_header>
 801605e:	4603      	mov	r3, r0
 8016060:	2b00      	cmp	r3, #0
 8016062:	d12b      	bne.n	80160bc <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	685b      	ldr	r3, [r3, #4]
 8016068:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801606c:	681a      	ldr	r2, [r3, #0]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016072:	4b1e      	ldr	r3, [pc, #120]	@ (80160ec <icmp_input+0x1ec>)
 8016074:	691a      	ldr	r2, [r3, #16]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	2200      	movs	r2, #0
 801607e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	2200      	movs	r2, #0
 8016084:	709a      	strb	r2, [r3, #2]
 8016086:	2200      	movs	r2, #0
 8016088:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	22ff      	movs	r2, #255	@ 0xff
 801608e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2200      	movs	r2, #0
 8016094:	729a      	strb	r2, [r3, #10]
 8016096:	2200      	movs	r2, #0
 8016098:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	9302      	str	r3, [sp, #8]
 801609e:	2301      	movs	r3, #1
 80160a0:	9301      	str	r3, [sp, #4]
 80160a2:	2300      	movs	r3, #0
 80160a4:	9300      	str	r3, [sp, #0]
 80160a6:	23ff      	movs	r3, #255	@ 0xff
 80160a8:	2200      	movs	r2, #0
 80160aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 fa71 	bl	8016594 <ip4_output_if>
 80160b2:	4603      	mov	r3, r0
 80160b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80160b6:	e001      	b.n	80160bc <icmp_input+0x1bc>
      break;
 80160b8:	bf00      	nop
 80160ba:	e000      	b.n	80160be <icmp_input+0x1be>
      break;
 80160bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7f9 f8dc 	bl	800f27c <pbuf_free>
  return;
 80160c4:	e00f      	b.n	80160e6 <icmp_input+0x1e6>
    goto lenerr;
 80160c6:	bf00      	nop
 80160c8:	e002      	b.n	80160d0 <icmp_input+0x1d0>
    goto lenerr;
 80160ca:	bf00      	nop
 80160cc:	e000      	b.n	80160d0 <icmp_input+0x1d0>
        goto lenerr;
 80160ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7f9 f8d3 	bl	800f27c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160d6:	e006      	b.n	80160e6 <icmp_input+0x1e6>
          goto icmperr;
 80160d8:	bf00      	nop
 80160da:	e000      	b.n	80160de <icmp_input+0x1de>
          goto icmperr;
 80160dc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	f7f9 f8cc 	bl	800f27c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80160e4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80160e6:	3728      	adds	r7, #40	@ 0x28
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	20008f54 	.word	0x20008f54
 80160f0:	20008f68 	.word	0x20008f68
 80160f4:	0801ccdc 	.word	0x0801ccdc
 80160f8:	0801cd14 	.word	0x0801cd14
 80160fc:	0801cd4c 	.word	0x0801cd4c
 8016100:	0801cd74 	.word	0x0801cd74

08016104 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	460b      	mov	r3, r1
 801610e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016110:	78fb      	ldrb	r3, [r7, #3]
 8016112:	461a      	mov	r2, r3
 8016114:	2103      	movs	r1, #3
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f000 f814 	bl	8016144 <icmp_send_response>
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	460b      	mov	r3, r1
 801612e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016130:	78fb      	ldrb	r3, [r7, #3]
 8016132:	461a      	mov	r2, r3
 8016134:	210b      	movs	r1, #11
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 f804 	bl	8016144 <icmp_send_response>
}
 801613c:	bf00      	nop
 801613e:	3708      	adds	r7, #8
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b08c      	sub	sp, #48	@ 0x30
 8016148:	af04      	add	r7, sp, #16
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	460b      	mov	r3, r1
 801614e:	70fb      	strb	r3, [r7, #3]
 8016150:	4613      	mov	r3, r2
 8016152:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016154:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016158:	2124      	movs	r1, #36	@ 0x24
 801615a:	2022      	movs	r0, #34	@ 0x22
 801615c:	f7f8 fdaa 	bl	800ecb4 <pbuf_alloc>
 8016160:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d04c      	beq.n	8016202 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	895b      	ldrh	r3, [r3, #10]
 801616c:	2b23      	cmp	r3, #35	@ 0x23
 801616e:	d806      	bhi.n	801617e <icmp_send_response+0x3a>
 8016170:	4b26      	ldr	r3, [pc, #152]	@ (801620c <icmp_send_response+0xc8>)
 8016172:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016176:	4926      	ldr	r1, [pc, #152]	@ (8016210 <icmp_send_response+0xcc>)
 8016178:	4826      	ldr	r0, [pc, #152]	@ (8016214 <icmp_send_response+0xd0>)
 801617a:	f002 f9f9 	bl	8018570 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	78fa      	ldrb	r2, [r7, #3]
 801618e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	78ba      	ldrb	r2, [r7, #2]
 8016194:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	2200      	movs	r2, #0
 801619a:	711a      	strb	r2, [r3, #4]
 801619c:	2200      	movs	r2, #0
 801619e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	2200      	movs	r2, #0
 80161a4:	719a      	strb	r2, [r3, #6]
 80161a6:	2200      	movs	r2, #0
 80161a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80161aa:	69fb      	ldr	r3, [r7, #28]
 80161ac:	685b      	ldr	r3, [r3, #4]
 80161ae:	f103 0008 	add.w	r0, r3, #8
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	221c      	movs	r2, #28
 80161b8:	4619      	mov	r1, r3
 80161ba:	f002 fb62 	bl	8018882 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80161be:	69bb      	ldr	r3, [r7, #24]
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80161c4:	f107 030c 	add.w	r3, r7, #12
 80161c8:	4618      	mov	r0, r3
 80161ca:	f000 f825 	bl	8016218 <ip4_route>
 80161ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d011      	beq.n	80161fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	2200      	movs	r2, #0
 80161da:	709a      	strb	r2, [r3, #2]
 80161dc:	2200      	movs	r2, #0
 80161de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80161e0:	f107 020c 	add.w	r2, r7, #12
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	9302      	str	r3, [sp, #8]
 80161e8:	2301      	movs	r3, #1
 80161ea:	9301      	str	r3, [sp, #4]
 80161ec:	2300      	movs	r3, #0
 80161ee:	9300      	str	r3, [sp, #0]
 80161f0:	23ff      	movs	r3, #255	@ 0xff
 80161f2:	2100      	movs	r1, #0
 80161f4:	69f8      	ldr	r0, [r7, #28]
 80161f6:	f000 f9cd 	bl	8016594 <ip4_output_if>
  }
  pbuf_free(q);
 80161fa:	69f8      	ldr	r0, [r7, #28]
 80161fc:	f7f9 f83e 	bl	800f27c <pbuf_free>
 8016200:	e000      	b.n	8016204 <icmp_send_response+0xc0>
    return;
 8016202:	bf00      	nop
}
 8016204:	3720      	adds	r7, #32
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
 801620a:	bf00      	nop
 801620c:	0801ccdc 	.word	0x0801ccdc
 8016210:	0801cda8 	.word	0x0801cda8
 8016214:	0801cd4c 	.word	0x0801cd4c

08016218 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016220:	4b33      	ldr	r3, [pc, #204]	@ (80162f0 <ip4_route+0xd8>)
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	60fb      	str	r3, [r7, #12]
 8016226:	e036      	b.n	8016296 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801622e:	f003 0301 	and.w	r3, r3, #1
 8016232:	b2db      	uxtb	r3, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	d02b      	beq.n	8016290 <ip4_route+0x78>
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801623e:	089b      	lsrs	r3, r3, #2
 8016240:	f003 0301 	and.w	r3, r3, #1
 8016244:	b2db      	uxtb	r3, r3
 8016246:	2b00      	cmp	r3, #0
 8016248:	d022      	beq.n	8016290 <ip4_route+0x78>
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	3304      	adds	r3, #4
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01d      	beq.n	8016290 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	3304      	adds	r3, #4
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	405a      	eors	r2, r3
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	3308      	adds	r3, #8
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	4013      	ands	r3, r2
 8016268:	2b00      	cmp	r3, #0
 801626a:	d101      	bne.n	8016270 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	e038      	b.n	80162e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016276:	f003 0302 	and.w	r3, r3, #2
 801627a:	2b00      	cmp	r3, #0
 801627c:	d108      	bne.n	8016290 <ip4_route+0x78>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	330c      	adds	r3, #12
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	429a      	cmp	r2, r3
 801628a:	d101      	bne.n	8016290 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	e028      	b.n	80162e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	60fb      	str	r3, [r7, #12]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d1c5      	bne.n	8016228 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801629c:	4b15      	ldr	r3, [pc, #84]	@ (80162f4 <ip4_route+0xdc>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d01a      	beq.n	80162da <ip4_route+0xc2>
 80162a4:	4b13      	ldr	r3, [pc, #76]	@ (80162f4 <ip4_route+0xdc>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162ac:	f003 0301 	and.w	r3, r3, #1
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d012      	beq.n	80162da <ip4_route+0xc2>
 80162b4:	4b0f      	ldr	r3, [pc, #60]	@ (80162f4 <ip4_route+0xdc>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162bc:	f003 0304 	and.w	r3, r3, #4
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00a      	beq.n	80162da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80162c4:	4b0b      	ldr	r3, [pc, #44]	@ (80162f4 <ip4_route+0xdc>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	3304      	adds	r3, #4
 80162ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d004      	beq.n	80162da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80162d8:	d101      	bne.n	80162de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80162da:	2300      	movs	r3, #0
 80162dc:	e001      	b.n	80162e2 <ip4_route+0xca>
  }

  return netif_default;
 80162de:	4b05      	ldr	r3, [pc, #20]	@ (80162f4 <ip4_route+0xdc>)
 80162e0:	681b      	ldr	r3, [r3, #0]
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3714      	adds	r7, #20
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr
 80162ee:	bf00      	nop
 80162f0:	2000c69c 	.word	0x2000c69c
 80162f4:	2000c6a0 	.word	0x2000c6a0

080162f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	b2db      	uxtb	r3, r3
 801630c:	2b00      	cmp	r3, #0
 801630e:	d016      	beq.n	801633e <ip4_input_accept+0x46>
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	3304      	adds	r3, #4
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d011      	beq.n	801633e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801631a:	4b0b      	ldr	r3, [pc, #44]	@ (8016348 <ip4_input_accept+0x50>)
 801631c:	695a      	ldr	r2, [r3, #20]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	3304      	adds	r3, #4
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	429a      	cmp	r2, r3
 8016326:	d008      	beq.n	801633a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016328:	4b07      	ldr	r3, [pc, #28]	@ (8016348 <ip4_input_accept+0x50>)
 801632a:	695b      	ldr	r3, [r3, #20]
 801632c:	6879      	ldr	r1, [r7, #4]
 801632e:	4618      	mov	r0, r3
 8016330:	f000 fa08 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8016334:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016336:	2b00      	cmp	r3, #0
 8016338:	d001      	beq.n	801633e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801633a:	2301      	movs	r3, #1
 801633c:	e000      	b.n	8016340 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801633e:	2300      	movs	r3, #0
}
 8016340:	4618      	mov	r0, r3
 8016342:	3708      	adds	r7, #8
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}
 8016348:	20008f54 	.word	0x20008f54

0801634c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	091b      	lsrs	r3, r3, #4
 8016362:	b2db      	uxtb	r3, r3
 8016364:	2b04      	cmp	r3, #4
 8016366:	d004      	beq.n	8016372 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f7f8 ff87 	bl	800f27c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801636e:	2300      	movs	r3, #0
 8016370:	e107      	b.n	8016582 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	f003 030f 	and.w	r3, r3, #15
 801637a:	b2db      	uxtb	r3, r3
 801637c:	009b      	lsls	r3, r3, #2
 801637e:	b2db      	uxtb	r3, r3
 8016380:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016382:	697b      	ldr	r3, [r7, #20]
 8016384:	885b      	ldrh	r3, [r3, #2]
 8016386:	b29b      	uxth	r3, r3
 8016388:	4618      	mov	r0, r3
 801638a:	f7f7 fbb7 	bl	800dafc <lwip_htons>
 801638e:	4603      	mov	r3, r0
 8016390:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	891b      	ldrh	r3, [r3, #8]
 8016396:	89ba      	ldrh	r2, [r7, #12]
 8016398:	429a      	cmp	r2, r3
 801639a:	d204      	bcs.n	80163a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801639c:	89bb      	ldrh	r3, [r7, #12]
 801639e:	4619      	mov	r1, r3
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f7f8 fde5 	bl	800ef70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	895b      	ldrh	r3, [r3, #10]
 80163aa:	89fa      	ldrh	r2, [r7, #14]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d807      	bhi.n	80163c0 <ip4_input+0x74>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	891b      	ldrh	r3, [r3, #8]
 80163b4:	89ba      	ldrh	r2, [r7, #12]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d802      	bhi.n	80163c0 <ip4_input+0x74>
 80163ba:	89fb      	ldrh	r3, [r7, #14]
 80163bc:	2b13      	cmp	r3, #19
 80163be:	d804      	bhi.n	80163ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7f8 ff5b 	bl	800f27c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80163c6:	2300      	movs	r3, #0
 80163c8:	e0db      	b.n	8016582 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	691b      	ldr	r3, [r3, #16]
 80163ce:	4a6f      	ldr	r2, [pc, #444]	@ (801658c <ip4_input+0x240>)
 80163d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	68db      	ldr	r3, [r3, #12]
 80163d6:	4a6d      	ldr	r2, [pc, #436]	@ (801658c <ip4_input+0x240>)
 80163d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80163da:	4b6c      	ldr	r3, [pc, #432]	@ (801658c <ip4_input+0x240>)
 80163dc:	695b      	ldr	r3, [r3, #20]
 80163de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80163e2:	2be0      	cmp	r3, #224	@ 0xe0
 80163e4:	d112      	bne.n	801640c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80163ec:	f003 0301 	and.w	r3, r3, #1
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d007      	beq.n	8016406 <ip4_input+0xba>
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	3304      	adds	r3, #4
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d002      	beq.n	8016406 <ip4_input+0xba>
      netif = inp;
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	613b      	str	r3, [r7, #16]
 8016404:	e02a      	b.n	801645c <ip4_input+0x110>
    } else {
      netif = NULL;
 8016406:	2300      	movs	r3, #0
 8016408:	613b      	str	r3, [r7, #16]
 801640a:	e027      	b.n	801645c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801640c:	6838      	ldr	r0, [r7, #0]
 801640e:	f7ff ff73 	bl	80162f8 <ip4_input_accept>
 8016412:	4603      	mov	r3, r0
 8016414:	2b00      	cmp	r3, #0
 8016416:	d002      	beq.n	801641e <ip4_input+0xd2>
      netif = inp;
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	613b      	str	r3, [r7, #16]
 801641c:	e01e      	b.n	801645c <ip4_input+0x110>
    } else {
      netif = NULL;
 801641e:	2300      	movs	r3, #0
 8016420:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016422:	4b5a      	ldr	r3, [pc, #360]	@ (801658c <ip4_input+0x240>)
 8016424:	695b      	ldr	r3, [r3, #20]
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b7f      	cmp	r3, #127	@ 0x7f
 801642a:	d017      	beq.n	801645c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801642c:	4b58      	ldr	r3, [pc, #352]	@ (8016590 <ip4_input+0x244>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	613b      	str	r3, [r7, #16]
 8016432:	e00e      	b.n	8016452 <ip4_input+0x106>
          if (netif == inp) {
 8016434:	693a      	ldr	r2, [r7, #16]
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	429a      	cmp	r2, r3
 801643a:	d006      	beq.n	801644a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801643c:	6938      	ldr	r0, [r7, #16]
 801643e:	f7ff ff5b 	bl	80162f8 <ip4_input_accept>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d108      	bne.n	801645a <ip4_input+0x10e>
 8016448:	e000      	b.n	801644c <ip4_input+0x100>
            continue;
 801644a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	613b      	str	r3, [r7, #16]
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d1ed      	bne.n	8016434 <ip4_input+0xe8>
 8016458:	e000      	b.n	801645c <ip4_input+0x110>
            break;
 801645a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801645c:	4b4b      	ldr	r3, [pc, #300]	@ (801658c <ip4_input+0x240>)
 801645e:	691b      	ldr	r3, [r3, #16]
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	4618      	mov	r0, r3
 8016464:	f000 f96e 	bl	8016744 <ip4_addr_isbroadcast_u32>
 8016468:	4603      	mov	r3, r0
 801646a:	2b00      	cmp	r3, #0
 801646c:	d105      	bne.n	801647a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801646e:	4b47      	ldr	r3, [pc, #284]	@ (801658c <ip4_input+0x240>)
 8016470:	691b      	ldr	r3, [r3, #16]
 8016472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016476:	2be0      	cmp	r3, #224	@ 0xe0
 8016478:	d104      	bne.n	8016484 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7f8 fefe 	bl	800f27c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016480:	2300      	movs	r3, #0
 8016482:	e07e      	b.n	8016582 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d104      	bne.n	8016494 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f7f8 fef6 	bl	800f27c <pbuf_free>
    return ERR_OK;
 8016490:	2300      	movs	r3, #0
 8016492:	e076      	b.n	8016582 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	88db      	ldrh	r3, [r3, #6]
 8016498:	b29b      	uxth	r3, r3
 801649a:	461a      	mov	r2, r3
 801649c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80164a0:	4013      	ands	r3, r2
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d00b      	beq.n	80164be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f000 fd22 	bl	8016ef0 <ip4_reass>
 80164ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d101      	bne.n	80164b8 <ip4_input+0x16c>
      return ERR_OK;
 80164b4:	2300      	movs	r3, #0
 80164b6:	e064      	b.n	8016582 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80164be:	4a33      	ldr	r2, [pc, #204]	@ (801658c <ip4_input+0x240>)
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80164c4:	4a31      	ldr	r2, [pc, #196]	@ (801658c <ip4_input+0x240>)
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80164ca:	4a30      	ldr	r2, [pc, #192]	@ (801658c <ip4_input+0x240>)
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	f003 030f 	and.w	r3, r3, #15
 80164d8:	b2db      	uxtb	r3, r3
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	461a      	mov	r2, r3
 80164e0:	4b2a      	ldr	r3, [pc, #168]	@ (801658c <ip4_input+0x240>)
 80164e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80164e4:	89fb      	ldrh	r3, [r7, #14]
 80164e6:	4619      	mov	r1, r3
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f7f8 fe41 	bl	800f170 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	7a5b      	ldrb	r3, [r3, #9]
 80164f2:	2b11      	cmp	r3, #17
 80164f4:	d006      	beq.n	8016504 <ip4_input+0x1b8>
 80164f6:	2b11      	cmp	r3, #17
 80164f8:	dc13      	bgt.n	8016522 <ip4_input+0x1d6>
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d00c      	beq.n	8016518 <ip4_input+0x1cc>
 80164fe:	2b06      	cmp	r3, #6
 8016500:	d005      	beq.n	801650e <ip4_input+0x1c2>
 8016502:	e00e      	b.n	8016522 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016504:	6839      	ldr	r1, [r7, #0]
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f7fe fc9a 	bl	8014e40 <udp_input>
        break;
 801650c:	e026      	b.n	801655c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801650e:	6839      	ldr	r1, [r7, #0]
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7fa fce9 	bl	8010ee8 <tcp_input>
        break;
 8016516:	e021      	b.n	801655c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016518:	6839      	ldr	r1, [r7, #0]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f7ff fcf0 	bl	8015f00 <icmp_input>
        break;
 8016520:	e01c      	b.n	801655c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016522:	4b1a      	ldr	r3, [pc, #104]	@ (801658c <ip4_input+0x240>)
 8016524:	695b      	ldr	r3, [r3, #20]
 8016526:	6939      	ldr	r1, [r7, #16]
 8016528:	4618      	mov	r0, r3
 801652a:	f000 f90b 	bl	8016744 <ip4_addr_isbroadcast_u32>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d10f      	bne.n	8016554 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016534:	4b15      	ldr	r3, [pc, #84]	@ (801658c <ip4_input+0x240>)
 8016536:	695b      	ldr	r3, [r3, #20]
 8016538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801653c:	2be0      	cmp	r3, #224	@ 0xe0
 801653e:	d009      	beq.n	8016554 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016544:	4619      	mov	r1, r3
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f7f8 fe85 	bl	800f256 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801654c:	2102      	movs	r1, #2
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f7ff fdd8 	bl	8016104 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f7f8 fe91 	bl	800f27c <pbuf_free>
        break;
 801655a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801655c:	4b0b      	ldr	r3, [pc, #44]	@ (801658c <ip4_input+0x240>)
 801655e:	2200      	movs	r2, #0
 8016560:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016562:	4b0a      	ldr	r3, [pc, #40]	@ (801658c <ip4_input+0x240>)
 8016564:	2200      	movs	r2, #0
 8016566:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016568:	4b08      	ldr	r3, [pc, #32]	@ (801658c <ip4_input+0x240>)
 801656a:	2200      	movs	r2, #0
 801656c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801656e:	4b07      	ldr	r3, [pc, #28]	@ (801658c <ip4_input+0x240>)
 8016570:	2200      	movs	r2, #0
 8016572:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016574:	4b05      	ldr	r3, [pc, #20]	@ (801658c <ip4_input+0x240>)
 8016576:	2200      	movs	r2, #0
 8016578:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801657a:	4b04      	ldr	r3, [pc, #16]	@ (801658c <ip4_input+0x240>)
 801657c:	2200      	movs	r2, #0
 801657e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016580:	2300      	movs	r3, #0
}
 8016582:	4618      	mov	r0, r3
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	20008f54 	.word	0x20008f54
 8016590:	2000c69c 	.word	0x2000c69c

08016594 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b08a      	sub	sp, #40	@ 0x28
 8016598:	af04      	add	r7, sp, #16
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
 80165a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80165a2:	68bb      	ldr	r3, [r7, #8]
 80165a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d009      	beq.n	80165c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d003      	beq.n	80165ba <ip4_output_if+0x26>
 80165b2:	68bb      	ldr	r3, [r7, #8]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d102      	bne.n	80165c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80165ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165bc:	3304      	adds	r3, #4
 80165be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80165c0:	78fa      	ldrb	r2, [r7, #3]
 80165c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165c4:	9302      	str	r3, [sp, #8]
 80165c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80165ca:	9301      	str	r3, [sp, #4]
 80165cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80165d0:	9300      	str	r3, [sp, #0]
 80165d2:	4613      	mov	r3, r2
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	6979      	ldr	r1, [r7, #20]
 80165d8:	68f8      	ldr	r0, [r7, #12]
 80165da:	f000 f805 	bl	80165e8 <ip4_output_if_src>
 80165de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3718      	adds	r7, #24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b088      	sub	sp, #32
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
 80165f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	7b9b      	ldrb	r3, [r3, #14]
 80165fa:	2b01      	cmp	r3, #1
 80165fc:	d006      	beq.n	801660c <ip4_output_if_src+0x24>
 80165fe:	4b4b      	ldr	r3, [pc, #300]	@ (801672c <ip4_output_if_src+0x144>)
 8016600:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016604:	494a      	ldr	r1, [pc, #296]	@ (8016730 <ip4_output_if_src+0x148>)
 8016606:	484b      	ldr	r0, [pc, #300]	@ (8016734 <ip4_output_if_src+0x14c>)
 8016608:	f001 ffb2 	bl	8018570 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d060      	beq.n	80166d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016612:	2314      	movs	r3, #20
 8016614:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016616:	2114      	movs	r1, #20
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f7f8 fd99 	bl	800f150 <pbuf_add_header>
 801661e:	4603      	mov	r3, r0
 8016620:	2b00      	cmp	r3, #0
 8016622:	d002      	beq.n	801662a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016624:	f06f 0301 	mvn.w	r3, #1
 8016628:	e07c      	b.n	8016724 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	895b      	ldrh	r3, [r3, #10]
 8016634:	2b13      	cmp	r3, #19
 8016636:	d806      	bhi.n	8016646 <ip4_output_if_src+0x5e>
 8016638:	4b3c      	ldr	r3, [pc, #240]	@ (801672c <ip4_output_if_src+0x144>)
 801663a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801663e:	493e      	ldr	r1, [pc, #248]	@ (8016738 <ip4_output_if_src+0x150>)
 8016640:	483c      	ldr	r0, [pc, #240]	@ (8016734 <ip4_output_if_src+0x14c>)
 8016642:	f001 ff95 	bl	8018570 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016646:	69fb      	ldr	r3, [r7, #28]
 8016648:	78fa      	ldrb	r2, [r7, #3]
 801664a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016652:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801665c:	8b7b      	ldrh	r3, [r7, #26]
 801665e:	089b      	lsrs	r3, r3, #2
 8016660:	b29b      	uxth	r3, r3
 8016662:	b2db      	uxtb	r3, r3
 8016664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016668:	b2da      	uxtb	r2, r3
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801666e:	69fb      	ldr	r3, [r7, #28]
 8016670:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016674:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	891b      	ldrh	r3, [r3, #8]
 801667a:	4618      	mov	r0, r3
 801667c:	f7f7 fa3e 	bl	800dafc <lwip_htons>
 8016680:	4603      	mov	r3, r0
 8016682:	461a      	mov	r2, r3
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	2200      	movs	r2, #0
 801668c:	719a      	strb	r2, [r3, #6]
 801668e:	2200      	movs	r2, #0
 8016690:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016692:	4b2a      	ldr	r3, [pc, #168]	@ (801673c <ip4_output_if_src+0x154>)
 8016694:	881b      	ldrh	r3, [r3, #0]
 8016696:	4618      	mov	r0, r3
 8016698:	f7f7 fa30 	bl	800dafc <lwip_htons>
 801669c:	4603      	mov	r3, r0
 801669e:	461a      	mov	r2, r3
 80166a0:	69fb      	ldr	r3, [r7, #28]
 80166a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80166a4:	4b25      	ldr	r3, [pc, #148]	@ (801673c <ip4_output_if_src+0x154>)
 80166a6:	881b      	ldrh	r3, [r3, #0]
 80166a8:	3301      	adds	r3, #1
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	4b23      	ldr	r3, [pc, #140]	@ (801673c <ip4_output_if_src+0x154>)
 80166ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d104      	bne.n	80166c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80166b6:	4b22      	ldr	r3, [pc, #136]	@ (8016740 <ip4_output_if_src+0x158>)
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	69fb      	ldr	r3, [r7, #28]
 80166bc:	60da      	str	r2, [r3, #12]
 80166be:	e003      	b.n	80166c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	681a      	ldr	r2, [r3, #0]
 80166c4:	69fb      	ldr	r3, [r7, #28]
 80166c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	2200      	movs	r2, #0
 80166cc:	729a      	strb	r2, [r3, #10]
 80166ce:	2200      	movs	r2, #0
 80166d0:	72da      	strb	r2, [r3, #11]
 80166d2:	e00f      	b.n	80166f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	895b      	ldrh	r3, [r3, #10]
 80166d8:	2b13      	cmp	r3, #19
 80166da:	d802      	bhi.n	80166e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80166dc:	f06f 0301 	mvn.w	r3, #1
 80166e0:	e020      	b.n	8016724 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80166e8:	69fb      	ldr	r3, [r7, #28]
 80166ea:	691b      	ldr	r3, [r3, #16]
 80166ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80166ee:	f107 0314 	add.w	r3, r7, #20
 80166f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80166f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d00c      	beq.n	8016716 <ip4_output_if_src+0x12e>
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	891a      	ldrh	r2, [r3, #8]
 8016700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016702:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016704:	429a      	cmp	r2, r3
 8016706:	d906      	bls.n	8016716 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f000 fde3 	bl	80172d8 <ip4_frag>
 8016712:	4603      	mov	r3, r0
 8016714:	e006      	b.n	8016724 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016718:	695b      	ldr	r3, [r3, #20]
 801671a:	687a      	ldr	r2, [r7, #4]
 801671c:	68f9      	ldr	r1, [r7, #12]
 801671e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016720:	4798      	blx	r3
 8016722:	4603      	mov	r3, r0
}
 8016724:	4618      	mov	r0, r3
 8016726:	3720      	adds	r7, #32
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	0801cdd4 	.word	0x0801cdd4
 8016730:	0801ce08 	.word	0x0801ce08
 8016734:	0801ce14 	.word	0x0801ce14
 8016738:	0801ce3c 	.word	0x0801ce3c
 801673c:	2000c7fa 	.word	0x2000c7fa
 8016740:	0801d2a4 	.word	0x0801d2a4

08016744 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016744:	b480      	push	{r7}
 8016746:	b085      	sub	sp, #20
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
 801674c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016758:	d002      	beq.n	8016760 <ip4_addr_isbroadcast_u32+0x1c>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d101      	bne.n	8016764 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016760:	2301      	movs	r3, #1
 8016762:	e02a      	b.n	80167ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801676a:	f003 0302 	and.w	r3, r3, #2
 801676e:	2b00      	cmp	r3, #0
 8016770:	d101      	bne.n	8016776 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016772:	2300      	movs	r3, #0
 8016774:	e021      	b.n	80167ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	3304      	adds	r3, #4
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	429a      	cmp	r2, r3
 8016780:	d101      	bne.n	8016786 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016782:	2300      	movs	r3, #0
 8016784:	e019      	b.n	80167ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016786:	68fa      	ldr	r2, [r7, #12]
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	3304      	adds	r3, #4
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	405a      	eors	r2, r3
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	3308      	adds	r3, #8
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	4013      	ands	r3, r2
 8016798:	2b00      	cmp	r3, #0
 801679a:	d10d      	bne.n	80167b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	3308      	adds	r3, #8
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	43da      	mvns	r2, r3
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	3308      	adds	r3, #8
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d101      	bne.n	80167b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80167b4:	2301      	movs	r3, #1
 80167b6:	e000      	b.n	80167ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80167b8:	2300      	movs	r3, #0
  }
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3714      	adds	r7, #20
 80167be:	46bd      	mov	sp, r7
 80167c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c4:	4770      	bx	lr
	...

080167c8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80167d0:	2210      	movs	r2, #16
 80167d2:	4904      	ldr	r1, [pc, #16]	@ (80167e4 <ip4addr_ntoa+0x1c>)
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f000 f807 	bl	80167e8 <ip4addr_ntoa_r>
 80167da:	4603      	mov	r3, r0
}
 80167dc:	4618      	mov	r0, r3
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	2000c7fc 	.word	0x2000c7fc

080167e8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80167e8:	b480      	push	{r7}
 80167ea:	b08d      	sub	sp, #52	@ 0x34
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80167f4:	2300      	movs	r3, #0
 80167f6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8016802:	f107 0318 	add.w	r3, r7, #24
 8016806:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8016808:	2300      	movs	r3, #0
 801680a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801680e:	e058      	b.n	80168c2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8016810:	2300      	movs	r3, #0
 8016812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8016816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016818:	781a      	ldrb	r2, [r3, #0]
 801681a:	4b32      	ldr	r3, [pc, #200]	@ (80168e4 <ip4addr_ntoa_r+0xfc>)
 801681c:	fba3 1302 	umull	r1, r3, r3, r2
 8016820:	08d9      	lsrs	r1, r3, #3
 8016822:	460b      	mov	r3, r1
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	440b      	add	r3, r1
 8016828:	005b      	lsls	r3, r3, #1
 801682a:	1ad3      	subs	r3, r2, r3
 801682c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801682e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	4a2c      	ldr	r2, [pc, #176]	@ (80168e4 <ip4addr_ntoa_r+0xfc>)
 8016834:	fba2 2303 	umull	r2, r3, r2, r3
 8016838:	08db      	lsrs	r3, r3, #3
 801683a:	b2da      	uxtb	r2, r3
 801683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801683e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8016840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016844:	1c5a      	adds	r2, r3, #1
 8016846:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801684a:	4619      	mov	r1, r3
 801684c:	7ffb      	ldrb	r3, [r7, #31]
 801684e:	3330      	adds	r3, #48	@ 0x30
 8016850:	b2da      	uxtb	r2, r3
 8016852:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8016856:	443b      	add	r3, r7
 8016858:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801685e:	781b      	ldrb	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d1d8      	bne.n	8016816 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8016864:	e011      	b.n	801688a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8016866:	6a3b      	ldr	r3, [r7, #32]
 8016868:	1c5a      	adds	r2, r3, #1
 801686a:	623a      	str	r2, [r7, #32]
 801686c:	687a      	ldr	r2, [r7, #4]
 801686e:	429a      	cmp	r2, r3
 8016870:	dc01      	bgt.n	8016876 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8016872:	2300      	movs	r3, #0
 8016874:	e030      	b.n	80168d8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8016876:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801687a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801687c:	1c59      	adds	r1, r3, #1
 801687e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8016880:	3230      	adds	r2, #48	@ 0x30
 8016882:	443a      	add	r2, r7
 8016884:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8016888:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801688a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801688e:	1e5a      	subs	r2, r3, #1
 8016890:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8016894:	2b00      	cmp	r3, #0
 8016896:	d1e6      	bne.n	8016866 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8016898:	6a3b      	ldr	r3, [r7, #32]
 801689a:	1c5a      	adds	r2, r3, #1
 801689c:	623a      	str	r2, [r7, #32]
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	dc01      	bgt.n	80168a8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80168a4:	2300      	movs	r3, #0
 80168a6:	e017      	b.n	80168d8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80168a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168aa:	1c5a      	adds	r2, r3, #1
 80168ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80168ae:	222e      	movs	r2, #46	@ 0x2e
 80168b0:	701a      	strb	r2, [r3, #0]
    ap++;
 80168b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b4:	3301      	adds	r3, #1
 80168b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80168b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80168bc:	3301      	adds	r3, #1
 80168be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80168c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80168c6:	2b03      	cmp	r3, #3
 80168c8:	d9a2      	bls.n	8016810 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80168ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168cc:	3b01      	subs	r3, #1
 80168ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80168d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168d2:	2200      	movs	r2, #0
 80168d4:	701a      	strb	r2, [r3, #0]
  return buf;
 80168d6:	68bb      	ldr	r3, [r7, #8]
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3734      	adds	r7, #52	@ 0x34
 80168dc:	46bd      	mov	sp, r7
 80168de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e2:	4770      	bx	lr
 80168e4:	cccccccd 	.word	0xcccccccd

080168e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b084      	sub	sp, #16
 80168ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80168ee:	2300      	movs	r3, #0
 80168f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80168f2:	4b12      	ldr	r3, [pc, #72]	@ (801693c <ip_reass_tmr+0x54>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80168f8:	e018      	b.n	801692c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	7fdb      	ldrb	r3, [r3, #31]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d00b      	beq.n	801691a <ip_reass_tmr+0x32>
      r->timer--;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	7fdb      	ldrb	r3, [r3, #31]
 8016906:	3b01      	subs	r3, #1
 8016908:	b2da      	uxtb	r2, r3
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	60fb      	str	r3, [r7, #12]
 8016918:	e008      	b.n	801692c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016924:	68b9      	ldr	r1, [r7, #8]
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f000 f80a 	bl	8016940 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d1e3      	bne.n	80168fa <ip_reass_tmr+0x12>
    }
  }
}
 8016932:	bf00      	nop
 8016934:	bf00      	nop
 8016936:	3710      	adds	r7, #16
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	2000c80c 	.word	0x2000c80c

08016940 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b088      	sub	sp, #32
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801694a:	2300      	movs	r3, #0
 801694c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801694e:	683a      	ldr	r2, [r7, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	429a      	cmp	r2, r3
 8016954:	d105      	bne.n	8016962 <ip_reass_free_complete_datagram+0x22>
 8016956:	4b45      	ldr	r3, [pc, #276]	@ (8016a6c <ip_reass_free_complete_datagram+0x12c>)
 8016958:	22ab      	movs	r2, #171	@ 0xab
 801695a:	4945      	ldr	r1, [pc, #276]	@ (8016a70 <ip_reass_free_complete_datagram+0x130>)
 801695c:	4845      	ldr	r0, [pc, #276]	@ (8016a74 <ip_reass_free_complete_datagram+0x134>)
 801695e:	f001 fe07 	bl	8018570 <iprintf>
  if (prev != NULL) {
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d00a      	beq.n	801697e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	429a      	cmp	r2, r3
 8016970:	d005      	beq.n	801697e <ip_reass_free_complete_datagram+0x3e>
 8016972:	4b3e      	ldr	r3, [pc, #248]	@ (8016a6c <ip_reass_free_complete_datagram+0x12c>)
 8016974:	22ad      	movs	r2, #173	@ 0xad
 8016976:	4940      	ldr	r1, [pc, #256]	@ (8016a78 <ip_reass_free_complete_datagram+0x138>)
 8016978:	483e      	ldr	r0, [pc, #248]	@ (8016a74 <ip_reass_free_complete_datagram+0x134>)
 801697a:	f001 fdf9 	bl	8018570 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	889b      	ldrh	r3, [r3, #4]
 801698a:	b29b      	uxth	r3, r3
 801698c:	2b00      	cmp	r3, #0
 801698e:	d12a      	bne.n	80169e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016996:	697b      	ldr	r3, [r7, #20]
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801699e:	69bb      	ldr	r3, [r7, #24]
 80169a0:	6858      	ldr	r0, [r3, #4]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	3308      	adds	r3, #8
 80169a6:	2214      	movs	r2, #20
 80169a8:	4619      	mov	r1, r3
 80169aa:	f001 ff6a 	bl	8018882 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80169ae:	2101      	movs	r1, #1
 80169b0:	69b8      	ldr	r0, [r7, #24]
 80169b2:	f7ff fbb7 	bl	8016124 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80169b6:	69b8      	ldr	r0, [r7, #24]
 80169b8:	f7f8 fcee 	bl	800f398 <pbuf_clen>
 80169bc:	4603      	mov	r3, r0
 80169be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80169c0:	8bfa      	ldrh	r2, [r7, #30]
 80169c2:	8a7b      	ldrh	r3, [r7, #18]
 80169c4:	4413      	add	r3, r2
 80169c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80169ca:	db05      	blt.n	80169d8 <ip_reass_free_complete_datagram+0x98>
 80169cc:	4b27      	ldr	r3, [pc, #156]	@ (8016a6c <ip_reass_free_complete_datagram+0x12c>)
 80169ce:	22bc      	movs	r2, #188	@ 0xbc
 80169d0:	492a      	ldr	r1, [pc, #168]	@ (8016a7c <ip_reass_free_complete_datagram+0x13c>)
 80169d2:	4828      	ldr	r0, [pc, #160]	@ (8016a74 <ip_reass_free_complete_datagram+0x134>)
 80169d4:	f001 fdcc 	bl	8018570 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169d8:	8bfa      	ldrh	r2, [r7, #30]
 80169da:	8a7b      	ldrh	r3, [r7, #18]
 80169dc:	4413      	add	r3, r2
 80169de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80169e0:	69b8      	ldr	r0, [r7, #24]
 80169e2:	f7f8 fc4b 	bl	800f27c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80169ec:	e01f      	b.n	8016a2e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80169ee:	69bb      	ldr	r3, [r7, #24]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80169f4:	69bb      	ldr	r3, [r7, #24]
 80169f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80169fe:	68f8      	ldr	r0, [r7, #12]
 8016a00:	f7f8 fcca 	bl	800f398 <pbuf_clen>
 8016a04:	4603      	mov	r3, r0
 8016a06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a08:	8bfa      	ldrh	r2, [r7, #30]
 8016a0a:	8a7b      	ldrh	r3, [r7, #18]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016a12:	db05      	blt.n	8016a20 <ip_reass_free_complete_datagram+0xe0>
 8016a14:	4b15      	ldr	r3, [pc, #84]	@ (8016a6c <ip_reass_free_complete_datagram+0x12c>)
 8016a16:	22cc      	movs	r2, #204	@ 0xcc
 8016a18:	4918      	ldr	r1, [pc, #96]	@ (8016a7c <ip_reass_free_complete_datagram+0x13c>)
 8016a1a:	4816      	ldr	r0, [pc, #88]	@ (8016a74 <ip_reass_free_complete_datagram+0x134>)
 8016a1c:	f001 fda8 	bl	8018570 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016a20:	8bfa      	ldrh	r2, [r7, #30]
 8016a22:	8a7b      	ldrh	r3, [r7, #18]
 8016a24:	4413      	add	r3, r2
 8016a26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f7f8 fc27 	bl	800f27c <pbuf_free>
  while (p != NULL) {
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d1dc      	bne.n	80169ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016a34:	6839      	ldr	r1, [r7, #0]
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 f8c2 	bl	8016bc0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016a3c:	4b10      	ldr	r3, [pc, #64]	@ (8016a80 <ip_reass_free_complete_datagram+0x140>)
 8016a3e:	881b      	ldrh	r3, [r3, #0]
 8016a40:	8bfa      	ldrh	r2, [r7, #30]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d905      	bls.n	8016a52 <ip_reass_free_complete_datagram+0x112>
 8016a46:	4b09      	ldr	r3, [pc, #36]	@ (8016a6c <ip_reass_free_complete_datagram+0x12c>)
 8016a48:	22d2      	movs	r2, #210	@ 0xd2
 8016a4a:	490e      	ldr	r1, [pc, #56]	@ (8016a84 <ip_reass_free_complete_datagram+0x144>)
 8016a4c:	4809      	ldr	r0, [pc, #36]	@ (8016a74 <ip_reass_free_complete_datagram+0x134>)
 8016a4e:	f001 fd8f 	bl	8018570 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016a52:	4b0b      	ldr	r3, [pc, #44]	@ (8016a80 <ip_reass_free_complete_datagram+0x140>)
 8016a54:	881a      	ldrh	r2, [r3, #0]
 8016a56:	8bfb      	ldrh	r3, [r7, #30]
 8016a58:	1ad3      	subs	r3, r2, r3
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	4b08      	ldr	r3, [pc, #32]	@ (8016a80 <ip_reass_free_complete_datagram+0x140>)
 8016a5e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016a60:	8bfb      	ldrh	r3, [r7, #30]
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3720      	adds	r7, #32
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	0801ce6c 	.word	0x0801ce6c
 8016a70:	0801cea8 	.word	0x0801cea8
 8016a74:	0801ceb4 	.word	0x0801ceb4
 8016a78:	0801cedc 	.word	0x0801cedc
 8016a7c:	0801cef0 	.word	0x0801cef0
 8016a80:	2000c810 	.word	0x2000c810
 8016a84:	0801cf10 	.word	0x0801cf10

08016a88 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b08a      	sub	sp, #40	@ 0x28
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a92:	2300      	movs	r3, #0
 8016a94:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a96:	2300      	movs	r3, #0
 8016a98:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016aa6:	4b28      	ldr	r3, [pc, #160]	@ (8016b48 <ip_reass_remove_oldest_datagram+0xc0>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016aac:	e030      	b.n	8016b10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab0:	695a      	ldr	r2, [r3, #20]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d10c      	bne.n	8016ad4 <ip_reass_remove_oldest_datagram+0x4c>
 8016aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016abc:	699a      	ldr	r2, [r3, #24]
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	691b      	ldr	r3, [r3, #16]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d106      	bne.n	8016ad4 <ip_reass_remove_oldest_datagram+0x4c>
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac8:	899a      	ldrh	r2, [r3, #12]
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	889b      	ldrh	r3, [r3, #4]
 8016ace:	b29b      	uxth	r3, r3
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d014      	beq.n	8016afe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ada:	6a3b      	ldr	r3, [r7, #32]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d104      	bne.n	8016aea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	61bb      	str	r3, [r7, #24]
 8016ae8:	e009      	b.n	8016afe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aec:	7fda      	ldrb	r2, [r3, #31]
 8016aee:	6a3b      	ldr	r3, [r7, #32]
 8016af0:	7fdb      	ldrb	r3, [r3, #31]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d803      	bhi.n	8016afe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016afa:	69fb      	ldr	r3, [r7, #28]
 8016afc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d001      	beq.n	8016b0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d1cb      	bne.n	8016aae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016b16:	6a3b      	ldr	r3, [r7, #32]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d008      	beq.n	8016b2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016b1c:	69b9      	ldr	r1, [r7, #24]
 8016b1e:	6a38      	ldr	r0, [r7, #32]
 8016b20:	f7ff ff0e 	bl	8016940 <ip_reass_free_complete_datagram>
 8016b24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016b26:	697a      	ldr	r2, [r7, #20]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016b2e:	697a      	ldr	r2, [r7, #20]
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	da02      	bge.n	8016b3c <ip_reass_remove_oldest_datagram+0xb4>
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	dcac      	bgt.n	8016a96 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016b3c:	697b      	ldr	r3, [r7, #20]
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3728      	adds	r7, #40	@ 0x28
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	2000c80c 	.word	0x2000c80c

08016b4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b084      	sub	sp, #16
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b56:	2004      	movs	r0, #4
 8016b58:	f7f7 fca8 	bl	800e4ac <memp_malloc>
 8016b5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d110      	bne.n	8016b86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016b64:	6839      	ldr	r1, [r7, #0]
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7ff ff8e 	bl	8016a88 <ip_reass_remove_oldest_datagram>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	4293      	cmp	r3, r2
 8016b72:	dc03      	bgt.n	8016b7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b74:	2004      	movs	r0, #4
 8016b76:	f7f7 fc99 	bl	800e4ac <memp_malloc>
 8016b7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d101      	bne.n	8016b86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b82:	2300      	movs	r3, #0
 8016b84:	e016      	b.n	8016bb4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b86:	2220      	movs	r2, #32
 8016b88:	2100      	movs	r1, #0
 8016b8a:	68f8      	ldr	r0, [r7, #12]
 8016b8c:	f001 fda5 	bl	80186da <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	220f      	movs	r2, #15
 8016b94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b96:	4b09      	ldr	r3, [pc, #36]	@ (8016bbc <ip_reass_enqueue_new_datagram+0x70>)
 8016b98:	681a      	ldr	r2, [r3, #0]
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016b9e:	4a07      	ldr	r2, [pc, #28]	@ (8016bbc <ip_reass_enqueue_new_datagram+0x70>)
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	3308      	adds	r3, #8
 8016ba8:	2214      	movs	r2, #20
 8016baa:	6879      	ldr	r1, [r7, #4]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f001 fe68 	bl	8018882 <memcpy>
  return ipr;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3710      	adds	r7, #16
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}
 8016bbc:	2000c80c 	.word	0x2000c80c

08016bc0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016bca:	4b10      	ldr	r3, [pc, #64]	@ (8016c0c <ip_reass_dequeue_datagram+0x4c>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d104      	bne.n	8016bde <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8016c0c <ip_reass_dequeue_datagram+0x4c>)
 8016bda:	6013      	str	r3, [r2, #0]
 8016bdc:	e00d      	b.n	8016bfa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d106      	bne.n	8016bf2 <ip_reass_dequeue_datagram+0x32>
 8016be4:	4b0a      	ldr	r3, [pc, #40]	@ (8016c10 <ip_reass_dequeue_datagram+0x50>)
 8016be6:	f240 1245 	movw	r2, #325	@ 0x145
 8016bea:	490a      	ldr	r1, [pc, #40]	@ (8016c14 <ip_reass_dequeue_datagram+0x54>)
 8016bec:	480a      	ldr	r0, [pc, #40]	@ (8016c18 <ip_reass_dequeue_datagram+0x58>)
 8016bee:	f001 fcbf 	bl	8018570 <iprintf>
    prev->next = ipr->next;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016bfa:	6879      	ldr	r1, [r7, #4]
 8016bfc:	2004      	movs	r0, #4
 8016bfe:	f7f7 fccb 	bl	800e598 <memp_free>
}
 8016c02:	bf00      	nop
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	2000c80c 	.word	0x2000c80c
 8016c10:	0801ce6c 	.word	0x0801ce6c
 8016c14:	0801cf34 	.word	0x0801cf34
 8016c18:	0801ceb4 	.word	0x0801ceb4

08016c1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b08c      	sub	sp, #48	@ 0x30
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	685b      	ldr	r3, [r3, #4]
 8016c34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	885b      	ldrh	r3, [r3, #2]
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7f6 ff5d 	bl	800dafc <lwip_htons>
 8016c42:	4603      	mov	r3, r0
 8016c44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	781b      	ldrb	r3, [r3, #0]
 8016c4a:	f003 030f 	and.w	r3, r3, #15
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	009b      	lsls	r3, r3, #2
 8016c52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016c54:	7e7b      	ldrb	r3, [r7, #25]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	8b7a      	ldrh	r2, [r7, #26]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d202      	bcs.n	8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c62:	e135      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016c64:	7e7b      	ldrb	r3, [r7, #25]
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	8b7a      	ldrh	r2, [r7, #26]
 8016c6a:	1ad3      	subs	r3, r2, r3
 8016c6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	88db      	ldrh	r3, [r3, #6]
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7f6 ff41 	bl	800dafc <lwip_htons>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8e:	2200      	movs	r2, #0
 8016c90:	701a      	strb	r2, [r3, #0]
 8016c92:	2200      	movs	r2, #0
 8016c94:	705a      	strb	r2, [r3, #1]
 8016c96:	2200      	movs	r2, #0
 8016c98:	709a      	strb	r2, [r3, #2]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ca0:	8afa      	ldrh	r2, [r7, #22]
 8016ca2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016ca4:	8afa      	ldrh	r2, [r7, #22]
 8016ca6:	8b7b      	ldrh	r3, [r7, #26]
 8016ca8:	4413      	add	r3, r2
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cb2:	88db      	ldrh	r3, [r3, #6]
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	8afa      	ldrh	r2, [r7, #22]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d902      	bls.n	8016cc2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8016cc0:	e106      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	685b      	ldr	r3, [r3, #4]
 8016cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8016cc8:	e068      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cd2:	889b      	ldrh	r3, [r3, #4]
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	889b      	ldrh	r3, [r3, #4]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d235      	bcs.n	8016d4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ce4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d020      	beq.n	8016d2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cee:	889b      	ldrh	r3, [r3, #4]
 8016cf0:	b29a      	uxth	r2, r3
 8016cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cf4:	88db      	ldrh	r3, [r3, #6]
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d307      	bcc.n	8016d0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cfe:	88db      	ldrh	r3, [r3, #6]
 8016d00:	b29a      	uxth	r2, r3
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	889b      	ldrh	r3, [r3, #4]
 8016d06:	b29b      	uxth	r3, r3
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d902      	bls.n	8016d12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d10:	e0de      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d14:	68ba      	ldr	r2, [r7, #8]
 8016d16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d1a:	88db      	ldrh	r3, [r3, #6]
 8016d1c:	b29a      	uxth	r2, r3
 8016d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d20:	889b      	ldrh	r3, [r3, #4]
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d03d      	beq.n	8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016d2c:	e03a      	b.n	8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d30:	88db      	ldrh	r3, [r3, #6]
 8016d32:	b29a      	uxth	r2, r3
 8016d34:	693b      	ldr	r3, [r7, #16]
 8016d36:	889b      	ldrh	r3, [r3, #4]
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d902      	bls.n	8016d44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d42:	e0c5      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	68ba      	ldr	r2, [r7, #8]
 8016d48:	605a      	str	r2, [r3, #4]
      break;
 8016d4a:	e02b      	b.n	8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d4e:	889b      	ldrh	r3, [r3, #4]
 8016d50:	b29a      	uxth	r2, r3
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	889b      	ldrh	r3, [r3, #4]
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d102      	bne.n	8016d62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d60:	e0b6      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d64:	889b      	ldrh	r3, [r3, #4]
 8016d66:	b29a      	uxth	r2, r3
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	88db      	ldrh	r3, [r3, #6]
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d202      	bcs.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d72:	f04f 33ff 	mov.w	r3, #4294967295
 8016d76:	e0ab      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d009      	beq.n	8016d92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d80:	88db      	ldrh	r3, [r3, #6]
 8016d82:	b29a      	uxth	r2, r3
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	889b      	ldrh	r3, [r3, #4]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d001      	beq.n	8016d92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d193      	bne.n	8016cca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016da2:	e000      	b.n	8016da6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016da4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d12d      	bne.n	8016e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d01c      	beq.n	8016dec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db4:	88db      	ldrh	r3, [r3, #6]
 8016db6:	b29a      	uxth	r2, r3
 8016db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dba:	889b      	ldrh	r3, [r3, #4]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d906      	bls.n	8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016dc2:	4b45      	ldr	r3, [pc, #276]	@ (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016dc4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016dc8:	4944      	ldr	r1, [pc, #272]	@ (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016dca:	4845      	ldr	r0, [pc, #276]	@ (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dcc:	f001 fbd0 	bl	8018570 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd2:	68ba      	ldr	r2, [r7, #8]
 8016dd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd8:	88db      	ldrh	r3, [r3, #6]
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dde:	889b      	ldrh	r3, [r3, #4]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d010      	beq.n	8016e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016de6:	2300      	movs	r3, #0
 8016de8:	623b      	str	r3, [r7, #32]
 8016dea:	e00d      	b.n	8016e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d006      	beq.n	8016e02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016df4:	4b38      	ldr	r3, [pc, #224]	@ (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016df6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016dfa:	493a      	ldr	r1, [pc, #232]	@ (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016dfc:	4838      	ldr	r0, [pc, #224]	@ (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dfe:	f001 fbb7 	bl	8018570 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	68ba      	ldr	r2, [r7, #8]
 8016e06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d105      	bne.n	8016e1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	7f9b      	ldrb	r3, [r3, #30]
 8016e12:	f003 0301 	and.w	r3, r3, #1
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d059      	beq.n	8016ece <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016e1a:	6a3b      	ldr	r3, [r7, #32]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d04f      	beq.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d006      	beq.n	8016e36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	685b      	ldr	r3, [r3, #4]
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	889b      	ldrh	r3, [r3, #4]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d002      	beq.n	8016e3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	623b      	str	r3, [r7, #32]
 8016e3a:	e041      	b.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016e46:	e012      	b.n	8016e6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4a:	685b      	ldr	r3, [r3, #4]
 8016e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e50:	88db      	ldrh	r3, [r3, #6]
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e56:	889b      	ldrh	r3, [r3, #4]
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d002      	beq.n	8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	623b      	str	r3, [r7, #32]
            break;
 8016e62:	e007      	b.n	8016e74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e66:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d1e9      	bne.n	8016e48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e74:	6a3b      	ldr	r3, [r7, #32]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d022      	beq.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d106      	bne.n	8016e90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016e82:	4b15      	ldr	r3, [pc, #84]	@ (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e84:	f240 12df 	movw	r2, #479	@ 0x1df
 8016e88:	4917      	ldr	r1, [pc, #92]	@ (8016ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e8a:	4815      	ldr	r0, [pc, #84]	@ (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e8c:	f001 fb70 	bl	8018570 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d106      	bne.n	8016eaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e9e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016ea2:	4911      	ldr	r1, [pc, #68]	@ (8016ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ea4:	480e      	ldr	r0, [pc, #56]	@ (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ea6:	f001 fb63 	bl	8018570 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d006      	beq.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016eb2:	4b09      	ldr	r3, [pc, #36]	@ (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016eb4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016eb8:	490c      	ldr	r1, [pc, #48]	@ (8016eec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016eba:	4809      	ldr	r0, [pc, #36]	@ (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ebc:	f001 fb58 	bl	8018570 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016ec0:	6a3b      	ldr	r3, [r7, #32]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	bf14      	ite	ne
 8016ec6:	2301      	movne	r3, #1
 8016ec8:	2300      	moveq	r3, #0
 8016eca:	b2db      	uxtb	r3, r3
 8016ecc:	e000      	b.n	8016ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016ece:	2300      	movs	r3, #0
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3730      	adds	r7, #48	@ 0x30
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}
 8016ed8:	0801ce6c 	.word	0x0801ce6c
 8016edc:	0801cf50 	.word	0x0801cf50
 8016ee0:	0801ceb4 	.word	0x0801ceb4
 8016ee4:	0801cf70 	.word	0x0801cf70
 8016ee8:	0801cfa8 	.word	0x0801cfa8
 8016eec:	0801cfb8 	.word	0x0801cfb8

08016ef0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b08e      	sub	sp, #56	@ 0x38
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	f003 030f 	and.w	r3, r3, #15
 8016f06:	b2db      	uxtb	r3, r3
 8016f08:	009b      	lsls	r3, r3, #2
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	2b14      	cmp	r3, #20
 8016f0e:	f040 8171 	bne.w	80171f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f14:	88db      	ldrh	r3, [r3, #6]
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f6 fdef 	bl	800dafc <lwip_htons>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f2c:	885b      	ldrh	r3, [r3, #2]
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7f6 fde3 	bl	800dafc <lwip_htons>
 8016f36:	4603      	mov	r3, r0
 8016f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	f003 030f 	and.w	r3, r3, #15
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016f52:	429a      	cmp	r2, r3
 8016f54:	f0c0 8150 	bcc.w	80171f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016f58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016f60:	1ad3      	subs	r3, r2, r3
 8016f62:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f7f8 fa17 	bl	800f398 <pbuf_clen>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80171a0 <ip4_reass+0x2b0>)
 8016f70:	881b      	ldrh	r3, [r3, #0]
 8016f72:	461a      	mov	r2, r3
 8016f74:	8c3b      	ldrh	r3, [r7, #32]
 8016f76:	4413      	add	r3, r2
 8016f78:	2b0a      	cmp	r3, #10
 8016f7a:	dd10      	ble.n	8016f9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f7c:	8c3b      	ldrh	r3, [r7, #32]
 8016f7e:	4619      	mov	r1, r3
 8016f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f82:	f7ff fd81 	bl	8016a88 <ip_reass_remove_oldest_datagram>
 8016f86:	4603      	mov	r3, r0
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	f000 8137 	beq.w	80171fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f8e:	4b84      	ldr	r3, [pc, #528]	@ (80171a0 <ip4_reass+0x2b0>)
 8016f90:	881b      	ldrh	r3, [r3, #0]
 8016f92:	461a      	mov	r2, r3
 8016f94:	8c3b      	ldrh	r3, [r7, #32]
 8016f96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f98:	2b0a      	cmp	r3, #10
 8016f9a:	f300 812f 	bgt.w	80171fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f9e:	4b81      	ldr	r3, [pc, #516]	@ (80171a4 <ip4_reass+0x2b4>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8016fa4:	e015      	b.n	8016fd2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa8:	695a      	ldr	r2, [r3, #20]
 8016faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fac:	68db      	ldr	r3, [r3, #12]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d10c      	bne.n	8016fcc <ip4_reass+0xdc>
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb4:	699a      	ldr	r2, [r3, #24]
 8016fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb8:	691b      	ldr	r3, [r3, #16]
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d106      	bne.n	8016fcc <ip4_reass+0xdc>
 8016fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc0:	899a      	ldrh	r2, [r3, #12]
 8016fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc4:	889b      	ldrh	r3, [r3, #4]
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d006      	beq.n	8016fda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d1e6      	bne.n	8016fa6 <ip4_reass+0xb6>
 8016fd8:	e000      	b.n	8016fdc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016fda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d109      	bne.n	8016ff6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016fe2:	8c3b      	ldrh	r3, [r7, #32]
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fe8:	f7ff fdb0 	bl	8016b4c <ip_reass_enqueue_new_datagram>
 8016fec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d11c      	bne.n	801702e <ip4_reass+0x13e>
      goto nullreturn;
 8016ff4:	e105      	b.n	8017202 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ff8:	88db      	ldrh	r3, [r3, #6]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7f6 fd7d 	bl	800dafc <lwip_htons>
 8017002:	4603      	mov	r3, r0
 8017004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017008:	2b00      	cmp	r3, #0
 801700a:	d110      	bne.n	801702e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801700e:	89db      	ldrh	r3, [r3, #14]
 8017010:	4618      	mov	r0, r3
 8017012:	f7f6 fd73 	bl	800dafc <lwip_htons>
 8017016:	4603      	mov	r3, r0
 8017018:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801701c:	2b00      	cmp	r3, #0
 801701e:	d006      	beq.n	801702e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017022:	3308      	adds	r3, #8
 8017024:	2214      	movs	r2, #20
 8017026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017028:	4618      	mov	r0, r3
 801702a:	f001 fc2a 	bl	8018882 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017030:	88db      	ldrh	r3, [r3, #6]
 8017032:	b29b      	uxth	r3, r3
 8017034:	f003 0320 	and.w	r3, r3, #32
 8017038:	2b00      	cmp	r3, #0
 801703a:	bf0c      	ite	eq
 801703c:	2301      	moveq	r3, #1
 801703e:	2300      	movne	r3, #0
 8017040:	b2db      	uxtb	r3, r3
 8017042:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d00e      	beq.n	8017068 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801704a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801704c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801704e:	4413      	add	r3, r2
 8017050:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017052:	8b7a      	ldrh	r2, [r7, #26]
 8017054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017056:	429a      	cmp	r2, r3
 8017058:	f0c0 80a0 	bcc.w	801719c <ip4_reass+0x2ac>
 801705c:	8b7b      	ldrh	r3, [r7, #26]
 801705e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017062:	4293      	cmp	r3, r2
 8017064:	f200 809a 	bhi.w	801719c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017068:	69fa      	ldr	r2, [r7, #28]
 801706a:	6879      	ldr	r1, [r7, #4]
 801706c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801706e:	f7ff fdd5 	bl	8016c1c <ip_reass_chain_frag_into_datagram_and_validate>
 8017072:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801707a:	f000 809b 	beq.w	80171b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801707e:	4b48      	ldr	r3, [pc, #288]	@ (80171a0 <ip4_reass+0x2b0>)
 8017080:	881a      	ldrh	r2, [r3, #0]
 8017082:	8c3b      	ldrh	r3, [r7, #32]
 8017084:	4413      	add	r3, r2
 8017086:	b29a      	uxth	r2, r3
 8017088:	4b45      	ldr	r3, [pc, #276]	@ (80171a0 <ip4_reass+0x2b0>)
 801708a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801708c:	69fb      	ldr	r3, [r7, #28]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d00d      	beq.n	80170ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017092:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017094:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017096:	4413      	add	r3, r2
 8017098:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801709c:	8a7a      	ldrh	r2, [r7, #18]
 801709e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80170a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a2:	7f9b      	ldrb	r3, [r3, #30]
 80170a4:	f043 0301 	orr.w	r3, r3, #1
 80170a8:	b2da      	uxtb	r2, r3
 80170aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	d171      	bne.n	8017198 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80170b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170b6:	8b9b      	ldrh	r3, [r3, #28]
 80170b8:	3314      	adds	r3, #20
 80170ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80170bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80170c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	685b      	ldr	r3, [r3, #4]
 80170cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80170ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170d0:	3308      	adds	r3, #8
 80170d2:	2214      	movs	r2, #20
 80170d4:	4619      	mov	r1, r3
 80170d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170d8:	f001 fbd3 	bl	8018882 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80170dc:	8a3b      	ldrh	r3, [r7, #16]
 80170de:	4618      	mov	r0, r3
 80170e0:	f7f6 fd0c 	bl	800dafc <lwip_htons>
 80170e4:	4603      	mov	r3, r0
 80170e6:	461a      	mov	r2, r3
 80170e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80170ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ee:	2200      	movs	r2, #0
 80170f0:	719a      	strb	r2, [r3, #6]
 80170f2:	2200      	movs	r2, #0
 80170f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80170f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f8:	2200      	movs	r2, #0
 80170fa:	729a      	strb	r2, [r3, #10]
 80170fc:	2200      	movs	r2, #0
 80170fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017106:	e00d      	b.n	8017124 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801710e:	2114      	movs	r1, #20
 8017110:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017112:	f7f8 f82d 	bl	800f170 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017116:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017118:	6878      	ldr	r0, [r7, #4]
 801711a:	f7f8 f97d 	bl	800f418 <pbuf_cat>
      r = iprh->next_pbuf;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017126:	2b00      	cmp	r3, #0
 8017128:	d1ee      	bne.n	8017108 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801712a:	4b1e      	ldr	r3, [pc, #120]	@ (80171a4 <ip4_reass+0x2b4>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017130:	429a      	cmp	r2, r3
 8017132:	d102      	bne.n	801713a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017134:	2300      	movs	r3, #0
 8017136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017138:	e010      	b.n	801715c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801713a:	4b1a      	ldr	r3, [pc, #104]	@ (80171a4 <ip4_reass+0x2b4>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017140:	e007      	b.n	8017152 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017148:	429a      	cmp	r2, r3
 801714a:	d006      	beq.n	801715a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017154:	2b00      	cmp	r3, #0
 8017156:	d1f4      	bne.n	8017142 <ip4_reass+0x252>
 8017158:	e000      	b.n	801715c <ip4_reass+0x26c>
          break;
 801715a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801715c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801715e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017160:	f7ff fd2e 	bl	8016bc0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f7f8 f917 	bl	800f398 <pbuf_clen>
 801716a:	4603      	mov	r3, r0
 801716c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801716e:	4b0c      	ldr	r3, [pc, #48]	@ (80171a0 <ip4_reass+0x2b0>)
 8017170:	881b      	ldrh	r3, [r3, #0]
 8017172:	8c3a      	ldrh	r2, [r7, #32]
 8017174:	429a      	cmp	r2, r3
 8017176:	d906      	bls.n	8017186 <ip4_reass+0x296>
 8017178:	4b0b      	ldr	r3, [pc, #44]	@ (80171a8 <ip4_reass+0x2b8>)
 801717a:	f240 229b 	movw	r2, #667	@ 0x29b
 801717e:	490b      	ldr	r1, [pc, #44]	@ (80171ac <ip4_reass+0x2bc>)
 8017180:	480b      	ldr	r0, [pc, #44]	@ (80171b0 <ip4_reass+0x2c0>)
 8017182:	f001 f9f5 	bl	8018570 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017186:	4b06      	ldr	r3, [pc, #24]	@ (80171a0 <ip4_reass+0x2b0>)
 8017188:	881a      	ldrh	r2, [r3, #0]
 801718a:	8c3b      	ldrh	r3, [r7, #32]
 801718c:	1ad3      	subs	r3, r2, r3
 801718e:	b29a      	uxth	r2, r3
 8017190:	4b03      	ldr	r3, [pc, #12]	@ (80171a0 <ip4_reass+0x2b0>)
 8017192:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	e038      	b.n	801720a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017198:	2300      	movs	r3, #0
 801719a:	e036      	b.n	801720a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801719c:	bf00      	nop
 801719e:	e00a      	b.n	80171b6 <ip4_reass+0x2c6>
 80171a0:	2000c810 	.word	0x2000c810
 80171a4:	2000c80c 	.word	0x2000c80c
 80171a8:	0801ce6c 	.word	0x0801ce6c
 80171ac:	0801cfdc 	.word	0x0801cfdc
 80171b0:	0801ceb4 	.word	0x0801ceb4
    goto nullreturn_ipr;
 80171b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80171b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d106      	bne.n	80171ca <ip4_reass+0x2da>
 80171bc:	4b15      	ldr	r3, [pc, #84]	@ (8017214 <ip4_reass+0x324>)
 80171be:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80171c2:	4915      	ldr	r1, [pc, #84]	@ (8017218 <ip4_reass+0x328>)
 80171c4:	4815      	ldr	r0, [pc, #84]	@ (801721c <ip4_reass+0x32c>)
 80171c6:	f001 f9d3 	bl	8018570 <iprintf>
  if (ipr->p == NULL) {
 80171ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171cc:	685b      	ldr	r3, [r3, #4]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d116      	bne.n	8017200 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80171d2:	4b13      	ldr	r3, [pc, #76]	@ (8017220 <ip4_reass+0x330>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80171d8:	429a      	cmp	r2, r3
 80171da:	d006      	beq.n	80171ea <ip4_reass+0x2fa>
 80171dc:	4b0d      	ldr	r3, [pc, #52]	@ (8017214 <ip4_reass+0x324>)
 80171de:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80171e2:	4910      	ldr	r1, [pc, #64]	@ (8017224 <ip4_reass+0x334>)
 80171e4:	480d      	ldr	r0, [pc, #52]	@ (801721c <ip4_reass+0x32c>)
 80171e6:	f001 f9c3 	bl	8018570 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80171ea:	2100      	movs	r1, #0
 80171ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171ee:	f7ff fce7 	bl	8016bc0 <ip_reass_dequeue_datagram>
 80171f2:	e006      	b.n	8017202 <ip4_reass+0x312>
    goto nullreturn;
 80171f4:	bf00      	nop
 80171f6:	e004      	b.n	8017202 <ip4_reass+0x312>
    goto nullreturn;
 80171f8:	bf00      	nop
 80171fa:	e002      	b.n	8017202 <ip4_reass+0x312>
      goto nullreturn;
 80171fc:	bf00      	nop
 80171fe:	e000      	b.n	8017202 <ip4_reass+0x312>
  }

nullreturn:
 8017200:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f7f8 f83a 	bl	800f27c <pbuf_free>
  return NULL;
 8017208:	2300      	movs	r3, #0
}
 801720a:	4618      	mov	r0, r3
 801720c:	3738      	adds	r7, #56	@ 0x38
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop
 8017214:	0801ce6c 	.word	0x0801ce6c
 8017218:	0801cff8 	.word	0x0801cff8
 801721c:	0801ceb4 	.word	0x0801ceb4
 8017220:	2000c80c 	.word	0x2000c80c
 8017224:	0801d004 	.word	0x0801d004

08017228 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801722c:	2005      	movs	r0, #5
 801722e:	f7f7 f93d 	bl	800e4ac <memp_malloc>
 8017232:	4603      	mov	r3, r0
}
 8017234:	4618      	mov	r0, r3
 8017236:	bd80      	pop	{r7, pc}

08017238 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b082      	sub	sp, #8
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d106      	bne.n	8017254 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017246:	4b07      	ldr	r3, [pc, #28]	@ (8017264 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017248:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801724c:	4906      	ldr	r1, [pc, #24]	@ (8017268 <ip_frag_free_pbuf_custom_ref+0x30>)
 801724e:	4807      	ldr	r0, [pc, #28]	@ (801726c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017250:	f001 f98e 	bl	8018570 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017254:	6879      	ldr	r1, [r7, #4]
 8017256:	2005      	movs	r0, #5
 8017258:	f7f7 f99e 	bl	800e598 <memp_free>
}
 801725c:	bf00      	nop
 801725e:	3708      	adds	r7, #8
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}
 8017264:	0801ce6c 	.word	0x0801ce6c
 8017268:	0801d024 	.word	0x0801d024
 801726c:	0801ceb4 	.word	0x0801ceb4

08017270 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b084      	sub	sp, #16
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d106      	bne.n	8017290 <ipfrag_free_pbuf_custom+0x20>
 8017282:	4b11      	ldr	r3, [pc, #68]	@ (80172c8 <ipfrag_free_pbuf_custom+0x58>)
 8017284:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017288:	4910      	ldr	r1, [pc, #64]	@ (80172cc <ipfrag_free_pbuf_custom+0x5c>)
 801728a:	4811      	ldr	r0, [pc, #68]	@ (80172d0 <ipfrag_free_pbuf_custom+0x60>)
 801728c:	f001 f970 	bl	8018570 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017290:	68fa      	ldr	r2, [r7, #12]
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	429a      	cmp	r2, r3
 8017296:	d006      	beq.n	80172a6 <ipfrag_free_pbuf_custom+0x36>
 8017298:	4b0b      	ldr	r3, [pc, #44]	@ (80172c8 <ipfrag_free_pbuf_custom+0x58>)
 801729a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801729e:	490d      	ldr	r1, [pc, #52]	@ (80172d4 <ipfrag_free_pbuf_custom+0x64>)
 80172a0:	480b      	ldr	r0, [pc, #44]	@ (80172d0 <ipfrag_free_pbuf_custom+0x60>)
 80172a2:	f001 f965 	bl	8018570 <iprintf>
  if (pcr->original != NULL) {
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	695b      	ldr	r3, [r3, #20]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d004      	beq.n	80172b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	695b      	ldr	r3, [r3, #20]
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7f7 ffe2 	bl	800f27c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	f7ff ffbd 	bl	8017238 <ip_frag_free_pbuf_custom_ref>
}
 80172be:	bf00      	nop
 80172c0:	3710      	adds	r7, #16
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	0801ce6c 	.word	0x0801ce6c
 80172cc:	0801d030 	.word	0x0801d030
 80172d0:	0801ceb4 	.word	0x0801ceb4
 80172d4:	0801d03c 	.word	0x0801d03c

080172d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b094      	sub	sp, #80	@ 0x50
 80172dc:	af02      	add	r7, sp, #8
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80172e4:	2300      	movs	r3, #0
 80172e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80172ee:	3b14      	subs	r3, #20
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	da00      	bge.n	80172f6 <ip4_frag+0x1e>
 80172f4:	3307      	adds	r3, #7
 80172f6:	10db      	asrs	r3, r3, #3
 80172f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80172fa:	2314      	movs	r3, #20
 80172fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017306:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	f003 030f 	and.w	r3, r3, #15
 8017310:	b2db      	uxtb	r3, r3
 8017312:	009b      	lsls	r3, r3, #2
 8017314:	b2db      	uxtb	r3, r3
 8017316:	2b14      	cmp	r3, #20
 8017318:	d002      	beq.n	8017320 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801731a:	f06f 0305 	mvn.w	r3, #5
 801731e:	e110      	b.n	8017542 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	895b      	ldrh	r3, [r3, #10]
 8017324:	2b13      	cmp	r3, #19
 8017326:	d809      	bhi.n	801733c <ip4_frag+0x64>
 8017328:	4b88      	ldr	r3, [pc, #544]	@ (801754c <ip4_frag+0x274>)
 801732a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801732e:	4988      	ldr	r1, [pc, #544]	@ (8017550 <ip4_frag+0x278>)
 8017330:	4888      	ldr	r0, [pc, #544]	@ (8017554 <ip4_frag+0x27c>)
 8017332:	f001 f91d 	bl	8018570 <iprintf>
 8017336:	f06f 0305 	mvn.w	r3, #5
 801733a:	e102      	b.n	8017542 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801733e:	88db      	ldrh	r3, [r3, #6]
 8017340:	b29b      	uxth	r3, r3
 8017342:	4618      	mov	r0, r3
 8017344:	f7f6 fbda 	bl	800dafc <lwip_htons>
 8017348:	4603      	mov	r3, r0
 801734a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801734c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801734e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017352:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017356:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801735c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	891b      	ldrh	r3, [r3, #8]
 8017362:	3b14      	subs	r3, #20
 8017364:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017368:	e0e1      	b.n	801752e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801736a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801736c:	00db      	lsls	r3, r3, #3
 801736e:	b29b      	uxth	r3, r3
 8017370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017374:	4293      	cmp	r3, r2
 8017376:	bf28      	it	cs
 8017378:	4613      	movcs	r3, r2
 801737a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801737c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017380:	2114      	movs	r1, #20
 8017382:	200e      	movs	r0, #14
 8017384:	f7f7 fc96 	bl	800ecb4 <pbuf_alloc>
 8017388:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801738c:	2b00      	cmp	r3, #0
 801738e:	f000 80d5 	beq.w	801753c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017394:	895b      	ldrh	r3, [r3, #10]
 8017396:	2b13      	cmp	r3, #19
 8017398:	d806      	bhi.n	80173a8 <ip4_frag+0xd0>
 801739a:	4b6c      	ldr	r3, [pc, #432]	@ (801754c <ip4_frag+0x274>)
 801739c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80173a0:	496d      	ldr	r1, [pc, #436]	@ (8017558 <ip4_frag+0x280>)
 80173a2:	486c      	ldr	r0, [pc, #432]	@ (8017554 <ip4_frag+0x27c>)
 80173a4:	f001 f8e4 	bl	8018570 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80173a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173aa:	685b      	ldr	r3, [r3, #4]
 80173ac:	2214      	movs	r2, #20
 80173ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80173b0:	4618      	mov	r0, r3
 80173b2:	f001 fa66 	bl	8018882 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80173b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b8:	685b      	ldr	r3, [r3, #4]
 80173ba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80173bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80173be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80173c2:	e064      	b.n	801748e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	895a      	ldrh	r2, [r3, #10]
 80173c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173ca:	1ad3      	subs	r3, r2, r3
 80173cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	895b      	ldrh	r3, [r3, #10]
 80173d2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d906      	bls.n	80173e6 <ip4_frag+0x10e>
 80173d8:	4b5c      	ldr	r3, [pc, #368]	@ (801754c <ip4_frag+0x274>)
 80173da:	f240 322d 	movw	r2, #813	@ 0x32d
 80173de:	495f      	ldr	r1, [pc, #380]	@ (801755c <ip4_frag+0x284>)
 80173e0:	485c      	ldr	r0, [pc, #368]	@ (8017554 <ip4_frag+0x27c>)
 80173e2:	f001 f8c5 	bl	8018570 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80173e6:	8bfa      	ldrh	r2, [r7, #30]
 80173e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80173ec:	4293      	cmp	r3, r2
 80173ee:	bf28      	it	cs
 80173f0:	4613      	movcs	r3, r2
 80173f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80173f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d105      	bne.n	801740a <ip4_frag+0x132>
        poff = 0;
 80173fe:	2300      	movs	r3, #0
 8017400:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	60fb      	str	r3, [r7, #12]
        continue;
 8017408:	e041      	b.n	801748e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801740a:	f7ff ff0d 	bl	8017228 <ip_frag_alloc_pbuf_custom_ref>
 801740e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017410:	69bb      	ldr	r3, [r7, #24]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d103      	bne.n	801741e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017418:	f7f7 ff30 	bl	800f27c <pbuf_free>
        goto memerr;
 801741c:	e08f      	b.n	801753e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801741e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017424:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017426:	4413      	add	r3, r2
 8017428:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801742c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017430:	9201      	str	r2, [sp, #4]
 8017432:	9300      	str	r3, [sp, #0]
 8017434:	4603      	mov	r3, r0
 8017436:	2241      	movs	r2, #65	@ 0x41
 8017438:	2000      	movs	r0, #0
 801743a:	f7f7 fd65 	bl	800ef08 <pbuf_alloced_custom>
 801743e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d106      	bne.n	8017454 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017446:	69b8      	ldr	r0, [r7, #24]
 8017448:	f7ff fef6 	bl	8017238 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801744c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801744e:	f7f7 ff15 	bl	800f27c <pbuf_free>
        goto memerr;
 8017452:	e074      	b.n	801753e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	f7f7 ffb7 	bl	800f3c8 <pbuf_ref>
      pcr->original = p;
 801745a:	69bb      	ldr	r3, [r7, #24]
 801745c:	68fa      	ldr	r2, [r7, #12]
 801745e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017460:	69bb      	ldr	r3, [r7, #24]
 8017462:	4a3f      	ldr	r2, [pc, #252]	@ (8017560 <ip4_frag+0x288>)
 8017464:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017466:	6979      	ldr	r1, [r7, #20]
 8017468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801746a:	f7f7 ffd5 	bl	800f418 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801746e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017472:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017476:	1ad3      	subs	r3, r2, r3
 8017478:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801747c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017480:	2b00      	cmp	r3, #0
 8017482:	d004      	beq.n	801748e <ip4_frag+0x1b6>
        poff = 0;
 8017484:	2300      	movs	r3, #0
 8017486:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801748e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017492:	2b00      	cmp	r3, #0
 8017494:	d196      	bne.n	80173c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017496:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017498:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801749c:	4413      	add	r3, r2
 801749e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80174a4:	f1a3 0213 	sub.w	r2, r3, #19
 80174a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80174ac:	429a      	cmp	r2, r3
 80174ae:	bfcc      	ite	gt
 80174b0:	2301      	movgt	r3, #1
 80174b2:	2300      	movle	r3, #0
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80174b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80174bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80174c2:	6a3b      	ldr	r3, [r7, #32]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d002      	beq.n	80174ce <ip4_frag+0x1f6>
 80174c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d003      	beq.n	80174d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80174ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80174d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80174d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80174d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80174d8:	4618      	mov	r0, r3
 80174da:	f7f6 fb0f 	bl	800dafc <lwip_htons>
 80174de:	4603      	mov	r3, r0
 80174e0:	461a      	mov	r2, r3
 80174e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80174e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80174e8:	3314      	adds	r3, #20
 80174ea:	b29b      	uxth	r3, r3
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7f6 fb05 	bl	800dafc <lwip_htons>
 80174f2:	4603      	mov	r3, r0
 80174f4:	461a      	mov	r2, r3
 80174f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80174fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174fc:	2200      	movs	r2, #0
 80174fe:	729a      	strb	r2, [r3, #10]
 8017500:	2200      	movs	r2, #0
 8017502:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	695b      	ldr	r3, [r3, #20]
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801750c:	68b8      	ldr	r0, [r7, #8]
 801750e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017512:	f7f7 feb3 	bl	800f27c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801751a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801751c:	1ad3      	subs	r3, r2, r3
 801751e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8017522:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017526:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017528:	4413      	add	r3, r2
 801752a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801752e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017532:	2b00      	cmp	r3, #0
 8017534:	f47f af19 	bne.w	801736a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017538:	2300      	movs	r3, #0
 801753a:	e002      	b.n	8017542 <ip4_frag+0x26a>
      goto memerr;
 801753c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801753e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017542:	4618      	mov	r0, r3
 8017544:	3748      	adds	r7, #72	@ 0x48
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
 801754a:	bf00      	nop
 801754c:	0801ce6c 	.word	0x0801ce6c
 8017550:	0801d048 	.word	0x0801d048
 8017554:	0801ceb4 	.word	0x0801ceb4
 8017558:	0801d064 	.word	0x0801d064
 801755c:	0801d084 	.word	0x0801d084
 8017560:	08017271 	.word	0x08017271

08017564 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b086      	sub	sp, #24
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801756e:	230e      	movs	r3, #14
 8017570:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	895b      	ldrh	r3, [r3, #10]
 8017576:	2b0e      	cmp	r3, #14
 8017578:	d96e      	bls.n	8017658 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	7bdb      	ldrb	r3, [r3, #15]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d106      	bne.n	8017590 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017588:	3301      	adds	r3, #1
 801758a:	b2da      	uxtb	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017596:	693b      	ldr	r3, [r7, #16]
 8017598:	7b1a      	ldrb	r2, [r3, #12]
 801759a:	7b5b      	ldrb	r3, [r3, #13]
 801759c:	021b      	lsls	r3, r3, #8
 801759e:	4313      	orrs	r3, r2
 80175a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	f003 0301 	and.w	r3, r3, #1
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d023      	beq.n	80175f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d10f      	bne.n	80175d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	785b      	ldrb	r3, [r3, #1]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d11b      	bne.n	80175f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80175c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80175c4:	d117      	bne.n	80175f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	7b5b      	ldrb	r3, [r3, #13]
 80175ca:	f043 0310 	orr.w	r3, r3, #16
 80175ce:	b2da      	uxtb	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	735a      	strb	r2, [r3, #13]
 80175d4:	e00f      	b.n	80175f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	2206      	movs	r2, #6
 80175da:	4928      	ldr	r1, [pc, #160]	@ (801767c <ethernet_input+0x118>)
 80175dc:	4618      	mov	r0, r3
 80175de:	f001 f852 	bl	8018686 <memcmp>
 80175e2:	4603      	mov	r3, r0
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d106      	bne.n	80175f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	7b5b      	ldrb	r3, [r3, #13]
 80175ec:	f043 0308 	orr.w	r3, r3, #8
 80175f0:	b2da      	uxtb	r2, r3
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80175f6:	89fb      	ldrh	r3, [r7, #14]
 80175f8:	2b08      	cmp	r3, #8
 80175fa:	d003      	beq.n	8017604 <ethernet_input+0xa0>
 80175fc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8017600:	d014      	beq.n	801762c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017602:	e032      	b.n	801766a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801760a:	f003 0308 	and.w	r3, r3, #8
 801760e:	2b00      	cmp	r3, #0
 8017610:	d024      	beq.n	801765c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017612:	8afb      	ldrh	r3, [r7, #22]
 8017614:	4619      	mov	r1, r3
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f7f7 fdaa 	bl	800f170 <pbuf_remove_header>
 801761c:	4603      	mov	r3, r0
 801761e:	2b00      	cmp	r3, #0
 8017620:	d11e      	bne.n	8017660 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017622:	6839      	ldr	r1, [r7, #0]
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	f7fe fe91 	bl	801634c <ip4_input>
      break;
 801762a:	e013      	b.n	8017654 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017632:	f003 0308 	and.w	r3, r3, #8
 8017636:	2b00      	cmp	r3, #0
 8017638:	d014      	beq.n	8017664 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801763a:	8afb      	ldrh	r3, [r7, #22]
 801763c:	4619      	mov	r1, r3
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f7f7 fd96 	bl	800f170 <pbuf_remove_header>
 8017644:	4603      	mov	r3, r0
 8017646:	2b00      	cmp	r3, #0
 8017648:	d10e      	bne.n	8017668 <ethernet_input+0x104>
        etharp_input(p, netif);
 801764a:	6839      	ldr	r1, [r7, #0]
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7fe f833 	bl	80156b8 <etharp_input>
      break;
 8017652:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017654:	2300      	movs	r3, #0
 8017656:	e00c      	b.n	8017672 <ethernet_input+0x10e>
    goto free_and_return;
 8017658:	bf00      	nop
 801765a:	e006      	b.n	801766a <ethernet_input+0x106>
        goto free_and_return;
 801765c:	bf00      	nop
 801765e:	e004      	b.n	801766a <ethernet_input+0x106>
        goto free_and_return;
 8017660:	bf00      	nop
 8017662:	e002      	b.n	801766a <ethernet_input+0x106>
        goto free_and_return;
 8017664:	bf00      	nop
 8017666:	e000      	b.n	801766a <ethernet_input+0x106>
        goto free_and_return;
 8017668:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7f7 fe06 	bl	800f27c <pbuf_free>
  return ERR_OK;
 8017670:	2300      	movs	r3, #0
}
 8017672:	4618      	mov	r0, r3
 8017674:	3718      	adds	r7, #24
 8017676:	46bd      	mov	sp, r7
 8017678:	bd80      	pop	{r7, pc}
 801767a:	bf00      	nop
 801767c:	0801d2a8 	.word	0x0801d2a8

08017680 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
 801768c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801768e:	8c3b      	ldrh	r3, [r7, #32]
 8017690:	4618      	mov	r0, r3
 8017692:	f7f6 fa33 	bl	800dafc <lwip_htons>
 8017696:	4603      	mov	r3, r0
 8017698:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801769a:	210e      	movs	r1, #14
 801769c:	68b8      	ldr	r0, [r7, #8]
 801769e:	f7f7 fd57 	bl	800f150 <pbuf_add_header>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d125      	bne.n	80176f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	8afa      	ldrh	r2, [r7, #22]
 80176b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	2206      	movs	r2, #6
 80176b8:	6839      	ldr	r1, [r7, #0]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f001 f8e1 	bl	8018882 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80176c0:	693b      	ldr	r3, [r7, #16]
 80176c2:	3306      	adds	r3, #6
 80176c4:	2206      	movs	r2, #6
 80176c6:	6879      	ldr	r1, [r7, #4]
 80176c8:	4618      	mov	r0, r3
 80176ca:	f001 f8da 	bl	8018882 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80176d4:	2b06      	cmp	r3, #6
 80176d6:	d006      	beq.n	80176e6 <ethernet_output+0x66>
 80176d8:	4b0a      	ldr	r3, [pc, #40]	@ (8017704 <ethernet_output+0x84>)
 80176da:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80176de:	490a      	ldr	r1, [pc, #40]	@ (8017708 <ethernet_output+0x88>)
 80176e0:	480a      	ldr	r0, [pc, #40]	@ (801770c <ethernet_output+0x8c>)
 80176e2:	f000 ff45 	bl	8018570 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	699b      	ldr	r3, [r3, #24]
 80176ea:	68b9      	ldr	r1, [r7, #8]
 80176ec:	68f8      	ldr	r0, [r7, #12]
 80176ee:	4798      	blx	r3
 80176f0:	4603      	mov	r3, r0
 80176f2:	e002      	b.n	80176fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80176f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80176f6:	f06f 0301 	mvn.w	r3, #1
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3718      	adds	r7, #24
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	0801d094 	.word	0x0801d094
 8017708:	0801d0cc 	.word	0x0801d0cc
 801770c:	0801d100 	.word	0x0801d100

08017710 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b086      	sub	sp, #24
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	60bb      	str	r3, [r7, #8]
 801771e:	2304      	movs	r3, #4
 8017720:	60fb      	str	r3, [r7, #12]
 8017722:	2300      	movs	r3, #0
 8017724:	613b      	str	r3, [r7, #16]
 8017726:	2300      	movs	r3, #0
 8017728:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801772a:	f107 0308 	add.w	r3, r7, #8
 801772e:	2100      	movs	r1, #0
 8017730:	4618      	mov	r0, r3
 8017732:	f7f3 facb 	bl	800accc <osMessageCreate>
 8017736:	4602      	mov	r2, r0
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d102      	bne.n	801774a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017744:	f04f 33ff 	mov.w	r3, #4294967295
 8017748:	e000      	b.n	801774c <sys_mbox_new+0x3c>

  return ERR_OK;
 801774a:	2300      	movs	r3, #0
}
 801774c:	4618      	mov	r0, r3
 801774e:	3718      	adds	r7, #24
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b084      	sub	sp, #16
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	6839      	ldr	r1, [r7, #0]
 8017764:	2200      	movs	r2, #0
 8017766:	4618      	mov	r0, r3
 8017768:	f7f3 fad8 	bl	800ad1c <osMessagePut>
 801776c:	4603      	mov	r3, r0
 801776e:	2b00      	cmp	r3, #0
 8017770:	d102      	bne.n	8017778 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017772:	2300      	movs	r3, #0
 8017774:	73fb      	strb	r3, [r7, #15]
 8017776:	e001      	b.n	801777c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017778:	23ff      	movs	r3, #255	@ 0xff
 801777a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801777c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017780:	4618      	mov	r0, r3
 8017782:	3710      	adds	r7, #16
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}

08017788 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b08c      	sub	sp, #48	@ 0x30
 801778c:	af00      	add	r7, sp, #0
 801778e:	61f8      	str	r0, [r7, #28]
 8017790:	61b9      	str	r1, [r7, #24]
 8017792:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017794:	f7f3 f8d8 	bl	800a948 <osKernelSysTick>
 8017798:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d017      	beq.n	80177d0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80177a0:	69fb      	ldr	r3, [r7, #28]
 80177a2:	6819      	ldr	r1, [r3, #0]
 80177a4:	f107 0320 	add.w	r3, r7, #32
 80177a8:	697a      	ldr	r2, [r7, #20]
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7f3 faf6 	bl	800ad9c <osMessageGet>

    if(event.status == osEventMessage)
 80177b0:	6a3b      	ldr	r3, [r7, #32]
 80177b2:	2b10      	cmp	r3, #16
 80177b4:	d109      	bne.n	80177ca <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80177b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b8:	461a      	mov	r2, r3
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80177be:	f7f3 f8c3 	bl	800a948 <osKernelSysTick>
 80177c2:	4602      	mov	r2, r0
 80177c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177c6:	1ad3      	subs	r3, r2, r3
 80177c8:	e019      	b.n	80177fe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80177ca:	f04f 33ff 	mov.w	r3, #4294967295
 80177ce:	e016      	b.n	80177fe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80177d0:	69fb      	ldr	r3, [r7, #28]
 80177d2:	6819      	ldr	r1, [r3, #0]
 80177d4:	463b      	mov	r3, r7
 80177d6:	f04f 32ff 	mov.w	r2, #4294967295
 80177da:	4618      	mov	r0, r3
 80177dc:	f7f3 fade 	bl	800ad9c <osMessageGet>
 80177e0:	f107 0320 	add.w	r3, r7, #32
 80177e4:	463a      	mov	r2, r7
 80177e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80177e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80177ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ee:	461a      	mov	r2, r3
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80177f4:	f7f3 f8a8 	bl	800a948 <osKernelSysTick>
 80177f8:	4602      	mov	r2, r0
 80177fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177fc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3730      	adds	r7, #48	@ 0x30
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017806:	b480      	push	{r7}
 8017808:	b083      	sub	sp, #12
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d101      	bne.n	801781a <sys_mbox_valid+0x14>
    return 0;
 8017816:	2300      	movs	r3, #0
 8017818:	e000      	b.n	801781c <sys_mbox_valid+0x16>
  else
    return 1;
 801781a:	2301      	movs	r3, #1
}
 801781c:	4618      	mov	r0, r3
 801781e:	370c      	adds	r7, #12
 8017820:	46bd      	mov	sp, r7
 8017822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017826:	4770      	bx	lr

08017828 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801782c:	4803      	ldr	r0, [pc, #12]	@ (801783c <sys_init+0x14>)
 801782e:	f7f3 f8fb 	bl	800aa28 <osMutexCreate>
 8017832:	4603      	mov	r3, r0
 8017834:	4a02      	ldr	r2, [pc, #8]	@ (8017840 <sys_init+0x18>)
 8017836:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017838:	bf00      	nop
 801783a:	bd80      	pop	{r7, pc}
 801783c:	0801d2b8 	.word	0x0801d2b8
 8017840:	2000c814 	.word	0x2000c814

08017844 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801784c:	2300      	movs	r3, #0
 801784e:	60bb      	str	r3, [r7, #8]
 8017850:	2300      	movs	r3, #0
 8017852:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017854:	f107 0308 	add.w	r3, r7, #8
 8017858:	4618      	mov	r0, r3
 801785a:	f7f3 f8e5 	bl	800aa28 <osMutexCreate>
 801785e:	4602      	mov	r2, r0
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d102      	bne.n	8017872 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801786c:	f04f 33ff 	mov.w	r3, #4294967295
 8017870:	e000      	b.n	8017874 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017872:	2300      	movs	r3, #0
}
 8017874:	4618      	mov	r0, r3
 8017876:	3710      	adds	r7, #16
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	f04f 31ff 	mov.w	r1, #4294967295
 801788c:	4618      	mov	r0, r3
 801788e:	f7f3 f8e3 	bl	800aa58 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017892:	bf00      	nop
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801789a:	b580      	push	{r7, lr}
 801789c:	b082      	sub	sp, #8
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7f3 f924 	bl	800aaf4 <osMutexRelease>
}
 80178ac:	bf00      	nop
 80178ae:	3708      	adds	r7, #8
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b08c      	sub	sp, #48	@ 0x30
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	607a      	str	r2, [r7, #4]
 80178c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80178c2:	f107 0314 	add.w	r3, r7, #20
 80178c6:	2200      	movs	r2, #0
 80178c8:	601a      	str	r2, [r3, #0]
 80178ca:	605a      	str	r2, [r3, #4]
 80178cc:	609a      	str	r2, [r3, #8]
 80178ce:	60da      	str	r2, [r3, #12]
 80178d0:	611a      	str	r2, [r3, #16]
 80178d2:	615a      	str	r2, [r3, #20]
 80178d4:	619a      	str	r2, [r3, #24]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	617b      	str	r3, [r7, #20]
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	61bb      	str	r3, [r7, #24]
 80178de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178e0:	b21b      	sxth	r3, r3
 80178e2:	83bb      	strh	r3, [r7, #28]
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80178e8:	f107 0314 	add.w	r3, r7, #20
 80178ec:	6879      	ldr	r1, [r7, #4]
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7f3 f83a 	bl	800a968 <osThreadCreate>
 80178f4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80178f6:	4618      	mov	r0, r3
 80178f8:	3730      	adds	r7, #48	@ 0x30
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}
	...

08017900 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017904:	4b04      	ldr	r3, [pc, #16]	@ (8017918 <sys_arch_protect+0x18>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f04f 31ff 	mov.w	r1, #4294967295
 801790c:	4618      	mov	r0, r3
 801790e:	f7f3 f8a3 	bl	800aa58 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017912:	2301      	movs	r3, #1
}
 8017914:	4618      	mov	r0, r3
 8017916:	bd80      	pop	{r7, pc}
 8017918:	2000c814 	.word	0x2000c814

0801791c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017924:	4b04      	ldr	r3, [pc, #16]	@ (8017938 <sys_arch_unprotect+0x1c>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	4618      	mov	r0, r3
 801792a:	f7f3 f8e3 	bl	800aaf4 <osMutexRelease>
}
 801792e:	bf00      	nop
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}
 8017936:	bf00      	nop
 8017938:	2000c814 	.word	0x2000c814

0801793c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017940:	2200      	movs	r2, #0
 8017942:	4912      	ldr	r1, [pc, #72]	@ (801798c <MX_USB_DEVICE_Init+0x50>)
 8017944:	4812      	ldr	r0, [pc, #72]	@ (8017990 <MX_USB_DEVICE_Init+0x54>)
 8017946:	f7f1 fcaf 	bl	80092a8 <USBD_Init>
 801794a:	4603      	mov	r3, r0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d001      	beq.n	8017954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017950:	f7e9 f848 	bl	80009e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017954:	490f      	ldr	r1, [pc, #60]	@ (8017994 <MX_USB_DEVICE_Init+0x58>)
 8017956:	480e      	ldr	r0, [pc, #56]	@ (8017990 <MX_USB_DEVICE_Init+0x54>)
 8017958:	f7f1 fcd6 	bl	8009308 <USBD_RegisterClass>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d001      	beq.n	8017966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017962:	f7e9 f83f 	bl	80009e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017966:	490c      	ldr	r1, [pc, #48]	@ (8017998 <MX_USB_DEVICE_Init+0x5c>)
 8017968:	4809      	ldr	r0, [pc, #36]	@ (8017990 <MX_USB_DEVICE_Init+0x54>)
 801796a:	f7f1 fbcd 	bl	8009108 <USBD_CDC_RegisterInterface>
 801796e:	4603      	mov	r3, r0
 8017970:	2b00      	cmp	r3, #0
 8017972:	d001      	beq.n	8017978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017974:	f7e9 f836 	bl	80009e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017978:	4805      	ldr	r0, [pc, #20]	@ (8017990 <MX_USB_DEVICE_Init+0x54>)
 801797a:	f7f1 fcfb 	bl	8009374 <USBD_Start>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d001      	beq.n	8017988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017984:	f7e9 f82e 	bl	80009e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017988:	bf00      	nop
 801798a:	bd80      	pop	{r7, pc}
 801798c:	200000bc 	.word	0x200000bc
 8017990:	2000c818 	.word	0x2000c818
 8017994:	20000018 	.word	0x20000018
 8017998:	200000a8 	.word	0x200000a8

0801799c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80179a0:	2200      	movs	r2, #0
 80179a2:	4905      	ldr	r1, [pc, #20]	@ (80179b8 <CDC_Init_FS+0x1c>)
 80179a4:	4805      	ldr	r0, [pc, #20]	@ (80179bc <CDC_Init_FS+0x20>)
 80179a6:	f7f1 fbc9 	bl	800913c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80179aa:	4905      	ldr	r1, [pc, #20]	@ (80179c0 <CDC_Init_FS+0x24>)
 80179ac:	4803      	ldr	r0, [pc, #12]	@ (80179bc <CDC_Init_FS+0x20>)
 80179ae:	f7f1 fbe7 	bl	8009180 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80179b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	2000d2f4 	.word	0x2000d2f4
 80179bc:	2000c818 	.word	0x2000c818
 80179c0:	2000caf4 	.word	0x2000caf4

080179c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80179c4:	b480      	push	{r7}
 80179c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80179c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	46bd      	mov	sp, r7
 80179ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d2:	4770      	bx	lr

080179d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80179d4:	b480      	push	{r7}
 80179d6:	b083      	sub	sp, #12
 80179d8:	af00      	add	r7, sp, #0
 80179da:	4603      	mov	r3, r0
 80179dc:	6039      	str	r1, [r7, #0]
 80179de:	71fb      	strb	r3, [r7, #7]
 80179e0:	4613      	mov	r3, r2
 80179e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80179e4:	79fb      	ldrb	r3, [r7, #7]
 80179e6:	2b23      	cmp	r3, #35	@ 0x23
 80179e8:	d84a      	bhi.n	8017a80 <CDC_Control_FS+0xac>
 80179ea:	a201      	add	r2, pc, #4	@ (adr r2, 80179f0 <CDC_Control_FS+0x1c>)
 80179ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179f0:	08017a81 	.word	0x08017a81
 80179f4:	08017a81 	.word	0x08017a81
 80179f8:	08017a81 	.word	0x08017a81
 80179fc:	08017a81 	.word	0x08017a81
 8017a00:	08017a81 	.word	0x08017a81
 8017a04:	08017a81 	.word	0x08017a81
 8017a08:	08017a81 	.word	0x08017a81
 8017a0c:	08017a81 	.word	0x08017a81
 8017a10:	08017a81 	.word	0x08017a81
 8017a14:	08017a81 	.word	0x08017a81
 8017a18:	08017a81 	.word	0x08017a81
 8017a1c:	08017a81 	.word	0x08017a81
 8017a20:	08017a81 	.word	0x08017a81
 8017a24:	08017a81 	.word	0x08017a81
 8017a28:	08017a81 	.word	0x08017a81
 8017a2c:	08017a81 	.word	0x08017a81
 8017a30:	08017a81 	.word	0x08017a81
 8017a34:	08017a81 	.word	0x08017a81
 8017a38:	08017a81 	.word	0x08017a81
 8017a3c:	08017a81 	.word	0x08017a81
 8017a40:	08017a81 	.word	0x08017a81
 8017a44:	08017a81 	.word	0x08017a81
 8017a48:	08017a81 	.word	0x08017a81
 8017a4c:	08017a81 	.word	0x08017a81
 8017a50:	08017a81 	.word	0x08017a81
 8017a54:	08017a81 	.word	0x08017a81
 8017a58:	08017a81 	.word	0x08017a81
 8017a5c:	08017a81 	.word	0x08017a81
 8017a60:	08017a81 	.word	0x08017a81
 8017a64:	08017a81 	.word	0x08017a81
 8017a68:	08017a81 	.word	0x08017a81
 8017a6c:	08017a81 	.word	0x08017a81
 8017a70:	08017a81 	.word	0x08017a81
 8017a74:	08017a81 	.word	0x08017a81
 8017a78:	08017a81 	.word	0x08017a81
 8017a7c:	08017a81 	.word	0x08017a81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017a80:	bf00      	nop
  }

  return (USBD_OK);
 8017a82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	370c      	adds	r7, #12
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8e:	4770      	bx	lr

08017a90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017a9a:	6879      	ldr	r1, [r7, #4]
 8017a9c:	4805      	ldr	r0, [pc, #20]	@ (8017ab4 <CDC_Receive_FS+0x24>)
 8017a9e:	f7f1 fb6f 	bl	8009180 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017aa2:	4804      	ldr	r0, [pc, #16]	@ (8017ab4 <CDC_Receive_FS+0x24>)
 8017aa4:	f7f1 fbca 	bl	800923c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017aa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	3708      	adds	r7, #8
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	2000c818 	.word	0x2000c818

08017ab8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	460b      	mov	r3, r1
 8017ac2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8017b00 <CDC_Transmit_FS+0x48>)
 8017aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017ace:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d001      	beq.n	8017ade <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017ada:	2301      	movs	r3, #1
 8017adc:	e00b      	b.n	8017af6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017ade:	887b      	ldrh	r3, [r7, #2]
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	6879      	ldr	r1, [r7, #4]
 8017ae4:	4806      	ldr	r0, [pc, #24]	@ (8017b00 <CDC_Transmit_FS+0x48>)
 8017ae6:	f7f1 fb29 	bl	800913c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017aea:	4805      	ldr	r0, [pc, #20]	@ (8017b00 <CDC_Transmit_FS+0x48>)
 8017aec:	f7f1 fb66 	bl	80091bc <USBD_CDC_TransmitPacket>
 8017af0:	4603      	mov	r3, r0
 8017af2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3710      	adds	r7, #16
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	2000c818 	.word	0x2000c818

08017b04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b087      	sub	sp, #28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	4613      	mov	r3, r2
 8017b10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017b12:	2300      	movs	r3, #0
 8017b14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	371c      	adds	r7, #28
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b24:	4770      	bx	lr
	...

08017b28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b28:	b480      	push	{r7}
 8017b2a:	b083      	sub	sp, #12
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	6039      	str	r1, [r7, #0]
 8017b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	2212      	movs	r2, #18
 8017b38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017b3a:	4b03      	ldr	r3, [pc, #12]	@ (8017b48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr
 8017b48:	200000d8 	.word	0x200000d8

08017b4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b083      	sub	sp, #12
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	4603      	mov	r3, r0
 8017b54:	6039      	str	r1, [r7, #0]
 8017b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	2204      	movs	r2, #4
 8017b5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017b5e:	4b03      	ldr	r3, [pc, #12]	@ (8017b6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	370c      	adds	r7, #12
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr
 8017b6c:	200000ec 	.word	0x200000ec

08017b70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	4603      	mov	r3, r0
 8017b78:	6039      	str	r1, [r7, #0]
 8017b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b7c:	79fb      	ldrb	r3, [r7, #7]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d105      	bne.n	8017b8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017b82:	683a      	ldr	r2, [r7, #0]
 8017b84:	4907      	ldr	r1, [pc, #28]	@ (8017ba4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017b86:	4808      	ldr	r0, [pc, #32]	@ (8017ba8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017b88:	f7f2 fdba 	bl	800a700 <USBD_GetString>
 8017b8c:	e004      	b.n	8017b98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017b8e:	683a      	ldr	r2, [r7, #0]
 8017b90:	4904      	ldr	r1, [pc, #16]	@ (8017ba4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017b92:	4805      	ldr	r0, [pc, #20]	@ (8017ba8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017b94:	f7f2 fdb4 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b98:	4b02      	ldr	r3, [pc, #8]	@ (8017ba4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	2000daf4 	.word	0x2000daf4
 8017ba8:	0801d128 	.word	0x0801d128

08017bac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	6039      	str	r1, [r7, #0]
 8017bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017bb8:	683a      	ldr	r2, [r7, #0]
 8017bba:	4904      	ldr	r1, [pc, #16]	@ (8017bcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017bbc:	4804      	ldr	r0, [pc, #16]	@ (8017bd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017bbe:	f7f2 fd9f 	bl	800a700 <USBD_GetString>
  return USBD_StrDesc;
 8017bc2:	4b02      	ldr	r3, [pc, #8]	@ (8017bcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3708      	adds	r7, #8
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	2000daf4 	.word	0x2000daf4
 8017bd0:	0801d140 	.word	0x0801d140

08017bd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	4603      	mov	r3, r0
 8017bdc:	6039      	str	r1, [r7, #0]
 8017bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	221a      	movs	r2, #26
 8017be4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017be6:	f000 f843 	bl	8017c70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017bea:	4b02      	ldr	r3, [pc, #8]	@ (8017bf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	3708      	adds	r7, #8
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}
 8017bf4:	200000f0 	.word	0x200000f0

08017bf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b082      	sub	sp, #8
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	4603      	mov	r3, r0
 8017c00:	6039      	str	r1, [r7, #0]
 8017c02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017c04:	79fb      	ldrb	r3, [r7, #7]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d105      	bne.n	8017c16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c0a:	683a      	ldr	r2, [r7, #0]
 8017c0c:	4907      	ldr	r1, [pc, #28]	@ (8017c2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c0e:	4808      	ldr	r0, [pc, #32]	@ (8017c30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c10:	f7f2 fd76 	bl	800a700 <USBD_GetString>
 8017c14:	e004      	b.n	8017c20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c16:	683a      	ldr	r2, [r7, #0]
 8017c18:	4904      	ldr	r1, [pc, #16]	@ (8017c2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c1a:	4805      	ldr	r0, [pc, #20]	@ (8017c30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c1c:	f7f2 fd70 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c20:	4b02      	ldr	r3, [pc, #8]	@ (8017c2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3708      	adds	r7, #8
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	2000daf4 	.word	0x2000daf4
 8017c30:	0801d154 	.word	0x0801d154

08017c34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	6039      	str	r1, [r7, #0]
 8017c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d105      	bne.n	8017c52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017c46:	683a      	ldr	r2, [r7, #0]
 8017c48:	4907      	ldr	r1, [pc, #28]	@ (8017c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017c4a:	4808      	ldr	r0, [pc, #32]	@ (8017c6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017c4c:	f7f2 fd58 	bl	800a700 <USBD_GetString>
 8017c50:	e004      	b.n	8017c5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017c52:	683a      	ldr	r2, [r7, #0]
 8017c54:	4904      	ldr	r1, [pc, #16]	@ (8017c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017c56:	4805      	ldr	r0, [pc, #20]	@ (8017c6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017c58:	f7f2 fd52 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c5c:	4b02      	ldr	r3, [pc, #8]	@ (8017c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3708      	adds	r7, #8
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}
 8017c66:	bf00      	nop
 8017c68:	2000daf4 	.word	0x2000daf4
 8017c6c:	0801d160 	.word	0x0801d160

08017c70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017c76:	4b0f      	ldr	r3, [pc, #60]	@ (8017cb4 <Get_SerialNum+0x44>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8017cb8 <Get_SerialNum+0x48>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017c82:	4b0e      	ldr	r3, [pc, #56]	@ (8017cbc <Get_SerialNum+0x4c>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d009      	beq.n	8017caa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017c96:	2208      	movs	r2, #8
 8017c98:	4909      	ldr	r1, [pc, #36]	@ (8017cc0 <Get_SerialNum+0x50>)
 8017c9a:	68f8      	ldr	r0, [r7, #12]
 8017c9c:	f000 f814 	bl	8017cc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017ca0:	2204      	movs	r2, #4
 8017ca2:	4908      	ldr	r1, [pc, #32]	@ (8017cc4 <Get_SerialNum+0x54>)
 8017ca4:	68b8      	ldr	r0, [r7, #8]
 8017ca6:	f000 f80f 	bl	8017cc8 <IntToUnicode>
  }
}
 8017caa:	bf00      	nop
 8017cac:	3710      	adds	r7, #16
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	1fff7a10 	.word	0x1fff7a10
 8017cb8:	1fff7a14 	.word	0x1fff7a14
 8017cbc:	1fff7a18 	.word	0x1fff7a18
 8017cc0:	200000f2 	.word	0x200000f2
 8017cc4:	20000102 	.word	0x20000102

08017cc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b087      	sub	sp, #28
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017cda:	2300      	movs	r3, #0
 8017cdc:	75fb      	strb	r3, [r7, #23]
 8017cde:	e027      	b.n	8017d30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	0f1b      	lsrs	r3, r3, #28
 8017ce4:	2b09      	cmp	r3, #9
 8017ce6:	d80b      	bhi.n	8017d00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	0f1b      	lsrs	r3, r3, #28
 8017cec:	b2da      	uxtb	r2, r3
 8017cee:	7dfb      	ldrb	r3, [r7, #23]
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	440b      	add	r3, r1
 8017cf8:	3230      	adds	r2, #48	@ 0x30
 8017cfa:	b2d2      	uxtb	r2, r2
 8017cfc:	701a      	strb	r2, [r3, #0]
 8017cfe:	e00a      	b.n	8017d16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	0f1b      	lsrs	r3, r3, #28
 8017d04:	b2da      	uxtb	r2, r3
 8017d06:	7dfb      	ldrb	r3, [r7, #23]
 8017d08:	005b      	lsls	r3, r3, #1
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	440b      	add	r3, r1
 8017d10:	3237      	adds	r2, #55	@ 0x37
 8017d12:	b2d2      	uxtb	r2, r2
 8017d14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	011b      	lsls	r3, r3, #4
 8017d1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017d1c:	7dfb      	ldrb	r3, [r7, #23]
 8017d1e:	005b      	lsls	r3, r3, #1
 8017d20:	3301      	adds	r3, #1
 8017d22:	68ba      	ldr	r2, [r7, #8]
 8017d24:	4413      	add	r3, r2
 8017d26:	2200      	movs	r2, #0
 8017d28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017d2a:	7dfb      	ldrb	r3, [r7, #23]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	75fb      	strb	r3, [r7, #23]
 8017d30:	7dfa      	ldrb	r2, [r7, #23]
 8017d32:	79fb      	ldrb	r3, [r7, #7]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d3d3      	bcc.n	8017ce0 <IntToUnicode+0x18>
  }
}
 8017d38:	bf00      	nop
 8017d3a:	bf00      	nop
 8017d3c:	371c      	adds	r7, #28
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr
	...

08017d48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b08a      	sub	sp, #40	@ 0x28
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d50:	f107 0314 	add.w	r3, r7, #20
 8017d54:	2200      	movs	r2, #0
 8017d56:	601a      	str	r2, [r3, #0]
 8017d58:	605a      	str	r2, [r3, #4]
 8017d5a:	609a      	str	r2, [r3, #8]
 8017d5c:	60da      	str	r2, [r3, #12]
 8017d5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017d68:	d13a      	bne.n	8017de0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	613b      	str	r3, [r7, #16]
 8017d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d72:	4a1d      	ldr	r2, [pc, #116]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017d74:	f043 0301 	orr.w	r3, r3, #1
 8017d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8017d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d7e:	f003 0301 	and.w	r3, r3, #1
 8017d82:	613b      	str	r3, [r7, #16]
 8017d84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017d86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d8c:	2302      	movs	r3, #2
 8017d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d90:	2300      	movs	r3, #0
 8017d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017d94:	2303      	movs	r3, #3
 8017d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017d98:	230a      	movs	r3, #10
 8017d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017d9c:	f107 0314 	add.w	r3, r7, #20
 8017da0:	4619      	mov	r1, r3
 8017da2:	4812      	ldr	r0, [pc, #72]	@ (8017dec <HAL_PCD_MspInit+0xa4>)
 8017da4:	f7eb f80e 	bl	8002dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017da8:	4b0f      	ldr	r3, [pc, #60]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017dac:	4a0e      	ldr	r2, [pc, #56]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017db2:	6353      	str	r3, [r2, #52]	@ 0x34
 8017db4:	2300      	movs	r3, #0
 8017db6:	60fb      	str	r3, [r7, #12]
 8017db8:	4b0b      	ldr	r3, [pc, #44]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017dc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8017dc4:	4b08      	ldr	r3, [pc, #32]	@ (8017de8 <HAL_PCD_MspInit+0xa0>)
 8017dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017dcc:	60fb      	str	r3, [r7, #12]
 8017dce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	2106      	movs	r1, #6
 8017dd4:	2043      	movs	r0, #67	@ 0x43
 8017dd6:	f7e9 fd97 	bl	8001908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017dda:	2043      	movs	r0, #67	@ 0x43
 8017ddc:	f7e9 fdb0 	bl	8001940 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017de0:	bf00      	nop
 8017de2:	3728      	adds	r7, #40	@ 0x28
 8017de4:	46bd      	mov	sp, r7
 8017de6:	bd80      	pop	{r7, pc}
 8017de8:	40023800 	.word	0x40023800
 8017dec:	40020000 	.word	0x40020000

08017df0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017e04:	4619      	mov	r1, r3
 8017e06:	4610      	mov	r0, r2
 8017e08:	f7f1 fb01 	bl	800940e <USBD_LL_SetupStage>
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017e26:	78fa      	ldrb	r2, [r7, #3]
 8017e28:	6879      	ldr	r1, [r7, #4]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	00db      	lsls	r3, r3, #3
 8017e2e:	4413      	add	r3, r2
 8017e30:	009b      	lsls	r3, r3, #2
 8017e32:	440b      	add	r3, r1
 8017e34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017e38:	681a      	ldr	r2, [r3, #0]
 8017e3a:	78fb      	ldrb	r3, [r7, #3]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	f7f1 fb3b 	bl	80094b8 <USBD_LL_DataOutStage>
}
 8017e42:	bf00      	nop
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}

08017e4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e4a:	b580      	push	{r7, lr}
 8017e4c:	b082      	sub	sp, #8
 8017e4e:	af00      	add	r7, sp, #0
 8017e50:	6078      	str	r0, [r7, #4]
 8017e52:	460b      	mov	r3, r1
 8017e54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017e5c:	78fa      	ldrb	r2, [r7, #3]
 8017e5e:	6879      	ldr	r1, [r7, #4]
 8017e60:	4613      	mov	r3, r2
 8017e62:	00db      	lsls	r3, r3, #3
 8017e64:	4413      	add	r3, r2
 8017e66:	009b      	lsls	r3, r3, #2
 8017e68:	440b      	add	r3, r1
 8017e6a:	3320      	adds	r3, #32
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	78fb      	ldrb	r3, [r7, #3]
 8017e70:	4619      	mov	r1, r3
 8017e72:	f7f1 fbdd 	bl	8009630 <USBD_LL_DataInStage>
}
 8017e76:	bf00      	nop
 8017e78:	3708      	adds	r7, #8
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}

08017e7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e7e:	b580      	push	{r7, lr}
 8017e80:	b082      	sub	sp, #8
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7f1 fd21 	bl	80098d4 <USBD_LL_SOF>
}
 8017e92:	bf00      	nop
 8017e94:	3708      	adds	r7, #8
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}

08017e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e9a:	b580      	push	{r7, lr}
 8017e9c:	b084      	sub	sp, #16
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	79db      	ldrb	r3, [r3, #7]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d102      	bne.n	8017eb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	73fb      	strb	r3, [r7, #15]
 8017eb2:	e008      	b.n	8017ec6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	79db      	ldrb	r3, [r3, #7]
 8017eb8:	2b02      	cmp	r3, #2
 8017eba:	d102      	bne.n	8017ec2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	73fb      	strb	r3, [r7, #15]
 8017ec0:	e001      	b.n	8017ec6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017ec2:	f7e8 fd8f 	bl	80009e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017ecc:	7bfa      	ldrb	r2, [r7, #15]
 8017ece:	4611      	mov	r1, r2
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7f1 fcbb 	bl	800984c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7f1 fc62 	bl	80097a6 <USBD_LL_Reset>
}
 8017ee2:	bf00      	nop
 8017ee4:	3710      	adds	r7, #16
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
	...

08017eec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7f1 fcb6 	bl	800986c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	687a      	ldr	r2, [r7, #4]
 8017f0c:	6812      	ldr	r2, [r2, #0]
 8017f0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017f12:	f043 0301 	orr.w	r3, r3, #1
 8017f16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	7adb      	ldrb	r3, [r3, #11]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d005      	beq.n	8017f2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f20:	4b04      	ldr	r3, [pc, #16]	@ (8017f34 <HAL_PCD_SuspendCallback+0x48>)
 8017f22:	691b      	ldr	r3, [r3, #16]
 8017f24:	4a03      	ldr	r2, [pc, #12]	@ (8017f34 <HAL_PCD_SuspendCallback+0x48>)
 8017f26:	f043 0306 	orr.w	r3, r3, #6
 8017f2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017f2c:	bf00      	nop
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	e000ed00 	.word	0xe000ed00

08017f38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7f1 fcac 	bl	80098a4 <USBD_LL_Resume>
}
 8017f4c:	bf00      	nop
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017f66:	78fa      	ldrb	r2, [r7, #3]
 8017f68:	4611      	mov	r1, r2
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7f1 fd04 	bl	8009978 <USBD_LL_IsoOUTIncomplete>
}
 8017f70:	bf00      	nop
 8017f72:	3708      	adds	r7, #8
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}

08017f78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b082      	sub	sp, #8
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	460b      	mov	r3, r1
 8017f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017f8a:	78fa      	ldrb	r2, [r7, #3]
 8017f8c:	4611      	mov	r1, r2
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f7f1 fcc0 	bl	8009914 <USBD_LL_IsoINIncomplete>
}
 8017f94:	bf00      	nop
 8017f96:	3708      	adds	r7, #8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7f1 fd16 	bl	80099dc <USBD_LL_DevConnected>
}
 8017fb0:	bf00      	nop
 8017fb2:	3708      	adds	r7, #8
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b082      	sub	sp, #8
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7f1 fd13 	bl	80099f2 <USBD_LL_DevDisconnected>
}
 8017fcc:	bf00      	nop
 8017fce:	3708      	adds	r7, #8
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d13c      	bne.n	801805e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017fe4:	4a20      	ldr	r2, [pc, #128]	@ (8018068 <USBD_LL_Init+0x94>)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	4a1e      	ldr	r2, [pc, #120]	@ (8018068 <USBD_LL_Init+0x94>)
 8017ff0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8018068 <USBD_LL_Init+0x94>)
 8017ff6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8017ffa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8018068 <USBD_LL_Init+0x94>)
 8017ffe:	2204      	movs	r2, #4
 8018000:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018002:	4b19      	ldr	r3, [pc, #100]	@ (8018068 <USBD_LL_Init+0x94>)
 8018004:	2202      	movs	r2, #2
 8018006:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018008:	4b17      	ldr	r3, [pc, #92]	@ (8018068 <USBD_LL_Init+0x94>)
 801800a:	2200      	movs	r2, #0
 801800c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801800e:	4b16      	ldr	r3, [pc, #88]	@ (8018068 <USBD_LL_Init+0x94>)
 8018010:	2202      	movs	r2, #2
 8018012:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018014:	4b14      	ldr	r3, [pc, #80]	@ (8018068 <USBD_LL_Init+0x94>)
 8018016:	2200      	movs	r2, #0
 8018018:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801801a:	4b13      	ldr	r3, [pc, #76]	@ (8018068 <USBD_LL_Init+0x94>)
 801801c:	2200      	movs	r2, #0
 801801e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018020:	4b11      	ldr	r3, [pc, #68]	@ (8018068 <USBD_LL_Init+0x94>)
 8018022:	2200      	movs	r2, #0
 8018024:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018026:	4b10      	ldr	r3, [pc, #64]	@ (8018068 <USBD_LL_Init+0x94>)
 8018028:	2200      	movs	r2, #0
 801802a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801802c:	4b0e      	ldr	r3, [pc, #56]	@ (8018068 <USBD_LL_Init+0x94>)
 801802e:	2200      	movs	r2, #0
 8018030:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018032:	480d      	ldr	r0, [pc, #52]	@ (8018068 <USBD_LL_Init+0x94>)
 8018034:	f7eb f87b 	bl	800312e <HAL_PCD_Init>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d001      	beq.n	8018042 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801803e:	f7e8 fcd1 	bl	80009e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018042:	2180      	movs	r1, #128	@ 0x80
 8018044:	4808      	ldr	r0, [pc, #32]	@ (8018068 <USBD_LL_Init+0x94>)
 8018046:	f7ec faa8 	bl	800459a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801804a:	2240      	movs	r2, #64	@ 0x40
 801804c:	2100      	movs	r1, #0
 801804e:	4806      	ldr	r0, [pc, #24]	@ (8018068 <USBD_LL_Init+0x94>)
 8018050:	f7ec fa5c 	bl	800450c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018054:	2280      	movs	r2, #128	@ 0x80
 8018056:	2101      	movs	r1, #1
 8018058:	4803      	ldr	r0, [pc, #12]	@ (8018068 <USBD_LL_Init+0x94>)
 801805a:	f7ec fa57 	bl	800450c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801805e:	2300      	movs	r3, #0
}
 8018060:	4618      	mov	r0, r3
 8018062:	3708      	adds	r7, #8
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}
 8018068:	2000dcf4 	.word	0x2000dcf4

0801806c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b084      	sub	sp, #16
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018074:	2300      	movs	r3, #0
 8018076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018078:	2300      	movs	r3, #0
 801807a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018082:	4618      	mov	r0, r3
 8018084:	f7eb f962 	bl	800334c <HAL_PCD_Start>
 8018088:	4603      	mov	r3, r0
 801808a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801808c:	7bfb      	ldrb	r3, [r7, #15]
 801808e:	4618      	mov	r0, r3
 8018090:	f000 f942 	bl	8018318 <USBD_Get_USB_Status>
 8018094:	4603      	mov	r3, r0
 8018096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018098:	7bbb      	ldrb	r3, [r7, #14]
}
 801809a:	4618      	mov	r0, r3
 801809c:	3710      	adds	r7, #16
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}

080180a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80180a2:	b580      	push	{r7, lr}
 80180a4:	b084      	sub	sp, #16
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
 80180aa:	4608      	mov	r0, r1
 80180ac:	4611      	mov	r1, r2
 80180ae:	461a      	mov	r2, r3
 80180b0:	4603      	mov	r3, r0
 80180b2:	70fb      	strb	r3, [r7, #3]
 80180b4:	460b      	mov	r3, r1
 80180b6:	70bb      	strb	r3, [r7, #2]
 80180b8:	4613      	mov	r3, r2
 80180ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180bc:	2300      	movs	r3, #0
 80180be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180c0:	2300      	movs	r3, #0
 80180c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180ca:	78bb      	ldrb	r3, [r7, #2]
 80180cc:	883a      	ldrh	r2, [r7, #0]
 80180ce:	78f9      	ldrb	r1, [r7, #3]
 80180d0:	f7eb fe36 	bl	8003d40 <HAL_PCD_EP_Open>
 80180d4:	4603      	mov	r3, r0
 80180d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180d8:	7bfb      	ldrb	r3, [r7, #15]
 80180da:	4618      	mov	r0, r3
 80180dc:	f000 f91c 	bl	8018318 <USBD_Get_USB_Status>
 80180e0:	4603      	mov	r3, r0
 80180e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}

080180ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80180ee:	b580      	push	{r7, lr}
 80180f0:	b084      	sub	sp, #16
 80180f2:	af00      	add	r7, sp, #0
 80180f4:	6078      	str	r0, [r7, #4]
 80180f6:	460b      	mov	r3, r1
 80180f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180fa:	2300      	movs	r3, #0
 80180fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180fe:	2300      	movs	r3, #0
 8018100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018108:	78fa      	ldrb	r2, [r7, #3]
 801810a:	4611      	mov	r1, r2
 801810c:	4618      	mov	r0, r3
 801810e:	f7eb fe81 	bl	8003e14 <HAL_PCD_EP_Close>
 8018112:	4603      	mov	r3, r0
 8018114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018116:	7bfb      	ldrb	r3, [r7, #15]
 8018118:	4618      	mov	r0, r3
 801811a:	f000 f8fd 	bl	8018318 <USBD_Get_USB_Status>
 801811e:	4603      	mov	r3, r0
 8018120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018122:	7bbb      	ldrb	r3, [r7, #14]
}
 8018124:	4618      	mov	r0, r3
 8018126:	3710      	adds	r7, #16
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b084      	sub	sp, #16
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	460b      	mov	r3, r1
 8018136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018138:	2300      	movs	r3, #0
 801813a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801813c:	2300      	movs	r3, #0
 801813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018146:	78fa      	ldrb	r2, [r7, #3]
 8018148:	4611      	mov	r1, r2
 801814a:	4618      	mov	r0, r3
 801814c:	f7eb ff39 	bl	8003fc2 <HAL_PCD_EP_SetStall>
 8018150:	4603      	mov	r3, r0
 8018152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018154:	7bfb      	ldrb	r3, [r7, #15]
 8018156:	4618      	mov	r0, r3
 8018158:	f000 f8de 	bl	8018318 <USBD_Get_USB_Status>
 801815c:	4603      	mov	r3, r0
 801815e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018160:	7bbb      	ldrb	r3, [r7, #14]
}
 8018162:	4618      	mov	r0, r3
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}

0801816a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801816a:	b580      	push	{r7, lr}
 801816c:	b084      	sub	sp, #16
 801816e:	af00      	add	r7, sp, #0
 8018170:	6078      	str	r0, [r7, #4]
 8018172:	460b      	mov	r3, r1
 8018174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018176:	2300      	movs	r3, #0
 8018178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801817a:	2300      	movs	r3, #0
 801817c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018184:	78fa      	ldrb	r2, [r7, #3]
 8018186:	4611      	mov	r1, r2
 8018188:	4618      	mov	r0, r3
 801818a:	f7eb ff7d 	bl	8004088 <HAL_PCD_EP_ClrStall>
 801818e:	4603      	mov	r3, r0
 8018190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018192:	7bfb      	ldrb	r3, [r7, #15]
 8018194:	4618      	mov	r0, r3
 8018196:	f000 f8bf 	bl	8018318 <USBD_Get_USB_Status>
 801819a:	4603      	mov	r3, r0
 801819c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}

080181a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181a8:	b480      	push	{r7}
 80181aa:	b085      	sub	sp, #20
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	460b      	mov	r3, r1
 80181b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80181ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80181bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	da0b      	bge.n	80181dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80181c4:	78fb      	ldrb	r3, [r7, #3]
 80181c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80181ca:	68f9      	ldr	r1, [r7, #12]
 80181cc:	4613      	mov	r3, r2
 80181ce:	00db      	lsls	r3, r3, #3
 80181d0:	4413      	add	r3, r2
 80181d2:	009b      	lsls	r3, r3, #2
 80181d4:	440b      	add	r3, r1
 80181d6:	3316      	adds	r3, #22
 80181d8:	781b      	ldrb	r3, [r3, #0]
 80181da:	e00b      	b.n	80181f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80181dc:	78fb      	ldrb	r3, [r7, #3]
 80181de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80181e2:	68f9      	ldr	r1, [r7, #12]
 80181e4:	4613      	mov	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	4413      	add	r3, r2
 80181ea:	009b      	lsls	r3, r3, #2
 80181ec:	440b      	add	r3, r1
 80181ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80181f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	3714      	adds	r7, #20
 80181f8:	46bd      	mov	sp, r7
 80181fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fe:	4770      	bx	lr

08018200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b084      	sub	sp, #16
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	460b      	mov	r3, r1
 801820a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801820c:	2300      	movs	r3, #0
 801820e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018210:	2300      	movs	r3, #0
 8018212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801821a:	78fa      	ldrb	r2, [r7, #3]
 801821c:	4611      	mov	r1, r2
 801821e:	4618      	mov	r0, r3
 8018220:	f7eb fd6a 	bl	8003cf8 <HAL_PCD_SetAddress>
 8018224:	4603      	mov	r3, r0
 8018226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018228:	7bfb      	ldrb	r3, [r7, #15]
 801822a:	4618      	mov	r0, r3
 801822c:	f000 f874 	bl	8018318 <USBD_Get_USB_Status>
 8018230:	4603      	mov	r3, r0
 8018232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018234:	7bbb      	ldrb	r3, [r7, #14]
}
 8018236:	4618      	mov	r0, r3
 8018238:	3710      	adds	r7, #16
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801823e:	b580      	push	{r7, lr}
 8018240:	b086      	sub	sp, #24
 8018242:	af00      	add	r7, sp, #0
 8018244:	60f8      	str	r0, [r7, #12]
 8018246:	607a      	str	r2, [r7, #4]
 8018248:	603b      	str	r3, [r7, #0]
 801824a:	460b      	mov	r3, r1
 801824c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801824e:	2300      	movs	r3, #0
 8018250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018252:	2300      	movs	r3, #0
 8018254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801825c:	7af9      	ldrb	r1, [r7, #11]
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	687a      	ldr	r2, [r7, #4]
 8018262:	f7eb fe74 	bl	8003f4e <HAL_PCD_EP_Transmit>
 8018266:	4603      	mov	r3, r0
 8018268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801826a:	7dfb      	ldrb	r3, [r7, #23]
 801826c:	4618      	mov	r0, r3
 801826e:	f000 f853 	bl	8018318 <USBD_Get_USB_Status>
 8018272:	4603      	mov	r3, r0
 8018274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018276:	7dbb      	ldrb	r3, [r7, #22]
}
 8018278:	4618      	mov	r0, r3
 801827a:	3718      	adds	r7, #24
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b086      	sub	sp, #24
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	607a      	str	r2, [r7, #4]
 801828a:	603b      	str	r3, [r7, #0]
 801828c:	460b      	mov	r3, r1
 801828e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018290:	2300      	movs	r3, #0
 8018292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018294:	2300      	movs	r3, #0
 8018296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801829e:	7af9      	ldrb	r1, [r7, #11]
 80182a0:	683b      	ldr	r3, [r7, #0]
 80182a2:	687a      	ldr	r2, [r7, #4]
 80182a4:	f7eb fe00 	bl	8003ea8 <HAL_PCD_EP_Receive>
 80182a8:	4603      	mov	r3, r0
 80182aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182ac:	7dfb      	ldrb	r3, [r7, #23]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f000 f832 	bl	8018318 <USBD_Get_USB_Status>
 80182b4:	4603      	mov	r3, r0
 80182b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80182b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	3718      	adds	r7, #24
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}

080182c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182c2:	b580      	push	{r7, lr}
 80182c4:	b082      	sub	sp, #8
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	6078      	str	r0, [r7, #4]
 80182ca:	460b      	mov	r3, r1
 80182cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80182d4:	78fa      	ldrb	r2, [r7, #3]
 80182d6:	4611      	mov	r1, r2
 80182d8:	4618      	mov	r0, r3
 80182da:	f7eb fe20 	bl	8003f1e <HAL_PCD_EP_GetRxCount>
 80182de:	4603      	mov	r3, r0
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3708      	adds	r7, #8
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}

080182e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b083      	sub	sp, #12
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80182f0:	4b03      	ldr	r3, [pc, #12]	@ (8018300 <USBD_static_malloc+0x18>)
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	370c      	adds	r7, #12
 80182f6:	46bd      	mov	sp, r7
 80182f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fc:	4770      	bx	lr
 80182fe:	bf00      	nop
 8018300:	2000e1d8 	.word	0x2000e1d8

08018304 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]

}
 801830c:	bf00      	nop
 801830e:	370c      	adds	r7, #12
 8018310:	46bd      	mov	sp, r7
 8018312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018316:	4770      	bx	lr

08018318 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018318:	b480      	push	{r7}
 801831a:	b085      	sub	sp, #20
 801831c:	af00      	add	r7, sp, #0
 801831e:	4603      	mov	r3, r0
 8018320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018322:	2300      	movs	r3, #0
 8018324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018326:	79fb      	ldrb	r3, [r7, #7]
 8018328:	2b03      	cmp	r3, #3
 801832a:	d817      	bhi.n	801835c <USBD_Get_USB_Status+0x44>
 801832c:	a201      	add	r2, pc, #4	@ (adr r2, 8018334 <USBD_Get_USB_Status+0x1c>)
 801832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018332:	bf00      	nop
 8018334:	08018345 	.word	0x08018345
 8018338:	0801834b 	.word	0x0801834b
 801833c:	08018351 	.word	0x08018351
 8018340:	08018357 	.word	0x08018357
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018344:	2300      	movs	r3, #0
 8018346:	73fb      	strb	r3, [r7, #15]
    break;
 8018348:	e00b      	b.n	8018362 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801834a:	2303      	movs	r3, #3
 801834c:	73fb      	strb	r3, [r7, #15]
    break;
 801834e:	e008      	b.n	8018362 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018350:	2301      	movs	r3, #1
 8018352:	73fb      	strb	r3, [r7, #15]
    break;
 8018354:	e005      	b.n	8018362 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018356:	2303      	movs	r3, #3
 8018358:	73fb      	strb	r3, [r7, #15]
    break;
 801835a:	e002      	b.n	8018362 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801835c:	2303      	movs	r3, #3
 801835e:	73fb      	strb	r3, [r7, #15]
    break;
 8018360:	bf00      	nop
  }
  return usb_status;
 8018362:	7bfb      	ldrb	r3, [r7, #15]
}
 8018364:	4618      	mov	r0, r3
 8018366:	3714      	adds	r7, #20
 8018368:	46bd      	mov	sp, r7
 801836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836e:	4770      	bx	lr

08018370 <rand>:
 8018370:	4b16      	ldr	r3, [pc, #88]	@ (80183cc <rand+0x5c>)
 8018372:	b510      	push	{r4, lr}
 8018374:	681c      	ldr	r4, [r3, #0]
 8018376:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018378:	b9b3      	cbnz	r3, 80183a8 <rand+0x38>
 801837a:	2018      	movs	r0, #24
 801837c:	f000 faf8 	bl	8018970 <malloc>
 8018380:	4602      	mov	r2, r0
 8018382:	6320      	str	r0, [r4, #48]	@ 0x30
 8018384:	b920      	cbnz	r0, 8018390 <rand+0x20>
 8018386:	4b12      	ldr	r3, [pc, #72]	@ (80183d0 <rand+0x60>)
 8018388:	4812      	ldr	r0, [pc, #72]	@ (80183d4 <rand+0x64>)
 801838a:	2152      	movs	r1, #82	@ 0x52
 801838c:	f000 fa88 	bl	80188a0 <__assert_func>
 8018390:	4911      	ldr	r1, [pc, #68]	@ (80183d8 <rand+0x68>)
 8018392:	4b12      	ldr	r3, [pc, #72]	@ (80183dc <rand+0x6c>)
 8018394:	e9c0 1300 	strd	r1, r3, [r0]
 8018398:	4b11      	ldr	r3, [pc, #68]	@ (80183e0 <rand+0x70>)
 801839a:	6083      	str	r3, [r0, #8]
 801839c:	230b      	movs	r3, #11
 801839e:	8183      	strh	r3, [r0, #12]
 80183a0:	2100      	movs	r1, #0
 80183a2:	2001      	movs	r0, #1
 80183a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80183a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80183aa:	480e      	ldr	r0, [pc, #56]	@ (80183e4 <rand+0x74>)
 80183ac:	690b      	ldr	r3, [r1, #16]
 80183ae:	694c      	ldr	r4, [r1, #20]
 80183b0:	4a0d      	ldr	r2, [pc, #52]	@ (80183e8 <rand+0x78>)
 80183b2:	4358      	muls	r0, r3
 80183b4:	fb02 0004 	mla	r0, r2, r4, r0
 80183b8:	fba3 3202 	umull	r3, r2, r3, r2
 80183bc:	3301      	adds	r3, #1
 80183be:	eb40 0002 	adc.w	r0, r0, r2
 80183c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80183c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80183ca:	bd10      	pop	{r4, pc}
 80183cc:	20000118 	.word	0x20000118
 80183d0:	0801d2c0 	.word	0x0801d2c0
 80183d4:	0801d2d7 	.word	0x0801d2d7
 80183d8:	abcd330e 	.word	0xabcd330e
 80183dc:	e66d1234 	.word	0xe66d1234
 80183e0:	0005deec 	.word	0x0005deec
 80183e4:	5851f42d 	.word	0x5851f42d
 80183e8:	4c957f2d 	.word	0x4c957f2d

080183ec <std>:
 80183ec:	2300      	movs	r3, #0
 80183ee:	b510      	push	{r4, lr}
 80183f0:	4604      	mov	r4, r0
 80183f2:	e9c0 3300 	strd	r3, r3, [r0]
 80183f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80183fa:	6083      	str	r3, [r0, #8]
 80183fc:	8181      	strh	r1, [r0, #12]
 80183fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8018400:	81c2      	strh	r2, [r0, #14]
 8018402:	6183      	str	r3, [r0, #24]
 8018404:	4619      	mov	r1, r3
 8018406:	2208      	movs	r2, #8
 8018408:	305c      	adds	r0, #92	@ 0x5c
 801840a:	f000 f966 	bl	80186da <memset>
 801840e:	4b0d      	ldr	r3, [pc, #52]	@ (8018444 <std+0x58>)
 8018410:	6263      	str	r3, [r4, #36]	@ 0x24
 8018412:	4b0d      	ldr	r3, [pc, #52]	@ (8018448 <std+0x5c>)
 8018414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018416:	4b0d      	ldr	r3, [pc, #52]	@ (801844c <std+0x60>)
 8018418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801841a:	4b0d      	ldr	r3, [pc, #52]	@ (8018450 <std+0x64>)
 801841c:	6323      	str	r3, [r4, #48]	@ 0x30
 801841e:	4b0d      	ldr	r3, [pc, #52]	@ (8018454 <std+0x68>)
 8018420:	6224      	str	r4, [r4, #32]
 8018422:	429c      	cmp	r4, r3
 8018424:	d006      	beq.n	8018434 <std+0x48>
 8018426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801842a:	4294      	cmp	r4, r2
 801842c:	d002      	beq.n	8018434 <std+0x48>
 801842e:	33d0      	adds	r3, #208	@ 0xd0
 8018430:	429c      	cmp	r4, r3
 8018432:	d105      	bne.n	8018440 <std+0x54>
 8018434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801843c:	f000 ba1e 	b.w	801887c <__retarget_lock_init_recursive>
 8018440:	bd10      	pop	{r4, pc}
 8018442:	bf00      	nop
 8018444:	08018601 	.word	0x08018601
 8018448:	08018623 	.word	0x08018623
 801844c:	0801865b 	.word	0x0801865b
 8018450:	0801867f 	.word	0x0801867f
 8018454:	2000e3f8 	.word	0x2000e3f8

08018458 <stdio_exit_handler>:
 8018458:	4a02      	ldr	r2, [pc, #8]	@ (8018464 <stdio_exit_handler+0xc>)
 801845a:	4903      	ldr	r1, [pc, #12]	@ (8018468 <stdio_exit_handler+0x10>)
 801845c:	4803      	ldr	r0, [pc, #12]	@ (801846c <stdio_exit_handler+0x14>)
 801845e:	f000 b869 	b.w	8018534 <_fwalk_sglue>
 8018462:	bf00      	nop
 8018464:	2000010c 	.word	0x2000010c
 8018468:	08019431 	.word	0x08019431
 801846c:	2000011c 	.word	0x2000011c

08018470 <cleanup_stdio>:
 8018470:	6841      	ldr	r1, [r0, #4]
 8018472:	4b0c      	ldr	r3, [pc, #48]	@ (80184a4 <cleanup_stdio+0x34>)
 8018474:	4299      	cmp	r1, r3
 8018476:	b510      	push	{r4, lr}
 8018478:	4604      	mov	r4, r0
 801847a:	d001      	beq.n	8018480 <cleanup_stdio+0x10>
 801847c:	f000 ffd8 	bl	8019430 <_fflush_r>
 8018480:	68a1      	ldr	r1, [r4, #8]
 8018482:	4b09      	ldr	r3, [pc, #36]	@ (80184a8 <cleanup_stdio+0x38>)
 8018484:	4299      	cmp	r1, r3
 8018486:	d002      	beq.n	801848e <cleanup_stdio+0x1e>
 8018488:	4620      	mov	r0, r4
 801848a:	f000 ffd1 	bl	8019430 <_fflush_r>
 801848e:	68e1      	ldr	r1, [r4, #12]
 8018490:	4b06      	ldr	r3, [pc, #24]	@ (80184ac <cleanup_stdio+0x3c>)
 8018492:	4299      	cmp	r1, r3
 8018494:	d004      	beq.n	80184a0 <cleanup_stdio+0x30>
 8018496:	4620      	mov	r0, r4
 8018498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801849c:	f000 bfc8 	b.w	8019430 <_fflush_r>
 80184a0:	bd10      	pop	{r4, pc}
 80184a2:	bf00      	nop
 80184a4:	2000e3f8 	.word	0x2000e3f8
 80184a8:	2000e460 	.word	0x2000e460
 80184ac:	2000e4c8 	.word	0x2000e4c8

080184b0 <global_stdio_init.part.0>:
 80184b0:	b510      	push	{r4, lr}
 80184b2:	4b0b      	ldr	r3, [pc, #44]	@ (80184e0 <global_stdio_init.part.0+0x30>)
 80184b4:	4c0b      	ldr	r4, [pc, #44]	@ (80184e4 <global_stdio_init.part.0+0x34>)
 80184b6:	4a0c      	ldr	r2, [pc, #48]	@ (80184e8 <global_stdio_init.part.0+0x38>)
 80184b8:	601a      	str	r2, [r3, #0]
 80184ba:	4620      	mov	r0, r4
 80184bc:	2200      	movs	r2, #0
 80184be:	2104      	movs	r1, #4
 80184c0:	f7ff ff94 	bl	80183ec <std>
 80184c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80184c8:	2201      	movs	r2, #1
 80184ca:	2109      	movs	r1, #9
 80184cc:	f7ff ff8e 	bl	80183ec <std>
 80184d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80184d4:	2202      	movs	r2, #2
 80184d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184da:	2112      	movs	r1, #18
 80184dc:	f7ff bf86 	b.w	80183ec <std>
 80184e0:	2000e530 	.word	0x2000e530
 80184e4:	2000e3f8 	.word	0x2000e3f8
 80184e8:	08018459 	.word	0x08018459

080184ec <__sfp_lock_acquire>:
 80184ec:	4801      	ldr	r0, [pc, #4]	@ (80184f4 <__sfp_lock_acquire+0x8>)
 80184ee:	f000 b9c6 	b.w	801887e <__retarget_lock_acquire_recursive>
 80184f2:	bf00      	nop
 80184f4:	2000e539 	.word	0x2000e539

080184f8 <__sfp_lock_release>:
 80184f8:	4801      	ldr	r0, [pc, #4]	@ (8018500 <__sfp_lock_release+0x8>)
 80184fa:	f000 b9c1 	b.w	8018880 <__retarget_lock_release_recursive>
 80184fe:	bf00      	nop
 8018500:	2000e539 	.word	0x2000e539

08018504 <__sinit>:
 8018504:	b510      	push	{r4, lr}
 8018506:	4604      	mov	r4, r0
 8018508:	f7ff fff0 	bl	80184ec <__sfp_lock_acquire>
 801850c:	6a23      	ldr	r3, [r4, #32]
 801850e:	b11b      	cbz	r3, 8018518 <__sinit+0x14>
 8018510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018514:	f7ff bff0 	b.w	80184f8 <__sfp_lock_release>
 8018518:	4b04      	ldr	r3, [pc, #16]	@ (801852c <__sinit+0x28>)
 801851a:	6223      	str	r3, [r4, #32]
 801851c:	4b04      	ldr	r3, [pc, #16]	@ (8018530 <__sinit+0x2c>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d1f5      	bne.n	8018510 <__sinit+0xc>
 8018524:	f7ff ffc4 	bl	80184b0 <global_stdio_init.part.0>
 8018528:	e7f2      	b.n	8018510 <__sinit+0xc>
 801852a:	bf00      	nop
 801852c:	08018471 	.word	0x08018471
 8018530:	2000e530 	.word	0x2000e530

08018534 <_fwalk_sglue>:
 8018534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018538:	4607      	mov	r7, r0
 801853a:	4688      	mov	r8, r1
 801853c:	4614      	mov	r4, r2
 801853e:	2600      	movs	r6, #0
 8018540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018544:	f1b9 0901 	subs.w	r9, r9, #1
 8018548:	d505      	bpl.n	8018556 <_fwalk_sglue+0x22>
 801854a:	6824      	ldr	r4, [r4, #0]
 801854c:	2c00      	cmp	r4, #0
 801854e:	d1f7      	bne.n	8018540 <_fwalk_sglue+0xc>
 8018550:	4630      	mov	r0, r6
 8018552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018556:	89ab      	ldrh	r3, [r5, #12]
 8018558:	2b01      	cmp	r3, #1
 801855a:	d907      	bls.n	801856c <_fwalk_sglue+0x38>
 801855c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018560:	3301      	adds	r3, #1
 8018562:	d003      	beq.n	801856c <_fwalk_sglue+0x38>
 8018564:	4629      	mov	r1, r5
 8018566:	4638      	mov	r0, r7
 8018568:	47c0      	blx	r8
 801856a:	4306      	orrs	r6, r0
 801856c:	3568      	adds	r5, #104	@ 0x68
 801856e:	e7e9      	b.n	8018544 <_fwalk_sglue+0x10>

08018570 <iprintf>:
 8018570:	b40f      	push	{r0, r1, r2, r3}
 8018572:	b507      	push	{r0, r1, r2, lr}
 8018574:	4906      	ldr	r1, [pc, #24]	@ (8018590 <iprintf+0x20>)
 8018576:	ab04      	add	r3, sp, #16
 8018578:	6808      	ldr	r0, [r1, #0]
 801857a:	f853 2b04 	ldr.w	r2, [r3], #4
 801857e:	6881      	ldr	r1, [r0, #8]
 8018580:	9301      	str	r3, [sp, #4]
 8018582:	f000 fc2d 	bl	8018de0 <_vfiprintf_r>
 8018586:	b003      	add	sp, #12
 8018588:	f85d eb04 	ldr.w	lr, [sp], #4
 801858c:	b004      	add	sp, #16
 801858e:	4770      	bx	lr
 8018590:	20000118 	.word	0x20000118

08018594 <sniprintf>:
 8018594:	b40c      	push	{r2, r3}
 8018596:	b530      	push	{r4, r5, lr}
 8018598:	4b18      	ldr	r3, [pc, #96]	@ (80185fc <sniprintf+0x68>)
 801859a:	1e0c      	subs	r4, r1, #0
 801859c:	681d      	ldr	r5, [r3, #0]
 801859e:	b09d      	sub	sp, #116	@ 0x74
 80185a0:	da08      	bge.n	80185b4 <sniprintf+0x20>
 80185a2:	238b      	movs	r3, #139	@ 0x8b
 80185a4:	602b      	str	r3, [r5, #0]
 80185a6:	f04f 30ff 	mov.w	r0, #4294967295
 80185aa:	b01d      	add	sp, #116	@ 0x74
 80185ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80185b0:	b002      	add	sp, #8
 80185b2:	4770      	bx	lr
 80185b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80185b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80185bc:	f04f 0300 	mov.w	r3, #0
 80185c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80185c2:	bf14      	ite	ne
 80185c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80185c8:	4623      	moveq	r3, r4
 80185ca:	9304      	str	r3, [sp, #16]
 80185cc:	9307      	str	r3, [sp, #28]
 80185ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80185d2:	9002      	str	r0, [sp, #8]
 80185d4:	9006      	str	r0, [sp, #24]
 80185d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80185dc:	ab21      	add	r3, sp, #132	@ 0x84
 80185de:	a902      	add	r1, sp, #8
 80185e0:	4628      	mov	r0, r5
 80185e2:	9301      	str	r3, [sp, #4]
 80185e4:	f000 fad6 	bl	8018b94 <_svfiprintf_r>
 80185e8:	1c43      	adds	r3, r0, #1
 80185ea:	bfbc      	itt	lt
 80185ec:	238b      	movlt	r3, #139	@ 0x8b
 80185ee:	602b      	strlt	r3, [r5, #0]
 80185f0:	2c00      	cmp	r4, #0
 80185f2:	d0da      	beq.n	80185aa <sniprintf+0x16>
 80185f4:	9b02      	ldr	r3, [sp, #8]
 80185f6:	2200      	movs	r2, #0
 80185f8:	701a      	strb	r2, [r3, #0]
 80185fa:	e7d6      	b.n	80185aa <sniprintf+0x16>
 80185fc:	20000118 	.word	0x20000118

08018600 <__sread>:
 8018600:	b510      	push	{r4, lr}
 8018602:	460c      	mov	r4, r1
 8018604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018608:	f000 f8f0 	bl	80187ec <_read_r>
 801860c:	2800      	cmp	r0, #0
 801860e:	bfab      	itete	ge
 8018610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018612:	89a3      	ldrhlt	r3, [r4, #12]
 8018614:	181b      	addge	r3, r3, r0
 8018616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801861a:	bfac      	ite	ge
 801861c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801861e:	81a3      	strhlt	r3, [r4, #12]
 8018620:	bd10      	pop	{r4, pc}

08018622 <__swrite>:
 8018622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018626:	461f      	mov	r7, r3
 8018628:	898b      	ldrh	r3, [r1, #12]
 801862a:	05db      	lsls	r3, r3, #23
 801862c:	4605      	mov	r5, r0
 801862e:	460c      	mov	r4, r1
 8018630:	4616      	mov	r6, r2
 8018632:	d505      	bpl.n	8018640 <__swrite+0x1e>
 8018634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018638:	2302      	movs	r3, #2
 801863a:	2200      	movs	r2, #0
 801863c:	f000 f8c4 	bl	80187c8 <_lseek_r>
 8018640:	89a3      	ldrh	r3, [r4, #12]
 8018642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801864a:	81a3      	strh	r3, [r4, #12]
 801864c:	4632      	mov	r2, r6
 801864e:	463b      	mov	r3, r7
 8018650:	4628      	mov	r0, r5
 8018652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018656:	f000 b8db 	b.w	8018810 <_write_r>

0801865a <__sseek>:
 801865a:	b510      	push	{r4, lr}
 801865c:	460c      	mov	r4, r1
 801865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018662:	f000 f8b1 	bl	80187c8 <_lseek_r>
 8018666:	1c43      	adds	r3, r0, #1
 8018668:	89a3      	ldrh	r3, [r4, #12]
 801866a:	bf15      	itete	ne
 801866c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801866e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018672:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018676:	81a3      	strheq	r3, [r4, #12]
 8018678:	bf18      	it	ne
 801867a:	81a3      	strhne	r3, [r4, #12]
 801867c:	bd10      	pop	{r4, pc}

0801867e <__sclose>:
 801867e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018682:	f000 b833 	b.w	80186ec <_close_r>

08018686 <memcmp>:
 8018686:	b510      	push	{r4, lr}
 8018688:	3901      	subs	r1, #1
 801868a:	4402      	add	r2, r0
 801868c:	4290      	cmp	r0, r2
 801868e:	d101      	bne.n	8018694 <memcmp+0xe>
 8018690:	2000      	movs	r0, #0
 8018692:	e005      	b.n	80186a0 <memcmp+0x1a>
 8018694:	7803      	ldrb	r3, [r0, #0]
 8018696:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801869a:	42a3      	cmp	r3, r4
 801869c:	d001      	beq.n	80186a2 <memcmp+0x1c>
 801869e:	1b18      	subs	r0, r3, r4
 80186a0:	bd10      	pop	{r4, pc}
 80186a2:	3001      	adds	r0, #1
 80186a4:	e7f2      	b.n	801868c <memcmp+0x6>

080186a6 <memmove>:
 80186a6:	4288      	cmp	r0, r1
 80186a8:	b510      	push	{r4, lr}
 80186aa:	eb01 0402 	add.w	r4, r1, r2
 80186ae:	d902      	bls.n	80186b6 <memmove+0x10>
 80186b0:	4284      	cmp	r4, r0
 80186b2:	4623      	mov	r3, r4
 80186b4:	d807      	bhi.n	80186c6 <memmove+0x20>
 80186b6:	1e43      	subs	r3, r0, #1
 80186b8:	42a1      	cmp	r1, r4
 80186ba:	d008      	beq.n	80186ce <memmove+0x28>
 80186bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186c4:	e7f8      	b.n	80186b8 <memmove+0x12>
 80186c6:	4402      	add	r2, r0
 80186c8:	4601      	mov	r1, r0
 80186ca:	428a      	cmp	r2, r1
 80186cc:	d100      	bne.n	80186d0 <memmove+0x2a>
 80186ce:	bd10      	pop	{r4, pc}
 80186d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186d8:	e7f7      	b.n	80186ca <memmove+0x24>

080186da <memset>:
 80186da:	4402      	add	r2, r0
 80186dc:	4603      	mov	r3, r0
 80186de:	4293      	cmp	r3, r2
 80186e0:	d100      	bne.n	80186e4 <memset+0xa>
 80186e2:	4770      	bx	lr
 80186e4:	f803 1b01 	strb.w	r1, [r3], #1
 80186e8:	e7f9      	b.n	80186de <memset+0x4>
	...

080186ec <_close_r>:
 80186ec:	b538      	push	{r3, r4, r5, lr}
 80186ee:	4d06      	ldr	r5, [pc, #24]	@ (8018708 <_close_r+0x1c>)
 80186f0:	2300      	movs	r3, #0
 80186f2:	4604      	mov	r4, r0
 80186f4:	4608      	mov	r0, r1
 80186f6:	602b      	str	r3, [r5, #0]
 80186f8:	f7e8 fc38 	bl	8000f6c <_close>
 80186fc:	1c43      	adds	r3, r0, #1
 80186fe:	d102      	bne.n	8018706 <_close_r+0x1a>
 8018700:	682b      	ldr	r3, [r5, #0]
 8018702:	b103      	cbz	r3, 8018706 <_close_r+0x1a>
 8018704:	6023      	str	r3, [r4, #0]
 8018706:	bd38      	pop	{r3, r4, r5, pc}
 8018708:	2000e534 	.word	0x2000e534

0801870c <_reclaim_reent>:
 801870c:	4b2d      	ldr	r3, [pc, #180]	@ (80187c4 <_reclaim_reent+0xb8>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	4283      	cmp	r3, r0
 8018712:	b570      	push	{r4, r5, r6, lr}
 8018714:	4604      	mov	r4, r0
 8018716:	d053      	beq.n	80187c0 <_reclaim_reent+0xb4>
 8018718:	69c3      	ldr	r3, [r0, #28]
 801871a:	b31b      	cbz	r3, 8018764 <_reclaim_reent+0x58>
 801871c:	68db      	ldr	r3, [r3, #12]
 801871e:	b163      	cbz	r3, 801873a <_reclaim_reent+0x2e>
 8018720:	2500      	movs	r5, #0
 8018722:	69e3      	ldr	r3, [r4, #28]
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	5959      	ldr	r1, [r3, r5]
 8018728:	b9b1      	cbnz	r1, 8018758 <_reclaim_reent+0x4c>
 801872a:	3504      	adds	r5, #4
 801872c:	2d80      	cmp	r5, #128	@ 0x80
 801872e:	d1f8      	bne.n	8018722 <_reclaim_reent+0x16>
 8018730:	69e3      	ldr	r3, [r4, #28]
 8018732:	4620      	mov	r0, r4
 8018734:	68d9      	ldr	r1, [r3, #12]
 8018736:	f000 f8d1 	bl	80188dc <_free_r>
 801873a:	69e3      	ldr	r3, [r4, #28]
 801873c:	6819      	ldr	r1, [r3, #0]
 801873e:	b111      	cbz	r1, 8018746 <_reclaim_reent+0x3a>
 8018740:	4620      	mov	r0, r4
 8018742:	f000 f8cb 	bl	80188dc <_free_r>
 8018746:	69e3      	ldr	r3, [r4, #28]
 8018748:	689d      	ldr	r5, [r3, #8]
 801874a:	b15d      	cbz	r5, 8018764 <_reclaim_reent+0x58>
 801874c:	4629      	mov	r1, r5
 801874e:	4620      	mov	r0, r4
 8018750:	682d      	ldr	r5, [r5, #0]
 8018752:	f000 f8c3 	bl	80188dc <_free_r>
 8018756:	e7f8      	b.n	801874a <_reclaim_reent+0x3e>
 8018758:	680e      	ldr	r6, [r1, #0]
 801875a:	4620      	mov	r0, r4
 801875c:	f000 f8be 	bl	80188dc <_free_r>
 8018760:	4631      	mov	r1, r6
 8018762:	e7e1      	b.n	8018728 <_reclaim_reent+0x1c>
 8018764:	6961      	ldr	r1, [r4, #20]
 8018766:	b111      	cbz	r1, 801876e <_reclaim_reent+0x62>
 8018768:	4620      	mov	r0, r4
 801876a:	f000 f8b7 	bl	80188dc <_free_r>
 801876e:	69e1      	ldr	r1, [r4, #28]
 8018770:	b111      	cbz	r1, 8018778 <_reclaim_reent+0x6c>
 8018772:	4620      	mov	r0, r4
 8018774:	f000 f8b2 	bl	80188dc <_free_r>
 8018778:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801877a:	b111      	cbz	r1, 8018782 <_reclaim_reent+0x76>
 801877c:	4620      	mov	r0, r4
 801877e:	f000 f8ad 	bl	80188dc <_free_r>
 8018782:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018784:	b111      	cbz	r1, 801878c <_reclaim_reent+0x80>
 8018786:	4620      	mov	r0, r4
 8018788:	f000 f8a8 	bl	80188dc <_free_r>
 801878c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801878e:	b111      	cbz	r1, 8018796 <_reclaim_reent+0x8a>
 8018790:	4620      	mov	r0, r4
 8018792:	f000 f8a3 	bl	80188dc <_free_r>
 8018796:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018798:	b111      	cbz	r1, 80187a0 <_reclaim_reent+0x94>
 801879a:	4620      	mov	r0, r4
 801879c:	f000 f89e 	bl	80188dc <_free_r>
 80187a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80187a2:	b111      	cbz	r1, 80187aa <_reclaim_reent+0x9e>
 80187a4:	4620      	mov	r0, r4
 80187a6:	f000 f899 	bl	80188dc <_free_r>
 80187aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80187ac:	b111      	cbz	r1, 80187b4 <_reclaim_reent+0xa8>
 80187ae:	4620      	mov	r0, r4
 80187b0:	f000 f894 	bl	80188dc <_free_r>
 80187b4:	6a23      	ldr	r3, [r4, #32]
 80187b6:	b11b      	cbz	r3, 80187c0 <_reclaim_reent+0xb4>
 80187b8:	4620      	mov	r0, r4
 80187ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187be:	4718      	bx	r3
 80187c0:	bd70      	pop	{r4, r5, r6, pc}
 80187c2:	bf00      	nop
 80187c4:	20000118 	.word	0x20000118

080187c8 <_lseek_r>:
 80187c8:	b538      	push	{r3, r4, r5, lr}
 80187ca:	4d07      	ldr	r5, [pc, #28]	@ (80187e8 <_lseek_r+0x20>)
 80187cc:	4604      	mov	r4, r0
 80187ce:	4608      	mov	r0, r1
 80187d0:	4611      	mov	r1, r2
 80187d2:	2200      	movs	r2, #0
 80187d4:	602a      	str	r2, [r5, #0]
 80187d6:	461a      	mov	r2, r3
 80187d8:	f7e8 fbef 	bl	8000fba <_lseek>
 80187dc:	1c43      	adds	r3, r0, #1
 80187de:	d102      	bne.n	80187e6 <_lseek_r+0x1e>
 80187e0:	682b      	ldr	r3, [r5, #0]
 80187e2:	b103      	cbz	r3, 80187e6 <_lseek_r+0x1e>
 80187e4:	6023      	str	r3, [r4, #0]
 80187e6:	bd38      	pop	{r3, r4, r5, pc}
 80187e8:	2000e534 	.word	0x2000e534

080187ec <_read_r>:
 80187ec:	b538      	push	{r3, r4, r5, lr}
 80187ee:	4d07      	ldr	r5, [pc, #28]	@ (801880c <_read_r+0x20>)
 80187f0:	4604      	mov	r4, r0
 80187f2:	4608      	mov	r0, r1
 80187f4:	4611      	mov	r1, r2
 80187f6:	2200      	movs	r2, #0
 80187f8:	602a      	str	r2, [r5, #0]
 80187fa:	461a      	mov	r2, r3
 80187fc:	f7e8 fb7d 	bl	8000efa <_read>
 8018800:	1c43      	adds	r3, r0, #1
 8018802:	d102      	bne.n	801880a <_read_r+0x1e>
 8018804:	682b      	ldr	r3, [r5, #0]
 8018806:	b103      	cbz	r3, 801880a <_read_r+0x1e>
 8018808:	6023      	str	r3, [r4, #0]
 801880a:	bd38      	pop	{r3, r4, r5, pc}
 801880c:	2000e534 	.word	0x2000e534

08018810 <_write_r>:
 8018810:	b538      	push	{r3, r4, r5, lr}
 8018812:	4d07      	ldr	r5, [pc, #28]	@ (8018830 <_write_r+0x20>)
 8018814:	4604      	mov	r4, r0
 8018816:	4608      	mov	r0, r1
 8018818:	4611      	mov	r1, r2
 801881a:	2200      	movs	r2, #0
 801881c:	602a      	str	r2, [r5, #0]
 801881e:	461a      	mov	r2, r3
 8018820:	f7e8 fb88 	bl	8000f34 <_write>
 8018824:	1c43      	adds	r3, r0, #1
 8018826:	d102      	bne.n	801882e <_write_r+0x1e>
 8018828:	682b      	ldr	r3, [r5, #0]
 801882a:	b103      	cbz	r3, 801882e <_write_r+0x1e>
 801882c:	6023      	str	r3, [r4, #0]
 801882e:	bd38      	pop	{r3, r4, r5, pc}
 8018830:	2000e534 	.word	0x2000e534

08018834 <__libc_init_array>:
 8018834:	b570      	push	{r4, r5, r6, lr}
 8018836:	4d0d      	ldr	r5, [pc, #52]	@ (801886c <__libc_init_array+0x38>)
 8018838:	4c0d      	ldr	r4, [pc, #52]	@ (8018870 <__libc_init_array+0x3c>)
 801883a:	1b64      	subs	r4, r4, r5
 801883c:	10a4      	asrs	r4, r4, #2
 801883e:	2600      	movs	r6, #0
 8018840:	42a6      	cmp	r6, r4
 8018842:	d109      	bne.n	8018858 <__libc_init_array+0x24>
 8018844:	4d0b      	ldr	r5, [pc, #44]	@ (8018874 <__libc_init_array+0x40>)
 8018846:	4c0c      	ldr	r4, [pc, #48]	@ (8018878 <__libc_init_array+0x44>)
 8018848:	f000 ffd6 	bl	80197f8 <_init>
 801884c:	1b64      	subs	r4, r4, r5
 801884e:	10a4      	asrs	r4, r4, #2
 8018850:	2600      	movs	r6, #0
 8018852:	42a6      	cmp	r6, r4
 8018854:	d105      	bne.n	8018862 <__libc_init_array+0x2e>
 8018856:	bd70      	pop	{r4, r5, r6, pc}
 8018858:	f855 3b04 	ldr.w	r3, [r5], #4
 801885c:	4798      	blx	r3
 801885e:	3601      	adds	r6, #1
 8018860:	e7ee      	b.n	8018840 <__libc_init_array+0xc>
 8018862:	f855 3b04 	ldr.w	r3, [r5], #4
 8018866:	4798      	blx	r3
 8018868:	3601      	adds	r6, #1
 801886a:	e7f2      	b.n	8018852 <__libc_init_array+0x1e>
 801886c:	0801d3a8 	.word	0x0801d3a8
 8018870:	0801d3a8 	.word	0x0801d3a8
 8018874:	0801d3a8 	.word	0x0801d3a8
 8018878:	0801d3ac 	.word	0x0801d3ac

0801887c <__retarget_lock_init_recursive>:
 801887c:	4770      	bx	lr

0801887e <__retarget_lock_acquire_recursive>:
 801887e:	4770      	bx	lr

08018880 <__retarget_lock_release_recursive>:
 8018880:	4770      	bx	lr

08018882 <memcpy>:
 8018882:	440a      	add	r2, r1
 8018884:	4291      	cmp	r1, r2
 8018886:	f100 33ff 	add.w	r3, r0, #4294967295
 801888a:	d100      	bne.n	801888e <memcpy+0xc>
 801888c:	4770      	bx	lr
 801888e:	b510      	push	{r4, lr}
 8018890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018898:	4291      	cmp	r1, r2
 801889a:	d1f9      	bne.n	8018890 <memcpy+0xe>
 801889c:	bd10      	pop	{r4, pc}
	...

080188a0 <__assert_func>:
 80188a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80188a2:	4614      	mov	r4, r2
 80188a4:	461a      	mov	r2, r3
 80188a6:	4b09      	ldr	r3, [pc, #36]	@ (80188cc <__assert_func+0x2c>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	4605      	mov	r5, r0
 80188ac:	68d8      	ldr	r0, [r3, #12]
 80188ae:	b14c      	cbz	r4, 80188c4 <__assert_func+0x24>
 80188b0:	4b07      	ldr	r3, [pc, #28]	@ (80188d0 <__assert_func+0x30>)
 80188b2:	9100      	str	r1, [sp, #0]
 80188b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80188b8:	4906      	ldr	r1, [pc, #24]	@ (80188d4 <__assert_func+0x34>)
 80188ba:	462b      	mov	r3, r5
 80188bc:	f000 fde0 	bl	8019480 <fiprintf>
 80188c0:	f000 fe94 	bl	80195ec <abort>
 80188c4:	4b04      	ldr	r3, [pc, #16]	@ (80188d8 <__assert_func+0x38>)
 80188c6:	461c      	mov	r4, r3
 80188c8:	e7f3      	b.n	80188b2 <__assert_func+0x12>
 80188ca:	bf00      	nop
 80188cc:	20000118 	.word	0x20000118
 80188d0:	0801d32f 	.word	0x0801d32f
 80188d4:	0801d33c 	.word	0x0801d33c
 80188d8:	0801d36a 	.word	0x0801d36a

080188dc <_free_r>:
 80188dc:	b538      	push	{r3, r4, r5, lr}
 80188de:	4605      	mov	r5, r0
 80188e0:	2900      	cmp	r1, #0
 80188e2:	d041      	beq.n	8018968 <_free_r+0x8c>
 80188e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188e8:	1f0c      	subs	r4, r1, #4
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	bfb8      	it	lt
 80188ee:	18e4      	addlt	r4, r4, r3
 80188f0:	f000 f8e8 	bl	8018ac4 <__malloc_lock>
 80188f4:	4a1d      	ldr	r2, [pc, #116]	@ (801896c <_free_r+0x90>)
 80188f6:	6813      	ldr	r3, [r2, #0]
 80188f8:	b933      	cbnz	r3, 8018908 <_free_r+0x2c>
 80188fa:	6063      	str	r3, [r4, #4]
 80188fc:	6014      	str	r4, [r2, #0]
 80188fe:	4628      	mov	r0, r5
 8018900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018904:	f000 b8e4 	b.w	8018ad0 <__malloc_unlock>
 8018908:	42a3      	cmp	r3, r4
 801890a:	d908      	bls.n	801891e <_free_r+0x42>
 801890c:	6820      	ldr	r0, [r4, #0]
 801890e:	1821      	adds	r1, r4, r0
 8018910:	428b      	cmp	r3, r1
 8018912:	bf01      	itttt	eq
 8018914:	6819      	ldreq	r1, [r3, #0]
 8018916:	685b      	ldreq	r3, [r3, #4]
 8018918:	1809      	addeq	r1, r1, r0
 801891a:	6021      	streq	r1, [r4, #0]
 801891c:	e7ed      	b.n	80188fa <_free_r+0x1e>
 801891e:	461a      	mov	r2, r3
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	b10b      	cbz	r3, 8018928 <_free_r+0x4c>
 8018924:	42a3      	cmp	r3, r4
 8018926:	d9fa      	bls.n	801891e <_free_r+0x42>
 8018928:	6811      	ldr	r1, [r2, #0]
 801892a:	1850      	adds	r0, r2, r1
 801892c:	42a0      	cmp	r0, r4
 801892e:	d10b      	bne.n	8018948 <_free_r+0x6c>
 8018930:	6820      	ldr	r0, [r4, #0]
 8018932:	4401      	add	r1, r0
 8018934:	1850      	adds	r0, r2, r1
 8018936:	4283      	cmp	r3, r0
 8018938:	6011      	str	r1, [r2, #0]
 801893a:	d1e0      	bne.n	80188fe <_free_r+0x22>
 801893c:	6818      	ldr	r0, [r3, #0]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	6053      	str	r3, [r2, #4]
 8018942:	4408      	add	r0, r1
 8018944:	6010      	str	r0, [r2, #0]
 8018946:	e7da      	b.n	80188fe <_free_r+0x22>
 8018948:	d902      	bls.n	8018950 <_free_r+0x74>
 801894a:	230c      	movs	r3, #12
 801894c:	602b      	str	r3, [r5, #0]
 801894e:	e7d6      	b.n	80188fe <_free_r+0x22>
 8018950:	6820      	ldr	r0, [r4, #0]
 8018952:	1821      	adds	r1, r4, r0
 8018954:	428b      	cmp	r3, r1
 8018956:	bf04      	itt	eq
 8018958:	6819      	ldreq	r1, [r3, #0]
 801895a:	685b      	ldreq	r3, [r3, #4]
 801895c:	6063      	str	r3, [r4, #4]
 801895e:	bf04      	itt	eq
 8018960:	1809      	addeq	r1, r1, r0
 8018962:	6021      	streq	r1, [r4, #0]
 8018964:	6054      	str	r4, [r2, #4]
 8018966:	e7ca      	b.n	80188fe <_free_r+0x22>
 8018968:	bd38      	pop	{r3, r4, r5, pc}
 801896a:	bf00      	nop
 801896c:	2000e540 	.word	0x2000e540

08018970 <malloc>:
 8018970:	4b02      	ldr	r3, [pc, #8]	@ (801897c <malloc+0xc>)
 8018972:	4601      	mov	r1, r0
 8018974:	6818      	ldr	r0, [r3, #0]
 8018976:	f000 b825 	b.w	80189c4 <_malloc_r>
 801897a:	bf00      	nop
 801897c:	20000118 	.word	0x20000118

08018980 <sbrk_aligned>:
 8018980:	b570      	push	{r4, r5, r6, lr}
 8018982:	4e0f      	ldr	r6, [pc, #60]	@ (80189c0 <sbrk_aligned+0x40>)
 8018984:	460c      	mov	r4, r1
 8018986:	6831      	ldr	r1, [r6, #0]
 8018988:	4605      	mov	r5, r0
 801898a:	b911      	cbnz	r1, 8018992 <sbrk_aligned+0x12>
 801898c:	f000 fe1e 	bl	80195cc <_sbrk_r>
 8018990:	6030      	str	r0, [r6, #0]
 8018992:	4621      	mov	r1, r4
 8018994:	4628      	mov	r0, r5
 8018996:	f000 fe19 	bl	80195cc <_sbrk_r>
 801899a:	1c43      	adds	r3, r0, #1
 801899c:	d103      	bne.n	80189a6 <sbrk_aligned+0x26>
 801899e:	f04f 34ff 	mov.w	r4, #4294967295
 80189a2:	4620      	mov	r0, r4
 80189a4:	bd70      	pop	{r4, r5, r6, pc}
 80189a6:	1cc4      	adds	r4, r0, #3
 80189a8:	f024 0403 	bic.w	r4, r4, #3
 80189ac:	42a0      	cmp	r0, r4
 80189ae:	d0f8      	beq.n	80189a2 <sbrk_aligned+0x22>
 80189b0:	1a21      	subs	r1, r4, r0
 80189b2:	4628      	mov	r0, r5
 80189b4:	f000 fe0a 	bl	80195cc <_sbrk_r>
 80189b8:	3001      	adds	r0, #1
 80189ba:	d1f2      	bne.n	80189a2 <sbrk_aligned+0x22>
 80189bc:	e7ef      	b.n	801899e <sbrk_aligned+0x1e>
 80189be:	bf00      	nop
 80189c0:	2000e53c 	.word	0x2000e53c

080189c4 <_malloc_r>:
 80189c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c8:	1ccd      	adds	r5, r1, #3
 80189ca:	f025 0503 	bic.w	r5, r5, #3
 80189ce:	3508      	adds	r5, #8
 80189d0:	2d0c      	cmp	r5, #12
 80189d2:	bf38      	it	cc
 80189d4:	250c      	movcc	r5, #12
 80189d6:	2d00      	cmp	r5, #0
 80189d8:	4606      	mov	r6, r0
 80189da:	db01      	blt.n	80189e0 <_malloc_r+0x1c>
 80189dc:	42a9      	cmp	r1, r5
 80189de:	d904      	bls.n	80189ea <_malloc_r+0x26>
 80189e0:	230c      	movs	r3, #12
 80189e2:	6033      	str	r3, [r6, #0]
 80189e4:	2000      	movs	r0, #0
 80189e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018ac0 <_malloc_r+0xfc>
 80189ee:	f000 f869 	bl	8018ac4 <__malloc_lock>
 80189f2:	f8d8 3000 	ldr.w	r3, [r8]
 80189f6:	461c      	mov	r4, r3
 80189f8:	bb44      	cbnz	r4, 8018a4c <_malloc_r+0x88>
 80189fa:	4629      	mov	r1, r5
 80189fc:	4630      	mov	r0, r6
 80189fe:	f7ff ffbf 	bl	8018980 <sbrk_aligned>
 8018a02:	1c43      	adds	r3, r0, #1
 8018a04:	4604      	mov	r4, r0
 8018a06:	d158      	bne.n	8018aba <_malloc_r+0xf6>
 8018a08:	f8d8 4000 	ldr.w	r4, [r8]
 8018a0c:	4627      	mov	r7, r4
 8018a0e:	2f00      	cmp	r7, #0
 8018a10:	d143      	bne.n	8018a9a <_malloc_r+0xd6>
 8018a12:	2c00      	cmp	r4, #0
 8018a14:	d04b      	beq.n	8018aae <_malloc_r+0xea>
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	4639      	mov	r1, r7
 8018a1a:	4630      	mov	r0, r6
 8018a1c:	eb04 0903 	add.w	r9, r4, r3
 8018a20:	f000 fdd4 	bl	80195cc <_sbrk_r>
 8018a24:	4581      	cmp	r9, r0
 8018a26:	d142      	bne.n	8018aae <_malloc_r+0xea>
 8018a28:	6821      	ldr	r1, [r4, #0]
 8018a2a:	1a6d      	subs	r5, r5, r1
 8018a2c:	4629      	mov	r1, r5
 8018a2e:	4630      	mov	r0, r6
 8018a30:	f7ff ffa6 	bl	8018980 <sbrk_aligned>
 8018a34:	3001      	adds	r0, #1
 8018a36:	d03a      	beq.n	8018aae <_malloc_r+0xea>
 8018a38:	6823      	ldr	r3, [r4, #0]
 8018a3a:	442b      	add	r3, r5
 8018a3c:	6023      	str	r3, [r4, #0]
 8018a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8018a42:	685a      	ldr	r2, [r3, #4]
 8018a44:	bb62      	cbnz	r2, 8018aa0 <_malloc_r+0xdc>
 8018a46:	f8c8 7000 	str.w	r7, [r8]
 8018a4a:	e00f      	b.n	8018a6c <_malloc_r+0xa8>
 8018a4c:	6822      	ldr	r2, [r4, #0]
 8018a4e:	1b52      	subs	r2, r2, r5
 8018a50:	d420      	bmi.n	8018a94 <_malloc_r+0xd0>
 8018a52:	2a0b      	cmp	r2, #11
 8018a54:	d917      	bls.n	8018a86 <_malloc_r+0xc2>
 8018a56:	1961      	adds	r1, r4, r5
 8018a58:	42a3      	cmp	r3, r4
 8018a5a:	6025      	str	r5, [r4, #0]
 8018a5c:	bf18      	it	ne
 8018a5e:	6059      	strne	r1, [r3, #4]
 8018a60:	6863      	ldr	r3, [r4, #4]
 8018a62:	bf08      	it	eq
 8018a64:	f8c8 1000 	streq.w	r1, [r8]
 8018a68:	5162      	str	r2, [r4, r5]
 8018a6a:	604b      	str	r3, [r1, #4]
 8018a6c:	4630      	mov	r0, r6
 8018a6e:	f000 f82f 	bl	8018ad0 <__malloc_unlock>
 8018a72:	f104 000b 	add.w	r0, r4, #11
 8018a76:	1d23      	adds	r3, r4, #4
 8018a78:	f020 0007 	bic.w	r0, r0, #7
 8018a7c:	1ac2      	subs	r2, r0, r3
 8018a7e:	bf1c      	itt	ne
 8018a80:	1a1b      	subne	r3, r3, r0
 8018a82:	50a3      	strne	r3, [r4, r2]
 8018a84:	e7af      	b.n	80189e6 <_malloc_r+0x22>
 8018a86:	6862      	ldr	r2, [r4, #4]
 8018a88:	42a3      	cmp	r3, r4
 8018a8a:	bf0c      	ite	eq
 8018a8c:	f8c8 2000 	streq.w	r2, [r8]
 8018a90:	605a      	strne	r2, [r3, #4]
 8018a92:	e7eb      	b.n	8018a6c <_malloc_r+0xa8>
 8018a94:	4623      	mov	r3, r4
 8018a96:	6864      	ldr	r4, [r4, #4]
 8018a98:	e7ae      	b.n	80189f8 <_malloc_r+0x34>
 8018a9a:	463c      	mov	r4, r7
 8018a9c:	687f      	ldr	r7, [r7, #4]
 8018a9e:	e7b6      	b.n	8018a0e <_malloc_r+0x4a>
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	685b      	ldr	r3, [r3, #4]
 8018aa4:	42a3      	cmp	r3, r4
 8018aa6:	d1fb      	bne.n	8018aa0 <_malloc_r+0xdc>
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	6053      	str	r3, [r2, #4]
 8018aac:	e7de      	b.n	8018a6c <_malloc_r+0xa8>
 8018aae:	230c      	movs	r3, #12
 8018ab0:	6033      	str	r3, [r6, #0]
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	f000 f80c 	bl	8018ad0 <__malloc_unlock>
 8018ab8:	e794      	b.n	80189e4 <_malloc_r+0x20>
 8018aba:	6005      	str	r5, [r0, #0]
 8018abc:	e7d6      	b.n	8018a6c <_malloc_r+0xa8>
 8018abe:	bf00      	nop
 8018ac0:	2000e540 	.word	0x2000e540

08018ac4 <__malloc_lock>:
 8018ac4:	4801      	ldr	r0, [pc, #4]	@ (8018acc <__malloc_lock+0x8>)
 8018ac6:	f7ff beda 	b.w	801887e <__retarget_lock_acquire_recursive>
 8018aca:	bf00      	nop
 8018acc:	2000e538 	.word	0x2000e538

08018ad0 <__malloc_unlock>:
 8018ad0:	4801      	ldr	r0, [pc, #4]	@ (8018ad8 <__malloc_unlock+0x8>)
 8018ad2:	f7ff bed5 	b.w	8018880 <__retarget_lock_release_recursive>
 8018ad6:	bf00      	nop
 8018ad8:	2000e538 	.word	0x2000e538

08018adc <__ssputs_r>:
 8018adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ae0:	688e      	ldr	r6, [r1, #8]
 8018ae2:	461f      	mov	r7, r3
 8018ae4:	42be      	cmp	r6, r7
 8018ae6:	680b      	ldr	r3, [r1, #0]
 8018ae8:	4682      	mov	sl, r0
 8018aea:	460c      	mov	r4, r1
 8018aec:	4690      	mov	r8, r2
 8018aee:	d82d      	bhi.n	8018b4c <__ssputs_r+0x70>
 8018af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018af4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018af8:	d026      	beq.n	8018b48 <__ssputs_r+0x6c>
 8018afa:	6965      	ldr	r5, [r4, #20]
 8018afc:	6909      	ldr	r1, [r1, #16]
 8018afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b02:	eba3 0901 	sub.w	r9, r3, r1
 8018b06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b0a:	1c7b      	adds	r3, r7, #1
 8018b0c:	444b      	add	r3, r9
 8018b0e:	106d      	asrs	r5, r5, #1
 8018b10:	429d      	cmp	r5, r3
 8018b12:	bf38      	it	cc
 8018b14:	461d      	movcc	r5, r3
 8018b16:	0553      	lsls	r3, r2, #21
 8018b18:	d527      	bpl.n	8018b6a <__ssputs_r+0x8e>
 8018b1a:	4629      	mov	r1, r5
 8018b1c:	f7ff ff52 	bl	80189c4 <_malloc_r>
 8018b20:	4606      	mov	r6, r0
 8018b22:	b360      	cbz	r0, 8018b7e <__ssputs_r+0xa2>
 8018b24:	6921      	ldr	r1, [r4, #16]
 8018b26:	464a      	mov	r2, r9
 8018b28:	f7ff feab 	bl	8018882 <memcpy>
 8018b2c:	89a3      	ldrh	r3, [r4, #12]
 8018b2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b36:	81a3      	strh	r3, [r4, #12]
 8018b38:	6126      	str	r6, [r4, #16]
 8018b3a:	6165      	str	r5, [r4, #20]
 8018b3c:	444e      	add	r6, r9
 8018b3e:	eba5 0509 	sub.w	r5, r5, r9
 8018b42:	6026      	str	r6, [r4, #0]
 8018b44:	60a5      	str	r5, [r4, #8]
 8018b46:	463e      	mov	r6, r7
 8018b48:	42be      	cmp	r6, r7
 8018b4a:	d900      	bls.n	8018b4e <__ssputs_r+0x72>
 8018b4c:	463e      	mov	r6, r7
 8018b4e:	6820      	ldr	r0, [r4, #0]
 8018b50:	4632      	mov	r2, r6
 8018b52:	4641      	mov	r1, r8
 8018b54:	f7ff fda7 	bl	80186a6 <memmove>
 8018b58:	68a3      	ldr	r3, [r4, #8]
 8018b5a:	1b9b      	subs	r3, r3, r6
 8018b5c:	60a3      	str	r3, [r4, #8]
 8018b5e:	6823      	ldr	r3, [r4, #0]
 8018b60:	4433      	add	r3, r6
 8018b62:	6023      	str	r3, [r4, #0]
 8018b64:	2000      	movs	r0, #0
 8018b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b6a:	462a      	mov	r2, r5
 8018b6c:	f000 fd45 	bl	80195fa <_realloc_r>
 8018b70:	4606      	mov	r6, r0
 8018b72:	2800      	cmp	r0, #0
 8018b74:	d1e0      	bne.n	8018b38 <__ssputs_r+0x5c>
 8018b76:	6921      	ldr	r1, [r4, #16]
 8018b78:	4650      	mov	r0, sl
 8018b7a:	f7ff feaf 	bl	80188dc <_free_r>
 8018b7e:	230c      	movs	r3, #12
 8018b80:	f8ca 3000 	str.w	r3, [sl]
 8018b84:	89a3      	ldrh	r3, [r4, #12]
 8018b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b8a:	81a3      	strh	r3, [r4, #12]
 8018b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b90:	e7e9      	b.n	8018b66 <__ssputs_r+0x8a>
	...

08018b94 <_svfiprintf_r>:
 8018b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b98:	4698      	mov	r8, r3
 8018b9a:	898b      	ldrh	r3, [r1, #12]
 8018b9c:	061b      	lsls	r3, r3, #24
 8018b9e:	b09d      	sub	sp, #116	@ 0x74
 8018ba0:	4607      	mov	r7, r0
 8018ba2:	460d      	mov	r5, r1
 8018ba4:	4614      	mov	r4, r2
 8018ba6:	d510      	bpl.n	8018bca <_svfiprintf_r+0x36>
 8018ba8:	690b      	ldr	r3, [r1, #16]
 8018baa:	b973      	cbnz	r3, 8018bca <_svfiprintf_r+0x36>
 8018bac:	2140      	movs	r1, #64	@ 0x40
 8018bae:	f7ff ff09 	bl	80189c4 <_malloc_r>
 8018bb2:	6028      	str	r0, [r5, #0]
 8018bb4:	6128      	str	r0, [r5, #16]
 8018bb6:	b930      	cbnz	r0, 8018bc6 <_svfiprintf_r+0x32>
 8018bb8:	230c      	movs	r3, #12
 8018bba:	603b      	str	r3, [r7, #0]
 8018bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8018bc0:	b01d      	add	sp, #116	@ 0x74
 8018bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc6:	2340      	movs	r3, #64	@ 0x40
 8018bc8:	616b      	str	r3, [r5, #20]
 8018bca:	2300      	movs	r3, #0
 8018bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bce:	2320      	movs	r3, #32
 8018bd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bd8:	2330      	movs	r3, #48	@ 0x30
 8018bda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018d78 <_svfiprintf_r+0x1e4>
 8018bde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018be2:	f04f 0901 	mov.w	r9, #1
 8018be6:	4623      	mov	r3, r4
 8018be8:	469a      	mov	sl, r3
 8018bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018bee:	b10a      	cbz	r2, 8018bf4 <_svfiprintf_r+0x60>
 8018bf0:	2a25      	cmp	r2, #37	@ 0x25
 8018bf2:	d1f9      	bne.n	8018be8 <_svfiprintf_r+0x54>
 8018bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8018bf8:	d00b      	beq.n	8018c12 <_svfiprintf_r+0x7e>
 8018bfa:	465b      	mov	r3, fp
 8018bfc:	4622      	mov	r2, r4
 8018bfe:	4629      	mov	r1, r5
 8018c00:	4638      	mov	r0, r7
 8018c02:	f7ff ff6b 	bl	8018adc <__ssputs_r>
 8018c06:	3001      	adds	r0, #1
 8018c08:	f000 80a7 	beq.w	8018d5a <_svfiprintf_r+0x1c6>
 8018c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c0e:	445a      	add	r2, fp
 8018c10:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c12:	f89a 3000 	ldrb.w	r3, [sl]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f000 809f 	beq.w	8018d5a <_svfiprintf_r+0x1c6>
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8018c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c26:	f10a 0a01 	add.w	sl, sl, #1
 8018c2a:	9304      	str	r3, [sp, #16]
 8018c2c:	9307      	str	r3, [sp, #28]
 8018c2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c32:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c34:	4654      	mov	r4, sl
 8018c36:	2205      	movs	r2, #5
 8018c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c3c:	484e      	ldr	r0, [pc, #312]	@ (8018d78 <_svfiprintf_r+0x1e4>)
 8018c3e:	f7e7 facf 	bl	80001e0 <memchr>
 8018c42:	9a04      	ldr	r2, [sp, #16]
 8018c44:	b9d8      	cbnz	r0, 8018c7e <_svfiprintf_r+0xea>
 8018c46:	06d0      	lsls	r0, r2, #27
 8018c48:	bf44      	itt	mi
 8018c4a:	2320      	movmi	r3, #32
 8018c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c50:	0711      	lsls	r1, r2, #28
 8018c52:	bf44      	itt	mi
 8018c54:	232b      	movmi	r3, #43	@ 0x2b
 8018c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8018c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c60:	d015      	beq.n	8018c8e <_svfiprintf_r+0xfa>
 8018c62:	9a07      	ldr	r2, [sp, #28]
 8018c64:	4654      	mov	r4, sl
 8018c66:	2000      	movs	r0, #0
 8018c68:	f04f 0c0a 	mov.w	ip, #10
 8018c6c:	4621      	mov	r1, r4
 8018c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c72:	3b30      	subs	r3, #48	@ 0x30
 8018c74:	2b09      	cmp	r3, #9
 8018c76:	d94b      	bls.n	8018d10 <_svfiprintf_r+0x17c>
 8018c78:	b1b0      	cbz	r0, 8018ca8 <_svfiprintf_r+0x114>
 8018c7a:	9207      	str	r2, [sp, #28]
 8018c7c:	e014      	b.n	8018ca8 <_svfiprintf_r+0x114>
 8018c7e:	eba0 0308 	sub.w	r3, r0, r8
 8018c82:	fa09 f303 	lsl.w	r3, r9, r3
 8018c86:	4313      	orrs	r3, r2
 8018c88:	9304      	str	r3, [sp, #16]
 8018c8a:	46a2      	mov	sl, r4
 8018c8c:	e7d2      	b.n	8018c34 <_svfiprintf_r+0xa0>
 8018c8e:	9b03      	ldr	r3, [sp, #12]
 8018c90:	1d19      	adds	r1, r3, #4
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	9103      	str	r1, [sp, #12]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	bfbb      	ittet	lt
 8018c9a:	425b      	neglt	r3, r3
 8018c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8018ca0:	9307      	strge	r3, [sp, #28]
 8018ca2:	9307      	strlt	r3, [sp, #28]
 8018ca4:	bfb8      	it	lt
 8018ca6:	9204      	strlt	r2, [sp, #16]
 8018ca8:	7823      	ldrb	r3, [r4, #0]
 8018caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cac:	d10a      	bne.n	8018cc4 <_svfiprintf_r+0x130>
 8018cae:	7863      	ldrb	r3, [r4, #1]
 8018cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cb2:	d132      	bne.n	8018d1a <_svfiprintf_r+0x186>
 8018cb4:	9b03      	ldr	r3, [sp, #12]
 8018cb6:	1d1a      	adds	r2, r3, #4
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	9203      	str	r2, [sp, #12]
 8018cbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cc0:	3402      	adds	r4, #2
 8018cc2:	9305      	str	r3, [sp, #20]
 8018cc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018d88 <_svfiprintf_r+0x1f4>
 8018cc8:	7821      	ldrb	r1, [r4, #0]
 8018cca:	2203      	movs	r2, #3
 8018ccc:	4650      	mov	r0, sl
 8018cce:	f7e7 fa87 	bl	80001e0 <memchr>
 8018cd2:	b138      	cbz	r0, 8018ce4 <_svfiprintf_r+0x150>
 8018cd4:	9b04      	ldr	r3, [sp, #16]
 8018cd6:	eba0 000a 	sub.w	r0, r0, sl
 8018cda:	2240      	movs	r2, #64	@ 0x40
 8018cdc:	4082      	lsls	r2, r0
 8018cde:	4313      	orrs	r3, r2
 8018ce0:	3401      	adds	r4, #1
 8018ce2:	9304      	str	r3, [sp, #16]
 8018ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ce8:	4824      	ldr	r0, [pc, #144]	@ (8018d7c <_svfiprintf_r+0x1e8>)
 8018cea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018cee:	2206      	movs	r2, #6
 8018cf0:	f7e7 fa76 	bl	80001e0 <memchr>
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	d036      	beq.n	8018d66 <_svfiprintf_r+0x1d2>
 8018cf8:	4b21      	ldr	r3, [pc, #132]	@ (8018d80 <_svfiprintf_r+0x1ec>)
 8018cfa:	bb1b      	cbnz	r3, 8018d44 <_svfiprintf_r+0x1b0>
 8018cfc:	9b03      	ldr	r3, [sp, #12]
 8018cfe:	3307      	adds	r3, #7
 8018d00:	f023 0307 	bic.w	r3, r3, #7
 8018d04:	3308      	adds	r3, #8
 8018d06:	9303      	str	r3, [sp, #12]
 8018d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d0a:	4433      	add	r3, r6
 8018d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d0e:	e76a      	b.n	8018be6 <_svfiprintf_r+0x52>
 8018d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d14:	460c      	mov	r4, r1
 8018d16:	2001      	movs	r0, #1
 8018d18:	e7a8      	b.n	8018c6c <_svfiprintf_r+0xd8>
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	3401      	adds	r4, #1
 8018d1e:	9305      	str	r3, [sp, #20]
 8018d20:	4619      	mov	r1, r3
 8018d22:	f04f 0c0a 	mov.w	ip, #10
 8018d26:	4620      	mov	r0, r4
 8018d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d2c:	3a30      	subs	r2, #48	@ 0x30
 8018d2e:	2a09      	cmp	r2, #9
 8018d30:	d903      	bls.n	8018d3a <_svfiprintf_r+0x1a6>
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d0c6      	beq.n	8018cc4 <_svfiprintf_r+0x130>
 8018d36:	9105      	str	r1, [sp, #20]
 8018d38:	e7c4      	b.n	8018cc4 <_svfiprintf_r+0x130>
 8018d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d3e:	4604      	mov	r4, r0
 8018d40:	2301      	movs	r3, #1
 8018d42:	e7f0      	b.n	8018d26 <_svfiprintf_r+0x192>
 8018d44:	ab03      	add	r3, sp, #12
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	462a      	mov	r2, r5
 8018d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8018d84 <_svfiprintf_r+0x1f0>)
 8018d4c:	a904      	add	r1, sp, #16
 8018d4e:	4638      	mov	r0, r7
 8018d50:	f3af 8000 	nop.w
 8018d54:	1c42      	adds	r2, r0, #1
 8018d56:	4606      	mov	r6, r0
 8018d58:	d1d6      	bne.n	8018d08 <_svfiprintf_r+0x174>
 8018d5a:	89ab      	ldrh	r3, [r5, #12]
 8018d5c:	065b      	lsls	r3, r3, #25
 8018d5e:	f53f af2d 	bmi.w	8018bbc <_svfiprintf_r+0x28>
 8018d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d64:	e72c      	b.n	8018bc0 <_svfiprintf_r+0x2c>
 8018d66:	ab03      	add	r3, sp, #12
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	462a      	mov	r2, r5
 8018d6c:	4b05      	ldr	r3, [pc, #20]	@ (8018d84 <_svfiprintf_r+0x1f0>)
 8018d6e:	a904      	add	r1, sp, #16
 8018d70:	4638      	mov	r0, r7
 8018d72:	f000 f9bb 	bl	80190ec <_printf_i>
 8018d76:	e7ed      	b.n	8018d54 <_svfiprintf_r+0x1c0>
 8018d78:	0801d36b 	.word	0x0801d36b
 8018d7c:	0801d375 	.word	0x0801d375
 8018d80:	00000000 	.word	0x00000000
 8018d84:	08018add 	.word	0x08018add
 8018d88:	0801d371 	.word	0x0801d371

08018d8c <__sfputc_r>:
 8018d8c:	6893      	ldr	r3, [r2, #8]
 8018d8e:	3b01      	subs	r3, #1
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	b410      	push	{r4}
 8018d94:	6093      	str	r3, [r2, #8]
 8018d96:	da08      	bge.n	8018daa <__sfputc_r+0x1e>
 8018d98:	6994      	ldr	r4, [r2, #24]
 8018d9a:	42a3      	cmp	r3, r4
 8018d9c:	db01      	blt.n	8018da2 <__sfputc_r+0x16>
 8018d9e:	290a      	cmp	r1, #10
 8018da0:	d103      	bne.n	8018daa <__sfputc_r+0x1e>
 8018da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018da6:	f000 bb7d 	b.w	80194a4 <__swbuf_r>
 8018daa:	6813      	ldr	r3, [r2, #0]
 8018dac:	1c58      	adds	r0, r3, #1
 8018dae:	6010      	str	r0, [r2, #0]
 8018db0:	7019      	strb	r1, [r3, #0]
 8018db2:	4608      	mov	r0, r1
 8018db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018db8:	4770      	bx	lr

08018dba <__sfputs_r>:
 8018dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dbc:	4606      	mov	r6, r0
 8018dbe:	460f      	mov	r7, r1
 8018dc0:	4614      	mov	r4, r2
 8018dc2:	18d5      	adds	r5, r2, r3
 8018dc4:	42ac      	cmp	r4, r5
 8018dc6:	d101      	bne.n	8018dcc <__sfputs_r+0x12>
 8018dc8:	2000      	movs	r0, #0
 8018dca:	e007      	b.n	8018ddc <__sfputs_r+0x22>
 8018dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dd0:	463a      	mov	r2, r7
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	f7ff ffda 	bl	8018d8c <__sfputc_r>
 8018dd8:	1c43      	adds	r3, r0, #1
 8018dda:	d1f3      	bne.n	8018dc4 <__sfputs_r+0xa>
 8018ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018de0 <_vfiprintf_r>:
 8018de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de4:	460d      	mov	r5, r1
 8018de6:	b09d      	sub	sp, #116	@ 0x74
 8018de8:	4614      	mov	r4, r2
 8018dea:	4698      	mov	r8, r3
 8018dec:	4606      	mov	r6, r0
 8018dee:	b118      	cbz	r0, 8018df8 <_vfiprintf_r+0x18>
 8018df0:	6a03      	ldr	r3, [r0, #32]
 8018df2:	b90b      	cbnz	r3, 8018df8 <_vfiprintf_r+0x18>
 8018df4:	f7ff fb86 	bl	8018504 <__sinit>
 8018df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018dfa:	07d9      	lsls	r1, r3, #31
 8018dfc:	d405      	bmi.n	8018e0a <_vfiprintf_r+0x2a>
 8018dfe:	89ab      	ldrh	r3, [r5, #12]
 8018e00:	059a      	lsls	r2, r3, #22
 8018e02:	d402      	bmi.n	8018e0a <_vfiprintf_r+0x2a>
 8018e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e06:	f7ff fd3a 	bl	801887e <__retarget_lock_acquire_recursive>
 8018e0a:	89ab      	ldrh	r3, [r5, #12]
 8018e0c:	071b      	lsls	r3, r3, #28
 8018e0e:	d501      	bpl.n	8018e14 <_vfiprintf_r+0x34>
 8018e10:	692b      	ldr	r3, [r5, #16]
 8018e12:	b99b      	cbnz	r3, 8018e3c <_vfiprintf_r+0x5c>
 8018e14:	4629      	mov	r1, r5
 8018e16:	4630      	mov	r0, r6
 8018e18:	f000 fb82 	bl	8019520 <__swsetup_r>
 8018e1c:	b170      	cbz	r0, 8018e3c <_vfiprintf_r+0x5c>
 8018e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e20:	07dc      	lsls	r4, r3, #31
 8018e22:	d504      	bpl.n	8018e2e <_vfiprintf_r+0x4e>
 8018e24:	f04f 30ff 	mov.w	r0, #4294967295
 8018e28:	b01d      	add	sp, #116	@ 0x74
 8018e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2e:	89ab      	ldrh	r3, [r5, #12]
 8018e30:	0598      	lsls	r0, r3, #22
 8018e32:	d4f7      	bmi.n	8018e24 <_vfiprintf_r+0x44>
 8018e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e36:	f7ff fd23 	bl	8018880 <__retarget_lock_release_recursive>
 8018e3a:	e7f3      	b.n	8018e24 <_vfiprintf_r+0x44>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e40:	2320      	movs	r3, #32
 8018e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e4a:	2330      	movs	r3, #48	@ 0x30
 8018e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018ffc <_vfiprintf_r+0x21c>
 8018e50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018e54:	f04f 0901 	mov.w	r9, #1
 8018e58:	4623      	mov	r3, r4
 8018e5a:	469a      	mov	sl, r3
 8018e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e60:	b10a      	cbz	r2, 8018e66 <_vfiprintf_r+0x86>
 8018e62:	2a25      	cmp	r2, #37	@ 0x25
 8018e64:	d1f9      	bne.n	8018e5a <_vfiprintf_r+0x7a>
 8018e66:	ebba 0b04 	subs.w	fp, sl, r4
 8018e6a:	d00b      	beq.n	8018e84 <_vfiprintf_r+0xa4>
 8018e6c:	465b      	mov	r3, fp
 8018e6e:	4622      	mov	r2, r4
 8018e70:	4629      	mov	r1, r5
 8018e72:	4630      	mov	r0, r6
 8018e74:	f7ff ffa1 	bl	8018dba <__sfputs_r>
 8018e78:	3001      	adds	r0, #1
 8018e7a:	f000 80a7 	beq.w	8018fcc <_vfiprintf_r+0x1ec>
 8018e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e80:	445a      	add	r2, fp
 8018e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e84:	f89a 3000 	ldrb.w	r3, [sl]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	f000 809f 	beq.w	8018fcc <_vfiprintf_r+0x1ec>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	f04f 32ff 	mov.w	r2, #4294967295
 8018e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e98:	f10a 0a01 	add.w	sl, sl, #1
 8018e9c:	9304      	str	r3, [sp, #16]
 8018e9e:	9307      	str	r3, [sp, #28]
 8018ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8018ea6:	4654      	mov	r4, sl
 8018ea8:	2205      	movs	r2, #5
 8018eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018eae:	4853      	ldr	r0, [pc, #332]	@ (8018ffc <_vfiprintf_r+0x21c>)
 8018eb0:	f7e7 f996 	bl	80001e0 <memchr>
 8018eb4:	9a04      	ldr	r2, [sp, #16]
 8018eb6:	b9d8      	cbnz	r0, 8018ef0 <_vfiprintf_r+0x110>
 8018eb8:	06d1      	lsls	r1, r2, #27
 8018eba:	bf44      	itt	mi
 8018ebc:	2320      	movmi	r3, #32
 8018ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ec2:	0713      	lsls	r3, r2, #28
 8018ec4:	bf44      	itt	mi
 8018ec6:	232b      	movmi	r3, #43	@ 0x2b
 8018ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8018ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ed2:	d015      	beq.n	8018f00 <_vfiprintf_r+0x120>
 8018ed4:	9a07      	ldr	r2, [sp, #28]
 8018ed6:	4654      	mov	r4, sl
 8018ed8:	2000      	movs	r0, #0
 8018eda:	f04f 0c0a 	mov.w	ip, #10
 8018ede:	4621      	mov	r1, r4
 8018ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ee4:	3b30      	subs	r3, #48	@ 0x30
 8018ee6:	2b09      	cmp	r3, #9
 8018ee8:	d94b      	bls.n	8018f82 <_vfiprintf_r+0x1a2>
 8018eea:	b1b0      	cbz	r0, 8018f1a <_vfiprintf_r+0x13a>
 8018eec:	9207      	str	r2, [sp, #28]
 8018eee:	e014      	b.n	8018f1a <_vfiprintf_r+0x13a>
 8018ef0:	eba0 0308 	sub.w	r3, r0, r8
 8018ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8018ef8:	4313      	orrs	r3, r2
 8018efa:	9304      	str	r3, [sp, #16]
 8018efc:	46a2      	mov	sl, r4
 8018efe:	e7d2      	b.n	8018ea6 <_vfiprintf_r+0xc6>
 8018f00:	9b03      	ldr	r3, [sp, #12]
 8018f02:	1d19      	adds	r1, r3, #4
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	9103      	str	r1, [sp, #12]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	bfbb      	ittet	lt
 8018f0c:	425b      	neglt	r3, r3
 8018f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8018f12:	9307      	strge	r3, [sp, #28]
 8018f14:	9307      	strlt	r3, [sp, #28]
 8018f16:	bfb8      	it	lt
 8018f18:	9204      	strlt	r2, [sp, #16]
 8018f1a:	7823      	ldrb	r3, [r4, #0]
 8018f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f1e:	d10a      	bne.n	8018f36 <_vfiprintf_r+0x156>
 8018f20:	7863      	ldrb	r3, [r4, #1]
 8018f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f24:	d132      	bne.n	8018f8c <_vfiprintf_r+0x1ac>
 8018f26:	9b03      	ldr	r3, [sp, #12]
 8018f28:	1d1a      	adds	r2, r3, #4
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	9203      	str	r2, [sp, #12]
 8018f2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018f32:	3402      	adds	r4, #2
 8018f34:	9305      	str	r3, [sp, #20]
 8018f36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801900c <_vfiprintf_r+0x22c>
 8018f3a:	7821      	ldrb	r1, [r4, #0]
 8018f3c:	2203      	movs	r2, #3
 8018f3e:	4650      	mov	r0, sl
 8018f40:	f7e7 f94e 	bl	80001e0 <memchr>
 8018f44:	b138      	cbz	r0, 8018f56 <_vfiprintf_r+0x176>
 8018f46:	9b04      	ldr	r3, [sp, #16]
 8018f48:	eba0 000a 	sub.w	r0, r0, sl
 8018f4c:	2240      	movs	r2, #64	@ 0x40
 8018f4e:	4082      	lsls	r2, r0
 8018f50:	4313      	orrs	r3, r2
 8018f52:	3401      	adds	r4, #1
 8018f54:	9304      	str	r3, [sp, #16]
 8018f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5a:	4829      	ldr	r0, [pc, #164]	@ (8019000 <_vfiprintf_r+0x220>)
 8018f5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018f60:	2206      	movs	r2, #6
 8018f62:	f7e7 f93d 	bl	80001e0 <memchr>
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d03f      	beq.n	8018fea <_vfiprintf_r+0x20a>
 8018f6a:	4b26      	ldr	r3, [pc, #152]	@ (8019004 <_vfiprintf_r+0x224>)
 8018f6c:	bb1b      	cbnz	r3, 8018fb6 <_vfiprintf_r+0x1d6>
 8018f6e:	9b03      	ldr	r3, [sp, #12]
 8018f70:	3307      	adds	r3, #7
 8018f72:	f023 0307 	bic.w	r3, r3, #7
 8018f76:	3308      	adds	r3, #8
 8018f78:	9303      	str	r3, [sp, #12]
 8018f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f7c:	443b      	add	r3, r7
 8018f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f80:	e76a      	b.n	8018e58 <_vfiprintf_r+0x78>
 8018f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f86:	460c      	mov	r4, r1
 8018f88:	2001      	movs	r0, #1
 8018f8a:	e7a8      	b.n	8018ede <_vfiprintf_r+0xfe>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	3401      	adds	r4, #1
 8018f90:	9305      	str	r3, [sp, #20]
 8018f92:	4619      	mov	r1, r3
 8018f94:	f04f 0c0a 	mov.w	ip, #10
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f9e:	3a30      	subs	r2, #48	@ 0x30
 8018fa0:	2a09      	cmp	r2, #9
 8018fa2:	d903      	bls.n	8018fac <_vfiprintf_r+0x1cc>
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d0c6      	beq.n	8018f36 <_vfiprintf_r+0x156>
 8018fa8:	9105      	str	r1, [sp, #20]
 8018faa:	e7c4      	b.n	8018f36 <_vfiprintf_r+0x156>
 8018fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fb0:	4604      	mov	r4, r0
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	e7f0      	b.n	8018f98 <_vfiprintf_r+0x1b8>
 8018fb6:	ab03      	add	r3, sp, #12
 8018fb8:	9300      	str	r3, [sp, #0]
 8018fba:	462a      	mov	r2, r5
 8018fbc:	4b12      	ldr	r3, [pc, #72]	@ (8019008 <_vfiprintf_r+0x228>)
 8018fbe:	a904      	add	r1, sp, #16
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	f3af 8000 	nop.w
 8018fc6:	4607      	mov	r7, r0
 8018fc8:	1c78      	adds	r0, r7, #1
 8018fca:	d1d6      	bne.n	8018f7a <_vfiprintf_r+0x19a>
 8018fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fce:	07d9      	lsls	r1, r3, #31
 8018fd0:	d405      	bmi.n	8018fde <_vfiprintf_r+0x1fe>
 8018fd2:	89ab      	ldrh	r3, [r5, #12]
 8018fd4:	059a      	lsls	r2, r3, #22
 8018fd6:	d402      	bmi.n	8018fde <_vfiprintf_r+0x1fe>
 8018fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018fda:	f7ff fc51 	bl	8018880 <__retarget_lock_release_recursive>
 8018fde:	89ab      	ldrh	r3, [r5, #12]
 8018fe0:	065b      	lsls	r3, r3, #25
 8018fe2:	f53f af1f 	bmi.w	8018e24 <_vfiprintf_r+0x44>
 8018fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018fe8:	e71e      	b.n	8018e28 <_vfiprintf_r+0x48>
 8018fea:	ab03      	add	r3, sp, #12
 8018fec:	9300      	str	r3, [sp, #0]
 8018fee:	462a      	mov	r2, r5
 8018ff0:	4b05      	ldr	r3, [pc, #20]	@ (8019008 <_vfiprintf_r+0x228>)
 8018ff2:	a904      	add	r1, sp, #16
 8018ff4:	4630      	mov	r0, r6
 8018ff6:	f000 f879 	bl	80190ec <_printf_i>
 8018ffa:	e7e4      	b.n	8018fc6 <_vfiprintf_r+0x1e6>
 8018ffc:	0801d36b 	.word	0x0801d36b
 8019000:	0801d375 	.word	0x0801d375
 8019004:	00000000 	.word	0x00000000
 8019008:	08018dbb 	.word	0x08018dbb
 801900c:	0801d371 	.word	0x0801d371

08019010 <_printf_common>:
 8019010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019014:	4616      	mov	r6, r2
 8019016:	4698      	mov	r8, r3
 8019018:	688a      	ldr	r2, [r1, #8]
 801901a:	690b      	ldr	r3, [r1, #16]
 801901c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019020:	4293      	cmp	r3, r2
 8019022:	bfb8      	it	lt
 8019024:	4613      	movlt	r3, r2
 8019026:	6033      	str	r3, [r6, #0]
 8019028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801902c:	4607      	mov	r7, r0
 801902e:	460c      	mov	r4, r1
 8019030:	b10a      	cbz	r2, 8019036 <_printf_common+0x26>
 8019032:	3301      	adds	r3, #1
 8019034:	6033      	str	r3, [r6, #0]
 8019036:	6823      	ldr	r3, [r4, #0]
 8019038:	0699      	lsls	r1, r3, #26
 801903a:	bf42      	ittt	mi
 801903c:	6833      	ldrmi	r3, [r6, #0]
 801903e:	3302      	addmi	r3, #2
 8019040:	6033      	strmi	r3, [r6, #0]
 8019042:	6825      	ldr	r5, [r4, #0]
 8019044:	f015 0506 	ands.w	r5, r5, #6
 8019048:	d106      	bne.n	8019058 <_printf_common+0x48>
 801904a:	f104 0a19 	add.w	sl, r4, #25
 801904e:	68e3      	ldr	r3, [r4, #12]
 8019050:	6832      	ldr	r2, [r6, #0]
 8019052:	1a9b      	subs	r3, r3, r2
 8019054:	42ab      	cmp	r3, r5
 8019056:	dc26      	bgt.n	80190a6 <_printf_common+0x96>
 8019058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801905c:	6822      	ldr	r2, [r4, #0]
 801905e:	3b00      	subs	r3, #0
 8019060:	bf18      	it	ne
 8019062:	2301      	movne	r3, #1
 8019064:	0692      	lsls	r2, r2, #26
 8019066:	d42b      	bmi.n	80190c0 <_printf_common+0xb0>
 8019068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801906c:	4641      	mov	r1, r8
 801906e:	4638      	mov	r0, r7
 8019070:	47c8      	blx	r9
 8019072:	3001      	adds	r0, #1
 8019074:	d01e      	beq.n	80190b4 <_printf_common+0xa4>
 8019076:	6823      	ldr	r3, [r4, #0]
 8019078:	6922      	ldr	r2, [r4, #16]
 801907a:	f003 0306 	and.w	r3, r3, #6
 801907e:	2b04      	cmp	r3, #4
 8019080:	bf02      	ittt	eq
 8019082:	68e5      	ldreq	r5, [r4, #12]
 8019084:	6833      	ldreq	r3, [r6, #0]
 8019086:	1aed      	subeq	r5, r5, r3
 8019088:	68a3      	ldr	r3, [r4, #8]
 801908a:	bf0c      	ite	eq
 801908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019090:	2500      	movne	r5, #0
 8019092:	4293      	cmp	r3, r2
 8019094:	bfc4      	itt	gt
 8019096:	1a9b      	subgt	r3, r3, r2
 8019098:	18ed      	addgt	r5, r5, r3
 801909a:	2600      	movs	r6, #0
 801909c:	341a      	adds	r4, #26
 801909e:	42b5      	cmp	r5, r6
 80190a0:	d11a      	bne.n	80190d8 <_printf_common+0xc8>
 80190a2:	2000      	movs	r0, #0
 80190a4:	e008      	b.n	80190b8 <_printf_common+0xa8>
 80190a6:	2301      	movs	r3, #1
 80190a8:	4652      	mov	r2, sl
 80190aa:	4641      	mov	r1, r8
 80190ac:	4638      	mov	r0, r7
 80190ae:	47c8      	blx	r9
 80190b0:	3001      	adds	r0, #1
 80190b2:	d103      	bne.n	80190bc <_printf_common+0xac>
 80190b4:	f04f 30ff 	mov.w	r0, #4294967295
 80190b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190bc:	3501      	adds	r5, #1
 80190be:	e7c6      	b.n	801904e <_printf_common+0x3e>
 80190c0:	18e1      	adds	r1, r4, r3
 80190c2:	1c5a      	adds	r2, r3, #1
 80190c4:	2030      	movs	r0, #48	@ 0x30
 80190c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80190ca:	4422      	add	r2, r4
 80190cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80190d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80190d4:	3302      	adds	r3, #2
 80190d6:	e7c7      	b.n	8019068 <_printf_common+0x58>
 80190d8:	2301      	movs	r3, #1
 80190da:	4622      	mov	r2, r4
 80190dc:	4641      	mov	r1, r8
 80190de:	4638      	mov	r0, r7
 80190e0:	47c8      	blx	r9
 80190e2:	3001      	adds	r0, #1
 80190e4:	d0e6      	beq.n	80190b4 <_printf_common+0xa4>
 80190e6:	3601      	adds	r6, #1
 80190e8:	e7d9      	b.n	801909e <_printf_common+0x8e>
	...

080190ec <_printf_i>:
 80190ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190f0:	7e0f      	ldrb	r7, [r1, #24]
 80190f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80190f4:	2f78      	cmp	r7, #120	@ 0x78
 80190f6:	4691      	mov	r9, r2
 80190f8:	4680      	mov	r8, r0
 80190fa:	460c      	mov	r4, r1
 80190fc:	469a      	mov	sl, r3
 80190fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019102:	d807      	bhi.n	8019114 <_printf_i+0x28>
 8019104:	2f62      	cmp	r7, #98	@ 0x62
 8019106:	d80a      	bhi.n	801911e <_printf_i+0x32>
 8019108:	2f00      	cmp	r7, #0
 801910a:	f000 80d1 	beq.w	80192b0 <_printf_i+0x1c4>
 801910e:	2f58      	cmp	r7, #88	@ 0x58
 8019110:	f000 80b8 	beq.w	8019284 <_printf_i+0x198>
 8019114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801911c:	e03a      	b.n	8019194 <_printf_i+0xa8>
 801911e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019122:	2b15      	cmp	r3, #21
 8019124:	d8f6      	bhi.n	8019114 <_printf_i+0x28>
 8019126:	a101      	add	r1, pc, #4	@ (adr r1, 801912c <_printf_i+0x40>)
 8019128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801912c:	08019185 	.word	0x08019185
 8019130:	08019199 	.word	0x08019199
 8019134:	08019115 	.word	0x08019115
 8019138:	08019115 	.word	0x08019115
 801913c:	08019115 	.word	0x08019115
 8019140:	08019115 	.word	0x08019115
 8019144:	08019199 	.word	0x08019199
 8019148:	08019115 	.word	0x08019115
 801914c:	08019115 	.word	0x08019115
 8019150:	08019115 	.word	0x08019115
 8019154:	08019115 	.word	0x08019115
 8019158:	08019297 	.word	0x08019297
 801915c:	080191c3 	.word	0x080191c3
 8019160:	08019251 	.word	0x08019251
 8019164:	08019115 	.word	0x08019115
 8019168:	08019115 	.word	0x08019115
 801916c:	080192b9 	.word	0x080192b9
 8019170:	08019115 	.word	0x08019115
 8019174:	080191c3 	.word	0x080191c3
 8019178:	08019115 	.word	0x08019115
 801917c:	08019115 	.word	0x08019115
 8019180:	08019259 	.word	0x08019259
 8019184:	6833      	ldr	r3, [r6, #0]
 8019186:	1d1a      	adds	r2, r3, #4
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	6032      	str	r2, [r6, #0]
 801918c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019194:	2301      	movs	r3, #1
 8019196:	e09c      	b.n	80192d2 <_printf_i+0x1e6>
 8019198:	6833      	ldr	r3, [r6, #0]
 801919a:	6820      	ldr	r0, [r4, #0]
 801919c:	1d19      	adds	r1, r3, #4
 801919e:	6031      	str	r1, [r6, #0]
 80191a0:	0606      	lsls	r6, r0, #24
 80191a2:	d501      	bpl.n	80191a8 <_printf_i+0xbc>
 80191a4:	681d      	ldr	r5, [r3, #0]
 80191a6:	e003      	b.n	80191b0 <_printf_i+0xc4>
 80191a8:	0645      	lsls	r5, r0, #25
 80191aa:	d5fb      	bpl.n	80191a4 <_printf_i+0xb8>
 80191ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80191b0:	2d00      	cmp	r5, #0
 80191b2:	da03      	bge.n	80191bc <_printf_i+0xd0>
 80191b4:	232d      	movs	r3, #45	@ 0x2d
 80191b6:	426d      	negs	r5, r5
 80191b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80191bc:	4858      	ldr	r0, [pc, #352]	@ (8019320 <_printf_i+0x234>)
 80191be:	230a      	movs	r3, #10
 80191c0:	e011      	b.n	80191e6 <_printf_i+0xfa>
 80191c2:	6821      	ldr	r1, [r4, #0]
 80191c4:	6833      	ldr	r3, [r6, #0]
 80191c6:	0608      	lsls	r0, r1, #24
 80191c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80191cc:	d402      	bmi.n	80191d4 <_printf_i+0xe8>
 80191ce:	0649      	lsls	r1, r1, #25
 80191d0:	bf48      	it	mi
 80191d2:	b2ad      	uxthmi	r5, r5
 80191d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80191d6:	4852      	ldr	r0, [pc, #328]	@ (8019320 <_printf_i+0x234>)
 80191d8:	6033      	str	r3, [r6, #0]
 80191da:	bf14      	ite	ne
 80191dc:	230a      	movne	r3, #10
 80191de:	2308      	moveq	r3, #8
 80191e0:	2100      	movs	r1, #0
 80191e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80191e6:	6866      	ldr	r6, [r4, #4]
 80191e8:	60a6      	str	r6, [r4, #8]
 80191ea:	2e00      	cmp	r6, #0
 80191ec:	db05      	blt.n	80191fa <_printf_i+0x10e>
 80191ee:	6821      	ldr	r1, [r4, #0]
 80191f0:	432e      	orrs	r6, r5
 80191f2:	f021 0104 	bic.w	r1, r1, #4
 80191f6:	6021      	str	r1, [r4, #0]
 80191f8:	d04b      	beq.n	8019292 <_printf_i+0x1a6>
 80191fa:	4616      	mov	r6, r2
 80191fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8019200:	fb03 5711 	mls	r7, r3, r1, r5
 8019204:	5dc7      	ldrb	r7, [r0, r7]
 8019206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801920a:	462f      	mov	r7, r5
 801920c:	42bb      	cmp	r3, r7
 801920e:	460d      	mov	r5, r1
 8019210:	d9f4      	bls.n	80191fc <_printf_i+0x110>
 8019212:	2b08      	cmp	r3, #8
 8019214:	d10b      	bne.n	801922e <_printf_i+0x142>
 8019216:	6823      	ldr	r3, [r4, #0]
 8019218:	07df      	lsls	r7, r3, #31
 801921a:	d508      	bpl.n	801922e <_printf_i+0x142>
 801921c:	6923      	ldr	r3, [r4, #16]
 801921e:	6861      	ldr	r1, [r4, #4]
 8019220:	4299      	cmp	r1, r3
 8019222:	bfde      	ittt	le
 8019224:	2330      	movle	r3, #48	@ 0x30
 8019226:	f806 3c01 	strble.w	r3, [r6, #-1]
 801922a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801922e:	1b92      	subs	r2, r2, r6
 8019230:	6122      	str	r2, [r4, #16]
 8019232:	f8cd a000 	str.w	sl, [sp]
 8019236:	464b      	mov	r3, r9
 8019238:	aa03      	add	r2, sp, #12
 801923a:	4621      	mov	r1, r4
 801923c:	4640      	mov	r0, r8
 801923e:	f7ff fee7 	bl	8019010 <_printf_common>
 8019242:	3001      	adds	r0, #1
 8019244:	d14a      	bne.n	80192dc <_printf_i+0x1f0>
 8019246:	f04f 30ff 	mov.w	r0, #4294967295
 801924a:	b004      	add	sp, #16
 801924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019250:	6823      	ldr	r3, [r4, #0]
 8019252:	f043 0320 	orr.w	r3, r3, #32
 8019256:	6023      	str	r3, [r4, #0]
 8019258:	4832      	ldr	r0, [pc, #200]	@ (8019324 <_printf_i+0x238>)
 801925a:	2778      	movs	r7, #120	@ 0x78
 801925c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019260:	6823      	ldr	r3, [r4, #0]
 8019262:	6831      	ldr	r1, [r6, #0]
 8019264:	061f      	lsls	r7, r3, #24
 8019266:	f851 5b04 	ldr.w	r5, [r1], #4
 801926a:	d402      	bmi.n	8019272 <_printf_i+0x186>
 801926c:	065f      	lsls	r7, r3, #25
 801926e:	bf48      	it	mi
 8019270:	b2ad      	uxthmi	r5, r5
 8019272:	6031      	str	r1, [r6, #0]
 8019274:	07d9      	lsls	r1, r3, #31
 8019276:	bf44      	itt	mi
 8019278:	f043 0320 	orrmi.w	r3, r3, #32
 801927c:	6023      	strmi	r3, [r4, #0]
 801927e:	b11d      	cbz	r5, 8019288 <_printf_i+0x19c>
 8019280:	2310      	movs	r3, #16
 8019282:	e7ad      	b.n	80191e0 <_printf_i+0xf4>
 8019284:	4826      	ldr	r0, [pc, #152]	@ (8019320 <_printf_i+0x234>)
 8019286:	e7e9      	b.n	801925c <_printf_i+0x170>
 8019288:	6823      	ldr	r3, [r4, #0]
 801928a:	f023 0320 	bic.w	r3, r3, #32
 801928e:	6023      	str	r3, [r4, #0]
 8019290:	e7f6      	b.n	8019280 <_printf_i+0x194>
 8019292:	4616      	mov	r6, r2
 8019294:	e7bd      	b.n	8019212 <_printf_i+0x126>
 8019296:	6833      	ldr	r3, [r6, #0]
 8019298:	6825      	ldr	r5, [r4, #0]
 801929a:	6961      	ldr	r1, [r4, #20]
 801929c:	1d18      	adds	r0, r3, #4
 801929e:	6030      	str	r0, [r6, #0]
 80192a0:	062e      	lsls	r6, r5, #24
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	d501      	bpl.n	80192aa <_printf_i+0x1be>
 80192a6:	6019      	str	r1, [r3, #0]
 80192a8:	e002      	b.n	80192b0 <_printf_i+0x1c4>
 80192aa:	0668      	lsls	r0, r5, #25
 80192ac:	d5fb      	bpl.n	80192a6 <_printf_i+0x1ba>
 80192ae:	8019      	strh	r1, [r3, #0]
 80192b0:	2300      	movs	r3, #0
 80192b2:	6123      	str	r3, [r4, #16]
 80192b4:	4616      	mov	r6, r2
 80192b6:	e7bc      	b.n	8019232 <_printf_i+0x146>
 80192b8:	6833      	ldr	r3, [r6, #0]
 80192ba:	1d1a      	adds	r2, r3, #4
 80192bc:	6032      	str	r2, [r6, #0]
 80192be:	681e      	ldr	r6, [r3, #0]
 80192c0:	6862      	ldr	r2, [r4, #4]
 80192c2:	2100      	movs	r1, #0
 80192c4:	4630      	mov	r0, r6
 80192c6:	f7e6 ff8b 	bl	80001e0 <memchr>
 80192ca:	b108      	cbz	r0, 80192d0 <_printf_i+0x1e4>
 80192cc:	1b80      	subs	r0, r0, r6
 80192ce:	6060      	str	r0, [r4, #4]
 80192d0:	6863      	ldr	r3, [r4, #4]
 80192d2:	6123      	str	r3, [r4, #16]
 80192d4:	2300      	movs	r3, #0
 80192d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192da:	e7aa      	b.n	8019232 <_printf_i+0x146>
 80192dc:	6923      	ldr	r3, [r4, #16]
 80192de:	4632      	mov	r2, r6
 80192e0:	4649      	mov	r1, r9
 80192e2:	4640      	mov	r0, r8
 80192e4:	47d0      	blx	sl
 80192e6:	3001      	adds	r0, #1
 80192e8:	d0ad      	beq.n	8019246 <_printf_i+0x15a>
 80192ea:	6823      	ldr	r3, [r4, #0]
 80192ec:	079b      	lsls	r3, r3, #30
 80192ee:	d413      	bmi.n	8019318 <_printf_i+0x22c>
 80192f0:	68e0      	ldr	r0, [r4, #12]
 80192f2:	9b03      	ldr	r3, [sp, #12]
 80192f4:	4298      	cmp	r0, r3
 80192f6:	bfb8      	it	lt
 80192f8:	4618      	movlt	r0, r3
 80192fa:	e7a6      	b.n	801924a <_printf_i+0x15e>
 80192fc:	2301      	movs	r3, #1
 80192fe:	4632      	mov	r2, r6
 8019300:	4649      	mov	r1, r9
 8019302:	4640      	mov	r0, r8
 8019304:	47d0      	blx	sl
 8019306:	3001      	adds	r0, #1
 8019308:	d09d      	beq.n	8019246 <_printf_i+0x15a>
 801930a:	3501      	adds	r5, #1
 801930c:	68e3      	ldr	r3, [r4, #12]
 801930e:	9903      	ldr	r1, [sp, #12]
 8019310:	1a5b      	subs	r3, r3, r1
 8019312:	42ab      	cmp	r3, r5
 8019314:	dcf2      	bgt.n	80192fc <_printf_i+0x210>
 8019316:	e7eb      	b.n	80192f0 <_printf_i+0x204>
 8019318:	2500      	movs	r5, #0
 801931a:	f104 0619 	add.w	r6, r4, #25
 801931e:	e7f5      	b.n	801930c <_printf_i+0x220>
 8019320:	0801d37c 	.word	0x0801d37c
 8019324:	0801d38d 	.word	0x0801d38d

08019328 <__sflush_r>:
 8019328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019330:	0716      	lsls	r6, r2, #28
 8019332:	4605      	mov	r5, r0
 8019334:	460c      	mov	r4, r1
 8019336:	d454      	bmi.n	80193e2 <__sflush_r+0xba>
 8019338:	684b      	ldr	r3, [r1, #4]
 801933a:	2b00      	cmp	r3, #0
 801933c:	dc02      	bgt.n	8019344 <__sflush_r+0x1c>
 801933e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019340:	2b00      	cmp	r3, #0
 8019342:	dd48      	ble.n	80193d6 <__sflush_r+0xae>
 8019344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019346:	2e00      	cmp	r6, #0
 8019348:	d045      	beq.n	80193d6 <__sflush_r+0xae>
 801934a:	2300      	movs	r3, #0
 801934c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019350:	682f      	ldr	r7, [r5, #0]
 8019352:	6a21      	ldr	r1, [r4, #32]
 8019354:	602b      	str	r3, [r5, #0]
 8019356:	d030      	beq.n	80193ba <__sflush_r+0x92>
 8019358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801935a:	89a3      	ldrh	r3, [r4, #12]
 801935c:	0759      	lsls	r1, r3, #29
 801935e:	d505      	bpl.n	801936c <__sflush_r+0x44>
 8019360:	6863      	ldr	r3, [r4, #4]
 8019362:	1ad2      	subs	r2, r2, r3
 8019364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019366:	b10b      	cbz	r3, 801936c <__sflush_r+0x44>
 8019368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801936a:	1ad2      	subs	r2, r2, r3
 801936c:	2300      	movs	r3, #0
 801936e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019370:	6a21      	ldr	r1, [r4, #32]
 8019372:	4628      	mov	r0, r5
 8019374:	47b0      	blx	r6
 8019376:	1c43      	adds	r3, r0, #1
 8019378:	89a3      	ldrh	r3, [r4, #12]
 801937a:	d106      	bne.n	801938a <__sflush_r+0x62>
 801937c:	6829      	ldr	r1, [r5, #0]
 801937e:	291d      	cmp	r1, #29
 8019380:	d82b      	bhi.n	80193da <__sflush_r+0xb2>
 8019382:	4a2a      	ldr	r2, [pc, #168]	@ (801942c <__sflush_r+0x104>)
 8019384:	40ca      	lsrs	r2, r1
 8019386:	07d6      	lsls	r6, r2, #31
 8019388:	d527      	bpl.n	80193da <__sflush_r+0xb2>
 801938a:	2200      	movs	r2, #0
 801938c:	6062      	str	r2, [r4, #4]
 801938e:	04d9      	lsls	r1, r3, #19
 8019390:	6922      	ldr	r2, [r4, #16]
 8019392:	6022      	str	r2, [r4, #0]
 8019394:	d504      	bpl.n	80193a0 <__sflush_r+0x78>
 8019396:	1c42      	adds	r2, r0, #1
 8019398:	d101      	bne.n	801939e <__sflush_r+0x76>
 801939a:	682b      	ldr	r3, [r5, #0]
 801939c:	b903      	cbnz	r3, 80193a0 <__sflush_r+0x78>
 801939e:	6560      	str	r0, [r4, #84]	@ 0x54
 80193a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193a2:	602f      	str	r7, [r5, #0]
 80193a4:	b1b9      	cbz	r1, 80193d6 <__sflush_r+0xae>
 80193a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80193aa:	4299      	cmp	r1, r3
 80193ac:	d002      	beq.n	80193b4 <__sflush_r+0x8c>
 80193ae:	4628      	mov	r0, r5
 80193b0:	f7ff fa94 	bl	80188dc <_free_r>
 80193b4:	2300      	movs	r3, #0
 80193b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80193b8:	e00d      	b.n	80193d6 <__sflush_r+0xae>
 80193ba:	2301      	movs	r3, #1
 80193bc:	4628      	mov	r0, r5
 80193be:	47b0      	blx	r6
 80193c0:	4602      	mov	r2, r0
 80193c2:	1c50      	adds	r0, r2, #1
 80193c4:	d1c9      	bne.n	801935a <__sflush_r+0x32>
 80193c6:	682b      	ldr	r3, [r5, #0]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d0c6      	beq.n	801935a <__sflush_r+0x32>
 80193cc:	2b1d      	cmp	r3, #29
 80193ce:	d001      	beq.n	80193d4 <__sflush_r+0xac>
 80193d0:	2b16      	cmp	r3, #22
 80193d2:	d11e      	bne.n	8019412 <__sflush_r+0xea>
 80193d4:	602f      	str	r7, [r5, #0]
 80193d6:	2000      	movs	r0, #0
 80193d8:	e022      	b.n	8019420 <__sflush_r+0xf8>
 80193da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193de:	b21b      	sxth	r3, r3
 80193e0:	e01b      	b.n	801941a <__sflush_r+0xf2>
 80193e2:	690f      	ldr	r7, [r1, #16]
 80193e4:	2f00      	cmp	r7, #0
 80193e6:	d0f6      	beq.n	80193d6 <__sflush_r+0xae>
 80193e8:	0793      	lsls	r3, r2, #30
 80193ea:	680e      	ldr	r6, [r1, #0]
 80193ec:	bf08      	it	eq
 80193ee:	694b      	ldreq	r3, [r1, #20]
 80193f0:	600f      	str	r7, [r1, #0]
 80193f2:	bf18      	it	ne
 80193f4:	2300      	movne	r3, #0
 80193f6:	eba6 0807 	sub.w	r8, r6, r7
 80193fa:	608b      	str	r3, [r1, #8]
 80193fc:	f1b8 0f00 	cmp.w	r8, #0
 8019400:	dde9      	ble.n	80193d6 <__sflush_r+0xae>
 8019402:	6a21      	ldr	r1, [r4, #32]
 8019404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019406:	4643      	mov	r3, r8
 8019408:	463a      	mov	r2, r7
 801940a:	4628      	mov	r0, r5
 801940c:	47b0      	blx	r6
 801940e:	2800      	cmp	r0, #0
 8019410:	dc08      	bgt.n	8019424 <__sflush_r+0xfc>
 8019412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801941a:	81a3      	strh	r3, [r4, #12]
 801941c:	f04f 30ff 	mov.w	r0, #4294967295
 8019420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019424:	4407      	add	r7, r0
 8019426:	eba8 0800 	sub.w	r8, r8, r0
 801942a:	e7e7      	b.n	80193fc <__sflush_r+0xd4>
 801942c:	20400001 	.word	0x20400001

08019430 <_fflush_r>:
 8019430:	b538      	push	{r3, r4, r5, lr}
 8019432:	690b      	ldr	r3, [r1, #16]
 8019434:	4605      	mov	r5, r0
 8019436:	460c      	mov	r4, r1
 8019438:	b913      	cbnz	r3, 8019440 <_fflush_r+0x10>
 801943a:	2500      	movs	r5, #0
 801943c:	4628      	mov	r0, r5
 801943e:	bd38      	pop	{r3, r4, r5, pc}
 8019440:	b118      	cbz	r0, 801944a <_fflush_r+0x1a>
 8019442:	6a03      	ldr	r3, [r0, #32]
 8019444:	b90b      	cbnz	r3, 801944a <_fflush_r+0x1a>
 8019446:	f7ff f85d 	bl	8018504 <__sinit>
 801944a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d0f3      	beq.n	801943a <_fflush_r+0xa>
 8019452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019454:	07d0      	lsls	r0, r2, #31
 8019456:	d404      	bmi.n	8019462 <_fflush_r+0x32>
 8019458:	0599      	lsls	r1, r3, #22
 801945a:	d402      	bmi.n	8019462 <_fflush_r+0x32>
 801945c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801945e:	f7ff fa0e 	bl	801887e <__retarget_lock_acquire_recursive>
 8019462:	4628      	mov	r0, r5
 8019464:	4621      	mov	r1, r4
 8019466:	f7ff ff5f 	bl	8019328 <__sflush_r>
 801946a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801946c:	07da      	lsls	r2, r3, #31
 801946e:	4605      	mov	r5, r0
 8019470:	d4e4      	bmi.n	801943c <_fflush_r+0xc>
 8019472:	89a3      	ldrh	r3, [r4, #12]
 8019474:	059b      	lsls	r3, r3, #22
 8019476:	d4e1      	bmi.n	801943c <_fflush_r+0xc>
 8019478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801947a:	f7ff fa01 	bl	8018880 <__retarget_lock_release_recursive>
 801947e:	e7dd      	b.n	801943c <_fflush_r+0xc>

08019480 <fiprintf>:
 8019480:	b40e      	push	{r1, r2, r3}
 8019482:	b503      	push	{r0, r1, lr}
 8019484:	4601      	mov	r1, r0
 8019486:	ab03      	add	r3, sp, #12
 8019488:	4805      	ldr	r0, [pc, #20]	@ (80194a0 <fiprintf+0x20>)
 801948a:	f853 2b04 	ldr.w	r2, [r3], #4
 801948e:	6800      	ldr	r0, [r0, #0]
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	f7ff fca5 	bl	8018de0 <_vfiprintf_r>
 8019496:	b002      	add	sp, #8
 8019498:	f85d eb04 	ldr.w	lr, [sp], #4
 801949c:	b003      	add	sp, #12
 801949e:	4770      	bx	lr
 80194a0:	20000118 	.word	0x20000118

080194a4 <__swbuf_r>:
 80194a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194a6:	460e      	mov	r6, r1
 80194a8:	4614      	mov	r4, r2
 80194aa:	4605      	mov	r5, r0
 80194ac:	b118      	cbz	r0, 80194b6 <__swbuf_r+0x12>
 80194ae:	6a03      	ldr	r3, [r0, #32]
 80194b0:	b90b      	cbnz	r3, 80194b6 <__swbuf_r+0x12>
 80194b2:	f7ff f827 	bl	8018504 <__sinit>
 80194b6:	69a3      	ldr	r3, [r4, #24]
 80194b8:	60a3      	str	r3, [r4, #8]
 80194ba:	89a3      	ldrh	r3, [r4, #12]
 80194bc:	071a      	lsls	r2, r3, #28
 80194be:	d501      	bpl.n	80194c4 <__swbuf_r+0x20>
 80194c0:	6923      	ldr	r3, [r4, #16]
 80194c2:	b943      	cbnz	r3, 80194d6 <__swbuf_r+0x32>
 80194c4:	4621      	mov	r1, r4
 80194c6:	4628      	mov	r0, r5
 80194c8:	f000 f82a 	bl	8019520 <__swsetup_r>
 80194cc:	b118      	cbz	r0, 80194d6 <__swbuf_r+0x32>
 80194ce:	f04f 37ff 	mov.w	r7, #4294967295
 80194d2:	4638      	mov	r0, r7
 80194d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194d6:	6823      	ldr	r3, [r4, #0]
 80194d8:	6922      	ldr	r2, [r4, #16]
 80194da:	1a98      	subs	r0, r3, r2
 80194dc:	6963      	ldr	r3, [r4, #20]
 80194de:	b2f6      	uxtb	r6, r6
 80194e0:	4283      	cmp	r3, r0
 80194e2:	4637      	mov	r7, r6
 80194e4:	dc05      	bgt.n	80194f2 <__swbuf_r+0x4e>
 80194e6:	4621      	mov	r1, r4
 80194e8:	4628      	mov	r0, r5
 80194ea:	f7ff ffa1 	bl	8019430 <_fflush_r>
 80194ee:	2800      	cmp	r0, #0
 80194f0:	d1ed      	bne.n	80194ce <__swbuf_r+0x2a>
 80194f2:	68a3      	ldr	r3, [r4, #8]
 80194f4:	3b01      	subs	r3, #1
 80194f6:	60a3      	str	r3, [r4, #8]
 80194f8:	6823      	ldr	r3, [r4, #0]
 80194fa:	1c5a      	adds	r2, r3, #1
 80194fc:	6022      	str	r2, [r4, #0]
 80194fe:	701e      	strb	r6, [r3, #0]
 8019500:	6962      	ldr	r2, [r4, #20]
 8019502:	1c43      	adds	r3, r0, #1
 8019504:	429a      	cmp	r2, r3
 8019506:	d004      	beq.n	8019512 <__swbuf_r+0x6e>
 8019508:	89a3      	ldrh	r3, [r4, #12]
 801950a:	07db      	lsls	r3, r3, #31
 801950c:	d5e1      	bpl.n	80194d2 <__swbuf_r+0x2e>
 801950e:	2e0a      	cmp	r6, #10
 8019510:	d1df      	bne.n	80194d2 <__swbuf_r+0x2e>
 8019512:	4621      	mov	r1, r4
 8019514:	4628      	mov	r0, r5
 8019516:	f7ff ff8b 	bl	8019430 <_fflush_r>
 801951a:	2800      	cmp	r0, #0
 801951c:	d0d9      	beq.n	80194d2 <__swbuf_r+0x2e>
 801951e:	e7d6      	b.n	80194ce <__swbuf_r+0x2a>

08019520 <__swsetup_r>:
 8019520:	b538      	push	{r3, r4, r5, lr}
 8019522:	4b29      	ldr	r3, [pc, #164]	@ (80195c8 <__swsetup_r+0xa8>)
 8019524:	4605      	mov	r5, r0
 8019526:	6818      	ldr	r0, [r3, #0]
 8019528:	460c      	mov	r4, r1
 801952a:	b118      	cbz	r0, 8019534 <__swsetup_r+0x14>
 801952c:	6a03      	ldr	r3, [r0, #32]
 801952e:	b90b      	cbnz	r3, 8019534 <__swsetup_r+0x14>
 8019530:	f7fe ffe8 	bl	8018504 <__sinit>
 8019534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019538:	0719      	lsls	r1, r3, #28
 801953a:	d422      	bmi.n	8019582 <__swsetup_r+0x62>
 801953c:	06da      	lsls	r2, r3, #27
 801953e:	d407      	bmi.n	8019550 <__swsetup_r+0x30>
 8019540:	2209      	movs	r2, #9
 8019542:	602a      	str	r2, [r5, #0]
 8019544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019548:	81a3      	strh	r3, [r4, #12]
 801954a:	f04f 30ff 	mov.w	r0, #4294967295
 801954e:	e033      	b.n	80195b8 <__swsetup_r+0x98>
 8019550:	0758      	lsls	r0, r3, #29
 8019552:	d512      	bpl.n	801957a <__swsetup_r+0x5a>
 8019554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019556:	b141      	cbz	r1, 801956a <__swsetup_r+0x4a>
 8019558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801955c:	4299      	cmp	r1, r3
 801955e:	d002      	beq.n	8019566 <__swsetup_r+0x46>
 8019560:	4628      	mov	r0, r5
 8019562:	f7ff f9bb 	bl	80188dc <_free_r>
 8019566:	2300      	movs	r3, #0
 8019568:	6363      	str	r3, [r4, #52]	@ 0x34
 801956a:	89a3      	ldrh	r3, [r4, #12]
 801956c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019570:	81a3      	strh	r3, [r4, #12]
 8019572:	2300      	movs	r3, #0
 8019574:	6063      	str	r3, [r4, #4]
 8019576:	6923      	ldr	r3, [r4, #16]
 8019578:	6023      	str	r3, [r4, #0]
 801957a:	89a3      	ldrh	r3, [r4, #12]
 801957c:	f043 0308 	orr.w	r3, r3, #8
 8019580:	81a3      	strh	r3, [r4, #12]
 8019582:	6923      	ldr	r3, [r4, #16]
 8019584:	b94b      	cbnz	r3, 801959a <__swsetup_r+0x7a>
 8019586:	89a3      	ldrh	r3, [r4, #12]
 8019588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801958c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019590:	d003      	beq.n	801959a <__swsetup_r+0x7a>
 8019592:	4621      	mov	r1, r4
 8019594:	4628      	mov	r0, r5
 8019596:	f000 f884 	bl	80196a2 <__smakebuf_r>
 801959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801959e:	f013 0201 	ands.w	r2, r3, #1
 80195a2:	d00a      	beq.n	80195ba <__swsetup_r+0x9a>
 80195a4:	2200      	movs	r2, #0
 80195a6:	60a2      	str	r2, [r4, #8]
 80195a8:	6962      	ldr	r2, [r4, #20]
 80195aa:	4252      	negs	r2, r2
 80195ac:	61a2      	str	r2, [r4, #24]
 80195ae:	6922      	ldr	r2, [r4, #16]
 80195b0:	b942      	cbnz	r2, 80195c4 <__swsetup_r+0xa4>
 80195b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80195b6:	d1c5      	bne.n	8019544 <__swsetup_r+0x24>
 80195b8:	bd38      	pop	{r3, r4, r5, pc}
 80195ba:	0799      	lsls	r1, r3, #30
 80195bc:	bf58      	it	pl
 80195be:	6962      	ldrpl	r2, [r4, #20]
 80195c0:	60a2      	str	r2, [r4, #8]
 80195c2:	e7f4      	b.n	80195ae <__swsetup_r+0x8e>
 80195c4:	2000      	movs	r0, #0
 80195c6:	e7f7      	b.n	80195b8 <__swsetup_r+0x98>
 80195c8:	20000118 	.word	0x20000118

080195cc <_sbrk_r>:
 80195cc:	b538      	push	{r3, r4, r5, lr}
 80195ce:	4d06      	ldr	r5, [pc, #24]	@ (80195e8 <_sbrk_r+0x1c>)
 80195d0:	2300      	movs	r3, #0
 80195d2:	4604      	mov	r4, r0
 80195d4:	4608      	mov	r0, r1
 80195d6:	602b      	str	r3, [r5, #0]
 80195d8:	f7e7 fcfc 	bl	8000fd4 <_sbrk>
 80195dc:	1c43      	adds	r3, r0, #1
 80195de:	d102      	bne.n	80195e6 <_sbrk_r+0x1a>
 80195e0:	682b      	ldr	r3, [r5, #0]
 80195e2:	b103      	cbz	r3, 80195e6 <_sbrk_r+0x1a>
 80195e4:	6023      	str	r3, [r4, #0]
 80195e6:	bd38      	pop	{r3, r4, r5, pc}
 80195e8:	2000e534 	.word	0x2000e534

080195ec <abort>:
 80195ec:	b508      	push	{r3, lr}
 80195ee:	2006      	movs	r0, #6
 80195f0:	f000 f8bc 	bl	801976c <raise>
 80195f4:	2001      	movs	r0, #1
 80195f6:	f7e7 fc75 	bl	8000ee4 <_exit>

080195fa <_realloc_r>:
 80195fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fe:	4607      	mov	r7, r0
 8019600:	4614      	mov	r4, r2
 8019602:	460d      	mov	r5, r1
 8019604:	b921      	cbnz	r1, 8019610 <_realloc_r+0x16>
 8019606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801960a:	4611      	mov	r1, r2
 801960c:	f7ff b9da 	b.w	80189c4 <_malloc_r>
 8019610:	b92a      	cbnz	r2, 801961e <_realloc_r+0x24>
 8019612:	f7ff f963 	bl	80188dc <_free_r>
 8019616:	4625      	mov	r5, r4
 8019618:	4628      	mov	r0, r5
 801961a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801961e:	f000 f8e3 	bl	80197e8 <_malloc_usable_size_r>
 8019622:	4284      	cmp	r4, r0
 8019624:	4606      	mov	r6, r0
 8019626:	d802      	bhi.n	801962e <_realloc_r+0x34>
 8019628:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801962c:	d8f4      	bhi.n	8019618 <_realloc_r+0x1e>
 801962e:	4621      	mov	r1, r4
 8019630:	4638      	mov	r0, r7
 8019632:	f7ff f9c7 	bl	80189c4 <_malloc_r>
 8019636:	4680      	mov	r8, r0
 8019638:	b908      	cbnz	r0, 801963e <_realloc_r+0x44>
 801963a:	4645      	mov	r5, r8
 801963c:	e7ec      	b.n	8019618 <_realloc_r+0x1e>
 801963e:	42b4      	cmp	r4, r6
 8019640:	4622      	mov	r2, r4
 8019642:	4629      	mov	r1, r5
 8019644:	bf28      	it	cs
 8019646:	4632      	movcs	r2, r6
 8019648:	f7ff f91b 	bl	8018882 <memcpy>
 801964c:	4629      	mov	r1, r5
 801964e:	4638      	mov	r0, r7
 8019650:	f7ff f944 	bl	80188dc <_free_r>
 8019654:	e7f1      	b.n	801963a <_realloc_r+0x40>

08019656 <__swhatbuf_r>:
 8019656:	b570      	push	{r4, r5, r6, lr}
 8019658:	460c      	mov	r4, r1
 801965a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801965e:	2900      	cmp	r1, #0
 8019660:	b096      	sub	sp, #88	@ 0x58
 8019662:	4615      	mov	r5, r2
 8019664:	461e      	mov	r6, r3
 8019666:	da0d      	bge.n	8019684 <__swhatbuf_r+0x2e>
 8019668:	89a3      	ldrh	r3, [r4, #12]
 801966a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801966e:	f04f 0100 	mov.w	r1, #0
 8019672:	bf14      	ite	ne
 8019674:	2340      	movne	r3, #64	@ 0x40
 8019676:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801967a:	2000      	movs	r0, #0
 801967c:	6031      	str	r1, [r6, #0]
 801967e:	602b      	str	r3, [r5, #0]
 8019680:	b016      	add	sp, #88	@ 0x58
 8019682:	bd70      	pop	{r4, r5, r6, pc}
 8019684:	466a      	mov	r2, sp
 8019686:	f000 f879 	bl	801977c <_fstat_r>
 801968a:	2800      	cmp	r0, #0
 801968c:	dbec      	blt.n	8019668 <__swhatbuf_r+0x12>
 801968e:	9901      	ldr	r1, [sp, #4]
 8019690:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019694:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019698:	4259      	negs	r1, r3
 801969a:	4159      	adcs	r1, r3
 801969c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80196a0:	e7eb      	b.n	801967a <__swhatbuf_r+0x24>

080196a2 <__smakebuf_r>:
 80196a2:	898b      	ldrh	r3, [r1, #12]
 80196a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196a6:	079d      	lsls	r5, r3, #30
 80196a8:	4606      	mov	r6, r0
 80196aa:	460c      	mov	r4, r1
 80196ac:	d507      	bpl.n	80196be <__smakebuf_r+0x1c>
 80196ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80196b2:	6023      	str	r3, [r4, #0]
 80196b4:	6123      	str	r3, [r4, #16]
 80196b6:	2301      	movs	r3, #1
 80196b8:	6163      	str	r3, [r4, #20]
 80196ba:	b003      	add	sp, #12
 80196bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196be:	ab01      	add	r3, sp, #4
 80196c0:	466a      	mov	r2, sp
 80196c2:	f7ff ffc8 	bl	8019656 <__swhatbuf_r>
 80196c6:	9f00      	ldr	r7, [sp, #0]
 80196c8:	4605      	mov	r5, r0
 80196ca:	4639      	mov	r1, r7
 80196cc:	4630      	mov	r0, r6
 80196ce:	f7ff f979 	bl	80189c4 <_malloc_r>
 80196d2:	b948      	cbnz	r0, 80196e8 <__smakebuf_r+0x46>
 80196d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196d8:	059a      	lsls	r2, r3, #22
 80196da:	d4ee      	bmi.n	80196ba <__smakebuf_r+0x18>
 80196dc:	f023 0303 	bic.w	r3, r3, #3
 80196e0:	f043 0302 	orr.w	r3, r3, #2
 80196e4:	81a3      	strh	r3, [r4, #12]
 80196e6:	e7e2      	b.n	80196ae <__smakebuf_r+0xc>
 80196e8:	89a3      	ldrh	r3, [r4, #12]
 80196ea:	6020      	str	r0, [r4, #0]
 80196ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80196f0:	81a3      	strh	r3, [r4, #12]
 80196f2:	9b01      	ldr	r3, [sp, #4]
 80196f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80196f8:	b15b      	cbz	r3, 8019712 <__smakebuf_r+0x70>
 80196fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80196fe:	4630      	mov	r0, r6
 8019700:	f000 f84e 	bl	80197a0 <_isatty_r>
 8019704:	b128      	cbz	r0, 8019712 <__smakebuf_r+0x70>
 8019706:	89a3      	ldrh	r3, [r4, #12]
 8019708:	f023 0303 	bic.w	r3, r3, #3
 801970c:	f043 0301 	orr.w	r3, r3, #1
 8019710:	81a3      	strh	r3, [r4, #12]
 8019712:	89a3      	ldrh	r3, [r4, #12]
 8019714:	431d      	orrs	r5, r3
 8019716:	81a5      	strh	r5, [r4, #12]
 8019718:	e7cf      	b.n	80196ba <__smakebuf_r+0x18>

0801971a <_raise_r>:
 801971a:	291f      	cmp	r1, #31
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	4605      	mov	r5, r0
 8019720:	460c      	mov	r4, r1
 8019722:	d904      	bls.n	801972e <_raise_r+0x14>
 8019724:	2316      	movs	r3, #22
 8019726:	6003      	str	r3, [r0, #0]
 8019728:	f04f 30ff 	mov.w	r0, #4294967295
 801972c:	bd38      	pop	{r3, r4, r5, pc}
 801972e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019730:	b112      	cbz	r2, 8019738 <_raise_r+0x1e>
 8019732:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019736:	b94b      	cbnz	r3, 801974c <_raise_r+0x32>
 8019738:	4628      	mov	r0, r5
 801973a:	f000 f853 	bl	80197e4 <_getpid_r>
 801973e:	4622      	mov	r2, r4
 8019740:	4601      	mov	r1, r0
 8019742:	4628      	mov	r0, r5
 8019744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019748:	f000 b83a 	b.w	80197c0 <_kill_r>
 801974c:	2b01      	cmp	r3, #1
 801974e:	d00a      	beq.n	8019766 <_raise_r+0x4c>
 8019750:	1c59      	adds	r1, r3, #1
 8019752:	d103      	bne.n	801975c <_raise_r+0x42>
 8019754:	2316      	movs	r3, #22
 8019756:	6003      	str	r3, [r0, #0]
 8019758:	2001      	movs	r0, #1
 801975a:	e7e7      	b.n	801972c <_raise_r+0x12>
 801975c:	2100      	movs	r1, #0
 801975e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019762:	4620      	mov	r0, r4
 8019764:	4798      	blx	r3
 8019766:	2000      	movs	r0, #0
 8019768:	e7e0      	b.n	801972c <_raise_r+0x12>
	...

0801976c <raise>:
 801976c:	4b02      	ldr	r3, [pc, #8]	@ (8019778 <raise+0xc>)
 801976e:	4601      	mov	r1, r0
 8019770:	6818      	ldr	r0, [r3, #0]
 8019772:	f7ff bfd2 	b.w	801971a <_raise_r>
 8019776:	bf00      	nop
 8019778:	20000118 	.word	0x20000118

0801977c <_fstat_r>:
 801977c:	b538      	push	{r3, r4, r5, lr}
 801977e:	4d07      	ldr	r5, [pc, #28]	@ (801979c <_fstat_r+0x20>)
 8019780:	2300      	movs	r3, #0
 8019782:	4604      	mov	r4, r0
 8019784:	4608      	mov	r0, r1
 8019786:	4611      	mov	r1, r2
 8019788:	602b      	str	r3, [r5, #0]
 801978a:	f7e7 fbfb 	bl	8000f84 <_fstat>
 801978e:	1c43      	adds	r3, r0, #1
 8019790:	d102      	bne.n	8019798 <_fstat_r+0x1c>
 8019792:	682b      	ldr	r3, [r5, #0]
 8019794:	b103      	cbz	r3, 8019798 <_fstat_r+0x1c>
 8019796:	6023      	str	r3, [r4, #0]
 8019798:	bd38      	pop	{r3, r4, r5, pc}
 801979a:	bf00      	nop
 801979c:	2000e534 	.word	0x2000e534

080197a0 <_isatty_r>:
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	4d06      	ldr	r5, [pc, #24]	@ (80197bc <_isatty_r+0x1c>)
 80197a4:	2300      	movs	r3, #0
 80197a6:	4604      	mov	r4, r0
 80197a8:	4608      	mov	r0, r1
 80197aa:	602b      	str	r3, [r5, #0]
 80197ac:	f7e7 fbfa 	bl	8000fa4 <_isatty>
 80197b0:	1c43      	adds	r3, r0, #1
 80197b2:	d102      	bne.n	80197ba <_isatty_r+0x1a>
 80197b4:	682b      	ldr	r3, [r5, #0]
 80197b6:	b103      	cbz	r3, 80197ba <_isatty_r+0x1a>
 80197b8:	6023      	str	r3, [r4, #0]
 80197ba:	bd38      	pop	{r3, r4, r5, pc}
 80197bc:	2000e534 	.word	0x2000e534

080197c0 <_kill_r>:
 80197c0:	b538      	push	{r3, r4, r5, lr}
 80197c2:	4d07      	ldr	r5, [pc, #28]	@ (80197e0 <_kill_r+0x20>)
 80197c4:	2300      	movs	r3, #0
 80197c6:	4604      	mov	r4, r0
 80197c8:	4608      	mov	r0, r1
 80197ca:	4611      	mov	r1, r2
 80197cc:	602b      	str	r3, [r5, #0]
 80197ce:	f7e7 fb77 	bl	8000ec0 <_kill>
 80197d2:	1c43      	adds	r3, r0, #1
 80197d4:	d102      	bne.n	80197dc <_kill_r+0x1c>
 80197d6:	682b      	ldr	r3, [r5, #0]
 80197d8:	b103      	cbz	r3, 80197dc <_kill_r+0x1c>
 80197da:	6023      	str	r3, [r4, #0]
 80197dc:	bd38      	pop	{r3, r4, r5, pc}
 80197de:	bf00      	nop
 80197e0:	2000e534 	.word	0x2000e534

080197e4 <_getpid_r>:
 80197e4:	f7e7 bb64 	b.w	8000eb0 <_getpid>

080197e8 <_malloc_usable_size_r>:
 80197e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80197ec:	1f18      	subs	r0, r3, #4
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	bfbc      	itt	lt
 80197f2:	580b      	ldrlt	r3, [r1, r0]
 80197f4:	18c0      	addlt	r0, r0, r3
 80197f6:	4770      	bx	lr

080197f8 <_init>:
 80197f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197fa:	bf00      	nop
 80197fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197fe:	bc08      	pop	{r3}
 8019800:	469e      	mov	lr, r3
 8019802:	4770      	bx	lr

08019804 <_fini>:
 8019804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019806:	bf00      	nop
 8019808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801980a:	bc08      	pop	{r3}
 801980c:	469e      	mov	lr, r3
 801980e:	4770      	bx	lr


dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b5c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ed8  0801b758  0801b758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f630  0801f630  00021168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f630  0801f630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f638  0801f638  00021168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f638  0801f638  00020638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f63c  0801f63c  0002063c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0801f640  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021168  2**0
                  CONTENTS
 10 .bss          0000e4a4  20000168  20000168  00021168  2**2
                  ALLOC
 11 .eth_desc     00000014  2000e60c  2000e60c  00021168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e620  2000e620  00021168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e620  2000e620  00021168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00021168  2**0
                  CONTENTS, READONLY
 15 .debug_info   00039e47  00000000  00000000  00021198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000995f  00000000  00000000  0005afdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a50  00000000  00000000  00064940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000211f  00000000  00000000  00067390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00015682  00000000  00000000  000694af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00042ec4  00000000  00000000  0007eb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f6616  00000000  00000000  000c19f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b800b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b8ac  00000000  00000000  001b8050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001c38fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b740 	.word	0x0801b740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801b740 	.word	0x0801b740

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000188 	.word	0x20000188
 80005dc:	20000228 	.word	0x20000228

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f00b fa85 	bl	800bb0c <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0801b764 	.word	0x0801b764
 8000614:	20000184 	.word	0x20000184

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000620:	f019 f91a 	bl	8019858 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000624:	f007 ffa4 	bl	8008570 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 8000628:	f000 ff16 	bl	8001458 <modbus_tcp_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f00b fab9 	bl	800bba4 <osDelay>
 8000632:	e7fb      	b.n	800062c <StartDefaultTask+0x14>

08000634 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800064e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000652:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000656:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <MX_FSMC_Init+0xb8>)
 8000658:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800065c:	2204      	movs	r2, #4
 800065e:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800066e:	2210      	movs	r2, #16
 8000670:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80006ae:	230f      	movs	r3, #15
 80006b0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80006b2:	230f      	movs	r3, #15
 80006b4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80006b6:	23ff      	movs	r3, #255	@ 0xff
 80006b8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80006ba:	230f      	movs	r3, #15
 80006bc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80006be:	2310      	movs	r3, #16
 80006c0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80006c2:	2311      	movs	r3, #17
 80006c4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_FSMC_Init+0xb4>)
 80006d2:	f005 fcdb 	bl	800608c <HAL_SRAM_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80006dc:	f000 f984 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000428 	.word	0x20000428
 80006ec:	a0000104 	.word	0xa0000104

080006f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <HAL_FSMC_MspInit+0xc8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d151      	bne.n	80007b0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <HAL_FSMC_MspInit+0xc8>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <HAL_FSMC_MspInit+0xcc>)
 8000718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800071a:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <HAL_FSMC_MspInit+0xcc>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6393      	str	r3, [r2, #56]	@ 0x38
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <HAL_FSMC_MspInit+0xcc>)
 8000724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800072e:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000732:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000740:	230c      	movs	r3, #12
 8000742:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	481d      	ldr	r0, [pc, #116]	@ (80007c0 <HAL_FSMC_MspInit+0xd0>)
 800074a:	f003 fc0d 	bl	8003f68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800074e:	f240 433f 	movw	r3, #1087	@ 0x43f
 8000752:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000760:	230c      	movs	r3, #12
 8000762:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <HAL_FSMC_MspInit+0xd4>)
 800076a:	f003 fbfd 	bl	8003f68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800076e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000772:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000780:	230c      	movs	r3, #12
 8000782:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <HAL_FSMC_MspInit+0xd8>)
 800078a:	f003 fbed 	bl	8003f68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800078e:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8000792:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007a0:	230c      	movs	r3, #12
 80007a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <HAL_FSMC_MspInit+0xdc>)
 80007aa:	f003 fbdd 	bl	8003f68 <HAL_GPIO_Init>
 80007ae:	e000      	b.n	80007b2 <HAL_FSMC_MspInit+0xc2>
    return;
 80007b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000478 	.word	0x20000478
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40021400 	.word	0x40021400
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007d8:	f7ff ff8a 	bl	80006f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	@ 0x24
 80007e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	4b33      	ldr	r3, [pc, #204]	@ (80008bc <MX_GPIO_Init+0xd8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a32      	ldr	r2, [pc, #200]	@ (80008bc <MX_GPIO_Init+0xd8>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <MX_GPIO_Init+0xd8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a2b      	ldr	r2, [pc, #172]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a24      	ldr	r2, [pc, #144]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a1d      	ldr	r2, [pc, #116]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_GPIO_Init+0xd8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_GPIO_Init+0xd8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

}
 80008ae:	bf00      	nop
 80008b0:	3724      	adds	r7, #36	@ 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f001 ffd4 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f812 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f7ff ff8a 	bl	80007e4 <MX_GPIO_Init>
  MX_FSMC_Init();
 80008d0:	f7ff feb0 	bl	8000634 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80008d4:	f001 fcf8 	bl	80022c8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80008d8:	f001 fd20 	bl	800231c <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80008dc:	f001 fc96 	bl	800220c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008e0:	f7ff fe7e 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008e4:	f00b f8fb 	bl	800bade <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80008e8:	2064      	movs	r0, #100	@ 0x64
 80008ea:	f002 f803 	bl	80028f4 <HAL_Delay>
 80008ee:	e7fb      	b.n	80008e8 <main+0x28>

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	@ 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f019 fe79 	bl	801a5f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	@ (80009bc <SystemClock_Config+0xcc>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	@ 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <SystemClock_Config+0xd0>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000960:	2319      	movs	r3, #25
 8000962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000964:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000968:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fefe 	bl	8005778 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000982:	f000 f831 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2302      	movs	r3, #2
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000992:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2105      	movs	r1, #5
 80009a4:	4618      	mov	r0, r3
 80009a6:	f005 f95f 	bl	8005c68 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b0:	f000 f81a 	bl	80009e8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	@ 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009d6:	f001 ff6d 	bl	80028b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40002000 	.word	0x40002000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0a4      	sub	sp, #144	@ 0x90
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 8000a0a:	e00e      	b.n	8000a2a <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8000a0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000a10:	1c53      	adds	r3, r2, #1
 8000a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	3390      	adds	r3, #144	@ 0x90
 8000a24:	443b      	add	r3, r7
 8000a26:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 8000a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <cdc_debug_log+0x48>
 8000a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a38:	2b13      	cmp	r3, #19
 8000a3a:	d9e7      	bls.n	8000a0c <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8000a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000a46:	3390      	adds	r3, #144	@ 0x90
 8000a48:	443b      	add	r3, r7
 8000a4a:	223a      	movs	r2, #58	@ 0x3a
 8000a4c:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 8000a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000a5a:	3390      	adds	r3, #144	@ 0x90
 8000a5c:	443b      	add	r3, r7
 8000a5e:	2220      	movs	r2, #32
 8000a60:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 8000a6a:	e00e      	b.n	8000a8a <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 8000a6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000a70:	1c53      	adds	r3, r2, #1
 8000a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a7a:	1c59      	adds	r1, r3, #1
 8000a7c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	3390      	adds	r3, #144	@ 0x90
 8000a84:	443b      	add	r3, r7
 8000a86:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 8000a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <cdc_debug_log+0xa8>
 8000a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a98:	2b77      	cmp	r3, #119	@ 0x77
 8000a9a:	d9e7      	bls.n	8000a6c <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 8000a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000aa6:	3390      	adds	r3, #144	@ 0x90
 8000aa8:	443b      	add	r3, r7
 8000aaa:	220d      	movs	r2, #13
 8000aac:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8000ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000aba:	3390      	adds	r3, #144	@ 0x90
 8000abc:	443b      	add	r3, r7
 8000abe:	220a      	movs	r2, #10
 8000ac0:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    if (len < sizeof(debug_buf)) {
 8000ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aca:	d808      	bhi.n	8000ade <cdc_debug_log+0xea>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8000acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f018 ff7b 	bl	80199d4 <CDC_Transmit_FS>
    }
}
 8000ade:	bf00      	nop
 8000ae0:	3790      	adds	r7, #144	@ 0x90
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	@ 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da04      	bge.n	8000b0c <int_to_str+0x24>
        is_negative = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
        value = -value;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	425b      	negs	r3, r3
 8000b0a:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d12b      	bne.n	8000b6a <int_to_str+0x82>
        str[i++] = '0';
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	2230      	movs	r2, #48	@ 0x30
 8000b20:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	4413      	add	r3, r2
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
        return;
 8000b2c:	e05c      	b.n	8000be8 <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <int_to_str+0x10c>)
 8000b32:	fb83 1302 	smull	r1, r3, r3, r2
 8000b36:	1099      	asrs	r1, r3, #2
 8000b38:	17d3      	asrs	r3, r2, #31
 8000b3a:	1ac9      	subs	r1, r1, r3
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	1ad1      	subs	r1, r2, r3
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	1c59      	adds	r1, r3, #1
 8000b4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	440b      	add	r3, r1
 8000b54:	3230      	adds	r2, #48	@ 0x30
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4a25      	ldr	r2, [pc, #148]	@ (8000bf4 <int_to_str+0x10c>)
 8000b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b62:	1092      	asrs	r2, r2, #2
 8000b64:	17db      	asrs	r3, r3, #31
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dd04      	ble.n	8000b7a <int_to_str+0x92>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b02      	subs	r3, #2
 8000b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dbd9      	blt.n	8000b2e <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00c      	beq.n	8000b9a <int_to_str+0xb2>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b86:	429a      	cmp	r2, r3
 8000b88:	da07      	bge.n	8000b9a <int_to_str+0xb2>
        str[i++] = '-';
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b90:	461a      	mov	r2, r3
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	4413      	add	r3, r2
 8000b96:	222d      	movs	r2, #45	@ 0x2d
 8000b98:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3b01      	subs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8000bae:	e017      	b.n	8000be0 <int_to_str+0xf8>
        char temp = str[start];
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	441a      	add	r2, r3
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4413      	add	r3, r2
 8000bd0:	7dfa      	ldrb	r2, [r7, #23]
 8000bd2:	701a      	strb	r2, [r3, #0]
        start++;
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
        end--;
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8000be0:	69fa      	ldr	r2, [r7, #28]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbe3      	blt.n	8000bb0 <int_to_str+0xc8>
    }
}
 8000be8:	372c      	adds	r7, #44	@ 0x2c
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	66666667 	.word	0x66666667

08000bf8 <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8000bf8:	b4b0      	push	{r4, r5, r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <hex_to_str+0x54>)
 8000c06:	f107 040c 	add.w	r4, r7, #12
 8000c0a:	461d      	mov	r5, r3
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 020f 	and.w	r2, r3, #15
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	3220      	adds	r2, #32
 8000c32:	443a      	add	r2, r7
 8000c34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000c38:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3724      	adds	r7, #36	@ 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bcb0      	pop	{r4, r5, r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	0801b780 	.word	0x0801b780

08000c50 <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0a8      	sub	sp, #160	@ 0xa0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <dump_data+0x108>)
 8000c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000c70:	4618      	mov	r0, r3
 8000c72:	f019 fda2 	bl	801a7ba <strcpy>
    dump_len = strlen(prefix);
 8000c76:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000c7a:	f7ff faa9 	bl	80001d0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	2b10      	cmp	r3, #16
 8000c88:	bf28      	it	cs
 8000c8a:	2310      	movcs	r3, #16
 8000c8c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8000c96:	e032      	b.n	8000cfe <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 8000c98:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f107 020c 	add.w	r2, r7, #12
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffa5 	bl	8000bf8 <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 8000cae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000cb2:	3303      	adds	r3, #3
 8000cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cb6:	d81d      	bhi.n	8000cf4 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 8000cb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8000cc2:	7b3a      	ldrb	r2, [r7, #12]
 8000cc4:	33a0      	adds	r3, #160	@ 0xa0
 8000cc6:	443b      	add	r3, r7
 8000cc8:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8000ccc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8000cd6:	7b7a      	ldrb	r2, [r7, #13]
 8000cd8:	33a0      	adds	r3, #160	@ 0xa0
 8000cda:	443b      	add	r3, r7
 8000cdc:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8000ce0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8000cea:	33a0      	adds	r3, #160	@ 0xa0
 8000cec:	443b      	add	r3, r7
 8000cee:	2220      	movs	r2, #32
 8000cf0:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8000cf4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8000cfe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8000d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d203      	bcs.n	8000d12 <dump_data+0xc2>
 8000d0a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000d0e:	2b77      	cmp	r3, #119	@ 0x77
 8000d10:	d9c2      	bls.n	8000c98 <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	d90e      	bls.n	8000d36 <dump_data+0xe6>
        const char* more = "...";
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <dump_data+0x10c>)
 8000d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000d26:	4618      	mov	r0, r3
 8000d28:	f019 fc6d 	bl	801a606 <strcat>
        dump_len += 3;
 8000d2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000d30:	3303      	adds	r3, #3
 8000d32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 8000d36:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000d3a:	33a0      	adds	r3, #160	@ 0xa0
 8000d3c:	443b      	add	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <dump_data+0x110>)
 8000d4c:	f7ff fe52 	bl	80009f4 <cdc_debug_log>
}
 8000d50:	bf00      	nop
 8000d52:	37a0      	adds	r7, #160	@ 0xa0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	0801b794 	.word	0x0801b794
 8000d5c:	0801b79c 	.word	0x0801b79c
 8000d60:	0801b7a0 	.word	0x0801b7a0

08000d64 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000d70:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8000d74:	6018      	str	r0, [r3, #0]
 8000d76:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000d7a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000d7e:	6019      	str	r1, [r3, #0]
 8000d80:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000d84:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000d88:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 8000d8a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000d8e:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000d98:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000dac:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8000db8:	f5a1 6196 	sub.w	r1, r1, #1200	@ 0x4b0
 8000dbc:	6809      	ldr	r1, [r1, #0]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	f8a7 34b2 	strh.w	r3, [r7, #1202]	@ 0x4b2
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8000dcc:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000dd0:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000ddc:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000df0:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3303      	adds	r3, #3
 8000df8:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8000dfc:	f5a1 6196 	sub.w	r1, r1, #1200	@ 0x4b0
 8000e00:	6809      	ldr	r1, [r1, #0]
 8000e02:	440b      	add	r3, r1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 8000e10:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000e14:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000e20:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000e34:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	3305      	adds	r3, #5
 8000e3c:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8000e40:	f5a1 6196 	sub.w	r1, r1, #1200	@ 0x4b0
 8000e44:	6809      	ldr	r1, [r1, #0]
 8000e46:	440b      	add	r3, r1
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    
    // 验证协议ID
    if (protocol_id != 0) {
 8000e54:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	@ 0x4b0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <process_modbus_request+0x106>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8000e5c:	49d5      	ldr	r1, [pc, #852]	@ (80011b4 <process_modbus_request+0x450>)
 8000e5e:	48d6      	ldr	r0, [pc, #856]	@ (80011b8 <process_modbus_request+0x454>)
 8000e60:	f7ff fdc8 	bl	80009f4 <cdc_debug_log>
        return ERR_VAL;
 8000e64:	f06f 0305 	mvn.w	r3, #5
 8000e68:	e2de      	b.n	8001428 <process_modbus_request+0x6c4>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 8000e6a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d806      	bhi.n	8000e80 <process_modbus_request+0x11c>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 8000e72:	49d2      	ldr	r1, [pc, #840]	@ (80011bc <process_modbus_request+0x458>)
 8000e74:	48d0      	ldr	r0, [pc, #832]	@ (80011b8 <process_modbus_request+0x454>)
 8000e76:	f7ff fdbd 	bl	80009f4 <cdc_debug_log>
        return ERR_VAL;
 8000e7a:	f06f 0305 	mvn.w	r3, #5
 8000e7e:	e2d3      	b.n	8001428 <process_modbus_request+0x6c4>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 8000e80:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000e84:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	3306      	adds	r3, #6
 8000e8c:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000e90:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f887 34ad 	strb.w	r3, [r7, #1197]	@ 0x4ad
    uint8_t fc = buf[offset+7];                            // 函数码
 8000e9e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000ea2:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	3307      	adds	r3, #7
 8000eaa:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000eae:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f887 34ac 	strb.w	r3, [r7, #1196]	@ 0x4ac

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 8000ebc:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000ec0:	4abf      	ldr	r2, [pc, #764]	@ (80011c0 <process_modbus_request+0x45c>)
 8000ec2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8000ec8:	f8b7 44b2 	ldrh.w	r4, [r7, #1202]	@ 0x4b2
 8000ecc:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f97d 	bl	80001d0 <strlen>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000edc:	4413      	add	r3, r2
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fe00 	bl	8000ae8 <int_to_str>
    const char* len_prefix = " Len=";
 8000ee8:	4bb6      	ldr	r3, [pc, #728]	@ (80011c4 <process_modbus_request+0x460>)
 8000eea:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
    strcat(frame_info, len_prefix);
 8000eee:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000ef2:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f019 fb85 	bl	801a606 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 8000efc:	f8b7 44ae 	ldrh.w	r4, [r7, #1198]	@ 0x4ae
 8000f00:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f963 	bl	80001d0 <strlen>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f10:	4413      	add	r3, r2
 8000f12:	220a      	movs	r2, #10
 8000f14:	4619      	mov	r1, r3
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fde6 	bl	8000ae8 <int_to_str>
    const char* fc_prefix = " FC=";
 8000f1c:	4baa      	ldr	r3, [pc, #680]	@ (80011c8 <process_modbus_request+0x464>)
 8000f1e:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
    strcat(frame_info, fc_prefix);
 8000f22:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f26:	f8d7 14a4 	ldr.w	r1, [r7, #1188]	@ 0x4a4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f019 fb6b 	bl	801a606 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8000f30:	f897 44ac 	ldrb.w	r4, [r7, #1196]	@ 0x4ac
 8000f34:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f949 	bl	80001d0 <strlen>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f44:	4413      	add	r3, r2
 8000f46:	220a      	movs	r2, #10
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff fdcc 	bl	8000ae8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 8000f50:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8000f54:	4619      	mov	r1, r3
 8000f56:	4898      	ldr	r0, [pc, #608]	@ (80011b8 <process_modbus_request+0x454>)
 8000f58:	f7ff fd4c 	bl	80009f4 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 8000f5c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000f60:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000f6a:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000f78:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000f82:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8000f8e:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000f9c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000fa0:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 8000fa2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000fa6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000faa:	2200      	movs	r2, #0
 8000fac:	709a      	strb	r2, [r3, #2]
 8000fae:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000fb2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 8000fba:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000fbe:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000fc2:	f897 24ad 	ldrb.w	r2, [r7, #1197]	@ 0x4ad
 8000fc6:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6

    if (fc == FC_READ_HOLDING) {
 8000fce:	f897 34ac 	ldrb.w	r3, [r7, #1196]	@ 0x4ac
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	f040 8143 	bne.w	800125e <process_modbus_request+0x4fa>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 8000fd8:	497c      	ldr	r1, [pc, #496]	@ (80011cc <process_modbus_request+0x468>)
 8000fda:	4877      	ldr	r0, [pc, #476]	@ (80011b8 <process_modbus_request+0x454>)
 8000fdc:	f7ff fd0a 	bl	80009f4 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 8000fe0:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d816      	bhi.n	8001016 <process_modbus_request+0x2b2>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 8000fe8:	4979      	ldr	r1, [pc, #484]	@ (80011d0 <process_modbus_request+0x46c>)
 8000fea:	4873      	ldr	r0, [pc, #460]	@ (80011b8 <process_modbus_request+0x454>)
 8000fec:	f7ff fd02 	bl	80009f4 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8000ff0:	f897 34ac 	ldrb.w	r3, [r7, #1196]	@ 0x4ac
 8000ff4:	3b80      	subs	r3, #128	@ 0x80
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000ffc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001000:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8001002:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001006:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800100a:	2203      	movs	r2, #3
 800100c:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
 8001014:	e139      	b.n	800128a <process_modbus_request+0x526>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8001016:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800101a:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3308      	adds	r3, #8
 8001022:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8001026:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800103a:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	3309      	adds	r3, #9
 8001042:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8001046:	f5a1 6196 	sub.w	r1, r1, #1200	@ 0x4b0
 800104a:	6809      	ldr	r1, [r1, #0]
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	f8a7 34a2 	strh.w	r3, [r7, #1186]	@ 0x4a2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 800105a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800105e:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	330a      	adds	r3, #10
 8001066:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800106a:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b21b      	sxth	r3, r3
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800107e:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	330b      	adds	r3, #11
 8001086:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 800108a:	f5a1 6196 	sub.w	r1, r1, #1200	@ 0x4b0
 800108e:	6809      	ldr	r1, [r1, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4a4c      	ldr	r2, [pc, #304]	@ (80011d4 <process_modbus_request+0x470>)
 80010a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a6:	c303      	stmia	r3!, {r0, r1}
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	3302      	adds	r3, #2
 80010ac:	0c12      	lsrs	r2, r2, #16
 80010ae:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 80010b0:	f8b7 44a2 	ldrh.w	r4, [r7, #1186]	@ 0x4a2
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f889 	bl	80001d0 <strlen>
 80010be:	4602      	mov	r2, r0
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4413      	add	r3, r2
 80010c6:	220a      	movs	r2, #10
 80010c8:	4619      	mov	r1, r3
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff fd0c 	bl	8000ae8 <int_to_str>
            const char* qty_prefix = " qty=";
 80010d0:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <process_modbus_request+0x474>)
 80010d2:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
            strcat(addr_info, qty_prefix);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	f8d7 149c 	ldr.w	r1, [r7, #1180]	@ 0x49c
 80010de:	4618      	mov	r0, r3
 80010e0:	f019 fa91 	bl	801a606 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 80010e4:	f8b7 44a0 	ldrh.w	r4, [r7, #1184]	@ 0x4a0
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4413      	add	r3, r2
 80010fa:	220a      	movs	r2, #10
 80010fc:	4619      	mov	r1, r3
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff fcf2 	bl	8000ae8 <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	482b      	ldr	r0, [pc, #172]	@ (80011b8 <process_modbus_request+0x454>)
 800110c:	f7ff fc72 	bl	80009f4 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 8001110:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <process_modbus_request+0x3bc>
 8001118:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800111c:	2b7d      	cmp	r3, #125	@ 0x7d
 800111e:	d916      	bls.n	800114e <process_modbus_request+0x3ea>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 8001120:	492e      	ldr	r1, [pc, #184]	@ (80011dc <process_modbus_request+0x478>)
 8001122:	4825      	ldr	r0, [pc, #148]	@ (80011b8 <process_modbus_request+0x454>)
 8001124:	f7ff fc66 	bl	80009f4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001128:	f897 34ac 	ldrb.w	r3, [r7, #1196]	@ 0x4ac
 800112c:	3b80      	subs	r3, #128	@ 0x80
 800112e:	b2da      	uxtb	r2, r3
 8001130:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001134:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001138:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 800113a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800113e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001142:	2203      	movs	r2, #3
 8001144:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
 800114c:	e09d      	b.n	800128a <process_modbus_request+0x526>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 800114e:	f8b7 24a2 	ldrh.w	r2, [r7, #1186]	@ 0x4a2
 8001152:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 8001156:	4413      	add	r3, r2
 8001158:	2b64      	cmp	r3, #100	@ 0x64
 800115a:	dd16      	ble.n	800118a <process_modbus_request+0x426>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 800115c:	4920      	ldr	r1, [pc, #128]	@ (80011e0 <process_modbus_request+0x47c>)
 800115e:	4816      	ldr	r0, [pc, #88]	@ (80011b8 <process_modbus_request+0x454>)
 8001160:	f7ff fc48 	bl	80009f4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001164:	f897 34ac 	ldrb.w	r3, [r7, #1196]	@ 0x4ac
 8001168:	3b80      	subs	r3, #128	@ 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001170:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001174:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8001176:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800117a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800117e:	2202      	movs	r2, #2
 8001180:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
 8001188:	e07f      	b.n	800128a <process_modbus_request+0x526>
            } else {
                reply[7] = fc;              // 函数码
 800118a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800118e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001192:	f897 24ac 	ldrb.w	r2, [r7, #1196]	@ 0x4ac
 8001196:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 8001198:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80011a6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80011aa:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
 80011b2:	e042      	b.n	800123a <process_modbus_request+0x4d6>
 80011b4:	0801b7ac 	.word	0x0801b7ac
 80011b8:	0801b7a0 	.word	0x0801b7a0
 80011bc:	0801b7c0 	.word	0x0801b7c0
 80011c0:	0801b7d8 	.word	0x0801b7d8
 80011c4:	0801b7e4 	.word	0x0801b7e4
 80011c8:	0801b7ec 	.word	0x0801b7ec
 80011cc:	0801b7f4 	.word	0x0801b7f4
 80011d0:	0801b80c 	.word	0x0801b80c
 80011d4:	0801b824 	.word	0x0801b824
 80011d8:	0801b830 	.word	0x0801b830
 80011dc:	0801b838 	.word	0x0801b838
 80011e0:	0801b84c 	.word	0x0801b84c
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 80011e4:	f8b7 24a2 	ldrh.w	r2, [r7, #1186]	@ 0x4a2
 80011e8:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80011ec:	4413      	add	r3, r2
 80011ee:	4a91      	ldr	r2, [pc, #580]	@ (8001434 <process_modbus_request+0x6d0>)
 80011f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	3309      	adds	r3, #9
 8001200:	b2d1      	uxtb	r1, r2
 8001202:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8001206:	f2a2 4274 	subw	r2, r2, #1140	@ 0x474
 800120a:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 800120c:	f8b7 24a2 	ldrh.w	r2, [r7, #1186]	@ 0x4a2
 8001210:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001214:	4413      	add	r3, r2
 8001216:	4a87      	ldr	r2, [pc, #540]	@ (8001434 <process_modbus_request+0x6d0>)
 8001218:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800121c:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001220:	3305      	adds	r3, #5
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2d1      	uxtb	r1, r2
 8001226:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800122a:	f2a2 4274 	subw	r2, r2, #1140	@ 0x474
 800122e:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 8001230:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001234:	3301      	adds	r3, #1
 8001236:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
 800123a:	f8b7 24b4 	ldrh.w	r2, [r7, #1204]	@ 0x4b4
 800123e:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 8001242:	429a      	cmp	r2, r3
 8001244:	d3ce      	bcc.n	80011e4 <process_modbus_request+0x480>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 8001246:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
                cdc_debug_log("MODBUS_TCP", "Read success");
 8001254:	4978      	ldr	r1, [pc, #480]	@ (8001438 <process_modbus_request+0x6d4>)
 8001256:	4879      	ldr	r0, [pc, #484]	@ (800143c <process_modbus_request+0x6d8>)
 8001258:	f7ff fbcc 	bl	80009f4 <cdc_debug_log>
 800125c:	e015      	b.n	800128a <process_modbus_request+0x526>
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 800125e:	4978      	ldr	r1, [pc, #480]	@ (8001440 <process_modbus_request+0x6dc>)
 8001260:	4876      	ldr	r0, [pc, #472]	@ (800143c <process_modbus_request+0x6d8>)
 8001262:	f7ff fbc7 	bl	80009f4 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8001266:	f897 34ac 	ldrb.w	r3, [r7, #1196]	@ 0x4ac
 800126a:	3b80      	subs	r3, #128	@ 0x80
 800126c:	b2da      	uxtb	r2, r3
 800126e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001272:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001276:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8001278:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800127c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8001280:	2201      	movs	r2, #1
 8001282:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 800128a:	f8b7 34b6 	ldrh.w	r3, [r7, #1206]	@ 0x4b6
 800128e:	3301      	adds	r3, #1
 8001290:	f8a7 349a 	strh.w	r3, [r7, #1178]	@ 0x49a
    reply[4] = (total_length >> 8) & 0xFF; 
 8001294:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b29b      	uxth	r3, r3
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80012a2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80012a6:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 80012a8:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80012b2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80012b6:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 80012b8:	4962      	ldr	r1, [pc, #392]	@ (8001444 <process_modbus_request+0x6e0>)
 80012ba:	4860      	ldr	r0, [pc, #384]	@ (800143c <process_modbus_request+0x6d8>)
 80012bc:	f7ff fb9a 	bl	80009f4 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 80012c0:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 80012c4:	3306      	adds	r3, #6
 80012c6:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 80012ca:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80012ce:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80012d8:	f8a7 3496 	strh.w	r3, [r7, #1174]	@ 0x496
    if (available_space < total_frame_len) {
 80012dc:	f8b7 2496 	ldrh.w	r2, [r7, #1174]	@ 0x496
 80012e0:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d223      	bcs.n	8001330 <process_modbus_request+0x5cc>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4a56      	ldr	r2, [pc, #344]	@ (8001448 <process_modbus_request+0x6e4>)
 80012ee:	461c      	mov	r4, r3
 80012f0:	4615      	mov	r5, r2
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fa:	c403      	stmia	r4!, {r0, r1}
 80012fc:	8022      	strh	r2, [r4, #0]
 80012fe:	3402      	adds	r4, #2
 8001300:	0c13      	lsrs	r3, r2, #16
 8001302:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8001304:	f8b7 4496 	ldrh.w	r4, [r7, #1174]	@ 0x496
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ff5f 	bl	80001d0 <strlen>
 8001312:	4602      	mov	r2, r0
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4413      	add	r3, r2
 800131a:	220a      	movs	r2, #10
 800131c:	4619      	mov	r1, r3
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff fbe2 	bl	8000ae8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4844      	ldr	r0, [pc, #272]	@ (800143c <process_modbus_request+0x6d8>)
 800132c:	f7ff fb62 	bl	80009f4 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 8001330:	f8b7 2498 	ldrh.w	r2, [r7, #1176]	@ 0x498
 8001334:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001338:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800133c:	f2a3 40ac 	subw	r0, r3, #1196	@ 0x4ac
 8001340:	2301      	movs	r3, #1
 8001342:	6800      	ldr	r0, [r0, #0]
 8001344:	f013 fdba 	bl	8014ebc <tcp_write>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3495 	strb.w	r3, [r7, #1173]	@ 0x495
    if (write_err != ERR_OK) {
 800134e:	f997 3495 	ldrsb.w	r3, [r7, #1173]	@ 0x495
 8001352:	2b00      	cmp	r3, #0
 8001354:	d02f      	beq.n	80013b6 <process_modbus_request+0x652>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4a3c      	ldr	r2, [pc, #240]	@ (800144c <process_modbus_request+0x6e8>)
 800135c:	461c      	mov	r4, r3
 800135e:	4615      	mov	r5, r2
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001368:	6020      	str	r0, [r4, #0]
 800136a:	3404      	adds	r4, #4
 800136c:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 800136e:	f997 4495 	ldrsb.w	r4, [r7, #1173]	@ 0x495
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff2a 	bl	80001d0 <strlen>
 800137c:	4602      	mov	r2, r0
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4413      	add	r3, r2
 8001384:	220a      	movs	r2, #10
 8001386:	4619      	mov	r1, r3
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff fbad 	bl	8000ae8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	4829      	ldr	r0, [pc, #164]	@ (800143c <process_modbus_request+0x6d8>)
 8001396:	f7ff fb2d 	bl	80009f4 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 800139a:	f997 3495 	ldrsb.w	r3, [r7, #1173]	@ 0x495
 800139e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a2:	d106      	bne.n	80013b2 <process_modbus_request+0x64e>
            tcp_output(tpcb);
 80013a4:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80013a8:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	f014 fb6f 	bl	8015a90 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 80013b2:	2300      	movs	r3, #0
 80013b4:	e038      	b.n	8001428 <process_modbus_request+0x6c4>
    }
    
    err_t output_err = tcp_output(tpcb);
 80013b6:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80013ba:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f014 fb66 	bl	8015a90 <tcp_output>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 3494 	strb.w	r3, [r7, #1172]	@ 0x494
    if (output_err != ERR_OK) {
 80013ca:	f997 3494 	ldrsb.w	r3, [r7, #1172]	@ 0x494
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d025      	beq.n	800141e <process_modbus_request+0x6ba>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001450 <process_modbus_request+0x6ec>)
 80013d8:	461c      	mov	r4, r3
 80013da:	4615      	mov	r5, r2
 80013dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013e4:	6020      	str	r0, [r4, #0]
 80013e6:	3404      	adds	r4, #4
 80013e8:	8021      	strh	r1, [r4, #0]
 80013ea:	3402      	adds	r4, #2
 80013ec:	0c0b      	lsrs	r3, r1, #16
 80013ee:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 80013f0:	f997 4494 	ldrsb.w	r4, [r7, #1172]	@ 0x494
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe fee9 	bl	80001d0 <strlen>
 80013fe:	4602      	mov	r2, r0
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4413      	add	r3, r2
 8001406:	220a      	movs	r2, #10
 8001408:	4619      	mov	r1, r3
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff fb6c 	bl	8000ae8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	4809      	ldr	r0, [pc, #36]	@ (800143c <process_modbus_request+0x6d8>)
 8001418:	f7ff faec 	bl	80009f4 <cdc_debug_log>
 800141c:	e003      	b.n	8001426 <process_modbus_request+0x6c2>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <process_modbus_request+0x6f0>)
 8001420:	4806      	ldr	r0, [pc, #24]	@ (800143c <process_modbus_request+0x6d8>)
 8001422:	f7ff fae7 	bl	80009f4 <cdc_debug_log>
    }
    
    return ERR_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	f507 6797 	add.w	r7, r7, #1208	@ 0x4b8
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	2000047c 	.word	0x2000047c
 8001438:	0801b864 	.word	0x0801b864
 800143c:	0801b7a0 	.word	0x0801b7a0
 8001440:	0801b874 	.word	0x0801b874
 8001444:	0801b890 	.word	0x0801b890
 8001448:	0801b8a0 	.word	0x0801b8a0
 800144c:	0801b8bc 	.word	0x0801b8bc
 8001450:	0801b8d4 	.word	0x0801b8d4
 8001454:	0801b8ec 	.word	0x0801b8ec

08001458 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b0ac      	sub	sp, #176	@ 0xb0
 800145c:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001464:	e00a      	b.n	800147c <modbus_tcp_init+0x24>
        holding_regs[i] = 0;
 8001466:	4a8f      	ldr	r2, [pc, #572]	@ (80016a4 <modbus_tcp_init+0x24c>)
 8001468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800146c:	2100      	movs	r1, #0
 800146e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 8001472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001476:	3301      	adds	r3, #1
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800147c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001480:	2b63      	cmp	r3, #99	@ 0x63
 8001482:	ddf0      	ble.n	8001466 <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8001484:	4988      	ldr	r1, [pc, #544]	@ (80016a8 <modbus_tcp_init+0x250>)
 8001486:	4889      	ldr	r0, [pc, #548]	@ (80016ac <modbus_tcp_init+0x254>)
 8001488:	f7ff fab4 	bl	80009f4 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001492:	e09f      	b.n	80015d4 <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8001494:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001498:	4a85      	ldr	r2, [pc, #532]	@ (80016b0 <modbus_tcp_init+0x258>)
 800149a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149e:	6018      	str	r0, [r3, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 80014a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fe91 	bl	80001d0 <strlen>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014b4:	4413      	add	r3, r2
 80014b6:	220a      	movs	r2, #10
 80014b8:	4619      	mov	r1, r3
 80014ba:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80014be:	f7ff fb13 	bl	8000ae8 <int_to_str>
        strcat(reg_info, "]=0x");
 80014c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fe82 	bl	80001d0 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014d4:	4413      	add	r3, r2
 80014d6:	4a77      	ldr	r2, [pc, #476]	@ (80016b4 <modbus_tcp_init+0x25c>)
 80014d8:	6810      	ldr	r0, [r2, #0]
 80014da:	6018      	str	r0, [r3, #0]
 80014dc:	7912      	ldrb	r2, [r2, #4]
 80014de:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 80014e0:	4a70      	ldr	r2, [pc, #448]	@ (80016a4 <modbus_tcp_init+0x24c>)
 80014e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 80014f4:	2303      	movs	r3, #3
 80014f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80014fa:	e026      	b.n	800154a <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 80014fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa42 f303 	asr.w	r3, r2, r3
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8001512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001516:	2b09      	cmp	r3, #9
 8001518:	dc05      	bgt.n	8001526 <modbus_tcp_init+0xce>
 800151a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3330      	adds	r3, #48	@ 0x30
 8001522:	b2db      	uxtb	r3, r3
 8001524:	e004      	b.n	8001530 <modbus_tcp_init+0xd8>
 8001526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800152a:	b2db      	uxtb	r3, r3
 800152c:	3337      	adds	r3, #55	@ 0x37
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001534:	f1c2 0203 	rsb	r2, r2, #3
 8001538:	32b0      	adds	r2, #176	@ 0xb0
 800153a:	443a      	add	r2, r7
 800153c:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8001540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001544:	3b01      	subs	r3, #1
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800154a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800154e:	2b00      	cmp	r3, #0
 8001550:	dad4      	bge.n	80014fc <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 8001552:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001556:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f019 f852 	bl	801a606 <strcat>
        strcat(reg_info, " (");
 8001562:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe32 	bl	80001d0 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001574:	4413      	add	r3, r2
 8001576:	4a50      	ldr	r2, [pc, #320]	@ (80016b8 <modbus_tcp_init+0x260>)
 8001578:	8811      	ldrh	r1, [r2, #0]
 800157a:	7892      	ldrb	r2, [r2, #2]
 800157c:	8019      	strh	r1, [r3, #0]
 800157e:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8001580:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8001584:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe21 	bl	80001d0 <strlen>
 800158e:	4602      	mov	r2, r0
 8001590:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001594:	4413      	add	r3, r2
 8001596:	220a      	movs	r2, #10
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff faa4 	bl	8000ae8 <int_to_str>
        strcat(reg_info, ")");
 80015a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe13 	bl	80001d0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b2:	4413      	add	r3, r2
 80015b4:	4941      	ldr	r1, [pc, #260]	@ (80016bc <modbus_tcp_init+0x264>)
 80015b6:	461a      	mov	r2, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 80015be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c2:	4619      	mov	r1, r3
 80015c4:	4839      	ldr	r0, [pc, #228]	@ (80016ac <modbus_tcp_init+0x254>)
 80015c6:	f7ff fa15 	bl	80009f4 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 80015ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015ce:	3301      	adds	r3, #1
 80015d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80015d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015d8:	2b03      	cmp	r3, #3
 80015da:	f77f af5b 	ble.w	8001494 <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 80015de:	4938      	ldr	r1, [pc, #224]	@ (80016c0 <modbus_tcp_init+0x268>)
 80015e0:	4832      	ldr	r0, [pc, #200]	@ (80016ac <modbus_tcp_init+0x254>)
 80015e2:	f7ff fa07 	bl	80009f4 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 80015e6:	f010 fd67 	bl	80120b8 <tcp_new>
 80015ea:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 80015ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 80015f6:	4933      	ldr	r1, [pc, #204]	@ (80016c4 <modbus_tcp_init+0x26c>)
 80015f8:	482c      	ldr	r0, [pc, #176]	@ (80016ac <modbus_tcp_init+0x254>)
 80015fa:	f7ff f9fb 	bl	80009f4 <cdc_debug_log>
        return;
 80015fe:	e04e      	b.n	800169e <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 8001600:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001604:	4930      	ldr	r1, [pc, #192]	@ (80016c8 <modbus_tcp_init+0x270>)
 8001606:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800160a:	f00f fcaf 	bl	8010f6c <tcp_bind>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 8001614:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8001618:	2b00      	cmp	r3, #0
 800161a:	d027      	beq.n	800166c <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 800161c:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <modbus_tcp_init+0x274>)
 800161e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001628:	4618      	mov	r0, r3
 800162a:	f019 f8c6 	bl	801a7ba <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 800162e:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 8001632:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001636:	f7fe fdcb 	bl	80001d0 <strlen>
 800163a:	4602      	mov	r2, r0
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	189d      	adds	r5, r3, r2
 8001640:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 800164e:	461a      	mov	r2, r3
 8001650:	4629      	mov	r1, r5
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fa48 	bl	8000ae8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <modbus_tcp_init+0x254>)
 800165e:	f7ff f9c9 	bl	80009f4 <cdc_debug_log>
        tcp_close(tpcb);
 8001662:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001666:	f00f fb8b 	bl	8010d80 <tcp_close>
 800166a:	e018      	b.n	800169e <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 800166c:	21ff      	movs	r1, #255	@ 0xff
 800166e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001672:	f00f fd33 	bl	80110dc <tcp_listen_with_backlog>
 8001676:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 800167a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d104      	bne.n	800168c <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 8001682:	4913      	ldr	r1, [pc, #76]	@ (80016d0 <modbus_tcp_init+0x278>)
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <modbus_tcp_init+0x254>)
 8001686:	f7ff f9b5 	bl	80009f4 <cdc_debug_log>
        return;
 800168a:	e008      	b.n	800169e <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 800168c:	4911      	ldr	r1, [pc, #68]	@ (80016d4 <modbus_tcp_init+0x27c>)
 800168e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001692:	f010 fd7f 	bl	8012194 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8001696:	4910      	ldr	r1, [pc, #64]	@ (80016d8 <modbus_tcp_init+0x280>)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <modbus_tcp_init+0x254>)
 800169a:	f7ff f9ab 	bl	80009f4 <cdc_debug_log>
}
 800169e:	37b0      	adds	r7, #176	@ 0xb0
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	2000047c 	.word	0x2000047c
 80016a8:	0801b904 	.word	0x0801b904
 80016ac:	0801b7a0 	.word	0x0801b7a0
 80016b0:	0801b928 	.word	0x0801b928
 80016b4:	0801b930 	.word	0x0801b930
 80016b8:	0801b938 	.word	0x0801b938
 80016bc:	0801b93c 	.word	0x0801b93c
 80016c0:	0801b940 	.word	0x0801b940
 80016c4:	0801b964 	.word	0x0801b964
 80016c8:	0801f534 	.word	0x0801f534
 80016cc:	0801b980 	.word	0x0801b980
 80016d0:	0801b994 	.word	0x0801b994
 80016d4:	080017ad 	.word	0x080017ad
 80016d8:	0801b9b8 	.word	0x0801b9b8

080016dc <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b08f      	sub	sp, #60	@ 0x3c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4a17      	ldr	r2, [pc, #92]	@ (800174c <modbus_tcp_sent+0x70>)
 80016f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f2:	c303      	stmia	r3!, {r0, r1}
 80016f4:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 80016f6:	88fc      	ldrh	r4, [r7, #6]
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd67 	bl	80001d0 <strlen>
 8001702:	4602      	mov	r2, r0
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4413      	add	r3, r2
 800170a:	220a      	movs	r2, #10
 800170c:	4619      	mov	r1, r3
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff f9ea 	bl	8000ae8 <int_to_str>
    strcat(sent_msg, " bytes");
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4413      	add	r3, r2
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <modbus_tcp_sent+0x74>)
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	6018      	str	r0, [r3, #0]
 800172e:	8891      	ldrh	r1, [r2, #4]
 8001730:	7992      	ldrb	r2, [r2, #6]
 8001732:	8099      	strh	r1, [r3, #4]
 8001734:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <modbus_tcp_sent+0x78>)
 800173e:	f7ff f959 	bl	80009f4 <cdc_debug_log>
    return ERR_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	373c      	adds	r7, #60	@ 0x3c
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	0801b9d8 	.word	0x0801b9d8
 8001750:	0801b9e4 	.word	0x0801b9e4
 8001754:	0801b7a0 	.word	0x0801b7a0

08001758 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b08d      	sub	sp, #52	@ 0x34
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <modbus_tcp_error+0x4c>)
 800176a:	ca07      	ldmia	r2, {r0, r1, r2}
 800176c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8001770:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd29 	bl	80001d0 <strlen>
 800177e:	4602      	mov	r2, r0
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4413      	add	r3, r2
 8001786:	220a      	movs	r2, #10
 8001788:	4619      	mov	r1, r3
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff f9ac 	bl	8000ae8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4619      	mov	r1, r3
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <modbus_tcp_error+0x50>)
 8001798:	f7ff f92c 	bl	80009f4 <cdc_debug_log>
}
 800179c:	bf00      	nop
 800179e:	3734      	adds	r7, #52	@ 0x34
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	0801b9ec 	.word	0x0801b9ec
 80017a8:	0801b7a0 	.word	0x0801b7a0

080017ac <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <modbus_tcp_accept+0x1c>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 80017c8:	4911      	ldr	r1, [pc, #68]	@ (8001810 <modbus_tcp_accept+0x64>)
 80017ca:	4812      	ldr	r0, [pc, #72]	@ (8001814 <modbus_tcp_accept+0x68>)
 80017cc:	f7ff f912 	bl	80009f4 <cdc_debug_log>
        return err;
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	e017      	b.n	8001806 <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 80017d6:	4910      	ldr	r1, [pc, #64]	@ (8001818 <modbus_tcp_accept+0x6c>)
 80017d8:	480e      	ldr	r0, [pc, #56]	@ (8001814 <modbus_tcp_accept+0x68>)
 80017da:	f7ff f90b 	bl	80009f4 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 80017de:	2101      	movs	r1, #1
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	f010 fa77 	bl	8011cd4 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 80017e6:	490d      	ldr	r1, [pc, #52]	@ (800181c <modbus_tcp_accept+0x70>)
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f010 fc6d 	bl	80120c8 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 80017ee:	490c      	ldr	r1, [pc, #48]	@ (8001820 <modbus_tcp_accept+0x74>)
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f010 fc8b 	bl	801210c <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 80017f6:	490b      	ldr	r1, [pc, #44]	@ (8001824 <modbus_tcp_accept+0x78>)
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f010 fca9 	bl	8012150 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 80017fe:	68b8      	ldr	r0, [r7, #8]
 8001800:	f014 ffae 	bl	8016760 <tcp_keepalive>
    
    return ERR_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0801b9f8 	.word	0x0801b9f8
 8001814:	0801b7a0 	.word	0x0801b7a0
 8001818:	0801ba08 	.word	0x0801ba08
 800181c:	08001829 	.word	0x08001829
 8001820:	080016dd 	.word	0x080016dd
 8001824:	08001759 	.word	0x08001759

08001828 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 800182e:	af00      	add	r7, sp, #0
 8001830:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8001834:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8001838:	6020      	str	r0, [r4, #0]
 800183a:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 800183e:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 8001842:	6001      	str	r1, [r0, #0]
 8001844:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8001848:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800184c:	600a      	str	r2, [r1, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001854:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8001858:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 800185a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800185e:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8001862:	f993 3000 	ldrsb.w	r3, [r3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d018      	beq.n	800189c <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 800186a:	49bf      	ldr	r1, [pc, #764]	@ (8001b68 <modbus_tcp_recv+0x340>)
 800186c:	48bf      	ldr	r0, [pc, #764]	@ (8001b6c <modbus_tcp_recv+0x344>)
 800186e:	f7ff f8c1 	bl	80009f4 <cdc_debug_log>
        if (p != NULL) {
 8001872:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001876:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8001880:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001884:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f00e fdcf 	bl	801042c <pbuf_free>
        }
        return err;
 800188e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001892:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	e15f      	b.n	8001b5c <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 800189c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80018a0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 80018aa:	49b1      	ldr	r1, [pc, #708]	@ (8001b70 <modbus_tcp_recv+0x348>)
 80018ac:	48af      	ldr	r0, [pc, #700]	@ (8001b6c <modbus_tcp_recv+0x344>)
 80018ae:	f7ff f8a1 	bl	80009f4 <cdc_debug_log>
        tcp_close(tpcb);
 80018b2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80018b6:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	f00f fa60 	bl	8010d80 <tcp_close>
        return ERR_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e14b      	b.n	8001b5c <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 80018c4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80018c8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	891b      	ldrh	r3, [r3, #8]
 80018d0:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 80018d4:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80018d8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80018dc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80018e0:	4611      	mov	r1, r2
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f00f fd10 	bl	8011308 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 80018e8:	4ba2      	ldr	r3, [pc, #648]	@ (8001b74 <modbus_tcp_recv+0x34c>)
 80018ea:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 80018ee:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80018f2:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f018 ff5f 	bl	801a7ba <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 80018fc:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 8001900:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8001904:	f7fe fc64 	bl	80001d0 <strlen>
 8001908:	4602      	mov	r2, r0
 800190a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800190e:	189d      	adds	r5, r3, r2
 8001910:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8001914:	f7fe fc5c 	bl	80001d0 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800191e:	461a      	mov	r2, r3
 8001920:	4629      	mov	r1, r5
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff f8e0 	bl	8000ae8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8001928:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800192c:	4619      	mov	r1, r3
 800192e:	488f      	ldr	r0, [pc, #572]	@ (8001b6c <modbus_tcp_recv+0x344>)
 8001930:	f7ff f860 	bl	80009f4 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8001934:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8001938:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800193c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001940:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8001944:	2300      	movs	r3, #0
 8001946:	6800      	ldr	r0, [r0, #0]
 8001948:	f00e ff66 	bl	8010818 <pbuf_copy_partial>
 800194c:	4603      	mov	r3, r0
 800194e:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 8001952:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001956:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f00e fd66 	bl	801042c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8001960:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8001964:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f970 	bl	8000c50 <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8001970:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8001974:	2b07      	cmp	r3, #7
 8001976:	d806      	bhi.n	8001986 <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8001978:	497f      	ldr	r1, [pc, #508]	@ (8001b78 <modbus_tcp_recv+0x350>)
 800197a:	487c      	ldr	r0, [pc, #496]	@ (8001b6c <modbus_tcp_recv+0x344>)
 800197c:	f7ff f83a 	bl	80009f4 <cdc_debug_log>
        return ERR_VAL;
 8001980:	f06f 0305 	mvn.w	r3, #5
 8001984:	e0ea      	b.n	8001b5c <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8001992:	e092      	b.n	8001aba <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 8001994:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8001998:	1d5a      	adds	r2, r3, #5
 800199a:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800199e:	429a      	cmp	r2, r3
 80019a0:	db04      	blt.n	80019ac <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 80019a2:	4976      	ldr	r1, [pc, #472]	@ (8001b7c <modbus_tcp_recv+0x354>)
 80019a4:	4871      	ldr	r0, [pc, #452]	@ (8001b6c <modbus_tcp_recv+0x344>)
 80019a6:	f7ff f825 	bl	80009f4 <cdc_debug_log>
            break;
 80019aa:	e093      	b.n	8001ad4 <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 80019ac:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80019b0:	3304      	adds	r3, #4
 80019b2:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 80019b6:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80019c6:	3305      	adds	r3, #5
 80019c8:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 80019cc:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 80019d0:	5ccb      	ldrb	r3, [r1, r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 80019dc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80019e0:	3306      	adds	r3, #6
 80019e2:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 80019e6:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80019ea:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 80019ee:	441a      	add	r2, r3
 80019f0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dd21      	ble.n	8001a3c <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4a60      	ldr	r2, [pc, #384]	@ (8001b80 <modbus_tcp_recv+0x358>)
 80019fe:	461c      	mov	r4, r3
 8001a00:	4615      	mov	r5, r2
 8001a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 8001a0e:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fbda 	bl	80001d0 <strlen>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4413      	add	r3, r2
 8001a24:	220a      	movs	r2, #10
 8001a26:	4619      	mov	r1, r3
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff f85d 	bl	8000ae8 <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4619      	mov	r1, r3
 8001a34:	484d      	ldr	r0, [pc, #308]	@ (8001b6c <modbus_tcp_recv+0x344>)
 8001a36:	f7fe ffdd 	bl	80009f4 <cdc_debug_log>
            break;
 8001a3a:	e04b      	b.n	8001ad4 <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4a50      	ldr	r2, [pc, #320]	@ (8001b84 <modbus_tcp_recv+0x35c>)
 8001a42:	461c      	mov	r4, r3
 8001a44:	4615      	mov	r5, r2
 8001a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 8001a4e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8001a52:	1c5c      	adds	r4, r3, #1
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fbb9 	bl	80001d0 <strlen>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4413      	add	r3, r2
 8001a66:	220a      	movs	r2, #10
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff f83c 	bl	8000ae8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	483d      	ldr	r0, [pc, #244]	@ (8001b6c <modbus_tcp_recv+0x344>)
 8001a78:	f7fe ffbc 	bl	80009f4 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 8001a7c:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8001a80:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001a84:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001a88:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7ff f969 	bl	8000d64 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 8001a92:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8001a96:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 8001aa0:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 8001aaa:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d103      	bne.n	8001aba <modbus_tcp_recv+0x292>
 8001ab2:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d00b      	beq.n	8001ad2 <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8001aba:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8001abe:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d206      	bcs.n	8001ad4 <modbus_tcp_recv+0x2ac>
 8001ac6:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	f67f af62 	bls.w	8001994 <modbus_tcp_recv+0x16c>
 8001ad0:	e000      	b.n	8001ad4 <modbus_tcp_recv+0x2ac>
            break;
 8001ad2:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 8001ad4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b88 <modbus_tcp_recv+0x360>)
 8001ada:	ca07      	ldmia	r2, {r0, r1, r2}
 8001adc:	c303      	stmia	r3!, {r0, r1}
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	0c12      	lsrs	r2, r2, #16
 8001ae4:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 8001ae6:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 8001aea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb6e 	bl	80001d0 <strlen>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001afa:	4413      	add	r3, r2
 8001afc:	220a      	movs	r2, #10
 8001afe:	4619      	mov	r1, r3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7fe fff1 	bl	8000ae8 <int_to_str>
    const char* frames_suffix = " frames from ";
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <modbus_tcp_recv+0x364>)
 8001b08:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 8001b0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b10:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f018 fd76 	bl	801a606 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 8001b1a:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 8001b1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb54 	bl	80001d0 <strlen>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b2e:	4413      	add	r3, r2
 8001b30:	220a      	movs	r2, #10
 8001b32:	4619      	mov	r1, r3
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7fe ffd7 	bl	8000ae8 <int_to_str>
    const char* bytes_suffix = " bytes";
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <modbus_tcp_recv+0x368>)
 8001b3c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 8001b40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b44:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f018 fd5c 	bl	801a606 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 8001b4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <modbus_tcp_recv+0x344>)
 8001b56:	f7fe ff4d 	bl	80009f4 <cdc_debug_log>

    return ERR_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0801ba1c 	.word	0x0801ba1c
 8001b6c:	0801b7a0 	.word	0x0801b7a0
 8001b70:	0801ba2c 	.word	0x0801ba2c
 8001b74:	0801ba40 	.word	0x0801ba40
 8001b78:	0801ba54 	.word	0x0801ba54
 8001b7c:	0801ba64 	.word	0x0801ba64
 8001b80:	0801ba7c 	.word	0x0801ba7c
 8001b84:	0801ba98 	.word	0x0801ba98
 8001b88:	0801baac 	.word	0x0801baac
 8001b8c:	0801bab8 	.word	0x0801bab8
 8001b90:	0801b9e4 	.word	0x0801b9e4

08001b94 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b092      	sub	sp, #72	@ 0x48
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a84      	ldr	r2, [pc, #528]	@ (8001dc4 <HAL_ETH_MspInit+0x230>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	f040 8101 	bne.w	8001dba <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bbc:	4b82      	ldr	r3, [pc, #520]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	4a81      	ldr	r2, [pc, #516]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be4:	4b78      	ldr	r3, [pc, #480]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf4:	4b74      	ldr	r3, [pc, #464]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	4a73      	ldr	r2, [pc, #460]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001bfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c00:	4b71      	ldr	r3, [pc, #452]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c10:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	4a6c      	ldr	r2, [pc, #432]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	4a65      	ldr	r2, [pc, #404]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c38:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c40:	623b      	str	r3, [r7, #32]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c54:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	4a57      	ldr	r2, [pc, #348]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c70:	4b55      	ldr	r3, [pc, #340]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	4a50      	ldr	r2, [pc, #320]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4a49      	ldr	r2, [pc, #292]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca8:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	4b43      	ldr	r3, [pc, #268]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	4a42      	ldr	r2, [pc, #264]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc4:	4b40      	ldr	r3, [pc, #256]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce0:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_ETH_MspInit+0x234>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cec:	2302      	movs	r3, #2
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cfc:	230b      	movs	r3, #11
 8001cfe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d04:	4619      	mov	r1, r3
 8001d06:	4831      	ldr	r0, [pc, #196]	@ (8001dcc <HAL_ETH_MspInit+0x238>)
 8001d08:	f002 f92e 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001d0c:	2386      	movs	r3, #134	@ 0x86
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d1c:	230b      	movs	r3, #11
 8001d1e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d24:	4619      	mov	r1, r3
 8001d26:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <HAL_ETH_MspInit+0x23c>)
 8001d28:	f002 f91e 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d2c:	2330      	movs	r3, #48	@ 0x30
 8001d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d44:	4619      	mov	r1, r3
 8001d46:	4821      	ldr	r0, [pc, #132]	@ (8001dcc <HAL_ETH_MspInit+0x238>)
 8001d48:	f002 f90e 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001d4c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d5e:	230b      	movs	r3, #11
 8001d60:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d66:	4619      	mov	r1, r3
 8001d68:	481a      	ldr	r0, [pc, #104]	@ (8001dd4 <HAL_ETH_MspInit+0x240>)
 8001d6a:	f002 f8fd 	bl	8003f68 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d82:	4619      	mov	r1, r3
 8001d84:	4814      	ldr	r0, [pc, #80]	@ (8001dd8 <HAL_ETH_MspInit+0x244>)
 8001d86:	f002 f8ef 	bl	8003f68 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2108      	movs	r1, #8
 8001d8e:	4812      	ldr	r0, [pc, #72]	@ (8001dd8 <HAL_ETH_MspInit+0x244>)
 8001d90:	f002 fa86 	bl	80042a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f000 fdad 	bl	80028f4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2108      	movs	r1, #8
 8001d9e:	480e      	ldr	r0, [pc, #56]	@ (8001dd8 <HAL_ETH_MspInit+0x244>)
 8001da0:	f002 fa7e 	bl	80042a0 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001da4:	2064      	movs	r0, #100	@ 0x64
 8001da6:	f000 fda5 	bl	80028f4 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2106      	movs	r1, #6
 8001dae:	203d      	movs	r0, #61	@ 0x3d
 8001db0:	f000 fe7c 	bl	8002aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001db4:	203d      	movs	r0, #61	@ 0x3d
 8001db6:	f000 fe95 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3748      	adds	r7, #72	@ 0x48
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40028000 	.word	0x40028000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40020c00 	.word	0x40020c00

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_MspInit+0x54>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <HAL_MspInit+0x54>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_MspInit+0x54>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_MspInit+0x54>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_MspInit+0x54>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <HAL_MspInit+0x54>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	f06f 0001 	mvn.w	r0, #1
 8001e22:	f000 fe43 	bl	8002aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	@ 0x38
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_InitTick+0xe4>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a32      	ldr	r2, [pc, #200]	@ (8001f18 <HAL_InitTick+0xe4>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e54:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_InitTick+0xe4>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e60:	f107 0210 	add.w	r2, r7, #16
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f8dc 	bl	8006028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e7a:	f004 f8ad 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e80:	e004      	b.n	8001e8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e82:	f004 f8a9 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8001e86:	4603      	mov	r3, r0
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <HAL_InitTick+0xe8>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	3b01      	subs	r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_InitTick+0xec>)
 8001e9c:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_InitTick+0xf0>)
 8001e9e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <HAL_InitTick+0xec>)
 8001ea2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ea6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_InitTick+0xec>)
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_InitTick+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_InitTick+0xec>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_InitTick+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001ec0:	4817      	ldr	r0, [pc, #92]	@ (8001f20 <HAL_InitTick+0xec>)
 8001ec2:	f004 f92b 	bl	800611c <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d11b      	bne.n	8001f0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001ed4:	4812      	ldr	r0, [pc, #72]	@ (8001f20 <HAL_InitTick+0xec>)
 8001ed6:	f004 f971 	bl	80061bc <HAL_TIM_Base_Start_IT>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ee8:	202d      	movs	r0, #45	@ 0x2d
 8001eea:	f000 fdfb 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d808      	bhi.n	8001f06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	202d      	movs	r0, #45	@ 0x2d
 8001efa:	f000 fdd7 	bl	8002aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_InitTick+0xf4>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e002      	b.n	8001f0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3738      	adds	r7, #56	@ 0x38
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	20000544 	.word	0x20000544
 8001f24:	40002000 	.word	0x40002000
 8001f28:	20000004 	.word	0x20000004

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <NMI_Handler+0x4>

08001f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <MemManage_Handler+0x4>

08001f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f6a:	f004 f997 	bl	800629c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000544 	.word	0x20000544

08001f78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <TIM7_IRQHandler+0x10>)
 8001f7e:	f004 f98d 	bl	800629c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000590 	.word	0x20000590

08001f8c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b0ae      	sub	sp, #184	@ 0xb8
 8001f90:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t dma_status = ETH->DMASR;
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <ETH_IRQHandler+0xa4>)
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), 
           "ETH_IRQ: DMASR=0x%08lX, NIS=%lu, AIS=%lu, RS=%lu, TS=%lu", 
           dma_status,
           (dma_status & ETH_DMASR_NIS) ? 1UL : 0UL,  // Normal interrupt
 8001f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fa2:	0c1b      	lsrs	r3, r3, #16
  snprintf(debug_msg, sizeof(debug_msg), 
 8001fa4:	f003 0301 	and.w	r3, r3, #1
           (dma_status & ETH_DMASR_AIS) ? 1UL : 0UL,  // Abnormal interrupt  
 8001fa8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001fac:	0bd2      	lsrs	r2, r2, #15
  snprintf(debug_msg, sizeof(debug_msg), 
 8001fae:	f002 0201 	and.w	r2, r2, #1
           (dma_status & ETH_DMASR_RS) ? 1UL : 0UL,   // Receive status
 8001fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fb6:	0989      	lsrs	r1, r1, #6
  snprintf(debug_msg, sizeof(debug_msg), 
 8001fb8:	f001 0101 	and.w	r1, r1, #1
 8001fbc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001fc0:	f000 0001 	and.w	r0, r0, #1
 8001fc4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001fc8:	9003      	str	r0, [sp, #12]
 8001fca:	9102      	str	r1, [sp, #8]
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <ETH_IRQHandler+0xa8>)
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f018 fa69 	bl	801a4b0 <sniprintf>
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8001fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f017 fcee 	bl	80199d4 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ff8:	480f      	ldr	r0, [pc, #60]	@ (8002038 <ETH_IRQHandler+0xac>)
 8001ffa:	f001 f90f 	bl	800321c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <ETH_IRQHandler+0xb0>)
 8002000:	463c      	mov	r4, r7
 8002002:	461d      	mov	r5, r3
 8002004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	8023      	strh	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
 8002010:	463b      	mov	r3, r7
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f8dc 	bl	80001d0 <strlen>
 8002018:	4603      	mov	r3, r0
 800201a:	b29a      	uxth	r2, r3
 800201c:	463b      	mov	r3, r7
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f017 fcd7 	bl	80199d4 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	37a8      	adds	r7, #168	@ 0xa8
 800202a:	46bd      	mov	sp, r7
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	bf00      	nop
 8002030:	40028000 	.word	0x40028000
 8002034:	0801bac8 	.word	0x0801bac8
 8002038:	200051cc 	.word	0x200051cc
 800203c:	0801bb04 	.word	0x0801bb04

08002040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <OTG_FS_IRQHandler+0x10>)
 8002046:	f002 fa88 	bl	800455a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000ddbc 	.word	0x2000ddbc

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <_kill+0x20>)
 8002070:	2216      	movs	r2, #22
 8002072:	601a      	str	r2, [r3, #0]
  return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	2000e5fc 	.word	0x2000e5fc

08002088 <_exit>:

void _exit (int status)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ffe5 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 800209a:	bf00      	nop
 800209c:	e7fd      	b.n	800209a <_exit+0x12>

0800209e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e00a      	b.n	80020c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b0:	f3af 8000 	nop.w
 80020b4:	4601      	mov	r1, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	b2ca      	uxtb	r2, r1
 80020be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dbf0      	blt.n	80020b0 <_read+0x12>
  }

  return len;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e009      	b.n	80020fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	60ba      	str	r2, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf1      	blt.n	80020ea <_write+0x12>
  }
  return len;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_close>:

int _close(int file)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	605a      	str	r2, [r3, #4]
  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_isatty>:

int _isatty(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d205      	bcs.n	80021b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <_sbrk+0x6c>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	20020000 	.word	0x20020000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	2000058c 	.word	0x2000058c
 80021e0:	2000e620 	.word	0x2000e620
 80021e4:	2000e5fc 	.word	0x2000e5fc

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <SystemInit+0x20>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <SystemInit+0x20>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002212:	463b      	mov	r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <MX_TIM7_Init+0x64>)
 800221c:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <MX_TIM7_Init+0x68>)
 800221e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <MX_TIM7_Init+0x64>)
 8002222:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002226:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <MX_TIM7_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <MX_TIM7_Init+0x64>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002236:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <MX_TIM7_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <MX_TIM7_Init+0x64>)
 800223e:	f003 ff6d 	bl	800611c <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002248:	f7fe fbce 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	@ (8002270 <MX_TIM7_Init+0x64>)
 800225a:	f004 f9dd 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002264:	f7fe fbc0 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000590 	.word	0x20000590
 8002274:	40001400 	.word	0x40001400

08002278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0e      	ldr	r2, [pc, #56]	@ (80022c0 <HAL_TIM_Base_MspInit+0x48>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d115      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a0c      	ldr	r2, [pc, #48]	@ (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2105      	movs	r1, #5
 80022aa:	2037      	movs	r0, #55	@ 0x37
 80022ac:	f000 fbfe 	bl	8002aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022b0:	2037      	movs	r0, #55	@ 0x37
 80022b2:	f000 fc17 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40001400 	.word	0x40001400
 80022c4:	40023800 	.word	0x40023800

080022c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <MX_USART1_UART_Init+0x50>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_USART1_UART_Init+0x4c>)
 8002300:	f004 fa1a 	bl	8006738 <HAL_UART_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800230a:	f7fe fb6d 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200005d8 	.word	0x200005d8
 8002318:	40011000 	.word	0x40011000

0800231c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002322:	4a12      	ldr	r2, [pc, #72]	@ (800236c <MX_USART6_UART_Init+0x50>)
 8002324:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002328:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800232c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <MX_USART6_UART_Init+0x4c>)
 8002354:	f004 f9f0 	bl	8006738 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800235e:	f7fe fb43 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000620 	.word	0x20000620
 800236c:	40011400 	.word	0x40011400

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	@ 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a32      	ldr	r2, [pc, #200]	@ (8002458 <HAL_UART_MspInit+0xe8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d12d      	bne.n	80023ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_UART_MspInit+0xec>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a30      	ldr	r2, [pc, #192]	@ (800245c <HAL_UART_MspInit+0xec>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_UART_MspInit+0xec>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_UART_MspInit+0xec>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a29      	ldr	r2, [pc, #164]	@ (800245c <HAL_UART_MspInit+0xec>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_UART_MspInit+0xec>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023dc:	2307      	movs	r3, #7
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	481e      	ldr	r0, [pc, #120]	@ (8002460 <HAL_UART_MspInit+0xf0>)
 80023e8:	f001 fdbe 	bl	8003f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80023ec:	e030      	b.n	8002450 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002464 <HAL_UART_MspInit+0xf4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d12b      	bne.n	8002450 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <HAL_UART_MspInit+0xec>)
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	4a16      	ldr	r2, [pc, #88]	@ (800245c <HAL_UART_MspInit+0xec>)
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	6453      	str	r3, [r2, #68]	@ 0x44
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_UART_MspInit+0xec>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_UART_MspInit+0xec>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <HAL_UART_MspInit+0xec>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6313      	str	r3, [r2, #48]	@ 0x30
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_UART_MspInit+0xec>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002430:	23c0      	movs	r3, #192	@ 0xc0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002440:	2308      	movs	r3, #8
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	4807      	ldr	r0, [pc, #28]	@ (8002468 <HAL_UART_MspInit+0xf8>)
 800244c:	f001 fd8c 	bl	8003f68 <HAL_GPIO_Init>
}
 8002450:	bf00      	nop
 8002452:	3730      	adds	r7, #48	@ 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40011000 	.word	0x40011000
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000
 8002464:	40011400 	.word	0x40011400
 8002468:	40020800 	.word	0x40020800

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002470:	f7ff feba 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	@ (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f018 f967 	bl	801a76c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7fe fa0f 	bl	80008c0 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80024b0:	0801f640 	.word	0x0801f640
  ldr r2, =_sbss
 80024b4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80024b8:	2000e60c 	.word	0x2000e60c

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>

080024be <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <eth_chip_regster_bus_io+0x28>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <eth_chip_regster_bus_io+0x28>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <eth_chip_regster_bus_io+0x28>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e014      	b.n	8002516 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f107 0208 	add.w	r2, r7, #8
 8002544:	2102      	movs	r1, #2
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	4798      	blx	r3

    switch (regvalue)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b1c      	cmp	r3, #28
 800254e:	d02d      	beq.n	80025ac <eth_chip_init+0x88>
 8002550:	2b1c      	cmp	r3, #28
 8002552:	d847      	bhi.n	80025e4 <eth_chip_init+0xc0>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <eth_chip_init+0x3a>
 8002558:	2b07      	cmp	r3, #7
 800255a:	d036      	beq.n	80025ca <eth_chip_init+0xa6>
 800255c:	e042      	b.n	80025e4 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f107 0208 	add.w	r2, r7, #8
 8002566:	2103      	movs	r1, #3
 8002568:	6978      	ldr	r0, [r7, #20]
 800256a:	4798      	blx	r3

            if (regvalue == 0x128)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002572:	d10e      	bne.n	8002592 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 8002574:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <eth_chip_init+0x1fc>)
 8002576:	2211      	movs	r2, #17
 8002578:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 800257a:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <eth_chip_init+0x200>)
 800257c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002580:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 8002582:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <eth_chip_init+0x204>)
 8002584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002588:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 800258a:	4b68      	ldr	r3, [pc, #416]	@ (800272c <eth_chip_init+0x208>)
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 8002590:	e028      	b.n	80025e4 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 8002592:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <eth_chip_init+0x1fc>)
 8002594:	2210      	movs	r2, #16
 8002596:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 8002598:	4b62      	ldr	r3, [pc, #392]	@ (8002724 <eth_chip_init+0x200>)
 800259a:	2222      	movs	r2, #34	@ 0x22
 800259c:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 800259e:	4b62      	ldr	r3, [pc, #392]	@ (8002728 <eth_chip_init+0x204>)
 80025a0:	2204      	movs	r2, #4
 80025a2:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 80025a4:	4b61      	ldr	r3, [pc, #388]	@ (800272c <eth_chip_init+0x208>)
 80025a6:	2203      	movs	r2, #3
 80025a8:	601a      	str	r2, [r3, #0]
            break;
 80025aa:	e01b      	b.n	80025e4 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 80025ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002720 <eth_chip_init+0x1fc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <eth_chip_init+0x200>)
 80025b4:	f242 0220 	movw	r2, #8224	@ 0x2020
 80025b8:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 80025ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002728 <eth_chip_init+0x204>)
 80025bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025c0:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 80025c2:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <eth_chip_init+0x208>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
            break;
 80025c8:	e00c      	b.n	80025e4 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 80025ca:	4b55      	ldr	r3, [pc, #340]	@ (8002720 <eth_chip_init+0x1fc>)
 80025cc:	221f      	movs	r2, #31
 80025ce:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 80025d0:	4b54      	ldr	r3, [pc, #336]	@ (8002724 <eth_chip_init+0x200>)
 80025d2:	2204      	movs	r2, #4
 80025d4:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 80025d6:	4b54      	ldr	r3, [pc, #336]	@ (8002728 <eth_chip_init+0x204>)
 80025d8:	2210      	movs	r2, #16
 80025da:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <eth_chip_init+0x208>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
            break;
 80025e2:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d17e      	bne.n	80026ea <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e01e      	b.n	8002644 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4a45      	ldr	r2, [pc, #276]	@ (8002720 <eth_chip_init+0x1fc>)
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	4611      	mov	r1, r2
 8002610:	f107 0208 	add.w	r2, r7, #8
 8002614:	6978      	ldr	r0, [r7, #20]
 8002616:	4798      	blx	r3
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	da03      	bge.n	8002626 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 800261e:	f06f 0304 	mvn.w	r3, #4
 8002622:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8002624:	e00b      	b.n	800263e <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	429a      	cmp	r2, r3
 8002630:	d105      	bne.n	800263e <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
                break;
 800263c:	e005      	b.n	800264a <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b1f      	cmp	r3, #31
 8002648:	d9dd      	bls.n	8002606 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b1f      	cmp	r3, #31
 8002650:	d902      	bls.n	8002658 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 8002652:	f06f 0302 	mvn.w	r3, #2
 8002656:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d145      	bne.n	80026ea <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6810      	ldr	r0, [r2, #0]
 8002666:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800266a:	2100      	movs	r1, #0
 800266c:	4798      	blx	r3
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	db37      	blt.n	80026e4 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6810      	ldr	r0, [r2, #0]
 800267c:	f107 0208 	add.w	r2, r7, #8
 8002680:	2100      	movs	r1, #0
 8002682:	4798      	blx	r3
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	db28      	blt.n	80026dc <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8002694:	e01c      	b.n	80026d0 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4798      	blx	r3
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026a8:	d80e      	bhi.n	80026c8 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6810      	ldr	r0, [r2, #0]
 80026b2:	f107 0208 	add.w	r2, r7, #8
 80026b6:	2100      	movs	r1, #0
 80026b8:	4798      	blx	r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da07      	bge.n	80026d0 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 80026c0:	f06f 0304 	mvn.w	r3, #4
 80026c4:	613b      	str	r3, [r7, #16]
                                break;
 80026c6:	e010      	b.n	80026ea <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 80026c8:	f06f 0301 	mvn.w	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
                            break;
 80026ce:	e00c      	b.n	80026ea <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1dd      	bne.n	8002696 <eth_chip_init+0x172>
 80026da:	e006      	b.n	80026ea <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 80026dc:	f06f 0304 	mvn.w	r3, #4
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e002      	b.n	80026ea <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 80026e4:	f06f 0303 	mvn.w	r3, #3
 80026e8:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d112      	bne.n	8002716 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4798      	blx	r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 80026fa:	bf00      	nop
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4798      	blx	r3
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800270e:	d9f5      	bls.n	80026fc <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	605a      	str	r2, [r3, #4]
    }

    return status;
 8002716:	693b      	ldr	r3, [r7, #16]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000066c 	.word	0x2000066c
 8002724:	2000066e 	.word	0x2000066e
 8002728:	20000670 	.word	0x20000670
 800272c:	20000668 	.word	0x20000668

08002730 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6810      	ldr	r0, [r2, #0]
 8002748:	f107 0208 	add.w	r2, r7, #8
 800274c:	2100      	movs	r1, #0
 800274e:	4798      	blx	r3
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	db11      	blt.n	800277a <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800275c:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6810      	ldr	r0, [r2, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	2100      	movs	r1, #0
 800276a:	4798      	blx	r3
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	da06      	bge.n	8002780 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8002772:	f06f 0303 	mvn.w	r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e002      	b.n	8002780 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 800277a:	f06f 0304 	mvn.w	r3, #4
 800277e:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6810      	ldr	r0, [r2, #0]
 80027a2:	f107 0208 	add.w	r2, r7, #8
 80027a6:	2100      	movs	r1, #0
 80027a8:	4798      	blx	r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db11      	blt.n	80027d4 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027b6:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6810      	ldr	r0, [r2, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4798      	blx	r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da06      	bge.n	80027da <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 80027cc:	f06f 0303 	mvn.w	r3, #3
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e002      	b.n	80027da <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 80027d4:	f06f 0304 	mvn.w	r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
    }

    return status;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6810      	ldr	r0, [r2, #0]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <eth_chip_get_link_state+0x80>)
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	4611      	mov	r1, r2
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	4798      	blx	r3
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	da02      	bge.n	8002810 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 800280a:	f06f 0304 	mvn.w	r3, #4
 800280e:	e024      	b.n	800285a <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 8002810:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <eth_chip_get_link_state+0x84>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4013      	ands	r3, r2
 800281a:	4a13      	ldr	r2, [pc, #76]	@ (8002868 <eth_chip_get_link_state+0x84>)
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	d008      	beq.n	8002834 <eth_chip_get_link_state+0x50>
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <eth_chip_get_link_state+0x88>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 8002830:	2302      	movs	r3, #2
 8002832:	e012      	b.n	800285a <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <eth_chip_get_link_state+0x84>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <eth_chip_get_link_state+0x84>)
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	4293      	cmp	r3, r2
 8002844:	d001      	beq.n	800284a <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 8002846:	2303      	movs	r3, #3
 8002848:	e007      	b.n	800285a <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 8002854:	2304      	movs	r3, #4
 8002856:	e000      	b.n	800285a <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 8002858:	2305      	movs	r3, #5
    }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000066c 	.word	0x2000066c
 8002868:	2000066e 	.word	0x2000066e
 800286c:	20000670 	.word	0x20000670

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002874:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <HAL_Init+0x40>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <HAL_Init+0x40>)
 800287a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800287e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_Init+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <HAL_Init+0x40>)
 8002886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800288a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	@ (80028b0 <HAL_Init+0x40>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f8fc 	bl	8002a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	200f      	movs	r0, #15
 80028a0:	f7ff fac8 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a4:	f7ff fa9a 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000674 	.word	0x20000674

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000674 	.word	0x20000674

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000008 	.word	0x20000008

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	@ 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff4c 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abe:	f7ff ff61 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002ac2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	6978      	ldr	r0, [r7, #20]
 8002aca:	f7ff ffb1 	bl	8002a30 <NVIC_EncodePriority>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff80 	bl	80029dc <__NVIC_SetPriority>
}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff54 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e08a      	b.n	8002c28 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff f835 	bl	8001b94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <HAL_ETH_Init+0x130>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	4a3f      	ldr	r2, [pc, #252]	@ (8002c30 <HAL_ETH_Init+0x130>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <HAL_ETH_Init+0x130>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_ETH_Init+0x134>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c34 <HAL_ETH_Init+0x134>)
 8002b4c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b50:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b52:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <HAL_ETH_Init+0x134>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4936      	ldr	r1, [pc, #216]	@ (8002c34 <HAL_ETH_Init+0x134>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <HAL_ETH_Init+0x134>)
 8002b62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7ff feae 	bl	80028dc <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b82:	e011      	b.n	8002ba8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b84:	f7ff feaa 	bl	80028dc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b92:	d909      	bls.n	8002ba8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2204      	movs	r2, #4
 8002b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	22e0      	movs	r2, #224	@ 0xe0
 8002ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e03f      	b.n	8002c28 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e4      	bne.n	8002b84 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 ff16 	bl	80039ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 ffc1 	bl	8003b48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f001 f817 	bl	8003bfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 ff7f 	bl	8003ad8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002be8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bfe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c12:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2210      	movs	r2, #16
 8002c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40013800 	.word	0x40013800

08002c38 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d161      	bne.n	8002d0e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9f4 	bl	800304c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff fe41 	bl	80028f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c90:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ca8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fd3b 	bl	8003726 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0208 	orr.w	r2, r2, #8
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7ff fe13 	bl	80028f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0204 	orr.w	r2, r2, #4
 8002ce4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002cf8:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002cfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d00:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2240      	movs	r2, #64	@ 0x40
 8002d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d26:	2b40      	cmp	r3, #64	@ 0x40
 8002d28:	d170      	bne.n	8002e0c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002d44:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d4c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d64:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	f023 0302 	bic.w	r3, r3, #2
 8002d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d7c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0204 	bic.w	r2, r2, #4
 8002d8c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7ff fdac 	bl	80028f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fcbe 	bl	8003726 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f7ff fd96 	bl	80028f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e00e      	b.n	8002df4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	3212      	adds	r2, #18
 8002ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d9ed      	bls.n	8002dd6 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2210      	movs	r2, #16
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e045      	b.n	8002ec6 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d13f      	bne.n	8002ec4 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 ff41 	bl	8003cd8 <ETH_Prepare_Tx_Descriptors>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e02a      	b.n	8002ec6 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002e70:	f3bf 8f4f 	dsb	sy
}
 8002e74:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d904      	bls.n	8002e92 <HAL_ETH_Transmit_IT+0x7c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	1f1a      	subs	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eac:	461a      	mov	r2, r3
 8002eae:	2304      	movs	r3, #4
 8002eb0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0a4      	b.n	8003044 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d001      	beq.n	8002f08 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e09d      	b.n	8003044 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	3212      	adds	r2, #18
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	f1c3 0304 	rsb	r3, r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f24:	e066      	b.n	8002ff4 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_ETH_ReadData+0x88>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03c      	beq.n	8002fd0 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f78:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f006 fd30 	bl	8009a14 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d902      	bls.n	8002fe2 <HAL_ETH_ReadData+0x114>
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	3212      	adds	r2, #18
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db06      	blt.n	800300a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	429a      	cmp	r2, r3
 8003002:	d202      	bcs.n	800300a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d08d      	beq.n	8002f26 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f814 	bl	800304c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d108      	bne.n	8003042 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003058:	2301      	movs	r3, #1
 800305a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003060:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	3212      	adds	r2, #18
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003074:	e044      	b.n	8003100 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d112      	bne.n	80030a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f006 fc96 	bl	80099b4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	74fb      	strb	r3, [r7, #19]
 8003092:	e007      	b.n	80030a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	461a      	mov	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02a      	beq.n	8003100 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	6053      	str	r3, [r2, #4]
 80030c2:	e005      	b.n	80030d0 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d902      	bls.n	80030ee <ETH_UpdateDescriptor+0xa2>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3b04      	subs	r3, #4
 80030ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	3212      	adds	r2, #18
 80030f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <ETH_UpdateDescriptor+0xc0>
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1b4      	bne.n	8003076 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	429a      	cmp	r2, r3
 8003114:	d01a      	beq.n	800314c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3303      	adds	r3, #3
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003120:	f3bf 8f5f 	dmb	sy
}
 8003124:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	18ca      	adds	r2, r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800313e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3318      	adds	r3, #24
 8003160:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003172:	e047      	b.n	8003204 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003174:	2301      	movs	r3, #1
 8003176:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3b01      	subs	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	3304      	adds	r3, #4
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3301      	adds	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d902      	bls.n	80031a0 <HAL_ETH_ReleaseTxPacket+0x4c>
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3b04      	subs	r3, #4
 800319e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80031a4:	7bbb      	ldrb	r3, [r7, #14]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02c      	beq.n	8003204 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68d9      	ldr	r1, [r3, #12]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db1f      	blt.n	8003200 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	3304      	adds	r3, #4
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f006 fc61 	bl	8009a94 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	3304      	adds	r3, #4
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d902      	bls.n	80031f2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3b04      	subs	r3, #4
 80031f0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031fe:	e001      	b.n	8003204 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_ETH_ReleaseTxPacket+0xbc>
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1b1      	bne.n	8003174 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003244:	4b4b      	ldr	r3, [pc, #300]	@ (8003374 <HAL_ETH_IRQHandler+0x158>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00e      	beq.n	8003272 <HAL_ETH_IRQHandler+0x56>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003266:	461a      	mov	r2, r3
 8003268:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <HAL_ETH_IRQHandler+0x15c>)
 800326a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f005 fd07 	bl	8008c80 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <HAL_ETH_IRQHandler+0x80>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800328e:	461a      	mov	r2, r3
 8003290:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003294:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f005 fd02 	bl	8008ca0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d042      	beq.n	800332c <HAL_ETH_IRQHandler+0x110>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03d      	beq.n	800332c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01a      	beq.n	8003300 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	4b29      	ldr	r3, [pc, #164]	@ (800337c <HAL_ETH_IRQHandler+0x160>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80032f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032f4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	22e0      	movs	r2, #224	@ 0xe0
 80032fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80032fe:	e012      	b.n	8003326 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800330e:	4013      	ands	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331e:	461a      	mov	r2, r3
 8003320:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003324:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f005 fcca 	bl	8008cc0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f81a 	bl	8003380 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800335e:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_ETH_IRQHandler+0x158>)
 8003360:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003364:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f814 	bl	8003394 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013c00 	.word	0x40013c00
 8003378:	00010040 	.word	0x00010040
 800337c:	007e2000 	.word	0x007e2000

08003380 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 031c 	and.w	r3, r3, #28
 80033c4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	02db      	lsls	r3, r3, #11
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0302 	bic.w	r3, r3, #2
 80033e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80033f8:	f7ff fa70 	bl	80028dc <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80033fe:	e00d      	b.n	800341c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003400:	f7ff fa6c 	bl	80028dc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340e:	d301      	bcc.n	8003414 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e010      	b.n	8003436 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ec      	bne.n	8003400 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 031c 	and.w	r3, r3, #28
 800345a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	02db      	lsls	r3, r3, #11
 8003460:	b29b      	uxth	r3, r3
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	019b      	lsls	r3, r3, #6
 800346c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003498:	f7ff fa20 	bl	80028dc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800349e:	e00d      	b.n	80034bc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80034a0:	f7ff fa1c 	bl	80028dc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ae:	d301      	bcc.n	80034b4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e009      	b.n	80034c8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ec      	bne.n	80034a0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0e6      	b.n	80036b2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b29a      	uxth	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00b      	b.n	80036ea <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d105      	bne.n	80036e8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f846 	bl	8003770 <ETH_SetMACConfig>

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003748:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003756:	2001      	movs	r0, #1
 8003758:	f7ff f8cc 	bl	80028f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003766:	6193      	str	r3, [r2, #24]
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <ETH_SetMACConfig+0x164>)
 8003786:	4013      	ands	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	7b9b      	ldrb	r3, [r3, #14]
 800378e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	7c12      	ldrb	r2, [r2, #16]
 8003794:	2a00      	cmp	r2, #0
 8003796:	d102      	bne.n	800379e <ETH_SetMACConfig+0x2e>
 8003798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800379c:	e000      	b.n	80037a0 <ETH_SetMACConfig+0x30>
 800379e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	7c52      	ldrb	r2, [r2, #17]
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	d102      	bne.n	80037b0 <ETH_SetMACConfig+0x40>
 80037aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80037ae:	e000      	b.n	80037b2 <ETH_SetMACConfig+0x42>
 80037b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7fdb      	ldrb	r3, [r3, #31]
 80037be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80037c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80037c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	7f92      	ldrb	r2, [r2, #30]
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d102      	bne.n	80037d6 <ETH_SetMACConfig+0x66>
 80037d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d4:	e000      	b.n	80037d8 <ETH_SetMACConfig+0x68>
 80037d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80037d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	7f1b      	ldrb	r3, [r3, #28]
 80037de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80037e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80037e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80037ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d102      	bne.n	8003800 <ETH_SetMACConfig+0x90>
 80037fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037fe:	e000      	b.n	8003802 <ETH_SetMACConfig+0x92>
 8003800:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003802:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	7bdb      	ldrb	r3, [r3, #15]
 8003808:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800380a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003818:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800381a:	4313      	orrs	r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003832:	2001      	movs	r0, #1
 8003834:	f7ff f85e 	bl	80028f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800384e:	4013      	ands	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003856:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800385e:	2a00      	cmp	r2, #0
 8003860:	d101      	bne.n	8003866 <ETH_SetMACConfig+0xf6>
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	e000      	b.n	8003868 <ETH_SetMACConfig+0xf8>
 8003866:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003868:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800386e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003876:	2a01      	cmp	r2, #1
 8003878:	d101      	bne.n	800387e <ETH_SetMACConfig+0x10e>
 800387a:	2208      	movs	r2, #8
 800387c:	e000      	b.n	8003880 <ETH_SetMACConfig+0x110>
 800387e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003880:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003888:	2a01      	cmp	r2, #1
 800388a:	d101      	bne.n	8003890 <ETH_SetMACConfig+0x120>
 800388c:	2204      	movs	r2, #4
 800388e:	e000      	b.n	8003892 <ETH_SetMACConfig+0x122>
 8003890:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800389a:	2a01      	cmp	r2, #1
 800389c:	d101      	bne.n	80038a2 <ETH_SetMACConfig+0x132>
 800389e:	2202      	movs	r2, #2
 80038a0:	e000      	b.n	80038a4 <ETH_SetMACConfig+0x134>
 80038a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038a4:	4313      	orrs	r3, r2
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038bc:	2001      	movs	r0, #1
 80038be:	f7ff f819 	bl	80028f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	fd20810f 	.word	0xfd20810f

080038d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4b3d      	ldr	r3, [pc, #244]	@ (80039e8 <ETH_SetDMAConfig+0x110>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	7b1b      	ldrb	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <ETH_SetDMAConfig+0x2c>
 80038fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003902:	e000      	b.n	8003906 <ETH_SetDMAConfig+0x2e>
 8003904:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	7b5b      	ldrb	r3, [r3, #13]
 800390a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800390c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	7f52      	ldrb	r2, [r2, #29]
 8003912:	2a00      	cmp	r2, #0
 8003914:	d102      	bne.n	800391c <ETH_SetDMAConfig+0x44>
 8003916:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800391a:	e000      	b.n	800391e <ETH_SetDMAConfig+0x46>
 800391c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800391e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	7b9b      	ldrb	r3, [r3, #14]
 8003924:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003926:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800392c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	7f1b      	ldrb	r3, [r3, #28]
 8003932:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	7f9b      	ldrb	r3, [r3, #30]
 800393a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800393c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003942:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800394a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800394c:	4313      	orrs	r3, r2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800395c:	461a      	mov	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800396e:	2001      	movs	r0, #1
 8003970:	f7fe ffc0 	bl	80028f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	791b      	ldrb	r3, [r3, #4]
 8003986:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800398c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003992:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003998:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80039a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80039b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039cc:	2001      	movs	r0, #1
 80039ce:	f7fe ff91 	bl	80028f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	f8de3f23 	.word	0xf8de3f23

080039ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b0a6      	sub	sp, #152	@ 0x98
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a00:	2300      	movs	r3, #0
 8003a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003a66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff fe7f 	bl	8003770 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aa6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003aa8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003aac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ab2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ff05 	bl	80038d8 <ETH_SetDMAConfig>
}
 8003ace:	bf00      	nop
 8003ad0:	3798      	adds	r7, #152	@ 0x98
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	3204      	adds	r2, #4
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <ETH_MACAddressConfig+0x68>)
 8003afa:	4413      	add	r3, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3303      	adds	r3, #3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	061a      	lsls	r2, r3, #24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3301      	adds	r3, #1
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <ETH_MACAddressConfig+0x6c>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	6013      	str	r3, [r2, #0]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40028040 	.word	0x40028040
 8003b44:	40028044 	.word	0x40028044

08003b48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e03e      	b.n	8003bd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68d9      	ldr	r1, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	3206      	adds	r2, #6
 8003b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d80c      	bhi.n	8003bb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e004      	b.n	8003bc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d9bd      	bls.n	8003b56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bec:	611a      	str	r2, [r3, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e048      	b.n	8003c9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6919      	ldr	r1, [r3, #16]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	440b      	add	r3, r1
 8003c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	3212      	adds	r2, #18
 8003c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d80c      	bhi.n	8003c8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6919      	ldr	r1, [r3, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	e004      	b.n	8003c94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d9b3      	bls.n	8003c08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b091      	sub	sp, #68	@ 0x44
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d02:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d1a:	d007      	beq.n	8003d2c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	3304      	adds	r3, #4
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e115      	b.n	8003f5c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	3301      	adds	r3, #1
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003d48:	f023 031f 	bic.w	r3, r3, #31
 8003d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d4e:	6852      	ldr	r2, [r2, #4]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003db6:	e084      	b.n	8003ec2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e005      	b.n	8003de4 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de6:	3301      	adds	r3, #1
 8003de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d902      	bls.n	8003df6 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df2:	3b04      	subs	r3, #4
 8003df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e0c:	d007      	beq.n	8003e1e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e12:	3304      	adds	r3, #4
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d029      	beq.n	8003e72 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e30:	e019      	b.n	8003e66 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e32:	f3bf 8f5f 	dmb	sy
}
 8003e36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e46:	3301      	adds	r3, #1
 8003e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d902      	bls.n	8003e56 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e52:	3b04      	subs	r3, #4
 8003e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e62:	3301      	adds	r3, #1
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3e1      	bcc.n	8003e32 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e074      	b.n	8003f5c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	3301      	adds	r3, #1
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003e9c:	f023 031f 	bic.w	r3, r3, #31
 8003ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea2:	6852      	ldr	r2, [r2, #4]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	3301      	adds	r3, #1
 8003eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003eb0:	f3bf 8f5f 	dmb	sy
}
 8003eb4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f af76 	bne.w	8003db8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e005      	b.n	8003eec <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	6a3a      	ldr	r2, [r7, #32]
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003f02:	f3bf 8f5f 	dmb	sy
}
 8003f06:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f28:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f30:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	4413      	add	r3, r2
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3744      	adds	r7, #68	@ 0x44
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	@ 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e16b      	b.n	800425c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 815a 	bne.w	8004256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d005      	beq.n	8003fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d130      	bne.n	800401c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0201 	and.w	r2, r3, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d017      	beq.n	8004058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d123      	bne.n	80040ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80b4 	beq.w	8004256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b60      	ldr	r3, [pc, #384]	@ (8004274 <HAL_GPIO_Init+0x30c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004274 <HAL_GPIO_Init+0x30c>)
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004274 <HAL_GPIO_Init+0x30c>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410a:	4a5b      	ldr	r2, [pc, #364]	@ (8004278 <HAL_GPIO_Init+0x310>)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a52      	ldr	r2, [pc, #328]	@ (800427c <HAL_GPIO_Init+0x314>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02b      	beq.n	800418e <HAL_GPIO_Init+0x226>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a51      	ldr	r2, [pc, #324]	@ (8004280 <HAL_GPIO_Init+0x318>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d025      	beq.n	800418a <HAL_GPIO_Init+0x222>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a50      	ldr	r2, [pc, #320]	@ (8004284 <HAL_GPIO_Init+0x31c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <HAL_GPIO_Init+0x21e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4f      	ldr	r2, [pc, #316]	@ (8004288 <HAL_GPIO_Init+0x320>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d019      	beq.n	8004182 <HAL_GPIO_Init+0x21a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4e      	ldr	r2, [pc, #312]	@ (800428c <HAL_GPIO_Init+0x324>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_GPIO_Init+0x216>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4d      	ldr	r2, [pc, #308]	@ (8004290 <HAL_GPIO_Init+0x328>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_GPIO_Init+0x212>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4c      	ldr	r2, [pc, #304]	@ (8004294 <HAL_GPIO_Init+0x32c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_Init+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4b      	ldr	r2, [pc, #300]	@ (8004298 <HAL_GPIO_Init+0x330>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_GPIO_Init+0x20a>
 800416e:	2307      	movs	r3, #7
 8004170:	e00e      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004172:	2308      	movs	r3, #8
 8004174:	e00c      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004176:	2306      	movs	r3, #6
 8004178:	e00a      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800417a:	2305      	movs	r3, #5
 800417c:	e008      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800417e:	2304      	movs	r3, #4
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004182:	2303      	movs	r3, #3
 8004184:	e004      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004186:	2302      	movs	r3, #2
 8004188:	e002      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800418e:	2300      	movs	r3, #0
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	f002 0203 	and.w	r2, r2, #3
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	4093      	lsls	r3, r2
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a0:	4935      	ldr	r1, [pc, #212]	@ (8004278 <HAL_GPIO_Init+0x310>)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ae:	4b3b      	ldr	r3, [pc, #236]	@ (800429c <HAL_GPIO_Init+0x334>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041d2:	4a32      	ldr	r2, [pc, #200]	@ (800429c <HAL_GPIO_Init+0x334>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d8:	4b30      	ldr	r3, [pc, #192]	@ (800429c <HAL_GPIO_Init+0x334>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041fc:	4a27      	ldr	r2, [pc, #156]	@ (800429c <HAL_GPIO_Init+0x334>)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004202:	4b26      	ldr	r3, [pc, #152]	@ (800429c <HAL_GPIO_Init+0x334>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004226:	4a1d      	ldr	r2, [pc, #116]	@ (800429c <HAL_GPIO_Init+0x334>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <HAL_GPIO_Init+0x334>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_GPIO_Init+0x334>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3301      	adds	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	f67f ae90 	bls.w	8003f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3724      	adds	r7, #36	@ 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	40013800 	.word	0x40013800
 800427c:	40020000 	.word	0x40020000
 8004280:	40020400 	.word	0x40020400
 8004284:	40020800 	.word	0x40020800
 8004288:	40020c00 	.word	0x40020c00
 800428c:	40021000 	.word	0x40021000
 8004290:	40021400 	.word	0x40021400
 8004294:	40021800 	.word	0x40021800
 8004298:	40021c00 	.word	0x40021c00
 800429c:	40013c00 	.word	0x40013c00

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042bc:	e003      	b.n	80042c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	041a      	lsls	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e101      	b.n	80044e8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f015 fcb0 	bl	8019c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2203      	movs	r2, #3
 8004308:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004312:	d102      	bne.n	800431a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f002 feb5 	bl	800708e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7c1a      	ldrb	r2, [r3, #16]
 800432c:	f88d 2000 	strb.w	r2, [sp]
 8004330:	3304      	adds	r3, #4
 8004332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004334:	f002 fd94 	bl	8006e60 <USB_CoreInit>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0ce      	b.n	80044e8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fead 	bl	80070b0 <USB_SetCurrentMode>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0bf      	b.n	80044e8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e04a      	b.n	8004404 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3315      	adds	r3, #21
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3314      	adds	r3, #20
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	b298      	uxth	r0, r3
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	332e      	adds	r3, #46	@ 0x2e
 80043aa:	4602      	mov	r2, r0
 80043ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3318      	adds	r3, #24
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	331c      	adds	r3, #28
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3320      	adds	r3, #32
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3324      	adds	r3, #36	@ 0x24
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3301      	adds	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	429a      	cmp	r2, r3
 800440c:	d3af      	bcc.n	800436e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e044      	b.n	800449e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	3301      	adds	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	791b      	ldrb	r3, [r3, #4]
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3b5      	bcc.n	8004414 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7c1a      	ldrb	r2, [r3, #16]
 80044b0:	f88d 2000 	strb.w	r2, [sp]
 80044b4:	3304      	adds	r3, #4
 80044b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b8:	f002 fe46 	bl	8007148 <USB_DevInit>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e00c      	b.n	80044e8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 fe90 	bl	8008206 <USB_DevDisconnect>

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_PCD_Start+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e022      	b.n	8004552 <HAL_PCD_Start+0x62>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f002 fd97 	bl	800706c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 fe3e 	bl	80081c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800455a:	b590      	push	{r4, r7, lr}
 800455c:	b08d      	sub	sp, #52	@ 0x34
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f003 fefc 	bl	800836e <USB_GetMode>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f040 848c 	bne.w	8004e96 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fe60 	bl	8008248 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8482 	beq.w	8004e94 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 fe4d 	bl	8008248 <USB_ReadInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d107      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f002 0202 	and.w	r2, r2, #2
 80045c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fe3b 	bl	8008248 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d161      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0210 	bic.w	r2, r2, #16
 80045ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 020f 	and.w	r2, r3, #15
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004616:	d124      	bne.n	8004662 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d035      	beq.n	8004690 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800462e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004632:	b29b      	uxth	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	6a38      	ldr	r0, [r7, #32]
 8004638:	f003 fc72 	bl	8007f20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004648:	441a      	add	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800465a:	441a      	add	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	615a      	str	r2, [r3, #20]
 8004660:	e016      	b.n	8004690 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800466c:	d110      	bne.n	8004690 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004674:	2208      	movs	r2, #8
 8004676:	4619      	mov	r1, r3
 8004678:	6a38      	ldr	r0, [r7, #32]
 800467a:	f003 fc51 	bl	8007f20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800468a:	441a      	add	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0210 	orr.w	r2, r2, #16
 800469e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f003 fdcf 	bl	8008248 <USB_ReadInterrupts>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046b4:	f040 80a7 	bne.w	8004806 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 fdd4 	bl	800826e <USB_ReadDevAllOutEpInterrupt>
 80046c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80046c8:	e099      	b.n	80047fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 808e 	beq.w	80047f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f003 fdf8 	bl	80082d6 <USB_ReadDevOutEPInterrupt>
 80046e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	2301      	movs	r3, #1
 8004702:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fea4 	bl	8005454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	2308      	movs	r3, #8
 8004726:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 ff7a 	bl	8005624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2310      	movs	r3, #16
 800474a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d030      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b80      	cmp	r3, #128	@ 0x80
 8004760:	d109      	bne.n	8004776 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004774:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	3304      	adds	r3, #4
 800478a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	78db      	ldrb	r3, [r3, #3]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2200      	movs	r2, #0
 8004798:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	b2db      	uxtb	r3, r3
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f015 fb65 	bl	8019e70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b2:	461a      	mov	r2, r3
 80047b4:	2302      	movs	r3, #2
 80047b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	2320      	movs	r3, #32
 80047d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f af62 	bne.w	80046ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f003 fd1c 	bl	8008248 <USB_ReadInterrupts>
 8004810:	4603      	mov	r3, r0
 8004812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800481a:	f040 80db 	bne.w	80049d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f003 fd3d 	bl	80082a2 <USB_ReadDevAllInEpInterrupt>
 8004828:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800482e:	e0cd      	b.n	80049cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80c2 	beq.w	80049c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f003 fd63 	bl	8008312 <USB_ReadDevInEPInterrupt>
 800484c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d057      	beq.n	8004908 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	2201      	movs	r2, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43db      	mvns	r3, r3
 8004872:	69f9      	ldr	r1, [r7, #28]
 8004874:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004878:	4013      	ands	r3, r2
 800487a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004888:	461a      	mov	r2, r3
 800488a:	2301      	movs	r3, #1
 800488c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	799b      	ldrb	r3, [r3, #6]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d132      	bne.n	80048fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3320      	adds	r3, #32
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4403      	add	r3, r0
 80048b6:	331c      	adds	r3, #28
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4419      	add	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4403      	add	r3, r0
 80048ca:	3320      	adds	r3, #32
 80048cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <HAL_PCD_IRQHandler+0x3a2>
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	3324      	adds	r3, #36	@ 0x24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048f4:	461a      	mov	r2, r3
 80048f6:	2101      	movs	r1, #1
 80048f8:	f003 fd6a 	bl	80083d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f015 fa2f 	bl	8019d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491e:	461a      	mov	r2, r3
 8004920:	2308      	movs	r3, #8
 8004922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493a:	461a      	mov	r2, r3
 800493c:	2310      	movs	r3, #16
 800493e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004956:	461a      	mov	r2, r3
 8004958:	2340      	movs	r3, #64	@ 0x40
 800495a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d023      	beq.n	80049ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004968:	6a38      	ldr	r0, [r7, #32]
 800496a:	f002 fd51 	bl	8007410 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800496e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3310      	adds	r3, #16
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	3304      	adds	r3, #4
 8004980:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d108      	bne.n	800499c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f015 fa7c 	bl	8019e94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	2302      	movs	r3, #2
 80049ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fcbd 	bl	800533a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	3301      	adds	r3, #1
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f47f af2e 	bne.w	8004830 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 fc35 	bl	8008248 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e8:	d122      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d108      	bne.n	8004a1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a10:	2100      	movs	r1, #0
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fea4 	bl	8005760 <HAL_PCDEx_LPM_Callback>
 8004a18:	e002      	b.n	8004a20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f015 fa1a 	bl	8019e54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f003 fc07 	bl	8008248 <USB_ReadInterrupts>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a44:	d112      	bne.n	8004a6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f015 f9d6 	bl	8019e08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004a6a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 fbe9 	bl	8008248 <USB_ReadInterrupts>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a80:	f040 80b7 	bne.w	8004bf2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f002 fcb6 	bl	8007410 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa8:	e046      	b.n	8004b38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004abc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aea:	461a      	mov	r2, r3
 8004aec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004af0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	3301      	adds	r3, #1
 8004b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	791b      	ldrb	r3, [r3, #4]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d3b2      	bcc.n	8004aaa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b52:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004b56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7bdb      	ldrb	r3, [r3, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d016      	beq.n	8004b8e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b70:	f043 030b 	orr.w	r3, r3, #11
 8004b74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b86:	f043 030b 	orr.w	r3, r3, #11
 8004b8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b8c:	e015      	b.n	8004bba <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ba0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004ba4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb4:	f043 030b 	orr.w	r3, r3, #11
 8004bb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004bcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f003 fbf7 	bl	80083d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fb26 	bl	8008248 <USB_ReadInterrupts>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c06:	d123      	bne.n	8004c50 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f003 fbbc 	bl	800838a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 fc73 	bl	8007502 <USB_GetDevSpeed>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681c      	ldr	r4, [r3, #0]
 8004c28:	f001 f9ca 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8004c2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	4620      	mov	r0, r4
 8004c36:	f002 f977 	bl	8006f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f015 f8bb 	bl	8019db6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f003 faf7 	bl	8008248 <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d10a      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f015 f898 	bl	8019d9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f002 0208 	and.w	r2, r2, #8
 8004c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f003 fae2 	bl	8008248 <USB_ReadInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d123      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c9e:	e014      	b.n	8004cca <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fb0a 	bl	80052d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	791b      	ldrb	r3, [r3, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d3e4      	bcc.n	8004ca0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fab4 	bl	8008248 <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cea:	d13c      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cec:	2301      	movs	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf0:	e02b      	b.n	8004d4a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3318      	adds	r3, #24
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d115      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da12      	bge.n	8004d44 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3317      	adds	r3, #23
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 faca 	bl	80052d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	791b      	ldrb	r3, [r3, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d3cd      	bcc.n	8004cf2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 fa6c 	bl	8008248 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d7a:	d156      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d80:	e045      	b.n	8004e0e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	4613      	mov	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12e      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004daa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da2b      	bge.n	8004e08 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	0c1a      	lsrs	r2, r3, #16
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004dba:	4053      	eors	r3, r2
 8004dbc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d121      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e04:	6053      	str	r3, [r2, #4]
            break;
 8004e06:	e008      	b.n	8004e1a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	791b      	ldrb	r3, [r3, #4]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d3b3      	bcc.n	8004d82 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f003 fa0a 	bl	8008248 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d10a      	bne.n	8004e56 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f015 f839 	bl	8019eb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f003 f9f4 	bl	8008248 <USB_ReadInterrupts>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d115      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f015 f829 	bl	8019ed4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e000      	b.n	8004e96 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004e94:	bf00      	nop
    }
  }
}
 8004e96:	3734      	adds	r7, #52	@ 0x34
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}

08004e9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_SetAddress+0x1a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e012      	b.n	8004edc <HAL_PCD_SetAddress+0x40>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 f953 	bl	8008178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	70fb      	strb	r3, [r7, #3]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	803b      	strh	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da0f      	bge.n	8004f2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3310      	adds	r3, #16
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3304      	adds	r3, #4
 8004f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	705a      	strb	r2, [r3, #1]
 8004f28:	e00f      	b.n	8004f4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	3304      	adds	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004f56:	883b      	ldrh	r3, [r7, #0]
 8004f58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	78ba      	ldrb	r2, [r7, #2]
 8004f64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f78:	78bb      	ldrb	r3, [r7, #2]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d102      	bne.n	8004f84 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_PCD_EP_Open+0xae>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e00e      	b.n	8004fb0 <HAL_PCD_EP_Open+0xcc>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fad3 	bl	800754c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004fae:	7afb      	ldrb	r3, [r7, #11]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da0f      	bge.n	8004fec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3310      	adds	r3, #16
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	705a      	strb	r2, [r3, #1]
 8004fea:	e00f      	b.n	800500c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	3304      	adds	r3, #4
 8005004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	b2da      	uxtb	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_PCD_EP_Close+0x6e>
 8005022:	2302      	movs	r3, #2
 8005024:	e00e      	b.n	8005044 <HAL_PCD_EP_Close+0x8c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	4618      	mov	r0, r3
 8005036:	f002 fb11 	bl	800765c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	460b      	mov	r3, r1
 800505a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505c:	7afb      	ldrb	r3, [r7, #11]
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	3304      	adds	r3, #4
 8005074:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	b2da      	uxtb	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	799b      	ldrb	r3, [r3, #6]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	799b      	ldrb	r3, [r3, #6]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	f002 fbae 	bl	8007814 <USB_EPStartXfer>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 020f 	and.w	r2, r3, #15
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80050e4:	681b      	ldr	r3, [r3, #0]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	460b      	mov	r3, r1
 8005100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	3310      	adds	r3, #16
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	3304      	adds	r3, #4
 8005118:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2201      	movs	r2, #1
 8005130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	b2da      	uxtb	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	799b      	ldrb	r3, [r3, #6]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	799b      	ldrb	r3, [r3, #6]
 8005154:	461a      	mov	r2, r3
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	f002 fb5c 	bl	8007814 <USB_EPStartXfer>

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	7912      	ldrb	r2, [r2, #4]
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e04f      	b.n	8005224 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	da0f      	bge.n	80051ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	3310      	adds	r3, #16
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	3304      	adds	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	705a      	strb	r2, [r3, #1]
 80051aa:	e00d      	b.n	80051c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_EP_SetStall+0x82>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e01d      	b.n	8005224 <HAL_PCD_EP_SetStall+0xbe>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f002 feea 	bl	8007fd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7999      	ldrb	r1, [r3, #6]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005214:	461a      	mov	r2, r3
 8005216:	f003 f8db 	bl	80083d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	7912      	ldrb	r2, [r2, #4]
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e042      	b.n	80052d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800524a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da0f      	bge.n	8005272 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3310      	adds	r3, #16
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	705a      	strb	r2, [r3, #1]
 8005270:	e00f      	b.n	8005292 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	3304      	adds	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_PCD_EP_ClrStall+0x86>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e00e      	b.n	80052d0 <HAL_PCD_EP_ClrStall+0xa4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 fef3 	bl	80080ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80052e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	da0c      	bge.n	8005306 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	3310      	adds	r3, #16
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	3304      	adds	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e00c      	b.n	8005320 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	3304      	adds	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	4618      	mov	r0, r3
 8005328:	f002 fd12 	bl	8007d50 <USB_EPStopXfer>
 800532c:	4603      	mov	r3, r0
 800532e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005330:	7afb      	ldrb	r3, [r7, #11]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b08a      	sub	sp, #40	@ 0x28
 800533e:	af02      	add	r7, sp, #8
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d901      	bls.n	8005372 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06b      	b.n	800544a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d902      	bls.n	800538e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3303      	adds	r3, #3
 8005392:	089b      	lsrs	r3, r3, #2
 8005394:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005396:	e02a      	b.n	80053ee <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d902      	bls.n	80053b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3303      	adds	r3, #3
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4603      	mov	r3, r0
 80053d0:	6978      	ldr	r0, [r7, #20]
 80053d2:	f002 fd67 	bl	8007ea4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	441a      	add	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	441a      	add	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	d809      	bhi.n	8005418 <PCD_WriteEmptyTxFifo+0xde>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800540c:	429a      	cmp	r2, r3
 800540e:	d203      	bcs.n	8005418 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1bf      	bne.n	8005398 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d811      	bhi.n	8005448 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	43db      	mvns	r3, r3
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005444:	4013      	ands	r3, r2
 8005446:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	333c      	adds	r3, #60	@ 0x3c
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	799b      	ldrb	r3, [r3, #6]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d17b      	bne.n	8005582 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4a61      	ldr	r2, [pc, #388]	@ (800561c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	f240 80b9 	bls.w	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80b3 	beq.w	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054bc:	6093      	str	r3, [r2, #8]
 80054be:	e0a7      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d6:	461a      	mov	r2, r3
 80054d8:	2320      	movs	r3, #32
 80054da:	6093      	str	r3, [r2, #8]
 80054dc:	e098      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 8093 	bne.w	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	4a4b      	ldr	r2, [pc, #300]	@ (800561c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d90f      	bls.n	8005512 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550e:	6093      	str	r3, [r2, #8]
 8005510:	e07e      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	3304      	adds	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	0159      	lsls	r1, r3, #5
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	440b      	add	r3, r1
 8005534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d114      	bne.n	8005574 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800555c:	461a      	mov	r2, r3
 800555e:	2101      	movs	r1, #1
 8005560:	f002 ff36 	bl	80083d0 <USB_EP0_OutStart>
 8005564:	e006      	b.n	8005574 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f014 fbd8 	bl	8019d30 <HAL_PCD_DataOutStageCallback>
 8005580:	e046      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4a26      	ldr	r2, [pc, #152]	@ (8005620 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d124      	bne.n	80055d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a6:	6093      	str	r3, [r2, #8]
 80055a8:	e032      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	2320      	movs	r3, #32
 80055c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f014 fbaf 	bl	8019d30 <HAL_PCD_DataOutStageCallback>
 80055d2:	e01d      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d114      	bne.n	8005604 <PCD_EP_OutXfrComplete_int+0x1b0>
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d108      	bne.n	8005604 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055fc:	461a      	mov	r2, r3
 80055fe:	2100      	movs	r1, #0
 8005600:	f002 fee6 	bl	80083d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f014 fb90 	bl	8019d30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	4f54300a 	.word	0x4f54300a
 8005620:	4f54310a 	.word	0x4f54310a

08005624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	333c      	adds	r3, #60	@ 0x3c
 800563c:	3304      	adds	r3, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a15      	ldr	r2, [pc, #84]	@ (80056ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d90e      	bls.n	8005678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f014 fb47 	bl	8019d0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d90c      	bls.n	80056a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	799b      	ldrb	r3, [r3, #6]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d108      	bne.n	80056a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005698:	461a      	mov	r2, r3
 800569a:	2101      	movs	r1, #1
 800569c:	f002 fe98 	bl	80083d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	4f54300a 	.word	0x4f54300a

080056b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
 80056bc:	4613      	mov	r3, r2
 80056be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d107      	bne.n	80056de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056ce:	883b      	ldrh	r3, [r7, #0]
 80056d0:	0419      	lsls	r1, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	430a      	orrs	r2, r1
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28
 80056dc:	e028      	b.n	8005730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4413      	add	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]
 80056f0:	e00d      	b.n	800570e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	3340      	adds	r3, #64	@ 0x40
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4413      	add	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	3301      	adds	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	3b01      	subs	r3, #1
 8005714:	429a      	cmp	r2, r3
 8005716:	d3ec      	bcc.n	80056f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005718:	883b      	ldrh	r3, [r7, #0]
 800571a:	0418      	lsls	r0, r3, #16
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	3b01      	subs	r3, #1
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	4302      	orrs	r2, r0
 8005728:	3340      	adds	r3, #64	@ 0x40
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	887a      	ldrh	r2, [r7, #2]
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e267      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d075      	beq.n	8005882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005796:	4b88      	ldr	r3, [pc, #544]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d00c      	beq.n	80057bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a2:	4b85      	ldr	r3, [pc, #532]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d112      	bne.n	80057d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ae:	4b82      	ldr	r3, [pc, #520]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ba:	d10b      	bne.n	80057d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	4b7e      	ldr	r3, [pc, #504]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d05b      	beq.n	8005880 <HAL_RCC_OscConfig+0x108>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d157      	bne.n	8005880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e242      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057dc:	d106      	bne.n	80057ec <HAL_RCC_OscConfig+0x74>
 80057de:	4b76      	ldr	r3, [pc, #472]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a75      	ldr	r2, [pc, #468]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e01d      	b.n	8005828 <HAL_RCC_OscConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x98>
 80057f6:	4b70      	ldr	r3, [pc, #448]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6f      	ldr	r2, [pc, #444]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b6d      	ldr	r3, [pc, #436]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6c      	ldr	r2, [pc, #432]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0xb0>
 8005810:	4b69      	ldr	r3, [pc, #420]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b66      	ldr	r3, [pc, #408]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a65      	ldr	r2, [pc, #404]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fd f854 	bl	80028dc <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd f850 	bl	80028dc <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	@ 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e207      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0xc0>
 8005856:	e014      	b.n	8005882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fd f840 	bl	80028dc <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fd f83c 	bl	80028dc <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	@ 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1f3      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	4b51      	ldr	r3, [pc, #324]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0xe8>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d063      	beq.n	8005956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800588e:	4b4a      	ldr	r3, [pc, #296]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589a:	4b47      	ldr	r3, [pc, #284]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d11c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b44      	ldr	r3, [pc, #272]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	4b41      	ldr	r3, [pc, #260]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_RCC_OscConfig+0x152>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1c7      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b3b      	ldr	r3, [pc, #236]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4937      	ldr	r1, [pc, #220]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	e03a      	b.n	8005956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d020      	beq.n	800592a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	4b34      	ldr	r3, [pc, #208]	@ (80059bc <HAL_RCC_OscConfig+0x244>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc fff5 	bl	80028dc <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fc fff1 	bl	80028dc <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1a8      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	4b2b      	ldr	r3, [pc, #172]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4925      	ldr	r1, [pc, #148]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <HAL_RCC_OscConfig+0x244>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc ffd4 	bl	80028dc <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fc ffd0 	bl	80028dc <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e187      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1b      	ldr	r3, [pc, #108]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d036      	beq.n	80059d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_RCC_OscConfig+0x248>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fc ffb4 	bl	80028dc <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005978:	f7fc ffb0 	bl	80028dc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e167      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_RCC_OscConfig+0x240>)
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x200>
 8005996:	e01b      	b.n	80059d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005998:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <HAL_RCC_OscConfig+0x248>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599e:	f7fc ff9d 	bl	80028dc <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	e00e      	b.n	80059c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a6:	f7fc ff99 	bl	80028dc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d907      	bls.n	80059c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e150      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	42470000 	.word	0x42470000
 80059c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b88      	ldr	r3, [pc, #544]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ea      	bne.n	80059a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8097 	beq.w	8005b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b81      	ldr	r3, [pc, #516]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	4b7d      	ldr	r3, [pc, #500]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	4a7c      	ldr	r2, [pc, #496]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80059fe:	4b7a      	ldr	r3, [pc, #488]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b77      	ldr	r3, [pc, #476]	@ (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b74      	ldr	r3, [pc, #464]	@ (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a73      	ldr	r2, [pc, #460]	@ (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fc ff59 	bl	80028dc <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fc ff55 	bl	80028dc <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e10c      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	4b6a      	ldr	r3, [pc, #424]	@ (8005bec <HAL_RCC_OscConfig+0x474>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x2ea>
 8005a54:	4b64      	ldr	r3, [pc, #400]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a58:	4a63      	ldr	r2, [pc, #396]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a60:	e01c      	b.n	8005a9c <HAL_RCC_OscConfig+0x324>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x30c>
 8005a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a70:	f043 0304 	orr.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a76:	4b5c      	ldr	r3, [pc, #368]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0x324>
 8005a84:	4b58      	ldr	r3, [pc, #352]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	4a57      	ldr	r2, [pc, #348]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a90:	4b55      	ldr	r3, [pc, #340]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a94:	4a54      	ldr	r2, [pc, #336]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fc ff1a 	bl	80028dc <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aac:	f7fc ff16 	bl	80028dc <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0cb      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac2:	4b49      	ldr	r3, [pc, #292]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ee      	beq.n	8005aac <HAL_RCC_OscConfig+0x334>
 8005ace:	e014      	b.n	8005afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad0:	f7fc ff04 	bl	80028dc <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fc ff00 	bl	80028dc <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0b5      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aee:	4b3e      	ldr	r3, [pc, #248]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1ee      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b00:	4b39      	ldr	r3, [pc, #228]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	4a38      	ldr	r2, [pc, #224]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a1 	beq.w	8005c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b16:	4b34      	ldr	r3, [pc, #208]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d05c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d141      	bne.n	8005bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b31      	ldr	r3, [pc, #196]	@ (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fc fed4 	bl	80028dc <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fc fed0 	bl	80028dc <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e087      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b27      	ldr	r3, [pc, #156]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	019b      	lsls	r3, r3, #6
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	061b      	lsls	r3, r3, #24
 8005b7a:	491b      	ldr	r1, [pc, #108]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fc fea9 	bl	80028dc <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fc fea5 	bl	80028dc <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e05c      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x416>
 8005bac:	e054      	b.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bae:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <HAL_RCC_OscConfig+0x478>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fc fe92 	bl	80028dc <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fc fe8e 	bl	80028dc <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e045      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x444>
 8005bda:	e03d      	b.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e038      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <HAL_RCC_OscConfig+0x4ec>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d028      	beq.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d121      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d11a      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d111      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d107      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800

08005c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0cc      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b68      	ldr	r3, [pc, #416]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d90c      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b65      	ldr	r3, [pc, #404]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b63      	ldr	r3, [pc, #396]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0b8      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d020      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cbc:	4b59      	ldr	r3, [pc, #356]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a58      	ldr	r2, [pc, #352]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd4:	4b53      	ldr	r3, [pc, #332]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a52      	ldr	r2, [pc, #328]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b50      	ldr	r3, [pc, #320]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	494d      	ldr	r1, [pc, #308]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d044      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b47      	ldr	r3, [pc, #284]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e07f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b3f      	ldr	r3, [pc, #252]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e06f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b3b      	ldr	r3, [pc, #236]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e067      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b37      	ldr	r3, [pc, #220]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4934      	ldr	r1, [pc, #208]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fc fdc0 	bl	80028dc <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fc fdbc 	bl	80028dc <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e04f      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b2b      	ldr	r3, [pc, #172]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b25      	ldr	r3, [pc, #148]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d20c      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b22      	ldr	r3, [pc, #136]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b20      	ldr	r3, [pc, #128]	@ (8005e20 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e032      	b.n	8005e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b19      	ldr	r3, [pc, #100]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4916      	ldr	r1, [pc, #88]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dda:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	490e      	ldr	r1, [pc, #56]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dee:	f000 f821 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005df2:	4602      	mov	r2, r0
 8005df4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	490a      	ldr	r1, [pc, #40]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005e00:	5ccb      	ldrb	r3, [r1, r3]
 8005e02:	fa22 f303 	lsr.w	r3, r2, r3
 8005e06:	4a09      	ldr	r2, [pc, #36]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc f810 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023c00 	.word	0x40023c00
 8005e24:	40023800 	.word	0x40023800
 8005e28:	0801f400 	.word	0x0801f400
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	20000004 	.word	0x20000004

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e38:	b090      	sub	sp, #64	@ 0x40
 8005e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4c:	4b59      	ldr	r3, [pc, #356]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 030c 	and.w	r3, r3, #12
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x40>
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	f200 80a1 	bhi.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x34>
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e66:	e09b      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e68:	4b53      	ldr	r3, [pc, #332]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e6c:	e09b      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e6e:	4b53      	ldr	r3, [pc, #332]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e72:	e098      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e74:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d028      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	2200      	movs	r2, #0
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4b47      	ldr	r3, [pc, #284]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ea0:	fb03 f201 	mul.w	r2, r3, r1
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	fb00 f303 	mul.w	r3, r0, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	4a43      	ldr	r2, [pc, #268]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8005eae:	fba0 1202 	umull	r1, r2, r0, r2
 8005eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb4:	460a      	mov	r2, r1
 8005eb6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eba:	4413      	add	r3, r2
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	61fa      	str	r2, [r7, #28]
 8005ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005ece:	f7fa f9d7 	bl	8000280 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eda:	e053      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005edc:	4b35      	ldr	r3, [pc, #212]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	099b      	lsrs	r3, r3, #6
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	617a      	str	r2, [r7, #20]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005eee:	f04f 0b00 	mov.w	fp, #0
 8005ef2:	4652      	mov	r2, sl
 8005ef4:	465b      	mov	r3, fp
 8005ef6:	f04f 0000 	mov.w	r0, #0
 8005efa:	f04f 0100 	mov.w	r1, #0
 8005efe:	0159      	lsls	r1, r3, #5
 8005f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f04:	0150      	lsls	r0, r2, #5
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8005f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f26:	ebb2 0408 	subs.w	r4, r2, r8
 8005f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	00eb      	lsls	r3, r5, #3
 8005f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3c:	00e2      	lsls	r2, r4, #3
 8005f3e:	4614      	mov	r4, r2
 8005f40:	461d      	mov	r5, r3
 8005f42:	eb14 030a 	adds.w	r3, r4, sl
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	eb45 030b 	adc.w	r3, r5, fp
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	028b      	lsls	r3, r1, #10
 8005f5e:	4621      	mov	r1, r4
 8005f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f64:	4621      	mov	r1, r4
 8005f66:	028a      	lsls	r2, r1, #10
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	60fa      	str	r2, [r7, #12]
 8005f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f78:	f7fa f982 	bl	8000280 <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4613      	mov	r3, r2
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f84:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005f94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3740      	adds	r7, #64	@ 0x40
 8005fac:	46bd      	mov	sp, r7
 8005fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	017d7840 	.word	0x017d7840

08005fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	@ (8005fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000000 	.word	0x20000000

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fdc:	f7ff fff0 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0a9b      	lsrs	r3, r3, #10
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	@ (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0801f410 	.word	0x0801f410

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006004:	f7ff ffdc 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	@ (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	0801f410 	.word	0x0801f410

08006028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	220f      	movs	r2, #15
 8006036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006038:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0203 	and.w	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006044:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800605c:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <HAL_RCC_GetClockConfig+0x5c>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	08db      	lsrs	r3, r3, #3
 8006062:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800606a:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <HAL_RCC_GetClockConfig+0x60>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0207 	and.w	r2, r3, #7
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	40023c00 	.word	0x40023c00

0800608c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e038      	b.n	8006114 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7fa fb8a 	bl	80007d0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3308      	adds	r3, #8
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 fdfa 	bl	8006cc0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	461a      	mov	r2, r3
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	f000 fe5c 	bl	8006d94 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6858      	ldr	r0, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	f000 fe81 	bl	8006df0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6892      	ldr	r2, [r2, #8]
 80060f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6892      	ldr	r2, [r2, #8]
 8006102:	f041 0101 	orr.w	r1, r1, #1
 8006106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e041      	b.n	80061b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc f898 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 f9b6 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04e      	b.n	8006272 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a23      	ldr	r2, [pc, #140]	@ (8006280 <HAL_TIM_Base_Start_IT+0xc4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fe:	d01d      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	@ (8006284 <HAL_TIM_Base_Start_IT+0xc8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	@ (8006288 <HAL_TIM_Base_Start_IT+0xcc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	@ (800628c <HAL_TIM_Base_Start_IT+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	@ (8006290 <HAL_TIM_Base_Start_IT+0xd4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a19      	ldr	r2, [pc, #100]	@ (8006294 <HAL_TIM_Base_Start_IT+0xd8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x80>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a18      	ldr	r2, [pc, #96]	@ (8006298 <HAL_TIM_Base_Start_IT+0xdc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d111      	bne.n	8006260 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d010      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e007      	b.n	8006270 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40001800 	.word	0x40001800

0800629c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0202 	mvn.w	r2, #2
 80062d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8d2 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8c4 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8d5 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0204 	mvn.w	r2, #4
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8ac 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f89e 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8af 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0208 	mvn.w	r2, #8
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2204      	movs	r2, #4
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f886 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f878 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f889 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0210 	mvn.w	r2, #16
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2208      	movs	r2, #8
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f860 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f852 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f863 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00c      	beq.n	8006408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0201 	mvn.w	r2, #1
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fa fade 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00c      	beq.n	800642c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f97c 	bl	8006724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f834 	bl	80064b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0220 	mvn.w	r2, #32
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f94e 	bl	8006710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a43      	ldr	r2, [pc, #268]	@ (80065ec <TIM_Base_SetConfig+0x120>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	d00f      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a40      	ldr	r2, [pc, #256]	@ (80065f0 <TIM_Base_SetConfig+0x124>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00b      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3f      	ldr	r2, [pc, #252]	@ (80065f4 <TIM_Base_SetConfig+0x128>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3e      	ldr	r2, [pc, #248]	@ (80065f8 <TIM_Base_SetConfig+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3d      	ldr	r2, [pc, #244]	@ (80065fc <TIM_Base_SetConfig+0x130>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a32      	ldr	r2, [pc, #200]	@ (80065ec <TIM_Base_SetConfig+0x120>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652c:	d027      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2f      	ldr	r2, [pc, #188]	@ (80065f0 <TIM_Base_SetConfig+0x124>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d023      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2e      	ldr	r2, [pc, #184]	@ (80065f4 <TIM_Base_SetConfig+0x128>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <TIM_Base_SetConfig+0x12c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <TIM_Base_SetConfig+0x130>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d017      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <TIM_Base_SetConfig+0x134>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2a      	ldr	r2, [pc, #168]	@ (8006604 <TIM_Base_SetConfig+0x138>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a29      	ldr	r2, [pc, #164]	@ (8006608 <TIM_Base_SetConfig+0x13c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a28      	ldr	r2, [pc, #160]	@ (800660c <TIM_Base_SetConfig+0x140>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a27      	ldr	r2, [pc, #156]	@ (8006610 <TIM_Base_SetConfig+0x144>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a26      	ldr	r2, [pc, #152]	@ (8006614 <TIM_Base_SetConfig+0x148>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a0e      	ldr	r2, [pc, #56]	@ (80065ec <TIM_Base_SetConfig+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0xf2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a10      	ldr	r2, [pc, #64]	@ (80065fc <TIM_Base_SetConfig+0x130>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d103      	bne.n	80065c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f043 0204 	orr.w	r2, r3, #4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800
 800660c:	40001800 	.word	0x40001800
 8006610:	40001c00 	.word	0x40001c00
 8006614:	40002000 	.word	0x40002000

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e05a      	b.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a21      	ldr	r2, [pc, #132]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667c:	d01d      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1d      	ldr	r2, [pc, #116]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a15      	ldr	r2, [pc, #84]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d10c      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40010400 	.word	0x40010400
 8006708:	40014000 	.word	0x40014000
 800670c:	40001800 	.word	0x40001800

08006710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e042      	b.n	80067d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fe06 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2224      	movs	r2, #36	@ 0x24
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800677a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f82b 	bl	80067d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067dc:	b0c0      	sub	sp, #256	@ 0x100
 80067de:	af00      	add	r7, sp, #0
 80067e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	ea40 0301 	orr.w	r3, r0, r1
 8006800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006830:	f021 010c 	bic.w	r1, r1, #12
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800683e:	430b      	orrs	r3, r1
 8006840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006852:	6999      	ldr	r1, [r3, #24]
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	ea40 0301 	orr.w	r3, r0, r1
 800685e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b8f      	ldr	r3, [pc, #572]	@ (8006aa4 <UART_SetConfig+0x2cc>)
 8006868:	429a      	cmp	r2, r3
 800686a:	d005      	beq.n	8006878 <UART_SetConfig+0xa0>
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b8d      	ldr	r3, [pc, #564]	@ (8006aa8 <UART_SetConfig+0x2d0>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d104      	bne.n	8006882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7ff fbc2 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 800687c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006880:	e003      	b.n	800688a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006882:	f7ff fba9 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8006886:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006894:	f040 810c 	bne.w	8006ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800689c:	2200      	movs	r2, #0
 800689e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80068a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	1891      	adds	r1, r2, r2
 80068b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068b2:	415b      	adcs	r3, r3
 80068b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068ba:	4621      	mov	r1, r4
 80068bc:	eb12 0801 	adds.w	r8, r2, r1
 80068c0:	4629      	mov	r1, r5
 80068c2:	eb43 0901 	adc.w	r9, r3, r1
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068da:	4690      	mov	r8, r2
 80068dc:	4699      	mov	r9, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	eb18 0303 	adds.w	r3, r8, r3
 80068e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068e8:	462b      	mov	r3, r5
 80068ea:	eb49 0303 	adc.w	r3, r9, r3
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006906:	460b      	mov	r3, r1
 8006908:	18db      	adds	r3, r3, r3
 800690a:	653b      	str	r3, [r7, #80]	@ 0x50
 800690c:	4613      	mov	r3, r2
 800690e:	eb42 0303 	adc.w	r3, r2, r3
 8006912:	657b      	str	r3, [r7, #84]	@ 0x54
 8006914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800691c:	f7f9 fcb0 	bl	8000280 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4b61      	ldr	r3, [pc, #388]	@ (8006aac <UART_SetConfig+0x2d4>)
 8006926:	fba3 2302 	umull	r2, r3, r3, r2
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	011c      	lsls	r4, r3, #4
 800692e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006932:	2200      	movs	r2, #0
 8006934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006938:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800693c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	1891      	adds	r1, r2, r2
 8006946:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006948:	415b      	adcs	r3, r3
 800694a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006950:	4641      	mov	r1, r8
 8006952:	eb12 0a01 	adds.w	sl, r2, r1
 8006956:	4649      	mov	r1, r9
 8006958:	eb43 0b01 	adc.w	fp, r3, r1
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800696c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006970:	4692      	mov	sl, r2
 8006972:	469b      	mov	fp, r3
 8006974:	4643      	mov	r3, r8
 8006976:	eb1a 0303 	adds.w	r3, sl, r3
 800697a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800697e:	464b      	mov	r3, r9
 8006980:	eb4b 0303 	adc.w	r3, fp, r3
 8006984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006994:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800699c:	460b      	mov	r3, r1
 800699e:	18db      	adds	r3, r3, r3
 80069a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a2:	4613      	mov	r3, r2
 80069a4:	eb42 0303 	adc.w	r3, r2, r3
 80069a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069b2:	f7f9 fc65 	bl	8000280 <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <UART_SetConfig+0x2d4>)
 80069be:	fba3 2301 	umull	r2, r3, r3, r1
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2264      	movs	r2, #100	@ 0x64
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	1acb      	subs	r3, r1, r3
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069d2:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <UART_SetConfig+0x2d4>)
 80069d4:	fba3 2302 	umull	r2, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069e0:	441c      	add	r4, r3
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069fc:	415b      	adcs	r3, r3
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a04:	4641      	mov	r1, r8
 8006a06:	1851      	adds	r1, r2, r1
 8006a08:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	414b      	adcs	r3, r1
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	00cb      	lsls	r3, r1, #3
 8006a20:	4651      	mov	r1, sl
 8006a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a26:	4651      	mov	r1, sl
 8006a28:	00ca      	lsls	r2, r1, #3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4642      	mov	r2, r8
 8006a32:	189b      	adds	r3, r3, r2
 8006a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a38:	464b      	mov	r3, r9
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	eb42 0303 	adc.w	r3, r2, r3
 8006a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a58:	460b      	mov	r3, r1
 8006a5a:	18db      	adds	r3, r3, r3
 8006a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a5e:	4613      	mov	r3, r2
 8006a60:	eb42 0303 	adc.w	r3, r2, r3
 8006a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a6e:	f7f9 fc07 	bl	8000280 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <UART_SetConfig+0x2d4>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	@ 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	3332      	adds	r3, #50	@ 0x32
 8006a8a:	4a08      	ldr	r2, [pc, #32]	@ (8006aac <UART_SetConfig+0x2d4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4422      	add	r2, r4
 8006a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aa0:	e106      	b.n	8006cb0 <UART_SetConfig+0x4d8>
 8006aa2:	bf00      	nop
 8006aa4:	40011000 	.word	0x40011000
 8006aa8:	40011400 	.word	0x40011400
 8006aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006aba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ac2:	4642      	mov	r2, r8
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	1891      	adds	r1, r2, r2
 8006ac8:	6239      	str	r1, [r7, #32]
 8006aca:	415b      	adcs	r3, r3
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	1854      	adds	r4, r2, r1
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	eb43 0501 	adc.w	r5, r3, r1
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	00eb      	lsls	r3, r5, #3
 8006ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aea:	00e2      	lsls	r2, r4, #3
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	4643      	mov	r3, r8
 8006af2:	18e3      	adds	r3, r4, r3
 8006af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006af8:	464b      	mov	r3, r9
 8006afa:	eb45 0303 	adc.w	r3, r5, r3
 8006afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b1e:	4629      	mov	r1, r5
 8006b20:	008b      	lsls	r3, r1, #2
 8006b22:	4621      	mov	r1, r4
 8006b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b28:	4621      	mov	r1, r4
 8006b2a:	008a      	lsls	r2, r1, #2
 8006b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b30:	f7f9 fba6 	bl	8000280 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4b60      	ldr	r3, [pc, #384]	@ (8006cbc <UART_SetConfig+0x4e4>)
 8006b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	011c      	lsls	r4, r3, #4
 8006b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	1891      	adds	r1, r2, r2
 8006b5a:	61b9      	str	r1, [r7, #24]
 8006b5c:	415b      	adcs	r3, r3
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b64:	4641      	mov	r1, r8
 8006b66:	1851      	adds	r1, r2, r1
 8006b68:	6139      	str	r1, [r7, #16]
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	414b      	adcs	r3, r1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	00cb      	lsls	r3, r1, #3
 8006b80:	4651      	mov	r1, sl
 8006b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b86:	4651      	mov	r1, sl
 8006b88:	00ca      	lsls	r2, r1, #3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4642      	mov	r2, r8
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b98:	464b      	mov	r3, r9
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	008b      	lsls	r3, r1, #2
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	008a      	lsls	r2, r1, #2
 8006bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bce:	f7f9 fb57 	bl	8000280 <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4b38      	ldr	r3, [pc, #224]	@ (8006cbc <UART_SetConfig+0x4e4>)
 8006bda:	fba3 2301 	umull	r2, r3, r3, r1
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2264      	movs	r2, #100	@ 0x64
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	1acb      	subs	r3, r1, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	@ 0x32
 8006bec:	4a33      	ldr	r2, [pc, #204]	@ (8006cbc <UART_SetConfig+0x4e4>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bf8:	441c      	add	r4, r3
 8006bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bfe:	2200      	movs	r2, #0
 8006c00:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c02:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	415b      	adcs	r3, r3
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c18:	4641      	mov	r1, r8
 8006c1a:	1851      	adds	r1, r2, r1
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	414b      	adcs	r3, r1
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c30:	4659      	mov	r1, fp
 8006c32:	00cb      	lsls	r3, r1, #3
 8006c34:	4651      	mov	r1, sl
 8006c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	00ca      	lsls	r2, r1, #3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	4642      	mov	r2, r8
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	eb42 0303 	adc.w	r3, r2, r3
 8006c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	008b      	lsls	r3, r1, #2
 8006c70:	4641      	mov	r1, r8
 8006c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c76:	4641      	mov	r1, r8
 8006c78:	008a      	lsls	r2, r1, #2
 8006c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c7e:	f7f9 faff 	bl	8000280 <__aeabi_uldivmod>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <UART_SetConfig+0x4e4>)
 8006c88:	fba3 1302 	umull	r1, r3, r3, r2
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	2164      	movs	r1, #100	@ 0x64
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	3332      	adds	r3, #50	@ 0x32
 8006c9a:	4a08      	ldr	r2, [pc, #32]	@ (8006cbc <UART_SetConfig+0x4e4>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4422      	add	r2, r4
 8006cae:	609a      	str	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cbc:	51eb851f 	.word	0x51eb851f

08006cc0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	f023 0101 	bic.w	r1, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d102      	bne.n	8006cf0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006cea:	2340      	movs	r3, #64	@ 0x40
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e001      	b.n	8006cf4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006d00:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006d06:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006d0c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006d12:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006d18:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006d1e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006d24:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006d2a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006d30:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <FSMC_NORSRAM_Init+0xd0>)
 8006d50:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d58:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006d60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	ea02 0103 	and.w	r1, r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4319      	orrs	r1, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	0008fb7f 	.word	0x0008fb7f

08006d94 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006daa:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006db2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006dba:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006dc4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	3b02      	subs	r3, #2
 8006dcc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8006dce:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006dda:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e04:	d11d      	bne.n	8006e42 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e0e:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	6811      	ldr	r1, [r2, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	6852      	ldr	r2, [r2, #4]
 8006e1a:	0112      	lsls	r2, r2, #4
 8006e1c:	4311      	orrs	r1, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	6892      	ldr	r2, [r2, #8]
 8006e22:	0212      	lsls	r2, r2, #8
 8006e24:	4311      	orrs	r1, r2
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	6992      	ldr	r2, [r2, #24]
 8006e2a:	4311      	orrs	r1, r2
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	68d2      	ldr	r2, [r2, #12]
 8006e30:	0412      	lsls	r2, r2, #16
 8006e32:	430a      	orrs	r2, r1
 8006e34:	ea43 0102 	orr.w	r1, r3, r2
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e40:	e005      	b.n	8006e4e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	cff00000 	.word	0xcff00000

08006e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e60:	b084      	sub	sp, #16
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	f107 001c 	add.w	r0, r7, #28
 8006e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d123      	bne.n	8006ec2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fae8 	bl	800848c <USB_CoreReset>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e01b      	b.n	8006efa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fadc 	bl	800848c <USB_CoreReset>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	639a      	str	r2, [r3, #56]	@ 0x38
 8006eec:	e005      	b.n	8006efa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006efa:	7fbb      	ldrb	r3, [r7, #30]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d10b      	bne.n	8006f18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f043 0206 	orr.w	r2, r3, #6
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f24:	b004      	add	sp, #16
 8006f26:	4770      	bx	lr

08006f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d165      	bne.n	8007008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	@ (8007044 <USB_SetTurnaroundTime+0x11c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d906      	bls.n	8006f52 <USB_SetTurnaroundTime+0x2a>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a40      	ldr	r2, [pc, #256]	@ (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d202      	bcs.n	8006f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f4c:	230f      	movs	r3, #15
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e062      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a3c      	ldr	r2, [pc, #240]	@ (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d306      	bcc.n	8006f68 <USB_SetTurnaroundTime+0x40>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800704c <USB_SetTurnaroundTime+0x124>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d202      	bcs.n	8006f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f62:	230e      	movs	r3, #14
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e057      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	@ (800704c <USB_SetTurnaroundTime+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d306      	bcc.n	8006f7e <USB_SetTurnaroundTime+0x56>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d202      	bcs.n	8006f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f78:	230d      	movs	r3, #13
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e04c      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a33      	ldr	r2, [pc, #204]	@ (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d306      	bcc.n	8006f94 <USB_SetTurnaroundTime+0x6c>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a32      	ldr	r2, [pc, #200]	@ (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d802      	bhi.n	8006f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f8e:	230c      	movs	r3, #12
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e041      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a2f      	ldr	r2, [pc, #188]	@ (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d906      	bls.n	8006faa <USB_SetTurnaroundTime+0x82>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d802      	bhi.n	8006faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fa4:	230b      	movs	r3, #11
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e036      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d906      	bls.n	8006fc0 <USB_SetTurnaroundTime+0x98>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	@ (800705c <USB_SetTurnaroundTime+0x134>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d802      	bhi.n	8006fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fba:	230a      	movs	r3, #10
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e02b      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a26      	ldr	r2, [pc, #152]	@ (800705c <USB_SetTurnaroundTime+0x134>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d906      	bls.n	8006fd6 <USB_SetTurnaroundTime+0xae>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a25      	ldr	r2, [pc, #148]	@ (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d202      	bcs.n	8006fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd0:	2309      	movs	r3, #9
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e020      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d306      	bcc.n	8006fec <USB_SetTurnaroundTime+0xc4>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a20      	ldr	r2, [pc, #128]	@ (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d802      	bhi.n	8006fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e015      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	@ (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d906      	bls.n	8007002 <USB_SetTurnaroundTime+0xda>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8007068 <USB_SetTurnaroundTime+0x140>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d202      	bcs.n	8007002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e00a      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007002:	2306      	movs	r3, #6
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e007      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800700e:	2309      	movs	r3, #9
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e001      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007014:	2309      	movs	r3, #9
 8007016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	029b      	lsls	r3, r3, #10
 800702c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	00d8acbf 	.word	0x00d8acbf
 8007048:	00e4e1c0 	.word	0x00e4e1c0
 800704c:	00f42400 	.word	0x00f42400
 8007050:	01067380 	.word	0x01067380
 8007054:	011a499f 	.word	0x011a499f
 8007058:	01312cff 	.word	0x01312cff
 800705c:	014ca43f 	.word	0x014ca43f
 8007060:	016e3600 	.word	0x016e3600
 8007064:	01a6ab1f 	.word	0x01a6ab1f
 8007068:	01e84800 	.word	0x01e84800

0800706c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d115      	bne.n	80070fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070de:	200a      	movs	r0, #10
 80070e0:	f7fb fc08 	bl	80028f4 <HAL_Delay>
      ms += 10U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	330a      	adds	r3, #10
 80070e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f93f 	bl	800836e <USB_GetMode>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d01e      	beq.n	8007134 <USB_SetCurrentMode+0x84>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80070fa:	d9f0      	bls.n	80070de <USB_SetCurrentMode+0x2e>
 80070fc:	e01a      	b.n	8007134 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d115      	bne.n	8007130 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007110:	200a      	movs	r0, #10
 8007112:	f7fb fbef 	bl	80028f4 <HAL_Delay>
      ms += 10U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	330a      	adds	r3, #10
 800711a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 f926 	bl	800836e <USB_GetMode>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <USB_SetCurrentMode+0x84>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2bc7      	cmp	r3, #199	@ 0xc7
 800712c:	d9f0      	bls.n	8007110 <USB_SetCurrentMode+0x60>
 800712e:	e001      	b.n	8007134 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e005      	b.n	8007140 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2bc8      	cmp	r3, #200	@ 0xc8
 8007138:	d101      	bne.n	800713e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007148:	b084      	sub	sp, #16
 800714a:	b580      	push	{r7, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	e009      	b.n	800717c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3340      	adds	r3, #64	@ 0x40
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b0e      	cmp	r3, #14
 8007180:	d9f2      	bls.n	8007168 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007182:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007186:	2b00      	cmp	r3, #0
 8007188:	d11c      	bne.n	80071c4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007198:	f043 0302 	orr.w	r3, r3, #2
 800719c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80071c2:	e00b      	b.n	80071dc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10d      	bne.n	800720c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071f8:	2100      	movs	r1, #0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f968 	bl	80074d0 <USB_SetDevSpeed>
 8007200:	e008      	b.n	8007214 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007202:	2101      	movs	r1, #1
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f963 	bl	80074d0 <USB_SetDevSpeed>
 800720a:	e003      	b.n	8007214 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800720c:	2103      	movs	r1, #3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f95e 	bl	80074d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007214:	2110      	movs	r1, #16
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8fa 	bl	8007410 <USB_FlushTxFifo>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f924 	bl	8007474 <USB_FlushRxFifo>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	461a      	mov	r2, r3
 800723e:	2300      	movs	r3, #0
 8007240:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	e043      	b.n	80072e8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007276:	d118      	bne.n	80072aa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728a:	461a      	mov	r2, r3
 800728c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	e013      	b.n	80072bc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	461a      	mov	r2, r3
 80072a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	e008      	b.n	80072bc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b6:	461a      	mov	r2, r3
 80072b8:	2300      	movs	r3, #0
 80072ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072da:	461a      	mov	r2, r3
 80072dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3301      	adds	r3, #1
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072ec:	461a      	mov	r2, r3
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d3b5      	bcc.n	8007260 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	e043      	b.n	8007382 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800730c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007310:	d118      	bne.n	8007344 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007324:	461a      	mov	r2, r3
 8007326:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e013      	b.n	8007356 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733a:	461a      	mov	r2, r3
 800733c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e008      	b.n	8007356 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007362:	461a      	mov	r2, r3
 8007364:	2300      	movs	r3, #0
 8007366:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007374:	461a      	mov	r2, r3
 8007376:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800737a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3301      	adds	r3, #1
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007386:	461a      	mov	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4293      	cmp	r3, r2
 800738c:	d3b5      	bcc.n	80072fa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d105      	bne.n	80073c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f043 0210 	orr.w	r2, r3, #16
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	4b10      	ldr	r3, [pc, #64]	@ (800740c <USB_DevInit+0x2c4>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f043 0208 	orr.w	r2, r3, #8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d107      	bne.n	80073fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007408:	b004      	add	sp, #16
 800740a:	4770      	bx	lr
 800740c:	803c3800 	.word	0x803c3800

08007410 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800742a:	d901      	bls.n	8007430 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e01b      	b.n	8007468 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	daf2      	bge.n	800741e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	019b      	lsls	r3, r3, #6
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007454:	d901      	bls.n	800745a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e006      	b.n	8007468 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b20      	cmp	r3, #32
 8007464:	d0f0      	beq.n	8007448 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800748c:	d901      	bls.n	8007492 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e018      	b.n	80074c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	daf2      	bge.n	8007480 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2210      	movs	r2, #16
 80074a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074b0:	d901      	bls.n	80074b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e006      	b.n	80074c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d0f0      	beq.n	80074a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f0:	4313      	orrs	r3, r2
 80074f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0306 	and.w	r3, r3, #6
 800751a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]
 8007526:	e00a      	b.n	800753e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d002      	beq.n	8007534 <USB_GetDevSpeed+0x32>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b06      	cmp	r3, #6
 8007532:	d102      	bne.n	800753a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007534:	2302      	movs	r3, #2
 8007536:	75fb      	strb	r3, [r7, #23]
 8007538:	e001      	b.n	800753e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800753a:	230f      	movs	r3, #15
 800753c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007540:	4618      	mov	r0, r3
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	785b      	ldrb	r3, [r3, #1]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d13a      	bne.n	80075de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756e:	69da      	ldr	r2, [r3, #28]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	68f9      	ldr	r1, [r7, #12]
 8007582:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007586:	4313      	orrs	r3, r2
 8007588:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d155      	bne.n	800764c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	791b      	ldrb	r3, [r3, #4]
 80075ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	059b      	lsls	r3, r3, #22
 80075c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c4:	4313      	orrs	r3, r2
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e036      	b.n	800764c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e4:	69da      	ldr	r2, [r3, #28]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	041b      	lsls	r3, r3, #16
 80075f6:	68f9      	ldr	r1, [r7, #12]
 80075f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d11a      	bne.n	800764c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	791b      	ldrb	r3, [r3, #4]
 8007630:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007632:	430b      	orrs	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800764a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d161      	bne.n	800773c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800768a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800768e:	d11f      	bne.n	80076d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	2101      	movs	r1, #1
 80076e2:	fa01 f303 	lsl.w	r3, r1, r3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	43db      	mvns	r3, r3
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076f0:	4013      	ands	r3, r2
 80076f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fa:	69da      	ldr	r2, [r3, #28]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	2101      	movs	r1, #1
 8007706:	fa01 f303 	lsl.w	r3, r1, r3
 800770a:	b29b      	uxth	r3, r3
 800770c:	43db      	mvns	r3, r3
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007714:	4013      	ands	r3, r2
 8007716:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	0159      	lsls	r1, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	440b      	add	r3, r1
 800772e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007732:	4619      	mov	r1, r3
 8007734:	4b35      	ldr	r3, [pc, #212]	@ (800780c <USB_DeactivateEndpoint+0x1b0>)
 8007736:	4013      	ands	r3, r2
 8007738:	600b      	str	r3, [r1, #0]
 800773a:	e060      	b.n	80077fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800774e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007752:	d11f      	bne.n	8007794 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007772:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007792:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	2101      	movs	r1, #1
 80077a6:	fa01 f303 	lsl.w	r3, r1, r3
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	43db      	mvns	r3, r3
 80077ae:	68f9      	ldr	r1, [r7, #12]
 80077b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b4:	4013      	ands	r3, r2
 80077b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	2101      	movs	r1, #1
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	43db      	mvns	r3, r3
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077d8:	4013      	ands	r3, r2
 80077da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	0159      	lsls	r1, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	440b      	add	r3, r1
 80077f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f6:	4619      	mov	r1, r3
 80077f8:	4b05      	ldr	r3, [pc, #20]	@ (8007810 <USB_DeactivateEndpoint+0x1b4>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	ec337800 	.word	0xec337800
 8007810:	eff37800 	.word	0xeff37800

08007814 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	@ 0x28
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	f040 817f 	bne.w	8007b34 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d132      	bne.n	80078a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007858:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800785c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007860:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800787c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007880:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800789c:	0cdb      	lsrs	r3, r3, #19
 800789e:	04db      	lsls	r3, r3, #19
 80078a0:	6113      	str	r3, [r2, #16]
 80078a2:	e097      	b.n	80079d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078be:	0cdb      	lsrs	r3, r3, #19
 80078c0:	04db      	lsls	r3, r3, #19
 80078c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11a      	bne.n	8007924 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d903      	bls.n	8007902 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800791c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007920:	6113      	str	r3, [r2, #16]
 8007922:	e044      	b.n	80079ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4413      	add	r3, r2
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	8afb      	ldrh	r3, [r7, #22]
 800794a:	04d9      	lsls	r1, r3, #19
 800794c:	4ba4      	ldr	r3, [pc, #656]	@ (8007be0 <USB_EPStartXfer+0x3cc>)
 800794e:	400b      	ands	r3, r1
 8007950:	69b9      	ldr	r1, [r7, #24]
 8007952:	0148      	lsls	r0, r1, #5
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	4401      	add	r1, r0
 8007958:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	791b      	ldrb	r3, [r3, #4]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d122      	bne.n	80079ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007982:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007986:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	8afb      	ldrh	r3, [r7, #22]
 8007998:	075b      	lsls	r3, r3, #29
 800799a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800799e:	69b9      	ldr	r1, [r7, #24]
 80079a0:	0148      	lsls	r0, r1, #5
 80079a2:	69f9      	ldr	r1, [r7, #28]
 80079a4:	4401      	add	r1, r0
 80079a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079aa:	4313      	orrs	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d14b      	bne.n	8007a72 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	461a      	mov	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d128      	bne.n	8007a50 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d110      	bne.n	8007a30 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	0151      	lsls	r1, r2, #5
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	440a      	add	r2, r1
 8007a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e00f      	b.n	8007a50 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a4e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	e166      	b.n	8007d40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a90:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d015      	beq.n	8007ac6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 814e 	beq.w	8007d40 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aba:	69f9      	ldr	r1, [r7, #28]
 8007abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ac4:	e13c      	b.n	8007d40 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d110      	bne.n	8007af8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	e00f      	b.n	8007b18 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	0151      	lsls	r1, r2, #5
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	68d9      	ldr	r1, [r3, #12]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	b298      	uxth	r0, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f9b9 	bl	8007ea4 <USB_WritePacket>
 8007b32:	e105      	b.n	8007d40 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b4e:	0cdb      	lsrs	r3, r3, #19
 8007b50:	04db      	lsls	r3, r3, #19
 8007b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b76:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d132      	bne.n	8007be4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bac:	69b9      	ldr	r1, [r7, #24]
 8007bae:	0148      	lsls	r0, r1, #5
 8007bb0:	69f9      	ldr	r1, [r7, #28]
 8007bb2:	4401      	add	r1, r0
 8007bb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bda:	6113      	str	r3, [r2, #16]
 8007bdc:	e062      	b.n	8007ca4 <USB_EPStartXfer+0x490>
 8007bde:	bf00      	nop
 8007be0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d123      	bne.n	8007c34 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	0148      	lsls	r0, r1, #5
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	4401      	add	r1, r0
 8007c0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c30:	6113      	str	r3, [r2, #16]
 8007c32:	e037      	b.n	8007ca4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	8afa      	ldrh	r2, [r7, #22]
 8007c50:	fb03 f202 	mul.w	r2, r3, r2
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	8afb      	ldrh	r3, [r7, #22]
 8007c68:	04d9      	lsls	r1, r3, #19
 8007c6a:	4b38      	ldr	r3, [pc, #224]	@ (8007d4c <USB_EPStartXfer+0x538>)
 8007c6c:	400b      	ands	r3, r1
 8007c6e:	69b9      	ldr	r1, [r7, #24]
 8007c70:	0148      	lsls	r0, r1, #5
 8007c72:	69f9      	ldr	r1, [r7, #28]
 8007c74:	4401      	add	r1, r0
 8007c76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	0148      	lsls	r0, r1, #5
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10d      	bne.n	8007cc6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc2:	460a      	mov	r2, r1
 8007cc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	791b      	ldrb	r3, [r3, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d128      	bne.n	8007d20 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d110      	bne.n	8007d00 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	e00f      	b.n	8007d20 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	1ff80000 	.word	0x1ff80000

08007d50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d14a      	bne.n	8007e04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d86:	f040 8086 	bne.w	8007e96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d902      	bls.n	8007de8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
          break;
 8007de6:	e056      	b.n	8007e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e00:	d0e7      	beq.n	8007dd2 <USB_EPStopXfer+0x82>
 8007e02:	e048      	b.n	8007e96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e1c:	d13b      	bne.n	8007e96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d902      	bls.n	8007e7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7a:	e00c      	b.n	8007e96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e94:	d0e7      	beq.n	8007e66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	@ 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	71fb      	strb	r3, [r7, #7]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d123      	bne.n	8007f12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eca:	88bb      	ldrh	r3, [r7, #4]
 8007ecc:	3303      	adds	r3, #3
 8007ece:	089b      	lsrs	r3, r3, #2
 8007ed0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e018      	b.n	8007f0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	031a      	lsls	r2, r3, #12
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	3301      	adds	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3e2      	bcc.n	8007ed8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3724      	adds	r7, #36	@ 0x24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b08b      	sub	sp, #44	@ 0x2c
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	089b      	lsrs	r3, r3, #2
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	623b      	str	r3, [r7, #32]
 8007f4a:	e014      	b.n	8007f76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	3301      	adds	r3, #1
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	3301      	adds	r3, #1
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	3301      	adds	r3, #1
 8007f74:	623b      	str	r3, [r7, #32]
 8007f76:	6a3a      	ldr	r2, [r7, #32]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d3e6      	bcc.n	8007f4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f7e:	8bfb      	ldrh	r3, [r7, #30]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01e      	beq.n	8007fc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f107 0310 	add.w	r3, r7, #16
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	701a      	strb	r2, [r3, #0]
      i++;
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	3301      	adds	r3, #1
 8007fae:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fb6:	8bfb      	ldrh	r3, [r7, #30]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fbc:	8bfb      	ldrh	r3, [r7, #30]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ea      	bne.n	8007f98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	372c      	adds	r7, #44	@ 0x2c
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	785b      	ldrb	r3, [r3, #1]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d12c      	bne.n	8008046 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db12      	blt.n	8008024 <USB_EPSetStall+0x54>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00f      	beq.n	8008024 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800801e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008022:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800803e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	e02b      	b.n	800809e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	db12      	blt.n	800807e <USB_EPSetStall+0xae>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008078:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800807c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800809c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d128      	bne.n	800811a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d003      	beq.n	80080f8 <USB_EPClearStall+0x4c>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d138      	bne.n	800816a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e027      	b.n	800816a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008134:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008138:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d003      	beq.n	800814a <USB_EPClearStall+0x9e>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	791b      	ldrb	r3, [r3, #4]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d10f      	bne.n	800816a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008168:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008196:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800819a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081b2:	4313      	orrs	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f2:	f023 0302 	bic.w	r3, r3, #2
 80081f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4013      	ands	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	4013      	ands	r3, r2
 8008290:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	0c1b      	lsrs	r3, r3, #16
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	b29b      	uxth	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4013      	ands	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008304:	68bb      	ldr	r3, [r7, #8]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008312:	b480      	push	{r7}
 8008314:	b087      	sub	sp, #28
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008334:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	fa22 f303 	lsr.w	r3, r2, r3
 8008342:	01db      	lsls	r3, r3, #7
 8008344:	b2db      	uxtb	r3, r3
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4013      	ands	r3, r2
 800835e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008360:	68bb      	ldr	r3, [r7, #8]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0301 	and.w	r3, r3, #1
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80083a8:	f023 0307 	bic.w	r3, r3, #7
 80083ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	460b      	mov	r3, r1
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	333c      	adds	r3, #60	@ 0x3c
 80083e6:	3304      	adds	r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4a26      	ldr	r2, [pc, #152]	@ (8008488 <USB_EP0_OutStart+0xb8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d90a      	bls.n	800840a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008404:	d101      	bne.n	800840a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	e037      	b.n	800847a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008410:	461a      	mov	r2, r3
 8008412:	2300      	movs	r3, #0
 8008414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008438:	f043 0318 	orr.w	r3, r3, #24
 800843c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800844c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008450:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d10f      	bne.n	8008478 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008472:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	4f54300a 	.word	0x4f54300a

0800848c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084a4:	d901      	bls.n	80084aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e022      	b.n	80084f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	daf2      	bge.n	8008498 <USB_CoreReset+0xc>

  count = 10U;
 80084b2:	230a      	movs	r3, #10
 80084b4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80084b6:	e002      	b.n	80084be <USB_CoreReset+0x32>
  {
    count--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f9      	bne.n	80084b8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f043 0201 	orr.w	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084dc:	d901      	bls.n	80084e2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e006      	b.n	80084f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d0f0      	beq.n	80084d0 <USB_CoreReset+0x44>

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7f7 fe63 	bl	80001d0 <strlen>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <lwip_cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	b29b      	uxth	r3, r3
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f011 fa5a 	bl	80199d4 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 8008520:	2001      	movs	r0, #1
 8008522:	f7fa f9e7 	bl	80028f4 <HAL_Delay>
  }
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b0a6      	sub	sp, #152	@ 0x98
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800853a:	f7fa f9cf 	bl	80028dc <HAL_GetTick>
 800853e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 8008542:	f107 000c 	add.w	r0, r7, #12
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008552:	4a06      	ldr	r2, [pc, #24]	@ (800856c <lwip_cdc_debug_log+0x3c>)
 8008554:	2180      	movs	r1, #128	@ 0x80
 8008556:	f011 ffab 	bl	801a4b0 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800855a:	f107 030c 	add.w	r3, r7, #12
 800855e:	4618      	mov	r0, r3
 8008560:	f7ff ffcc 	bl	80084fc <lwip_cdc_debug_printf>
}
 8008564:	bf00      	nop
 8008566:	3790      	adds	r7, #144	@ 0x90
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	0801bb28 	.word	0x0801bb28

08008570 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008570:	b5b0      	push	{r4, r5, r7, lr}
 8008572:	b0ac      	sub	sp, #176	@ 0xb0
 8008574:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008576:	4bac      	ldr	r3, [pc, #688]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008578:	22c0      	movs	r2, #192	@ 0xc0
 800857a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800857c:	4baa      	ldr	r3, [pc, #680]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 800857e:	22a8      	movs	r2, #168	@ 0xa8
 8008580:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8008582:	4ba9      	ldr	r3, [pc, #676]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008584:	220a      	movs	r2, #10
 8008586:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 8008588:	4ba7      	ldr	r3, [pc, #668]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 800858a:	2258      	movs	r2, #88	@ 0x58
 800858c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800858e:	4ba7      	ldr	r3, [pc, #668]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008590:	22ff      	movs	r2, #255	@ 0xff
 8008592:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008594:	4ba5      	ldr	r3, [pc, #660]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008596:	22ff      	movs	r2, #255	@ 0xff
 8008598:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800859a:	4ba4      	ldr	r3, [pc, #656]	@ (800882c <MX_LWIP_Init+0x2bc>)
 800859c:	22ff      	movs	r2, #255	@ 0xff
 800859e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80085a0:	4ba2      	ldr	r3, [pc, #648]	@ (800882c <MX_LWIP_Init+0x2bc>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80085a6:	4ba2      	ldr	r3, [pc, #648]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80085ac:	4ba0      	ldr	r3, [pc, #640]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80085b2:	4b9f      	ldr	r3, [pc, #636]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80085b8:	4b9d      	ldr	r3, [pc, #628]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80085be:	4b9a      	ldr	r3, [pc, #616]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461c      	mov	r4, r3
 80085c4:	4b98      	ldr	r3, [pc, #608]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	461a      	mov	r2, r3
 80085ca:	4b97      	ldr	r3, [pc, #604]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80085cc:	789b      	ldrb	r3, [r3, #2]
 80085ce:	4619      	mov	r1, r3
 80085d0:	4b95      	ldr	r3, [pc, #596]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80085d2:	78db      	ldrb	r3, [r3, #3]
 80085d4:	f107 0020 	add.w	r0, r7, #32
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	9101      	str	r1, [sp, #4]
 80085dc:	9200      	str	r2, [sp, #0]
 80085de:	4623      	mov	r3, r4
 80085e0:	4a94      	ldr	r2, [pc, #592]	@ (8008834 <MX_LWIP_Init+0x2c4>)
 80085e2:	2180      	movs	r1, #128	@ 0x80
 80085e4:	f011 ff64 	bl	801a4b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 80085e8:	f107 0320 	add.w	r3, r7, #32
 80085ec:	4619      	mov	r1, r3
 80085ee:	4892      	ldr	r0, [pc, #584]	@ (8008838 <MX_LWIP_Init+0x2c8>)
 80085f0:	f7ff ff9e 	bl	8008530 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80085f4:	4b8d      	ldr	r3, [pc, #564]	@ (800882c <MX_LWIP_Init+0x2bc>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	461c      	mov	r4, r3
 80085fa:	4b8c      	ldr	r3, [pc, #560]	@ (800882c <MX_LWIP_Init+0x2bc>)
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	461a      	mov	r2, r3
 8008600:	4b8a      	ldr	r3, [pc, #552]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008602:	789b      	ldrb	r3, [r3, #2]
 8008604:	4619      	mov	r1, r3
 8008606:	4b89      	ldr	r3, [pc, #548]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	f107 0020 	add.w	r0, r7, #32
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	9101      	str	r1, [sp, #4]
 8008612:	9200      	str	r2, [sp, #0]
 8008614:	4623      	mov	r3, r4
 8008616:	4a89      	ldr	r2, [pc, #548]	@ (800883c <MX_LWIP_Init+0x2cc>)
 8008618:	2180      	movs	r1, #128	@ 0x80
 800861a:	f011 ff49 	bl	801a4b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	4884      	ldr	r0, [pc, #528]	@ (8008838 <MX_LWIP_Init+0x2c8>)
 8008626:	f7ff ff83 	bl	8008530 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800862a:	4b81      	ldr	r3, [pc, #516]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	461c      	mov	r4, r3
 8008630:	4b7f      	ldr	r3, [pc, #508]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	461a      	mov	r2, r3
 8008636:	4b7e      	ldr	r3, [pc, #504]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	4619      	mov	r1, r3
 800863c:	4b7c      	ldr	r3, [pc, #496]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 800863e:	78db      	ldrb	r3, [r3, #3]
 8008640:	f107 0020 	add.w	r0, r7, #32
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	9101      	str	r1, [sp, #4]
 8008648:	9200      	str	r2, [sp, #0]
 800864a:	4623      	mov	r3, r4
 800864c:	4a7c      	ldr	r2, [pc, #496]	@ (8008840 <MX_LWIP_Init+0x2d0>)
 800864e:	2180      	movs	r1, #128	@ 0x80
 8008650:	f011 ff2e 	bl	801a4b0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 8008654:	f107 0320 	add.w	r3, r7, #32
 8008658:	4619      	mov	r1, r3
 800865a:	4877      	ldr	r0, [pc, #476]	@ (8008838 <MX_LWIP_Init+0x2c8>)
 800865c:	f7ff ff68 	bl	8008530 <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008660:	2100      	movs	r1, #0
 8008662:	2000      	movs	r0, #0
 8008664:	f006 fad8 	bl	800ec18 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008668:	4b6f      	ldr	r3, [pc, #444]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	061a      	lsls	r2, r3, #24
 800866e:	4b6e      	ldr	r3, [pc, #440]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	431a      	orrs	r2, r3
 8008676:	4b6c      	ldr	r3, [pc, #432]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008678:	789b      	ldrb	r3, [r3, #2]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	4313      	orrs	r3, r2
 800867e:	4a6a      	ldr	r2, [pc, #424]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008680:	78d2      	ldrb	r2, [r2, #3]
 8008682:	4313      	orrs	r3, r2
 8008684:	061a      	lsls	r2, r3, #24
 8008686:	4b68      	ldr	r3, [pc, #416]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	0619      	lsls	r1, r3, #24
 800868c:	4b66      	ldr	r3, [pc, #408]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	4319      	orrs	r1, r3
 8008694:	4b64      	ldr	r3, [pc, #400]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 8008696:	789b      	ldrb	r3, [r3, #2]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	430b      	orrs	r3, r1
 800869c:	4962      	ldr	r1, [pc, #392]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 800869e:	78c9      	ldrb	r1, [r1, #3]
 80086a0:	430b      	orrs	r3, r1
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086a8:	431a      	orrs	r2, r3
 80086aa:	4b5f      	ldr	r3, [pc, #380]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	0619      	lsls	r1, r3, #24
 80086b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	4319      	orrs	r1, r3
 80086b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086ba:	789b      	ldrb	r3, [r3, #2]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	430b      	orrs	r3, r1
 80086c0:	4959      	ldr	r1, [pc, #356]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086c2:	78c9      	ldrb	r1, [r1, #3]
 80086c4:	430b      	orrs	r3, r1
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086cc:	431a      	orrs	r2, r3
 80086ce:	4b56      	ldr	r3, [pc, #344]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	0619      	lsls	r1, r3, #24
 80086d4:	4b54      	ldr	r3, [pc, #336]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	4319      	orrs	r1, r3
 80086dc:	4b52      	ldr	r3, [pc, #328]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086de:	789b      	ldrb	r3, [r3, #2]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	430b      	orrs	r3, r1
 80086e4:	4950      	ldr	r1, [pc, #320]	@ (8008828 <MX_LWIP_Init+0x2b8>)
 80086e6:	78c9      	ldrb	r1, [r1, #3]
 80086e8:	430b      	orrs	r3, r1
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4a55      	ldr	r2, [pc, #340]	@ (8008844 <MX_LWIP_Init+0x2d4>)
 80086f0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80086f2:	4b4e      	ldr	r3, [pc, #312]	@ (800882c <MX_LWIP_Init+0x2bc>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	061a      	lsls	r2, r3, #24
 80086f8:	4b4c      	ldr	r3, [pc, #304]	@ (800882c <MX_LWIP_Init+0x2bc>)
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	041b      	lsls	r3, r3, #16
 80086fe:	431a      	orrs	r2, r3
 8008700:	4b4a      	ldr	r3, [pc, #296]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	4313      	orrs	r3, r2
 8008708:	4a48      	ldr	r2, [pc, #288]	@ (800882c <MX_LWIP_Init+0x2bc>)
 800870a:	78d2      	ldrb	r2, [r2, #3]
 800870c:	4313      	orrs	r3, r2
 800870e:	061a      	lsls	r2, r3, #24
 8008710:	4b46      	ldr	r3, [pc, #280]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	0619      	lsls	r1, r3, #24
 8008716:	4b45      	ldr	r3, [pc, #276]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	041b      	lsls	r3, r3, #16
 800871c:	4319      	orrs	r1, r3
 800871e:	4b43      	ldr	r3, [pc, #268]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	430b      	orrs	r3, r1
 8008726:	4941      	ldr	r1, [pc, #260]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008728:	78c9      	ldrb	r1, [r1, #3]
 800872a:	430b      	orrs	r3, r1
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008732:	431a      	orrs	r2, r3
 8008734:	4b3d      	ldr	r3, [pc, #244]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	0619      	lsls	r1, r3, #24
 800873a:	4b3c      	ldr	r3, [pc, #240]	@ (800882c <MX_LWIP_Init+0x2bc>)
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	041b      	lsls	r3, r3, #16
 8008740:	4319      	orrs	r1, r3
 8008742:	4b3a      	ldr	r3, [pc, #232]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008744:	789b      	ldrb	r3, [r3, #2]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	430b      	orrs	r3, r1
 800874a:	4938      	ldr	r1, [pc, #224]	@ (800882c <MX_LWIP_Init+0x2bc>)
 800874c:	78c9      	ldrb	r1, [r1, #3]
 800874e:	430b      	orrs	r3, r1
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008756:	431a      	orrs	r2, r3
 8008758:	4b34      	ldr	r3, [pc, #208]	@ (800882c <MX_LWIP_Init+0x2bc>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	0619      	lsls	r1, r3, #24
 800875e:	4b33      	ldr	r3, [pc, #204]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	041b      	lsls	r3, r3, #16
 8008764:	4319      	orrs	r1, r3
 8008766:	4b31      	ldr	r3, [pc, #196]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008768:	789b      	ldrb	r3, [r3, #2]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	430b      	orrs	r3, r1
 800876e:	492f      	ldr	r1, [pc, #188]	@ (800882c <MX_LWIP_Init+0x2bc>)
 8008770:	78c9      	ldrb	r1, [r1, #3]
 8008772:	430b      	orrs	r3, r1
 8008774:	0e1b      	lsrs	r3, r3, #24
 8008776:	4313      	orrs	r3, r2
 8008778:	4a33      	ldr	r2, [pc, #204]	@ (8008848 <MX_LWIP_Init+0x2d8>)
 800877a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800877c:	4b2c      	ldr	r3, [pc, #176]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	061a      	lsls	r2, r3, #24
 8008782:	4b2b      	ldr	r3, [pc, #172]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	431a      	orrs	r2, r3
 800878a:	4b29      	ldr	r3, [pc, #164]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	4313      	orrs	r3, r2
 8008792:	4a27      	ldr	r2, [pc, #156]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 8008794:	78d2      	ldrb	r2, [r2, #3]
 8008796:	4313      	orrs	r3, r2
 8008798:	061a      	lsls	r2, r3, #24
 800879a:	4b25      	ldr	r3, [pc, #148]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	0619      	lsls	r1, r3, #24
 80087a0:	4b23      	ldr	r3, [pc, #140]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	4319      	orrs	r1, r3
 80087a8:	4b21      	ldr	r3, [pc, #132]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087aa:	789b      	ldrb	r3, [r3, #2]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	430b      	orrs	r3, r1
 80087b0:	491f      	ldr	r1, [pc, #124]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087b2:	78c9      	ldrb	r1, [r1, #3]
 80087b4:	430b      	orrs	r3, r1
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087bc:	431a      	orrs	r2, r3
 80087be:	4b1c      	ldr	r3, [pc, #112]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	0619      	lsls	r1, r3, #24
 80087c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	4319      	orrs	r1, r3
 80087cc:	4b18      	ldr	r3, [pc, #96]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087ce:	789b      	ldrb	r3, [r3, #2]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	430b      	orrs	r3, r1
 80087d4:	4916      	ldr	r1, [pc, #88]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087d6:	78c9      	ldrb	r1, [r1, #3]
 80087d8:	430b      	orrs	r3, r1
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80087e0:	431a      	orrs	r2, r3
 80087e2:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	0619      	lsls	r1, r3, #24
 80087e8:	4b11      	ldr	r3, [pc, #68]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	4319      	orrs	r1, r3
 80087f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087f2:	789b      	ldrb	r3, [r3, #2]
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	430b      	orrs	r3, r1
 80087f8:	490d      	ldr	r1, [pc, #52]	@ (8008830 <MX_LWIP_Init+0x2c0>)
 80087fa:	78c9      	ldrb	r1, [r1, #3]
 80087fc:	430b      	orrs	r3, r1
 80087fe:	0e1b      	lsrs	r3, r3, #24
 8008800:	4313      	orrs	r3, r2
 8008802:	4a12      	ldr	r2, [pc, #72]	@ (800884c <MX_LWIP_Init+0x2dc>)
 8008804:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008806:	4b12      	ldr	r3, [pc, #72]	@ (8008850 <MX_LWIP_Init+0x2e0>)
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	4b12      	ldr	r3, [pc, #72]	@ (8008854 <MX_LWIP_Init+0x2e4>)
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	2300      	movs	r3, #0
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <MX_LWIP_Init+0x2dc>)
 8008814:	4a0c      	ldr	r2, [pc, #48]	@ (8008848 <MX_LWIP_Init+0x2d8>)
 8008816:	490b      	ldr	r1, [pc, #44]	@ (8008844 <MX_LWIP_Init+0x2d4>)
 8008818:	480f      	ldr	r0, [pc, #60]	@ (8008858 <MX_LWIP_Init+0x2e8>)
 800881a:	f006 ffc7 	bl	800f7ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800881e:	480e      	ldr	r0, [pc, #56]	@ (8008858 <MX_LWIP_Init+0x2e8>)
 8008820:	f007 f976 	bl	800fb10 <netif_set_default>
 8008824:	e01a      	b.n	800885c <MX_LWIP_Init+0x2ec>
 8008826:	bf00      	nop
 8008828:	200006b8 	.word	0x200006b8
 800882c:	200006bc 	.word	0x200006bc
 8008830:	200006c0 	.word	0x200006c0
 8008834:	0801bd50 	.word	0x0801bd50
 8008838:	0801bd60 	.word	0x0801bd60
 800883c:	0801bd6c 	.word	0x0801bd6c
 8008840:	0801bd84 	.word	0x0801bd84
 8008844:	200006ac 	.word	0x200006ac
 8008848:	200006b0 	.word	0x200006b0
 800884c:	200006b4 	.word	0x200006b4
 8008850:	0800eb55 	.word	0x0800eb55
 8008854:	0800939d 	.word	0x0800939d
 8008858:	20000678 	.word	0x20000678

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800885c:	4812      	ldr	r0, [pc, #72]	@ (80088a8 <MX_LWIP_Init+0x338>)
 800885e:	f007 f967 	bl	800fb30 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008862:	4912      	ldr	r1, [pc, #72]	@ (80088ac <MX_LWIP_Init+0x33c>)
 8008864:	4810      	ldr	r0, [pc, #64]	@ (80088a8 <MX_LWIP_Init+0x338>)
 8008866:	f007 fa33 	bl	800fcd0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800886a:	4911      	ldr	r1, [pc, #68]	@ (80088b0 <MX_LWIP_Init+0x340>)
 800886c:	4811      	ldr	r0, [pc, #68]	@ (80088b4 <MX_LWIP_Init+0x344>)
 800886e:	f7ff fe5f 	bl	8008530 <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8008872:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <MX_LWIP_Init+0x348>)
 8008874:	1d3c      	adds	r4, r7, #4
 8008876:	461d      	mov	r5, r3
 8008878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800887a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800887c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008880:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	4908      	ldr	r1, [pc, #32]	@ (80088a8 <MX_LWIP_Init+0x338>)
 8008888:	4618      	mov	r0, r3
 800888a:	f003 f93f 	bl	800bb0c <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800888e:	490b      	ldr	r1, [pc, #44]	@ (80088bc <MX_LWIP_Init+0x34c>)
 8008890:	4808      	ldr	r0, [pc, #32]	@ (80088b4 <MX_LWIP_Init+0x344>)
 8008892:	f7ff fe4d 	bl	8008530 <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 8008896:	490a      	ldr	r1, [pc, #40]	@ (80088c0 <MX_LWIP_Init+0x350>)
 8008898:	4806      	ldr	r0, [pc, #24]	@ (80088b4 <MX_LWIP_Init+0x344>)
 800889a:	f7ff fe49 	bl	8008530 <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800889e:	bf00      	nop
 80088a0:	37a0      	adds	r7, #160	@ 0xa0
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bdb0      	pop	{r4, r5, r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000678 	.word	0x20000678
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	0801bd9c 	.word	0x0801bd9c
 80088b4:	0801bd60 	.word	0x0801bd60
 80088b8:	0801be20 	.word	0x0801be20
 80088bc:	0801bdc4 	.word	0x0801bdc4
 80088c0:	0801bdec 	.word	0x0801bdec

080088c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b0a2      	sub	sp, #136	@ 0x88
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d016      	beq.n	800890a <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 80088dc:	490f      	ldr	r1, [pc, #60]	@ (800891c <ethernet_link_status_updated+0x58>)
 80088de:	4810      	ldr	r0, [pc, #64]	@ (8008920 <ethernet_link_status_updated+0x5c>)
 80088e0:	f7ff fe26 	bl	8008530 <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00f fefb 	bl	80186e4 <ip4addr_ntoa>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f107 0008 	add.w	r0, r7, #8
 80088f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008924 <ethernet_link_status_updated+0x60>)
 80088f6:	2180      	movs	r1, #128	@ 0x80
 80088f8:	f011 fdda 	bl	801a4b0 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	4619      	mov	r1, r3
 8008902:	4807      	ldr	r0, [pc, #28]	@ (8008920 <ethernet_link_status_updated+0x5c>)
 8008904:	f7ff fe14 	bl	8008530 <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 8008908:	e003      	b.n	8008912 <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800890a:	4907      	ldr	r1, [pc, #28]	@ (8008928 <ethernet_link_status_updated+0x64>)
 800890c:	4804      	ldr	r0, [pc, #16]	@ (8008920 <ethernet_link_status_updated+0x5c>)
 800890e:	f7ff fe0f 	bl	8008530 <lwip_cdc_debug_log>
}
 8008912:	bf00      	nop
 8008914:	3788      	adds	r7, #136	@ 0x88
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	0801be3c 	.word	0x0801be3c
 8008920:	0801be54 	.word	0x0801be54
 8008924:	0801be60 	.word	0x0801be60
 8008928:	0801be78 	.word	0x0801be78

0800892c <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7f7 fc4b 	bl	80001d0 <strlen>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	b29b      	uxth	r3, r3
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f011 f842 	bl	80199d4 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 8008950:	2001      	movs	r0, #1
 8008952:	f7f9 ffcf 	bl	80028f4 <HAL_Delay>
  }
}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b0a6      	sub	sp, #152	@ 0x98
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800896a:	f7f9 ffb7 	bl	80028dc <HAL_GetTick>
 800896e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 8008972:	f107 000c 	add.w	r0, r7, #12
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008982:	4a06      	ldr	r2, [pc, #24]	@ (800899c <cdc_debug_log+0x3c>)
 8008984:	2180      	movs	r1, #128	@ 0x80
 8008986:	f011 fd93 	bl	801a4b0 <sniprintf>
  cdc_debug_printf(debug_buf);
 800898a:	f107 030c 	add.w	r3, r7, #12
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ffcc 	bl	800892c <cdc_debug_printf>
}
 8008994:	bf00      	nop
 8008996:	3790      	adds	r7, #144	@ 0x90
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	0801be94 	.word	0x0801be94

080089a0 <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a2:	b0cf      	sub	sp, #316	@ 0x13c
 80089a4:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 80089a6:	495d      	ldr	r1, [pc, #372]	@ (8008b1c <debug_eth_dma_descriptors+0x17c>)
 80089a8:	485d      	ldr	r0, [pc, #372]	@ (8008b20 <debug_eth_dma_descriptors+0x180>)
 80089aa:	f7ff ffd9 	bl	8008960 <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 80089ae:	2300      	movs	r3, #0
 80089b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80089b4:	e048      	b.n	8008a48 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 80089b6:	495b      	ldr	r1, [pc, #364]	@ (8008b24 <debug_eth_dma_descriptors+0x184>)
 80089b8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	440b      	add	r3, r1
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 80089cc:	4955      	ldr	r1, [pc, #340]	@ (8008b24 <debug_eth_dma_descriptors+0x184>)
 80089ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	440b      	add	r3, r1
 80089dc:	3308      	adds	r3, #8
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 80089e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80089e8:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 80089ea:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80089ee:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 80089f0:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 80089f4:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80089f8:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 80089fa:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 80089fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8008a02:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 8008a04:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 8008a08:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8008a0c:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 8008a0e:	f3c4 040d 	ubfx	r4, r4, #0, #14
 8008a12:	1d3e      	adds	r6, r7, #4
 8008a14:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 8008a18:	9505      	str	r5, [sp, #20]
 8008a1a:	9404      	str	r4, [sp, #16]
 8008a1c:	9003      	str	r0, [sp, #12]
 8008a1e:	9102      	str	r1, [sp, #8]
 8008a20:	9201      	str	r2, [sp, #4]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008a28:	4a3f      	ldr	r2, [pc, #252]	@ (8008b28 <debug_eth_dma_descriptors+0x188>)
 8008a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f011 fd3e 	bl	801a4b0 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8008a34:	1d3b      	adds	r3, r7, #4
 8008a36:	4619      	mov	r1, r3
 8008a38:	4839      	ldr	r0, [pc, #228]	@ (8008b20 <debug_eth_dma_descriptors+0x180>)
 8008a3a:	f7ff ff91 	bl	8008960 <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 8008a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008a42:	3301      	adds	r3, #1
 8008a44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d9b2      	bls.n	80089b6 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 8008a50:	4936      	ldr	r1, [pc, #216]	@ (8008b2c <debug_eth_dma_descriptors+0x18c>)
 8008a52:	4833      	ldr	r0, [pc, #204]	@ (8008b20 <debug_eth_dma_descriptors+0x180>)
 8008a54:	f7ff ff84 	bl	8008960 <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008a5e:	e053      	b.n	8008b08 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 8008a60:	4933      	ldr	r1, [pc, #204]	@ (8008b30 <debug_eth_dma_descriptors+0x190>)
 8008a62:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	440b      	add	r3, r1
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 8008a76:	492e      	ldr	r1, [pc, #184]	@ (8008b30 <debug_eth_dma_descriptors+0x190>)
 8008a78:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	440b      	add	r3, r1
 8008a86:	3304      	adds	r3, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 8008a8e:	4928      	ldr	r1, [pc, #160]	@ (8008b30 <debug_eth_dma_descriptors+0x190>)
 8008a90:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 8008aac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8008ab0:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 8008ab2:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 8008ab6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8008aba:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 8008abc:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 8008ac0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8008ac4:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 8008ac6:	f000 0001 	and.w	r0, r0, #1
 8008aca:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 8008ace:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8008ad2:	1d3e      	adds	r6, r7, #4
 8008ad4:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 8008ad8:	9505      	str	r5, [sp, #20]
 8008ada:	9404      	str	r4, [sp, #16]
 8008adc:	9003      	str	r0, [sp, #12]
 8008ade:	9102      	str	r1, [sp, #8]
 8008ae0:	9201      	str	r2, [sp, #4]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008ae8:	4a12      	ldr	r2, [pc, #72]	@ (8008b34 <debug_eth_dma_descriptors+0x194>)
 8008aea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008aee:	4630      	mov	r0, r6
 8008af0:	f011 fcde 	bl	801a4b0 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8008af4:	1d3b      	adds	r3, r7, #4
 8008af6:	4619      	mov	r1, r3
 8008af8:	4809      	ldr	r0, [pc, #36]	@ (8008b20 <debug_eth_dma_descriptors+0x180>)
 8008afa:	f7ff ff31 	bl	8008960 <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 8008afe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008b02:	3301      	adds	r3, #1
 8008b04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008b08:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d9a7      	bls.n	8008a60 <debug_eth_dma_descriptors+0xc0>
  }
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1c:	0801bf74 	.word	0x0801bf74
 8008b20:	0801bf94 	.word	0x0801bf94
 8008b24:	20005050 	.word	0x20005050
 8008b28:	0801bfa0 	.word	0x0801bfa0
 8008b2c:	0801bfdc 	.word	0x0801bfdc
 8008b30:	200050f0 	.word	0x200050f0
 8008b34:	0801bffc 	.word	0x0801bffc

08008b38 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b0a0      	sub	sp, #128	@ 0x80
 8008b3c:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 8008b3e:	4b25      	ldr	r3, [pc, #148]	@ (8008bd4 <debug_eth_dma_registers+0x9c>)
 8008b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4638      	mov	r0, r7
 8008b48:	4a23      	ldr	r2, [pc, #140]	@ (8008bd8 <debug_eth_dma_registers+0xa0>)
 8008b4a:	2180      	movs	r1, #128	@ 0x80
 8008b4c:	f011 fcb0 	bl	801a4b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8008b50:	463b      	mov	r3, r7
 8008b52:	4619      	mov	r1, r3
 8008b54:	4821      	ldr	r0, [pc, #132]	@ (8008bdc <debug_eth_dma_registers+0xa4>)
 8008b56:	f7ff ff03 	bl	8008960 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 8008b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd4 <debug_eth_dma_registers+0x9c>)
 8008b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	4638      	mov	r0, r7
 8008b64:	4a1e      	ldr	r2, [pc, #120]	@ (8008be0 <debug_eth_dma_registers+0xa8>)
 8008b66:	2180      	movs	r1, #128	@ 0x80
 8008b68:	f011 fca2 	bl	801a4b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	4619      	mov	r1, r3
 8008b70:	481a      	ldr	r0, [pc, #104]	@ (8008bdc <debug_eth_dma_registers+0xa4>)
 8008b72:	f7ff fef5 	bl	8008960 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 8008b76:	4b17      	ldr	r3, [pc, #92]	@ (8008bd4 <debug_eth_dma_registers+0x9c>)
 8008b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	4638      	mov	r0, r7
 8008b80:	4a18      	ldr	r2, [pc, #96]	@ (8008be4 <debug_eth_dma_registers+0xac>)
 8008b82:	2180      	movs	r1, #128	@ 0x80
 8008b84:	f011 fc94 	bl	801a4b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8008b88:	463b      	mov	r3, r7
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4813      	ldr	r0, [pc, #76]	@ (8008bdc <debug_eth_dma_registers+0xa4>)
 8008b8e:	f7ff fee7 	bl	8008960 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 8008b92:	4b10      	ldr	r3, [pc, #64]	@ (8008bd4 <debug_eth_dma_registers+0x9c>)
 8008b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	4a12      	ldr	r2, [pc, #72]	@ (8008be8 <debug_eth_dma_registers+0xb0>)
 8008b9e:	2180      	movs	r1, #128	@ 0x80
 8008ba0:	f011 fc86 	bl	801a4b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	480c      	ldr	r0, [pc, #48]	@ (8008bdc <debug_eth_dma_registers+0xa4>)
 8008baa:	f7ff fed9 	bl	8008960 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 8008bae:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <debug_eth_dma_registers+0x9c>)
 8008bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8008bec <debug_eth_dma_registers+0xb4>)
 8008bba:	2180      	movs	r1, #128	@ 0x80
 8008bbc:	f011 fc78 	bl	801a4b0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4805      	ldr	r0, [pc, #20]	@ (8008bdc <debug_eth_dma_registers+0xa4>)
 8008bc6:	f7ff fecb 	bl	8008960 <cdc_debug_log>
}
 8008bca:	bf00      	nop
 8008bcc:	3780      	adds	r7, #128	@ 0x80
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40028000 	.word	0x40028000
 8008bd8:	0801c038 	.word	0x0801c038
 8008bdc:	0801c048 	.word	0x0801c048
 8008be0:	0801c050 	.word	0x0801c050
 8008be4:	0801c060 	.word	0x0801c060
 8008be8:	0801c070 	.word	0x0801c070
 8008bec:	0801c084 	.word	0x0801c084

08008bf0 <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b0a2      	sub	sp, #136	@ 0x88
 8008bf4:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 8008bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c68 <debug_eth_config+0x78>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8008c6c <debug_eth_config+0x7c>)
 8008bfe:	2180      	movs	r1, #128	@ 0x80
 8008c00:	f011 fc56 	bl	801a4b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8008c04:	463b      	mov	r3, r7
 8008c06:	4619      	mov	r1, r3
 8008c08:	4819      	ldr	r0, [pc, #100]	@ (8008c70 <debug_eth_config+0x80>)
 8008c0a:	f7ff fea9 	bl	8008960 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 8008c0e:	4b16      	ldr	r3, [pc, #88]	@ (8008c68 <debug_eth_config+0x78>)
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	4638      	mov	r0, r7
 8008c14:	4a17      	ldr	r2, [pc, #92]	@ (8008c74 <debug_eth_config+0x84>)
 8008c16:	2180      	movs	r1, #128	@ 0x80
 8008c18:	f011 fc4a 	bl	801a4b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4813      	ldr	r0, [pc, #76]	@ (8008c70 <debug_eth_config+0x80>)
 8008c22:	f7ff fe9d 	bl	8008960 <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 8008c26:	4b10      	ldr	r3, [pc, #64]	@ (8008c68 <debug_eth_config+0x78>)
 8008c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	4638      	mov	r0, r7
 8008c30:	4a11      	ldr	r2, [pc, #68]	@ (8008c78 <debug_eth_config+0x88>)
 8008c32:	2180      	movs	r1, #128	@ 0x80
 8008c34:	f011 fc3c 	bl	801a4b0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 8008c38:	463b      	mov	r3, r7
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	480c      	ldr	r0, [pc, #48]	@ (8008c70 <debug_eth_config+0x80>)
 8008c3e:	f7ff fe8f 	bl	8008960 <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 8008c42:	4638      	mov	r0, r7
 8008c44:	230c      	movs	r3, #12
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2304      	movs	r3, #4
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8008c7c <debug_eth_config+0x8c>)
 8008c50:	2180      	movs	r1, #128	@ 0x80
 8008c52:	f011 fc2d 	bl	801a4b0 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 8008c56:	463b      	mov	r3, r7
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <debug_eth_config+0x80>)
 8008c5c:	f7ff fe80 	bl	8008960 <cdc_debug_log>
}
 8008c60:	bf00      	nop
 8008c62:	3780      	adds	r7, #128	@ 0x80
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40028000 	.word	0x40028000
 8008c6c:	0801c098 	.word	0x0801c098
 8008c70:	0801c0a8 	.word	0x0801c0a8
 8008c74:	0801c0b0 	.word	0x0801c0b0
 8008c78:	0801c0c0 	.word	0x0801c0c0
 8008c7c:	0801c0d0 	.word	0x0801c0d0

08008c80 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008c88:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <HAL_ETH_RxCpltCallback+0x1c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f003 f8b9 	bl	800be04 <osSemaphoreRelease>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200051c4 	.word	0x200051c4

08008ca0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008ca8:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <HAL_ETH_TxCpltCallback+0x1c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f003 f8a9 	bl	800be04 <osSemaphoreRelease>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200051c8 	.word	0x200051c8

08008cc0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fa fd1f 	bl	800370c <HAL_ETH_GetDMAError>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd4:	2b80      	cmp	r3, #128	@ 0x80
 8008cd6:	d104      	bne.n	8008ce2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008cd8:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <HAL_ETH_ErrorCallback+0x2c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f003 f891 	bl	800be04 <osSemaphoreRelease>
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200051c4 	.word	0x200051c4

08008cf0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b0ce      	sub	sp, #312	@ 0x138
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008cfe:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008d06:	4bba      	ldr	r3, [pc, #744]	@ (8008ff0 <low_level_init+0x300>)
 8008d08:	4aba      	ldr	r2, [pc, #744]	@ (8008ff4 <low_level_init+0x304>)
 8008d0a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 8008d12:	2380      	movs	r3, #128	@ 0x80
 8008d14:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 8008d18:	23e1      	movs	r3, #225	@ 0xe1
 8008d1a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 8008d30:	4aaf      	ldr	r2, [pc, #700]	@ (8008ff0 <low_level_init+0x300>)
 8008d32:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008d36:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008d38:	4bad      	ldr	r3, [pc, #692]	@ (8008ff0 <low_level_init+0x300>)
 8008d3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008d3e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008d40:	4bab      	ldr	r3, [pc, #684]	@ (8008ff0 <low_level_init+0x300>)
 8008d42:	4aad      	ldr	r2, [pc, #692]	@ (8008ff8 <low_level_init+0x308>)
 8008d44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008d46:	4baa      	ldr	r3, [pc, #680]	@ (8008ff0 <low_level_init+0x300>)
 8008d48:	4aac      	ldr	r2, [pc, #688]	@ (8008ffc <low_level_init+0x30c>)
 8008d4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008d4c:	4ba8      	ldr	r3, [pc, #672]	@ (8008ff0 <low_level_init+0x300>)
 8008d4e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008d52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008d54:	48a6      	ldr	r0, [pc, #664]	@ (8008ff0 <low_level_init+0x300>)
 8008d56:	f7f9 fed3 	bl	8002b00 <HAL_ETH_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008d60:	2238      	movs	r2, #56	@ 0x38
 8008d62:	2100      	movs	r1, #0
 8008d64:	48a6      	ldr	r0, [pc, #664]	@ (8009000 <low_level_init+0x310>)
 8008d66:	f011 fc46 	bl	801a5f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008d6a:	4ba5      	ldr	r3, [pc, #660]	@ (8009000 <low_level_init+0x310>)
 8008d6c:	2221      	movs	r2, #33	@ 0x21
 8008d6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008d70:	4ba3      	ldr	r3, [pc, #652]	@ (8009000 <low_level_init+0x310>)
 8008d72:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008d76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008d78:	4ba1      	ldr	r3, [pc, #644]	@ (8009000 <low_level_init+0x310>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008d7e:	48a1      	ldr	r0, [pc, #644]	@ (8009004 <low_level_init+0x314>)
 8008d80:	f006 fbce 	bl	800f520 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008d84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2206      	movs	r2, #6
 8008d90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008d94:	4b96      	ldr	r3, [pc, #600]	@ (8008ff0 <low_level_init+0x300>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008da8:	4b91      	ldr	r3, [pc, #580]	@ (8008ff0 <low_level_init+0x300>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	785a      	ldrb	r2, [r3, #1]
 8008dae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008db2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8008ff0 <low_level_init+0x300>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	789a      	ldrb	r2, [r3, #2]
 8008dc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008dd0:	4b87      	ldr	r3, [pc, #540]	@ (8008ff0 <low_level_init+0x300>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	78da      	ldrb	r2, [r3, #3]
 8008dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008de4:	4b82      	ldr	r3, [pc, #520]	@ (8008ff0 <low_level_init+0x300>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	791a      	ldrb	r2, [r3, #4]
 8008dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008df8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ff0 <low_level_init+0x300>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	795a      	ldrb	r2, [r3, #5]
 8008dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008e0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008e1a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008e1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008e2a:	f043 030a 	orr.w	r3, r3, #10
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008e4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008e4e:	2101      	movs	r1, #1
 8008e50:	4618      	mov	r0, r3
 8008e52:	f002 ff57 	bl	800bd04 <osSemaphoreCreate>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4a6b      	ldr	r2, [pc, #428]	@ (8009008 <low_level_init+0x318>)
 8008e5a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e62:	2300      	movs	r3, #0
 8008e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8008e68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f002 ff48 	bl	800bd04 <osSemaphoreCreate>
 8008e74:	4603      	mov	r3, r0
 8008e76:	4a65      	ldr	r2, [pc, #404]	@ (800900c <low_level_init+0x31c>)
 8008e78:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8008e7a:	4b63      	ldr	r3, [pc, #396]	@ (8009008 <low_level_init+0x318>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 ff71 	bl	800bd68 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8008e86:	4b61      	ldr	r3, [pc, #388]	@ (800900c <low_level_init+0x31c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 ff6b 	bl	800bd68 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008e92:	4b5f      	ldr	r3, [pc, #380]	@ (8009010 <low_level_init+0x320>)
 8008e94:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8008e98:	461d      	mov	r5, r3
 8008e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008eae:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	f002 fe29 	bl	800bb0c <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8008eba:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 8158 	bne.w	8009174 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 8008ec4:	4953      	ldr	r1, [pc, #332]	@ (8009014 <low_level_init+0x324>)
 8008ec6:	4854      	ldr	r0, [pc, #336]	@ (8009018 <low_level_init+0x328>)
 8008ec8:	f7ff fd4a 	bl	8008960 <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 8008ecc:	4b53      	ldr	r3, [pc, #332]	@ (800901c <low_level_init+0x32c>)
 8008ece:	4a54      	ldr	r2, [pc, #336]	@ (8009020 <low_level_init+0x330>)
 8008ed0:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 8008ed2:	4b52      	ldr	r3, [pc, #328]	@ (800901c <low_level_init+0x32c>)
 8008ed4:	4a53      	ldr	r2, [pc, #332]	@ (8009024 <low_level_init+0x334>)
 8008ed6:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 8008ed8:	4b50      	ldr	r3, [pc, #320]	@ (800901c <low_level_init+0x32c>)
 8008eda:	4a53      	ldr	r2, [pc, #332]	@ (8009028 <low_level_init+0x338>)
 8008edc:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 8008ede:	4b4f      	ldr	r3, [pc, #316]	@ (800901c <low_level_init+0x32c>)
 8008ee0:	4a52      	ldr	r2, [pc, #328]	@ (800902c <low_level_init+0x33c>)
 8008ee2:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 8008ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800901c <low_level_init+0x32c>)
 8008ee6:	4a52      	ldr	r2, [pc, #328]	@ (8009030 <low_level_init+0x340>)
 8008ee8:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 8008eea:	494c      	ldr	r1, [pc, #304]	@ (800901c <low_level_init+0x32c>)
 8008eec:	4851      	ldr	r0, [pc, #324]	@ (8009034 <low_level_init+0x344>)
 8008eee:	f7f9 fae6 	bl	80024be <eth_chip_regster_bus_io>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 8008ef8:	494f      	ldr	r1, [pc, #316]	@ (8009038 <low_level_init+0x348>)
 8008efa:	4847      	ldr	r0, [pc, #284]	@ (8009018 <low_level_init+0x328>)
 8008efc:	f7ff fd30 	bl	8008960 <cdc_debug_log>
      Error_Handler();
 8008f00:	f7f7 fd72 	bl	80009e8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 8008f04:	494d      	ldr	r1, [pc, #308]	@ (800903c <low_level_init+0x34c>)
 8008f06:	4844      	ldr	r0, [pc, #272]	@ (8009018 <low_level_init+0x328>)
 8008f08:	f7ff fd2a 	bl	8008960 <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 8008f0c:	4849      	ldr	r0, [pc, #292]	@ (8009034 <low_level_init+0x344>)
 8008f0e:	f7f9 fb09 	bl	8002524 <eth_chip_init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 8008f18:	4949      	ldr	r1, [pc, #292]	@ (8009040 <low_level_init+0x350>)
 8008f1a:	483f      	ldr	r0, [pc, #252]	@ (8009018 <low_level_init+0x328>)
 8008f1c:	f7ff fd20 	bl	8008960 <cdc_debug_log>
      Error_Handler();
 8008f20:	f7f7 fd62 	bl	80009e8 <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 8008f24:	4b43      	ldr	r3, [pc, #268]	@ (8009034 <low_level_init+0x344>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f107 0008 	add.w	r0, r7, #8
 8008f2c:	4a45      	ldr	r2, [pc, #276]	@ (8009044 <low_level_init+0x354>)
 8008f2e:	2140      	movs	r1, #64	@ 0x40
 8008f30:	f011 fabe 	bl	801a4b0 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4837      	ldr	r0, [pc, #220]	@ (8009018 <low_level_init+0x328>)
 8008f3c:	f7ff fd10 	bl	8008960 <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 8008f40:	483c      	ldr	r0, [pc, #240]	@ (8009034 <low_level_init+0x344>)
 8008f42:	f7f9 fbf5 	bl	8002730 <eth_chip_disable_power_down_mode>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 8008f4c:	493e      	ldr	r1, [pc, #248]	@ (8009048 <low_level_init+0x358>)
 8008f4e:	4832      	ldr	r0, [pc, #200]	@ (8009018 <low_level_init+0x328>)
 8008f50:	f7ff fd06 	bl	8008960 <cdc_debug_log>
      Error_Handler();
 8008f54:	f7f7 fd48 	bl	80009e8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 8008f58:	493c      	ldr	r1, [pc, #240]	@ (800904c <low_level_init+0x35c>)
 8008f5a:	482f      	ldr	r0, [pc, #188]	@ (8009018 <low_level_init+0x328>)
 8008f5c:	f7ff fd00 	bl	8008960 <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 8008f60:	4834      	ldr	r0, [pc, #208]	@ (8009034 <low_level_init+0x344>)
 8008f62:	f7f9 fc12 	bl	800278a <eth_chip_start_auto_nego>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 8008f6c:	4938      	ldr	r1, [pc, #224]	@ (8009050 <low_level_init+0x360>)
 8008f6e:	482a      	ldr	r0, [pc, #168]	@ (8009018 <low_level_init+0x328>)
 8008f70:	f7ff fcf6 	bl	8008960 <cdc_debug_log>
      Error_Handler();
 8008f74:	f7f7 fd38 	bl	80009e8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 8008f78:	4936      	ldr	r1, [pc, #216]	@ (8009054 <low_level_init+0x364>)
 8008f7a:	4827      	ldr	r0, [pc, #156]	@ (8009018 <low_level_init+0x328>)
 8008f7c:	f7ff fcf0 	bl	8008960 <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 8008f86:	2064      	movs	r0, #100	@ 0x64
 8008f88:	f7f9 fcb4 	bl	80028f4 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 8008f8c:	4829      	ldr	r0, [pc, #164]	@ (8009034 <low_level_init+0x344>)
 8008f8e:	f7f9 fc29 	bl	80027e4 <eth_chip_get_link_state>
 8008f92:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 8008f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 8008fa0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8008fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8009058 <low_level_init+0x368>)
 8008fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8008faa:	08da      	lsrs	r2, r3, #3
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	1aca      	subs	r2, r1, r3
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d110      	bne.n	8008fdc <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 8008fba:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8008fbe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fc8:	4a24      	ldr	r2, [pc, #144]	@ (800905c <low_level_init+0x36c>)
 8008fca:	2140      	movs	r1, #64	@ 0x40
 8008fcc:	f011 fa70 	bl	801a4b0 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 8008fd0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4810      	ldr	r0, [pc, #64]	@ (8009018 <low_level_init+0x328>)
 8008fd8:	f7ff fcc2 	bl	8008960 <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 8008fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fe0:	2b32      	cmp	r3, #50	@ 0x32
 8008fe2:	d93f      	bls.n	8009064 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 8008fe4:	491e      	ldr	r1, [pc, #120]	@ (8009060 <low_level_init+0x370>)
 8008fe6:	480c      	ldr	r0, [pc, #48]	@ (8009018 <low_level_init+0x328>)
 8008fe8:	f7ff fcba 	bl	8008960 <cdc_debug_log>
        break;
 8008fec:	e043      	b.n	8009076 <low_level_init+0x386>
 8008fee:	bf00      	nop
 8008ff0:	200051cc 	.word	0x200051cc
 8008ff4:	40028000 	.word	0x40028000
 8008ff8:	200050f0 	.word	0x200050f0
 8008ffc:	20005050 	.word	0x20005050
 8009000:	2000527c 	.word	0x2000527c
 8009004:	0801f418 	.word	0x0801f418
 8009008:	200051c4 	.word	0x200051c4
 800900c:	200051c8 	.word	0x200051c8
 8009010:	0801c400 	.word	0x0801c400
 8009014:	0801c100 	.word	0x0801c100
 8009018:	0801c124 	.word	0x0801c124
 800901c:	200051b0 	.word	0x200051b0
 8009020:	08009449 	.word	0x08009449
 8009024:	08009475 	.word	0x08009475
 8009028:	0800949d 	.word	0x0800949d
 800902c:	080094f5 	.word	0x080094f5
 8009030:	08009551 	.word	0x08009551
 8009034:	20005190 	.word	0x20005190
 8009038:	0801c130 	.word	0x0801c130
 800903c:	0801c154 	.word	0x0801c154
 8009040:	0801c180 	.word	0x0801c180
 8009044:	0801c1a0 	.word	0x0801c1a0
 8009048:	0801c1c4 	.word	0x0801c1c4
 800904c:	0801c1ec 	.word	0x0801c1ec
 8009050:	0801c20c 	.word	0x0801c20c
 8009054:	0801c230 	.word	0x0801c230
 8009058:	cccccccd 	.word	0xcccccccd
 800905c:	0801c258 	.word	0x0801c258
 8009060:	0801c27c 	.word	0x0801c27c
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 8009064:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009068:	2b06      	cmp	r3, #6
 800906a:	d08c      	beq.n	8008f86 <low_level_init+0x296>
 800906c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009070:	f113 0f05 	cmn.w	r3, #5
 8009074:	d087      	beq.n	8008f86 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 8009076:	4843      	ldr	r0, [pc, #268]	@ (8009184 <low_level_init+0x494>)
 8009078:	f7f9 fbb4 	bl	80027e4 <eth_chip_get_link_state>
 800907c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 8009080:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8009084:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009088:	4a3f      	ldr	r2, [pc, #252]	@ (8009188 <low_level_init+0x498>)
 800908a:	2140      	movs	r1, #64	@ 0x40
 800908c:	f011 fa10 	bl	801a4b0 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 8009090:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009094:	4619      	mov	r1, r3
 8009096:	483d      	ldr	r0, [pc, #244]	@ (800918c <low_level_init+0x49c>)
 8009098:	f7ff fc62 	bl	8008960 <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800909c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80090a0:	f113 0f05 	cmn.w	r3, #5
 80090a4:	d053      	beq.n	800914e <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 80090a6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80090aa:	4619      	mov	r1, r3
 80090ac:	4838      	ldr	r0, [pc, #224]	@ (8009190 <low_level_init+0x4a0>)
 80090ae:	f7fa fa0f 	bl	80034d0 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 80090b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80090b6:	3b02      	subs	r3, #2
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d83b      	bhi.n	8009134 <low_level_init+0x444>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <low_level_init+0x3d4>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090ef 	.word	0x080090ef
 80090cc:	08009107 	.word	0x08009107
 80090d0:	0800911f 	.word	0x0800911f
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 80090d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 80090dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 80090e4:	492b      	ldr	r1, [pc, #172]	@ (8009194 <low_level_init+0x4a4>)
 80090e6:	4829      	ldr	r0, [pc, #164]	@ (800918c <low_level_init+0x49c>)
 80090e8:	f7ff fc3a 	bl	8008960 <cdc_debug_log>
          break;
 80090ec:	e02f      	b.n	800914e <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 80090f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 80090fc:	4926      	ldr	r1, [pc, #152]	@ (8009198 <low_level_init+0x4a8>)
 80090fe:	4823      	ldr	r0, [pc, #140]	@ (800918c <low_level_init+0x49c>)
 8009100:	f7ff fc2e 	bl	8008960 <cdc_debug_log>
          break;
 8009104:	e023      	b.n	800914e <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800910a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800910e:	2300      	movs	r3, #0
 8009110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 8009114:	4921      	ldr	r1, [pc, #132]	@ (800919c <low_level_init+0x4ac>)
 8009116:	481d      	ldr	r0, [pc, #116]	@ (800918c <low_level_init+0x49c>)
 8009118:	f7ff fc22 	bl	8008960 <cdc_debug_log>
          break;
 800911c:	e017      	b.n	800914e <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800911e:	2300      	movs	r3, #0
 8009120:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 8009124:	2300      	movs	r3, #0
 8009126:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800912a:	491d      	ldr	r1, [pc, #116]	@ (80091a0 <low_level_init+0x4b0>)
 800912c:	4817      	ldr	r0, [pc, #92]	@ (800918c <low_level_init+0x49c>)
 800912e:	f7ff fc17 	bl	8008960 <cdc_debug_log>
          break;
 8009132:	e00c      	b.n	800914e <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009134:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009138:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800913c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 8009144:	4917      	ldr	r1, [pc, #92]	@ (80091a4 <low_level_init+0x4b4>)
 8009146:	4811      	ldr	r0, [pc, #68]	@ (800918c <low_level_init+0x49c>)
 8009148:	f7ff fc0a 	bl	8008960 <cdc_debug_log>
          break;
 800914c:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800914e:	4916      	ldr	r1, [pc, #88]	@ (80091a8 <low_level_init+0x4b8>)
 8009150:	480e      	ldr	r0, [pc, #56]	@ (800918c <low_level_init+0x49c>)
 8009152:	f7ff fc05 	bl	8008960 <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 8009156:	4915      	ldr	r1, [pc, #84]	@ (80091ac <low_level_init+0x4bc>)
 8009158:	4815      	ldr	r0, [pc, #84]	@ (80091b0 <low_level_init+0x4c0>)
 800915a:	f7ff fc01 	bl	8008960 <cdc_debug_log>
    debug_eth_config();
 800915e:	f7ff fd47 	bl	8008bf0 <debug_eth_config>
    debug_eth_dma_registers();
 8009162:	f7ff fce9 	bl	8008b38 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 8009166:	f7ff fc1b 	bl	80089a0 <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800916a:	4912      	ldr	r1, [pc, #72]	@ (80091b4 <low_level_init+0x4c4>)
 800916c:	4810      	ldr	r0, [pc, #64]	@ (80091b0 <low_level_init+0x4c0>)
 800916e:	f7ff fbf7 	bl	8008960 <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009172:	e001      	b.n	8009178 <low_level_init+0x488>
    Error_Handler();
 8009174:	f7f7 fc38 	bl	80009e8 <Error_Handler>
}
 8009178:	bf00      	nop
 800917a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800917e:	46bd      	mov	sp, r7
 8009180:	bdb0      	pop	{r4, r5, r7, pc}
 8009182:	bf00      	nop
 8009184:	20005190 	.word	0x20005190
 8009188:	0801c2ac 	.word	0x0801c2ac
 800918c:	0801c124 	.word	0x0801c124
 8009190:	200051cc 	.word	0x200051cc
 8009194:	0801c2c8 	.word	0x0801c2c8
 8009198:	0801c2e8 	.word	0x0801c2e8
 800919c:	0801c308 	.word	0x0801c308
 80091a0:	0801c324 	.word	0x0801c324
 80091a4:	0801c340 	.word	0x0801c340
 80091a8:	0801c35c 	.word	0x0801c35c
 80091ac:	0801c3ac 	.word	0x0801c3ac
 80091b0:	0801c3d0 	.word	0x0801c3d0
 80091b4:	0801c3dc 	.word	0x0801c3dc

080091b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b092      	sub	sp, #72	@ 0x48
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80091d0:	f107 030c 	add.w	r3, r7, #12
 80091d4:	2230      	movs	r2, #48	@ 0x30
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f011 fa0c 	bl	801a5f6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	2230      	movs	r2, #48	@ 0x30
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f011 fa05 	bl	801a5f6 <memset>

  for(q = p; q != NULL; q = q->next)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80091f0:	e045      	b.n	800927e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80091f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d902      	bls.n	80091fe <low_level_output+0x46>
      return ERR_IF;
 80091f8:	f06f 030b 	mvn.w	r3, #11
 80091fc:	e07f      	b.n	80092fe <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80091fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009200:	6859      	ldr	r1, [r3, #4]
 8009202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009204:	4613      	mov	r3, r2
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	3348      	adds	r3, #72	@ 0x48
 800920e:	443b      	add	r3, r7
 8009210:	3b3c      	subs	r3, #60	@ 0x3c
 8009212:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009216:	895b      	ldrh	r3, [r3, #10]
 8009218:	4619      	mov	r1, r3
 800921a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800921c:	4613      	mov	r3, r2
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	3348      	adds	r3, #72	@ 0x48
 8009226:	443b      	add	r3, r7
 8009228:	3b38      	subs	r3, #56	@ 0x38
 800922a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800922c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800922e:	2b00      	cmp	r3, #0
 8009230:	d011      	beq.n	8009256 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009234:	1e5a      	subs	r2, r3, #1
 8009236:	f107 000c 	add.w	r0, r7, #12
 800923a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800923c:	460b      	mov	r3, r1
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	440b      	add	r3, r1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	18c1      	adds	r1, r0, r3
 8009246:	4613      	mov	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	3348      	adds	r3, #72	@ 0x48
 8009250:	443b      	add	r3, r7
 8009252:	3b34      	subs	r3, #52	@ 0x34
 8009254:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800925e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009260:	4613      	mov	r3, r2
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	3348      	adds	r3, #72	@ 0x48
 800926a:	443b      	add	r3, r7
 800926c:	3b34      	subs	r3, #52	@ 0x34
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009274:	3301      	adds	r3, #1
 8009276:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	643b      	str	r3, [r7, #64]	@ 0x40
 800927e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1b6      	bne.n	80091f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	891b      	ldrh	r3, [r3, #8]
 8009288:	461a      	mov	r2, r3
 800928a:	4b1f      	ldr	r3, [pc, #124]	@ (8009308 <low_level_output+0x150>)
 800928c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800928e:	4a1e      	ldr	r2, [pc, #120]	@ (8009308 <low_level_output+0x150>)
 8009290:	f107 030c 	add.w	r3, r7, #12
 8009294:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009296:	4a1c      	ldr	r2, [pc, #112]	@ (8009308 <low_level_output+0x150>)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f007 f96b 	bl	8010578 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80092a2:	4919      	ldr	r1, [pc, #100]	@ (8009308 <low_level_output+0x150>)
 80092a4:	4819      	ldr	r0, [pc, #100]	@ (800930c <low_level_output+0x154>)
 80092a6:	f7f9 fdb6 	bl	8002e16 <HAL_ETH_Transmit_IT>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80092b6:	e01b      	b.n	80092f0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80092b8:	4814      	ldr	r0, [pc, #80]	@ (800930c <low_level_output+0x154>)
 80092ba:	f7fa fa1a 	bl	80036f2 <HAL_ETH_GetError>
 80092be:	4603      	mov	r3, r0
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80092c8:	4b11      	ldr	r3, [pc, #68]	@ (8009310 <low_level_output+0x158>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f002 fd49 	bl	800bd68 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 80092d6:	480d      	ldr	r0, [pc, #52]	@ (800930c <low_level_output+0x154>)
 80092d8:	f7f9 ff3c 	bl	8003154 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80092dc:	23fe      	movs	r3, #254	@ 0xfe
 80092de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80092e2:	e005      	b.n	80092f0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80092e4:	6838      	ldr	r0, [r7, #0]
 80092e6:	f007 f8a1 	bl	801042c <pbuf_free>
        errval =  ERR_IF;
 80092ea:	23f4      	movs	r3, #244	@ 0xf4
 80092ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80092f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80092f4:	f113 0f02 	cmn.w	r3, #2
 80092f8:	d0d3      	beq.n	80092a2 <low_level_output+0xea>

  return errval;
 80092fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3748      	adds	r7, #72	@ 0x48
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	2000527c 	.word	0x2000527c
 800930c:	200051cc 	.word	0x200051cc
 8009310:	200051c8 	.word	0x200051c8

08009314 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <low_level_input+0x2c>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009328:	f107 030c 	add.w	r3, r7, #12
 800932c:	4619      	mov	r1, r3
 800932e:	4805      	ldr	r0, [pc, #20]	@ (8009344 <low_level_input+0x30>)
 8009330:	f7f9 fdcd 	bl	8002ece <HAL_ETH_ReadData>
  }

  return p;
 8009334:	68fb      	ldr	r3, [r7, #12]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	2000504c 	.word	0x2000504c
 8009344:	200051cc 	.word	0x200051cc

08009348 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009358:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <ethernetif_input+0x50>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f04f 31ff 	mov.w	r1, #4294967295
 8009360:	4618      	mov	r0, r3
 8009362:	f002 fd01 	bl	800bd68 <osSemaphoreWait>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f5      	bne.n	8009358 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800936c:	68b8      	ldr	r0, [r7, #8]
 800936e:	f7ff ffd1 	bl	8009314 <low_level_input>
 8009372:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	4798      	blx	r3
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f007 f84e 	bl	801042c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1ea      	bne.n	800936c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009396:	e7df      	b.n	8009358 <ethernetif_input+0x10>
 8009398:	200051c4 	.word	0x200051c4

0800939c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <ethernetif_init+0x1c>
 80093aa:	4b0e      	ldr	r3, [pc, #56]	@ (80093e4 <ethernetif_init+0x48>)
 80093ac:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80093b0:	490d      	ldr	r1, [pc, #52]	@ (80093e8 <ethernetif_init+0x4c>)
 80093b2:	480e      	ldr	r0, [pc, #56]	@ (80093ec <ethernetif_init+0x50>)
 80093b4:	f011 f86a 	bl	801a48c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2273      	movs	r2, #115	@ 0x73
 80093bc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2274      	movs	r2, #116	@ 0x74
 80093c4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a09      	ldr	r2, [pc, #36]	@ (80093f0 <ethernetif_init+0x54>)
 80093cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a08      	ldr	r2, [pc, #32]	@ (80093f4 <ethernetif_init+0x58>)
 80093d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff fc8b 	bl	8008cf0 <low_level_init>

  return ERR_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	0801c41c 	.word	0x0801c41c
 80093e8:	0801c438 	.word	0x0801c438
 80093ec:	0801c448 	.word	0x0801c448
 80093f0:	0801781d 	.word	0x0801781d
 80093f4:	080091b9 	.word	0x080091b9

080093f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	4809      	ldr	r0, [pc, #36]	@ (800942c <pbuf_free_custom+0x34>)
 8009408:	f006 f97a 	bl	800f700 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800940c:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <pbuf_free_custom+0x38>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d107      	bne.n	8009424 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009414:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <pbuf_free_custom+0x38>)
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800941a:	4b06      	ldr	r3, [pc, #24]	@ (8009434 <pbuf_free_custom+0x3c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f002 fcf0 	bl	800be04 <osSemaphoreRelease>
  }
}
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0801f418 	.word	0x0801f418
 8009430:	2000504c 	.word	0x2000504c
 8009434:	200051c4 	.word	0x200051c4

08009438 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800943c:	f7f9 fa4e 	bl	80028dc <HAL_GetTick>
 8009440:	4603      	mov	r3, r0
}
 8009442:	4618      	mov	r0, r3
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800944c:	4906      	ldr	r1, [pc, #24]	@ (8009468 <PHY_IO_Init+0x20>)
 800944e:	4807      	ldr	r0, [pc, #28]	@ (800946c <PHY_IO_Init+0x24>)
 8009450:	f7ff fa86 	bl	8008960 <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 8009454:	200a      	movs	r0, #10
 8009456:	f7f9 fa4d 	bl	80028f4 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800945a:	4905      	ldr	r1, [pc, #20]	@ (8009470 <PHY_IO_Init+0x28>)
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <PHY_IO_Init+0x24>)
 800945e:	f7ff fa7f 	bl	8008960 <cdc_debug_log>
  return 0;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	0801c470 	.word	0x0801c470
 800946c:	0801c4ac 	.word	0x0801c4ac
 8009470:	0801c4b4 	.word	0x0801c4b4

08009474 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 8009478:	4905      	ldr	r1, [pc, #20]	@ (8009490 <PHY_IO_DeInit+0x1c>)
 800947a:	4806      	ldr	r0, [pc, #24]	@ (8009494 <PHY_IO_DeInit+0x20>)
 800947c:	f7ff fa70 	bl	8008960 <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 8009480:	4905      	ldr	r1, [pc, #20]	@ (8009498 <PHY_IO_DeInit+0x24>)
 8009482:	4804      	ldr	r0, [pc, #16]	@ (8009494 <PHY_IO_DeInit+0x20>)
 8009484:	f7ff fa6c 	bl	8008960 <cdc_debug_log>
  return 0;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	0801c4d8 	.word	0x0801c4d8
 8009494:	0801c4ac 	.word	0x0801c4ac
 8009498:	0801c510 	.word	0x0801c510

0800949c <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b096      	sub	sp, #88	@ 0x58
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	68f9      	ldr	r1, [r7, #12]
 80094ae:	480e      	ldr	r0, [pc, #56]	@ (80094e8 <PHY_IO_ReadReg+0x4c>)
 80094b0:	f7f9 ff7a 	bl	80033a8 <HAL_ETH_ReadPHYRegister>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 80094ba:	f107 0010 	add.w	r0, r7, #16
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4a09      	ldr	r2, [pc, #36]	@ (80094ec <PHY_IO_ReadReg+0x50>)
 80094c6:	2140      	movs	r1, #64	@ 0x40
 80094c8:	f010 fff2 	bl	801a4b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 80094cc:	f107 0310 	add.w	r3, r7, #16
 80094d0:	4619      	mov	r1, r3
 80094d2:	4807      	ldr	r0, [pc, #28]	@ (80094f0 <PHY_IO_ReadReg+0x54>)
 80094d4:	f7ff fa44 	bl	8008960 <cdc_debug_log>
    return -1;
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	e000      	b.n	80094e0 <PHY_IO_ReadReg+0x44>
  }
  return 0;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3750      	adds	r7, #80	@ 0x50
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200051cc 	.word	0x200051cc
 80094ec:	0801c528 	.word	0x0801c528
 80094f0:	0801c4ac 	.word	0x0801c4ac

080094f4 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b096      	sub	sp, #88	@ 0x58
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	480f      	ldr	r0, [pc, #60]	@ (8009544 <PHY_IO_WriteReg+0x50>)
 8009508:	f7f9 ff99 	bl	800343e <HAL_ETH_WritePHYRegister>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d013      	beq.n	800953a <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 8009512:	f107 0010 	add.w	r0, r7, #16
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a09      	ldr	r2, [pc, #36]	@ (8009548 <PHY_IO_WriteReg+0x54>)
 8009522:	2140      	movs	r1, #64	@ 0x40
 8009524:	f010 ffc4 	bl	801a4b0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 8009528:	f107 0310 	add.w	r3, r7, #16
 800952c:	4619      	mov	r1, r3
 800952e:	4807      	ldr	r0, [pc, #28]	@ (800954c <PHY_IO_WriteReg+0x58>)
 8009530:	f7ff fa16 	bl	8008960 <cdc_debug_log>
    return -1;
 8009534:	f04f 33ff 	mov.w	r3, #4294967295
 8009538:	e000      	b.n	800953c <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3750      	adds	r7, #80	@ 0x50
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	200051cc 	.word	0x200051cc
 8009548:	0801c550 	.word	0x0801c550
 800954c:	0801c4ac 	.word	0x0801c4ac

08009550 <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009554:	f7f9 f9c2 	bl	80028dc <HAL_GetTick>
 8009558:	4603      	mov	r3, r0
}
 800955a:	4618      	mov	r0, r3
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b0b0      	sub	sp, #192	@ 0xc0
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 8009580:	49be      	ldr	r1, [pc, #760]	@ (800987c <ethernet_link_thread+0x31c>)
 8009582:	48bf      	ldr	r0, [pc, #764]	@ (8009880 <ethernet_link_thread+0x320>)
 8009584:	f7ff f9ec 	bl	8008960 <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 8009588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800958c:	3301      	adds	r3, #1
 800958e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 8009592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009596:	4bbb      	ldr	r3, [pc, #748]	@ (8009884 <ethernet_link_thread+0x324>)
 8009598:	fba3 1302 	umull	r1, r3, r3, r2
 800959c:	091b      	lsrs	r3, r3, #4
 800959e:	2132      	movs	r1, #50	@ 0x32
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 80095aa:	f107 0008 	add.w	r0, r7, #8
 80095ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095b2:	4ab5      	ldr	r2, [pc, #724]	@ (8009888 <ethernet_link_thread+0x328>)
 80095b4:	2120      	movs	r1, #32
 80095b6:	f010 ff7b 	bl	801a4b0 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	4619      	mov	r1, r3
 80095c0:	48af      	ldr	r0, [pc, #700]	@ (8009880 <ethernet_link_thread+0x320>)
 80095c2:	f7ff f9cd 	bl	8008960 <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 80095c6:	48b1      	ldr	r0, [pc, #708]	@ (800988c <ethernet_link_thread+0x32c>)
 80095c8:	f7f9 f90c 	bl	80027e4 <eth_chip_get_link_state>
 80095cc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 80095d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095d4:	f113 0f05 	cmn.w	r3, #5
 80095d8:	f000 8111 	beq.w	80097fe <ethernet_link_thread+0x29e>
 80095dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	f000 810c 	beq.w	80097fe <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 80095e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095ea:	3b02      	subs	r3, #2
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d874      	bhi.n	80096da <ethernet_link_thread+0x17a>
 80095f0:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <ethernet_link_thread+0x98>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	0800960d 	.word	0x0800960d
 80095fc:	08009635 	.word	0x08009635
 8009600:	0800965d 	.word	0x0800965d
 8009604:	08009685 	.word	0x08009685
 8009608:	080096ad 	.word	0x080096ad
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800960c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009610:	4b9c      	ldr	r3, [pc, #624]	@ (8009884 <ethernet_link_thread+0x324>)
 8009612:	fba3 1302 	umull	r1, r3, r3, r2
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	2132      	movs	r1, #50	@ 0x32
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <ethernet_link_thread+0xcc>
 8009624:	499a      	ldr	r1, [pc, #616]	@ (8009890 <ethernet_link_thread+0x330>)
 8009626:	4896      	ldr	r0, [pc, #600]	@ (8009880 <ethernet_link_thread+0x320>)
 8009628:	f7ff f99a 	bl	8008960 <cdc_debug_log>
          linkup = 1;
 800962c:	2301      	movs	r3, #1
 800962e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 8009632:	e066      	b.n	8009702 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 8009634:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009638:	4b92      	ldr	r3, [pc, #584]	@ (8009884 <ethernet_link_thread+0x324>)
 800963a:	fba3 1302 	umull	r1, r3, r3, r2
 800963e:	091b      	lsrs	r3, r3, #4
 8009640:	2132      	movs	r1, #50	@ 0x32
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <ethernet_link_thread+0xf4>
 800964c:	4991      	ldr	r1, [pc, #580]	@ (8009894 <ethernet_link_thread+0x334>)
 800964e:	488c      	ldr	r0, [pc, #560]	@ (8009880 <ethernet_link_thread+0x320>)
 8009650:	f7ff f986 	bl	8008960 <cdc_debug_log>
          linkup = 1;
 8009654:	2301      	movs	r3, #1
 8009656:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800965a:	e052      	b.n	8009702 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800965c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009660:	4b88      	ldr	r3, [pc, #544]	@ (8009884 <ethernet_link_thread+0x324>)
 8009662:	fba3 1302 	umull	r1, r3, r3, r2
 8009666:	091b      	lsrs	r3, r3, #4
 8009668:	2132      	movs	r1, #50	@ 0x32
 800966a:	fb01 f303 	mul.w	r3, r1, r3
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <ethernet_link_thread+0x11c>
 8009674:	4988      	ldr	r1, [pc, #544]	@ (8009898 <ethernet_link_thread+0x338>)
 8009676:	4882      	ldr	r0, [pc, #520]	@ (8009880 <ethernet_link_thread+0x320>)
 8009678:	f7ff f972 	bl	8008960 <cdc_debug_log>
          linkup = 1;
 800967c:	2301      	movs	r3, #1
 800967e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 8009682:	e03e      	b.n	8009702 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 8009684:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009688:	4b7e      	ldr	r3, [pc, #504]	@ (8009884 <ethernet_link_thread+0x324>)
 800968a:	fba3 1302 	umull	r1, r3, r3, r2
 800968e:	091b      	lsrs	r3, r3, #4
 8009690:	2132      	movs	r1, #50	@ 0x32
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <ethernet_link_thread+0x144>
 800969c:	497f      	ldr	r1, [pc, #508]	@ (800989c <ethernet_link_thread+0x33c>)
 800969e:	4878      	ldr	r0, [pc, #480]	@ (8009880 <ethernet_link_thread+0x320>)
 80096a0:	f7ff f95e 	bl	8008960 <cdc_debug_log>
          linkup = 1;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 80096aa:	e02a      	b.n	8009702 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 80096ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096b0:	4b74      	ldr	r3, [pc, #464]	@ (8009884 <ethernet_link_thread+0x324>)
 80096b2:	fba3 1302 	umull	r1, r3, r3, r2
 80096b6:	091b      	lsrs	r3, r3, #4
 80096b8:	2132      	movs	r1, #50	@ 0x32
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 80096c4:	4976      	ldr	r1, [pc, #472]	@ (80098a0 <ethernet_link_thread+0x340>)
 80096c6:	486e      	ldr	r0, [pc, #440]	@ (8009880 <ethernet_link_thread+0x320>)
 80096c8:	f7ff f94a 	bl	8008960 <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 80096cc:	486f      	ldr	r0, [pc, #444]	@ (800988c <ethernet_link_thread+0x32c>)
 80096ce:	f7f9 f85c 	bl	800278a <eth_chip_start_auto_nego>
          }
          linkup = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 80096d8:	e013      	b.n	8009702 <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 80096da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096de:	4b69      	ldr	r3, [pc, #420]	@ (8009884 <ethernet_link_thread+0x324>)
 80096e0:	fba3 1302 	umull	r1, r3, r3, r2
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	2132      	movs	r1, #50	@ 0x32
 80096e8:	fb01 f303 	mul.w	r3, r1, r3
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <ethernet_link_thread+0x19a>
 80096f2:	496c      	ldr	r1, [pc, #432]	@ (80098a4 <ethernet_link_thread+0x344>)
 80096f4:	4862      	ldr	r0, [pc, #392]	@ (8009880 <ethernet_link_thread+0x320>)
 80096f6:	f7ff f933 	bl	8008960 <cdc_debug_log>
          linkup = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 8009700:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 8009702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 8113 	beq.w	8009932 <ethernet_link_thread+0x3d2>
 800970c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009710:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 810a 	bne.w	8009932 <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800971e:	4962      	ldr	r1, [pc, #392]	@ (80098a8 <ethernet_link_thread+0x348>)
 8009720:	4857      	ldr	r0, [pc, #348]	@ (8009880 <ethernet_link_thread+0x320>)
 8009722:	f7ff f91d 	bl	8008960 <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 8009726:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800972a:	4619      	mov	r1, r3
 800972c:	485f      	ldr	r0, [pc, #380]	@ (80098ac <ethernet_link_thread+0x34c>)
 800972e:	f7f9 fecf 	bl	80034d0 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 8009732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009736:	3b02      	subs	r3, #2
 8009738:	2b03      	cmp	r3, #3
 800973a:	d833      	bhi.n	80097a4 <ethernet_link_thread+0x244>
 800973c:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <ethernet_link_thread+0x1e4>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009755 	.word	0x08009755
 8009748:	0800976b 	.word	0x0800976b
 800974c:	0800977f 	.word	0x0800977f
 8009750:	08009793 	.word	0x08009793
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009754:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009758:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800975a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800975e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 8009760:	4953      	ldr	r1, [pc, #332]	@ (80098b0 <ethernet_link_thread+0x350>)
 8009762:	4847      	ldr	r0, [pc, #284]	@ (8009880 <ethernet_link_thread+0x320>)
 8009764:	f7ff f8fc 	bl	8008960 <cdc_debug_log>
            break;
 8009768:	e01c      	b.n	80097a4 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800976a:	2300      	movs	r3, #0
 800976c:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800976e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009772:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 8009774:	494f      	ldr	r1, [pc, #316]	@ (80098b4 <ethernet_link_thread+0x354>)
 8009776:	4842      	ldr	r0, [pc, #264]	@ (8009880 <ethernet_link_thread+0x320>)
 8009778:	f7ff f8f2 	bl	8008960 <cdc_debug_log>
            break;
 800977c:	e012      	b.n	80097a4 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800977e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009782:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 8009784:	2300      	movs	r3, #0
 8009786:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 8009788:	494b      	ldr	r1, [pc, #300]	@ (80098b8 <ethernet_link_thread+0x358>)
 800978a:	483d      	ldr	r0, [pc, #244]	@ (8009880 <ethernet_link_thread+0x320>)
 800978c:	f7ff f8e8 	bl	8008960 <cdc_debug_log>
            break;
 8009790:	e008      	b.n	80097a4 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 8009792:	2300      	movs	r3, #0
 8009794:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 8009796:	2300      	movs	r3, #0
 8009798:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800979a:	4948      	ldr	r1, [pc, #288]	@ (80098bc <ethernet_link_thread+0x35c>)
 800979c:	4838      	ldr	r0, [pc, #224]	@ (8009880 <ethernet_link_thread+0x320>)
 800979e:	f7ff f8df 	bl	8008960 <cdc_debug_log>
            break;
 80097a2:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 80097a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80097a8:	4619      	mov	r1, r3
 80097aa:	4840      	ldr	r0, [pc, #256]	@ (80098ac <ethernet_link_thread+0x34c>)
 80097ac:	f7f9 ff87 	bl	80036be <HAL_ETH_SetMACConfig>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 80097b6:	4942      	ldr	r1, [pc, #264]	@ (80098c0 <ethernet_link_thread+0x360>)
 80097b8:	4831      	ldr	r0, [pc, #196]	@ (8009880 <ethernet_link_thread+0x320>)
 80097ba:	f7ff f8d1 	bl	8008960 <cdc_debug_log>
 80097be:	e003      	b.n	80097c8 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 80097c0:	4940      	ldr	r1, [pc, #256]	@ (80098c4 <ethernet_link_thread+0x364>)
 80097c2:	482f      	ldr	r0, [pc, #188]	@ (8009880 <ethernet_link_thread+0x320>)
 80097c4:	f7ff f8cc 	bl	8008960 <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 80097c8:	4838      	ldr	r0, [pc, #224]	@ (80098ac <ethernet_link_thread+0x34c>)
 80097ca:	f7f9 fa35 	bl	8002c38 <HAL_ETH_Start_IT>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 80097d4:	493c      	ldr	r1, [pc, #240]	@ (80098c8 <ethernet_link_thread+0x368>)
 80097d6:	482a      	ldr	r0, [pc, #168]	@ (8009880 <ethernet_link_thread+0x320>)
 80097d8:	f7ff f8c2 	bl	8008960 <cdc_debug_log>
 80097dc:	e003      	b.n	80097e6 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 80097de:	493b      	ldr	r1, [pc, #236]	@ (80098cc <ethernet_link_thread+0x36c>)
 80097e0:	4827      	ldr	r0, [pc, #156]	@ (8009880 <ethernet_link_thread+0x320>)
 80097e2:	f7ff f8bd 	bl	8008960 <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 80097e6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80097ea:	f006 fa0d 	bl	800fc08 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 80097ee:	4938      	ldr	r1, [pc, #224]	@ (80098d0 <ethernet_link_thread+0x370>)
 80097f0:	4823      	ldr	r0, [pc, #140]	@ (8009880 <ethernet_link_thread+0x320>)
 80097f2:	f7ff f8b5 	bl	8008960 <cdc_debug_log>
        linkchanged = 1;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 80097fc:	e099      	b.n	8009932 <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 80097fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009802:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009806:	089b      	lsrs	r3, r3, #2
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01e      	beq.n	8009850 <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 8009812:	4930      	ldr	r1, [pc, #192]	@ (80098d4 <ethernet_link_thread+0x374>)
 8009814:	481a      	ldr	r0, [pc, #104]	@ (8009880 <ethernet_link_thread+0x320>)
 8009816:	f7ff f8a3 	bl	8008960 <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800981a:	4824      	ldr	r0, [pc, #144]	@ (80098ac <ethernet_link_thread+0x34c>)
 800981c:	f7f9 fa7c 	bl	8002d18 <HAL_ETH_Stop_IT>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 8009826:	492c      	ldr	r1, [pc, #176]	@ (80098d8 <ethernet_link_thread+0x378>)
 8009828:	4815      	ldr	r0, [pc, #84]	@ (8009880 <ethernet_link_thread+0x320>)
 800982a:	f7ff f899 	bl	8008960 <cdc_debug_log>
 800982e:	e003      	b.n	8009838 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 8009830:	492a      	ldr	r1, [pc, #168]	@ (80098dc <ethernet_link_thread+0x37c>)
 8009832:	4813      	ldr	r0, [pc, #76]	@ (8009880 <ethernet_link_thread+0x320>)
 8009834:	f7ff f894 	bl	8008960 <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 8009838:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800983c:	f006 fa18 	bl	800fc70 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 8009840:	4927      	ldr	r1, [pc, #156]	@ (80098e0 <ethernet_link_thread+0x380>)
 8009842:	480f      	ldr	r0, [pc, #60]	@ (8009880 <ethernet_link_thread+0x320>)
 8009844:	f7ff f88c 	bl	8008960 <cdc_debug_log>
        linkchanged = 1;
 8009848:	2301      	movs	r3, #1
 800984a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800984e:	e06c      	b.n	800992a <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 8009850:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009854:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <ethernet_link_thread+0x324>)
 8009856:	fba3 1302 	umull	r1, r3, r3, r2
 800985a:	091b      	lsrs	r3, r3, #4
 800985c:	2132      	movs	r1, #50	@ 0x32
 800985e:	fb01 f303 	mul.w	r3, r1, r3
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d160      	bne.n	800992a <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 8009868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800986c:	f113 0f05 	cmn.w	r3, #5
 8009870:	d13a      	bne.n	80098e8 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 8009872:	491c      	ldr	r1, [pc, #112]	@ (80098e4 <ethernet_link_thread+0x384>)
 8009874:	4802      	ldr	r0, [pc, #8]	@ (8009880 <ethernet_link_thread+0x320>)
 8009876:	f7ff f873 	bl	8008960 <cdc_debug_log>
 800987a:	e056      	b.n	800992a <ethernet_link_thread+0x3ca>
 800987c:	0801c584 	.word	0x0801c584
 8009880:	0801c5a8 	.word	0x0801c5a8
 8009884:	51eb851f 	.word	0x51eb851f
 8009888:	0801c5b4 	.word	0x0801c5b4
 800988c:	20005190 	.word	0x20005190
 8009890:	0801c5c4 	.word	0x0801c5c4
 8009894:	0801c5dc 	.word	0x0801c5dc
 8009898:	0801c5f4 	.word	0x0801c5f4
 800989c:	0801c60c 	.word	0x0801c60c
 80098a0:	0801c624 	.word	0x0801c624
 80098a4:	0801c650 	.word	0x0801c650
 80098a8:	0801c664 	.word	0x0801c664
 80098ac:	200051cc 	.word	0x200051cc
 80098b0:	0801c690 	.word	0x0801c690
 80098b4:	0801c6b0 	.word	0x0801c6b0
 80098b8:	0801c6d0 	.word	0x0801c6d0
 80098bc:	0801c6f0 	.word	0x0801c6f0
 80098c0:	0801c710 	.word	0x0801c710
 80098c4:	0801c730 	.word	0x0801c730
 80098c8:	0801c758 	.word	0x0801c758
 80098cc:	0801c76c 	.word	0x0801c76c
 80098d0:	0801c788 	.word	0x0801c788
 80098d4:	0801c7ac 	.word	0x0801c7ac
 80098d8:	0801c7d4 	.word	0x0801c7d4
 80098dc:	0801c7e8 	.word	0x0801c7e8
 80098e0:	0801c804 	.word	0x0801c804
 80098e4:	0801c828 	.word	0x0801c828
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 80098e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d10e      	bne.n	800990e <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 80098f0:	4926      	ldr	r1, [pc, #152]	@ (800998c <ethernet_link_thread+0x42c>)
 80098f2:	4827      	ldr	r0, [pc, #156]	@ (8009990 <ethernet_link_thread+0x430>)
 80098f4:	f7ff f834 	bl	8008960 <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 80098f8:	4826      	ldr	r0, [pc, #152]	@ (8009994 <ethernet_link_thread+0x434>)
 80098fa:	f7f8 ff46 	bl	800278a <eth_chip_start_auto_nego>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d112      	bne.n	800992a <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 8009904:	4924      	ldr	r1, [pc, #144]	@ (8009998 <ethernet_link_thread+0x438>)
 8009906:	4822      	ldr	r0, [pc, #136]	@ (8009990 <ethernet_link_thread+0x430>)
 8009908:	f7ff f82a 	bl	8008960 <cdc_debug_log>
 800990c:	e00d      	b.n	800992a <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800990e:	f107 0008 	add.w	r0, r7, #8
 8009912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009916:	4a21      	ldr	r2, [pc, #132]	@ (800999c <ethernet_link_thread+0x43c>)
 8009918:	2140      	movs	r1, #64	@ 0x40
 800991a:	f010 fdc9 	bl	801a4b0 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	4619      	mov	r1, r3
 8009924:	481a      	ldr	r0, [pc, #104]	@ (8009990 <ethernet_link_thread+0x430>)
 8009926:	f7ff f81b 	bl	8008960 <cdc_debug_log>
        }
      }
      linkup = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009930:	e000      	b.n	8009934 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 8009932:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 8009934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00c      	beq.n	8009956 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 8009942:	4917      	ldr	r1, [pc, #92]	@ (80099a0 <ethernet_link_thread+0x440>)
 8009944:	4812      	ldr	r0, [pc, #72]	@ (8009990 <ethernet_link_thread+0x430>)
 8009946:	f7ff f80b 	bl	8008960 <cdc_debug_log>
      debug_eth_dma_registers();
 800994a:	f7ff f8f5 	bl	8008b38 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800994e:	4915      	ldr	r1, [pc, #84]	@ (80099a4 <ethernet_link_thread+0x444>)
 8009950:	480f      	ldr	r0, [pc, #60]	@ (8009990 <ethernet_link_thread+0x430>)
 8009952:	f7ff f805 	bl	8008960 <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 8009956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800995a:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <ethernet_link_thread+0x448>)
 800995c:	fba3 1302 	umull	r1, r3, r3, r2
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	2164      	movs	r1, #100	@ 0x64
 8009964:	fb01 f303 	mul.w	r3, r1, r3
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d109      	bne.n	8009982 <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800996e:	490f      	ldr	r1, [pc, #60]	@ (80099ac <ethernet_link_thread+0x44c>)
 8009970:	4807      	ldr	r0, [pc, #28]	@ (8009990 <ethernet_link_thread+0x430>)
 8009972:	f7fe fff5 	bl	8008960 <cdc_debug_log>
      debug_eth_dma_registers();
 8009976:	f7ff f8df 	bl	8008b38 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800997a:	490d      	ldr	r1, [pc, #52]	@ (80099b0 <ethernet_link_thread+0x450>)
 800997c:	4804      	ldr	r0, [pc, #16]	@ (8009990 <ethernet_link_thread+0x430>)
 800997e:	f7fe ffef 	bl	8008960 <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009982:	2064      	movs	r0, #100	@ 0x64
 8009984:	f002 f90e 	bl	800bba4 <osDelay>
    link_check_counter++;
 8009988:	e5fe      	b.n	8009588 <ethernet_link_thread+0x28>
 800998a:	bf00      	nop
 800998c:	0801c840 	.word	0x0801c840
 8009990:	0801c5a8 	.word	0x0801c5a8
 8009994:	20005190 	.word	0x20005190
 8009998:	0801c86c 	.word	0x0801c86c
 800999c:	0801c888 	.word	0x0801c888
 80099a0:	0801c8a0 	.word	0x0801c8a0
 80099a4:	0801c8c8 	.word	0x0801c8c8
 80099a8:	51eb851f 	.word	0x51eb851f
 80099ac:	0801c8e4 	.word	0x0801c8e4
 80099b0:	0801c908 	.word	0x0801c908

080099b4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80099bc:	4812      	ldr	r0, [pc, #72]	@ (8009a08 <HAL_ETH_RxAllocateCallback+0x54>)
 80099be:	f005 fe2b 	bl	800f618 <memp_malloc_pool>
 80099c2:	60f8      	str	r0, [r7, #12]
  if (p)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d014      	beq.n	80099f4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f103 0220 	add.w	r2, r3, #32
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a0d      	ldr	r2, [pc, #52]	@ (8009a0c <HAL_ETH_RxAllocateCallback+0x58>)
 80099d8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80099e2:	9201      	str	r2, [sp, #4]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2241      	movs	r2, #65	@ 0x41
 80099ea:	2100      	movs	r1, #0
 80099ec:	2000      	movs	r0, #0
 80099ee:	f006 fb63 	bl	80100b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80099f2:	e005      	b.n	8009a00 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80099f4:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <HAL_ETH_RxAllocateCallback+0x5c>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	0801f418 	.word	0x0801f418
 8009a0c:	080093f9 	.word	0x080093f9
 8009a10:	2000504c 	.word	0x2000504c

08009a14 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b089      	sub	sp, #36	@ 0x24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3b20      	subs	r3, #32
 8009a32:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	887a      	ldrh	r2, [r7, #2]
 8009a44:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d103      	bne.n	8009a56 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	69fa      	ldr	r2, [r7, #28]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e003      	b.n	8009a5e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	61fb      	str	r3, [r7, #28]
 8009a6a:	e009      	b.n	8009a80 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	891a      	ldrh	r2, [r3, #8]
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	4413      	add	r3, r2
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	61fb      	str	r3, [r7, #28]
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f2      	bne.n	8009a6c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	3724      	adds	r7, #36	@ 0x24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f006 fcc5 	bl	801042c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ab8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009abc:	f010 fba2 	bl	801a204 <USBD_static_malloc>
 8009ac0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	32b0      	adds	r2, #176	@ 0xb0
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e0d4      	b.n	8009c86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009adc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f010 fd87 	bl	801a5f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32b0      	adds	r2, #176	@ 0xb0
 8009af2:	68f9      	ldr	r1, [r7, #12]
 8009af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	32b0      	adds	r2, #176	@ 0xb0
 8009b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7c1b      	ldrb	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d138      	bne.n	8009b86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b14:	4b5e      	ldr	r3, [pc, #376]	@ (8009c90 <USBD_CDC_Init+0x1e4>)
 8009b16:	7819      	ldrb	r1, [r3, #0]
 8009b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f010 fa4d 	bl	8019fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b24:	4b5a      	ldr	r3, [pc, #360]	@ (8009c90 <USBD_CDC_Init+0x1e4>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 020f 	and.w	r2, r3, #15
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	3323      	adds	r3, #35	@ 0x23
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b3e:	4b55      	ldr	r3, [pc, #340]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009b40:	7819      	ldrb	r1, [r3, #0]
 8009b42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b46:	2202      	movs	r2, #2
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f010 fa38 	bl	8019fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b4e:	4b51      	ldr	r3, [pc, #324]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 020f 	and.w	r2, r3, #15
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8009c98 <USBD_CDC_Init+0x1ec>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 020f 	and.w	r2, r3, #15
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	331c      	adds	r3, #28
 8009b80:	2210      	movs	r2, #16
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e035      	b.n	8009bf2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b86:	4b42      	ldr	r3, [pc, #264]	@ (8009c90 <USBD_CDC_Init+0x1e4>)
 8009b88:	7819      	ldrb	r1, [r3, #0]
 8009b8a:	2340      	movs	r3, #64	@ 0x40
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f010 fa15 	bl	8019fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b94:	4b3e      	ldr	r3, [pc, #248]	@ (8009c90 <USBD_CDC_Init+0x1e4>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 020f 	and.w	r2, r3, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3323      	adds	r3, #35	@ 0x23
 8009baa:	2201      	movs	r2, #1
 8009bac:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bae:	4b39      	ldr	r3, [pc, #228]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009bb0:	7819      	ldrb	r1, [r3, #0]
 8009bb2:	2340      	movs	r3, #64	@ 0x40
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f010 fa01 	bl	8019fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bbc:	4b35      	ldr	r3, [pc, #212]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 020f 	and.w	r2, r3, #15
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8009c98 <USBD_CDC_Init+0x1ec>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 020f 	and.w	r2, r3, #15
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	4613      	mov	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	331c      	adds	r3, #28
 8009bee:	2210      	movs	r2, #16
 8009bf0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bf2:	4b29      	ldr	r3, [pc, #164]	@ (8009c98 <USBD_CDC_Init+0x1ec>)
 8009bf4:	7819      	ldrb	r1, [r3, #0]
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f010 f9df 	bl	8019fbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c00:	4b25      	ldr	r3, [pc, #148]	@ (8009c98 <USBD_CDC_Init+0x1ec>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 020f 	and.w	r2, r3, #15
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	3323      	adds	r3, #35	@ 0x23
 8009c16:	2201      	movs	r2, #1
 8009c18:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	33b0      	adds	r3, #176	@ 0xb0
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c50:	2302      	movs	r3, #2
 8009c52:	e018      	b.n	8009c86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7c1b      	ldrb	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009c5e:	7819      	ldrb	r1, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f010 fa96 	bl	801a19c <USBD_LL_PrepareReceive>
 8009c70:	e008      	b.n	8009c84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c72:	4b08      	ldr	r3, [pc, #32]	@ (8009c94 <USBD_CDC_Init+0x1e8>)
 8009c74:	7819      	ldrb	r1, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c7c:	2340      	movs	r3, #64	@ 0x40
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f010 fa8c 	bl	801a19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000093 	.word	0x20000093
 8009c94:	20000094 	.word	0x20000094
 8009c98:	20000095 	.word	0x20000095

08009c9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8009d94 <USBD_CDC_DeInit+0xf8>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f010 f9ab 	bl	801a00a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cb4:	4b37      	ldr	r3, [pc, #220]	@ (8009d94 <USBD_CDC_DeInit+0xf8>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3323      	adds	r3, #35	@ 0x23
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cce:	4b32      	ldr	r3, [pc, #200]	@ (8009d98 <USBD_CDC_DeInit+0xfc>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f010 f998 	bl	801a00a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009cda:	4b2f      	ldr	r3, [pc, #188]	@ (8009d98 <USBD_CDC_DeInit+0xfc>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	f003 020f 	and.w	r2, r3, #15
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cf6:	4b29      	ldr	r3, [pc, #164]	@ (8009d9c <USBD_CDC_DeInit+0x100>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f010 f984 	bl	801a00a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d02:	4b26      	ldr	r3, [pc, #152]	@ (8009d9c <USBD_CDC_DeInit+0x100>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	3323      	adds	r3, #35	@ 0x23
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8009d9c <USBD_CDC_DeInit+0x100>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	440b      	add	r3, r1
 8009d30:	331c      	adds	r3, #28
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	32b0      	adds	r2, #176	@ 0xb0
 8009d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01f      	beq.n	8009d88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	33b0      	adds	r3, #176	@ 0xb0
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	32b0      	adds	r2, #176	@ 0xb0
 8009d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f010 fa58 	bl	801a220 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	32b0      	adds	r2, #176	@ 0xb0
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000093 	.word	0x20000093
 8009d98:	20000094 	.word	0x20000094
 8009d9c:	20000095 	.word	0x20000095

08009da0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	32b0      	adds	r2, #176	@ 0xb0
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e0bf      	b.n	8009f50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d050      	beq.n	8009e7e <USBD_CDC_Setup+0xde>
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	f040 80af 	bne.w	8009f40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	88db      	ldrh	r3, [r3, #6]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d03a      	beq.n	8009e60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b25b      	sxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	da1b      	bge.n	8009e2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	33b0      	adds	r3, #176	@ 0xb0
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	88d2      	ldrh	r2, [r2, #6]
 8009e10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	88db      	ldrh	r3, [r3, #6]
 8009e16:	2b07      	cmp	r3, #7
 8009e18:	bf28      	it	cs
 8009e1a:	2307      	movcs	r3, #7
 8009e1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	89fa      	ldrh	r2, [r7, #14]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fda9 	bl	800b97c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e2a:	e090      	b.n	8009f4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	785a      	ldrb	r2, [r3, #1]
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e3c:	d803      	bhi.n	8009e46 <USBD_CDC_Setup+0xa6>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	e000      	b.n	8009e48 <USBD_CDC_Setup+0xa8>
 8009e46:	2240      	movs	r2, #64	@ 0x40
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e4e:	6939      	ldr	r1, [r7, #16]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e56:	461a      	mov	r2, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fdbe 	bl	800b9da <USBD_CtlPrepareRx>
      break;
 8009e5e:	e076      	b.n	8009f4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	33b0      	adds	r3, #176	@ 0xb0
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	7850      	ldrb	r0, [r2, #1]
 8009e76:	2200      	movs	r2, #0
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	4798      	blx	r3
      break;
 8009e7c:	e067      	b.n	8009f4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b0b      	cmp	r3, #11
 8009e84:	d851      	bhi.n	8009f2a <USBD_CDC_Setup+0x18a>
 8009e86:	a201      	add	r2, pc, #4	@ (adr r2, 8009e8c <USBD_CDC_Setup+0xec>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009ebd 	.word	0x08009ebd
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009f2b 	.word	0x08009f2b
 8009e98:	08009f2b 	.word	0x08009f2b
 8009e9c:	08009f2b 	.word	0x08009f2b
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f2b 	.word	0x08009f2b
 8009ea8:	08009f2b 	.word	0x08009f2b
 8009eac:	08009f2b 	.word	0x08009f2b
 8009eb0:	08009f2b 	.word	0x08009f2b
 8009eb4:	08009ee7 	.word	0x08009ee7
 8009eb8:	08009f11 	.word	0x08009f11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d107      	bne.n	8009ed8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ec8:	f107 030a 	add.w	r3, r7, #10
 8009ecc:	2202      	movs	r2, #2
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 fd53 	bl	800b97c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ed6:	e032      	b.n	8009f3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 fcd1 	bl	800b882 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ee4:	e02b      	b.n	8009f3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d107      	bne.n	8009f02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ef2:	f107 030d 	add.w	r3, r7, #13
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fd3e 	bl	800b97c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f00:	e01d      	b.n	8009f3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 fcbc 	bl	800b882 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f0e:	e016      	b.n	8009f3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d00f      	beq.n	8009f3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 fcaf 	bl	800b882 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f28:	e008      	b.n	8009f3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fca8 	bl	800b882 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f32:	2303      	movs	r3, #3
 8009f34:	75fb      	strb	r3, [r7, #23]
          break;
 8009f36:	e002      	b.n	8009f3e <USBD_CDC_Setup+0x19e>
          break;
 8009f38:	bf00      	nop
 8009f3a:	e008      	b.n	8009f4e <USBD_CDC_Setup+0x1ae>
          break;
 8009f3c:	bf00      	nop
      }
      break;
 8009f3e:	e006      	b.n	8009f4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fc9d 	bl	800b882 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	32b0      	adds	r2, #176	@ 0xb0
 8009f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e065      	b.n	800a04e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	32b0      	adds	r2, #176	@ 0xb0
 8009f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3314      	adds	r3, #20
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d02f      	beq.n	800a00c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	f003 020f 	and.w	r2, r3, #15
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3314      	adds	r3, #20
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	f003 010f 	and.w	r1, r3, #15
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	440b      	add	r3, r1
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4403      	add	r3, r0
 8009fd4:	331c      	adds	r3, #28
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d112      	bne.n	800a00c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	f003 020f 	and.w	r2, r3, #15
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ffe:	78f9      	ldrb	r1, [r7, #3]
 800a000:	2300      	movs	r3, #0
 800a002:	2200      	movs	r2, #0
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f010 f8a8 	bl	801a15a <USBD_LL_Transmit>
 800a00a:	e01f      	b.n	800a04c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	33b0      	adds	r3, #176	@ 0xb0
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d010      	beq.n	800a04c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	33b0      	adds	r3, #176	@ 0xb0
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	32b0      	adds	r2, #176	@ 0xb0
 800a06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a070:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	32b0      	adds	r2, #176	@ 0xb0
 800a07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	e01a      	b.n	800a0be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f010 f8a6 	bl	801a1de <USBD_LL_GetRxDataSize>
 800a092:	4602      	mov	r2, r0
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	33b0      	adds	r3, #176	@ 0xb0
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	32b0      	adds	r2, #176	@ 0xb0
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e024      	b.n	800a132 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	33b0      	adds	r3, #176	@ 0xb0
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d019      	beq.n	800a130 <USBD_CDC_EP0_RxReady+0x6a>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a102:	2bff      	cmp	r3, #255	@ 0xff
 800a104:	d014      	beq.n	800a130 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	33b0      	adds	r3, #176	@ 0xb0
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a11e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a126:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	22ff      	movs	r2, #255	@ 0xff
 800a12c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a144:	2182      	movs	r1, #130	@ 0x82
 800a146:	4818      	ldr	r0, [pc, #96]	@ (800a1a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a148:	f000 fd62 	bl	800ac10 <USBD_GetEpDesc>
 800a14c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a14e:	2101      	movs	r1, #1
 800a150:	4815      	ldr	r0, [pc, #84]	@ (800a1a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a152:	f000 fd5d 	bl	800ac10 <USBD_GetEpDesc>
 800a156:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a158:	2181      	movs	r1, #129	@ 0x81
 800a15a:	4813      	ldr	r0, [pc, #76]	@ (800a1a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a15c:	f000 fd58 	bl	800ac10 <USBD_GetEpDesc>
 800a160:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2210      	movs	r2, #16
 800a16c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2200      	movs	r2, #0
 800a178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a17c:	711a      	strb	r2, [r3, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d006      	beq.n	800a196 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a190:	711a      	strb	r2, [r3, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2243      	movs	r2, #67	@ 0x43
 800a19a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a19c:	4b02      	ldr	r3, [pc, #8]	@ (800a1a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000050 	.word	0x20000050

0800a1ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1b4:	2182      	movs	r1, #130	@ 0x82
 800a1b6:	4818      	ldr	r0, [pc, #96]	@ (800a218 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1b8:	f000 fd2a 	bl	800ac10 <USBD_GetEpDesc>
 800a1bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1be:	2101      	movs	r1, #1
 800a1c0:	4815      	ldr	r0, [pc, #84]	@ (800a218 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1c2:	f000 fd25 	bl	800ac10 <USBD_GetEpDesc>
 800a1c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1c8:	2181      	movs	r1, #129	@ 0x81
 800a1ca:	4813      	ldr	r0, [pc, #76]	@ (800a218 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1cc:	f000 fd20 	bl	800ac10 <USBD_GetEpDesc>
 800a1d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2210      	movs	r2, #16
 800a1dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d006      	beq.n	800a1f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	711a      	strb	r2, [r3, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f042 0202 	orr.w	r2, r2, #2
 800a1f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d006      	beq.n	800a206 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	711a      	strb	r2, [r3, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f042 0202 	orr.w	r2, r2, #2
 800a204:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2243      	movs	r2, #67	@ 0x43
 800a20a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a20c:	4b02      	ldr	r3, [pc, #8]	@ (800a218 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000050 	.word	0x20000050

0800a21c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a224:	2182      	movs	r1, #130	@ 0x82
 800a226:	4818      	ldr	r0, [pc, #96]	@ (800a288 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a228:	f000 fcf2 	bl	800ac10 <USBD_GetEpDesc>
 800a22c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a22e:	2101      	movs	r1, #1
 800a230:	4815      	ldr	r0, [pc, #84]	@ (800a288 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a232:	f000 fced 	bl	800ac10 <USBD_GetEpDesc>
 800a236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a238:	2181      	movs	r1, #129	@ 0x81
 800a23a:	4813      	ldr	r0, [pc, #76]	@ (800a288 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a23c:	f000 fce8 	bl	800ac10 <USBD_GetEpDesc>
 800a240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2210      	movs	r2, #16
 800a24c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2200      	movs	r2, #0
 800a258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a25c:	711a      	strb	r2, [r3, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d006      	beq.n	800a276 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a270:	711a      	strb	r2, [r3, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2243      	movs	r2, #67	@ 0x43
 800a27a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a27c:	4b02      	ldr	r3, [pc, #8]	@ (800a288 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000050 	.word	0x20000050

0800a28c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	220a      	movs	r2, #10
 800a298:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a29a:	4b03      	ldr	r3, [pc, #12]	@ (800a2a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	2000000c 	.word	0x2000000c

0800a2ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e009      	b.n	800a2d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	33b0      	adds	r3, #176	@ 0xb0
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	32b0      	adds	r2, #176	@ 0xb0
 800a2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a302:	2303      	movs	r3, #3
 800a304:	e008      	b.n	800a318 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	32b0      	adds	r2, #176	@ 0xb0
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a344:	2303      	movs	r3, #3
 800a346:	e004      	b.n	800a352 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	32b0      	adds	r2, #176	@ 0xb0
 800a372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a376:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a378:	2301      	movs	r3, #1
 800a37a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	e025      	b.n	800a3d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d11f      	bne.n	800a3d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2201      	movs	r2, #1
 800a394:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a398:	4b10      	ldr	r3, [pc, #64]	@ (800a3dc <USBD_CDC_TransmitPacket+0x7c>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 020f 	and.w	r2, r3, #15
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4403      	add	r3, r0
 800a3b2:	3314      	adds	r3, #20
 800a3b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3b6:	4b09      	ldr	r3, [pc, #36]	@ (800a3dc <USBD_CDC_TransmitPacket+0x7c>)
 800a3b8:	7819      	ldrb	r1, [r3, #0]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f00f fec7 	bl	801a15a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000093 	.word	0x20000093

0800a3e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32b0      	adds	r2, #176	@ 0xb0
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32b0      	adds	r2, #176	@ 0xb0
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e018      	b.n	800a440 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7c1b      	ldrb	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a416:	4b0c      	ldr	r3, [pc, #48]	@ (800a448 <USBD_CDC_ReceivePacket+0x68>)
 800a418:	7819      	ldrb	r1, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f00f feb9 	bl	801a19c <USBD_LL_PrepareReceive>
 800a42a:	e008      	b.n	800a43e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a42c:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <USBD_CDC_ReceivePacket+0x68>)
 800a42e:	7819      	ldrb	r1, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a436:	2340      	movs	r3, #64	@ 0x40
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f00f feaf 	bl	801a19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000094 	.word	0x20000094

0800a44c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a460:	2303      	movs	r3, #3
 800a462:	e01f      	b.n	800a4a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f00f fd29 	bl	8019ef0 <USBD_LL_Init>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e025      	b.n	800a510 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32ae      	adds	r2, #174	@ 0xae
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00f      	beq.n	800a500 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32ae      	adds	r2, #174	@ 0xae
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	f107 020e 	add.w	r2, r7, #14
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	4798      	blx	r3
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f00f fd31 	bl	8019f88 <USBD_LL_Start>
 800a526:	4603      	mov	r3, r0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	4611      	mov	r1, r2
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	4798      	blx	r3
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	78fa      	ldrb	r2, [r7, #3]
 800a598:	4611      	mov	r1, r2
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 f922 	bl	800b80e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5d8:	461a      	mov	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5e6:	f003 031f 	and.w	r3, r3, #31
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d01a      	beq.n	800a624 <USBD_LL_SetupStage+0x72>
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d822      	bhi.n	800a638 <USBD_LL_SetupStage+0x86>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <USBD_LL_SetupStage+0x4a>
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d00a      	beq.n	800a610 <USBD_LL_SetupStage+0x5e>
 800a5fa:	e01d      	b.n	800a638 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fb77 	bl	800acf8 <USBD_StdDevReq>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]
      break;
 800a60e:	e020      	b.n	800a652 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fbdf 	bl	800addc <USBD_StdItfReq>
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
      break;
 800a622:	e016      	b.n	800a652 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fc41 	bl	800aeb4 <USBD_StdEPReq>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]
      break;
 800a636:	e00c      	b.n	800a652 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a63e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a642:	b2db      	uxtb	r3, r3
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f00f fcfe 	bl	801a048 <USBD_LL_StallEP>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
      break;
 800a650:	bf00      	nop
  }

  return ret;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	460b      	mov	r3, r1
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d177      	bne.n	800a764 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a67a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a682:	2b03      	cmp	r3, #3
 800a684:	f040 80a1 	bne.w	800a7ca <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	8992      	ldrh	r2, [r2, #12]
 800a690:	4293      	cmp	r3, r2
 800a692:	d91c      	bls.n	800a6ce <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	8992      	ldrh	r2, [r2, #12]
 800a69c:	1a9a      	subs	r2, r3, r2
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	8992      	ldrh	r2, [r2, #12]
 800a6aa:	441a      	add	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	6919      	ldr	r1, [r3, #16]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	899b      	ldrh	r3, [r3, #12]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	bf38      	it	cc
 800a6c2:	4613      	movcc	r3, r2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f001 f9a8 	bl	800ba1c <USBD_CtlContinueRx>
 800a6cc:	e07d      	b.n	800a7ca <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6d4:	f003 031f 	and.w	r3, r3, #31
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d014      	beq.n	800a706 <USBD_LL_DataOutStage+0xaa>
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d81d      	bhi.n	800a71c <USBD_LL_DataOutStage+0xc0>
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <USBD_LL_DataOutStage+0x8e>
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d003      	beq.n	800a6f0 <USBD_LL_DataOutStage+0x94>
 800a6e8:	e018      	b.n	800a71c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ee:	e018      	b.n	800a722 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fa6e 	bl	800abdc <USBD_CoreFindIF>
 800a700:	4603      	mov	r3, r0
 800a702:	75bb      	strb	r3, [r7, #22]
            break;
 800a704:	e00d      	b.n	800a722 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 fa70 	bl	800abf6 <USBD_CoreFindEP>
 800a716:	4603      	mov	r3, r0
 800a718:	75bb      	strb	r3, [r7, #22]
            break;
 800a71a:	e002      	b.n	800a722 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75bb      	strb	r3, [r7, #22]
            break;
 800a720:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a722:	7dbb      	ldrb	r3, [r7, #22]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d119      	bne.n	800a75c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b03      	cmp	r3, #3
 800a732:	d113      	bne.n	800a75c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a734:	7dba      	ldrb	r2, [r7, #22]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	32ae      	adds	r2, #174	@ 0xae
 800a73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a744:	7dba      	ldrb	r2, [r7, #22]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a74c:	7dba      	ldrb	r2, [r7, #22]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	32ae      	adds	r2, #174	@ 0xae
 800a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f001 f96e 	bl	800ba3e <USBD_CtlSendStatus>
 800a762:	e032      	b.n	800a7ca <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 fa41 	bl	800abf6 <USBD_CoreFindEP>
 800a774:	4603      	mov	r3, r0
 800a776:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a778:	7dbb      	ldrb	r3, [r7, #22]
 800a77a:	2bff      	cmp	r3, #255	@ 0xff
 800a77c:	d025      	beq.n	800a7ca <USBD_LL_DataOutStage+0x16e>
 800a77e:	7dbb      	ldrb	r3, [r7, #22]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d122      	bne.n	800a7ca <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d117      	bne.n	800a7c0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a790:	7dba      	ldrb	r2, [r7, #22]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	32ae      	adds	r2, #174	@ 0xae
 800a796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00f      	beq.n	800a7c0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a7a0:	7dba      	ldrb	r2, [r7, #22]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7a8:	7dba      	ldrb	r2, [r7, #22]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	32ae      	adds	r2, #174	@ 0xae
 800a7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	7afa      	ldrb	r2, [r7, #11]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	4798      	blx	r3
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	e000      	b.n	800a7cc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d178      	bne.n	800a8da <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3314      	adds	r3, #20
 800a7ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d163      	bne.n	800a8c0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	8992      	ldrh	r2, [r2, #12]
 800a800:	4293      	cmp	r3, r2
 800a802:	d91c      	bls.n	800a83e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	8992      	ldrh	r2, [r2, #12]
 800a80c:	1a9a      	subs	r2, r3, r2
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	8992      	ldrh	r2, [r2, #12]
 800a81a:	441a      	add	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6919      	ldr	r1, [r3, #16]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	461a      	mov	r2, r3
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f001 f8c4 	bl	800b9b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a830:	2300      	movs	r3, #0
 800a832:	2200      	movs	r2, #0
 800a834:	2100      	movs	r1, #0
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f00f fcb0 	bl	801a19c <USBD_LL_PrepareReceive>
 800a83c:	e040      	b.n	800a8c0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	899b      	ldrh	r3, [r3, #12]
 800a842:	461a      	mov	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d11c      	bne.n	800a886 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a854:	4293      	cmp	r3, r2
 800a856:	d316      	bcc.n	800a886 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a862:	429a      	cmp	r2, r3
 800a864:	d20f      	bcs.n	800a886 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f001 f8a4 	bl	800b9b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a878:	2300      	movs	r3, #0
 800a87a:	2200      	movs	r2, #0
 800a87c:	2100      	movs	r1, #0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f00f fc8c 	bl	801a19c <USBD_LL_PrepareReceive>
 800a884:	e01c      	b.n	800a8c0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d10f      	bne.n	800a8b2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d009      	beq.n	800a8b2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8b2:	2180      	movs	r1, #128	@ 0x80
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f00f fbc7 	bl	801a048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f001 f8d2 	bl	800ba64 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d03a      	beq.n	800a940 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fe30 	bl	800a530 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8d8:	e032      	b.n	800a940 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f986 	bl	800abf6 <USBD_CoreFindEP>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	2bff      	cmp	r3, #255	@ 0xff
 800a8f2:	d025      	beq.n	800a940 <USBD_LL_DataInStage+0x16c>
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d122      	bne.n	800a940 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b03      	cmp	r3, #3
 800a904:	d11c      	bne.n	800a940 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a906:	7dfa      	ldrb	r2, [r7, #23]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	32ae      	adds	r2, #174	@ 0xae
 800a90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d014      	beq.n	800a940 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a916:	7dfa      	ldrb	r2, [r7, #23]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a91e:	7dfa      	ldrb	r2, [r7, #23]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	32ae      	adds	r2, #174	@ 0xae
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	7afa      	ldrb	r2, [r7, #11]
 800a92c:	4611      	mov	r1, r2
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	4798      	blx	r3
 800a932:	4603      	mov	r3, r0
 800a934:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a936:	7dbb      	ldrb	r3, [r7, #22]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a93c:	7dbb      	ldrb	r3, [r7, #22]
 800a93e:	e000      	b.n	800a942 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a982:	2b00      	cmp	r3, #0
 800a984:	d014      	beq.n	800a9b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00e      	beq.n	800a9b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6852      	ldr	r2, [r2, #4]
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9b0:	2340      	movs	r3, #64	@ 0x40
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f00f fb01 	bl	8019fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2240      	movs	r2, #64	@ 0x40
 800a9c8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9cc:	2340      	movs	r3, #64	@ 0x40
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2180      	movs	r1, #128	@ 0x80
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f00f faf3 	bl	8019fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2240      	movs	r2, #64	@ 0x40
 800a9e4:	841a      	strh	r2, [r3, #32]

  return ret;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d006      	beq.n	800aa32 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2204      	movs	r2, #4
 800aa36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d106      	bne.n	800aa6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d110      	bne.n	800aaae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	32ae      	adds	r2, #174	@ 0xae
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e01c      	b.n	800ab14 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d115      	bne.n	800ab12 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	32ae      	adds	r2, #174	@ 0xae
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00b      	beq.n	800ab12 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	32ae      	adds	r2, #174	@ 0xae
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	78fa      	ldrb	r2, [r7, #3]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	32ae      	adds	r2, #174	@ 0xae
 800ab32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e01c      	b.n	800ab78 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d115      	bne.n	800ab76 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	32ae      	adds	r2, #174	@ 0xae
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00b      	beq.n	800ab76 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	32ae      	adds	r2, #174	@ 0xae
 800ab68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	4611      	mov	r1, r2
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	6852      	ldr	r2, [r2, #4]
 800abc0:	b2d2      	uxtb	r2, r2
 800abc2:	4611      	mov	r1, r2
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abe8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abea:	4618      	mov	r0, r3
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	885b      	ldrh	r3, [r3, #2]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	7812      	ldrb	r2, [r2, #0]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d91f      	bls.n	800ac76 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac3c:	e013      	b.n	800ac66 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac3e:	f107 030a 	add.w	r3, r7, #10
 800ac42:	4619      	mov	r1, r3
 800ac44:	6978      	ldr	r0, [r7, #20]
 800ac46:	f000 f81b 	bl	800ac80 <USBD_GetNextDesc>
 800ac4a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	785b      	ldrb	r3, [r3, #1]
 800ac50:	2b05      	cmp	r3, #5
 800ac52:	d108      	bne.n	800ac66 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	789b      	ldrb	r3, [r3, #2]
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d008      	beq.n	800ac74 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	885b      	ldrh	r3, [r3, #2]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	897b      	ldrh	r3, [r7, #10]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d8e5      	bhi.n	800ac3e <USBD_GetEpDesc+0x2e>
 800ac72:	e000      	b.n	800ac76 <USBD_GetEpDesc+0x66>
          break;
 800ac74:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac76:	693b      	ldr	r3, [r7, #16]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	4413      	add	r3, r2
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4413      	add	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3301      	adds	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	b21a      	sxth	r2, r3
 800acde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	b21b      	sxth	r3, r3
 800ace6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ace8:	89fb      	ldrh	r3, [r7, #14]
}
 800acea:	4618      	mov	r0, r3
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
	...

0800acf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad0e:	2b40      	cmp	r3, #64	@ 0x40
 800ad10:	d005      	beq.n	800ad1e <USBD_StdDevReq+0x26>
 800ad12:	2b40      	cmp	r3, #64	@ 0x40
 800ad14:	d857      	bhi.n	800adc6 <USBD_StdDevReq+0xce>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00f      	beq.n	800ad3a <USBD_StdDevReq+0x42>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d153      	bne.n	800adc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	32ae      	adds	r2, #174	@ 0xae
 800ad28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	4798      	blx	r3
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]
      break;
 800ad38:	e04a      	b.n	800add0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	2b09      	cmp	r3, #9
 800ad40:	d83b      	bhi.n	800adba <USBD_StdDevReq+0xc2>
 800ad42:	a201      	add	r2, pc, #4	@ (adr r2, 800ad48 <USBD_StdDevReq+0x50>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800adb1 	.word	0x0800adb1
 800ad50:	0800adbb 	.word	0x0800adbb
 800ad54:	0800ada7 	.word	0x0800ada7
 800ad58:	0800adbb 	.word	0x0800adbb
 800ad5c:	0800ad7b 	.word	0x0800ad7b
 800ad60:	0800ad71 	.word	0x0800ad71
 800ad64:	0800adbb 	.word	0x0800adbb
 800ad68:	0800ad93 	.word	0x0800ad93
 800ad6c:	0800ad85 	.word	0x0800ad85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa3e 	bl	800b1f4 <USBD_GetDescriptor>
          break;
 800ad78:	e024      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fba3 	bl	800b4c8 <USBD_SetAddress>
          break;
 800ad82:	e01f      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fbe2 	bl	800b550 <USBD_SetConfig>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad90:	e018      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc85 	bl	800b6a4 <USBD_GetConfig>
          break;
 800ad9a:	e013      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fcb6 	bl	800b710 <USBD_GetStatus>
          break;
 800ada4:	e00e      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fce5 	bl	800b778 <USBD_SetFeature>
          break;
 800adae:	e009      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fd09 	bl	800b7ca <USBD_ClrFeature>
          break;
 800adb8:	e004      	b.n	800adc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fd60 	bl	800b882 <USBD_CtlError>
          break;
 800adc2:	bf00      	nop
      }
      break;
 800adc4:	e004      	b.n	800add0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fd5a 	bl	800b882 <USBD_CtlError>
      break;
 800adce:	bf00      	nop
  }

  return ret;
 800add0:	7bfb      	ldrb	r3, [r7, #15]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop

0800addc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adf2:	2b40      	cmp	r3, #64	@ 0x40
 800adf4:	d005      	beq.n	800ae02 <USBD_StdItfReq+0x26>
 800adf6:	2b40      	cmp	r3, #64	@ 0x40
 800adf8:	d852      	bhi.n	800aea0 <USBD_StdItfReq+0xc4>
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <USBD_StdItfReq+0x26>
 800adfe:	2b20      	cmp	r3, #32
 800ae00:	d14e      	bne.n	800aea0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d840      	bhi.n	800ae92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	889b      	ldrh	r3, [r3, #4]
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d836      	bhi.n	800ae88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	889b      	ldrh	r3, [r3, #4]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff feda 	bl	800abdc <USBD_CoreFindIF>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2bff      	cmp	r3, #255	@ 0xff
 800ae30:	d01d      	beq.n	800ae6e <USBD_StdItfReq+0x92>
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d11a      	bne.n	800ae6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae38:	7bba      	ldrb	r2, [r7, #14]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	32ae      	adds	r2, #174	@ 0xae
 800ae3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00f      	beq.n	800ae68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae48:	7bba      	ldrb	r2, [r7, #14]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae50:	7bba      	ldrb	r2, [r7, #14]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	4798      	blx	r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae66:	e004      	b.n	800ae72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae6c:	e001      	b.n	800ae72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	88db      	ldrh	r3, [r3, #6]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d110      	bne.n	800ae9c <USBD_StdItfReq+0xc0>
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10d      	bne.n	800ae9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fddc 	bl	800ba3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae86:	e009      	b.n	800ae9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fcf9 	bl	800b882 <USBD_CtlError>
          break;
 800ae90:	e004      	b.n	800ae9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fcf4 	bl	800b882 <USBD_CtlError>
          break;
 800ae9a:	e000      	b.n	800ae9e <USBD_StdItfReq+0xc2>
          break;
 800ae9c:	bf00      	nop
      }
      break;
 800ae9e:	e004      	b.n	800aeaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fced 	bl	800b882 <USBD_CtlError>
      break;
 800aea8:	bf00      	nop
  }

  return ret;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	889b      	ldrh	r3, [r3, #4]
 800aec6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aed0:	2b40      	cmp	r3, #64	@ 0x40
 800aed2:	d007      	beq.n	800aee4 <USBD_StdEPReq+0x30>
 800aed4:	2b40      	cmp	r3, #64	@ 0x40
 800aed6:	f200 8181 	bhi.w	800b1dc <USBD_StdEPReq+0x328>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d02a      	beq.n	800af34 <USBD_StdEPReq+0x80>
 800aede:	2b20      	cmp	r3, #32
 800aee0:	f040 817c 	bne.w	800b1dc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff fe84 	bl	800abf6 <USBD_CoreFindEP>
 800aeee:	4603      	mov	r3, r0
 800aef0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aef2:	7b7b      	ldrb	r3, [r7, #13]
 800aef4:	2bff      	cmp	r3, #255	@ 0xff
 800aef6:	f000 8176 	beq.w	800b1e6 <USBD_StdEPReq+0x332>
 800aefa:	7b7b      	ldrb	r3, [r7, #13]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f040 8172 	bne.w	800b1e6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800af02:	7b7a      	ldrb	r2, [r7, #13]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af0a:	7b7a      	ldrb	r2, [r7, #13]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	32ae      	adds	r2, #174	@ 0xae
 800af10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 8165 	beq.w	800b1e6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af1c:	7b7a      	ldrb	r2, [r7, #13]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	32ae      	adds	r2, #174	@ 0xae
 800af22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	4798      	blx	r3
 800af2e:	4603      	mov	r3, r0
 800af30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af32:	e158      	b.n	800b1e6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d008      	beq.n	800af4e <USBD_StdEPReq+0x9a>
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	f300 8147 	bgt.w	800b1d0 <USBD_StdEPReq+0x31c>
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 809b 	beq.w	800b07e <USBD_StdEPReq+0x1ca>
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d03c      	beq.n	800afc6 <USBD_StdEPReq+0x112>
 800af4c:	e140      	b.n	800b1d0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b02      	cmp	r3, #2
 800af58:	d002      	beq.n	800af60 <USBD_StdEPReq+0xac>
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d016      	beq.n	800af8c <USBD_StdEPReq+0xd8>
 800af5e:	e02c      	b.n	800afba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00d      	beq.n	800af82 <USBD_StdEPReq+0xce>
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	2b80      	cmp	r3, #128	@ 0x80
 800af6a:	d00a      	beq.n	800af82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f00f f869 	bl	801a048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af76:	2180      	movs	r1, #128	@ 0x80
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f00f f865 	bl	801a048 <USBD_LL_StallEP>
 800af7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af80:	e020      	b.n	800afc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fc7c 	bl	800b882 <USBD_CtlError>
              break;
 800af8a:	e01b      	b.n	800afc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	885b      	ldrh	r3, [r3, #2]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10e      	bne.n	800afb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <USBD_StdEPReq+0xfe>
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b80      	cmp	r3, #128	@ 0x80
 800af9e:	d008      	beq.n	800afb2 <USBD_StdEPReq+0xfe>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	88db      	ldrh	r3, [r3, #6]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d104      	bne.n	800afb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f00f f84b 	bl	801a048 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fd43 	bl	800ba3e <USBD_CtlSendStatus>

              break;
 800afb8:	e004      	b.n	800afc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fc60 	bl	800b882 <USBD_CtlError>
              break;
 800afc2:	bf00      	nop
          }
          break;
 800afc4:	e109      	b.n	800b1da <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d002      	beq.n	800afd8 <USBD_StdEPReq+0x124>
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d016      	beq.n	800b004 <USBD_StdEPReq+0x150>
 800afd6:	e04b      	b.n	800b070 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00d      	beq.n	800affa <USBD_StdEPReq+0x146>
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	2b80      	cmp	r3, #128	@ 0x80
 800afe2:	d00a      	beq.n	800affa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f00f f82d 	bl	801a048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afee:	2180      	movs	r1, #128	@ 0x80
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f00f f829 	bl	801a048 <USBD_LL_StallEP>
 800aff6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aff8:	e040      	b.n	800b07c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fc40 	bl	800b882 <USBD_CtlError>
              break;
 800b002:	e03b      	b.n	800b07c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	885b      	ldrh	r3, [r3, #2]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d136      	bne.n	800b07a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b012:	2b00      	cmp	r3, #0
 800b014:	d004      	beq.n	800b020 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f00f f833 	bl	801a086 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fd0c 	bl	800ba3e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fde3 	bl	800abf6 <USBD_CoreFindEP>
 800b030:	4603      	mov	r3, r0
 800b032:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b034:	7b7b      	ldrb	r3, [r7, #13]
 800b036:	2bff      	cmp	r3, #255	@ 0xff
 800b038:	d01f      	beq.n	800b07a <USBD_StdEPReq+0x1c6>
 800b03a:	7b7b      	ldrb	r3, [r7, #13]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d11c      	bne.n	800b07a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b040:	7b7a      	ldrb	r2, [r7, #13]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b048:	7b7a      	ldrb	r2, [r7, #13]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32ae      	adds	r2, #174	@ 0xae
 800b04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d010      	beq.n	800b07a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b058:	7b7a      	ldrb	r2, [r7, #13]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	32ae      	adds	r2, #174	@ 0xae
 800b05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b06e:	e004      	b.n	800b07a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fc05 	bl	800b882 <USBD_CtlError>
              break;
 800b078:	e000      	b.n	800b07c <USBD_StdEPReq+0x1c8>
              break;
 800b07a:	bf00      	nop
          }
          break;
 800b07c:	e0ad      	b.n	800b1da <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b02      	cmp	r3, #2
 800b088:	d002      	beq.n	800b090 <USBD_StdEPReq+0x1dc>
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d033      	beq.n	800b0f6 <USBD_StdEPReq+0x242>
 800b08e:	e099      	b.n	800b1c4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <USBD_StdEPReq+0x1f2>
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b80      	cmp	r3, #128	@ 0x80
 800b09a:	d004      	beq.n	800b0a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fbef 	bl	800b882 <USBD_CtlError>
                break;
 800b0a4:	e093      	b.n	800b1ce <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	da0b      	bge.n	800b0c6 <USBD_StdEPReq+0x212>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	3310      	adds	r3, #16
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	e00b      	b.n	800b0de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	4413      	add	r3, r2
 800b0dc:	3304      	adds	r3, #4
 800b0de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	330e      	adds	r3, #14
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fc44 	bl	800b97c <USBD_CtlSendData>
              break;
 800b0f4:	e06b      	b.n	800b1ce <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	da11      	bge.n	800b122 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	f003 020f 	and.w	r2, r3, #15
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	3323      	adds	r3, #35	@ 0x23
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d117      	bne.n	800b148 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fbb1 	bl	800b882 <USBD_CtlError>
                  break;
 800b120:	e055      	b.n	800b1ce <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	f003 020f 	and.w	r2, r3, #15
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	4613      	mov	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	440b      	add	r3, r1
 800b134:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d104      	bne.n	800b148 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fb9e 	bl	800b882 <USBD_CtlError>
                  break;
 800b146:	e042      	b.n	800b1ce <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	da0b      	bge.n	800b168 <USBD_StdEPReq+0x2b4>
 800b150:	7bbb      	ldrb	r3, [r7, #14]
 800b152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	3310      	adds	r3, #16
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	4413      	add	r3, r2
 800b164:	3304      	adds	r3, #4
 800b166:	e00b      	b.n	800b180 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	4413      	add	r3, r2
 800b17e:	3304      	adds	r3, #4
 800b180:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <USBD_StdEPReq+0x2da>
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	2b80      	cmp	r3, #128	@ 0x80
 800b18c:	d103      	bne.n	800b196 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2200      	movs	r2, #0
 800b192:	739a      	strb	r2, [r3, #14]
 800b194:	e00e      	b.n	800b1b4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f00e ff92 	bl	801a0c4 <USBD_LL_IsStallEP>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	739a      	strb	r2, [r3, #14]
 800b1ac:	e002      	b.n	800b1b4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	330e      	adds	r3, #14
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fbdd 	bl	800b97c <USBD_CtlSendData>
              break;
 800b1c2:	e004      	b.n	800b1ce <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fb5b 	bl	800b882 <USBD_CtlError>
              break;
 800b1cc:	bf00      	nop
          }
          break;
 800b1ce:	e004      	b.n	800b1da <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fb55 	bl	800b882 <USBD_CtlError>
          break;
 800b1d8:	bf00      	nop
      }
      break;
 800b1da:	e005      	b.n	800b1e8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fb4f 	bl	800b882 <USBD_CtlError>
      break;
 800b1e4:	e000      	b.n	800b1e8 <USBD_StdEPReq+0x334>
      break;
 800b1e6:	bf00      	nop
  }

  return ret;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	2b06      	cmp	r3, #6
 800b216:	f200 8128 	bhi.w	800b46a <USBD_GetDescriptor+0x276>
 800b21a:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <USBD_GetDescriptor+0x2c>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b255 	.word	0x0800b255
 800b228:	0800b295 	.word	0x0800b295
 800b22c:	0800b46b 	.word	0x0800b46b
 800b230:	0800b46b 	.word	0x0800b46b
 800b234:	0800b40b 	.word	0x0800b40b
 800b238:	0800b437 	.word	0x0800b437
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	f107 0108 	add.w	r1, r7, #8
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	60f8      	str	r0, [r7, #12]
      break;
 800b252:	e112      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	7c1b      	ldrb	r3, [r3, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10d      	bne.n	800b278 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b264:	f107 0208 	add.w	r2, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	2202      	movs	r2, #2
 800b274:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b276:	e100      	b.n	800b47a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b280:	f107 0208 	add.w	r2, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	2202      	movs	r2, #2
 800b290:	701a      	strb	r2, [r3, #0]
      break;
 800b292:	e0f2      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	885b      	ldrh	r3, [r3, #2]
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	f200 80ac 	bhi.w	800b3f8 <USBD_GetDescriptor+0x204>
 800b2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a8 <USBD_GetDescriptor+0xb4>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2c1 	.word	0x0800b2c1
 800b2ac:	0800b2f5 	.word	0x0800b2f5
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b35d 	.word	0x0800b35d
 800b2b8:	0800b391 	.word	0x0800b391
 800b2bc:	0800b3c5 	.word	0x0800b3c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00b      	beq.n	800b2e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e2:	e091      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 facb 	bl	800b882 <USBD_CtlError>
            err++;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f2:	e089      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7c12      	ldrb	r2, [r2, #16]
 800b30c:	f107 0108 	add.w	r1, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b316:	e077      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fab1 	bl	800b882 <USBD_CtlError>
            err++;
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	3301      	adds	r3, #1
 800b324:	72fb      	strb	r3, [r7, #11]
          break;
 800b326:	e06f      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	7c12      	ldrb	r2, [r2, #16]
 800b340:	f107 0108 	add.w	r1, r7, #8
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
 800b348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34a:	e05d      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fa97 	bl	800b882 <USBD_CtlError>
            err++;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	3301      	adds	r3, #1
 800b358:	72fb      	strb	r3, [r7, #11]
          break;
 800b35a:	e055      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00b      	beq.n	800b380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7c12      	ldrb	r2, [r2, #16]
 800b374:	f107 0108 	add.w	r1, r7, #8
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b37e:	e043      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa7d 	bl	800b882 <USBD_CtlError>
            err++;
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	3301      	adds	r3, #1
 800b38c:	72fb      	strb	r3, [r7, #11]
          break;
 800b38e:	e03b      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00b      	beq.n	800b3b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7c12      	ldrb	r2, [r2, #16]
 800b3a8:	f107 0108 	add.w	r1, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b2:	e029      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa63 	bl	800b882 <USBD_CtlError>
            err++;
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c2:	e021      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	7c12      	ldrb	r2, [r2, #16]
 800b3dc:	f107 0108 	add.w	r1, r7, #8
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	4798      	blx	r3
 800b3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e6:	e00f      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa49 	bl	800b882 <USBD_CtlError>
            err++;
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3f6:	e007      	b.n	800b408 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fa41 	bl	800b882 <USBD_CtlError>
          err++;
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	3301      	adds	r3, #1
 800b404:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b406:	bf00      	nop
      }
      break;
 800b408:	e037      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7c1b      	ldrb	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b41a:	f107 0208 	add.w	r2, r7, #8
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
 800b422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b424:	e029      	b.n	800b47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fa2a 	bl	800b882 <USBD_CtlError>
        err++;
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	3301      	adds	r3, #1
 800b432:	72fb      	strb	r3, [r7, #11]
      break;
 800b434:	e021      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	7c1b      	ldrb	r3, [r3, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10d      	bne.n	800b45a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b446:	f107 0208 	add.w	r2, r7, #8
 800b44a:	4610      	mov	r0, r2
 800b44c:	4798      	blx	r3
 800b44e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3301      	adds	r3, #1
 800b454:	2207      	movs	r2, #7
 800b456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b458:	e00f      	b.n	800b47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa10 	bl	800b882 <USBD_CtlError>
        err++;
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	3301      	adds	r3, #1
 800b466:	72fb      	strb	r3, [r7, #11]
      break;
 800b468:	e007      	b.n	800b47a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa08 	bl	800b882 <USBD_CtlError>
      err++;
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	3301      	adds	r3, #1
 800b476:	72fb      	strb	r3, [r7, #11]
      break;
 800b478:	bf00      	nop
  }

  if (err != 0U)
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d11e      	bne.n	800b4be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	88db      	ldrh	r3, [r3, #6]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d016      	beq.n	800b4b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b488:	893b      	ldrh	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00e      	beq.n	800b4ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88da      	ldrh	r2, [r3, #6]
 800b492:	893b      	ldrh	r3, [r7, #8]
 800b494:	4293      	cmp	r3, r2
 800b496:	bf28      	it	cs
 800b498:	4613      	movcs	r3, r2
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b49e:	893b      	ldrh	r3, [r7, #8]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68f9      	ldr	r1, [r7, #12]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa69 	bl	800b97c <USBD_CtlSendData>
 800b4aa:	e009      	b.n	800b4c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f9e7 	bl	800b882 <USBD_CtlError>
 800b4b4:	e004      	b.n	800b4c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fac1 	bl	800ba3e <USBD_CtlSendStatus>
 800b4bc:	e000      	b.n	800b4c0 <USBD_GetDescriptor+0x2cc>
    return;
 800b4be:	bf00      	nop
  }
}
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop

0800b4c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	889b      	ldrh	r3, [r3, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d131      	bne.n	800b53e <USBD_SetAddress+0x76>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d12d      	bne.n	800b53e <USBD_SetAddress+0x76>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4e8:	d829      	bhi.n	800b53e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d104      	bne.n	800b50c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f9bc 	bl	800b882 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50a:	e01d      	b.n	800b548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7bfa      	ldrb	r2, [r7, #15]
 800b510:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f00e fdff 	bl	801a11c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fa8d 	bl	800ba3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d004      	beq.n	800b534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2202      	movs	r2, #2
 800b52e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b532:	e009      	b.n	800b548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53c:	e004      	b.n	800b548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f99e 	bl	800b882 <USBD_CtlError>
  }
}
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	885b      	ldrh	r3, [r3, #2]
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b4e      	ldr	r3, [pc, #312]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b568:	4b4d      	ldr	r3, [pc, #308]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d905      	bls.n	800b57c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f985 	bl	800b882 <USBD_CtlError>
    return USBD_FAIL;
 800b578:	2303      	movs	r3, #3
 800b57a:	e08c      	b.n	800b696 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b02      	cmp	r3, #2
 800b586:	d002      	beq.n	800b58e <USBD_SetConfig+0x3e>
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d029      	beq.n	800b5e0 <USBD_SetConfig+0x90>
 800b58c:	e075      	b.n	800b67a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b58e:	4b44      	ldr	r3, [pc, #272]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d020      	beq.n	800b5d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b596:	4b42      	ldr	r3, [pc, #264]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5a0:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7fe ffcd 	bl	800a546 <USBD_SetClassConfig>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d008      	beq.n	800b5c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f962 	bl	800b882 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5c6:	e065      	b.n	800b694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fa38 	bl	800ba3e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5d6:	e05d      	b.n	800b694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fa30 	bl	800ba3e <USBD_CtlSendStatus>
      break;
 800b5de:	e059      	b.n	800b694 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5e0:	4b2f      	ldr	r3, [pc, #188]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d112      	bne.n	800b60e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5f0:	4b2b      	ldr	r3, [pc, #172]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5fa:	4b29      	ldr	r3, [pc, #164]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe ffbc 	bl	800a57e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa19 	bl	800ba3e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b60c:	e042      	b.n	800b694 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b60e:	4b24      	ldr	r3, [pc, #144]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d02a      	beq.n	800b672 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe ffaa 	bl	800a57e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b62a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b634:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7fe ff83 	bl	800a546 <USBD_SetClassConfig>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00f      	beq.n	800b66a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f918 	bl	800b882 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe ff8f 	bl	800a57e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2202      	movs	r2, #2
 800b664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b668:	e014      	b.n	800b694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9e7 	bl	800ba3e <USBD_CtlSendStatus>
      break;
 800b670:	e010      	b.n	800b694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9e3 	bl	800ba3e <USBD_CtlSendStatus>
      break;
 800b678:	e00c      	b.n	800b694 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f900 	bl	800b882 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b682:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <USBD_SetConfig+0x150>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7fe ff78 	bl	800a57e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b68e:	2303      	movs	r3, #3
 800b690:	73fb      	strb	r3, [r7, #15]
      break;
 800b692:	bf00      	nop
  }

  return ret;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	200052b4 	.word	0x200052b4

0800b6a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	88db      	ldrh	r3, [r3, #6]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d004      	beq.n	800b6c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f8e2 	bl	800b882 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6be:	e023      	b.n	800b708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	dc02      	bgt.n	800b6d2 <USBD_GetConfig+0x2e>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dc03      	bgt.n	800b6d8 <USBD_GetConfig+0x34>
 800b6d0:	e015      	b.n	800b6fe <USBD_GetConfig+0x5a>
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d00b      	beq.n	800b6ee <USBD_GetConfig+0x4a>
 800b6d6:	e012      	b.n	800b6fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f948 	bl	800b97c <USBD_CtlSendData>
        break;
 800b6ec:	e00c      	b.n	800b708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f940 	bl	800b97c <USBD_CtlSendData>
        break;
 800b6fc:	e004      	b.n	800b708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f8be 	bl	800b882 <USBD_CtlError>
        break;
 800b706:	bf00      	nop
}
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b720:	b2db      	uxtb	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	2b02      	cmp	r3, #2
 800b726:	d81e      	bhi.n	800b766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	88db      	ldrh	r3, [r3, #6]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d004      	beq.n	800b73a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8a5 	bl	800b882 <USBD_CtlError>
        break;
 800b738:	e01a      	b.n	800b770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	f043 0202 	orr.w	r2, r3, #2
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	330c      	adds	r3, #12
 800b75a:	2202      	movs	r2, #2
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f90c 	bl	800b97c <USBD_CtlSendData>
      break;
 800b764:	e004      	b.n	800b770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f88a 	bl	800b882 <USBD_CtlError>
      break;
 800b76e:	bf00      	nop
  }
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d107      	bne.n	800b79a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f953 	bl	800ba3e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b798:	e013      	b.n	800b7c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	885b      	ldrh	r3, [r3, #2]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d10b      	bne.n	800b7ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	889b      	ldrh	r3, [r3, #4]
 800b7a6:	0a1b      	lsrs	r3, r3, #8
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f943 	bl	800ba3e <USBD_CtlSendStatus>
}
 800b7b8:	e003      	b.n	800b7c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f860 	bl	800b882 <USBD_CtlError>
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d80b      	bhi.n	800b7fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	885b      	ldrh	r3, [r3, #2]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d10c      	bne.n	800b804 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f923 	bl	800ba3e <USBD_CtlSendStatus>
      }
      break;
 800b7f8:	e004      	b.n	800b804 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f840 	bl	800b882 <USBD_CtlError>
      break;
 800b802:	e000      	b.n	800b806 <USBD_ClrFeature+0x3c>
      break;
 800b804:	bf00      	nop
  }
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	781a      	ldrb	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3301      	adds	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff fa3d 	bl	800acb8 <SWAPBYTE>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fa30 	bl	800acb8 <SWAPBYTE>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3301      	adds	r3, #1
 800b86a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fa23 	bl	800acb8 <SWAPBYTE>
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	80da      	strh	r2, [r3, #6]
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b88c:	2180      	movs	r1, #128	@ 0x80
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f00e fbda 	bl	801a048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b894:	2100      	movs	r1, #0
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f00e fbd6 	bl	801a048 <USBD_LL_StallEP>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d042      	beq.n	800b940 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8be:	6938      	ldr	r0, [r7, #16]
 800b8c0:	f000 f842 	bl	800b948 <USBD_GetLen>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8ce:	d808      	bhi.n	800b8e2 <USBD_GetString+0x3e>
 800b8d0:	6938      	ldr	r0, [r7, #16]
 800b8d2:	f000 f839 	bl	800b948 <USBD_GetLen>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	3301      	adds	r3, #1
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	e001      	b.n	800b8e6 <USBD_GetString+0x42>
 800b8e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	7812      	ldrb	r2, [r2, #0]
 800b8f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4413      	add	r3, r2
 800b902:	2203      	movs	r2, #3
 800b904:	701a      	strb	r2, [r3, #0]
  idx++;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	3301      	adds	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b90c:	e013      	b.n	800b936 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	4413      	add	r3, r2
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	7812      	ldrb	r2, [r2, #0]
 800b918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3301      	adds	r3, #1
 800b91e:	613b      	str	r3, [r7, #16]
    idx++;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	3301      	adds	r3, #1
 800b924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	4413      	add	r3, r2
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	3301      	adds	r3, #1
 800b934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e7      	bne.n	800b90e <USBD_GetString+0x6a>
 800b93e:	e000      	b.n	800b942 <USBD_GetString+0x9e>
    return;
 800b940:	bf00      	nop
  }
}
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b958:	e005      	b.n	800b966 <USBD_GetLen+0x1e>
  {
    len++;
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	3301      	adds	r3, #1
 800b95e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	3301      	adds	r3, #1
 800b964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f5      	bne.n	800b95a <USBD_GetLen+0x12>
  }

  return len;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f00e fbd6 	bl	801a15a <USBD_LL_Transmit>

  return USBD_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f00e fbc5 	bl	801a15a <USBD_LL_Transmit>

  return USBD_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f00e fbc5 	bl	801a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f00e fbb4 	bl	801a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b082      	sub	sp, #8
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2204      	movs	r2, #4
 800ba4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f00e fb80 	bl	801a15a <USBD_LL_Transmit>

  return USBD_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2205      	movs	r2, #5
 800ba70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba74:	2300      	movs	r3, #0
 800ba76:	2200      	movs	r2, #0
 800ba78:	2100      	movs	r1, #0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f00e fb8e 	bl	801a19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	4603      	mov	r3, r0
 800ba92:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba94:	2300      	movs	r3, #0
 800ba96:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba9c:	2b84      	cmp	r3, #132	@ 0x84
 800ba9e:	d005      	beq.n	800baac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800baa0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	3303      	adds	r3, #3
 800baaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800baac:	68fb      	ldr	r3, [r7, #12]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bac0:	f3ef 8305 	mrs	r3, IPSR
 800bac4:	607b      	str	r3, [r7, #4]
  return(result);
 800bac6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf14      	ite	ne
 800bacc:	2301      	movne	r3, #1
 800bace:	2300      	moveq	r3, #0
 800bad0:	b2db      	uxtb	r3, r3
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bae2:	f001 fc95 	bl	800d410 <vTaskStartScheduler>
  
  return osOK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	bd80      	pop	{r7, pc}

0800baec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800baf0:	f7ff ffe3 	bl	800baba <inHandlerMode>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bafa:	f001 fdaf 	bl	800d65c <xTaskGetTickCountFromISR>
 800bafe:	4603      	mov	r3, r0
 800bb00:	e002      	b.n	800bb08 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bb02:	f001 fd9b 	bl	800d63c <xTaskGetTickCount>
 800bb06:	4603      	mov	r3, r0
  }
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb0e:	b089      	sub	sp, #36	@ 0x24
 800bb10:	af04      	add	r7, sp, #16
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d020      	beq.n	800bb60 <osThreadCreate+0x54>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d01c      	beq.n	800bb60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685c      	ldr	r4, [r3, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691e      	ldr	r6, [r3, #16]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff ffa6 	bl	800ba8a <makeFreeRtosPriority>
 800bb3e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb48:	9202      	str	r2, [sp, #8]
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	9100      	str	r1, [sp, #0]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4629      	mov	r1, r5
 800bb54:	4620      	mov	r0, r4
 800bb56:	f001 fa75 	bl	800d044 <xTaskCreateStatic>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	e01c      	b.n	800bb9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685c      	ldr	r4, [r3, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb6c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff ff88 	bl	800ba8a <makeFreeRtosPriority>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	f107 030c 	add.w	r3, r7, #12
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	9200      	str	r2, [sp, #0]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	4632      	mov	r2, r6
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f001 faba 	bl	800d104 <xTaskCreate>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d001      	beq.n	800bb9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	e000      	b.n	800bb9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bba4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <osDelay+0x16>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	e000      	b.n	800bbbc <osDelay+0x18>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fbf1 	bl	800d3a4 <vTaskDelay>
  
  return osOK;
 800bbc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	f000 fc47 	bl	800c476 <xQueueCreateMutexStatic>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	e003      	b.n	800bbf4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bbec:	2001      	movs	r0, #1
 800bbee:	f000 fc2a 	bl	800c446 <xQueueCreateMutex>
 800bbf2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bc06:	2300      	movs	r3, #0
 800bc08:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d101      	bne.n	800bc14 <osMutexWait+0x18>
    return osErrorParameter;
 800bc10:	2380      	movs	r3, #128	@ 0x80
 800bc12:	e03a      	b.n	800bc8a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d103      	bne.n	800bc28 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	e009      	b.n	800bc3c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d006      	beq.n	800bc3c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <osMutexWait+0x40>
      ticks = 1;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bc3c:	f7ff ff3d 	bl	800baba <inHandlerMode>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d017      	beq.n	800bc76 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bc46:	f107 0308 	add.w	r3, r7, #8
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 f84e 	bl	800ccf0 <xQueueReceiveFromISR>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d001      	beq.n	800bc5e <osMutexWait+0x62>
      return osErrorOS;
 800bc5a:	23ff      	movs	r3, #255	@ 0xff
 800bc5c:	e015      	b.n	800bc8a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d011      	beq.n	800bc88 <osMutexWait+0x8c>
 800bc64:	4b0b      	ldr	r3, [pc, #44]	@ (800bc94 <osMutexWait+0x98>)
 800bc66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	e008      	b.n	800bc88 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 ff29 	bl	800cad0 <xQueueSemaphoreTake>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d001      	beq.n	800bc88 <osMutexWait+0x8c>
    return osErrorOS;
 800bc84:	23ff      	movs	r3, #255	@ 0xff
 800bc86:	e000      	b.n	800bc8a <osMutexWait+0x8e>
  }
  
  return osOK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bca8:	f7ff ff07 	bl	800baba <inHandlerMode>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d016      	beq.n	800bce0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bcb2:	f107 0308 	add.w	r3, r7, #8
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fd97 	bl	800c7ec <xQueueGiveFromISR>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d001      	beq.n	800bcc8 <osMutexRelease+0x30>
      return osErrorOS;
 800bcc4:	23ff      	movs	r3, #255	@ 0xff
 800bcc6:	e017      	b.n	800bcf8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d013      	beq.n	800bcf6 <osMutexRelease+0x5e>
 800bcce:	4b0c      	ldr	r3, [pc, #48]	@ (800bd00 <osMutexRelease+0x68>)
 800bcd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	e00a      	b.n	800bcf6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800bce0:	2300      	movs	r3, #0
 800bce2:	2200      	movs	r2, #0
 800bce4:	2100      	movs	r1, #0
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fbe0 	bl	800c4ac <xQueueGenericSend>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d001      	beq.n	800bcf6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800bcf2:	23ff      	movs	r3, #255	@ 0xff
 800bcf4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	e000ed04 	.word	0xe000ed04

0800bd04 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00f      	beq.n	800bd36 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d10a      	bne.n	800bd32 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	2203      	movs	r2, #3
 800bd22:	9200      	str	r2, [sp, #0]
 800bd24:	2200      	movs	r2, #0
 800bd26:	2100      	movs	r1, #0
 800bd28:	2001      	movs	r0, #1
 800bd2a:	f000 fa9b 	bl	800c264 <xQueueGenericCreateStatic>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	e016      	b.n	800bd60 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e014      	b.n	800bd60 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d110      	bne.n	800bd5e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	2100      	movs	r1, #0
 800bd40:	2001      	movs	r0, #1
 800bd42:	f000 fb0c 	bl	800c35e <xQueueGenericCreate>
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <osSemaphoreCreate+0x56>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	2200      	movs	r2, #0
 800bd52:	2100      	movs	r1, #0
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 fba9 	bl	800c4ac <xQueueGenericSend>
      return sema;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	e000      	b.n	800bd60 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bd5e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd72:	2300      	movs	r3, #0
 800bd74:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bd7c:	2380      	movs	r3, #128	@ 0x80
 800bd7e:	e03a      	b.n	800bdf6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d103      	bne.n	800bd94 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e009      	b.n	800bda8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d006      	beq.n	800bda8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <osSemaphoreWait+0x40>
      ticks = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bda8:	f7ff fe87 	bl	800baba <inHandlerMode>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d017      	beq.n	800bde2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bdb2:	f107 0308 	add.w	r3, r7, #8
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 ff98 	bl	800ccf0 <xQueueReceiveFromISR>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d001      	beq.n	800bdca <osSemaphoreWait+0x62>
      return osErrorOS;
 800bdc6:	23ff      	movs	r3, #255	@ 0xff
 800bdc8:	e015      	b.n	800bdf6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d011      	beq.n	800bdf4 <osSemaphoreWait+0x8c>
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	@ (800be00 <osSemaphoreWait+0x98>)
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	e008      	b.n	800bdf4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bde2:	68f9      	ldr	r1, [r7, #12]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fe73 	bl	800cad0 <xQueueSemaphoreTake>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d001      	beq.n	800bdf4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bdf0:	23ff      	movs	r3, #255	@ 0xff
 800bdf2:	e000      	b.n	800bdf6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	e000ed04 	.word	0xe000ed04

0800be04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800be14:	f7ff fe51 	bl	800baba <inHandlerMode>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d016      	beq.n	800be4c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fce1 	bl	800c7ec <xQueueGiveFromISR>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d001      	beq.n	800be34 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800be30:	23ff      	movs	r3, #255	@ 0xff
 800be32:	e017      	b.n	800be64 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d013      	beq.n	800be62 <osSemaphoreRelease+0x5e>
 800be3a:	4b0c      	ldr	r3, [pc, #48]	@ (800be6c <osSemaphoreRelease+0x68>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	e00a      	b.n	800be62 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800be4c:	2300      	movs	r3, #0
 800be4e:	2200      	movs	r2, #0
 800be50:	2100      	movs	r1, #0
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fb2a 	bl	800c4ac <xQueueGenericSend>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d001      	beq.n	800be62 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800be5e:	23ff      	movs	r3, #255	@ 0xff
 800be60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800be62:	68fb      	ldr	r3, [r7, #12]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800be70:	b590      	push	{r4, r7, lr}
 800be72:	b085      	sub	sp, #20
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d011      	beq.n	800bea6 <osMessageCreate+0x36>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00d      	beq.n	800bea6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6859      	ldr	r1, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689a      	ldr	r2, [r3, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	2400      	movs	r4, #0
 800be9c:	9400      	str	r4, [sp, #0]
 800be9e:	f000 f9e1 	bl	800c264 <xQueueGenericCreateStatic>
 800bea2:	4603      	mov	r3, r0
 800bea4:	e008      	b.n	800beb8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	4619      	mov	r1, r3
 800beb2:	f000 fa54 	bl	800c35e <xQueueGenericCreate>
 800beb6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd90      	pop	{r4, r7, pc}

0800bec0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800becc:	2300      	movs	r3, #0
 800bece:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <osMessagePut+0x1e>
    ticks = 1;
 800beda:	2301      	movs	r3, #1
 800bedc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bede:	f7ff fdec 	bl	800baba <inHandlerMode>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d018      	beq.n	800bf1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bee8:	f107 0210 	add.w	r2, r7, #16
 800beec:	f107 0108 	add.w	r1, r7, #8
 800bef0:	2300      	movs	r3, #0
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 fbdc 	bl	800c6b0 <xQueueGenericSendFromISR>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b01      	cmp	r3, #1
 800befc:	d001      	beq.n	800bf02 <osMessagePut+0x42>
      return osErrorOS;
 800befe:	23ff      	movs	r3, #255	@ 0xff
 800bf00:	e018      	b.n	800bf34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d014      	beq.n	800bf32 <osMessagePut+0x72>
 800bf08:	4b0c      	ldr	r3, [pc, #48]	@ (800bf3c <osMessagePut+0x7c>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	e00b      	b.n	800bf32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bf1a:	f107 0108 	add.w	r1, r7, #8
 800bf1e:	2300      	movs	r3, #0
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 fac2 	bl	800c4ac <xQueueGenericSend>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d001      	beq.n	800bf32 <osMessagePut+0x72>
      return osErrorOS;
 800bf2e:	23ff      	movs	r3, #255	@ 0xff
 800bf30:	e000      	b.n	800bf34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	e000ed04 	.word	0xe000ed04

0800bf40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b08b      	sub	sp, #44	@ 0x2c
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10a      	bne.n	800bf70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bf5a:	2380      	movs	r3, #128	@ 0x80
 800bf5c:	617b      	str	r3, [r7, #20]
    return event;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	461c      	mov	r4, r3
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf6e:	e054      	b.n	800c01a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bf74:	2300      	movs	r3, #0
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7e:	d103      	bne.n	800bf88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295
 800bf84:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf86:	e009      	b.n	800bf9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d006      	beq.n	800bf9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <osMessageGet+0x5c>
      ticks = 1;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bf9c:	f7ff fd8d 	bl	800baba <inHandlerMode>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d01c      	beq.n	800bfe0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bfa6:	f107 0220 	add.w	r2, r7, #32
 800bfaa:	f107 0314 	add.w	r3, r7, #20
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68b8      	ldr	r0, [r7, #8]
 800bfb4:	f000 fe9c 	bl	800ccf0 <xQueueReceiveFromISR>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d102      	bne.n	800bfc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e001      	b.n	800bfc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01d      	beq.n	800c00a <osMessageGet+0xca>
 800bfce:	4b15      	ldr	r3, [pc, #84]	@ (800c024 <osMessageGet+0xe4>)
 800bfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	e014      	b.n	800c00a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfe8:	4619      	mov	r1, r3
 800bfea:	68b8      	ldr	r0, [r7, #8]
 800bfec:	f000 fc8e 	bl	800c90c <xQueueReceive>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d102      	bne.n	800bffc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bff6:	2310      	movs	r3, #16
 800bff8:	617b      	str	r3, [r7, #20]
 800bffa:	e006      	b.n	800c00a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <osMessageGet+0xc6>
 800c002:	2300      	movs	r3, #0
 800c004:	e000      	b.n	800c008 <osMessageGet+0xc8>
 800c006:	2340      	movs	r3, #64	@ 0x40
 800c008:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	461c      	mov	r4, r3
 800c00e:	f107 0314 	add.w	r3, r7, #20
 800c012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	372c      	adds	r7, #44	@ 0x2c
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd90      	pop	{r4, r7, pc}
 800c022:	bf00      	nop
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f103 0208 	add.w	r2, r3, #8
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f04f 32ff 	mov.w	r2, #4294967295
 800c040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f103 0208 	add.w	r2, r3, #8
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f103 0208 	add.w	r2, r3, #8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	1c5a      	adds	r2, r3, #1
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b085      	sub	sp, #20
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d103      	bne.n	800c0ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e00c      	b.n	800c104 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e002      	b.n	800c0f8 <vListInsert+0x2e>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	429a      	cmp	r2, r3
 800c102:	d2f6      	bcs.n	800c0f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	601a      	str	r2, [r3, #0]
}
 800c130:	bf00      	nop
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6892      	ldr	r2, [r2, #8]
 800c152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	6852      	ldr	r2, [r2, #4]
 800c15c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d103      	bne.n	800c170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689a      	ldr	r2, [r3, #8]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	1e5a      	subs	r2, r3, #1
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10b      	bne.n	800c1bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	e7fd      	b.n	800c1b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1bc:	f002 f8c4 	bl	800e348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1c8:	68f9      	ldr	r1, [r7, #12]
 800c1ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1cc:	fb01 f303 	mul.w	r3, r1, r3
 800c1d0:	441a      	add	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	68f9      	ldr	r1, [r7, #12]
 800c1f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1f2:	fb01 f303 	mul.w	r3, r1, r3
 800c1f6:	441a      	add	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	22ff      	movs	r2, #255	@ 0xff
 800c200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	22ff      	movs	r2, #255	@ 0xff
 800c208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d114      	bne.n	800c23c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d01a      	beq.n	800c250 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3310      	adds	r3, #16
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fb72 	bl	800d908 <xTaskRemoveFromEventList>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d012      	beq.n	800c250 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c22a:	4b0d      	ldr	r3, [pc, #52]	@ (800c260 <xQueueGenericReset+0xd0>)
 800c22c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c230:	601a      	str	r2, [r3, #0]
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	e009      	b.n	800c250 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3310      	adds	r3, #16
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fef1 	bl	800c028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3324      	adds	r3, #36	@ 0x24
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff feec 	bl	800c028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c250:	f002 f8ac 	bl	800e3ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c254:	2301      	movs	r3, #1
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08e      	sub	sp, #56	@ 0x38
 800c268:	af02      	add	r7, sp, #8
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10b      	bne.n	800c2ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c2a8:	bf00      	nop
 800c2aa:	bf00      	nop
 800c2ac:	e7fd      	b.n	800c2aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <xQueueGenericCreateStatic+0x56>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <xQueueGenericCreateStatic+0x5a>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e000      	b.n	800c2c0 <xQueueGenericCreateStatic+0x5c>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10b      	bne.n	800c2dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	623b      	str	r3, [r7, #32]
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <xQueueGenericCreateStatic+0x84>
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <xQueueGenericCreateStatic+0x88>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e000      	b.n	800c2ee <xQueueGenericCreateStatic+0x8a>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10b      	bne.n	800c30a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	61fb      	str	r3, [r7, #28]
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c30a:	2348      	movs	r3, #72	@ 0x48
 800c30c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2b48      	cmp	r3, #72	@ 0x48
 800c312:	d00b      	beq.n	800c32c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	61bb      	str	r3, [r7, #24]
}
 800c326:	bf00      	nop
 800c328:	bf00      	nop
 800c32a:	e7fd      	b.n	800c328 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c32c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00d      	beq.n	800c354 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c340:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4613      	mov	r3, r2
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 f840 	bl	800c3d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c356:	4618      	mov	r0, r3
 800c358:	3730      	adds	r7, #48	@ 0x30
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b08a      	sub	sp, #40	@ 0x28
 800c362:	af02      	add	r7, sp, #8
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	60b9      	str	r1, [r7, #8]
 800c368:	4613      	mov	r3, r2
 800c36a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	613b      	str	r3, [r7, #16]
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	e7fd      	b.n	800c386 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	fb02 f303 	mul.w	r3, r2, r3
 800c392:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	3348      	adds	r3, #72	@ 0x48
 800c398:	4618      	mov	r0, r3
 800c39a:	f002 f8f7 	bl	800e58c <pvPortMalloc>
 800c39e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d011      	beq.n	800c3ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	3348      	adds	r3, #72	@ 0x48
 800c3ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 f805 	bl	800c3d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3720      	adds	r7, #32
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d103      	bne.n	800c3f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	69ba      	ldr	r2, [r7, #24]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	e002      	b.n	800c3f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c402:	2101      	movs	r1, #1
 800c404:	69b8      	ldr	r0, [r7, #24]
 800c406:	f7ff fec3 	bl	800c190 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00e      	beq.n	800c43e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c432:	2300      	movs	r3, #0
 800c434:	2200      	movs	r2, #0
 800c436:	2100      	movs	r1, #0
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f837 	bl	800c4ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c43e:	bf00      	nop
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c446:	b580      	push	{r7, lr}
 800c448:	b086      	sub	sp, #24
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	4603      	mov	r3, r0
 800c44e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c450:	2301      	movs	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	2300      	movs	r3, #0
 800c456:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	461a      	mov	r2, r3
 800c45c:	6939      	ldr	r1, [r7, #16]
 800c45e:	6978      	ldr	r0, [r7, #20]
 800c460:	f7ff ff7d 	bl	800c35e <xQueueGenericCreate>
 800c464:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7ff ffd3 	bl	800c412 <prvInitialiseMutex>

		return xNewQueue;
 800c46c:	68fb      	ldr	r3, [r7, #12]
	}
 800c46e:	4618      	mov	r0, r3
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c476:	b580      	push	{r7, lr}
 800c478:	b088      	sub	sp, #32
 800c47a:	af02      	add	r7, sp, #8
 800c47c:	4603      	mov	r3, r0
 800c47e:	6039      	str	r1, [r7, #0]
 800c480:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c482:	2301      	movs	r3, #1
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	2300      	movs	r3, #0
 800c488:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2200      	movs	r2, #0
 800c492:	6939      	ldr	r1, [r7, #16]
 800c494:	6978      	ldr	r0, [r7, #20]
 800c496:	f7ff fee5 	bl	800c264 <xQueueGenericCreateStatic>
 800c49a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff ffb8 	bl	800c412 <prvInitialiseMutex>

		return xNewQueue;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08e      	sub	sp, #56	@ 0x38
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10b      	bne.n	800c4e0 <xQueueGenericSend+0x34>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4da:	bf00      	nop
 800c4dc:	bf00      	nop
 800c4de:	e7fd      	b.n	800c4dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d103      	bne.n	800c4ee <xQueueGenericSend+0x42>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <xQueueGenericSend+0x46>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e000      	b.n	800c4f4 <xQueueGenericSend+0x48>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10b      	bne.n	800c510 <xQueueGenericSend+0x64>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
 800c50e:	e7fd      	b.n	800c50c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b02      	cmp	r3, #2
 800c514:	d103      	bne.n	800c51e <xQueueGenericSend+0x72>
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d101      	bne.n	800c522 <xQueueGenericSend+0x76>
 800c51e:	2301      	movs	r3, #1
 800c520:	e000      	b.n	800c524 <xQueueGenericSend+0x78>
 800c522:	2300      	movs	r3, #0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <xQueueGenericSend+0x94>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	623b      	str	r3, [r7, #32]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c540:	f001 fba8 	bl	800dc94 <xTaskGetSchedulerState>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <xQueueGenericSend+0xa4>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <xQueueGenericSend+0xa8>
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <xQueueGenericSend+0xaa>
 800c554:	2300      	movs	r3, #0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <xQueueGenericSend+0xc6>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	61fb      	str	r3, [r7, #28]
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	e7fd      	b.n	800c56e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c572:	f001 fee9 	bl	800e348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c57e:	429a      	cmp	r2, r3
 800c580:	d302      	bcc.n	800c588 <xQueueGenericSend+0xdc>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d129      	bne.n	800c5dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c58e:	f000 fc49 	bl	800ce24 <prvCopyDataToQueue>
 800c592:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d010      	beq.n	800c5be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59e:	3324      	adds	r3, #36	@ 0x24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 f9b1 	bl	800d908 <xTaskRemoveFromEventList>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d013      	beq.n	800c5d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5ac:	4b3f      	ldr	r3, [pc, #252]	@ (800c6ac <xQueueGenericSend+0x200>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	e00a      	b.n	800c5d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d007      	beq.n	800c5d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5c4:	4b39      	ldr	r3, [pc, #228]	@ (800c6ac <xQueueGenericSend+0x200>)
 800c5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5d4:	f001 feea 	bl	800e3ac <vPortExitCritical>
				return pdPASS;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e063      	b.n	800c6a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d103      	bne.n	800c5ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5e2:	f001 fee3 	bl	800e3ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e05c      	b.n	800c6a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d106      	bne.n	800c5fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5f0:	f107 0314 	add.w	r3, r7, #20
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f001 f9eb 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5fe:	f001 fed5 	bl	800e3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c602:	f000 ff6f 	bl	800d4e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c606:	f001 fe9f 	bl	800e348 <vPortEnterCritical>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c610:	b25b      	sxtb	r3, r3
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d103      	bne.n	800c620 <xQueueGenericSend+0x174>
 800c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c626:	b25b      	sxtb	r3, r3
 800c628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62c:	d103      	bne.n	800c636 <xQueueGenericSend+0x18a>
 800c62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c636:	f001 feb9 	bl	800e3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c63a:	1d3a      	adds	r2, r7, #4
 800c63c:	f107 0314 	add.w	r3, r7, #20
 800c640:	4611      	mov	r1, r2
 800c642:	4618      	mov	r0, r3
 800c644:	f001 f9da 	bl	800d9fc <xTaskCheckForTimeOut>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d124      	bne.n	800c698 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c64e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c650:	f000 fce0 	bl	800d014 <prvIsQueueFull>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d018      	beq.n	800c68c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	3310      	adds	r3, #16
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	4611      	mov	r1, r2
 800c662:	4618      	mov	r0, r3
 800c664:	f001 f92a 	bl	800d8bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c66a:	f000 fc6b 	bl	800cf44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c66e:	f000 ff47 	bl	800d500 <xTaskResumeAll>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	f47f af7c 	bne.w	800c572 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c67a:	4b0c      	ldr	r3, [pc, #48]	@ (800c6ac <xQueueGenericSend+0x200>)
 800c67c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	e772      	b.n	800c572 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c68c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c68e:	f000 fc59 	bl	800cf44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c692:	f000 ff35 	bl	800d500 <xTaskResumeAll>
 800c696:	e76c      	b.n	800c572 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c69a:	f000 fc53 	bl	800cf44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c69e:	f000 ff2f 	bl	800d500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3738      	adds	r7, #56	@ 0x38
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b090      	sub	sp, #64	@ 0x40
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10b      	bne.n	800c6e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6da:	bf00      	nop
 800c6dc:	bf00      	nop
 800c6de:	e7fd      	b.n	800c6dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d103      	bne.n	800c6ee <xQueueGenericSendFromISR+0x3e>
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <xQueueGenericSendFromISR+0x42>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <xQueueGenericSendFromISR+0x44>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10b      	bne.n	800c710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	e7fd      	b.n	800c70c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d103      	bne.n	800c71e <xQueueGenericSendFromISR+0x6e>
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <xQueueGenericSendFromISR+0x72>
 800c71e:	2301      	movs	r3, #1
 800c720:	e000      	b.n	800c724 <xQueueGenericSendFromISR+0x74>
 800c722:	2300      	movs	r3, #0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10b      	bne.n	800c740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	623b      	str	r3, [r7, #32]
}
 800c73a:	bf00      	nop
 800c73c:	bf00      	nop
 800c73e:	e7fd      	b.n	800c73c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c740:	f001 fee2 	bl	800e508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c744:	f3ef 8211 	mrs	r2, BASEPRI
 800c748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	61fa      	str	r2, [r7, #28]
 800c75a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c75c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c75e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c768:	429a      	cmp	r2, r3
 800c76a:	d302      	bcc.n	800c772 <xQueueGenericSendFromISR+0xc2>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d12f      	bne.n	800c7d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c780:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c788:	f000 fb4c 	bl	800ce24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c78c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d112      	bne.n	800c7bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d016      	beq.n	800c7cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	3324      	adds	r3, #36	@ 0x24
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f001 f8b0 	bl	800d908 <xTaskRemoveFromEventList>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	e007      	b.n	800c7cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	b25a      	sxtb	r2, r3
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c7d0:	e001      	b.n	800c7d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3740      	adds	r7, #64	@ 0x40
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08e      	sub	sp, #56	@ 0x38
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10b      	bne.n	800c818 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	623b      	str	r3, [r7, #32]
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	e7fd      	b.n	800c814 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00b      	beq.n	800c838 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61fb      	str	r3, [r7, #28]
}
 800c832:	bf00      	nop
 800c834:	bf00      	nop
 800c836:	e7fd      	b.n	800c834 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d103      	bne.n	800c848 <xQueueGiveFromISR+0x5c>
 800c840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <xQueueGiveFromISR+0x60>
 800c848:	2301      	movs	r3, #1
 800c84a:	e000      	b.n	800c84e <xQueueGiveFromISR+0x62>
 800c84c:	2300      	movs	r3, #0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10b      	bne.n	800c86a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	61bb      	str	r3, [r7, #24]
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c86a:	f001 fe4d 	bl	800e508 <vPortValidateInterruptPriority>
	__asm volatile
 800c86e:	f3ef 8211 	mrs	r2, BASEPRI
 800c872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	617a      	str	r2, [r7, #20]
 800c884:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c886:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c888:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c88e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c896:	429a      	cmp	r2, r3
 800c898:	d22b      	bcs.n	800c8f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b4:	d112      	bne.n	800c8dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d016      	beq.n	800c8ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	3324      	adds	r3, #36	@ 0x24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f001 f820 	bl	800d908 <xTaskRemoveFromEventList>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00e      	beq.n	800c8ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	e007      	b.n	800c8ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	b25a      	sxtb	r2, r3
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8f0:	e001      	b.n	800c8f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f383 8811 	msr	BASEPRI, r3
}
 800c900:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c904:	4618      	mov	r0, r3
 800c906:	3738      	adds	r7, #56	@ 0x38
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08c      	sub	sp, #48	@ 0x30
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c918:	2300      	movs	r3, #0
 800c91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	2b00      	cmp	r3, #0
 800c924:	d10b      	bne.n	800c93e <xQueueReceive+0x32>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	623b      	str	r3, [r7, #32]
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	e7fd      	b.n	800c93a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d103      	bne.n	800c94c <xQueueReceive+0x40>
 800c944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d101      	bne.n	800c950 <xQueueReceive+0x44>
 800c94c:	2301      	movs	r3, #1
 800c94e:	e000      	b.n	800c952 <xQueueReceive+0x46>
 800c950:	2300      	movs	r3, #0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10b      	bne.n	800c96e <xQueueReceive+0x62>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	61fb      	str	r3, [r7, #28]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c96e:	f001 f991 	bl	800dc94 <xTaskGetSchedulerState>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <xQueueReceive+0x72>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <xQueueReceive+0x76>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <xQueueReceive+0x78>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10b      	bne.n	800c9a0 <xQueueReceive+0x94>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	61bb      	str	r3, [r7, #24]
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	e7fd      	b.n	800c99c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9a0:	f001 fcd2 	bl	800e348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01f      	beq.n	800c9f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9b4:	f000 faa0 	bl	800cef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	1e5a      	subs	r2, r3, #1
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00f      	beq.n	800c9e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	3310      	adds	r3, #16
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 ff9b 	bl	800d908 <xTaskRemoveFromEventList>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d007      	beq.n	800c9e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9d8:	4b3c      	ldr	r3, [pc, #240]	@ (800cacc <xQueueReceive+0x1c0>)
 800c9da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9e8:	f001 fce0 	bl	800e3ac <vPortExitCritical>
				return pdPASS;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e069      	b.n	800cac4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d103      	bne.n	800c9fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9f6:	f001 fcd9 	bl	800e3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e062      	b.n	800cac4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d106      	bne.n	800ca12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca04:	f107 0310 	add.w	r3, r7, #16
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 ffe1 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca12:	f001 fccb 	bl	800e3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca16:	f000 fd65 	bl	800d4e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca1a:	f001 fc95 	bl	800e348 <vPortEnterCritical>
 800ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca24:	b25b      	sxtb	r3, r3
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d103      	bne.n	800ca34 <xQueueReceive+0x128>
 800ca2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca3a:	b25b      	sxtb	r3, r3
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca40:	d103      	bne.n	800ca4a <xQueueReceive+0x13e>
 800ca42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca4a:	f001 fcaf 	bl	800e3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca4e:	1d3a      	adds	r2, r7, #4
 800ca50:	f107 0310 	add.w	r3, r7, #16
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f000 ffd0 	bl	800d9fc <xTaskCheckForTimeOut>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d123      	bne.n	800caaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca64:	f000 fac0 	bl	800cfe8 <prvIsQueueEmpty>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d017      	beq.n	800ca9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca70:	3324      	adds	r3, #36	@ 0x24
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	4611      	mov	r1, r2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 ff20 	bl	800d8bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca7e:	f000 fa61 	bl	800cf44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca82:	f000 fd3d 	bl	800d500 <xTaskResumeAll>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d189      	bne.n	800c9a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ca8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <xQueueReceive+0x1c0>)
 800ca8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	e780      	b.n	800c9a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caa0:	f000 fa50 	bl	800cf44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caa4:	f000 fd2c 	bl	800d500 <xTaskResumeAll>
 800caa8:	e77a      	b.n	800c9a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800caaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caac:	f000 fa4a 	bl	800cf44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cab0:	f000 fd26 	bl	800d500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cab6:	f000 fa97 	bl	800cfe8 <prvIsQueueEmpty>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f43f af6f 	beq.w	800c9a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cac2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3730      	adds	r7, #48	@ 0x30
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	e000ed04 	.word	0xe000ed04

0800cad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08e      	sub	sp, #56	@ 0x38
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cada:	2300      	movs	r3, #0
 800cadc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	623b      	str	r3, [r7, #32]
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	e7fd      	b.n	800cb00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00b      	beq.n	800cb24 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	61fb      	str	r3, [r7, #28]
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb24:	f001 f8b6 	bl	800dc94 <xTaskGetSchedulerState>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <xQueueSemaphoreTake+0x64>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <xQueueSemaphoreTake+0x68>
 800cb34:	2301      	movs	r3, #1
 800cb36:	e000      	b.n	800cb3a <xQueueSemaphoreTake+0x6a>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10b      	bne.n	800cb56 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	61bb      	str	r3, [r7, #24]
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	e7fd      	b.n	800cb52 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb56:	f001 fbf7 	bl	800e348 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d024      	beq.n	800cbb0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb68:	1e5a      	subs	r2, r3, #1
 800cb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d104      	bne.n	800cb80 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb76:	f001 fa39 	bl	800dfec <pvTaskIncrementMutexHeldCount>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00f      	beq.n	800cba8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	3310      	adds	r3, #16
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 febb 	bl	800d908 <xTaskRemoveFromEventList>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d007      	beq.n	800cba8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb98:	4b54      	ldr	r3, [pc, #336]	@ (800ccec <xQueueSemaphoreTake+0x21c>)
 800cb9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cba8:	f001 fc00 	bl	800e3ac <vPortExitCritical>
				return pdPASS;
 800cbac:	2301      	movs	r3, #1
 800cbae:	e098      	b.n	800cce2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d112      	bne.n	800cbdc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	617b      	str	r3, [r7, #20]
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	e7fd      	b.n	800cbd0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cbd4:	f001 fbea 	bl	800e3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e082      	b.n	800cce2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbe2:	f107 030c 	add.w	r3, r7, #12
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 fef2 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbf0:	f001 fbdc 	bl	800e3ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbf4:	f000 fc76 	bl	800d4e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbf8:	f001 fba6 	bl	800e348 <vPortEnterCritical>
 800cbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc02:	b25b      	sxtb	r3, r3
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d103      	bne.n	800cc12 <xQueueSemaphoreTake+0x142>
 800cc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d103      	bne.n	800cc28 <xQueueSemaphoreTake+0x158>
 800cc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc28:	f001 fbc0 	bl	800e3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc2c:	463a      	mov	r2, r7
 800cc2e:	f107 030c 	add.w	r3, r7, #12
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 fee1 	bl	800d9fc <xTaskCheckForTimeOut>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d132      	bne.n	800cca6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc42:	f000 f9d1 	bl	800cfe8 <prvIsQueueEmpty>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d026      	beq.n	800cc9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d109      	bne.n	800cc68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cc54:	f001 fb78 	bl	800e348 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f001 f837 	bl	800dcd0 <xTaskPriorityInherit>
 800cc62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cc64:	f001 fba2 	bl	800e3ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6a:	3324      	adds	r3, #36	@ 0x24
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 fe23 	bl	800d8bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc78:	f000 f964 	bl	800cf44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc7c:	f000 fc40 	bl	800d500 <xTaskResumeAll>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f47f af67 	bne.w	800cb56 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cc88:	4b18      	ldr	r3, [pc, #96]	@ (800ccec <xQueueSemaphoreTake+0x21c>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	e75d      	b.n	800cb56 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cc9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc9c:	f000 f952 	bl	800cf44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cca0:	f000 fc2e 	bl	800d500 <xTaskResumeAll>
 800cca4:	e757      	b.n	800cb56 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cca8:	f000 f94c 	bl	800cf44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccac:	f000 fc28 	bl	800d500 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccb2:	f000 f999 	bl	800cfe8 <prvIsQueueEmpty>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f43f af4c 	beq.w	800cb56 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00d      	beq.n	800cce0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ccc4:	f001 fb40 	bl	800e348 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ccc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccca:	f000 f893 	bl	800cdf4 <prvGetDisinheritPriorityAfterTimeout>
 800ccce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ccd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f001 f8f8 	bl	800decc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ccdc:	f001 fb66 	bl	800e3ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3738      	adds	r7, #56	@ 0x38
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	e000ed04 	.word	0xe000ed04

0800ccf0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b08e      	sub	sp, #56	@ 0x38
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	623b      	str	r3, [r7, #32]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d103      	bne.n	800cd2c <xQueueReceiveFromISR+0x3c>
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <xQueueReceiveFromISR+0x40>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e000      	b.n	800cd32 <xQueueReceiveFromISR+0x42>
 800cd30:	2300      	movs	r3, #0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10b      	bne.n	800cd4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	61fb      	str	r3, [r7, #28]
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	e7fd      	b.n	800cd4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd4e:	f001 fbdb 	bl	800e508 <vPortValidateInterruptPriority>
	__asm volatile
 800cd52:	f3ef 8211 	mrs	r2, BASEPRI
 800cd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	61ba      	str	r2, [r7, #24]
 800cd68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d02f      	beq.n	800cdda <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd88:	f000 f8b6 	bl	800cef8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8e:	1e5a      	subs	r2, r3, #1
 800cd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9c:	d112      	bne.n	800cdc4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d016      	beq.n	800cdd4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	3310      	adds	r3, #16
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 fdac 	bl	800d908 <xTaskRemoveFromEventList>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00e      	beq.n	800cdd4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	e007      	b.n	800cdd4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cdc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdc8:	3301      	adds	r3, #1
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	b25a      	sxtb	r2, r3
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd8:	e001      	b.n	800cdde <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f383 8811 	msr	BASEPRI, r3
}
 800cde8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3738      	adds	r7, #56	@ 0x38
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d006      	beq.n	800ce12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f1c3 0307 	rsb	r3, r3, #7
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e001      	b.n	800ce16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce16:	68fb      	ldr	r3, [r7, #12]
	}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce30:	2300      	movs	r3, #0
 800ce32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10d      	bne.n	800ce5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d14d      	bne.n	800cee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 ffb4 	bl	800ddbc <xTaskPriorityDisinherit>
 800ce54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	609a      	str	r2, [r3, #8]
 800ce5c:	e043      	b.n	800cee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d119      	bne.n	800ce98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6858      	ldr	r0, [r3, #4]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	68b9      	ldr	r1, [r7, #8]
 800ce70:	f00d fcab 	bl	801a7ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7c:	441a      	add	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d32b      	bcc.n	800cee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	605a      	str	r2, [r3, #4]
 800ce96:	e026      	b.n	800cee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	68d8      	ldr	r0, [r3, #12]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cea0:	461a      	mov	r2, r3
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	f00d fc91 	bl	801a7ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	68da      	ldr	r2, [r3, #12]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb0:	425b      	negs	r3, r3
 800ceb2:	441a      	add	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	68da      	ldr	r2, [r3, #12]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d207      	bcs.n	800ced4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	689a      	ldr	r2, [r3, #8]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cecc:	425b      	negs	r3, r3
 800cece:	441a      	add	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d105      	bne.n	800cee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ceee:	697b      	ldr	r3, [r7, #20]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d018      	beq.n	800cf3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68da      	ldr	r2, [r3, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf12:	441a      	add	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68da      	ldr	r2, [r3, #12]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d303      	bcc.n	800cf2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68d9      	ldr	r1, [r3, #12]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf34:	461a      	mov	r2, r3
 800cf36:	6838      	ldr	r0, [r7, #0]
 800cf38:	f00d fc47 	bl	801a7ca <memcpy>
	}
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf4c:	f001 f9fc 	bl	800e348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf58:	e011      	b.n	800cf7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d012      	beq.n	800cf88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3324      	adds	r3, #36	@ 0x24
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fcce 	bl	800d908 <xTaskRemoveFromEventList>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf72:	f000 fda7 	bl	800dac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dce9      	bgt.n	800cf5a <prvUnlockQueue+0x16>
 800cf86:	e000      	b.n	800cf8a <prvUnlockQueue+0x46>
					break;
 800cf88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	22ff      	movs	r2, #255	@ 0xff
 800cf8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cf92:	f001 fa0b 	bl	800e3ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf96:	f001 f9d7 	bl	800e348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfa2:	e011      	b.n	800cfc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d012      	beq.n	800cfd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3310      	adds	r3, #16
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fca9 	bl	800d908 <xTaskRemoveFromEventList>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cfbc:	f000 fd82 	bl	800dac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dce9      	bgt.n	800cfa4 <prvUnlockQueue+0x60>
 800cfd0:	e000      	b.n	800cfd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cfd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	22ff      	movs	r2, #255	@ 0xff
 800cfd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cfdc:	f001 f9e6 	bl	800e3ac <vPortExitCritical>
}
 800cfe0:	bf00      	nop
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cff0:	f001 f9aa 	bl	800e348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e001      	b.n	800d006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d002:	2300      	movs	r3, #0
 800d004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d006:	f001 f9d1 	bl	800e3ac <vPortExitCritical>

	return xReturn;
 800d00a:	68fb      	ldr	r3, [r7, #12]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d01c:	f001 f994 	bl	800e348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d028:	429a      	cmp	r2, r3
 800d02a:	d102      	bne.n	800d032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d02c:	2301      	movs	r3, #1
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	e001      	b.n	800d036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d036:	f001 f9b9 	bl	800e3ac <vPortExitCritical>

	return xReturn;
 800d03a:	68fb      	ldr	r3, [r7, #12]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08e      	sub	sp, #56	@ 0x38
 800d048:	af04      	add	r7, sp, #16
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10b      	bne.n	800d070 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	623b      	str	r3, [r7, #32]
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	61fb      	str	r3, [r7, #28]
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d08e:	23a0      	movs	r3, #160	@ 0xa0
 800d090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2ba0      	cmp	r3, #160	@ 0xa0
 800d096:	d00b      	beq.n	800d0b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	61bb      	str	r3, [r7, #24]
}
 800d0aa:	bf00      	nop
 800d0ac:	bf00      	nop
 800d0ae:	e7fd      	b.n	800d0ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d01e      	beq.n	800d0f6 <xTaskCreateStatic+0xb2>
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d01b      	beq.n	800d0f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	f107 0314 	add.w	r3, r7, #20
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	68b9      	ldr	r1, [r7, #8]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 f851 	bl	800d190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0f0:	f000 f8ee 	bl	800d2d0 <prvAddNewTaskToReadyList>
 800d0f4:	e001      	b.n	800d0fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d0fa:	697b      	ldr	r3, [r7, #20]
	}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3728      	adds	r7, #40	@ 0x28
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d104:	b580      	push	{r7, lr}
 800d106:	b08c      	sub	sp, #48	@ 0x30
 800d108:	af04      	add	r7, sp, #16
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	603b      	str	r3, [r7, #0]
 800d110:	4613      	mov	r3, r2
 800d112:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d114:	88fb      	ldrh	r3, [r7, #6]
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4618      	mov	r0, r3
 800d11a:	f001 fa37 	bl	800e58c <pvPortMalloc>
 800d11e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00e      	beq.n	800d144 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d126:	20a0      	movs	r0, #160	@ 0xa0
 800d128:	f001 fa30 	bl	800e58c <pvPortMalloc>
 800d12c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	631a      	str	r2, [r3, #48]	@ 0x30
 800d13a:	e005      	b.n	800d148 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d13c:	6978      	ldr	r0, [r7, #20]
 800d13e:	f001 faf3 	bl	800e728 <vPortFree>
 800d142:	e001      	b.n	800d148 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d144:	2300      	movs	r3, #0
 800d146:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d017      	beq.n	800d17e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d156:	88fa      	ldrh	r2, [r7, #6]
 800d158:	2300      	movs	r3, #0
 800d15a:	9303      	str	r3, [sp, #12]
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	9302      	str	r3, [sp, #8]
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	9301      	str	r3, [sp, #4]
 800d164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 f80f 	bl	800d190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d172:	69f8      	ldr	r0, [r7, #28]
 800d174:	f000 f8ac 	bl	800d2d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d178:	2301      	movs	r3, #1
 800d17a:	61bb      	str	r3, [r7, #24]
 800d17c:	e002      	b.n	800d184 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295
 800d182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d184:	69bb      	ldr	r3, [r7, #24]
	}
 800d186:	4618      	mov	r0, r3
 800d188:	3720      	adds	r7, #32
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	f023 0307 	bic.w	r3, r3, #7
 800d1b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	f003 0307 	and.w	r3, r3, #7
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00b      	beq.n	800d1da <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	617b      	str	r3, [r7, #20]
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop
 800d1d8:	e7fd      	b.n	800d1d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d01f      	beq.n	800d220 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]
 800d1e4:	e012      	b.n	800d20c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	7819      	ldrb	r1, [r3, #0]
 800d1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3334      	adds	r3, #52	@ 0x34
 800d1f6:	460a      	mov	r2, r1
 800d1f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	4413      	add	r3, r2
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d006      	beq.n	800d214 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	3301      	adds	r3, #1
 800d20a:	61fb      	str	r3, [r7, #28]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	2b0f      	cmp	r3, #15
 800d210:	d9e9      	bls.n	800d1e6 <prvInitialiseNewTask+0x56>
 800d212:	e000      	b.n	800d216 <prvInitialiseNewTask+0x86>
			{
				break;
 800d214:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d21e:	e003      	b.n	800d228 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22a:	2b06      	cmp	r3, #6
 800d22c:	d901      	bls.n	800d232 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d22e:	2306      	movs	r3, #6
 800d230:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d236:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d23c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d240:	2200      	movs	r2, #0
 800d242:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d246:	3304      	adds	r3, #4
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fe ff0d 	bl	800c068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	3318      	adds	r3, #24
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe ff08 	bl	800c068 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d25c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d260:	f1c3 0207 	rsb	r2, r3, #7
 800d264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d266:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d270:	2200      	movs	r2, #0
 800d272:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d280:	334c      	adds	r3, #76	@ 0x4c
 800d282:	224c      	movs	r2, #76	@ 0x4c
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f00d f9b5 	bl	801a5f6 <memset>
 800d28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28e:	4a0d      	ldr	r2, [pc, #52]	@ (800d2c4 <prvInitialiseNewTask+0x134>)
 800d290:	651a      	str	r2, [r3, #80]	@ 0x50
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	4a0c      	ldr	r2, [pc, #48]	@ (800d2c8 <prvInitialiseNewTask+0x138>)
 800d296:	655a      	str	r2, [r3, #84]	@ 0x54
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	4a0c      	ldr	r2, [pc, #48]	@ (800d2cc <prvInitialiseNewTask+0x13c>)
 800d29c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	68f9      	ldr	r1, [r7, #12]
 800d2a2:	69b8      	ldr	r0, [r7, #24]
 800d2a4:	f000 ff1c 	bl	800e0e0 <pxPortInitialiseStack>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2ba:	bf00      	nop
 800d2bc:	3720      	adds	r7, #32
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	2000e4c0 	.word	0x2000e4c0
 800d2c8:	2000e528 	.word	0x2000e528
 800d2cc:	2000e590 	.word	0x2000e590

0800d2d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2d8:	f001 f836 	bl	800e348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2dc:	4b2a      	ldr	r3, [pc, #168]	@ (800d388 <prvAddNewTaskToReadyList+0xb8>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	4a29      	ldr	r2, [pc, #164]	@ (800d388 <prvAddNewTaskToReadyList+0xb8>)
 800d2e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2e6:	4b29      	ldr	r3, [pc, #164]	@ (800d38c <prvAddNewTaskToReadyList+0xbc>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2ee:	4a27      	ldr	r2, [pc, #156]	@ (800d38c <prvAddNewTaskToReadyList+0xbc>)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2f4:	4b24      	ldr	r3, [pc, #144]	@ (800d388 <prvAddNewTaskToReadyList+0xb8>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d110      	bne.n	800d31e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2fc:	f000 fc06 	bl	800db0c <prvInitialiseTaskLists>
 800d300:	e00d      	b.n	800d31e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d302:	4b23      	ldr	r3, [pc, #140]	@ (800d390 <prvAddNewTaskToReadyList+0xc0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d30a:	4b20      	ldr	r3, [pc, #128]	@ (800d38c <prvAddNewTaskToReadyList+0xbc>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d314:	429a      	cmp	r2, r3
 800d316:	d802      	bhi.n	800d31e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d318:	4a1c      	ldr	r2, [pc, #112]	@ (800d38c <prvAddNewTaskToReadyList+0xbc>)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d31e:	4b1d      	ldr	r3, [pc, #116]	@ (800d394 <prvAddNewTaskToReadyList+0xc4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	4a1b      	ldr	r2, [pc, #108]	@ (800d394 <prvAddNewTaskToReadyList+0xc4>)
 800d326:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32c:	2201      	movs	r2, #1
 800d32e:	409a      	lsls	r2, r3
 800d330:	4b19      	ldr	r3, [pc, #100]	@ (800d398 <prvAddNewTaskToReadyList+0xc8>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4313      	orrs	r3, r2
 800d336:	4a18      	ldr	r2, [pc, #96]	@ (800d398 <prvAddNewTaskToReadyList+0xc8>)
 800d338:	6013      	str	r3, [r2, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4a15      	ldr	r2, [pc, #84]	@ (800d39c <prvAddNewTaskToReadyList+0xcc>)
 800d348:	441a      	add	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3304      	adds	r3, #4
 800d34e:	4619      	mov	r1, r3
 800d350:	4610      	mov	r0, r2
 800d352:	f7fe fe96 	bl	800c082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d356:	f001 f829 	bl	800e3ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <prvAddNewTaskToReadyList+0xc0>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00e      	beq.n	800d380 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d362:	4b0a      	ldr	r3, [pc, #40]	@ (800d38c <prvAddNewTaskToReadyList+0xbc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d207      	bcs.n	800d380 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d370:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a0 <prvAddNewTaskToReadyList+0xd0>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	200053b8 	.word	0x200053b8
 800d38c:	200052b8 	.word	0x200052b8
 800d390:	200053c4 	.word	0x200053c4
 800d394:	200053d4 	.word	0x200053d4
 800d398:	200053c0 	.word	0x200053c0
 800d39c:	200052bc 	.word	0x200052bc
 800d3a0:	e000ed04 	.word	0xe000ed04

0800d3a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d018      	beq.n	800d3e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3b6:	4b14      	ldr	r3, [pc, #80]	@ (800d408 <vTaskDelay+0x64>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00b      	beq.n	800d3d6 <vTaskDelay+0x32>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	60bb      	str	r3, [r7, #8]
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	e7fd      	b.n	800d3d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d3d6:	f000 f885 	bl	800d4e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3da:	2100      	movs	r1, #0
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fe19 	bl	800e014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d3e2:	f000 f88d 	bl	800d500 <xTaskResumeAll>
 800d3e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d107      	bne.n	800d3fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d3ee:	4b07      	ldr	r3, [pc, #28]	@ (800d40c <vTaskDelay+0x68>)
 800d3f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3fe:	bf00      	nop
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	200053e0 	.word	0x200053e0
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08a      	sub	sp, #40	@ 0x28
 800d414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d416:	2300      	movs	r3, #0
 800d418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d41e:	463a      	mov	r2, r7
 800d420:	1d39      	adds	r1, r7, #4
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	4618      	mov	r0, r3
 800d428:	f7f3 f8c0 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	9202      	str	r2, [sp, #8]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	2300      	movs	r3, #0
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	2300      	movs	r3, #0
 800d43c:	460a      	mov	r2, r1
 800d43e:	4921      	ldr	r1, [pc, #132]	@ (800d4c4 <vTaskStartScheduler+0xb4>)
 800d440:	4821      	ldr	r0, [pc, #132]	@ (800d4c8 <vTaskStartScheduler+0xb8>)
 800d442:	f7ff fdff 	bl	800d044 <xTaskCreateStatic>
 800d446:	4603      	mov	r3, r0
 800d448:	4a20      	ldr	r2, [pc, #128]	@ (800d4cc <vTaskStartScheduler+0xbc>)
 800d44a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d44c:	4b1f      	ldr	r3, [pc, #124]	@ (800d4cc <vTaskStartScheduler+0xbc>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d454:	2301      	movs	r3, #1
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e001      	b.n	800d45e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d11b      	bne.n	800d49c <vTaskStartScheduler+0x8c>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	613b      	str	r3, [r7, #16]
}
 800d476:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d478:	4b15      	ldr	r3, [pc, #84]	@ (800d4d0 <vTaskStartScheduler+0xc0>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	334c      	adds	r3, #76	@ 0x4c
 800d47e:	4a15      	ldr	r2, [pc, #84]	@ (800d4d4 <vTaskStartScheduler+0xc4>)
 800d480:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d482:	4b15      	ldr	r3, [pc, #84]	@ (800d4d8 <vTaskStartScheduler+0xc8>)
 800d484:	f04f 32ff 	mov.w	r2, #4294967295
 800d488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d48a:	4b14      	ldr	r3, [pc, #80]	@ (800d4dc <vTaskStartScheduler+0xcc>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d490:	4b13      	ldr	r3, [pc, #76]	@ (800d4e0 <vTaskStartScheduler+0xd0>)
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d496:	f000 feb3 	bl	800e200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d49a:	e00f      	b.n	800d4bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a2:	d10b      	bne.n	800d4bc <vTaskStartScheduler+0xac>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	60fb      	str	r3, [r7, #12]
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	e7fd      	b.n	800d4b8 <vTaskStartScheduler+0xa8>
}
 800d4bc:	bf00      	nop
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	0801c928 	.word	0x0801c928
 800d4c8:	0800dadd 	.word	0x0800dadd
 800d4cc:	200053dc 	.word	0x200053dc
 800d4d0:	200052b8 	.word	0x200052b8
 800d4d4:	20000118 	.word	0x20000118
 800d4d8:	200053d8 	.word	0x200053d8
 800d4dc:	200053c4 	.word	0x200053c4
 800d4e0:	200053bc 	.word	0x200053bc

0800d4e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d4e8:	4b04      	ldr	r3, [pc, #16]	@ (800d4fc <vTaskSuspendAll+0x18>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	4a03      	ldr	r2, [pc, #12]	@ (800d4fc <vTaskSuspendAll+0x18>)
 800d4f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4f2:	bf00      	nop
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	200053e0 	.word	0x200053e0

0800d500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d50e:	4b42      	ldr	r3, [pc, #264]	@ (800d618 <xTaskResumeAll+0x118>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10b      	bne.n	800d52e <xTaskResumeAll+0x2e>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	603b      	str	r3, [r7, #0]
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	e7fd      	b.n	800d52a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d52e:	f000 ff0b 	bl	800e348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d532:	4b39      	ldr	r3, [pc, #228]	@ (800d618 <xTaskResumeAll+0x118>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3b01      	subs	r3, #1
 800d538:	4a37      	ldr	r2, [pc, #220]	@ (800d618 <xTaskResumeAll+0x118>)
 800d53a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d53c:	4b36      	ldr	r3, [pc, #216]	@ (800d618 <xTaskResumeAll+0x118>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d161      	bne.n	800d608 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d544:	4b35      	ldr	r3, [pc, #212]	@ (800d61c <xTaskResumeAll+0x11c>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d05d      	beq.n	800d608 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d54c:	e02e      	b.n	800d5ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d54e:	4b34      	ldr	r3, [pc, #208]	@ (800d620 <xTaskResumeAll+0x120>)
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3318      	adds	r3, #24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe fdee 	bl	800c13c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3304      	adds	r3, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fde9 	bl	800c13c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56e:	2201      	movs	r2, #1
 800d570:	409a      	lsls	r2, r3
 800d572:	4b2c      	ldr	r3, [pc, #176]	@ (800d624 <xTaskResumeAll+0x124>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4313      	orrs	r3, r2
 800d578:	4a2a      	ldr	r2, [pc, #168]	@ (800d624 <xTaskResumeAll+0x124>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4a27      	ldr	r2, [pc, #156]	@ (800d628 <xTaskResumeAll+0x128>)
 800d58a:	441a      	add	r2, r3
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe fd75 	bl	800c082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59c:	4b23      	ldr	r3, [pc, #140]	@ (800d62c <xTaskResumeAll+0x12c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d302      	bcc.n	800d5ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d5a6:	4b22      	ldr	r3, [pc, #136]	@ (800d630 <xTaskResumeAll+0x130>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5ac:	4b1c      	ldr	r3, [pc, #112]	@ (800d620 <xTaskResumeAll+0x120>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1cc      	bne.n	800d54e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d5ba:	f000 fb4b 	bl	800dc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d5be:	4b1d      	ldr	r3, [pc, #116]	@ (800d634 <xTaskResumeAll+0x134>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d010      	beq.n	800d5ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5ca:	f000 f859 	bl	800d680 <xTaskIncrementTick>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d5d4:	4b16      	ldr	r3, [pc, #88]	@ (800d630 <xTaskResumeAll+0x130>)
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1f1      	bne.n	800d5ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d5e6:	4b13      	ldr	r3, [pc, #76]	@ (800d634 <xTaskResumeAll+0x134>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5ec:	4b10      	ldr	r3, [pc, #64]	@ (800d630 <xTaskResumeAll+0x130>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d638 <xTaskResumeAll+0x138>)
 800d5fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d608:	f000 fed0 	bl	800e3ac <vPortExitCritical>

	return xAlreadyYielded;
 800d60c:	68bb      	ldr	r3, [r7, #8]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	200053e0 	.word	0x200053e0
 800d61c:	200053b8 	.word	0x200053b8
 800d620:	20005378 	.word	0x20005378
 800d624:	200053c0 	.word	0x200053c0
 800d628:	200052bc 	.word	0x200052bc
 800d62c:	200052b8 	.word	0x200052b8
 800d630:	200053cc 	.word	0x200053cc
 800d634:	200053c8 	.word	0x200053c8
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d642:	4b05      	ldr	r3, [pc, #20]	@ (800d658 <xTaskGetTickCount+0x1c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d648:	687b      	ldr	r3, [r7, #4]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	200053bc 	.word	0x200053bc

0800d65c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d662:	f000 ff51 	bl	800e508 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d666:	2300      	movs	r3, #0
 800d668:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d66a:	4b04      	ldr	r3, [pc, #16]	@ (800d67c <xTaskGetTickCountFromISR+0x20>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d670:	683b      	ldr	r3, [r7, #0]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	200053bc 	.word	0x200053bc

0800d680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d686:	2300      	movs	r3, #0
 800d688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68a:	4b4f      	ldr	r3, [pc, #316]	@ (800d7c8 <xTaskIncrementTick+0x148>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f040 808f 	bne.w	800d7b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d694:	4b4d      	ldr	r3, [pc, #308]	@ (800d7cc <xTaskIncrementTick+0x14c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d69c:	4a4b      	ldr	r2, [pc, #300]	@ (800d7cc <xTaskIncrementTick+0x14c>)
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d121      	bne.n	800d6ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6a8:	4b49      	ldr	r3, [pc, #292]	@ (800d7d0 <xTaskIncrementTick+0x150>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00b      	beq.n	800d6ca <xTaskIncrementTick+0x4a>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	603b      	str	r3, [r7, #0]
}
 800d6c4:	bf00      	nop
 800d6c6:	bf00      	nop
 800d6c8:	e7fd      	b.n	800d6c6 <xTaskIncrementTick+0x46>
 800d6ca:	4b41      	ldr	r3, [pc, #260]	@ (800d7d0 <xTaskIncrementTick+0x150>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	60fb      	str	r3, [r7, #12]
 800d6d0:	4b40      	ldr	r3, [pc, #256]	@ (800d7d4 <xTaskIncrementTick+0x154>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a3e      	ldr	r2, [pc, #248]	@ (800d7d0 <xTaskIncrementTick+0x150>)
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	4a3e      	ldr	r2, [pc, #248]	@ (800d7d4 <xTaskIncrementTick+0x154>)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6013      	str	r3, [r2, #0]
 800d6de:	4b3e      	ldr	r3, [pc, #248]	@ (800d7d8 <xTaskIncrementTick+0x158>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	4a3c      	ldr	r2, [pc, #240]	@ (800d7d8 <xTaskIncrementTick+0x158>)
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	f000 fab4 	bl	800dc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6ec:	4b3b      	ldr	r3, [pc, #236]	@ (800d7dc <xTaskIncrementTick+0x15c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d348      	bcc.n	800d788 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6f6:	4b36      	ldr	r3, [pc, #216]	@ (800d7d0 <xTaskIncrementTick+0x150>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d104      	bne.n	800d70a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d700:	4b36      	ldr	r3, [pc, #216]	@ (800d7dc <xTaskIncrementTick+0x15c>)
 800d702:	f04f 32ff 	mov.w	r2, #4294967295
 800d706:	601a      	str	r2, [r3, #0]
					break;
 800d708:	e03e      	b.n	800d788 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70a:	4b31      	ldr	r3, [pc, #196]	@ (800d7d0 <xTaskIncrementTick+0x150>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d203      	bcs.n	800d72a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d722:	4a2e      	ldr	r2, [pc, #184]	@ (800d7dc <xTaskIncrementTick+0x15c>)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d728:	e02e      	b.n	800d788 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	3304      	adds	r3, #4
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fe fd04 	bl	800c13c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	3318      	adds	r3, #24
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fcfb 	bl	800c13c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74a:	2201      	movs	r2, #1
 800d74c:	409a      	lsls	r2, r3
 800d74e:	4b24      	ldr	r3, [pc, #144]	@ (800d7e0 <xTaskIncrementTick+0x160>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4313      	orrs	r3, r2
 800d754:	4a22      	ldr	r2, [pc, #136]	@ (800d7e0 <xTaskIncrementTick+0x160>)
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d75c:	4613      	mov	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4413      	add	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4a1f      	ldr	r2, [pc, #124]	@ (800d7e4 <xTaskIncrementTick+0x164>)
 800d766:	441a      	add	r2, r3
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	3304      	adds	r3, #4
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f7fe fc87 	bl	800c082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d778:	4b1b      	ldr	r3, [pc, #108]	@ (800d7e8 <xTaskIncrementTick+0x168>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77e:	429a      	cmp	r2, r3
 800d780:	d3b9      	bcc.n	800d6f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d782:	2301      	movs	r3, #1
 800d784:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d786:	e7b6      	b.n	800d6f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d788:	4b17      	ldr	r3, [pc, #92]	@ (800d7e8 <xTaskIncrementTick+0x168>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d78e:	4915      	ldr	r1, [pc, #84]	@ (800d7e4 <xTaskIncrementTick+0x164>)
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	440b      	add	r3, r1
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d901      	bls.n	800d7a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d7a4:	4b11      	ldr	r3, [pc, #68]	@ (800d7ec <xTaskIncrementTick+0x16c>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d007      	beq.n	800d7bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	617b      	str	r3, [r7, #20]
 800d7b0:	e004      	b.n	800d7bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f0 <xTaskIncrementTick+0x170>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	4a0d      	ldr	r2, [pc, #52]	@ (800d7f0 <xTaskIncrementTick+0x170>)
 800d7ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d7bc:	697b      	ldr	r3, [r7, #20]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	200053e0 	.word	0x200053e0
 800d7cc:	200053bc 	.word	0x200053bc
 800d7d0:	20005370 	.word	0x20005370
 800d7d4:	20005374 	.word	0x20005374
 800d7d8:	200053d0 	.word	0x200053d0
 800d7dc:	200053d8 	.word	0x200053d8
 800d7e0:	200053c0 	.word	0x200053c0
 800d7e4:	200052bc 	.word	0x200052bc
 800d7e8:	200052b8 	.word	0x200052b8
 800d7ec:	200053cc 	.word	0x200053cc
 800d7f0:	200053c8 	.word	0x200053c8

0800d7f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7fa:	4b2a      	ldr	r3, [pc, #168]	@ (800d8a4 <vTaskSwitchContext+0xb0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d003      	beq.n	800d80a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d802:	4b29      	ldr	r3, [pc, #164]	@ (800d8a8 <vTaskSwitchContext+0xb4>)
 800d804:	2201      	movs	r2, #1
 800d806:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d808:	e045      	b.n	800d896 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800d80a:	4b27      	ldr	r3, [pc, #156]	@ (800d8a8 <vTaskSwitchContext+0xb4>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d810:	4b26      	ldr	r3, [pc, #152]	@ (800d8ac <vTaskSwitchContext+0xb8>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	fab3 f383 	clz	r3, r3
 800d81c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d81e:	7afb      	ldrb	r3, [r7, #11]
 800d820:	f1c3 031f 	rsb	r3, r3, #31
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	4922      	ldr	r1, [pc, #136]	@ (800d8b0 <vTaskSwitchContext+0xbc>)
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	4613      	mov	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4413      	add	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	440b      	add	r3, r1
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10b      	bne.n	800d852 <vTaskSwitchContext+0x5e>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	607b      	str	r3, [r7, #4]
}
 800d84c:	bf00      	nop
 800d84e:	bf00      	nop
 800d850:	e7fd      	b.n	800d84e <vTaskSwitchContext+0x5a>
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4a14      	ldr	r2, [pc, #80]	@ (800d8b0 <vTaskSwitchContext+0xbc>)
 800d85e:	4413      	add	r3, r2
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	605a      	str	r2, [r3, #4]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	685a      	ldr	r2, [r3, #4]
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	3308      	adds	r3, #8
 800d874:	429a      	cmp	r2, r3
 800d876:	d104      	bne.n	800d882 <vTaskSwitchContext+0x8e>
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	4a0a      	ldr	r2, [pc, #40]	@ (800d8b4 <vTaskSwitchContext+0xc0>)
 800d88a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d88c:	4b09      	ldr	r3, [pc, #36]	@ (800d8b4 <vTaskSwitchContext+0xc0>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	334c      	adds	r3, #76	@ 0x4c
 800d892:	4a09      	ldr	r2, [pc, #36]	@ (800d8b8 <vTaskSwitchContext+0xc4>)
 800d894:	6013      	str	r3, [r2, #0]
}
 800d896:	bf00      	nop
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	200053e0 	.word	0x200053e0
 800d8a8:	200053cc 	.word	0x200053cc
 800d8ac:	200053c0 	.word	0x200053c0
 800d8b0:	200052bc 	.word	0x200052bc
 800d8b4:	200052b8 	.word	0x200052b8
 800d8b8:	20000118 	.word	0x20000118

0800d8bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10b      	bne.n	800d8e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	60fb      	str	r3, [r7, #12]
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <vTaskPlaceOnEventList+0x48>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3318      	adds	r3, #24
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7fe fbec 	bl	800c0ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	6838      	ldr	r0, [r7, #0]
 800d8f6:	f000 fb8d 	bl	800e014 <prvAddCurrentTaskToDelayedList>
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	200052b8 	.word	0x200052b8

0800d908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10b      	bne.n	800d936 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60fb      	str	r3, [r7, #12]
}
 800d930:	bf00      	nop
 800d932:	bf00      	nop
 800d934:	e7fd      	b.n	800d932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3318      	adds	r3, #24
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fbfe 	bl	800c13c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d940:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b8 <xTaskRemoveFromEventList+0xb0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11c      	bne.n	800d982 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fbf5 	bl	800c13c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d956:	2201      	movs	r2, #1
 800d958:	409a      	lsls	r2, r3
 800d95a:	4b18      	ldr	r3, [pc, #96]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4313      	orrs	r3, r2
 800d960:	4a16      	ldr	r2, [pc, #88]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4a13      	ldr	r2, [pc, #76]	@ (800d9c0 <xTaskRemoveFromEventList+0xb8>)
 800d972:	441a      	add	r2, r3
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	3304      	adds	r3, #4
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f7fe fb81 	bl	800c082 <vListInsertEnd>
 800d980:	e005      	b.n	800d98e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	3318      	adds	r3, #24
 800d986:	4619      	mov	r1, r3
 800d988:	480e      	ldr	r0, [pc, #56]	@ (800d9c4 <xTaskRemoveFromEventList+0xbc>)
 800d98a:	f7fe fb7a 	bl	800c082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d992:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <xTaskRemoveFromEventList+0xc0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d998:	429a      	cmp	r2, r3
 800d99a:	d905      	bls.n	800d9a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <xTaskRemoveFromEventList+0xc4>)
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	e001      	b.n	800d9ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9ac:	697b      	ldr	r3, [r7, #20]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200053e0 	.word	0x200053e0
 800d9bc:	200053c0 	.word	0x200053c0
 800d9c0:	200052bc 	.word	0x200052bc
 800d9c4:	20005378 	.word	0x20005378
 800d9c8:	200052b8 	.word	0x200052b8
 800d9cc:	200053cc 	.word	0x200053cc

0800d9d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9d8:	4b06      	ldr	r3, [pc, #24]	@ (800d9f4 <vTaskInternalSetTimeOutState+0x24>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	@ (800d9f8 <vTaskInternalSetTimeOutState+0x28>)
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	605a      	str	r2, [r3, #4]
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	200053d0 	.word	0x200053d0
 800d9f8:	200053bc 	.word	0x200053bc

0800d9fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10b      	bne.n	800da24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	613b      	str	r3, [r7, #16]
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	e7fd      	b.n	800da20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10b      	bne.n	800da42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	60fb      	str	r3, [r7, #12]
}
 800da3c:	bf00      	nop
 800da3e:	bf00      	nop
 800da40:	e7fd      	b.n	800da3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800da42:	f000 fc81 	bl	800e348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da46:	4b1d      	ldr	r3, [pc, #116]	@ (800dabc <xTaskCheckForTimeOut+0xc0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5e:	d102      	bne.n	800da66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]
 800da64:	e023      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b15      	ldr	r3, [pc, #84]	@ (800dac0 <xTaskCheckForTimeOut+0xc4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d007      	beq.n	800da82 <xTaskCheckForTimeOut+0x86>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d302      	bcc.n	800da82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	61fb      	str	r3, [r7, #28]
 800da80:	e015      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d20b      	bcs.n	800daa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	1ad2      	subs	r2, r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ff99 	bl	800d9d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	e004      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800daae:	f000 fc7d 	bl	800e3ac <vPortExitCritical>

	return xReturn;
 800dab2:	69fb      	ldr	r3, [r7, #28]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	200053bc 	.word	0x200053bc
 800dac0:	200053d0 	.word	0x200053d0

0800dac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dac8:	4b03      	ldr	r3, [pc, #12]	@ (800dad8 <vTaskMissedYield+0x14>)
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	200053cc 	.word	0x200053cc

0800dadc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dae4:	f000 f852 	bl	800db8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dae8:	4b06      	ldr	r3, [pc, #24]	@ (800db04 <prvIdleTask+0x28>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d9f9      	bls.n	800dae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800daf0:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <prvIdleTask+0x2c>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db00:	e7f0      	b.n	800dae4 <prvIdleTask+0x8>
 800db02:	bf00      	nop
 800db04:	200052bc 	.word	0x200052bc
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db12:	2300      	movs	r3, #0
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	e00c      	b.n	800db32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4a12      	ldr	r2, [pc, #72]	@ (800db6c <prvInitialiseTaskLists+0x60>)
 800db24:	4413      	add	r3, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fa7e 	bl	800c028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3301      	adds	r3, #1
 800db30:	607b      	str	r3, [r7, #4]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b06      	cmp	r3, #6
 800db36:	d9ef      	bls.n	800db18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db38:	480d      	ldr	r0, [pc, #52]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db3a:	f7fe fa75 	bl	800c028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db3e:	480d      	ldr	r0, [pc, #52]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db40:	f7fe fa72 	bl	800c028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db44:	480c      	ldr	r0, [pc, #48]	@ (800db78 <prvInitialiseTaskLists+0x6c>)
 800db46:	f7fe fa6f 	bl	800c028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db4a:	480c      	ldr	r0, [pc, #48]	@ (800db7c <prvInitialiseTaskLists+0x70>)
 800db4c:	f7fe fa6c 	bl	800c028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db50:	480b      	ldr	r0, [pc, #44]	@ (800db80 <prvInitialiseTaskLists+0x74>)
 800db52:	f7fe fa69 	bl	800c028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db56:	4b0b      	ldr	r3, [pc, #44]	@ (800db84 <prvInitialiseTaskLists+0x78>)
 800db58:	4a05      	ldr	r2, [pc, #20]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db5c:	4b0a      	ldr	r3, [pc, #40]	@ (800db88 <prvInitialiseTaskLists+0x7c>)
 800db5e:	4a05      	ldr	r2, [pc, #20]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	200052bc 	.word	0x200052bc
 800db70:	20005348 	.word	0x20005348
 800db74:	2000535c 	.word	0x2000535c
 800db78:	20005378 	.word	0x20005378
 800db7c:	2000538c 	.word	0x2000538c
 800db80:	200053a4 	.word	0x200053a4
 800db84:	20005370 	.word	0x20005370
 800db88:	20005374 	.word	0x20005374

0800db8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db92:	e019      	b.n	800dbc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db94:	f000 fbd8 	bl	800e348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db98:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <prvCheckTasksWaitingTermination+0x50>)
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe fac9 	bl	800c13c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	4a0a      	ldr	r2, [pc, #40]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbbe:	f000 fbf5 	bl	800e3ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f810 	bl	800dbe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbc8:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e1      	bne.n	800db94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	2000538c 	.word	0x2000538c
 800dbe0:	200053b8 	.word	0x200053b8
 800dbe4:	200053a0 	.word	0x200053a0

0800dbe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	334c      	adds	r3, #76	@ 0x4c
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f00c fd25 	bl	801a644 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 fd8d 	bl	800e728 <vPortFree>
				vPortFree( pxTCB );
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fd8a 	bl	800e728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc14:	e019      	b.n	800dc4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d103      	bne.n	800dc28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fd81 	bl	800e728 <vPortFree>
	}
 800dc26:	e010      	b.n	800dc4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d00b      	beq.n	800dc4a <prvDeleteTCB+0x62>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	60fb      	str	r3, [r7, #12]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <prvDeleteTCB+0x5e>
	}
 800dc4a:	bf00      	nop
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc64:	4b0a      	ldr	r3, [pc, #40]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc6c:	e008      	b.n	800dc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc6e:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	4a04      	ldr	r2, [pc, #16]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc7e:	6013      	str	r3, [r2, #0]
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	20005370 	.word	0x20005370
 800dc90:	200053d8 	.word	0x200053d8

0800dc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc8 <xTaskGetSchedulerState+0x34>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dca2:	2301      	movs	r3, #1
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	e008      	b.n	800dcba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <xTaskGetSchedulerState+0x38>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	607b      	str	r3, [r7, #4]
 800dcb4:	e001      	b.n	800dcba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dcba:	687b      	ldr	r3, [r7, #4]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	200053c4 	.word	0x200053c4
 800dccc:	200053e0 	.word	0x200053e0

0800dcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d05e      	beq.n	800dda4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	4b31      	ldr	r3, [pc, #196]	@ (800ddb0 <xTaskPriorityInherit+0xe0>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d24e      	bcs.n	800dd92 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	db06      	blt.n	800dd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcfc:	4b2c      	ldr	r3, [pc, #176]	@ (800ddb0 <xTaskPriorityInherit+0xe0>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	f1c3 0207 	rsb	r2, r3, #7
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6959      	ldr	r1, [r3, #20]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd12:	4613      	mov	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4a26      	ldr	r2, [pc, #152]	@ (800ddb4 <xTaskPriorityInherit+0xe4>)
 800dd1c:	4413      	add	r3, r2
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d12f      	bne.n	800dd82 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe fa08 	bl	800c13c <uxListRemove>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10a      	bne.n	800dd48 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd36:	2201      	movs	r2, #1
 800dd38:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3c:	43da      	mvns	r2, r3
 800dd3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddb8 <xTaskPriorityInherit+0xe8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4013      	ands	r3, r2
 800dd44:	4a1c      	ldr	r2, [pc, #112]	@ (800ddb8 <xTaskPriorityInherit+0xe8>)
 800dd46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd48:	4b19      	ldr	r3, [pc, #100]	@ (800ddb0 <xTaskPriorityInherit+0xe0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd56:	2201      	movs	r2, #1
 800dd58:	409a      	lsls	r2, r3
 800dd5a:	4b17      	ldr	r3, [pc, #92]	@ (800ddb8 <xTaskPriorityInherit+0xe8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	4a15      	ldr	r2, [pc, #84]	@ (800ddb8 <xTaskPriorityInherit+0xe8>)
 800dd62:	6013      	str	r3, [r2, #0]
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd68:	4613      	mov	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4a10      	ldr	r2, [pc, #64]	@ (800ddb4 <xTaskPriorityInherit+0xe4>)
 800dd72:	441a      	add	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	3304      	adds	r3, #4
 800dd78:	4619      	mov	r1, r3
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	f7fe f981 	bl	800c082 <vListInsertEnd>
 800dd80:	e004      	b.n	800dd8c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd82:	4b0b      	ldr	r3, [pc, #44]	@ (800ddb0 <xTaskPriorityInherit+0xe0>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	e008      	b.n	800dda4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd96:	4b06      	ldr	r3, [pc, #24]	@ (800ddb0 <xTaskPriorityInherit+0xe0>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d201      	bcs.n	800dda4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dda0:	2301      	movs	r3, #1
 800dda2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dda4:	68fb      	ldr	r3, [r7, #12]
	}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	200052b8 	.word	0x200052b8
 800ddb4:	200052bc 	.word	0x200052bc
 800ddb8:	200053c0 	.word	0x200053c0

0800ddbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d070      	beq.n	800deb4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddd2:	4b3b      	ldr	r3, [pc, #236]	@ (800dec0 <xTaskPriorityDisinherit+0x104>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	693a      	ldr	r2, [r7, #16]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d00b      	beq.n	800ddf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	60fb      	str	r3, [r7, #12]
}
 800ddee:	bf00      	nop
 800ddf0:	bf00      	nop
 800ddf2:	e7fd      	b.n	800ddf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10b      	bne.n	800de14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	60bb      	str	r3, [r7, #8]
}
 800de0e:	bf00      	nop
 800de10:	bf00      	nop
 800de12:	e7fd      	b.n	800de10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de18:	1e5a      	subs	r2, r3, #1
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de26:	429a      	cmp	r2, r3
 800de28:	d044      	beq.n	800deb4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d140      	bne.n	800deb4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	3304      	adds	r3, #4
 800de36:	4618      	mov	r0, r3
 800de38:	f7fe f980 	bl	800c13c <uxListRemove>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d115      	bne.n	800de6e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de46:	491f      	ldr	r1, [pc, #124]	@ (800dec4 <xTaskPriorityDisinherit+0x108>)
 800de48:	4613      	mov	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	440b      	add	r3, r1
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10a      	bne.n	800de6e <xTaskPriorityDisinherit+0xb2>
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5c:	2201      	movs	r2, #1
 800de5e:	fa02 f303 	lsl.w	r3, r2, r3
 800de62:	43da      	mvns	r2, r3
 800de64:	4b18      	ldr	r3, [pc, #96]	@ (800dec8 <xTaskPriorityDisinherit+0x10c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4013      	ands	r3, r2
 800de6a:	4a17      	ldr	r2, [pc, #92]	@ (800dec8 <xTaskPriorityDisinherit+0x10c>)
 800de6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7a:	f1c3 0207 	rsb	r2, r3, #7
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de86:	2201      	movs	r2, #1
 800de88:	409a      	lsls	r2, r3
 800de8a:	4b0f      	ldr	r3, [pc, #60]	@ (800dec8 <xTaskPriorityDisinherit+0x10c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4313      	orrs	r3, r2
 800de90:	4a0d      	ldr	r2, [pc, #52]	@ (800dec8 <xTaskPriorityDisinherit+0x10c>)
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de98:	4613      	mov	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	4a08      	ldr	r2, [pc, #32]	@ (800dec4 <xTaskPriorityDisinherit+0x108>)
 800dea2:	441a      	add	r2, r3
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f7fe f8e9 	bl	800c082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800deb0:	2301      	movs	r3, #1
 800deb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800deb4:	697b      	ldr	r3, [r7, #20]
	}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	200052b8 	.word	0x200052b8
 800dec4:	200052bc 	.word	0x200052bc
 800dec8:	200053c0 	.word	0x200053c0

0800decc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800deda:	2301      	movs	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d079      	beq.n	800dfd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10b      	bne.n	800df04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	60fb      	str	r3, [r7, #12]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df08:	683a      	ldr	r2, [r7, #0]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d902      	bls.n	800df14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	61fb      	str	r3, [r7, #28]
 800df12:	e002      	b.n	800df1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1e:	69fa      	ldr	r2, [r7, #28]
 800df20:	429a      	cmp	r2, r3
 800df22:	d059      	beq.n	800dfd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d154      	bne.n	800dfd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800df2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dfe0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	429a      	cmp	r2, r3
 800df36:	d10b      	bne.n	800df50 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	60bb      	str	r3, [r7, #8]
}
 800df4a:	bf00      	nop
 800df4c:	bf00      	nop
 800df4e:	e7fd      	b.n	800df4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	69fa      	ldr	r2, [r7, #28]
 800df5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	db04      	blt.n	800df6e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f1c3 0207 	rsb	r2, r3, #7
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	6959      	ldr	r1, [r3, #20]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	4613      	mov	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4a19      	ldr	r2, [pc, #100]	@ (800dfe4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df7e:	4413      	add	r3, r2
 800df80:	4299      	cmp	r1, r3
 800df82:	d129      	bne.n	800dfd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe f8d7 	bl	800c13c <uxListRemove>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10a      	bne.n	800dfaa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df98:	2201      	movs	r2, #1
 800df9a:	fa02 f303 	lsl.w	r3, r2, r3
 800df9e:	43da      	mvns	r2, r3
 800dfa0:	4b11      	ldr	r3, [pc, #68]	@ (800dfe8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	4a10      	ldr	r2, [pc, #64]	@ (800dfe8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dfa8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfae:	2201      	movs	r2, #1
 800dfb0:	409a      	lsls	r2, r3
 800dfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	4a0b      	ldr	r2, [pc, #44]	@ (800dfe8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800dfba:	6013      	str	r3, [r2, #0]
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4a06      	ldr	r2, [pc, #24]	@ (800dfe4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dfca:	441a      	add	r2, r3
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f7fe f855 	bl	800c082 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfd8:	bf00      	nop
 800dfda:	3720      	adds	r7, #32
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	200052b8 	.word	0x200052b8
 800dfe4:	200052bc 	.word	0x200052bc
 800dfe8:	200053c0 	.word	0x200053c0

0800dfec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dfec:	b480      	push	{r7}
 800dfee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dff0:	4b07      	ldr	r3, [pc, #28]	@ (800e010 <pvTaskIncrementMutexHeldCount+0x24>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d004      	beq.n	800e002 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dff8:	4b05      	ldr	r3, [pc, #20]	@ (800e010 <pvTaskIncrementMutexHeldCount+0x24>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dffe:	3201      	adds	r2, #1
 800e000:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e002:	4b03      	ldr	r3, [pc, #12]	@ (800e010 <pvTaskIncrementMutexHeldCount+0x24>)
 800e004:	681b      	ldr	r3, [r3, #0]
	}
 800e006:	4618      	mov	r0, r3
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	200052b8 	.word	0x200052b8

0800e014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e01e:	4b29      	ldr	r3, [pc, #164]	@ (800e0c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e024:	4b28      	ldr	r3, [pc, #160]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	3304      	adds	r3, #4
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe f886 	bl	800c13c <uxListRemove>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e036:	4b24      	ldr	r3, [pc, #144]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03c:	2201      	movs	r2, #1
 800e03e:	fa02 f303 	lsl.w	r3, r2, r3
 800e042:	43da      	mvns	r2, r3
 800e044:	4b21      	ldr	r3, [pc, #132]	@ (800e0cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4013      	ands	r3, r2
 800e04a:	4a20      	ldr	r2, [pc, #128]	@ (800e0cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e04c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e054:	d10a      	bne.n	800e06c <prvAddCurrentTaskToDelayedList+0x58>
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d007      	beq.n	800e06c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e05c:	4b1a      	ldr	r3, [pc, #104]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3304      	adds	r3, #4
 800e062:	4619      	mov	r1, r3
 800e064:	481a      	ldr	r0, [pc, #104]	@ (800e0d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e066:	f7fe f80c 	bl	800c082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e06a:	e026      	b.n	800e0ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4413      	add	r3, r2
 800e072:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e074:	4b14      	ldr	r3, [pc, #80]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	429a      	cmp	r2, r3
 800e082:	d209      	bcs.n	800e098 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e084:	4b13      	ldr	r3, [pc, #76]	@ (800e0d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4619      	mov	r1, r3
 800e090:	4610      	mov	r0, r2
 800e092:	f7fe f81a 	bl	800c0ca <vListInsert>
}
 800e096:	e010      	b.n	800e0ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e098:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7fe f810 	bl	800c0ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e0dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68ba      	ldr	r2, [r7, #8]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d202      	bcs.n	800e0ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e0b4:	4a09      	ldr	r2, [pc, #36]	@ (800e0dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	6013      	str	r3, [r2, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	200053bc 	.word	0x200053bc
 800e0c8:	200052b8 	.word	0x200052b8
 800e0cc:	200053c0 	.word	0x200053c0
 800e0d0:	200053a4 	.word	0x200053a4
 800e0d4:	20005374 	.word	0x20005374
 800e0d8:	20005370 	.word	0x20005370
 800e0dc:	200053d8 	.word	0x200053d8

0800e0e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	3b04      	subs	r3, #4
 800e0f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3b04      	subs	r3, #4
 800e0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f023 0201 	bic.w	r2, r3, #1
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3b04      	subs	r3, #4
 800e10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e110:	4a0c      	ldr	r2, [pc, #48]	@ (800e144 <pxPortInitialiseStack+0x64>)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3b14      	subs	r3, #20
 800e11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3b04      	subs	r3, #4
 800e126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f06f 0202 	mvn.w	r2, #2
 800e12e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3b20      	subs	r3, #32
 800e134:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e136:	68fb      	ldr	r3, [r7, #12]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	0800e149 	.word	0x0800e149

0800e148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e152:	4b13      	ldr	r3, [pc, #76]	@ (800e1a0 <prvTaskExitError+0x58>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15a:	d00b      	beq.n	800e174 <prvTaskExitError+0x2c>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	60fb      	str	r3, [r7, #12]
}
 800e16e:	bf00      	nop
 800e170:	bf00      	nop
 800e172:	e7fd      	b.n	800e170 <prvTaskExitError+0x28>
	__asm volatile
 800e174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e178:	f383 8811 	msr	BASEPRI, r3
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	60bb      	str	r3, [r7, #8]
}
 800e186:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e188:	bf00      	nop
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0fc      	beq.n	800e18a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20000098 	.word	0x20000098
	...

0800e1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1b0:	4b07      	ldr	r3, [pc, #28]	@ (800e1d0 <pxCurrentTCBConst2>)
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	6808      	ldr	r0, [r1, #0]
 800e1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	f380 8809 	msr	PSP, r0
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f04f 0000 	mov.w	r0, #0
 800e1c6:	f380 8811 	msr	BASEPRI, r0
 800e1ca:	4770      	bx	lr
 800e1cc:	f3af 8000 	nop.w

0800e1d0 <pxCurrentTCBConst2>:
 800e1d0:	200052b8 	.word	0x200052b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop

0800e1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1d8:	4808      	ldr	r0, [pc, #32]	@ (800e1fc <prvPortStartFirstTask+0x24>)
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	6800      	ldr	r0, [r0, #0]
 800e1de:	f380 8808 	msr	MSP, r0
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8814 	msr	CONTROL, r0
 800e1ea:	b662      	cpsie	i
 800e1ec:	b661      	cpsie	f
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	df00      	svc	0
 800e1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1fa:	bf00      	nop
 800e1fc:	e000ed08 	.word	0xe000ed08

0800e200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e206:	4b47      	ldr	r3, [pc, #284]	@ (800e324 <xPortStartScheduler+0x124>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a47      	ldr	r2, [pc, #284]	@ (800e328 <xPortStartScheduler+0x128>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d10b      	bne.n	800e228 <xPortStartScheduler+0x28>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	60fb      	str	r3, [r7, #12]
}
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	e7fd      	b.n	800e224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e228:	4b3e      	ldr	r3, [pc, #248]	@ (800e324 <xPortStartScheduler+0x124>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a3f      	ldr	r2, [pc, #252]	@ (800e32c <xPortStartScheduler+0x12c>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d10b      	bne.n	800e24a <xPortStartScheduler+0x4a>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	613b      	str	r3, [r7, #16]
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e24a:	4b39      	ldr	r3, [pc, #228]	@ (800e330 <xPortStartScheduler+0x130>)
 800e24c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	b2db      	uxtb	r3, r3
 800e254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	22ff      	movs	r2, #255	@ 0xff
 800e25a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	b2db      	uxtb	r3, r3
 800e262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e264:	78fb      	ldrb	r3, [r7, #3]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	4b31      	ldr	r3, [pc, #196]	@ (800e334 <xPortStartScheduler+0x134>)
 800e270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e272:	4b31      	ldr	r3, [pc, #196]	@ (800e338 <xPortStartScheduler+0x138>)
 800e274:	2207      	movs	r2, #7
 800e276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e278:	e009      	b.n	800e28e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e27a:	4b2f      	ldr	r3, [pc, #188]	@ (800e338 <xPortStartScheduler+0x138>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3b01      	subs	r3, #1
 800e280:	4a2d      	ldr	r2, [pc, #180]	@ (800e338 <xPortStartScheduler+0x138>)
 800e282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e28e:	78fb      	ldrb	r3, [r7, #3]
 800e290:	b2db      	uxtb	r3, r3
 800e292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e296:	2b80      	cmp	r3, #128	@ 0x80
 800e298:	d0ef      	beq.n	800e27a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e29a:	4b27      	ldr	r3, [pc, #156]	@ (800e338 <xPortStartScheduler+0x138>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f1c3 0307 	rsb	r3, r3, #7
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	d00b      	beq.n	800e2be <xPortStartScheduler+0xbe>
	__asm volatile
 800e2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	60bb      	str	r3, [r7, #8]
}
 800e2b8:	bf00      	nop
 800e2ba:	bf00      	nop
 800e2bc:	e7fd      	b.n	800e2ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2be:	4b1e      	ldr	r3, [pc, #120]	@ (800e338 <xPortStartScheduler+0x138>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	021b      	lsls	r3, r3, #8
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e338 <xPortStartScheduler+0x138>)
 800e2c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e338 <xPortStartScheduler+0x138>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2d0:	4a19      	ldr	r2, [pc, #100]	@ (800e338 <xPortStartScheduler+0x138>)
 800e2d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2dc:	4b17      	ldr	r3, [pc, #92]	@ (800e33c <xPortStartScheduler+0x13c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a16      	ldr	r2, [pc, #88]	@ (800e33c <xPortStartScheduler+0x13c>)
 800e2e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e2e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2e8:	4b14      	ldr	r3, [pc, #80]	@ (800e33c <xPortStartScheduler+0x13c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a13      	ldr	r2, [pc, #76]	@ (800e33c <xPortStartScheduler+0x13c>)
 800e2ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e2f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2f4:	f000 f8da 	bl	800e4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2f8:	4b11      	ldr	r3, [pc, #68]	@ (800e340 <xPortStartScheduler+0x140>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2fe:	f000 f8f9 	bl	800e4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e302:	4b10      	ldr	r3, [pc, #64]	@ (800e344 <xPortStartScheduler+0x144>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a0f      	ldr	r2, [pc, #60]	@ (800e344 <xPortStartScheduler+0x144>)
 800e308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e30c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e30e:	f7ff ff63 	bl	800e1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e312:	f7ff fa6f 	bl	800d7f4 <vTaskSwitchContext>
	prvTaskExitError();
 800e316:	f7ff ff17 	bl	800e148 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3718      	adds	r7, #24
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	e000ed00 	.word	0xe000ed00
 800e328:	410fc271 	.word	0x410fc271
 800e32c:	410fc270 	.word	0x410fc270
 800e330:	e000e400 	.word	0xe000e400
 800e334:	200053e4 	.word	0x200053e4
 800e338:	200053e8 	.word	0x200053e8
 800e33c:	e000ed20 	.word	0xe000ed20
 800e340:	20000098 	.word	0x20000098
 800e344:	e000ef34 	.word	0xe000ef34

0800e348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	607b      	str	r3, [r7, #4]
}
 800e360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e362:	4b10      	ldr	r3, [pc, #64]	@ (800e3a4 <vPortEnterCritical+0x5c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3301      	adds	r3, #1
 800e368:	4a0e      	ldr	r2, [pc, #56]	@ (800e3a4 <vPortEnterCritical+0x5c>)
 800e36a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e36c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <vPortEnterCritical+0x5c>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d110      	bne.n	800e396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e374:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a8 <vPortEnterCritical+0x60>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <vPortEnterCritical+0x4e>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	603b      	str	r3, [r7, #0]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <vPortEnterCritical+0x4a>
	}
}
 800e396:	bf00      	nop
 800e398:	370c      	adds	r7, #12
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	20000098 	.word	0x20000098
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3b2:	4b12      	ldr	r3, [pc, #72]	@ (800e3fc <vPortExitCritical+0x50>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10b      	bne.n	800e3d2 <vPortExitCritical+0x26>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	607b      	str	r3, [r7, #4]
}
 800e3cc:	bf00      	nop
 800e3ce:	bf00      	nop
 800e3d0:	e7fd      	b.n	800e3ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e3fc <vPortExitCritical+0x50>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	4a08      	ldr	r2, [pc, #32]	@ (800e3fc <vPortExitCritical+0x50>)
 800e3da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3dc:	4b07      	ldr	r3, [pc, #28]	@ (800e3fc <vPortExitCritical+0x50>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d105      	bne.n	800e3f0 <vPortExitCritical+0x44>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f383 8811 	msr	BASEPRI, r3
}
 800e3ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20000098 	.word	0x20000098

0800e400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e400:	f3ef 8009 	mrs	r0, PSP
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	4b15      	ldr	r3, [pc, #84]	@ (800e460 <pxCurrentTCBConst>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	f01e 0f10 	tst.w	lr, #16
 800e410:	bf08      	it	eq
 800e412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41a:	6010      	str	r0, [r2, #0]
 800e41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e424:	f380 8811 	msr	BASEPRI, r0
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f7ff f9e0 	bl	800d7f4 <vTaskSwitchContext>
 800e434:	f04f 0000 	mov.w	r0, #0
 800e438:	f380 8811 	msr	BASEPRI, r0
 800e43c:	bc09      	pop	{r0, r3}
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	6808      	ldr	r0, [r1, #0]
 800e442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e446:	f01e 0f10 	tst.w	lr, #16
 800e44a:	bf08      	it	eq
 800e44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e450:	f380 8809 	msr	PSP, r0
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst>:
 800e460:	200052b8 	.word	0x200052b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	607b      	str	r3, [r7, #4]
}
 800e480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e482:	f7ff f8fd 	bl	800d680 <xTaskIncrementTick>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e48c:	4b06      	ldr	r3, [pc, #24]	@ (800e4a8 <SysTick_Handler+0x40>)
 800e48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f383 8811 	msr	BASEPRI, r3
}
 800e49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4a0:	bf00      	nop
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e4 <vPortSetupTimerInterrupt+0x38>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <vPortSetupTimerInterrupt+0x3c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800e4ec <vPortSetupTimerInterrupt+0x40>)
 800e4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c6:	099b      	lsrs	r3, r3, #6
 800e4c8:	4a09      	ldr	r2, [pc, #36]	@ (800e4f0 <vPortSetupTimerInterrupt+0x44>)
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ce:	4b04      	ldr	r3, [pc, #16]	@ (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	601a      	str	r2, [r3, #0]
}
 800e4d4:	bf00      	nop
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	e000e010 	.word	0xe000e010
 800e4e4:	e000e018 	.word	0xe000e018
 800e4e8:	20000000 	.word	0x20000000
 800e4ec:	10624dd3 	.word	0x10624dd3
 800e4f0:	e000e014 	.word	0xe000e014

0800e4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e504 <vPortEnableVFP+0x10>
 800e4f8:	6801      	ldr	r1, [r0, #0]
 800e4fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e4fe:	6001      	str	r1, [r0, #0]
 800e500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e502:	bf00      	nop
 800e504:	e000ed88 	.word	0xe000ed88

0800e508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e50e:	f3ef 8305 	mrs	r3, IPSR
 800e512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d915      	bls.n	800e546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e51a:	4a18      	ldr	r2, [pc, #96]	@ (800e57c <vPortValidateInterruptPriority+0x74>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4413      	add	r3, r2
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e524:	4b16      	ldr	r3, [pc, #88]	@ (800e580 <vPortValidateInterruptPriority+0x78>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	7afa      	ldrb	r2, [r7, #11]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20b      	bcs.n	800e546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	607b      	str	r3, [r7, #4]
}
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	e7fd      	b.n	800e542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e546:	4b0f      	ldr	r3, [pc, #60]	@ (800e584 <vPortValidateInterruptPriority+0x7c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e54e:	4b0e      	ldr	r3, [pc, #56]	@ (800e588 <vPortValidateInterruptPriority+0x80>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	429a      	cmp	r2, r3
 800e554:	d90b      	bls.n	800e56e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	603b      	str	r3, [r7, #0]
}
 800e568:	bf00      	nop
 800e56a:	bf00      	nop
 800e56c:	e7fd      	b.n	800e56a <vPortValidateInterruptPriority+0x62>
	}
 800e56e:	bf00      	nop
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	e000e3f0 	.word	0xe000e3f0
 800e580:	200053e4 	.word	0x200053e4
 800e584:	e000ed0c 	.word	0xe000ed0c
 800e588:	200053e8 	.word	0x200053e8

0800e58c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08a      	sub	sp, #40	@ 0x28
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e594:	2300      	movs	r3, #0
 800e596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e598:	f7fe ffa4 	bl	800d4e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e59c:	4b5c      	ldr	r3, [pc, #368]	@ (800e710 <pvPortMalloc+0x184>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d101      	bne.n	800e5a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5a4:	f000 f924 	bl	800e7f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5a8:	4b5a      	ldr	r3, [pc, #360]	@ (800e714 <pvPortMalloc+0x188>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4013      	ands	r3, r2
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f040 8095 	bne.w	800e6e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d01e      	beq.n	800e5fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e5bc:	2208      	movs	r2, #8
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f003 0307 	and.w	r3, r3, #7
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d015      	beq.n	800e5fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f023 0307 	bic.w	r3, r3, #7
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f003 0307 	and.w	r3, r3, #7
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00b      	beq.n	800e5fa <pvPortMalloc+0x6e>
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	617b      	str	r3, [r7, #20]
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop
 800e5f8:	e7fd      	b.n	800e5f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d06f      	beq.n	800e6e0 <pvPortMalloc+0x154>
 800e600:	4b45      	ldr	r3, [pc, #276]	@ (800e718 <pvPortMalloc+0x18c>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	429a      	cmp	r2, r3
 800e608:	d86a      	bhi.n	800e6e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e60a:	4b44      	ldr	r3, [pc, #272]	@ (800e71c <pvPortMalloc+0x190>)
 800e60c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e60e:	4b43      	ldr	r3, [pc, #268]	@ (800e71c <pvPortMalloc+0x190>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e614:	e004      	b.n	800e620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	429a      	cmp	r2, r3
 800e628:	d903      	bls.n	800e632 <pvPortMalloc+0xa6>
 800e62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1f1      	bne.n	800e616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e632:	4b37      	ldr	r3, [pc, #220]	@ (800e710 <pvPortMalloc+0x184>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e638:	429a      	cmp	r2, r3
 800e63a:	d051      	beq.n	800e6e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2208      	movs	r2, #8
 800e642:	4413      	add	r3, r2
 800e644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	1ad2      	subs	r2, r2, r3
 800e656:	2308      	movs	r3, #8
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d920      	bls.n	800e6a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4413      	add	r3, r2
 800e664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	f003 0307 	and.w	r3, r3, #7
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <pvPortMalloc+0xfc>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	613b      	str	r3, [r7, #16]
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	e7fd      	b.n	800e684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	1ad2      	subs	r2, r2, r3
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e69a:	69b8      	ldr	r0, [r7, #24]
 800e69c:	f000 f90a 	bl	800e8b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e718 <pvPortMalloc+0x18c>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e718 <pvPortMalloc+0x18c>)
 800e6ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e718 <pvPortMalloc+0x18c>)
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e720 <pvPortMalloc+0x194>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d203      	bcs.n	800e6c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6ba:	4b17      	ldr	r3, [pc, #92]	@ (800e718 <pvPortMalloc+0x18c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a18      	ldr	r2, [pc, #96]	@ (800e720 <pvPortMalloc+0x194>)
 800e6c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	4b13      	ldr	r3, [pc, #76]	@ (800e714 <pvPortMalloc+0x188>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	431a      	orrs	r2, r3
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6d6:	4b13      	ldr	r3, [pc, #76]	@ (800e724 <pvPortMalloc+0x198>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	4a11      	ldr	r2, [pc, #68]	@ (800e724 <pvPortMalloc+0x198>)
 800e6de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6e0:	f7fe ff0e 	bl	800d500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	f003 0307 	and.w	r3, r3, #7
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00b      	beq.n	800e706 <pvPortMalloc+0x17a>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	60fb      	str	r3, [r7, #12]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <pvPortMalloc+0x176>
	return pvReturn;
 800e706:	69fb      	ldr	r3, [r7, #28]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3728      	adds	r7, #40	@ 0x28
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20008ff4 	.word	0x20008ff4
 800e714:	20009008 	.word	0x20009008
 800e718:	20008ff8 	.word	0x20008ff8
 800e71c:	20008fec 	.word	0x20008fec
 800e720:	20008ffc 	.word	0x20008ffc
 800e724:	20009000 	.word	0x20009000

0800e728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d04f      	beq.n	800e7da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e73a:	2308      	movs	r3, #8
 800e73c:	425b      	negs	r3, r3
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	4413      	add	r3, r2
 800e742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	4b25      	ldr	r3, [pc, #148]	@ (800e7e4 <vPortFree+0xbc>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4013      	ands	r3, r2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10b      	bne.n	800e76e <vPortFree+0x46>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	60fb      	str	r3, [r7, #12]
}
 800e768:	bf00      	nop
 800e76a:	bf00      	nop
 800e76c:	e7fd      	b.n	800e76a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00b      	beq.n	800e78e <vPortFree+0x66>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	60bb      	str	r3, [r7, #8]
}
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	e7fd      	b.n	800e78a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	4b14      	ldr	r3, [pc, #80]	@ (800e7e4 <vPortFree+0xbc>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4013      	ands	r3, r2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01e      	beq.n	800e7da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d11a      	bne.n	800e7da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e4 <vPortFree+0xbc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	43db      	mvns	r3, r3
 800e7ae:	401a      	ands	r2, r3
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7b4:	f7fe fe96 	bl	800d4e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <vPortFree+0xc0>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	4a09      	ldr	r2, [pc, #36]	@ (800e7e8 <vPortFree+0xc0>)
 800e7c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7c6:	6938      	ldr	r0, [r7, #16]
 800e7c8:	f000 f874 	bl	800e8b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7cc:	4b07      	ldr	r3, [pc, #28]	@ (800e7ec <vPortFree+0xc4>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	4a06      	ldr	r2, [pc, #24]	@ (800e7ec <vPortFree+0xc4>)
 800e7d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7d6:	f7fe fe93 	bl	800d500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7da:	bf00      	nop
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20009008 	.word	0x20009008
 800e7e8:	20008ff8 	.word	0x20008ff8
 800e7ec:	20009004 	.word	0x20009004

0800e7f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e7fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7fc:	4b27      	ldr	r3, [pc, #156]	@ (800e89c <prvHeapInit+0xac>)
 800e7fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f003 0307 	and.w	r3, r3, #7
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00c      	beq.n	800e824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3307      	adds	r3, #7
 800e80e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f023 0307 	bic.w	r3, r3, #7
 800e816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	4a1f      	ldr	r2, [pc, #124]	@ (800e89c <prvHeapInit+0xac>)
 800e820:	4413      	add	r3, r2
 800e822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e828:	4a1d      	ldr	r2, [pc, #116]	@ (800e8a0 <prvHeapInit+0xb0>)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e82e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8a0 <prvHeapInit+0xb0>)
 800e830:	2200      	movs	r2, #0
 800e832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	4413      	add	r3, r2
 800e83a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e83c:	2208      	movs	r2, #8
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	1a9b      	subs	r3, r3, r2
 800e842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f023 0307 	bic.w	r3, r3, #7
 800e84a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4a15      	ldr	r2, [pc, #84]	@ (800e8a4 <prvHeapInit+0xb4>)
 800e850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e852:	4b14      	ldr	r3, [pc, #80]	@ (800e8a4 <prvHeapInit+0xb4>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2200      	movs	r2, #0
 800e858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e85a:	4b12      	ldr	r3, [pc, #72]	@ (800e8a4 <prvHeapInit+0xb4>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2200      	movs	r2, #0
 800e860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	1ad2      	subs	r2, r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e870:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a4 <prvHeapInit+0xb4>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4a0a      	ldr	r2, [pc, #40]	@ (800e8a8 <prvHeapInit+0xb8>)
 800e87e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	4a09      	ldr	r2, [pc, #36]	@ (800e8ac <prvHeapInit+0xbc>)
 800e886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e888:	4b09      	ldr	r3, [pc, #36]	@ (800e8b0 <prvHeapInit+0xc0>)
 800e88a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e88e:	601a      	str	r2, [r3, #0]
}
 800e890:	bf00      	nop
 800e892:	3714      	adds	r7, #20
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	200053ec 	.word	0x200053ec
 800e8a0:	20008fec 	.word	0x20008fec
 800e8a4:	20008ff4 	.word	0x20008ff4
 800e8a8:	20008ffc 	.word	0x20008ffc
 800e8ac:	20008ff8 	.word	0x20008ff8
 800e8b0:	20009008 	.word	0x20009008

0800e8b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8bc:	4b28      	ldr	r3, [pc, #160]	@ (800e960 <prvInsertBlockIntoFreeList+0xac>)
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e002      	b.n	800e8c8 <prvInsertBlockIntoFreeList+0x14>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d8f7      	bhi.n	800e8c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	4413      	add	r3, r2
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d108      	bne.n	800e8f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	441a      	add	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	441a      	add	r2, r3
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d118      	bne.n	800e93c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	4b15      	ldr	r3, [pc, #84]	@ (800e964 <prvInsertBlockIntoFreeList+0xb0>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	429a      	cmp	r2, r3
 800e914:	d00d      	beq.n	800e932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685a      	ldr	r2, [r3, #4]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	441a      	add	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	e008      	b.n	800e944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e932:	4b0c      	ldr	r3, [pc, #48]	@ (800e964 <prvInsertBlockIntoFreeList+0xb0>)
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	601a      	str	r2, [r3, #0]
 800e93a:	e003      	b.n	800e944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d002      	beq.n	800e952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e952:	bf00      	nop
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20008fec 	.word	0x20008fec
 800e964:	20008ff4 	.word	0x20008ff4

0800e968 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e972:	f008 f945 	bl	8016c00 <sys_timeouts_sleeptime>
 800e976:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97e:	d10b      	bne.n	800e998 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e980:	4813      	ldr	r0, [pc, #76]	@ (800e9d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800e982:	f00a ff18 	bl	80197b6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e986:	2200      	movs	r2, #0
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f00a fe8a 	bl	80196a4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e990:	480f      	ldr	r0, [pc, #60]	@ (800e9d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800e992:	f00a ff01 	bl	8019798 <sys_mutex_lock>
    return;
 800e996:	e018      	b.n	800e9ca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e99e:	f008 f8f5 	bl	8016b8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e9a2:	e7e6      	b.n	800e972 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e9a4:	480a      	ldr	r0, [pc, #40]	@ (800e9d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800e9a6:	f00a ff06 	bl	80197b6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f00a fe78 	bl	80196a4 <sys_arch_mbox_fetch>
 800e9b4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e9b6:	4806      	ldr	r0, [pc, #24]	@ (800e9d0 <tcpip_timeouts_mbox_fetch+0x68>)
 800e9b8:	f00a feee 	bl	8019798 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c2:	d102      	bne.n	800e9ca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e9c4:	f008 f8e2 	bl	8016b8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e9c8:	e7d3      	b.n	800e972 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20009018 	.word	0x20009018

0800e9d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e9dc:	4810      	ldr	r0, [pc, #64]	@ (800ea20 <tcpip_thread+0x4c>)
 800e9de:	f00a fedb 	bl	8019798 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ea24 <tcpip_thread+0x50>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d005      	beq.n	800e9f6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ea24 <tcpip_thread+0x50>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a0e      	ldr	r2, [pc, #56]	@ (800ea28 <tcpip_thread+0x54>)
 800e9f0:	6812      	ldr	r2, [r2, #0]
 800e9f2:	4610      	mov	r0, r2
 800e9f4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e9f6:	f107 030c 	add.w	r3, r7, #12
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	480b      	ldr	r0, [pc, #44]	@ (800ea2c <tcpip_thread+0x58>)
 800e9fe:	f7ff ffb3 	bl	800e968 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d106      	bne.n	800ea16 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ea08:	4b09      	ldr	r3, [pc, #36]	@ (800ea30 <tcpip_thread+0x5c>)
 800ea0a:	2291      	movs	r2, #145	@ 0x91
 800ea0c:	4909      	ldr	r1, [pc, #36]	@ (800ea34 <tcpip_thread+0x60>)
 800ea0e:	480a      	ldr	r0, [pc, #40]	@ (800ea38 <tcpip_thread+0x64>)
 800ea10:	f00b fd3c 	bl	801a48c <iprintf>
      continue;
 800ea14:	e003      	b.n	800ea1e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 f80f 	bl	800ea3c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ea1e:	e7ea      	b.n	800e9f6 <tcpip_thread+0x22>
 800ea20:	20009018 	.word	0x20009018
 800ea24:	2000900c 	.word	0x2000900c
 800ea28:	20009010 	.word	0x20009010
 800ea2c:	20009014 	.word	0x20009014
 800ea30:	0801c930 	.word	0x0801c930
 800ea34:	0801c960 	.word	0x0801c960
 800ea38:	0801c980 	.word	0x0801c980

0800ea3c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	2b02      	cmp	r3, #2
 800ea4a:	d026      	beq.n	800ea9a <tcpip_thread_handle_msg+0x5e>
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	dc2b      	bgt.n	800eaa8 <tcpip_thread_handle_msg+0x6c>
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <tcpip_thread_handle_msg+0x1e>
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d015      	beq.n	800ea84 <tcpip_thread_handle_msg+0x48>
 800ea58:	e026      	b.n	800eaa8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	6850      	ldr	r0, [r2, #4]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	6892      	ldr	r2, [r2, #8]
 800ea66:	4611      	mov	r1, r2
 800ea68:	4798      	blx	r3
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d004      	beq.n	800ea7a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 fcd9 	bl	801042c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	2009      	movs	r0, #9
 800ea7e:	f000 fe63 	bl	800f748 <memp_free>
      break;
 800ea82:	e018      	b.n	800eab6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	6892      	ldr	r2, [r2, #8]
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea90:	6879      	ldr	r1, [r7, #4]
 800ea92:	2008      	movs	r0, #8
 800ea94:	f000 fe58 	bl	800f748 <memp_free>
      break;
 800ea98:	e00d      	b.n	800eab6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6892      	ldr	r2, [r2, #8]
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4798      	blx	r3
      break;
 800eaa6:	e006      	b.n	800eab6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800eaa8:	4b05      	ldr	r3, [pc, #20]	@ (800eac0 <tcpip_thread_handle_msg+0x84>)
 800eaaa:	22cf      	movs	r2, #207	@ 0xcf
 800eaac:	4905      	ldr	r1, [pc, #20]	@ (800eac4 <tcpip_thread_handle_msg+0x88>)
 800eaae:	4806      	ldr	r0, [pc, #24]	@ (800eac8 <tcpip_thread_handle_msg+0x8c>)
 800eab0:	f00b fcec 	bl	801a48c <iprintf>
      break;
 800eab4:	bf00      	nop
  }
}
 800eab6:	bf00      	nop
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	0801c930 	.word	0x0801c930
 800eac4:	0801c960 	.word	0x0801c960
 800eac8:	0801c980 	.word	0x0801c980

0800eacc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b086      	sub	sp, #24
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ead8:	481a      	ldr	r0, [pc, #104]	@ (800eb44 <tcpip_inpkt+0x78>)
 800eada:	f00a fe22 	bl	8019722 <sys_mbox_valid>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d105      	bne.n	800eaf0 <tcpip_inpkt+0x24>
 800eae4:	4b18      	ldr	r3, [pc, #96]	@ (800eb48 <tcpip_inpkt+0x7c>)
 800eae6:	22fc      	movs	r2, #252	@ 0xfc
 800eae8:	4918      	ldr	r1, [pc, #96]	@ (800eb4c <tcpip_inpkt+0x80>)
 800eaea:	4819      	ldr	r0, [pc, #100]	@ (800eb50 <tcpip_inpkt+0x84>)
 800eaec:	f00b fcce 	bl	801a48c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800eaf0:	2009      	movs	r0, #9
 800eaf2:	f000 fdb3 	bl	800f65c <memp_malloc>
 800eaf6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e01a      	b.n	800eb3a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2200      	movs	r2, #0
 800eb08:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	68ba      	ldr	r2, [r7, #8]
 800eb14:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eb1c:	6979      	ldr	r1, [r7, #20]
 800eb1e:	4809      	ldr	r0, [pc, #36]	@ (800eb44 <tcpip_inpkt+0x78>)
 800eb20:	f00a fda6 	bl	8019670 <sys_mbox_trypost>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d006      	beq.n	800eb38 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800eb2a:	6979      	ldr	r1, [r7, #20]
 800eb2c:	2009      	movs	r0, #9
 800eb2e:	f000 fe0b 	bl	800f748 <memp_free>
    return ERR_MEM;
 800eb32:	f04f 33ff 	mov.w	r3, #4294967295
 800eb36:	e000      	b.n	800eb3a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800eb38:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20009014 	.word	0x20009014
 800eb48:	0801c930 	.word	0x0801c930
 800eb4c:	0801c9a8 	.word	0x0801c9a8
 800eb50:	0801c980 	.word	0x0801c980

0800eb54 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb64:	f003 0318 	and.w	r3, r3, #24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d006      	beq.n	800eb7a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800eb6c:	4a08      	ldr	r2, [pc, #32]	@ (800eb90 <tcpip_input+0x3c>)
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff ffab 	bl	800eacc <tcpip_inpkt>
 800eb76:	4603      	mov	r3, r0
 800eb78:	e005      	b.n	800eb86 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800eb7a:	4a06      	ldr	r2, [pc, #24]	@ (800eb94 <tcpip_input+0x40>)
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7ff ffa4 	bl	800eacc <tcpip_inpkt>
 800eb84:	4603      	mov	r3, r0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08019481 	.word	0x08019481
 800eb94:	08018269 	.word	0x08018269

0800eb98 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800eba2:	4819      	ldr	r0, [pc, #100]	@ (800ec08 <tcpip_try_callback+0x70>)
 800eba4:	f00a fdbd 	bl	8019722 <sys_mbox_valid>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <tcpip_try_callback+0x24>
 800ebae:	4b17      	ldr	r3, [pc, #92]	@ (800ec0c <tcpip_try_callback+0x74>)
 800ebb0:	f240 125d 	movw	r2, #349	@ 0x15d
 800ebb4:	4916      	ldr	r1, [pc, #88]	@ (800ec10 <tcpip_try_callback+0x78>)
 800ebb6:	4817      	ldr	r0, [pc, #92]	@ (800ec14 <tcpip_try_callback+0x7c>)
 800ebb8:	f00b fc68 	bl	801a48c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ebbc:	2008      	movs	r0, #8
 800ebbe:	f000 fd4d 	bl	800f65c <memp_malloc>
 800ebc2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d102      	bne.n	800ebd0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ebca:	f04f 33ff 	mov.w	r3, #4294967295
 800ebce:	e017      	b.n	800ec00 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ebe2:	68f9      	ldr	r1, [r7, #12]
 800ebe4:	4808      	ldr	r0, [pc, #32]	@ (800ec08 <tcpip_try_callback+0x70>)
 800ebe6:	f00a fd43 	bl	8019670 <sys_mbox_trypost>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d006      	beq.n	800ebfe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ebf0:	68f9      	ldr	r1, [r7, #12]
 800ebf2:	2008      	movs	r0, #8
 800ebf4:	f000 fda8 	bl	800f748 <memp_free>
    return ERR_MEM;
 800ebf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfc:	e000      	b.n	800ec00 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20009014 	.word	0x20009014
 800ec0c:	0801c930 	.word	0x0801c930
 800ec10:	0801c9a8 	.word	0x0801c9a8
 800ec14:	0801c980 	.word	0x0801c980

0800ec18 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af02      	add	r7, sp, #8
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ec22:	f000 f872 	bl	800ed0a <lwip_init>

  tcpip_init_done = initfunc;
 800ec26:	4a17      	ldr	r2, [pc, #92]	@ (800ec84 <tcpip_init+0x6c>)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ec2c:	4a16      	ldr	r2, [pc, #88]	@ (800ec88 <tcpip_init+0x70>)
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ec32:	2106      	movs	r1, #6
 800ec34:	4815      	ldr	r0, [pc, #84]	@ (800ec8c <tcpip_init+0x74>)
 800ec36:	f00a fcf9 	bl	801962c <sys_mbox_new>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d006      	beq.n	800ec4e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ec40:	4b13      	ldr	r3, [pc, #76]	@ (800ec90 <tcpip_init+0x78>)
 800ec42:	f240 2261 	movw	r2, #609	@ 0x261
 800ec46:	4913      	ldr	r1, [pc, #76]	@ (800ec94 <tcpip_init+0x7c>)
 800ec48:	4813      	ldr	r0, [pc, #76]	@ (800ec98 <tcpip_init+0x80>)
 800ec4a:	f00b fc1f 	bl	801a48c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ec4e:	4813      	ldr	r0, [pc, #76]	@ (800ec9c <tcpip_init+0x84>)
 800ec50:	f00a fd86 	bl	8019760 <sys_mutex_new>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d006      	beq.n	800ec68 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ec5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec90 <tcpip_init+0x78>)
 800ec5c:	f240 2265 	movw	r2, #613	@ 0x265
 800ec60:	490f      	ldr	r1, [pc, #60]	@ (800eca0 <tcpip_init+0x88>)
 800ec62:	480d      	ldr	r0, [pc, #52]	@ (800ec98 <tcpip_init+0x80>)
 800ec64:	f00b fc12 	bl	801a48c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ec68:	2300      	movs	r3, #0
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec70:	2200      	movs	r2, #0
 800ec72:	490c      	ldr	r1, [pc, #48]	@ (800eca4 <tcpip_init+0x8c>)
 800ec74:	480c      	ldr	r0, [pc, #48]	@ (800eca8 <tcpip_init+0x90>)
 800ec76:	f00a fdab 	bl	80197d0 <sys_thread_new>
}
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	2000900c 	.word	0x2000900c
 800ec88:	20009010 	.word	0x20009010
 800ec8c:	20009014 	.word	0x20009014
 800ec90:	0801c930 	.word	0x0801c930
 800ec94:	0801c9b8 	.word	0x0801c9b8
 800ec98:	0801c980 	.word	0x0801c980
 800ec9c:	20009018 	.word	0x20009018
 800eca0:	0801c9dc 	.word	0x0801c9dc
 800eca4:	0800e9d5 	.word	0x0800e9d5
 800eca8:	0801ca00 	.word	0x0801ca00

0800ecac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ecb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecba:	021b      	lsls	r3, r3, #8
 800ecbc:	b21a      	sxth	r2, r3
 800ecbe:	88fb      	ldrh	r3, [r7, #6]
 800ecc0:	0a1b      	lsrs	r3, r3, #8
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	b21b      	sxth	r3, r3
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	b21b      	sxth	r3, r3
 800ecca:	b29b      	uxth	r3, r3
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	061a      	lsls	r2, r3, #24
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	021b      	lsls	r3, r3, #8
 800ece8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	0a1b      	lsrs	r3, r3, #8
 800ecf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	0e1b      	lsrs	r3, r3, #24
 800ecfc:	4313      	orrs	r3, r2
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b082      	sub	sp, #8
 800ed0e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ed14:	f00a fd16 	bl	8019744 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ed18:	f000 f8d4 	bl	800eec4 <mem_init>
  memp_init();
 800ed1c:	f000 fc30 	bl	800f580 <memp_init>
  pbuf_init();
  netif_init();
 800ed20:	f000 fd3c 	bl	800f79c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ed24:	f007 ffa4 	bl	8016c70 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ed28:	f001 fe1a 	bl	8010960 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ed2c:	f007 fee6 	bl	8016afc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ed30:	bf00      	nop
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ed42:	4b05      	ldr	r3, [pc, #20]	@ (800ed58 <ptr_to_mem+0x20>)
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	88fb      	ldrh	r3, [r7, #6]
 800ed48:	4413      	add	r3, r2
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	20009688 	.word	0x20009688

0800ed5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ed64:	4b05      	ldr	r3, [pc, #20]	@ (800ed7c <mem_to_ptr+0x20>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	b29b      	uxth	r3, r3
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	20009688 	.word	0x20009688

0800ed80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ed80:	b590      	push	{r4, r7, lr}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ed88:	4b45      	ldr	r3, [pc, #276]	@ (800eea0 <plug_holes+0x120>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d206      	bcs.n	800eda0 <plug_holes+0x20>
 800ed92:	4b44      	ldr	r3, [pc, #272]	@ (800eea4 <plug_holes+0x124>)
 800ed94:	f240 12df 	movw	r2, #479	@ 0x1df
 800ed98:	4943      	ldr	r1, [pc, #268]	@ (800eea8 <plug_holes+0x128>)
 800ed9a:	4844      	ldr	r0, [pc, #272]	@ (800eeac <plug_holes+0x12c>)
 800ed9c:	f00b fb76 	bl	801a48c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eda0:	4b43      	ldr	r3, [pc, #268]	@ (800eeb0 <plug_holes+0x130>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d306      	bcc.n	800edb8 <plug_holes+0x38>
 800edaa:	4b3e      	ldr	r3, [pc, #248]	@ (800eea4 <plug_holes+0x124>)
 800edac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800edb0:	4940      	ldr	r1, [pc, #256]	@ (800eeb4 <plug_holes+0x134>)
 800edb2:	483e      	ldr	r0, [pc, #248]	@ (800eeac <plug_holes+0x12c>)
 800edb4:	f00b fb6a 	bl	801a48c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	791b      	ldrb	r3, [r3, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <plug_holes+0x4e>
 800edc0:	4b38      	ldr	r3, [pc, #224]	@ (800eea4 <plug_holes+0x124>)
 800edc2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800edc6:	493c      	ldr	r1, [pc, #240]	@ (800eeb8 <plug_holes+0x138>)
 800edc8:	4838      	ldr	r0, [pc, #224]	@ (800eeac <plug_holes+0x12c>)
 800edca:	f00b fb5f 	bl	801a48c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800edd6:	d906      	bls.n	800ede6 <plug_holes+0x66>
 800edd8:	4b32      	ldr	r3, [pc, #200]	@ (800eea4 <plug_holes+0x124>)
 800edda:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800edde:	4937      	ldr	r1, [pc, #220]	@ (800eebc <plug_holes+0x13c>)
 800ede0:	4832      	ldr	r0, [pc, #200]	@ (800eeac <plug_holes+0x12c>)
 800ede2:	f00b fb53 	bl	801a48c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff ffa4 	bl	800ed38 <ptr_to_mem>
 800edf0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d024      	beq.n	800ee44 <plug_holes+0xc4>
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	791b      	ldrb	r3, [r3, #4]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d120      	bne.n	800ee44 <plug_holes+0xc4>
 800ee02:	4b2b      	ldr	r3, [pc, #172]	@ (800eeb0 <plug_holes+0x130>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d01b      	beq.n	800ee44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ee0c:	4b2c      	ldr	r3, [pc, #176]	@ (800eec0 <plug_holes+0x140>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d102      	bne.n	800ee1c <plug_holes+0x9c>
      lfree = mem;
 800ee16:	4a2a      	ldr	r2, [pc, #168]	@ (800eec0 <plug_holes+0x140>)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	881a      	ldrh	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ee2c:	d00a      	beq.n	800ee44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff ff80 	bl	800ed38 <ptr_to_mem>
 800ee38:	4604      	mov	r4, r0
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff ff8e 	bl	800ed5c <mem_to_ptr>
 800ee40:	4603      	mov	r3, r0
 800ee42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	885b      	ldrh	r3, [r3, #2]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff ff75 	bl	800ed38 <ptr_to_mem>
 800ee4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d01f      	beq.n	800ee98 <plug_holes+0x118>
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	791b      	ldrb	r3, [r3, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d11b      	bne.n	800ee98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ee60:	4b17      	ldr	r3, [pc, #92]	@ (800eec0 <plug_holes+0x140>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d102      	bne.n	800ee70 <plug_holes+0xf0>
      lfree = pmem;
 800ee6a:	4a15      	ldr	r2, [pc, #84]	@ (800eec0 <plug_holes+0x140>)
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	881a      	ldrh	r2, [r3, #0]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ee80:	d00a      	beq.n	800ee98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff ff56 	bl	800ed38 <ptr_to_mem>
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	68b8      	ldr	r0, [r7, #8]
 800ee90:	f7ff ff64 	bl	800ed5c <mem_to_ptr>
 800ee94:	4603      	mov	r3, r0
 800ee96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ee98:	bf00      	nop
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd90      	pop	{r4, r7, pc}
 800eea0:	20009688 	.word	0x20009688
 800eea4:	0801ca10 	.word	0x0801ca10
 800eea8:	0801ca40 	.word	0x0801ca40
 800eeac:	0801ca58 	.word	0x0801ca58
 800eeb0:	2000968c 	.word	0x2000968c
 800eeb4:	0801ca80 	.word	0x0801ca80
 800eeb8:	0801ca9c 	.word	0x0801ca9c
 800eebc:	0801cab8 	.word	0x0801cab8
 800eec0:	20009694 	.word	0x20009694

0800eec4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800eeca:	4b1f      	ldr	r3, [pc, #124]	@ (800ef48 <mem_init+0x84>)
 800eecc:	3303      	adds	r3, #3
 800eece:	f023 0303 	bic.w	r3, r3, #3
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b1d      	ldr	r3, [pc, #116]	@ (800ef4c <mem_init+0x88>)
 800eed6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800eed8:	4b1c      	ldr	r3, [pc, #112]	@ (800ef4c <mem_init+0x88>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800eee4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800eef2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800eef6:	f7ff ff1f 	bl	800ed38 <ptr_to_mem>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4a14      	ldr	r2, [pc, #80]	@ (800ef50 <mem_init+0x8c>)
 800eefe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ef00:	4b13      	ldr	r3, [pc, #76]	@ (800ef50 <mem_init+0x8c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2201      	movs	r2, #1
 800ef06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ef08:	4b11      	ldr	r3, [pc, #68]	@ (800ef50 <mem_init+0x8c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800ef10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ef12:	4b0f      	ldr	r3, [pc, #60]	@ (800ef50 <mem_init+0x8c>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800ef1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ef1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef4c <mem_init+0x88>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a0c      	ldr	r2, [pc, #48]	@ (800ef54 <mem_init+0x90>)
 800ef22:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ef24:	480c      	ldr	r0, [pc, #48]	@ (800ef58 <mem_init+0x94>)
 800ef26:	f00a fc1b 	bl	8019760 <sys_mutex_new>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d006      	beq.n	800ef3e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ef30:	4b0a      	ldr	r3, [pc, #40]	@ (800ef5c <mem_init+0x98>)
 800ef32:	f240 221f 	movw	r2, #543	@ 0x21f
 800ef36:	490a      	ldr	r1, [pc, #40]	@ (800ef60 <mem_init+0x9c>)
 800ef38:	480a      	ldr	r0, [pc, #40]	@ (800ef64 <mem_init+0xa0>)
 800ef3a:	f00b faa7 	bl	801a48c <iprintf>
  }
}
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20009034 	.word	0x20009034
 800ef4c:	20009688 	.word	0x20009688
 800ef50:	2000968c 	.word	0x2000968c
 800ef54:	20009694 	.word	0x20009694
 800ef58:	20009690 	.word	0x20009690
 800ef5c:	0801ca10 	.word	0x0801ca10
 800ef60:	0801cae4 	.word	0x0801cae4
 800ef64:	0801ca58 	.word	0x0801ca58

0800ef68 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7ff fef3 	bl	800ed5c <mem_to_ptr>
 800ef76:	4603      	mov	r3, r0
 800ef78:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff feda 	bl	800ed38 <ptr_to_mem>
 800ef84:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	885b      	ldrh	r3, [r3, #2]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff fed4 	bl	800ed38 <ptr_to_mem>
 800ef90:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ef9a:	d818      	bhi.n	800efce <mem_link_valid+0x66>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	885b      	ldrh	r3, [r3, #2]
 800efa0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800efa4:	d813      	bhi.n	800efce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800efaa:	8afa      	ldrh	r2, [r7, #22]
 800efac:	429a      	cmp	r2, r3
 800efae:	d004      	beq.n	800efba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	8afa      	ldrh	r2, [r7, #22]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d109      	bne.n	800efce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efba:	4b08      	ldr	r3, [pc, #32]	@ (800efdc <mem_link_valid+0x74>)
 800efbc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d006      	beq.n	800efd2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	885b      	ldrh	r3, [r3, #2]
 800efc8:	8afa      	ldrh	r2, [r7, #22]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d001      	beq.n	800efd2 <mem_link_valid+0x6a>
    return 0;
 800efce:	2300      	movs	r3, #0
 800efd0:	e000      	b.n	800efd4 <mem_link_valid+0x6c>
  }
  return 1;
 800efd2:	2301      	movs	r3, #1
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3718      	adds	r7, #24
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	2000968c 	.word	0x2000968c

0800efe0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b088      	sub	sp, #32
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d070      	beq.n	800f0d0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f003 0303 	and.w	r3, r3, #3
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00d      	beq.n	800f014 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800eff8:	4b37      	ldr	r3, [pc, #220]	@ (800f0d8 <mem_free+0xf8>)
 800effa:	f240 2273 	movw	r2, #627	@ 0x273
 800effe:	4937      	ldr	r1, [pc, #220]	@ (800f0dc <mem_free+0xfc>)
 800f000:	4837      	ldr	r0, [pc, #220]	@ (800f0e0 <mem_free+0x100>)
 800f002:	f00b fa43 	bl	801a48c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f006:	f00a fc09 	bl	801981c <sys_arch_protect>
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f00a fc13 	bl	8019838 <sys_arch_unprotect>
    return;
 800f012:	e05e      	b.n	800f0d2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3b08      	subs	r3, #8
 800f018:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f01a:	4b32      	ldr	r3, [pc, #200]	@ (800f0e4 <mem_free+0x104>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	69fa      	ldr	r2, [r7, #28]
 800f020:	429a      	cmp	r2, r3
 800f022:	d306      	bcc.n	800f032 <mem_free+0x52>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f103 020c 	add.w	r2, r3, #12
 800f02a:	4b2f      	ldr	r3, [pc, #188]	@ (800f0e8 <mem_free+0x108>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d90d      	bls.n	800f04e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f032:	4b29      	ldr	r3, [pc, #164]	@ (800f0d8 <mem_free+0xf8>)
 800f034:	f240 227f 	movw	r2, #639	@ 0x27f
 800f038:	492c      	ldr	r1, [pc, #176]	@ (800f0ec <mem_free+0x10c>)
 800f03a:	4829      	ldr	r0, [pc, #164]	@ (800f0e0 <mem_free+0x100>)
 800f03c:	f00b fa26 	bl	801a48c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f040:	f00a fbec 	bl	801981c <sys_arch_protect>
 800f044:	6138      	str	r0, [r7, #16]
 800f046:	6938      	ldr	r0, [r7, #16]
 800f048:	f00a fbf6 	bl	8019838 <sys_arch_unprotect>
    return;
 800f04c:	e041      	b.n	800f0d2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f04e:	4828      	ldr	r0, [pc, #160]	@ (800f0f0 <mem_free+0x110>)
 800f050:	f00a fba2 	bl	8019798 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	791b      	ldrb	r3, [r3, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d110      	bne.n	800f07e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f05c:	4b1e      	ldr	r3, [pc, #120]	@ (800f0d8 <mem_free+0xf8>)
 800f05e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f062:	4924      	ldr	r1, [pc, #144]	@ (800f0f4 <mem_free+0x114>)
 800f064:	481e      	ldr	r0, [pc, #120]	@ (800f0e0 <mem_free+0x100>)
 800f066:	f00b fa11 	bl	801a48c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f06a:	4821      	ldr	r0, [pc, #132]	@ (800f0f0 <mem_free+0x110>)
 800f06c:	f00a fba3 	bl	80197b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f070:	f00a fbd4 	bl	801981c <sys_arch_protect>
 800f074:	6178      	str	r0, [r7, #20]
 800f076:	6978      	ldr	r0, [r7, #20]
 800f078:	f00a fbde 	bl	8019838 <sys_arch_unprotect>
    return;
 800f07c:	e029      	b.n	800f0d2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f07e:	69f8      	ldr	r0, [r7, #28]
 800f080:	f7ff ff72 	bl	800ef68 <mem_link_valid>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d110      	bne.n	800f0ac <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f08a:	4b13      	ldr	r3, [pc, #76]	@ (800f0d8 <mem_free+0xf8>)
 800f08c:	f240 2295 	movw	r2, #661	@ 0x295
 800f090:	4919      	ldr	r1, [pc, #100]	@ (800f0f8 <mem_free+0x118>)
 800f092:	4813      	ldr	r0, [pc, #76]	@ (800f0e0 <mem_free+0x100>)
 800f094:	f00b f9fa 	bl	801a48c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f098:	4815      	ldr	r0, [pc, #84]	@ (800f0f0 <mem_free+0x110>)
 800f09a:	f00a fb8c 	bl	80197b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f09e:	f00a fbbd 	bl	801981c <sys_arch_protect>
 800f0a2:	61b8      	str	r0, [r7, #24]
 800f0a4:	69b8      	ldr	r0, [r7, #24]
 800f0a6:	f00a fbc7 	bl	8019838 <sys_arch_unprotect>
    return;
 800f0aa:	e012      	b.n	800f0d2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f0b2:	4b12      	ldr	r3, [pc, #72]	@ (800f0fc <mem_free+0x11c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d202      	bcs.n	800f0c2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f0bc:	4a0f      	ldr	r2, [pc, #60]	@ (800f0fc <mem_free+0x11c>)
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f0c2:	69f8      	ldr	r0, [r7, #28]
 800f0c4:	f7ff fe5c 	bl	800ed80 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f0c8:	4809      	ldr	r0, [pc, #36]	@ (800f0f0 <mem_free+0x110>)
 800f0ca:	f00a fb74 	bl	80197b6 <sys_mutex_unlock>
 800f0ce:	e000      	b.n	800f0d2 <mem_free+0xf2>
    return;
 800f0d0:	bf00      	nop
}
 800f0d2:	3720      	adds	r7, #32
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	0801ca10 	.word	0x0801ca10
 800f0dc:	0801cb00 	.word	0x0801cb00
 800f0e0:	0801ca58 	.word	0x0801ca58
 800f0e4:	20009688 	.word	0x20009688
 800f0e8:	2000968c 	.word	0x2000968c
 800f0ec:	0801cb24 	.word	0x0801cb24
 800f0f0:	20009690 	.word	0x20009690
 800f0f4:	0801cb40 	.word	0x0801cb40
 800f0f8:	0801cb68 	.word	0x0801cb68
 800f0fc:	20009694 	.word	0x20009694

0800f100 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f10c:	887b      	ldrh	r3, [r7, #2]
 800f10e:	3303      	adds	r3, #3
 800f110:	b29b      	uxth	r3, r3
 800f112:	f023 0303 	bic.w	r3, r3, #3
 800f116:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f118:	8bfb      	ldrh	r3, [r7, #30]
 800f11a:	2b0b      	cmp	r3, #11
 800f11c:	d801      	bhi.n	800f122 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f11e:	230c      	movs	r3, #12
 800f120:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f122:	8bfb      	ldrh	r3, [r7, #30]
 800f124:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f128:	d803      	bhi.n	800f132 <mem_trim+0x32>
 800f12a:	8bfa      	ldrh	r2, [r7, #30]
 800f12c:	887b      	ldrh	r3, [r7, #2]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d201      	bcs.n	800f136 <mem_trim+0x36>
    return NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	e0d8      	b.n	800f2e8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f136:	4b6e      	ldr	r3, [pc, #440]	@ (800f2f0 <mem_trim+0x1f0>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d304      	bcc.n	800f14a <mem_trim+0x4a>
 800f140:	4b6c      	ldr	r3, [pc, #432]	@ (800f2f4 <mem_trim+0x1f4>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	429a      	cmp	r2, r3
 800f148:	d306      	bcc.n	800f158 <mem_trim+0x58>
 800f14a:	4b6b      	ldr	r3, [pc, #428]	@ (800f2f8 <mem_trim+0x1f8>)
 800f14c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f150:	496a      	ldr	r1, [pc, #424]	@ (800f2fc <mem_trim+0x1fc>)
 800f152:	486b      	ldr	r0, [pc, #428]	@ (800f300 <mem_trim+0x200>)
 800f154:	f00b f99a 	bl	801a48c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f158:	4b65      	ldr	r3, [pc, #404]	@ (800f2f0 <mem_trim+0x1f0>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d304      	bcc.n	800f16c <mem_trim+0x6c>
 800f162:	4b64      	ldr	r3, [pc, #400]	@ (800f2f4 <mem_trim+0x1f4>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d307      	bcc.n	800f17c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f16c:	f00a fb56 	bl	801981c <sys_arch_protect>
 800f170:	60b8      	str	r0, [r7, #8]
 800f172:	68b8      	ldr	r0, [r7, #8]
 800f174:	f00a fb60 	bl	8019838 <sys_arch_unprotect>
    return rmem;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	e0b5      	b.n	800f2e8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3b08      	subs	r3, #8
 800f180:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f182:	69b8      	ldr	r0, [r7, #24]
 800f184:	f7ff fdea 	bl	800ed5c <mem_to_ptr>
 800f188:	4603      	mov	r3, r0
 800f18a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	881a      	ldrh	r2, [r3, #0]
 800f190:	8afb      	ldrh	r3, [r7, #22]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	b29b      	uxth	r3, r3
 800f196:	3b08      	subs	r3, #8
 800f198:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f19a:	8bfa      	ldrh	r2, [r7, #30]
 800f19c:	8abb      	ldrh	r3, [r7, #20]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d906      	bls.n	800f1b0 <mem_trim+0xb0>
 800f1a2:	4b55      	ldr	r3, [pc, #340]	@ (800f2f8 <mem_trim+0x1f8>)
 800f1a4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f1a8:	4956      	ldr	r1, [pc, #344]	@ (800f304 <mem_trim+0x204>)
 800f1aa:	4855      	ldr	r0, [pc, #340]	@ (800f300 <mem_trim+0x200>)
 800f1ac:	f00b f96e 	bl	801a48c <iprintf>
  if (newsize > size) {
 800f1b0:	8bfa      	ldrh	r2, [r7, #30]
 800f1b2:	8abb      	ldrh	r3, [r7, #20]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d901      	bls.n	800f1bc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e095      	b.n	800f2e8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f1bc:	8bfa      	ldrh	r2, [r7, #30]
 800f1be:	8abb      	ldrh	r3, [r7, #20]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d101      	bne.n	800f1c8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	e08f      	b.n	800f2e8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f1c8:	484f      	ldr	r0, [pc, #316]	@ (800f308 <mem_trim+0x208>)
 800f1ca:	f00a fae5 	bl	8019798 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fdb0 	bl	800ed38 <ptr_to_mem>
 800f1d8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	791b      	ldrb	r3, [r3, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d13f      	bne.n	800f262 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f1ea:	d106      	bne.n	800f1fa <mem_trim+0xfa>
 800f1ec:	4b42      	ldr	r3, [pc, #264]	@ (800f2f8 <mem_trim+0x1f8>)
 800f1ee:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f1f2:	4946      	ldr	r1, [pc, #280]	@ (800f30c <mem_trim+0x20c>)
 800f1f4:	4842      	ldr	r0, [pc, #264]	@ (800f300 <mem_trim+0x200>)
 800f1f6:	f00b f949 	bl	801a48c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f200:	8afa      	ldrh	r2, [r7, #22]
 800f202:	8bfb      	ldrh	r3, [r7, #30]
 800f204:	4413      	add	r3, r2
 800f206:	b29b      	uxth	r3, r3
 800f208:	3308      	adds	r3, #8
 800f20a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f20c:	4b40      	ldr	r3, [pc, #256]	@ (800f310 <mem_trim+0x210>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	429a      	cmp	r2, r3
 800f214:	d106      	bne.n	800f224 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f216:	89fb      	ldrh	r3, [r7, #14]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fd8d 	bl	800ed38 <ptr_to_mem>
 800f21e:	4603      	mov	r3, r0
 800f220:	4a3b      	ldr	r2, [pc, #236]	@ (800f310 <mem_trim+0x210>)
 800f222:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f224:	89fb      	ldrh	r3, [r7, #14]
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fd86 	bl	800ed38 <ptr_to_mem>
 800f22c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	2200      	movs	r2, #0
 800f232:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	89ba      	ldrh	r2, [r7, #12]
 800f238:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	8afa      	ldrh	r2, [r7, #22]
 800f23e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	89fa      	ldrh	r2, [r7, #14]
 800f244:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f24e:	d047      	beq.n	800f2e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	4618      	mov	r0, r3
 800f256:	f7ff fd6f 	bl	800ed38 <ptr_to_mem>
 800f25a:	4602      	mov	r2, r0
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	8053      	strh	r3, [r2, #2]
 800f260:	e03e      	b.n	800f2e0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f262:	8bfb      	ldrh	r3, [r7, #30]
 800f264:	f103 0214 	add.w	r2, r3, #20
 800f268:	8abb      	ldrh	r3, [r7, #20]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d838      	bhi.n	800f2e0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f26e:	8afa      	ldrh	r2, [r7, #22]
 800f270:	8bfb      	ldrh	r3, [r7, #30]
 800f272:	4413      	add	r3, r2
 800f274:	b29b      	uxth	r3, r3
 800f276:	3308      	adds	r3, #8
 800f278:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	881b      	ldrh	r3, [r3, #0]
 800f27e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f282:	d106      	bne.n	800f292 <mem_trim+0x192>
 800f284:	4b1c      	ldr	r3, [pc, #112]	@ (800f2f8 <mem_trim+0x1f8>)
 800f286:	f240 3216 	movw	r2, #790	@ 0x316
 800f28a:	4920      	ldr	r1, [pc, #128]	@ (800f30c <mem_trim+0x20c>)
 800f28c:	481c      	ldr	r0, [pc, #112]	@ (800f300 <mem_trim+0x200>)
 800f28e:	f00b f8fd 	bl	801a48c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f292:	89fb      	ldrh	r3, [r7, #14]
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fd4f 	bl	800ed38 <ptr_to_mem>
 800f29a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f29c:	4b1c      	ldr	r3, [pc, #112]	@ (800f310 <mem_trim+0x210>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d202      	bcs.n	800f2ac <mem_trim+0x1ac>
      lfree = mem2;
 800f2a6:	4a1a      	ldr	r2, [pc, #104]	@ (800f310 <mem_trim+0x210>)
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	881a      	ldrh	r2, [r3, #0]
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	8afa      	ldrh	r2, [r7, #22]
 800f2be:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	89fa      	ldrh	r2, [r7, #14]
 800f2c4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f2ce:	d007      	beq.n	800f2e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7ff fd2f 	bl	800ed38 <ptr_to_mem>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	89fb      	ldrh	r3, [r7, #14]
 800f2de:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2e0:	4809      	ldr	r0, [pc, #36]	@ (800f308 <mem_trim+0x208>)
 800f2e2:	f00a fa68 	bl	80197b6 <sys_mutex_unlock>
  return rmem;
 800f2e6:	687b      	ldr	r3, [r7, #4]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3720      	adds	r7, #32
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	20009688 	.word	0x20009688
 800f2f4:	2000968c 	.word	0x2000968c
 800f2f8:	0801ca10 	.word	0x0801ca10
 800f2fc:	0801cb9c 	.word	0x0801cb9c
 800f300:	0801ca58 	.word	0x0801ca58
 800f304:	0801cbb4 	.word	0x0801cbb4
 800f308:	20009690 	.word	0x20009690
 800f30c:	0801cbd4 	.word	0x0801cbd4
 800f310:	20009694 	.word	0x20009694

0800f314 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b088      	sub	sp, #32
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f31e:	88fb      	ldrh	r3, [r7, #6]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d101      	bne.n	800f328 <mem_malloc+0x14>
    return NULL;
 800f324:	2300      	movs	r3, #0
 800f326:	e0e2      	b.n	800f4ee <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f328:	88fb      	ldrh	r3, [r7, #6]
 800f32a:	3303      	adds	r3, #3
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	f023 0303 	bic.w	r3, r3, #3
 800f332:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f334:	8bbb      	ldrh	r3, [r7, #28]
 800f336:	2b0b      	cmp	r3, #11
 800f338:	d801      	bhi.n	800f33e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f33a:	230c      	movs	r3, #12
 800f33c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f33e:	8bbb      	ldrh	r3, [r7, #28]
 800f340:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f344:	d803      	bhi.n	800f34e <mem_malloc+0x3a>
 800f346:	8bba      	ldrh	r2, [r7, #28]
 800f348:	88fb      	ldrh	r3, [r7, #6]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d201      	bcs.n	800f352 <mem_malloc+0x3e>
    return NULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	e0cd      	b.n	800f4ee <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f352:	4869      	ldr	r0, [pc, #420]	@ (800f4f8 <mem_malloc+0x1e4>)
 800f354:	f00a fa20 	bl	8019798 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f358:	4b68      	ldr	r3, [pc, #416]	@ (800f4fc <mem_malloc+0x1e8>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff fcfd 	bl	800ed5c <mem_to_ptr>
 800f362:	4603      	mov	r3, r0
 800f364:	83fb      	strh	r3, [r7, #30]
 800f366:	e0b7      	b.n	800f4d8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f368:	8bfb      	ldrh	r3, [r7, #30]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff fce4 	bl	800ed38 <ptr_to_mem>
 800f370:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	791b      	ldrb	r3, [r3, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f040 80a7 	bne.w	800f4ca <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	461a      	mov	r2, r3
 800f382:	8bfb      	ldrh	r3, [r7, #30]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	f1a3 0208 	sub.w	r2, r3, #8
 800f38a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f38c:	429a      	cmp	r2, r3
 800f38e:	f0c0 809c 	bcc.w	800f4ca <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	461a      	mov	r2, r3
 800f398:	8bfb      	ldrh	r3, [r7, #30]
 800f39a:	1ad3      	subs	r3, r2, r3
 800f39c:	f1a3 0208 	sub.w	r2, r3, #8
 800f3a0:	8bbb      	ldrh	r3, [r7, #28]
 800f3a2:	3314      	adds	r3, #20
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d333      	bcc.n	800f410 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f3a8:	8bfa      	ldrh	r2, [r7, #30]
 800f3aa:	8bbb      	ldrh	r3, [r7, #28]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	3308      	adds	r3, #8
 800f3b2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f3b4:	8a7b      	ldrh	r3, [r7, #18]
 800f3b6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f3ba:	d106      	bne.n	800f3ca <mem_malloc+0xb6>
 800f3bc:	4b50      	ldr	r3, [pc, #320]	@ (800f500 <mem_malloc+0x1ec>)
 800f3be:	f240 3287 	movw	r2, #903	@ 0x387
 800f3c2:	4950      	ldr	r1, [pc, #320]	@ (800f504 <mem_malloc+0x1f0>)
 800f3c4:	4850      	ldr	r0, [pc, #320]	@ (800f508 <mem_malloc+0x1f4>)
 800f3c6:	f00b f861 	bl	801a48c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f3ca:	8a7b      	ldrh	r3, [r7, #18]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fcb3 	bl	800ed38 <ptr_to_mem>
 800f3d2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	881a      	ldrh	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	8bfa      	ldrh	r2, [r7, #30]
 800f3e6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	8a7a      	ldrh	r2, [r7, #18]
 800f3ec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	881b      	ldrh	r3, [r3, #0]
 800f3f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f3fc:	d00b      	beq.n	800f416 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fc98 	bl	800ed38 <ptr_to_mem>
 800f408:	4602      	mov	r2, r0
 800f40a:	8a7b      	ldrh	r3, [r7, #18]
 800f40c:	8053      	strh	r3, [r2, #2]
 800f40e:	e002      	b.n	800f416 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	2201      	movs	r2, #1
 800f414:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f416:	4b39      	ldr	r3, [pc, #228]	@ (800f4fc <mem_malloc+0x1e8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d127      	bne.n	800f470 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f420:	4b36      	ldr	r3, [pc, #216]	@ (800f4fc <mem_malloc+0x1e8>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f426:	e005      	b.n	800f434 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	881b      	ldrh	r3, [r3, #0]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fc83 	bl	800ed38 <ptr_to_mem>
 800f432:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	791b      	ldrb	r3, [r3, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d004      	beq.n	800f446 <mem_malloc+0x132>
 800f43c:	4b33      	ldr	r3, [pc, #204]	@ (800f50c <mem_malloc+0x1f8>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	429a      	cmp	r2, r3
 800f444:	d1f0      	bne.n	800f428 <mem_malloc+0x114>
          }
          lfree = cur;
 800f446:	4a2d      	ldr	r2, [pc, #180]	@ (800f4fc <mem_malloc+0x1e8>)
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f44c:	4b2b      	ldr	r3, [pc, #172]	@ (800f4fc <mem_malloc+0x1e8>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	4b2e      	ldr	r3, [pc, #184]	@ (800f50c <mem_malloc+0x1f8>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	429a      	cmp	r2, r3
 800f456:	d00b      	beq.n	800f470 <mem_malloc+0x15c>
 800f458:	4b28      	ldr	r3, [pc, #160]	@ (800f4fc <mem_malloc+0x1e8>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	791b      	ldrb	r3, [r3, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d006      	beq.n	800f470 <mem_malloc+0x15c>
 800f462:	4b27      	ldr	r3, [pc, #156]	@ (800f500 <mem_malloc+0x1ec>)
 800f464:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f468:	4929      	ldr	r1, [pc, #164]	@ (800f510 <mem_malloc+0x1fc>)
 800f46a:	4827      	ldr	r0, [pc, #156]	@ (800f508 <mem_malloc+0x1f4>)
 800f46c:	f00b f80e 	bl	801a48c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f470:	4821      	ldr	r0, [pc, #132]	@ (800f4f8 <mem_malloc+0x1e4>)
 800f472:	f00a f9a0 	bl	80197b6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f476:	8bba      	ldrh	r2, [r7, #28]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	4413      	add	r3, r2
 800f47c:	3308      	adds	r3, #8
 800f47e:	4a23      	ldr	r2, [pc, #140]	@ (800f50c <mem_malloc+0x1f8>)
 800f480:	6812      	ldr	r2, [r2, #0]
 800f482:	4293      	cmp	r3, r2
 800f484:	d906      	bls.n	800f494 <mem_malloc+0x180>
 800f486:	4b1e      	ldr	r3, [pc, #120]	@ (800f500 <mem_malloc+0x1ec>)
 800f488:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f48c:	4921      	ldr	r1, [pc, #132]	@ (800f514 <mem_malloc+0x200>)
 800f48e:	481e      	ldr	r0, [pc, #120]	@ (800f508 <mem_malloc+0x1f4>)
 800f490:	f00a fffc 	bl	801a48c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	f003 0303 	and.w	r3, r3, #3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d006      	beq.n	800f4ac <mem_malloc+0x198>
 800f49e:	4b18      	ldr	r3, [pc, #96]	@ (800f500 <mem_malloc+0x1ec>)
 800f4a0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f4a4:	491c      	ldr	r1, [pc, #112]	@ (800f518 <mem_malloc+0x204>)
 800f4a6:	4818      	ldr	r0, [pc, #96]	@ (800f508 <mem_malloc+0x1f4>)
 800f4a8:	f00a fff0 	bl	801a48c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f003 0303 	and.w	r3, r3, #3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d006      	beq.n	800f4c4 <mem_malloc+0x1b0>
 800f4b6:	4b12      	ldr	r3, [pc, #72]	@ (800f500 <mem_malloc+0x1ec>)
 800f4b8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f4bc:	4917      	ldr	r1, [pc, #92]	@ (800f51c <mem_malloc+0x208>)
 800f4be:	4812      	ldr	r0, [pc, #72]	@ (800f508 <mem_malloc+0x1f4>)
 800f4c0:	f00a ffe4 	bl	801a48c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	e011      	b.n	800f4ee <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f4ca:	8bfb      	ldrh	r3, [r7, #30]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7ff fc33 	bl	800ed38 <ptr_to_mem>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f4d8:	8bfa      	ldrh	r2, [r7, #30]
 800f4da:	8bbb      	ldrh	r3, [r7, #28]
 800f4dc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	f4ff af41 	bcc.w	800f368 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f4e6:	4804      	ldr	r0, [pc, #16]	@ (800f4f8 <mem_malloc+0x1e4>)
 800f4e8:	f00a f965 	bl	80197b6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f4ec:	2300      	movs	r3, #0
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3720      	adds	r7, #32
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20009690 	.word	0x20009690
 800f4fc:	20009694 	.word	0x20009694
 800f500:	0801ca10 	.word	0x0801ca10
 800f504:	0801cbd4 	.word	0x0801cbd4
 800f508:	0801ca58 	.word	0x0801ca58
 800f50c:	2000968c 	.word	0x2000968c
 800f510:	0801cbe8 	.word	0x0801cbe8
 800f514:	0801cc04 	.word	0x0801cc04
 800f518:	0801cc34 	.word	0x0801cc34
 800f51c:	0801cc64 	.word	0x0801cc64

0800f520 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	3303      	adds	r3, #3
 800f536:	f023 0303 	bic.w	r3, r3, #3
 800f53a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f53c:	2300      	movs	r3, #0
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	e011      	b.n	800f566 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	68ba      	ldr	r2, [r7, #8]
 800f552:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	4413      	add	r3, r2
 800f55e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	60fb      	str	r3, [r7, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	885b      	ldrh	r3, [r3, #2]
 800f56a:	461a      	mov	r2, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4293      	cmp	r3, r2
 800f570:	dbe7      	blt.n	800f542 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f586:	2300      	movs	r3, #0
 800f588:	80fb      	strh	r3, [r7, #6]
 800f58a:	e009      	b.n	800f5a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f58c:	88fb      	ldrh	r3, [r7, #6]
 800f58e:	4a08      	ldr	r2, [pc, #32]	@ (800f5b0 <memp_init+0x30>)
 800f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff ffc3 	bl	800f520 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f59a:	88fb      	ldrh	r3, [r7, #6]
 800f59c:	3301      	adds	r3, #1
 800f59e:	80fb      	strh	r3, [r7, #6]
 800f5a0:	88fb      	ldrh	r3, [r7, #6]
 800f5a2:	2b0c      	cmp	r3, #12
 800f5a4:	d9f2      	bls.n	800f58c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f5a6:	bf00      	nop
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	0801f4c0 	.word	0x0801f4c0

0800f5b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f5bc:	f00a f92e 	bl	801981c <sys_arch_protect>
 800f5c0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d015      	beq.n	800f5fc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	6812      	ldr	r2, [r2, #0]
 800f5d8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	f003 0303 	and.w	r3, r3, #3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d006      	beq.n	800f5f2 <do_memp_malloc_pool+0x3e>
 800f5e4:	4b09      	ldr	r3, [pc, #36]	@ (800f60c <do_memp_malloc_pool+0x58>)
 800f5e6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f5ea:	4909      	ldr	r1, [pc, #36]	@ (800f610 <do_memp_malloc_pool+0x5c>)
 800f5ec:	4809      	ldr	r0, [pc, #36]	@ (800f614 <do_memp_malloc_pool+0x60>)
 800f5ee:	f00a ff4d 	bl	801a48c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f00a f920 	bl	8019838 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	e003      	b.n	800f604 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f00a f91b 	bl	8019838 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	0801cc88 	.word	0x0801cc88
 800f610:	0801ccb8 	.word	0x0801ccb8
 800f614:	0801ccdc 	.word	0x0801ccdc

0800f618 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d106      	bne.n	800f634 <memp_malloc_pool+0x1c>
 800f626:	4b0a      	ldr	r3, [pc, #40]	@ (800f650 <memp_malloc_pool+0x38>)
 800f628:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800f62c:	4909      	ldr	r1, [pc, #36]	@ (800f654 <memp_malloc_pool+0x3c>)
 800f62e:	480a      	ldr	r0, [pc, #40]	@ (800f658 <memp_malloc_pool+0x40>)
 800f630:	f00a ff2c 	bl	801a48c <iprintf>
  if (desc == NULL) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <memp_malloc_pool+0x26>
    return NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	e003      	b.n	800f646 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ffb8 	bl	800f5b4 <do_memp_malloc_pool>
 800f644:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	0801cc88 	.word	0x0801cc88
 800f654:	0801cd04 	.word	0x0801cd04
 800f658:	0801ccdc 	.word	0x0801ccdc

0800f65c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	4603      	mov	r3, r0
 800f664:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	2b0c      	cmp	r3, #12
 800f66a:	d908      	bls.n	800f67e <memp_malloc+0x22>
 800f66c:	4b0a      	ldr	r3, [pc, #40]	@ (800f698 <memp_malloc+0x3c>)
 800f66e:	f240 1257 	movw	r2, #343	@ 0x157
 800f672:	490a      	ldr	r1, [pc, #40]	@ (800f69c <memp_malloc+0x40>)
 800f674:	480a      	ldr	r0, [pc, #40]	@ (800f6a0 <memp_malloc+0x44>)
 800f676:	f00a ff09 	bl	801a48c <iprintf>
 800f67a:	2300      	movs	r3, #0
 800f67c:	e008      	b.n	800f690 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	4a08      	ldr	r2, [pc, #32]	@ (800f6a4 <memp_malloc+0x48>)
 800f682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff ff94 	bl	800f5b4 <do_memp_malloc_pool>
 800f68c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f68e:	68fb      	ldr	r3, [r7, #12]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	0801cc88 	.word	0x0801cc88
 800f69c:	0801cd18 	.word	0x0801cd18
 800f6a0:	0801ccdc 	.word	0x0801ccdc
 800f6a4:	0801f4c0 	.word	0x0801f4c0

0800f6a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	f003 0303 	and.w	r3, r3, #3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d006      	beq.n	800f6ca <do_memp_free_pool+0x22>
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f4 <do_memp_free_pool+0x4c>)
 800f6be:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f6c2:	490d      	ldr	r1, [pc, #52]	@ (800f6f8 <do_memp_free_pool+0x50>)
 800f6c4:	480d      	ldr	r0, [pc, #52]	@ (800f6fc <do_memp_free_pool+0x54>)
 800f6c6:	f00a fee1 	bl	801a48c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f6ce:	f00a f8a5 	bl	801981c <sys_arch_protect>
 800f6d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f6e6:	68b8      	ldr	r0, [r7, #8]
 800f6e8:	f00a f8a6 	bl	8019838 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f6ec:	bf00      	nop
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	0801cc88 	.word	0x0801cc88
 800f6f8:	0801cd38 	.word	0x0801cd38
 800f6fc:	0801ccdc 	.word	0x0801ccdc

0800f700 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d106      	bne.n	800f71e <memp_free_pool+0x1e>
 800f710:	4b0a      	ldr	r3, [pc, #40]	@ (800f73c <memp_free_pool+0x3c>)
 800f712:	f240 1295 	movw	r2, #405	@ 0x195
 800f716:	490a      	ldr	r1, [pc, #40]	@ (800f740 <memp_free_pool+0x40>)
 800f718:	480a      	ldr	r0, [pc, #40]	@ (800f744 <memp_free_pool+0x44>)
 800f71a:	f00a feb7 	bl	801a48c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d007      	beq.n	800f734 <memp_free_pool+0x34>
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d004      	beq.n	800f734 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f72a:	6839      	ldr	r1, [r7, #0]
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff ffbb 	bl	800f6a8 <do_memp_free_pool>
 800f732:	e000      	b.n	800f736 <memp_free_pool+0x36>
    return;
 800f734:	bf00      	nop
}
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	0801cc88 	.word	0x0801cc88
 800f740:	0801cd04 	.word	0x0801cd04
 800f744:	0801ccdc 	.word	0x0801ccdc

0800f748 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	6039      	str	r1, [r7, #0]
 800f752:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f754:	79fb      	ldrb	r3, [r7, #7]
 800f756:	2b0c      	cmp	r3, #12
 800f758:	d907      	bls.n	800f76a <memp_free+0x22>
 800f75a:	4b0c      	ldr	r3, [pc, #48]	@ (800f78c <memp_free+0x44>)
 800f75c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800f760:	490b      	ldr	r1, [pc, #44]	@ (800f790 <memp_free+0x48>)
 800f762:	480c      	ldr	r0, [pc, #48]	@ (800f794 <memp_free+0x4c>)
 800f764:	f00a fe92 	bl	801a48c <iprintf>
 800f768:	e00c      	b.n	800f784 <memp_free+0x3c>

  if (mem == NULL) {
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d008      	beq.n	800f782 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	4a09      	ldr	r2, [pc, #36]	@ (800f798 <memp_free+0x50>)
 800f774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f778:	6839      	ldr	r1, [r7, #0]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7ff ff94 	bl	800f6a8 <do_memp_free_pool>
 800f780:	e000      	b.n	800f784 <memp_free+0x3c>
    return;
 800f782:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	0801cc88 	.word	0x0801cc88
 800f790:	0801cd58 	.word	0x0801cd58
 800f794:	0801ccdc 	.word	0x0801ccdc
 800f798:	0801f4c0 	.word	0x0801f4c0

0800f79c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f79c:	b480      	push	{r7}
 800f79e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f7a0:	bf00      	nop
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
	...

0800f7ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
 800f7b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <netif_add+0x26>
 800f7c0:	4b57      	ldr	r3, [pc, #348]	@ (800f920 <netif_add+0x174>)
 800f7c2:	f240 1227 	movw	r2, #295	@ 0x127
 800f7c6:	4957      	ldr	r1, [pc, #348]	@ (800f924 <netif_add+0x178>)
 800f7c8:	4857      	ldr	r0, [pc, #348]	@ (800f928 <netif_add+0x17c>)
 800f7ca:	f00a fe5f 	bl	801a48c <iprintf>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e0a2      	b.n	800f918 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <netif_add+0x3e>
 800f7d8:	4b51      	ldr	r3, [pc, #324]	@ (800f920 <netif_add+0x174>)
 800f7da:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800f7de:	4953      	ldr	r1, [pc, #332]	@ (800f92c <netif_add+0x180>)
 800f7e0:	4851      	ldr	r0, [pc, #324]	@ (800f928 <netif_add+0x17c>)
 800f7e2:	f00a fe53 	bl	801a48c <iprintf>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e096      	b.n	800f918 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f7f0:	4b4f      	ldr	r3, [pc, #316]	@ (800f930 <netif_add+0x184>)
 800f7f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f7fa:	4b4d      	ldr	r3, [pc, #308]	@ (800f930 <netif_add+0x184>)
 800f7fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f804:	4b4a      	ldr	r3, [pc, #296]	@ (800f930 <netif_add+0x184>)
 800f806:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2200      	movs	r2, #0
 800f80c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2200      	movs	r2, #0
 800f818:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	4a45      	ldr	r2, [pc, #276]	@ (800f934 <netif_add+0x188>)
 800f81e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6a3a      	ldr	r2, [r7, #32]
 800f838:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f83a:	4b3f      	ldr	r3, [pc, #252]	@ (800f938 <netif_add+0x18c>)
 800f83c:	781a      	ldrb	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f848:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68b9      	ldr	r1, [r7, #8]
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 f913 	bl	800fa7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <netif_add+0xba>
    return NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	e058      	b.n	800f918 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f86c:	2bff      	cmp	r3, #255	@ 0xff
 800f86e:	d103      	bne.n	800f878 <netif_add+0xcc>
        netif->num = 0;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f87c:	4b2f      	ldr	r3, [pc, #188]	@ (800f93c <netif_add+0x190>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	617b      	str	r3, [r7, #20]
 800f882:	e02b      	b.n	800f8dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d106      	bne.n	800f89a <netif_add+0xee>
 800f88c:	4b24      	ldr	r3, [pc, #144]	@ (800f920 <netif_add+0x174>)
 800f88e:	f240 128b 	movw	r2, #395	@ 0x18b
 800f892:	492b      	ldr	r1, [pc, #172]	@ (800f940 <netif_add+0x194>)
 800f894:	4824      	ldr	r0, [pc, #144]	@ (800f928 <netif_add+0x17c>)
 800f896:	f00a fdf9 	bl	801a48c <iprintf>
        num_netifs++;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	3301      	adds	r3, #1
 800f89e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2bff      	cmp	r3, #255	@ 0xff
 800f8a4:	dd06      	ble.n	800f8b4 <netif_add+0x108>
 800f8a6:	4b1e      	ldr	r3, [pc, #120]	@ (800f920 <netif_add+0x174>)
 800f8a8:	f240 128d 	movw	r2, #397	@ 0x18d
 800f8ac:	4925      	ldr	r1, [pc, #148]	@ (800f944 <netif_add+0x198>)
 800f8ae:	481e      	ldr	r0, [pc, #120]	@ (800f928 <netif_add+0x17c>)
 800f8b0:	f00a fdec 	bl	801a48c <iprintf>
        if (netif2->num == netif->num) {
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d108      	bne.n	800f8d6 <netif_add+0x12a>
          netif->num++;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800f8d4:	e005      	b.n	800f8e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	617b      	str	r3, [r7, #20]
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1d0      	bne.n	800f884 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1be      	bne.n	800f866 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8ee:	2bfe      	cmp	r3, #254	@ 0xfe
 800f8f0:	d103      	bne.n	800f8fa <netif_add+0x14e>
    netif_num = 0;
 800f8f2:	4b11      	ldr	r3, [pc, #68]	@ (800f938 <netif_add+0x18c>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
 800f8f8:	e006      	b.n	800f908 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f900:	3301      	adds	r3, #1
 800f902:	b2da      	uxtb	r2, r3
 800f904:	4b0c      	ldr	r3, [pc, #48]	@ (800f938 <netif_add+0x18c>)
 800f906:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f908:	4b0c      	ldr	r3, [pc, #48]	@ (800f93c <netif_add+0x190>)
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f910:	4a0a      	ldr	r2, [pc, #40]	@ (800f93c <netif_add+0x190>)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f916:	68fb      	ldr	r3, [r7, #12]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	0801cd74 	.word	0x0801cd74
 800f924:	0801ce08 	.word	0x0801ce08
 800f928:	0801cdc4 	.word	0x0801cdc4
 800f92c:	0801ce24 	.word	0x0801ce24
 800f930:	0801f534 	.word	0x0801f534
 800f934:	0800fcf3 	.word	0x0800fcf3
 800f938:	2000c76c 	.word	0x2000c76c
 800f93c:	2000c764 	.word	0x2000c764
 800f940:	0801ce48 	.word	0x0801ce48
 800f944:	0801ce5c 	.word	0x0801ce5c

0800f948 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f002 fdab 	bl	80124b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f95a:	6839      	ldr	r1, [r7, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f007 fb11 	bl	8016f84 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d106      	bne.n	800f98c <netif_do_set_ipaddr+0x20>
 800f97e:	4b1d      	ldr	r3, [pc, #116]	@ (800f9f4 <netif_do_set_ipaddr+0x88>)
 800f980:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800f984:	491c      	ldr	r1, [pc, #112]	@ (800f9f8 <netif_do_set_ipaddr+0x8c>)
 800f986:	481d      	ldr	r0, [pc, #116]	@ (800f9fc <netif_do_set_ipaddr+0x90>)
 800f988:	f00a fd80 	bl	801a48c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d106      	bne.n	800f9a0 <netif_do_set_ipaddr+0x34>
 800f992:	4b18      	ldr	r3, [pc, #96]	@ (800f9f4 <netif_do_set_ipaddr+0x88>)
 800f994:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800f998:	4917      	ldr	r1, [pc, #92]	@ (800f9f8 <netif_do_set_ipaddr+0x8c>)
 800f99a:	4818      	ldr	r0, [pc, #96]	@ (800f9fc <netif_do_set_ipaddr+0x90>)
 800f99c:	f00a fd76 	bl	801a48c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d01c      	beq.n	800f9e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f9be:	f107 0314 	add.w	r3, r7, #20
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff ffbf 	bl	800f948 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <netif_do_set_ipaddr+0x6a>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	e000      	b.n	800f9d8 <netif_do_set_ipaddr+0x6c>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f9dc:	2101      	movs	r1, #1
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 f8d2 	bl	800fb88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e000      	b.n	800f9ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0801cd74 	.word	0x0801cd74
 800f9f8:	0801ce8c 	.word	0x0801ce8c
 800f9fc:	0801cdc4 	.word	0x0801cdc4

0800fa00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	3308      	adds	r3, #8
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d00a      	beq.n	800fa30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <netif_do_set_netmask+0x26>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	e000      	b.n	800fa28 <netif_do_set_netmask+0x28>
 800fa26:	2300      	movs	r3, #0
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b085      	sub	sp, #20
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	60f8      	str	r0, [r7, #12]
 800fa46:	60b9      	str	r1, [r7, #8]
 800fa48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	330c      	adds	r3, #12
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d00a      	beq.n	800fa6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <netif_do_set_gw+0x26>
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	e000      	b.n	800fa66 <netif_do_set_gw+0x28>
 800fa64:	2300      	movs	r3, #0
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e000      	b.n	800fa70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3714      	adds	r7, #20
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b088      	sub	sp, #32
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d101      	bne.n	800fa9c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fa98:	4b1c      	ldr	r3, [pc, #112]	@ (800fb0c <netif_set_addr+0x90>)
 800fa9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800faa2:	4b1a      	ldr	r3, [pc, #104]	@ (800fb0c <netif_set_addr+0x90>)
 800faa4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d101      	bne.n	800fab0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800faac:	4b17      	ldr	r3, [pc, #92]	@ (800fb0c <netif_set_addr+0x90>)
 800faae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <netif_set_addr+0x42>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d101      	bne.n	800fac2 <netif_set_addr+0x46>
 800fabe:	2301      	movs	r3, #1
 800fac0:	e000      	b.n	800fac4 <netif_set_addr+0x48>
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d006      	beq.n	800fada <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800facc:	f107 0310 	add.w	r3, r7, #16
 800fad0:	461a      	mov	r2, r3
 800fad2:	68b9      	ldr	r1, [r7, #8]
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f7ff ff49 	bl	800f96c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fada:	69fa      	ldr	r2, [r7, #28]
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff ff8e 	bl	800fa00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fae4:	69ba      	ldr	r2, [r7, #24]
 800fae6:	6839      	ldr	r1, [r7, #0]
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff ffa8 	bl	800fa3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d106      	bne.n	800fb02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800faf4:	f107 0310 	add.w	r3, r7, #16
 800faf8:	461a      	mov	r2, r3
 800fafa:	68b9      	ldr	r1, [r7, #8]
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff ff35 	bl	800f96c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fb02:	bf00      	nop
 800fb04:	3720      	adds	r7, #32
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	0801f534 	.word	0x0801f534

0800fb10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fb18:	4a04      	ldr	r2, [pc, #16]	@ (800fb2c <netif_set_default+0x1c>)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fb1e:	bf00      	nop
 800fb20:	370c      	adds	r7, #12
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	2000c768 	.word	0x2000c768

0800fb30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d107      	bne.n	800fb4e <netif_set_up+0x1e>
 800fb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb7c <netif_set_up+0x4c>)
 800fb40:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fb44:	490e      	ldr	r1, [pc, #56]	@ (800fb80 <netif_set_up+0x50>)
 800fb46:	480f      	ldr	r0, [pc, #60]	@ (800fb84 <netif_set_up+0x54>)
 800fb48:	f00a fca0 	bl	801a48c <iprintf>
 800fb4c:	e013      	b.n	800fb76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10c      	bne.n	800fb76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb62:	f043 0301 	orr.w	r3, r3, #1
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb6e:	2103      	movs	r1, #3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 f809 	bl	800fb88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	0801cd74 	.word	0x0801cd74
 800fb80:	0801cefc 	.word	0x0801cefc
 800fb84:	0801cdc4 	.word	0x0801cdc4

0800fb88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d106      	bne.n	800fba8 <netif_issue_reports+0x20>
 800fb9a:	4b18      	ldr	r3, [pc, #96]	@ (800fbfc <netif_issue_reports+0x74>)
 800fb9c:	f240 326d 	movw	r2, #877	@ 0x36d
 800fba0:	4917      	ldr	r1, [pc, #92]	@ (800fc00 <netif_issue_reports+0x78>)
 800fba2:	4818      	ldr	r0, [pc, #96]	@ (800fc04 <netif_issue_reports+0x7c>)
 800fba4:	f00a fc72 	bl	801a48c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbae:	f003 0304 	and.w	r3, r3, #4
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d01e      	beq.n	800fbf4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbbc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d017      	beq.n	800fbf4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbc4:	78fb      	ldrb	r3, [r7, #3]
 800fbc6:	f003 0301 	and.w	r3, r3, #1
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d013      	beq.n	800fbf6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00e      	beq.n	800fbf6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbde:	f003 0308 	and.w	r3, r3, #8
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d007      	beq.n	800fbf6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3304      	adds	r3, #4
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f008 f903 	bl	8017df8 <etharp_request>
 800fbf2:	e000      	b.n	800fbf6 <netif_issue_reports+0x6e>
    return;
 800fbf4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	0801cd74 	.word	0x0801cd74
 800fc00:	0801cf18 	.word	0x0801cf18
 800fc04:	0801cdc4 	.word	0x0801cdc4

0800fc08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d107      	bne.n	800fc26 <netif_set_link_up+0x1e>
 800fc16:	4b13      	ldr	r3, [pc, #76]	@ (800fc64 <netif_set_link_up+0x5c>)
 800fc18:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fc1c:	4912      	ldr	r1, [pc, #72]	@ (800fc68 <netif_set_link_up+0x60>)
 800fc1e:	4813      	ldr	r0, [pc, #76]	@ (800fc6c <netif_set_link_up+0x64>)
 800fc20:	f00a fc34 	bl	801a48c <iprintf>
 800fc24:	e01b      	b.n	800fc5e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc2c:	f003 0304 	and.w	r3, r3, #4
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d114      	bne.n	800fc5e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc3a:	f043 0304 	orr.w	r3, r3, #4
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fc46:	2103      	movs	r1, #3
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff ff9d 	bl	800fb88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d003      	beq.n	800fc5e <netif_set_link_up+0x56>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	69db      	ldr	r3, [r3, #28]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801cd74 	.word	0x0801cd74
 800fc68:	0801cf5c 	.word	0x0801cf5c
 800fc6c:	0801cdc4 	.word	0x0801cdc4

0800fc70 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d107      	bne.n	800fc8e <netif_set_link_down+0x1e>
 800fc7e:	4b11      	ldr	r3, [pc, #68]	@ (800fcc4 <netif_set_link_down+0x54>)
 800fc80:	f240 4206 	movw	r2, #1030	@ 0x406
 800fc84:	4910      	ldr	r1, [pc, #64]	@ (800fcc8 <netif_set_link_down+0x58>)
 800fc86:	4811      	ldr	r0, [pc, #68]	@ (800fccc <netif_set_link_down+0x5c>)
 800fc88:	f00a fc00 	bl	801a48c <iprintf>
 800fc8c:	e017      	b.n	800fcbe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc94:	f003 0304 	and.w	r3, r3, #4
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d010      	beq.n	800fcbe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fca2:	f023 0304 	bic.w	r3, r3, #4
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d003      	beq.n	800fcbe <netif_set_link_down+0x4e>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	69db      	ldr	r3, [r3, #28]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	0801cd74 	.word	0x0801cd74
 800fcc8:	0801cf80 	.word	0x0801cf80
 800fccc:	0801cdc4 	.word	0x0801cdc4

0800fcd0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	61da      	str	r2, [r3, #28]
  }
}
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fcf2:	b480      	push	{r7}
 800fcf4:	b085      	sub	sp, #20
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	60f8      	str	r0, [r7, #12]
 800fcfa:	60b9      	str	r1, [r7, #8]
 800fcfc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fcfe:	f06f 030b 	mvn.w	r3, #11
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
	...

0800fd10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	4603      	mov	r3, r0
 800fd18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d013      	beq.n	800fd48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fd20:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <netif_get_by_index+0x48>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	60fb      	str	r3, [r7, #12]
 800fd26:	e00c      	b.n	800fd42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	79fa      	ldrb	r2, [r7, #7]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d101      	bne.n	800fd3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	e006      	b.n	800fd4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60fb      	str	r3, [r7, #12]
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1ef      	bne.n	800fd28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3714      	adds	r7, #20
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	2000c764 	.word	0x2000c764

0800fd5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fd62:	f009 fd5b 	bl	801981c <sys_arch_protect>
 800fd66:	6038      	str	r0, [r7, #0]
 800fd68:	4b0d      	ldr	r3, [pc, #52]	@ (800fda0 <pbuf_free_ooseq+0x44>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	701a      	strb	r2, [r3, #0]
 800fd6e:	6838      	ldr	r0, [r7, #0]
 800fd70:	f009 fd62 	bl	8019838 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fd74:	4b0b      	ldr	r3, [pc, #44]	@ (800fda4 <pbuf_free_ooseq+0x48>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	607b      	str	r3, [r7, #4]
 800fd7a:	e00a      	b.n	800fd92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d003      	beq.n	800fd8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f002 fbd1 	bl	801252c <tcp_free_ooseq>
      return;
 800fd8a:	e005      	b.n	800fd98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1f1      	bne.n	800fd7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	2000c76d 	.word	0x2000c76d
 800fda4:	2000c77c 	.word	0x2000c77c

0800fda8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fdb0:	f7ff ffd4 	bl	800fd5c <pbuf_free_ooseq>
}
 800fdb4:	bf00      	nop
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fdc2:	f009 fd2b 	bl	801981c <sys_arch_protect>
 800fdc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fdc8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe08 <pbuf_pool_is_empty+0x4c>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fdce:	4b0e      	ldr	r3, [pc, #56]	@ (800fe08 <pbuf_pool_is_empty+0x4c>)
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f009 fd2f 	bl	8019838 <sys_arch_unprotect>

  if (!queued) {
 800fdda:	78fb      	ldrb	r3, [r7, #3]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d10f      	bne.n	800fe00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fde0:	2100      	movs	r1, #0
 800fde2:	480a      	ldr	r0, [pc, #40]	@ (800fe0c <pbuf_pool_is_empty+0x50>)
 800fde4:	f7fe fed8 	bl	800eb98 <tcpip_try_callback>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d008      	beq.n	800fe00 <pbuf_pool_is_empty+0x44>
 800fdee:	f009 fd15 	bl	801981c <sys_arch_protect>
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	4b04      	ldr	r3, [pc, #16]	@ (800fe08 <pbuf_pool_is_empty+0x4c>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	701a      	strb	r2, [r3, #0]
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f009 fd1c 	bl	8019838 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	2000c76d 	.word	0x2000c76d
 800fe0c:	0800fda9 	.word	0x0800fda9

0800fe10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	4611      	mov	r1, r2
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	460b      	mov	r3, r1
 800fe20:	80fb      	strh	r3, [r7, #6]
 800fe22:	4613      	mov	r3, r2
 800fe24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	88fa      	ldrh	r2, [r7, #6]
 800fe36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	88ba      	ldrh	r2, [r7, #4]
 800fe3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fe3e:	8b3b      	ldrh	r3, [r7, #24]
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	7f3a      	ldrb	r2, [r7, #28]
 800fe4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	73da      	strb	r2, [r3, #15]
}
 800fe58:	bf00      	nop
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	@ 0x30
 800fe68:	af02      	add	r7, sp, #8
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
 800fe6e:	460b      	mov	r3, r1
 800fe70:	80bb      	strh	r3, [r7, #4]
 800fe72:	4613      	mov	r3, r2
 800fe74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fe7a:	887b      	ldrh	r3, [r7, #2]
 800fe7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fe80:	d07f      	beq.n	800ff82 <pbuf_alloc+0x11e>
 800fe82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800fe86:	f300 80c8 	bgt.w	801001a <pbuf_alloc+0x1b6>
 800fe8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800fe8e:	d010      	beq.n	800feb2 <pbuf_alloc+0x4e>
 800fe90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800fe94:	f300 80c1 	bgt.w	801001a <pbuf_alloc+0x1b6>
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d002      	beq.n	800fea2 <pbuf_alloc+0x3e>
 800fe9c:	2b41      	cmp	r3, #65	@ 0x41
 800fe9e:	f040 80bc 	bne.w	801001a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fea2:	887a      	ldrh	r2, [r7, #2]
 800fea4:	88bb      	ldrh	r3, [r7, #4]
 800fea6:	4619      	mov	r1, r3
 800fea8:	2000      	movs	r0, #0
 800feaa:	f000 f8d1 	bl	8010050 <pbuf_alloc_reference>
 800feae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800feb0:	e0bd      	b.n	801002e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800feba:	88bb      	ldrh	r3, [r7, #4]
 800febc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800febe:	200c      	movs	r0, #12
 800fec0:	f7ff fbcc 	bl	800f65c <memp_malloc>
 800fec4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d109      	bne.n	800fee0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fecc:	f7ff ff76 	bl	800fdbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d002      	beq.n	800fedc <pbuf_alloc+0x78>
            pbuf_free(p);
 800fed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fed8:	f000 faa8 	bl	801042c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fedc:	2300      	movs	r3, #0
 800fede:	e0a7      	b.n	8010030 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fee2:	3303      	adds	r3, #3
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	f023 0303 	bic.w	r3, r3, #3
 800feea:	b29b      	uxth	r3, r3
 800feec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	8b7a      	ldrh	r2, [r7, #26]
 800fef4:	4293      	cmp	r3, r2
 800fef6:	bf28      	it	cs
 800fef8:	4613      	movcs	r3, r2
 800fefa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fefc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fefe:	3310      	adds	r3, #16
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	4413      	add	r3, r2
 800ff04:	3303      	adds	r3, #3
 800ff06:	f023 0303 	bic.w	r3, r3, #3
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	89f9      	ldrh	r1, [r7, #14]
 800ff0e:	8b7a      	ldrh	r2, [r7, #26]
 800ff10:	2300      	movs	r3, #0
 800ff12:	9301      	str	r3, [sp, #4]
 800ff14:	887b      	ldrh	r3, [r7, #2]
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	6938      	ldr	r0, [r7, #16]
 800ff1e:	f7ff ff77 	bl	800fe10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	f003 0303 	and.w	r3, r3, #3
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d006      	beq.n	800ff3c <pbuf_alloc+0xd8>
 800ff2e:	4b42      	ldr	r3, [pc, #264]	@ (8010038 <pbuf_alloc+0x1d4>)
 800ff30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff34:	4941      	ldr	r1, [pc, #260]	@ (801003c <pbuf_alloc+0x1d8>)
 800ff36:	4842      	ldr	r0, [pc, #264]	@ (8010040 <pbuf_alloc+0x1dc>)
 800ff38:	f00a faa8 	bl	801a48c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ff3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff3e:	3303      	adds	r3, #3
 800ff40:	f023 0303 	bic.w	r3, r3, #3
 800ff44:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ff48:	d106      	bne.n	800ff58 <pbuf_alloc+0xf4>
 800ff4a:	4b3b      	ldr	r3, [pc, #236]	@ (8010038 <pbuf_alloc+0x1d4>)
 800ff4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ff50:	493c      	ldr	r1, [pc, #240]	@ (8010044 <pbuf_alloc+0x1e0>)
 800ff52:	483b      	ldr	r0, [pc, #236]	@ (8010040 <pbuf_alloc+0x1dc>)
 800ff54:	f00a fa9a 	bl	801a48c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ff58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d102      	bne.n	800ff64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff62:	e002      	b.n	800ff6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ff6e:	8b7a      	ldrh	r2, [r7, #26]
 800ff70:	89fb      	ldrh	r3, [r7, #14]
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ff7a:	8b7b      	ldrh	r3, [r7, #26]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d19e      	bne.n	800febe <pbuf_alloc+0x5a>
      break;
 800ff80:	e055      	b.n	801002e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ff82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff84:	3303      	adds	r3, #3
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	f023 0303 	bic.w	r3, r3, #3
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	88bb      	ldrh	r3, [r7, #4]
 800ff90:	3303      	adds	r3, #3
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	f023 0303 	bic.w	r3, r3, #3
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	4413      	add	r3, r2
 800ff9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ff9e:	8b3b      	ldrh	r3, [r7, #24]
 800ffa0:	3310      	adds	r3, #16
 800ffa2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ffa4:	8b3a      	ldrh	r2, [r7, #24]
 800ffa6:	88bb      	ldrh	r3, [r7, #4]
 800ffa8:	3303      	adds	r3, #3
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d306      	bcc.n	800ffc0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ffb2:	8afa      	ldrh	r2, [r7, #22]
 800ffb4:	88bb      	ldrh	r3, [r7, #4]
 800ffb6:	3303      	adds	r3, #3
 800ffb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d201      	bcs.n	800ffc4 <pbuf_alloc+0x160>
        return NULL;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	e035      	b.n	8010030 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ffc4:	8afb      	ldrh	r3, [r7, #22]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff f9a4 	bl	800f314 <mem_malloc>
 800ffcc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ffce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d101      	bne.n	800ffd8 <pbuf_alloc+0x174>
        return NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	e02b      	b.n	8010030 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ffd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffda:	3310      	adds	r3, #16
 800ffdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffde:	4413      	add	r3, r2
 800ffe0:	3303      	adds	r3, #3
 800ffe2:	f023 0303 	bic.w	r3, r3, #3
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	88b9      	ldrh	r1, [r7, #4]
 800ffea:	88ba      	ldrh	r2, [r7, #4]
 800ffec:	2300      	movs	r3, #0
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	887b      	ldrh	r3, [r7, #2]
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	460b      	mov	r3, r1
 800fff6:	4601      	mov	r1, r0
 800fff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fffa:	f7ff ff09 	bl	800fe10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f003 0303 	and.w	r3, r3, #3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d010      	beq.n	801002c <pbuf_alloc+0x1c8>
 801000a:	4b0b      	ldr	r3, [pc, #44]	@ (8010038 <pbuf_alloc+0x1d4>)
 801000c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010010:	490d      	ldr	r1, [pc, #52]	@ (8010048 <pbuf_alloc+0x1e4>)
 8010012:	480b      	ldr	r0, [pc, #44]	@ (8010040 <pbuf_alloc+0x1dc>)
 8010014:	f00a fa3a 	bl	801a48c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010018:	e008      	b.n	801002c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801001a:	4b07      	ldr	r3, [pc, #28]	@ (8010038 <pbuf_alloc+0x1d4>)
 801001c:	f240 1227 	movw	r2, #295	@ 0x127
 8010020:	490a      	ldr	r1, [pc, #40]	@ (801004c <pbuf_alloc+0x1e8>)
 8010022:	4807      	ldr	r0, [pc, #28]	@ (8010040 <pbuf_alloc+0x1dc>)
 8010024:	f00a fa32 	bl	801a48c <iprintf>
      return NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	e001      	b.n	8010030 <pbuf_alloc+0x1cc>
      break;
 801002c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801002e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010030:	4618      	mov	r0, r3
 8010032:	3728      	adds	r7, #40	@ 0x28
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	0801cfa4 	.word	0x0801cfa4
 801003c:	0801cfd4 	.word	0x0801cfd4
 8010040:	0801d004 	.word	0x0801d004
 8010044:	0801d02c 	.word	0x0801d02c
 8010048:	0801d060 	.word	0x0801d060
 801004c:	0801d08c 	.word	0x0801d08c

08010050 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af02      	add	r7, sp, #8
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	807b      	strh	r3, [r7, #2]
 801005c:	4613      	mov	r3, r2
 801005e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010060:	883b      	ldrh	r3, [r7, #0]
 8010062:	2b41      	cmp	r3, #65	@ 0x41
 8010064:	d009      	beq.n	801007a <pbuf_alloc_reference+0x2a>
 8010066:	883b      	ldrh	r3, [r7, #0]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d006      	beq.n	801007a <pbuf_alloc_reference+0x2a>
 801006c:	4b0f      	ldr	r3, [pc, #60]	@ (80100ac <pbuf_alloc_reference+0x5c>)
 801006e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010072:	490f      	ldr	r1, [pc, #60]	@ (80100b0 <pbuf_alloc_reference+0x60>)
 8010074:	480f      	ldr	r0, [pc, #60]	@ (80100b4 <pbuf_alloc_reference+0x64>)
 8010076:	f00a fa09 	bl	801a48c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801007a:	200b      	movs	r0, #11
 801007c:	f7ff faee 	bl	800f65c <memp_malloc>
 8010080:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010088:	2300      	movs	r3, #0
 801008a:	e00b      	b.n	80100a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801008c:	8879      	ldrh	r1, [r7, #2]
 801008e:	887a      	ldrh	r2, [r7, #2]
 8010090:	2300      	movs	r3, #0
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	883b      	ldrh	r3, [r7, #0]
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	460b      	mov	r3, r1
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f7ff feb7 	bl	800fe10 <pbuf_init_alloced_pbuf>
  return p;
 80100a2:	68fb      	ldr	r3, [r7, #12]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	0801cfa4 	.word	0x0801cfa4
 80100b0:	0801d0a8 	.word	0x0801d0a8
 80100b4:	0801d004 	.word	0x0801d004

080100b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b088      	sub	sp, #32
 80100bc:	af02      	add	r7, sp, #8
 80100be:	607b      	str	r3, [r7, #4]
 80100c0:	4603      	mov	r3, r0
 80100c2:	73fb      	strb	r3, [r7, #15]
 80100c4:	460b      	mov	r3, r1
 80100c6:	81bb      	strh	r3, [r7, #12]
 80100c8:	4613      	mov	r3, r2
 80100ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
 80100ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80100d0:	8a7b      	ldrh	r3, [r7, #18]
 80100d2:	3303      	adds	r3, #3
 80100d4:	f023 0203 	bic.w	r2, r3, #3
 80100d8:	89bb      	ldrh	r3, [r7, #12]
 80100da:	441a      	add	r2, r3
 80100dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100de:	429a      	cmp	r2, r3
 80100e0:	d901      	bls.n	80100e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	e018      	b.n	8010118 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d007      	beq.n	80100fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80100ec:	8a7b      	ldrh	r3, [r7, #18]
 80100ee:	3303      	adds	r3, #3
 80100f0:	f023 0303 	bic.w	r3, r3, #3
 80100f4:	6a3a      	ldr	r2, [r7, #32]
 80100f6:	4413      	add	r3, r2
 80100f8:	617b      	str	r3, [r7, #20]
 80100fa:	e001      	b.n	8010100 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80100fc:	2300      	movs	r3, #0
 80100fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	89b9      	ldrh	r1, [r7, #12]
 8010104:	89ba      	ldrh	r2, [r7, #12]
 8010106:	2302      	movs	r3, #2
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	897b      	ldrh	r3, [r7, #10]
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	460b      	mov	r3, r1
 8010110:	6979      	ldr	r1, [r7, #20]
 8010112:	f7ff fe7d 	bl	800fe10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010116:	687b      	ldr	r3, [r7, #4]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d106      	bne.n	8010140 <pbuf_realloc+0x20>
 8010132:	4b3a      	ldr	r3, [pc, #232]	@ (801021c <pbuf_realloc+0xfc>)
 8010134:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010138:	4939      	ldr	r1, [pc, #228]	@ (8010220 <pbuf_realloc+0x100>)
 801013a:	483a      	ldr	r0, [pc, #232]	@ (8010224 <pbuf_realloc+0x104>)
 801013c:	f00a f9a6 	bl	801a48c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	891b      	ldrh	r3, [r3, #8]
 8010144:	887a      	ldrh	r2, [r7, #2]
 8010146:	429a      	cmp	r2, r3
 8010148:	d263      	bcs.n	8010212 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	891a      	ldrh	r2, [r3, #8]
 801014e:	887b      	ldrh	r3, [r7, #2]
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010154:	887b      	ldrh	r3, [r7, #2]
 8010156:	817b      	strh	r3, [r7, #10]
  q = p;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801015c:	e018      	b.n	8010190 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	895b      	ldrh	r3, [r3, #10]
 8010162:	897a      	ldrh	r2, [r7, #10]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	891a      	ldrh	r2, [r3, #8]
 801016c:	893b      	ldrh	r3, [r7, #8]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	b29a      	uxth	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d106      	bne.n	8010190 <pbuf_realloc+0x70>
 8010182:	4b26      	ldr	r3, [pc, #152]	@ (801021c <pbuf_realloc+0xfc>)
 8010184:	f240 12af 	movw	r2, #431	@ 0x1af
 8010188:	4927      	ldr	r1, [pc, #156]	@ (8010228 <pbuf_realloc+0x108>)
 801018a:	4826      	ldr	r0, [pc, #152]	@ (8010224 <pbuf_realloc+0x104>)
 801018c:	f00a f97e 	bl	801a48c <iprintf>
  while (rem_len > q->len) {
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	895b      	ldrh	r3, [r3, #10]
 8010194:	897a      	ldrh	r2, [r7, #10]
 8010196:	429a      	cmp	r2, r3
 8010198:	d8e1      	bhi.n	801015e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	7b1b      	ldrb	r3, [r3, #12]
 801019e:	f003 030f 	and.w	r3, r3, #15
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d121      	bne.n	80101ea <pbuf_realloc+0xca>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	895b      	ldrh	r3, [r3, #10]
 80101aa:	897a      	ldrh	r2, [r7, #10]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d01c      	beq.n	80101ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	7b5b      	ldrb	r3, [r3, #13]
 80101b4:	f003 0302 	and.w	r3, r3, #2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d116      	bne.n	80101ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685a      	ldr	r2, [r3, #4]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	897b      	ldrh	r3, [r7, #10]
 80101c8:	4413      	add	r3, r2
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	4619      	mov	r1, r3
 80101ce:	68f8      	ldr	r0, [r7, #12]
 80101d0:	f7fe ff96 	bl	800f100 <mem_trim>
 80101d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d106      	bne.n	80101ea <pbuf_realloc+0xca>
 80101dc:	4b0f      	ldr	r3, [pc, #60]	@ (801021c <pbuf_realloc+0xfc>)
 80101de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80101e2:	4912      	ldr	r1, [pc, #72]	@ (801022c <pbuf_realloc+0x10c>)
 80101e4:	480f      	ldr	r0, [pc, #60]	@ (8010224 <pbuf_realloc+0x104>)
 80101e6:	f00a f951 	bl	801a48c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	897a      	ldrh	r2, [r7, #10]
 80101ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	895a      	ldrh	r2, [r3, #10]
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4618      	mov	r0, r3
 8010206:	f000 f911 	bl	801042c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	601a      	str	r2, [r3, #0]
 8010210:	e000      	b.n	8010214 <pbuf_realloc+0xf4>
    return;
 8010212:	bf00      	nop

}
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	0801cfa4 	.word	0x0801cfa4
 8010220:	0801d0bc 	.word	0x0801d0bc
 8010224:	0801d004 	.word	0x0801d004
 8010228:	0801d0d4 	.word	0x0801d0d4
 801022c:	0801d0ec 	.word	0x0801d0ec

08010230 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	4613      	mov	r3, r2
 801023c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d106      	bne.n	8010252 <pbuf_add_header_impl+0x22>
 8010244:	4b2b      	ldr	r3, [pc, #172]	@ (80102f4 <pbuf_add_header_impl+0xc4>)
 8010246:	f240 12df 	movw	r2, #479	@ 0x1df
 801024a:	492b      	ldr	r1, [pc, #172]	@ (80102f8 <pbuf_add_header_impl+0xc8>)
 801024c:	482b      	ldr	r0, [pc, #172]	@ (80102fc <pbuf_add_header_impl+0xcc>)
 801024e:	f00a f91d 	bl	801a48c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d003      	beq.n	8010260 <pbuf_add_header_impl+0x30>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801025e:	d301      	bcc.n	8010264 <pbuf_add_header_impl+0x34>
    return 1;
 8010260:	2301      	movs	r3, #1
 8010262:	e043      	b.n	80102ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d101      	bne.n	801026e <pbuf_add_header_impl+0x3e>
    return 0;
 801026a:	2300      	movs	r3, #0
 801026c:	e03e      	b.n	80102ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	891a      	ldrh	r2, [r3, #8]
 8010276:	8a7b      	ldrh	r3, [r7, #18]
 8010278:	4413      	add	r3, r2
 801027a:	b29b      	uxth	r3, r3
 801027c:	8a7a      	ldrh	r2, [r7, #18]
 801027e:	429a      	cmp	r2, r3
 8010280:	d901      	bls.n	8010286 <pbuf_add_header_impl+0x56>
    return 1;
 8010282:	2301      	movs	r3, #1
 8010284:	e032      	b.n	80102ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	7b1b      	ldrb	r3, [r3, #12]
 801028a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801028c:	8a3b      	ldrh	r3, [r7, #16]
 801028e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00c      	beq.n	80102b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	685a      	ldr	r2, [r3, #4]
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	425b      	negs	r3, r3
 801029e:	4413      	add	r3, r2
 80102a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	3310      	adds	r3, #16
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d20d      	bcs.n	80102c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80102ac:	2301      	movs	r3, #1
 80102ae:	e01d      	b.n	80102ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d006      	beq.n	80102c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	685a      	ldr	r2, [r3, #4]
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	425b      	negs	r3, r3
 80102be:	4413      	add	r3, r2
 80102c0:	617b      	str	r3, [r7, #20]
 80102c2:	e001      	b.n	80102c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80102c4:	2301      	movs	r3, #1
 80102c6:	e011      	b.n	80102ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	895a      	ldrh	r2, [r3, #10]
 80102d2:	8a7b      	ldrh	r3, [r7, #18]
 80102d4:	4413      	add	r3, r2
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	891a      	ldrh	r2, [r3, #8]
 80102e0:	8a7b      	ldrh	r3, [r7, #18]
 80102e2:	4413      	add	r3, r2
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	811a      	strh	r2, [r3, #8]


  return 0;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	0801cfa4 	.word	0x0801cfa4
 80102f8:	0801d108 	.word	0x0801d108
 80102fc:	0801d004 	.word	0x0801d004

08010300 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801030a:	2200      	movs	r2, #0
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff ff8e 	bl	8010230 <pbuf_add_header_impl>
 8010314:	4603      	mov	r3, r0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d106      	bne.n	801033e <pbuf_remove_header+0x1e>
 8010330:	4b20      	ldr	r3, [pc, #128]	@ (80103b4 <pbuf_remove_header+0x94>)
 8010332:	f240 224b 	movw	r2, #587	@ 0x24b
 8010336:	4920      	ldr	r1, [pc, #128]	@ (80103b8 <pbuf_remove_header+0x98>)
 8010338:	4820      	ldr	r0, [pc, #128]	@ (80103bc <pbuf_remove_header+0x9c>)
 801033a:	f00a f8a7 	bl	801a48c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d003      	beq.n	801034c <pbuf_remove_header+0x2c>
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801034a:	d301      	bcc.n	8010350 <pbuf_remove_header+0x30>
    return 1;
 801034c:	2301      	movs	r3, #1
 801034e:	e02c      	b.n	80103aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <pbuf_remove_header+0x3a>
    return 0;
 8010356:	2300      	movs	r3, #0
 8010358:	e027      	b.n	80103aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	895b      	ldrh	r3, [r3, #10]
 8010362:	89fa      	ldrh	r2, [r7, #14]
 8010364:	429a      	cmp	r2, r3
 8010366:	d908      	bls.n	801037a <pbuf_remove_header+0x5a>
 8010368:	4b12      	ldr	r3, [pc, #72]	@ (80103b4 <pbuf_remove_header+0x94>)
 801036a:	f240 2255 	movw	r2, #597	@ 0x255
 801036e:	4914      	ldr	r1, [pc, #80]	@ (80103c0 <pbuf_remove_header+0xa0>)
 8010370:	4812      	ldr	r0, [pc, #72]	@ (80103bc <pbuf_remove_header+0x9c>)
 8010372:	f00a f88b 	bl	801a48c <iprintf>
 8010376:	2301      	movs	r3, #1
 8010378:	e017      	b.n	80103aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	685a      	ldr	r2, [r3, #4]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	441a      	add	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	895a      	ldrh	r2, [r3, #10]
 8010390:	89fb      	ldrh	r3, [r7, #14]
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	b29a      	uxth	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	891a      	ldrh	r2, [r3, #8]
 801039e:	89fb      	ldrh	r3, [r7, #14]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	0801cfa4 	.word	0x0801cfa4
 80103b8:	0801d108 	.word	0x0801d108
 80103bc:	0801d004 	.word	0x0801d004
 80103c0:	0801d114 	.word	0x0801d114

080103c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	807b      	strh	r3, [r7, #2]
 80103d0:	4613      	mov	r3, r2
 80103d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80103d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	da08      	bge.n	80103ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80103dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103e0:	425b      	negs	r3, r3
 80103e2:	4619      	mov	r1, r3
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ff9b 	bl	8010320 <pbuf_remove_header>
 80103ea:	4603      	mov	r3, r0
 80103ec:	e007      	b.n	80103fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80103ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103f2:	787a      	ldrb	r2, [r7, #1]
 80103f4:	4619      	mov	r1, r3
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7ff ff1a 	bl	8010230 <pbuf_add_header_impl>
 80103fc:	4603      	mov	r3, r0
  }
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b082      	sub	sp, #8
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	460b      	mov	r3, r1
 8010410:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010416:	2201      	movs	r2, #1
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff ffd2 	bl	80103c4 <pbuf_header_impl>
 8010420:	4603      	mov	r3, r0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
	...

0801042c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b088      	sub	sp, #32
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10b      	bne.n	8010452 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d106      	bne.n	801044e <pbuf_free+0x22>
 8010440:	4b3b      	ldr	r3, [pc, #236]	@ (8010530 <pbuf_free+0x104>)
 8010442:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010446:	493b      	ldr	r1, [pc, #236]	@ (8010534 <pbuf_free+0x108>)
 8010448:	483b      	ldr	r0, [pc, #236]	@ (8010538 <pbuf_free+0x10c>)
 801044a:	f00a f81f 	bl	801a48c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801044e:	2300      	movs	r3, #0
 8010450:	e069      	b.n	8010526 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010456:	e062      	b.n	801051e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010458:	f009 f9e0 	bl	801981c <sys_arch_protect>
 801045c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	7b9b      	ldrb	r3, [r3, #14]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d106      	bne.n	8010474 <pbuf_free+0x48>
 8010466:	4b32      	ldr	r3, [pc, #200]	@ (8010530 <pbuf_free+0x104>)
 8010468:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801046c:	4933      	ldr	r1, [pc, #204]	@ (801053c <pbuf_free+0x110>)
 801046e:	4832      	ldr	r0, [pc, #200]	@ (8010538 <pbuf_free+0x10c>)
 8010470:	f00a f80c 	bl	801a48c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	7b9b      	ldrb	r3, [r3, #14]
 8010478:	3b01      	subs	r3, #1
 801047a:	b2da      	uxtb	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	739a      	strb	r2, [r3, #14]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7b9b      	ldrb	r3, [r3, #14]
 8010484:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010486:	69b8      	ldr	r0, [r7, #24]
 8010488:	f009 f9d6 	bl	8019838 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801048c:	7dfb      	ldrb	r3, [r7, #23]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d143      	bne.n	801051a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	7b1b      	ldrb	r3, [r3, #12]
 801049c:	f003 030f 	and.w	r3, r3, #15
 80104a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	7b5b      	ldrb	r3, [r3, #13]
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d011      	beq.n	80104d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	691b      	ldr	r3, [r3, #16]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d106      	bne.n	80104c8 <pbuf_free+0x9c>
 80104ba:	4b1d      	ldr	r3, [pc, #116]	@ (8010530 <pbuf_free+0x104>)
 80104bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80104c0:	491f      	ldr	r1, [pc, #124]	@ (8010540 <pbuf_free+0x114>)
 80104c2:	481d      	ldr	r0, [pc, #116]	@ (8010538 <pbuf_free+0x10c>)
 80104c4:	f009 ffe2 	bl	801a48c <iprintf>
        pc->custom_free_function(p);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	4798      	blx	r3
 80104d0:	e01d      	b.n	801050e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80104d2:	7bfb      	ldrb	r3, [r7, #15]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d104      	bne.n	80104e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80104d8:	6879      	ldr	r1, [r7, #4]
 80104da:	200c      	movs	r0, #12
 80104dc:	f7ff f934 	bl	800f748 <memp_free>
 80104e0:	e015      	b.n	801050e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80104e2:	7bfb      	ldrb	r3, [r7, #15]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d104      	bne.n	80104f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	200b      	movs	r0, #11
 80104ec:	f7ff f92c 	bl	800f748 <memp_free>
 80104f0:	e00d      	b.n	801050e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d103      	bne.n	8010500 <pbuf_free+0xd4>
          mem_free(p);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fe fd71 	bl	800efe0 <mem_free>
 80104fe:	e006      	b.n	801050e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010500:	4b0b      	ldr	r3, [pc, #44]	@ (8010530 <pbuf_free+0x104>)
 8010502:	f240 320f 	movw	r2, #783	@ 0x30f
 8010506:	490f      	ldr	r1, [pc, #60]	@ (8010544 <pbuf_free+0x118>)
 8010508:	480b      	ldr	r0, [pc, #44]	@ (8010538 <pbuf_free+0x10c>)
 801050a:	f009 ffbf 	bl	801a48c <iprintf>
        }
      }
      count++;
 801050e:	7ffb      	ldrb	r3, [r7, #31]
 8010510:	3301      	adds	r3, #1
 8010512:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	607b      	str	r3, [r7, #4]
 8010518:	e001      	b.n	801051e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801051a:	2300      	movs	r3, #0
 801051c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d199      	bne.n	8010458 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010524:	7ffb      	ldrb	r3, [r7, #31]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3720      	adds	r7, #32
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	0801cfa4 	.word	0x0801cfa4
 8010534:	0801d108 	.word	0x0801d108
 8010538:	0801d004 	.word	0x0801d004
 801053c:	0801d134 	.word	0x0801d134
 8010540:	0801d14c 	.word	0x0801d14c
 8010544:	0801d170 	.word	0x0801d170

08010548 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010554:	e005      	b.n	8010562 <pbuf_clen+0x1a>
    ++len;
 8010556:	89fb      	ldrh	r3, [r7, #14]
 8010558:	3301      	adds	r3, #1
 801055a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1f6      	bne.n	8010556 <pbuf_clen+0xe>
  }
  return len;
 8010568:	89fb      	ldrh	r3, [r7, #14]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3714      	adds	r7, #20
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr
	...

08010578 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d016      	beq.n	80105b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010586:	f009 f949 	bl	801981c <sys_arch_protect>
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7b9b      	ldrb	r3, [r3, #14]
 8010590:	3301      	adds	r3, #1
 8010592:	b2da      	uxtb	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	739a      	strb	r2, [r3, #14]
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f009 f94d 	bl	8019838 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	7b9b      	ldrb	r3, [r3, #14]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d106      	bne.n	80105b4 <pbuf_ref+0x3c>
 80105a6:	4b05      	ldr	r3, [pc, #20]	@ (80105bc <pbuf_ref+0x44>)
 80105a8:	f240 3242 	movw	r2, #834	@ 0x342
 80105ac:	4904      	ldr	r1, [pc, #16]	@ (80105c0 <pbuf_ref+0x48>)
 80105ae:	4805      	ldr	r0, [pc, #20]	@ (80105c4 <pbuf_ref+0x4c>)
 80105b0:	f009 ff6c 	bl	801a48c <iprintf>
  }
}
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	0801cfa4 	.word	0x0801cfa4
 80105c0:	0801d184 	.word	0x0801d184
 80105c4:	0801d004 	.word	0x0801d004

080105c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <pbuf_cat+0x16>
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d107      	bne.n	80105ee <pbuf_cat+0x26>
 80105de:	4b20      	ldr	r3, [pc, #128]	@ (8010660 <pbuf_cat+0x98>)
 80105e0:	f240 3259 	movw	r2, #857	@ 0x359
 80105e4:	491f      	ldr	r1, [pc, #124]	@ (8010664 <pbuf_cat+0x9c>)
 80105e6:	4820      	ldr	r0, [pc, #128]	@ (8010668 <pbuf_cat+0xa0>)
 80105e8:	f009 ff50 	bl	801a48c <iprintf>
 80105ec:	e034      	b.n	8010658 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60fb      	str	r3, [r7, #12]
 80105f2:	e00a      	b.n	801060a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	891a      	ldrh	r2, [r3, #8]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	891b      	ldrh	r3, [r3, #8]
 80105fc:	4413      	add	r3, r2
 80105fe:	b29a      	uxth	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1f0      	bne.n	80105f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	891a      	ldrh	r2, [r3, #8]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	895b      	ldrh	r3, [r3, #10]
 801061a:	429a      	cmp	r2, r3
 801061c:	d006      	beq.n	801062c <pbuf_cat+0x64>
 801061e:	4b10      	ldr	r3, [pc, #64]	@ (8010660 <pbuf_cat+0x98>)
 8010620:	f240 3262 	movw	r2, #866	@ 0x362
 8010624:	4911      	ldr	r1, [pc, #68]	@ (801066c <pbuf_cat+0xa4>)
 8010626:	4810      	ldr	r0, [pc, #64]	@ (8010668 <pbuf_cat+0xa0>)
 8010628:	f009 ff30 	bl	801a48c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <pbuf_cat+0x7a>
 8010634:	4b0a      	ldr	r3, [pc, #40]	@ (8010660 <pbuf_cat+0x98>)
 8010636:	f240 3263 	movw	r2, #867	@ 0x363
 801063a:	490d      	ldr	r1, [pc, #52]	@ (8010670 <pbuf_cat+0xa8>)
 801063c:	480a      	ldr	r0, [pc, #40]	@ (8010668 <pbuf_cat+0xa0>)
 801063e:	f009 ff25 	bl	801a48c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	891a      	ldrh	r2, [r3, #8]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	891b      	ldrh	r3, [r3, #8]
 801064a:	4413      	add	r3, r2
 801064c:	b29a      	uxth	r2, r3
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	683a      	ldr	r2, [r7, #0]
 8010656:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	0801cfa4 	.word	0x0801cfa4
 8010664:	0801d198 	.word	0x0801d198
 8010668:	0801d004 	.word	0x0801d004
 801066c:	0801d1d0 	.word	0x0801d1d0
 8010670:	0801d200 	.word	0x0801d200

08010674 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801067e:	2300      	movs	r3, #0
 8010680:	617b      	str	r3, [r7, #20]
 8010682:	2300      	movs	r3, #0
 8010684:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d008      	beq.n	801069e <pbuf_copy+0x2a>
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d005      	beq.n	801069e <pbuf_copy+0x2a>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	891a      	ldrh	r2, [r3, #8]
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	891b      	ldrh	r3, [r3, #8]
 801069a:	429a      	cmp	r2, r3
 801069c:	d209      	bcs.n	80106b2 <pbuf_copy+0x3e>
 801069e:	4b57      	ldr	r3, [pc, #348]	@ (80107fc <pbuf_copy+0x188>)
 80106a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80106a4:	4956      	ldr	r1, [pc, #344]	@ (8010800 <pbuf_copy+0x18c>)
 80106a6:	4857      	ldr	r0, [pc, #348]	@ (8010804 <pbuf_copy+0x190>)
 80106a8:	f009 fef0 	bl	801a48c <iprintf>
 80106ac:	f06f 030f 	mvn.w	r3, #15
 80106b0:	e09f      	b.n	80107f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	895b      	ldrh	r3, [r3, #10]
 80106b6:	461a      	mov	r2, r3
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	1ad2      	subs	r2, r2, r3
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	895b      	ldrh	r3, [r3, #10]
 80106c0:	4619      	mov	r1, r3
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	1acb      	subs	r3, r1, r3
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d306      	bcc.n	80106d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	895b      	ldrh	r3, [r3, #10]
 80106ce:	461a      	mov	r2, r3
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	60fb      	str	r3, [r7, #12]
 80106d6:	e005      	b.n	80106e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	895b      	ldrh	r3, [r3, #10]
 80106dc:	461a      	mov	r2, r3
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	18d0      	adds	r0, r2, r3
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	4413      	add	r3, r2
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	4619      	mov	r1, r3
 80106f8:	f00a f867 	bl	801a7ca <memcpy>
    offset_to += len;
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	4413      	add	r3, r2
 8010702:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010704:	693a      	ldr	r2, [r7, #16]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	4413      	add	r3, r2
 801070a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	895b      	ldrh	r3, [r3, #10]
 8010710:	461a      	mov	r2, r3
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	4293      	cmp	r3, r2
 8010716:	d906      	bls.n	8010726 <pbuf_copy+0xb2>
 8010718:	4b38      	ldr	r3, [pc, #224]	@ (80107fc <pbuf_copy+0x188>)
 801071a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801071e:	493a      	ldr	r1, [pc, #232]	@ (8010808 <pbuf_copy+0x194>)
 8010720:	4838      	ldr	r0, [pc, #224]	@ (8010804 <pbuf_copy+0x190>)
 8010722:	f009 feb3 	bl	801a48c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	895b      	ldrh	r3, [r3, #10]
 801072a:	461a      	mov	r2, r3
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	4293      	cmp	r3, r2
 8010730:	d906      	bls.n	8010740 <pbuf_copy+0xcc>
 8010732:	4b32      	ldr	r3, [pc, #200]	@ (80107fc <pbuf_copy+0x188>)
 8010734:	f240 32da 	movw	r2, #986	@ 0x3da
 8010738:	4934      	ldr	r1, [pc, #208]	@ (801080c <pbuf_copy+0x198>)
 801073a:	4832      	ldr	r0, [pc, #200]	@ (8010804 <pbuf_copy+0x190>)
 801073c:	f009 fea6 	bl	801a48c <iprintf>
    if (offset_from >= p_from->len) {
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	895b      	ldrh	r3, [r3, #10]
 8010744:	461a      	mov	r2, r3
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	4293      	cmp	r3, r2
 801074a:	d304      	bcc.n	8010756 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801074c:	2300      	movs	r3, #0
 801074e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	895b      	ldrh	r3, [r3, #10]
 801075a:	461a      	mov	r2, r3
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	4293      	cmp	r3, r2
 8010760:	d114      	bne.n	801078c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10c      	bne.n	801078c <pbuf_copy+0x118>
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d009      	beq.n	801078c <pbuf_copy+0x118>
 8010778:	4b20      	ldr	r3, [pc, #128]	@ (80107fc <pbuf_copy+0x188>)
 801077a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801077e:	4924      	ldr	r1, [pc, #144]	@ (8010810 <pbuf_copy+0x19c>)
 8010780:	4820      	ldr	r0, [pc, #128]	@ (8010804 <pbuf_copy+0x190>)
 8010782:	f009 fe83 	bl	801a48c <iprintf>
 8010786:	f06f 030f 	mvn.w	r3, #15
 801078a:	e032      	b.n	80107f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d013      	beq.n	80107ba <pbuf_copy+0x146>
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	895a      	ldrh	r2, [r3, #10]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	891b      	ldrh	r3, [r3, #8]
 801079a:	429a      	cmp	r2, r3
 801079c:	d10d      	bne.n	80107ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d009      	beq.n	80107ba <pbuf_copy+0x146>
 80107a6:	4b15      	ldr	r3, [pc, #84]	@ (80107fc <pbuf_copy+0x188>)
 80107a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80107ac:	4919      	ldr	r1, [pc, #100]	@ (8010814 <pbuf_copy+0x1a0>)
 80107ae:	4815      	ldr	r0, [pc, #84]	@ (8010804 <pbuf_copy+0x190>)
 80107b0:	f009 fe6c 	bl	801a48c <iprintf>
 80107b4:	f06f 0305 	mvn.w	r3, #5
 80107b8:	e01b      	b.n	80107f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d013      	beq.n	80107e8 <pbuf_copy+0x174>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	895a      	ldrh	r2, [r3, #10]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	891b      	ldrh	r3, [r3, #8]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d10d      	bne.n	80107e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d009      	beq.n	80107e8 <pbuf_copy+0x174>
 80107d4:	4b09      	ldr	r3, [pc, #36]	@ (80107fc <pbuf_copy+0x188>)
 80107d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80107da:	490e      	ldr	r1, [pc, #56]	@ (8010814 <pbuf_copy+0x1a0>)
 80107dc:	4809      	ldr	r0, [pc, #36]	@ (8010804 <pbuf_copy+0x190>)
 80107de:	f009 fe55 	bl	801a48c <iprintf>
 80107e2:	f06f 0305 	mvn.w	r3, #5
 80107e6:	e004      	b.n	80107f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f47f af61 	bne.w	80106b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3718      	adds	r7, #24
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	0801cfa4 	.word	0x0801cfa4
 8010800:	0801d24c 	.word	0x0801d24c
 8010804:	0801d004 	.word	0x0801d004
 8010808:	0801d27c 	.word	0x0801d27c
 801080c:	0801d294 	.word	0x0801d294
 8010810:	0801d2b0 	.word	0x0801d2b0
 8010814:	0801d2c0 	.word	0x0801d2c0

08010818 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b088      	sub	sp, #32
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	4611      	mov	r1, r2
 8010824:	461a      	mov	r2, r3
 8010826:	460b      	mov	r3, r1
 8010828:	80fb      	strh	r3, [r7, #6]
 801082a:	4613      	mov	r3, r2
 801082c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d108      	bne.n	801084e <pbuf_copy_partial+0x36>
 801083c:	4b2b      	ldr	r3, [pc, #172]	@ (80108ec <pbuf_copy_partial+0xd4>)
 801083e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010842:	492b      	ldr	r1, [pc, #172]	@ (80108f0 <pbuf_copy_partial+0xd8>)
 8010844:	482b      	ldr	r0, [pc, #172]	@ (80108f4 <pbuf_copy_partial+0xdc>)
 8010846:	f009 fe21 	bl	801a48c <iprintf>
 801084a:	2300      	movs	r3, #0
 801084c:	e04a      	b.n	80108e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d108      	bne.n	8010866 <pbuf_copy_partial+0x4e>
 8010854:	4b25      	ldr	r3, [pc, #148]	@ (80108ec <pbuf_copy_partial+0xd4>)
 8010856:	f240 420b 	movw	r2, #1035	@ 0x40b
 801085a:	4927      	ldr	r1, [pc, #156]	@ (80108f8 <pbuf_copy_partial+0xe0>)
 801085c:	4825      	ldr	r0, [pc, #148]	@ (80108f4 <pbuf_copy_partial+0xdc>)
 801085e:	f009 fe15 	bl	801a48c <iprintf>
 8010862:	2300      	movs	r3, #0
 8010864:	e03e      	b.n	80108e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	61fb      	str	r3, [r7, #28]
 801086a:	e034      	b.n	80108d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801086c:	88bb      	ldrh	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00a      	beq.n	8010888 <pbuf_copy_partial+0x70>
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	895b      	ldrh	r3, [r3, #10]
 8010876:	88ba      	ldrh	r2, [r7, #4]
 8010878:	429a      	cmp	r2, r3
 801087a:	d305      	bcc.n	8010888 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	895b      	ldrh	r3, [r3, #10]
 8010880:	88ba      	ldrh	r2, [r7, #4]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	80bb      	strh	r3, [r7, #4]
 8010886:	e023      	b.n	80108d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	895a      	ldrh	r2, [r3, #10]
 801088c:	88bb      	ldrh	r3, [r7, #4]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010892:	8b3a      	ldrh	r2, [r7, #24]
 8010894:	88fb      	ldrh	r3, [r7, #6]
 8010896:	429a      	cmp	r2, r3
 8010898:	d901      	bls.n	801089e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801089e:	8b7b      	ldrh	r3, [r7, #26]
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	18d0      	adds	r0, r2, r3
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	685a      	ldr	r2, [r3, #4]
 80108a8:	88bb      	ldrh	r3, [r7, #4]
 80108aa:	4413      	add	r3, r2
 80108ac:	8b3a      	ldrh	r2, [r7, #24]
 80108ae:	4619      	mov	r1, r3
 80108b0:	f009 ff8b 	bl	801a7ca <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80108b4:	8afa      	ldrh	r2, [r7, #22]
 80108b6:	8b3b      	ldrh	r3, [r7, #24]
 80108b8:	4413      	add	r3, r2
 80108ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80108bc:	8b7a      	ldrh	r2, [r7, #26]
 80108be:	8b3b      	ldrh	r3, [r7, #24]
 80108c0:	4413      	add	r3, r2
 80108c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80108c4:	88fa      	ldrh	r2, [r7, #6]
 80108c6:	8b3b      	ldrh	r3, [r7, #24]
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	61fb      	str	r3, [r7, #28]
 80108d6:	88fb      	ldrh	r3, [r7, #6]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <pbuf_copy_partial+0xca>
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1c4      	bne.n	801086c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80108e2:	8afb      	ldrh	r3, [r7, #22]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3720      	adds	r7, #32
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	0801cfa4 	.word	0x0801cfa4
 80108f0:	0801d2ec 	.word	0x0801d2ec
 80108f4:	0801d004 	.word	0x0801d004
 80108f8:	0801d30c 	.word	0x0801d30c

080108fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	4603      	mov	r3, r0
 8010904:	603a      	str	r2, [r7, #0]
 8010906:	71fb      	strb	r3, [r7, #7]
 8010908:	460b      	mov	r3, r1
 801090a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	8919      	ldrh	r1, [r3, #8]
 8010910:	88ba      	ldrh	r2, [r7, #4]
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	4618      	mov	r0, r3
 8010916:	f7ff faa5 	bl	800fe64 <pbuf_alloc>
 801091a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <pbuf_clone+0x2a>
    return NULL;
 8010922:	2300      	movs	r3, #0
 8010924:	e011      	b.n	801094a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f7ff fea3 	bl	8010674 <pbuf_copy>
 801092e:	4603      	mov	r3, r0
 8010930:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010932:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d006      	beq.n	8010948 <pbuf_clone+0x4c>
 801093a:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <pbuf_clone+0x58>)
 801093c:	f240 5224 	movw	r2, #1316	@ 0x524
 8010940:	4905      	ldr	r1, [pc, #20]	@ (8010958 <pbuf_clone+0x5c>)
 8010942:	4806      	ldr	r0, [pc, #24]	@ (801095c <pbuf_clone+0x60>)
 8010944:	f009 fda2 	bl	801a48c <iprintf>
  return q;
 8010948:	68fb      	ldr	r3, [r7, #12]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	0801cfa4 	.word	0x0801cfa4
 8010958:	0801d418 	.word	0x0801d418
 801095c:	0801d004 	.word	0x0801d004

08010960 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010964:	f009 fc92 	bl	801a28c <rand>
 8010968:	4603      	mov	r3, r0
 801096a:	b29b      	uxth	r3, r3
 801096c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010970:	b29b      	uxth	r3, r3
 8010972:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b01      	ldr	r3, [pc, #4]	@ (8010980 <tcp_init+0x20>)
 801097a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801097c:	bf00      	nop
 801097e:	bd80      	pop	{r7, pc}
 8010980:	2000009c 	.word	0x2000009c

08010984 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	7d1b      	ldrb	r3, [r3, #20]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d105      	bne.n	80109a0 <tcp_free+0x1c>
 8010994:	4b06      	ldr	r3, [pc, #24]	@ (80109b0 <tcp_free+0x2c>)
 8010996:	22d4      	movs	r2, #212	@ 0xd4
 8010998:	4906      	ldr	r1, [pc, #24]	@ (80109b4 <tcp_free+0x30>)
 801099a:	4807      	ldr	r0, [pc, #28]	@ (80109b8 <tcp_free+0x34>)
 801099c:	f009 fd76 	bl	801a48c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80109a0:	6879      	ldr	r1, [r7, #4]
 80109a2:	2001      	movs	r0, #1
 80109a4:	f7fe fed0 	bl	800f748 <memp_free>
}
 80109a8:	bf00      	nop
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	0801d4a4 	.word	0x0801d4a4
 80109b4:	0801d4d4 	.word	0x0801d4d4
 80109b8:	0801d4e8 	.word	0x0801d4e8

080109bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7d1b      	ldrb	r3, [r3, #20]
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d105      	bne.n	80109d8 <tcp_free_listen+0x1c>
 80109cc:	4b06      	ldr	r3, [pc, #24]	@ (80109e8 <tcp_free_listen+0x2c>)
 80109ce:	22df      	movs	r2, #223	@ 0xdf
 80109d0:	4906      	ldr	r1, [pc, #24]	@ (80109ec <tcp_free_listen+0x30>)
 80109d2:	4807      	ldr	r0, [pc, #28]	@ (80109f0 <tcp_free_listen+0x34>)
 80109d4:	f009 fd5a 	bl	801a48c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	2002      	movs	r0, #2
 80109dc:	f7fe feb4 	bl	800f748 <memp_free>
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	0801d4a4 	.word	0x0801d4a4
 80109ec:	0801d510 	.word	0x0801d510
 80109f0:	0801d4e8 	.word	0x0801d4e8

080109f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80109f8:	f001 f85e 	bl	8011ab8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80109fc:	4b07      	ldr	r3, [pc, #28]	@ (8010a1c <tcp_tmr+0x28>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	3301      	adds	r3, #1
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	4b05      	ldr	r3, [pc, #20]	@ (8010a1c <tcp_tmr+0x28>)
 8010a06:	701a      	strb	r2, [r3, #0]
 8010a08:	4b04      	ldr	r3, [pc, #16]	@ (8010a1c <tcp_tmr+0x28>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	f003 0301 	and.w	r3, r3, #1
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010a14:	f000 fd0e 	bl	8011434 <tcp_slowtmr>
  }
}
 8010a18:	bf00      	nop
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	2000c785 	.word	0x2000c785

08010a20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d105      	bne.n	8010a3c <tcp_remove_listener+0x1c>
 8010a30:	4b0d      	ldr	r3, [pc, #52]	@ (8010a68 <tcp_remove_listener+0x48>)
 8010a32:	22ff      	movs	r2, #255	@ 0xff
 8010a34:	490d      	ldr	r1, [pc, #52]	@ (8010a6c <tcp_remove_listener+0x4c>)
 8010a36:	480e      	ldr	r0, [pc, #56]	@ (8010a70 <tcp_remove_listener+0x50>)
 8010a38:	f009 fd28 	bl	801a48c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	e00a      	b.n	8010a58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d102      	bne.n	8010a52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	60fb      	str	r3, [r7, #12]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1f1      	bne.n	8010a42 <tcp_remove_listener+0x22>
    }
  }
}
 8010a5e:	bf00      	nop
 8010a60:	bf00      	nop
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	0801d4a4 	.word	0x0801d4a4
 8010a6c:	0801d52c 	.word	0x0801d52c
 8010a70:	0801d4e8 	.word	0x0801d4e8

08010a74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <tcp_listen_closed+0x1c>
 8010a82:	4b14      	ldr	r3, [pc, #80]	@ (8010ad4 <tcp_listen_closed+0x60>)
 8010a84:	f240 1211 	movw	r2, #273	@ 0x111
 8010a88:	4913      	ldr	r1, [pc, #76]	@ (8010ad8 <tcp_listen_closed+0x64>)
 8010a8a:	4814      	ldr	r0, [pc, #80]	@ (8010adc <tcp_listen_closed+0x68>)
 8010a8c:	f009 fcfe 	bl	801a48c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	7d1b      	ldrb	r3, [r3, #20]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d006      	beq.n	8010aa6 <tcp_listen_closed+0x32>
 8010a98:	4b0e      	ldr	r3, [pc, #56]	@ (8010ad4 <tcp_listen_closed+0x60>)
 8010a9a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010a9e:	4910      	ldr	r1, [pc, #64]	@ (8010ae0 <tcp_listen_closed+0x6c>)
 8010aa0:	480e      	ldr	r0, [pc, #56]	@ (8010adc <tcp_listen_closed+0x68>)
 8010aa2:	f009 fcf3 	bl	801a48c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	e00b      	b.n	8010ac4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010aac:	4a0d      	ldr	r2, [pc, #52]	@ (8010ae4 <tcp_listen_closed+0x70>)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7ff ffb1 	bl	8010a20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b03      	cmp	r3, #3
 8010ac8:	d9f0      	bls.n	8010aac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010aca:	bf00      	nop
 8010acc:	bf00      	nop
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	0801d4a4 	.word	0x0801d4a4
 8010ad8:	0801d554 	.word	0x0801d554
 8010adc:	0801d4e8 	.word	0x0801d4e8
 8010ae0:	0801d560 	.word	0x0801d560
 8010ae4:	0801f50c 	.word	0x0801f50c

08010ae8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010ae8:	b5b0      	push	{r4, r5, r7, lr}
 8010aea:	b088      	sub	sp, #32
 8010aec:	af04      	add	r7, sp, #16
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <tcp_close_shutdown+0x20>
 8010afa:	4b63      	ldr	r3, [pc, #396]	@ (8010c88 <tcp_close_shutdown+0x1a0>)
 8010afc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010b00:	4962      	ldr	r1, [pc, #392]	@ (8010c8c <tcp_close_shutdown+0x1a4>)
 8010b02:	4863      	ldr	r0, [pc, #396]	@ (8010c90 <tcp_close_shutdown+0x1a8>)
 8010b04:	f009 fcc2 	bl	801a48c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010b08:	78fb      	ldrb	r3, [r7, #3]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d066      	beq.n	8010bdc <tcp_close_shutdown+0xf4>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7d1b      	ldrb	r3, [r3, #20]
 8010b12:	2b04      	cmp	r3, #4
 8010b14:	d003      	beq.n	8010b1e <tcp_close_shutdown+0x36>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	7d1b      	ldrb	r3, [r3, #20]
 8010b1a:	2b07      	cmp	r3, #7
 8010b1c:	d15e      	bne.n	8010bdc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d104      	bne.n	8010b30 <tcp_close_shutdown+0x48>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010b2e:	d055      	beq.n	8010bdc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	8b5b      	ldrh	r3, [r3, #26]
 8010b34:	f003 0310 	and.w	r3, r3, #16
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d106      	bne.n	8010b4a <tcp_close_shutdown+0x62>
 8010b3c:	4b52      	ldr	r3, [pc, #328]	@ (8010c88 <tcp_close_shutdown+0x1a0>)
 8010b3e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010b42:	4954      	ldr	r1, [pc, #336]	@ (8010c94 <tcp_close_shutdown+0x1ac>)
 8010b44:	4852      	ldr	r0, [pc, #328]	@ (8010c90 <tcp_close_shutdown+0x1a8>)
 8010b46:	f009 fca1 	bl	801a48c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010b52:	687d      	ldr	r5, [r7, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3304      	adds	r3, #4
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	8ad2      	ldrh	r2, [r2, #22]
 8010b5c:	6879      	ldr	r1, [r7, #4]
 8010b5e:	8b09      	ldrh	r1, [r1, #24]
 8010b60:	9102      	str	r1, [sp, #8]
 8010b62:	9201      	str	r2, [sp, #4]
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	462b      	mov	r3, r5
 8010b68:	4622      	mov	r2, r4
 8010b6a:	4601      	mov	r1, r0
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f005 fd43 	bl	80165f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f001 fb26 	bl	80121c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010b78:	4b47      	ldr	r3, [pc, #284]	@ (8010c98 <tcp_close_shutdown+0x1b0>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d105      	bne.n	8010b8e <tcp_close_shutdown+0xa6>
 8010b82:	4b45      	ldr	r3, [pc, #276]	@ (8010c98 <tcp_close_shutdown+0x1b0>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	4a43      	ldr	r2, [pc, #268]	@ (8010c98 <tcp_close_shutdown+0x1b0>)
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	e013      	b.n	8010bb6 <tcp_close_shutdown+0xce>
 8010b8e:	4b42      	ldr	r3, [pc, #264]	@ (8010c98 <tcp_close_shutdown+0x1b0>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	e00c      	b.n	8010bb0 <tcp_close_shutdown+0xc8>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d104      	bne.n	8010baa <tcp_close_shutdown+0xc2>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	68da      	ldr	r2, [r3, #12]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	60da      	str	r2, [r3, #12]
 8010ba8:	e005      	b.n	8010bb6 <tcp_close_shutdown+0xce>
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1ef      	bne.n	8010b96 <tcp_close_shutdown+0xae>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	60da      	str	r2, [r3, #12]
 8010bbc:	4b37      	ldr	r3, [pc, #220]	@ (8010c9c <tcp_close_shutdown+0x1b4>)
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010bc2:	4b37      	ldr	r3, [pc, #220]	@ (8010ca0 <tcp_close_shutdown+0x1b8>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d102      	bne.n	8010bd2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010bcc:	f003 ffba 	bl	8014b44 <tcp_trigger_input_pcb_close>
 8010bd0:	e002      	b.n	8010bd8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff fed6 	bl	8010984 <tcp_free>
      }
      return ERR_OK;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e050      	b.n	8010c7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	2b02      	cmp	r3, #2
 8010be2:	d03b      	beq.n	8010c5c <tcp_close_shutdown+0x174>
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	dc44      	bgt.n	8010c72 <tcp_close_shutdown+0x18a>
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <tcp_close_shutdown+0x10a>
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d02a      	beq.n	8010c46 <tcp_close_shutdown+0x15e>
 8010bf0:	e03f      	b.n	8010c72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	8adb      	ldrh	r3, [r3, #22]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d021      	beq.n	8010c3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8010ca4 <tcp_close_shutdown+0x1bc>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d105      	bne.n	8010c10 <tcp_close_shutdown+0x128>
 8010c04:	4b27      	ldr	r3, [pc, #156]	@ (8010ca4 <tcp_close_shutdown+0x1bc>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	4a26      	ldr	r2, [pc, #152]	@ (8010ca4 <tcp_close_shutdown+0x1bc>)
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	e013      	b.n	8010c38 <tcp_close_shutdown+0x150>
 8010c10:	4b24      	ldr	r3, [pc, #144]	@ (8010ca4 <tcp_close_shutdown+0x1bc>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	60bb      	str	r3, [r7, #8]
 8010c16:	e00c      	b.n	8010c32 <tcp_close_shutdown+0x14a>
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d104      	bne.n	8010c2c <tcp_close_shutdown+0x144>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	68da      	ldr	r2, [r3, #12]
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	e005      	b.n	8010c38 <tcp_close_shutdown+0x150>
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	60bb      	str	r3, [r7, #8]
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1ef      	bne.n	8010c18 <tcp_close_shutdown+0x130>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff fea0 	bl	8010984 <tcp_free>
      break;
 8010c44:	e01a      	b.n	8010c7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff ff14 	bl	8010a74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010c4c:	6879      	ldr	r1, [r7, #4]
 8010c4e:	4816      	ldr	r0, [pc, #88]	@ (8010ca8 <tcp_close_shutdown+0x1c0>)
 8010c50:	f001 fb08 	bl	8012264 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff feb1 	bl	80109bc <tcp_free_listen>
      break;
 8010c5a:	e00f      	b.n	8010c7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	480e      	ldr	r0, [pc, #56]	@ (8010c98 <tcp_close_shutdown+0x1b0>)
 8010c60:	f001 fb00 	bl	8012264 <tcp_pcb_remove>
 8010c64:	4b0d      	ldr	r3, [pc, #52]	@ (8010c9c <tcp_close_shutdown+0x1b4>)
 8010c66:	2201      	movs	r2, #1
 8010c68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7ff fe8a 	bl	8010984 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010c70:	e004      	b.n	8010c7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f81a 	bl	8010cac <tcp_close_shutdown_fin>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	e000      	b.n	8010c7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bdb0      	pop	{r4, r5, r7, pc}
 8010c86:	bf00      	nop
 8010c88:	0801d4a4 	.word	0x0801d4a4
 8010c8c:	0801d578 	.word	0x0801d578
 8010c90:	0801d4e8 	.word	0x0801d4e8
 8010c94:	0801d598 	.word	0x0801d598
 8010c98:	2000c77c 	.word	0x2000c77c
 8010c9c:	2000c784 	.word	0x2000c784
 8010ca0:	2000c7bc 	.word	0x2000c7bc
 8010ca4:	2000c774 	.word	0x2000c774
 8010ca8:	2000c778 	.word	0x2000c778

08010cac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <tcp_close_shutdown_fin+0x1c>
 8010cba:	4b2e      	ldr	r3, [pc, #184]	@ (8010d74 <tcp_close_shutdown_fin+0xc8>)
 8010cbc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010cc0:	492d      	ldr	r1, [pc, #180]	@ (8010d78 <tcp_close_shutdown_fin+0xcc>)
 8010cc2:	482e      	ldr	r0, [pc, #184]	@ (8010d7c <tcp_close_shutdown_fin+0xd0>)
 8010cc4:	f009 fbe2 	bl	801a48c <iprintf>

  switch (pcb->state) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	7d1b      	ldrb	r3, [r3, #20]
 8010ccc:	2b07      	cmp	r3, #7
 8010cce:	d020      	beq.n	8010d12 <tcp_close_shutdown_fin+0x66>
 8010cd0:	2b07      	cmp	r3, #7
 8010cd2:	dc2b      	bgt.n	8010d2c <tcp_close_shutdown_fin+0x80>
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	d002      	beq.n	8010cde <tcp_close_shutdown_fin+0x32>
 8010cd8:	2b04      	cmp	r3, #4
 8010cda:	d00d      	beq.n	8010cf8 <tcp_close_shutdown_fin+0x4c>
 8010cdc:	e026      	b.n	8010d2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f004 fd98 	bl	8015814 <tcp_send_fin>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d11f      	bne.n	8010d30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2205      	movs	r2, #5
 8010cf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010cf6:	e01b      	b.n	8010d30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f004 fd8b 	bl	8015814 <tcp_send_fin>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d114      	bne.n	8010d34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2205      	movs	r2, #5
 8010d0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d10:	e010      	b.n	8010d34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f004 fd7e 	bl	8015814 <tcp_send_fin>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2209      	movs	r2, #9
 8010d28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d2a:	e005      	b.n	8010d38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e01c      	b.n	8010d6a <tcp_close_shutdown_fin+0xbe>
      break;
 8010d30:	bf00      	nop
 8010d32:	e002      	b.n	8010d3a <tcp_close_shutdown_fin+0x8e>
      break;
 8010d34:	bf00      	nop
 8010d36:	e000      	b.n	8010d3a <tcp_close_shutdown_fin+0x8e>
      break;
 8010d38:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d103      	bne.n	8010d4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f004 fea4 	bl	8015a90 <tcp_output>
 8010d48:	e00d      	b.n	8010d66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d52:	d108      	bne.n	8010d66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	8b5b      	ldrh	r3, [r3, #26]
 8010d58:	f043 0308 	orr.w	r3, r3, #8
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010d62:	2300      	movs	r3, #0
 8010d64:	e001      	b.n	8010d6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	0801d4a4 	.word	0x0801d4a4
 8010d78:	0801d554 	.word	0x0801d554
 8010d7c:	0801d4e8 	.word	0x0801d4e8

08010d80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d109      	bne.n	8010da2 <tcp_close+0x22>
 8010d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010dcc <tcp_close+0x4c>)
 8010d90:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010d94:	490e      	ldr	r1, [pc, #56]	@ (8010dd0 <tcp_close+0x50>)
 8010d96:	480f      	ldr	r0, [pc, #60]	@ (8010dd4 <tcp_close+0x54>)
 8010d98:	f009 fb78 	bl	801a48c <iprintf>
 8010d9c:	f06f 030f 	mvn.w	r3, #15
 8010da0:	e00f      	b.n	8010dc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7d1b      	ldrb	r3, [r3, #20]
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	d006      	beq.n	8010db8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	8b5b      	ldrh	r3, [r3, #26]
 8010dae:	f043 0310 	orr.w	r3, r3, #16
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010db8:	2101      	movs	r1, #1
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f7ff fe94 	bl	8010ae8 <tcp_close_shutdown>
 8010dc0:	4603      	mov	r3, r0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	0801d4a4 	.word	0x0801d4a4
 8010dd0:	0801d5b4 	.word	0x0801d5b4
 8010dd4:	0801d4e8 	.word	0x0801d4e8

08010dd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08e      	sub	sp, #56	@ 0x38
 8010ddc:	af04      	add	r7, sp, #16
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d107      	bne.n	8010df8 <tcp_abandon+0x20>
 8010de8:	4b52      	ldr	r3, [pc, #328]	@ (8010f34 <tcp_abandon+0x15c>)
 8010dea:	f240 223d 	movw	r2, #573	@ 0x23d
 8010dee:	4952      	ldr	r1, [pc, #328]	@ (8010f38 <tcp_abandon+0x160>)
 8010df0:	4852      	ldr	r0, [pc, #328]	@ (8010f3c <tcp_abandon+0x164>)
 8010df2:	f009 fb4b 	bl	801a48c <iprintf>
 8010df6:	e099      	b.n	8010f2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	7d1b      	ldrb	r3, [r3, #20]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d106      	bne.n	8010e0e <tcp_abandon+0x36>
 8010e00:	4b4c      	ldr	r3, [pc, #304]	@ (8010f34 <tcp_abandon+0x15c>)
 8010e02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010e06:	494e      	ldr	r1, [pc, #312]	@ (8010f40 <tcp_abandon+0x168>)
 8010e08:	484c      	ldr	r0, [pc, #304]	@ (8010f3c <tcp_abandon+0x164>)
 8010e0a:	f009 fb3f 	bl	801a48c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	7d1b      	ldrb	r3, [r3, #20]
 8010e12:	2b0a      	cmp	r3, #10
 8010e14:	d107      	bne.n	8010e26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	484a      	ldr	r0, [pc, #296]	@ (8010f44 <tcp_abandon+0x16c>)
 8010e1a:	f001 fa23 	bl	8012264 <tcp_pcb_remove>
    tcp_free(pcb);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff fdb0 	bl	8010984 <tcp_free>
 8010e24:	e082      	b.n	8010f2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	7d1b      	ldrb	r3, [r3, #20]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d126      	bne.n	8010e9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	8adb      	ldrh	r3, [r3, #22]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d02e      	beq.n	8010eb6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e58:	4b3b      	ldr	r3, [pc, #236]	@ (8010f48 <tcp_abandon+0x170>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d105      	bne.n	8010e6e <tcp_abandon+0x96>
 8010e62:	4b39      	ldr	r3, [pc, #228]	@ (8010f48 <tcp_abandon+0x170>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	4a37      	ldr	r2, [pc, #220]	@ (8010f48 <tcp_abandon+0x170>)
 8010e6a:	6013      	str	r3, [r2, #0]
 8010e6c:	e013      	b.n	8010e96 <tcp_abandon+0xbe>
 8010e6e:	4b36      	ldr	r3, [pc, #216]	@ (8010f48 <tcp_abandon+0x170>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	61fb      	str	r3, [r7, #28]
 8010e74:	e00c      	b.n	8010e90 <tcp_abandon+0xb8>
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d104      	bne.n	8010e8a <tcp_abandon+0xb2>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	68da      	ldr	r2, [r3, #12]
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	60da      	str	r2, [r3, #12]
 8010e88:	e005      	b.n	8010e96 <tcp_abandon+0xbe>
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	61fb      	str	r3, [r7, #28]
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1ef      	bne.n	8010e76 <tcp_abandon+0x9e>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	60da      	str	r2, [r3, #12]
 8010e9c:	e00b      	b.n	8010eb6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8adb      	ldrh	r3, [r3, #22]
 8010ea6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	4828      	ldr	r0, [pc, #160]	@ (8010f4c <tcp_abandon+0x174>)
 8010eac:	f001 f9da 	bl	8012264 <tcp_pcb_remove>
 8010eb0:	4b27      	ldr	r3, [pc, #156]	@ (8010f50 <tcp_abandon+0x178>)
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d004      	beq.n	8010ec8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fed8 	bl	8011c78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d004      	beq.n	8010eda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 fecf 	bl	8011c78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d004      	beq.n	8010eec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fec6 	bl	8011c78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00e      	beq.n	8010f10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010ef2:	6879      	ldr	r1, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	8b12      	ldrh	r2, [r2, #24]
 8010efc:	9202      	str	r2, [sp, #8]
 8010efe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010f00:	9201      	str	r2, [sp, #4]
 8010f02:	9300      	str	r3, [sp, #0]
 8010f04:	460b      	mov	r3, r1
 8010f06:	697a      	ldr	r2, [r7, #20]
 8010f08:	69b9      	ldr	r1, [r7, #24]
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f005 fb74 	bl	80165f8 <tcp_rst>
    }
    last_state = pcb->state;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	7d1b      	ldrb	r3, [r3, #20]
 8010f14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7ff fd34 	bl	8010984 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d004      	beq.n	8010f2c <tcp_abandon+0x154>
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f06f 010c 	mvn.w	r1, #12
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	4798      	blx	r3
  }
}
 8010f2c:	3728      	adds	r7, #40	@ 0x28
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	0801d4a4 	.word	0x0801d4a4
 8010f38:	0801d5e8 	.word	0x0801d5e8
 8010f3c:	0801d4e8 	.word	0x0801d4e8
 8010f40:	0801d604 	.word	0x0801d604
 8010f44:	2000c780 	.word	0x2000c780
 8010f48:	2000c774 	.word	0x2000c774
 8010f4c:	2000c77c 	.word	0x2000c77c
 8010f50:	2000c784 	.word	0x2000c784

08010f54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7ff ff3a 	bl	8010dd8 <tcp_abandon>
}
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b088      	sub	sp, #32
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	4613      	mov	r3, r2
 8010f78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010f7a:	2304      	movs	r3, #4
 8010f7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010f84:	4b3e      	ldr	r3, [pc, #248]	@ (8011080 <tcp_bind+0x114>)
 8010f86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d109      	bne.n	8010fa2 <tcp_bind+0x36>
 8010f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8011084 <tcp_bind+0x118>)
 8010f90:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8010f94:	493c      	ldr	r1, [pc, #240]	@ (8011088 <tcp_bind+0x11c>)
 8010f96:	483d      	ldr	r0, [pc, #244]	@ (801108c <tcp_bind+0x120>)
 8010f98:	f009 fa78 	bl	801a48c <iprintf>
 8010f9c:	f06f 030f 	mvn.w	r3, #15
 8010fa0:	e06a      	b.n	8011078 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	7d1b      	ldrb	r3, [r3, #20]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <tcp_bind+0x52>
 8010faa:	4b36      	ldr	r3, [pc, #216]	@ (8011084 <tcp_bind+0x118>)
 8010fac:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010fb0:	4937      	ldr	r1, [pc, #220]	@ (8011090 <tcp_bind+0x124>)
 8010fb2:	4836      	ldr	r0, [pc, #216]	@ (801108c <tcp_bind+0x120>)
 8010fb4:	f009 fa6a 	bl	801a48c <iprintf>
 8010fb8:	f06f 0305 	mvn.w	r3, #5
 8010fbc:	e05c      	b.n	8011078 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010fbe:	88fb      	ldrh	r3, [r7, #6]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d109      	bne.n	8010fd8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8010fc4:	f000 f9f0 	bl	80113a8 <tcp_new_port>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010fcc:	88fb      	ldrh	r3, [r7, #6]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d135      	bne.n	801103e <tcp_bind+0xd2>
      return ERR_BUF;
 8010fd2:	f06f 0301 	mvn.w	r3, #1
 8010fd6:	e04f      	b.n	8011078 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010fd8:	2300      	movs	r3, #0
 8010fda:	61fb      	str	r3, [r7, #28]
 8010fdc:	e02b      	b.n	8011036 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010fde:	4a2d      	ldr	r2, [pc, #180]	@ (8011094 <tcp_bind+0x128>)
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	61bb      	str	r3, [r7, #24]
 8010fea:	e01e      	b.n	801102a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	8adb      	ldrh	r3, [r3, #22]
 8010ff0:	88fa      	ldrh	r2, [r7, #6]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d116      	bne.n	8011024 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010ff6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d010      	beq.n	801101e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00c      	beq.n	801101e <tcp_bind+0xb2>
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d009      	beq.n	801101e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d005      	beq.n	801101e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801101a:	429a      	cmp	r2, r3
 801101c:	d102      	bne.n	8011024 <tcp_bind+0xb8>
              return ERR_USE;
 801101e:	f06f 0307 	mvn.w	r3, #7
 8011022:	e029      	b.n	8011078 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	61bb      	str	r3, [r7, #24]
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1dd      	bne.n	8010fec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	3301      	adds	r3, #1
 8011034:	61fb      	str	r3, [r7, #28]
 8011036:	69fa      	ldr	r2, [r7, #28]
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	429a      	cmp	r2, r3
 801103c:	dbcf      	blt.n	8010fde <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d00c      	beq.n	801105e <tcp_bind+0xf2>
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d008      	beq.n	801105e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d002      	beq.n	8011058 <tcp_bind+0xec>
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	e000      	b.n	801105a <tcp_bind+0xee>
 8011058:	2300      	movs	r3, #0
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	88fa      	ldrh	r2, [r7, #6]
 8011062:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011064:	4b0c      	ldr	r3, [pc, #48]	@ (8011098 <tcp_bind+0x12c>)
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	60da      	str	r2, [r3, #12]
 801106c:	4a0a      	ldr	r2, [pc, #40]	@ (8011098 <tcp_bind+0x12c>)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6013      	str	r3, [r2, #0]
 8011072:	f005 fc83 	bl	801697c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3720      	adds	r7, #32
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	0801f534 	.word	0x0801f534
 8011084:	0801d4a4 	.word	0x0801d4a4
 8011088:	0801d638 	.word	0x0801d638
 801108c:	0801d4e8 	.word	0x0801d4e8
 8011090:	0801d650 	.word	0x0801d650
 8011094:	0801f50c 	.word	0x0801f50c
 8011098:	2000c774 	.word	0x2000c774

0801109c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	4613      	mov	r3, r2
 80110a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d106      	bne.n	80110be <tcp_accept_null+0x22>
 80110b0:	4b07      	ldr	r3, [pc, #28]	@ (80110d0 <tcp_accept_null+0x34>)
 80110b2:	f240 320f 	movw	r2, #783	@ 0x30f
 80110b6:	4907      	ldr	r1, [pc, #28]	@ (80110d4 <tcp_accept_null+0x38>)
 80110b8:	4807      	ldr	r0, [pc, #28]	@ (80110d8 <tcp_accept_null+0x3c>)
 80110ba:	f009 f9e7 	bl	801a48c <iprintf>

  tcp_abort(pcb);
 80110be:	68b8      	ldr	r0, [r7, #8]
 80110c0:	f7ff ff48 	bl	8010f54 <tcp_abort>

  return ERR_ABRT;
 80110c4:	f06f 030c 	mvn.w	r3, #12
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	0801d4a4 	.word	0x0801d4a4
 80110d4:	0801d678 	.word	0x0801d678
 80110d8:	0801d4e8 	.word	0x0801d4e8

080110dc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80110e8:	78fb      	ldrb	r3, [r7, #3]
 80110ea:	2200      	movs	r2, #0
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 f806 	bl	8011100 <tcp_listen_with_backlog_and_err>
 80110f4:	4603      	mov	r3, r0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
	...

08011100 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b088      	sub	sp, #32
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	460b      	mov	r3, r1
 801110a:	607a      	str	r2, [r7, #4]
 801110c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d109      	bne.n	801112c <tcp_listen_with_backlog_and_err+0x2c>
 8011118:	4b47      	ldr	r3, [pc, #284]	@ (8011238 <tcp_listen_with_backlog_and_err+0x138>)
 801111a:	f240 3259 	movw	r2, #857	@ 0x359
 801111e:	4947      	ldr	r1, [pc, #284]	@ (801123c <tcp_listen_with_backlog_and_err+0x13c>)
 8011120:	4847      	ldr	r0, [pc, #284]	@ (8011240 <tcp_listen_with_backlog_and_err+0x140>)
 8011122:	f009 f9b3 	bl	801a48c <iprintf>
 8011126:	23f0      	movs	r3, #240	@ 0xf0
 8011128:	76fb      	strb	r3, [r7, #27]
 801112a:	e079      	b.n	8011220 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d009      	beq.n	8011148 <tcp_listen_with_backlog_and_err+0x48>
 8011134:	4b40      	ldr	r3, [pc, #256]	@ (8011238 <tcp_listen_with_backlog_and_err+0x138>)
 8011136:	f240 325a 	movw	r2, #858	@ 0x35a
 801113a:	4942      	ldr	r1, [pc, #264]	@ (8011244 <tcp_listen_with_backlog_and_err+0x144>)
 801113c:	4840      	ldr	r0, [pc, #256]	@ (8011240 <tcp_listen_with_backlog_and_err+0x140>)
 801113e:	f009 f9a5 	bl	801a48c <iprintf>
 8011142:	23f1      	movs	r3, #241	@ 0xf1
 8011144:	76fb      	strb	r3, [r7, #27]
 8011146:	e06b      	b.n	8011220 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	7d1b      	ldrb	r3, [r3, #20]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d104      	bne.n	801115a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011154:	23f7      	movs	r3, #247	@ 0xf7
 8011156:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011158:	e062      	b.n	8011220 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801115a:	2002      	movs	r0, #2
 801115c:	f7fe fa7e 	bl	800f65c <memp_malloc>
 8011160:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d102      	bne.n	801116e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011168:	23ff      	movs	r3, #255	@ 0xff
 801116a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801116c:	e058      	b.n	8011220 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	691a      	ldr	r2, [r3, #16]
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	8ada      	ldrh	r2, [r3, #22]
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	2201      	movs	r2, #1
 8011182:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	7d5a      	ldrb	r2, [r3, #21]
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	7a5a      	ldrb	r2, [r3, #9]
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	2200      	movs	r2, #0
 8011198:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	7ada      	ldrb	r2, [r3, #11]
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	7a9a      	ldrb	r2, [r3, #10]
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	8adb      	ldrh	r3, [r3, #22]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d021      	beq.n	80111fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80111ba:	4b23      	ldr	r3, [pc, #140]	@ (8011248 <tcp_listen_with_backlog_and_err+0x148>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d105      	bne.n	80111d0 <tcp_listen_with_backlog_and_err+0xd0>
 80111c4:	4b20      	ldr	r3, [pc, #128]	@ (8011248 <tcp_listen_with_backlog_and_err+0x148>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	4a1f      	ldr	r2, [pc, #124]	@ (8011248 <tcp_listen_with_backlog_and_err+0x148>)
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	e013      	b.n	80111f8 <tcp_listen_with_backlog_and_err+0xf8>
 80111d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011248 <tcp_listen_with_backlog_and_err+0x148>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	617b      	str	r3, [r7, #20]
 80111d6:	e00c      	b.n	80111f2 <tcp_listen_with_backlog_and_err+0xf2>
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d104      	bne.n	80111ec <tcp_listen_with_backlog_and_err+0xec>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	68da      	ldr	r2, [r3, #12]
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	60da      	str	r2, [r3, #12]
 80111ea:	e005      	b.n	80111f8 <tcp_listen_with_backlog_and_err+0xf8>
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	617b      	str	r3, [r7, #20]
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1ef      	bne.n	80111d8 <tcp_listen_with_backlog_and_err+0xd8>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f7ff fbc0 	bl	8010984 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	4a11      	ldr	r2, [pc, #68]	@ (801124c <tcp_listen_with_backlog_and_err+0x14c>)
 8011208:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801120a:	4b11      	ldr	r3, [pc, #68]	@ (8011250 <tcp_listen_with_backlog_and_err+0x150>)
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	60da      	str	r2, [r3, #12]
 8011212:	4a0f      	ldr	r2, [pc, #60]	@ (8011250 <tcp_listen_with_backlog_and_err+0x150>)
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	6013      	str	r3, [r2, #0]
 8011218:	f005 fbb0 	bl	801697c <tcp_timer_needed>
  res = ERR_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d002      	beq.n	801122c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	7efa      	ldrb	r2, [r7, #27]
 801122a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801122c:	69fb      	ldr	r3, [r7, #28]
}
 801122e:	4618      	mov	r0, r3
 8011230:	3720      	adds	r7, #32
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	0801d4a4 	.word	0x0801d4a4
 801123c:	0801d698 	.word	0x0801d698
 8011240:	0801d4e8 	.word	0x0801d4e8
 8011244:	0801d6c8 	.word	0x0801d6c8
 8011248:	2000c774 	.word	0x2000c774
 801124c:	0801109d 	.word	0x0801109d
 8011250:	2000c778 	.word	0x2000c778

08011254 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d106      	bne.n	8011270 <tcp_update_rcv_ann_wnd+0x1c>
 8011262:	4b25      	ldr	r3, [pc, #148]	@ (80112f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8011264:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011268:	4924      	ldr	r1, [pc, #144]	@ (80112fc <tcp_update_rcv_ann_wnd+0xa8>)
 801126a:	4825      	ldr	r0, [pc, #148]	@ (8011300 <tcp_update_rcv_ann_wnd+0xac>)
 801126c:	f009 f90e 	bl	801a48c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011278:	4413      	add	r3, r2
 801127a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011284:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011288:	bf28      	it	cs
 801128a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801128e:	b292      	uxth	r2, r2
 8011290:	4413      	add	r3, r2
 8011292:	68fa      	ldr	r2, [r7, #12]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	2b00      	cmp	r3, #0
 8011298:	db08      	blt.n	80112ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	e020      	b.n	80112ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dd03      	ble.n	80112c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112c0:	e014      	b.n	80112ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112d4:	d306      	bcc.n	80112e4 <tcp_update_rcv_ann_wnd+0x90>
 80112d6:	4b08      	ldr	r3, [pc, #32]	@ (80112f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80112d8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80112dc:	4909      	ldr	r1, [pc, #36]	@ (8011304 <tcp_update_rcv_ann_wnd+0xb0>)
 80112de:	4808      	ldr	r0, [pc, #32]	@ (8011300 <tcp_update_rcv_ann_wnd+0xac>)
 80112e0:	f009 f8d4 	bl	801a48c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80112ec:	2300      	movs	r3, #0
  }
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	0801d4a4 	.word	0x0801d4a4
 80112fc:	0801d700 	.word	0x0801d700
 8011300:	0801d4e8 	.word	0x0801d4e8
 8011304:	0801d724 	.word	0x0801d724

08011308 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	460b      	mov	r3, r1
 8011312:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d107      	bne.n	801132a <tcp_recved+0x22>
 801131a:	4b1f      	ldr	r3, [pc, #124]	@ (8011398 <tcp_recved+0x90>)
 801131c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011320:	491e      	ldr	r1, [pc, #120]	@ (801139c <tcp_recved+0x94>)
 8011322:	481f      	ldr	r0, [pc, #124]	@ (80113a0 <tcp_recved+0x98>)
 8011324:	f009 f8b2 	bl	801a48c <iprintf>
 8011328:	e032      	b.n	8011390 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7d1b      	ldrb	r3, [r3, #20]
 801132e:	2b01      	cmp	r3, #1
 8011330:	d106      	bne.n	8011340 <tcp_recved+0x38>
 8011332:	4b19      	ldr	r3, [pc, #100]	@ (8011398 <tcp_recved+0x90>)
 8011334:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011338:	491a      	ldr	r1, [pc, #104]	@ (80113a4 <tcp_recved+0x9c>)
 801133a:	4819      	ldr	r0, [pc, #100]	@ (80113a0 <tcp_recved+0x98>)
 801133c:	f009 f8a6 	bl	801a48c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011344:	887b      	ldrh	r3, [r7, #2]
 8011346:	4413      	add	r3, r2
 8011348:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801134a:	89fb      	ldrh	r3, [r7, #14]
 801134c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011350:	d804      	bhi.n	801135c <tcp_recved+0x54>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011356:	89fa      	ldrh	r2, [r7, #14]
 8011358:	429a      	cmp	r2, r3
 801135a:	d204      	bcs.n	8011366 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011362:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011364:	e002      	b.n	801136c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	89fa      	ldrh	r2, [r7, #14]
 801136a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff ff71 	bl	8011254 <tcp_update_rcv_ann_wnd>
 8011372:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801137a:	d309      	bcc.n	8011390 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	8b5b      	ldrh	r3, [r3, #26]
 8011380:	f043 0302 	orr.w	r3, r3, #2
 8011384:	b29a      	uxth	r2, r3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f004 fb80 	bl	8015a90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011390:	3710      	adds	r7, #16
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	0801d4a4 	.word	0x0801d4a4
 801139c:	0801d740 	.word	0x0801d740
 80113a0:	0801d4e8 	.word	0x0801d4e8
 80113a4:	0801d758 	.word	0x0801d758

080113a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80113b2:	4b1e      	ldr	r3, [pc, #120]	@ (801142c <tcp_new_port+0x84>)
 80113b4:	881b      	ldrh	r3, [r3, #0]
 80113b6:	3301      	adds	r3, #1
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	4b1c      	ldr	r3, [pc, #112]	@ (801142c <tcp_new_port+0x84>)
 80113bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80113be:	4b1b      	ldr	r3, [pc, #108]	@ (801142c <tcp_new_port+0x84>)
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d103      	bne.n	80113d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80113ca:	4b18      	ldr	r3, [pc, #96]	@ (801142c <tcp_new_port+0x84>)
 80113cc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80113d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80113d2:	2300      	movs	r3, #0
 80113d4:	71fb      	strb	r3, [r7, #7]
 80113d6:	e01e      	b.n	8011416 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80113d8:	79fb      	ldrb	r3, [r7, #7]
 80113da:	4a15      	ldr	r2, [pc, #84]	@ (8011430 <tcp_new_port+0x88>)
 80113dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	603b      	str	r3, [r7, #0]
 80113e4:	e011      	b.n	801140a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	8ada      	ldrh	r2, [r3, #22]
 80113ea:	4b10      	ldr	r3, [pc, #64]	@ (801142c <tcp_new_port+0x84>)
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d108      	bne.n	8011404 <tcp_new_port+0x5c>
        n++;
 80113f2:	88bb      	ldrh	r3, [r7, #4]
 80113f4:	3301      	adds	r3, #1
 80113f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80113f8:	88bb      	ldrh	r3, [r7, #4]
 80113fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80113fe:	d3d8      	bcc.n	80113b2 <tcp_new_port+0xa>
          return 0;
 8011400:	2300      	movs	r3, #0
 8011402:	e00d      	b.n	8011420 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	603b      	str	r3, [r7, #0]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1ea      	bne.n	80113e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	3301      	adds	r3, #1
 8011414:	71fb      	strb	r3, [r7, #7]
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	2b03      	cmp	r3, #3
 801141a:	d9dd      	bls.n	80113d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801141c:	4b03      	ldr	r3, [pc, #12]	@ (801142c <tcp_new_port+0x84>)
 801141e:	881b      	ldrh	r3, [r3, #0]
}
 8011420:	4618      	mov	r0, r3
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	2000009c 	.word	0x2000009c
 8011430:	0801f50c 	.word	0x0801f50c

08011434 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011434:	b5b0      	push	{r4, r5, r7, lr}
 8011436:	b090      	sub	sp, #64	@ 0x40
 8011438:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801143a:	2300      	movs	r3, #0
 801143c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011440:	4b95      	ldr	r3, [pc, #596]	@ (8011698 <tcp_slowtmr+0x264>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	4a94      	ldr	r2, [pc, #592]	@ (8011698 <tcp_slowtmr+0x264>)
 8011448:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801144a:	4b94      	ldr	r3, [pc, #592]	@ (801169c <tcp_slowtmr+0x268>)
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	3301      	adds	r3, #1
 8011450:	b2da      	uxtb	r2, r3
 8011452:	4b92      	ldr	r3, [pc, #584]	@ (801169c <tcp_slowtmr+0x268>)
 8011454:	701a      	strb	r2, [r3, #0]
 8011456:	e000      	b.n	801145a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8011458:	bf00      	nop
  prev = NULL;
 801145a:	2300      	movs	r3, #0
 801145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801145e:	4b90      	ldr	r3, [pc, #576]	@ (80116a0 <tcp_slowtmr+0x26c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011464:	e29f      	b.n	80119a6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011468:	7d1b      	ldrb	r3, [r3, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <tcp_slowtmr+0x48>
 801146e:	4b8d      	ldr	r3, [pc, #564]	@ (80116a4 <tcp_slowtmr+0x270>)
 8011470:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011474:	498c      	ldr	r1, [pc, #560]	@ (80116a8 <tcp_slowtmr+0x274>)
 8011476:	488d      	ldr	r0, [pc, #564]	@ (80116ac <tcp_slowtmr+0x278>)
 8011478:	f009 f808 	bl	801a48c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147e:	7d1b      	ldrb	r3, [r3, #20]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d106      	bne.n	8011492 <tcp_slowtmr+0x5e>
 8011484:	4b87      	ldr	r3, [pc, #540]	@ (80116a4 <tcp_slowtmr+0x270>)
 8011486:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801148a:	4989      	ldr	r1, [pc, #548]	@ (80116b0 <tcp_slowtmr+0x27c>)
 801148c:	4887      	ldr	r0, [pc, #540]	@ (80116ac <tcp_slowtmr+0x278>)
 801148e:	f008 fffd 	bl	801a48c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011494:	7d1b      	ldrb	r3, [r3, #20]
 8011496:	2b0a      	cmp	r3, #10
 8011498:	d106      	bne.n	80114a8 <tcp_slowtmr+0x74>
 801149a:	4b82      	ldr	r3, [pc, #520]	@ (80116a4 <tcp_slowtmr+0x270>)
 801149c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80114a0:	4984      	ldr	r1, [pc, #528]	@ (80116b4 <tcp_slowtmr+0x280>)
 80114a2:	4882      	ldr	r0, [pc, #520]	@ (80116ac <tcp_slowtmr+0x278>)
 80114a4:	f008 fff2 	bl	801a48c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80114a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114aa:	7f9a      	ldrb	r2, [r3, #30]
 80114ac:	4b7b      	ldr	r3, [pc, #492]	@ (801169c <tcp_slowtmr+0x268>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d105      	bne.n	80114c0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80114b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80114b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80114be:	e272      	b.n	80119a6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80114c0:	4b76      	ldr	r3, [pc, #472]	@ (801169c <tcp_slowtmr+0x268>)
 80114c2:	781a      	ldrb	r2, [r3, #0]
 80114c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80114d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d6:	7d1b      	ldrb	r3, [r3, #20]
 80114d8:	2b02      	cmp	r3, #2
 80114da:	d10a      	bne.n	80114f2 <tcp_slowtmr+0xbe>
 80114dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	d905      	bls.n	80114f2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80114e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114ea:	3301      	adds	r3, #1
 80114ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114f0:	e11e      	b.n	8011730 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80114f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114f8:	2b0b      	cmp	r3, #11
 80114fa:	d905      	bls.n	8011508 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80114fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011500:	3301      	adds	r3, #1
 8011502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011506:	e113      	b.n	8011730 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801150e:	2b00      	cmp	r3, #0
 8011510:	d075      	beq.n	80115fe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011516:	2b00      	cmp	r3, #0
 8011518:	d006      	beq.n	8011528 <tcp_slowtmr+0xf4>
 801151a:	4b62      	ldr	r3, [pc, #392]	@ (80116a4 <tcp_slowtmr+0x270>)
 801151c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011520:	4965      	ldr	r1, [pc, #404]	@ (80116b8 <tcp_slowtmr+0x284>)
 8011522:	4862      	ldr	r0, [pc, #392]	@ (80116ac <tcp_slowtmr+0x278>)
 8011524:	f008 ffb2 	bl	801a48c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801152c:	2b00      	cmp	r3, #0
 801152e:	d106      	bne.n	801153e <tcp_slowtmr+0x10a>
 8011530:	4b5c      	ldr	r3, [pc, #368]	@ (80116a4 <tcp_slowtmr+0x270>)
 8011532:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011536:	4961      	ldr	r1, [pc, #388]	@ (80116bc <tcp_slowtmr+0x288>)
 8011538:	485c      	ldr	r0, [pc, #368]	@ (80116ac <tcp_slowtmr+0x278>)
 801153a:	f008 ffa7 	bl	801a48c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801153e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011540:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011544:	2b0b      	cmp	r3, #11
 8011546:	d905      	bls.n	8011554 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801154c:	3301      	adds	r3, #1
 801154e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011552:	e0ed      	b.n	8011730 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011556:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801155a:	3b01      	subs	r3, #1
 801155c:	4a58      	ldr	r2, [pc, #352]	@ (80116c0 <tcp_slowtmr+0x28c>)
 801155e:	5cd3      	ldrb	r3, [r2, r3]
 8011560:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011564:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011568:	7c7a      	ldrb	r2, [r7, #17]
 801156a:	429a      	cmp	r2, r3
 801156c:	d907      	bls.n	801157e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011570:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011574:	3301      	adds	r3, #1
 8011576:	b2da      	uxtb	r2, r3
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011584:	7c7a      	ldrb	r2, [r7, #17]
 8011586:	429a      	cmp	r2, r3
 8011588:	f200 80d2 	bhi.w	8011730 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801158c:	2301      	movs	r3, #1
 801158e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8011590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011596:	2b00      	cmp	r3, #0
 8011598:	d108      	bne.n	80115ac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801159a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801159c:	f005 f920 	bl	80167e0 <tcp_zero_window_probe>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d014      	beq.n	80115d0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80115a6:	2300      	movs	r3, #0
 80115a8:	623b      	str	r3, [r7, #32]
 80115aa:	e011      	b.n	80115d0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80115ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80115b2:	4619      	mov	r1, r3
 80115b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115b6:	f003 ffe5 	bl	8015584 <tcp_split_unsent_seg>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d107      	bne.n	80115d0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80115c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115c2:	f004 fa65 	bl	8015a90 <tcp_output>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d101      	bne.n	80115d0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80115cc:	2300      	movs	r3, #0
 80115ce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f000 80ac 	beq.w	8011730 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80115d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80115e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80115e6:	2b06      	cmp	r3, #6
 80115e8:	f200 80a2 	bhi.w	8011730 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80115ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80115f2:	3301      	adds	r3, #1
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80115fc:	e098      	b.n	8011730 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80115fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011600:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011604:	2b00      	cmp	r3, #0
 8011606:	db0f      	blt.n	8011628 <tcp_slowtmr+0x1f4>
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801160e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011612:	4293      	cmp	r3, r2
 8011614:	d008      	beq.n	8011628 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801161c:	b29b      	uxth	r3, r3
 801161e:	3301      	adds	r3, #1
 8011620:	b29b      	uxth	r3, r3
 8011622:	b21a      	sxth	r2, r3
 8011624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011626:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011630:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011634:	429a      	cmp	r2, r3
 8011636:	db7b      	blt.n	8011730 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801163a:	f004 fd1d 	bl	8016078 <tcp_rexmit_rto_prepare>
 801163e:	4603      	mov	r3, r0
 8011640:	2b00      	cmp	r3, #0
 8011642:	d007      	beq.n	8011654 <tcp_slowtmr+0x220>
 8011644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011648:	2b00      	cmp	r3, #0
 801164a:	d171      	bne.n	8011730 <tcp_slowtmr+0x2fc>
 801164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d06d      	beq.n	8011730 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8011654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011656:	7d1b      	ldrb	r3, [r3, #20]
 8011658:	2b02      	cmp	r3, #2
 801165a:	d03a      	beq.n	80116d2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011662:	2b0c      	cmp	r3, #12
 8011664:	bf28      	it	cs
 8011666:	230c      	movcs	r3, #12
 8011668:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011670:	10db      	asrs	r3, r3, #3
 8011672:	b21b      	sxth	r3, r3
 8011674:	461a      	mov	r2, r3
 8011676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011678:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801167c:	4413      	add	r3, r2
 801167e:	7efa      	ldrb	r2, [r7, #27]
 8011680:	4910      	ldr	r1, [pc, #64]	@ (80116c4 <tcp_slowtmr+0x290>)
 8011682:	5c8a      	ldrb	r2, [r1, r2]
 8011684:	4093      	lsls	r3, r2
 8011686:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801168e:	4293      	cmp	r3, r2
 8011690:	dc1a      	bgt.n	80116c8 <tcp_slowtmr+0x294>
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	b21a      	sxth	r2, r3
 8011696:	e019      	b.n	80116cc <tcp_slowtmr+0x298>
 8011698:	2000c770 	.word	0x2000c770
 801169c:	2000c786 	.word	0x2000c786
 80116a0:	2000c77c 	.word	0x2000c77c
 80116a4:	0801d4a4 	.word	0x0801d4a4
 80116a8:	0801d7e8 	.word	0x0801d7e8
 80116ac:	0801d4e8 	.word	0x0801d4e8
 80116b0:	0801d814 	.word	0x0801d814
 80116b4:	0801d840 	.word	0x0801d840
 80116b8:	0801d870 	.word	0x0801d870
 80116bc:	0801d8a4 	.word	0x0801d8a4
 80116c0:	0801f504 	.word	0x0801f504
 80116c4:	0801f4f4 	.word	0x0801f4f4
 80116c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80116cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80116d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d4:	2200      	movs	r2, #0
 80116d6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80116d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80116de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116e4:	4293      	cmp	r3, r2
 80116e6:	bf28      	it	cs
 80116e8:	4613      	movcs	r3, r2
 80116ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80116ec:	8a7b      	ldrh	r3, [r7, #18]
 80116ee:	085b      	lsrs	r3, r3, #1
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80116f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80116fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	b29b      	uxth	r3, r3
 8011706:	429a      	cmp	r2, r3
 8011708:	d206      	bcs.n	8011718 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801170c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	b29a      	uxth	r2, r3
 8011712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011714:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8011722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011724:	2200      	movs	r2, #0
 8011726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801172a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801172c:	f004 fd14 	bl	8016158 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011732:	7d1b      	ldrb	r3, [r3, #20]
 8011734:	2b06      	cmp	r3, #6
 8011736:	d111      	bne.n	801175c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00b      	beq.n	801175c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011744:	4b9d      	ldr	r3, [pc, #628]	@ (80119bc <tcp_slowtmr+0x588>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801174a:	6a1b      	ldr	r3, [r3, #32]
 801174c:	1ad3      	subs	r3, r2, r3
 801174e:	2b28      	cmp	r3, #40	@ 0x28
 8011750:	d904      	bls.n	801175c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8011752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011756:	3301      	adds	r3, #1
 8011758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175e:	7a5b      	ldrb	r3, [r3, #9]
 8011760:	f003 0308 	and.w	r3, r3, #8
 8011764:	2b00      	cmp	r3, #0
 8011766:	d04c      	beq.n	8011802 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8011768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801176c:	2b04      	cmp	r3, #4
 801176e:	d003      	beq.n	8011778 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8011770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011772:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011774:	2b07      	cmp	r3, #7
 8011776:	d144      	bne.n	8011802 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011778:	4b90      	ldr	r3, [pc, #576]	@ (80119bc <tcp_slowtmr+0x588>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177e:	6a1b      	ldr	r3, [r3, #32]
 8011780:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011788:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801178c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8011790:	498b      	ldr	r1, [pc, #556]	@ (80119c0 <tcp_slowtmr+0x58c>)
 8011792:	fba1 1303 	umull	r1, r3, r1, r3
 8011796:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011798:	429a      	cmp	r2, r3
 801179a:	d90a      	bls.n	80117b2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801179c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117a0:	3301      	adds	r3, #1
 80117a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80117a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80117aa:	3301      	adds	r3, #1
 80117ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80117b0:	e027      	b.n	8011802 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117b2:	4b82      	ldr	r3, [pc, #520]	@ (80119bc <tcp_slowtmr+0x588>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80117bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117be:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80117c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80117c8:	4618      	mov	r0, r3
 80117ca:	4b7e      	ldr	r3, [pc, #504]	@ (80119c4 <tcp_slowtmr+0x590>)
 80117cc:	fb00 f303 	mul.w	r3, r0, r3
 80117d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80117d2:	497b      	ldr	r1, [pc, #492]	@ (80119c0 <tcp_slowtmr+0x58c>)
 80117d4:	fba1 1303 	umull	r1, r3, r1, r3
 80117d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117da:	429a      	cmp	r2, r3
 80117dc:	d911      	bls.n	8011802 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80117de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80117e0:	f004 ffbe 	bl	8016760 <tcp_keepalive>
 80117e4:	4603      	mov	r3, r0
 80117e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80117ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d107      	bne.n	8011802 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80117f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80117f8:	3301      	adds	r3, #1
 80117fa:	b2da      	uxtb	r2, r3
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011806:	2b00      	cmp	r3, #0
 8011808:	d011      	beq.n	801182e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801180a:	4b6c      	ldr	r3, [pc, #432]	@ (80119bc <tcp_slowtmr+0x588>)
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011810:	6a1b      	ldr	r3, [r3, #32]
 8011812:	1ad2      	subs	r2, r2, r3
 8011814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011816:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801181a:	4619      	mov	r1, r3
 801181c:	460b      	mov	r3, r1
 801181e:	005b      	lsls	r3, r3, #1
 8011820:	440b      	add	r3, r1
 8011822:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011824:	429a      	cmp	r2, r3
 8011826:	d302      	bcc.n	801182e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8011828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801182a:	f000 fe7f 	bl	801252c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011830:	7d1b      	ldrb	r3, [r3, #20]
 8011832:	2b03      	cmp	r3, #3
 8011834:	d10b      	bne.n	801184e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011836:	4b61      	ldr	r3, [pc, #388]	@ (80119bc <tcp_slowtmr+0x588>)
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183c:	6a1b      	ldr	r3, [r3, #32]
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	2b28      	cmp	r3, #40	@ 0x28
 8011842:	d904      	bls.n	801184e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8011844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011848:	3301      	adds	r3, #1
 801184a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801184e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011850:	7d1b      	ldrb	r3, [r3, #20]
 8011852:	2b09      	cmp	r3, #9
 8011854:	d10b      	bne.n	801186e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011856:	4b59      	ldr	r3, [pc, #356]	@ (80119bc <tcp_slowtmr+0x588>)
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185c:	6a1b      	ldr	r3, [r3, #32]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	2bf0      	cmp	r3, #240	@ 0xf0
 8011862:	d904      	bls.n	801186e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8011864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011868:	3301      	adds	r3, #1
 801186a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801186e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011872:	2b00      	cmp	r3, #0
 8011874:	d060      	beq.n	8011938 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8011876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801187c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801187e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011880:	f000 fca0 	bl	80121c4 <tcp_pcb_purge>
      if (prev != NULL) {
 8011884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011886:	2b00      	cmp	r3, #0
 8011888:	d010      	beq.n	80118ac <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801188a:	4b4f      	ldr	r3, [pc, #316]	@ (80119c8 <tcp_slowtmr+0x594>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011890:	429a      	cmp	r2, r3
 8011892:	d106      	bne.n	80118a2 <tcp_slowtmr+0x46e>
 8011894:	4b4d      	ldr	r3, [pc, #308]	@ (80119cc <tcp_slowtmr+0x598>)
 8011896:	f240 526d 	movw	r2, #1389	@ 0x56d
 801189a:	494d      	ldr	r1, [pc, #308]	@ (80119d0 <tcp_slowtmr+0x59c>)
 801189c:	484d      	ldr	r0, [pc, #308]	@ (80119d4 <tcp_slowtmr+0x5a0>)
 801189e:	f008 fdf5 	bl	801a48c <iprintf>
        prev->next = pcb->next;
 80118a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a4:	68da      	ldr	r2, [r3, #12]
 80118a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a8:	60da      	str	r2, [r3, #12]
 80118aa:	e00f      	b.n	80118cc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80118ac:	4b46      	ldr	r3, [pc, #280]	@ (80119c8 <tcp_slowtmr+0x594>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d006      	beq.n	80118c4 <tcp_slowtmr+0x490>
 80118b6:	4b45      	ldr	r3, [pc, #276]	@ (80119cc <tcp_slowtmr+0x598>)
 80118b8:	f240 5271 	movw	r2, #1393	@ 0x571
 80118bc:	4946      	ldr	r1, [pc, #280]	@ (80119d8 <tcp_slowtmr+0x5a4>)
 80118be:	4845      	ldr	r0, [pc, #276]	@ (80119d4 <tcp_slowtmr+0x5a0>)
 80118c0:	f008 fde4 	bl	801a48c <iprintf>
        tcp_active_pcbs = pcb->next;
 80118c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	4a3f      	ldr	r2, [pc, #252]	@ (80119c8 <tcp_slowtmr+0x594>)
 80118ca:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80118cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d013      	beq.n	80118fc <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80118d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80118d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80118dc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80118de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e0:	3304      	adds	r3, #4
 80118e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118e4:	8ad2      	ldrh	r2, [r2, #22]
 80118e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118e8:	8b09      	ldrh	r1, [r1, #24]
 80118ea:	9102      	str	r1, [sp, #8]
 80118ec:	9201      	str	r2, [sp, #4]
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	462b      	mov	r3, r5
 80118f2:	4622      	mov	r2, r4
 80118f4:	4601      	mov	r1, r0
 80118f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118f8:	f004 fe7e 	bl	80165f8 <tcp_rst>
      err_arg = pcb->callback_arg;
 80118fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011904:	7d1b      	ldrb	r3, [r3, #20]
 8011906:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011912:	6838      	ldr	r0, [r7, #0]
 8011914:	f7ff f836 	bl	8010984 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011918:	4b30      	ldr	r3, [pc, #192]	@ (80119dc <tcp_slowtmr+0x5a8>)
 801191a:	2200      	movs	r2, #0
 801191c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d004      	beq.n	801192e <tcp_slowtmr+0x4fa>
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	f06f 010c 	mvn.w	r1, #12
 801192a:	68b8      	ldr	r0, [r7, #8]
 801192c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801192e:	4b2b      	ldr	r3, [pc, #172]	@ (80119dc <tcp_slowtmr+0x5a8>)
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d037      	beq.n	80119a6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8011936:	e590      	b.n	801145a <tcp_slowtmr+0x26>
      prev = pcb;
 8011938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801193a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011944:	7f1b      	ldrb	r3, [r3, #28]
 8011946:	3301      	adds	r3, #1
 8011948:	b2da      	uxtb	r2, r3
 801194a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801194c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801194e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011950:	7f1a      	ldrb	r2, [r3, #28]
 8011952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011954:	7f5b      	ldrb	r3, [r3, #29]
 8011956:	429a      	cmp	r2, r3
 8011958:	d325      	bcc.n	80119a6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801195c:	2200      	movs	r2, #0
 801195e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011960:	4b1e      	ldr	r3, [pc, #120]	@ (80119dc <tcp_slowtmr+0x5a8>)
 8011962:	2200      	movs	r2, #0
 8011964:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00b      	beq.n	8011988 <tcp_slowtmr+0x554>
 8011970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011978:	6912      	ldr	r2, [r2, #16]
 801197a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801197c:	4610      	mov	r0, r2
 801197e:	4798      	blx	r3
 8011980:	4603      	mov	r3, r0
 8011982:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011986:	e002      	b.n	801198e <tcp_slowtmr+0x55a>
 8011988:	2300      	movs	r3, #0
 801198a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801198e:	4b13      	ldr	r3, [pc, #76]	@ (80119dc <tcp_slowtmr+0x5a8>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	f47f ad60 	bne.w	8011458 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011998:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801199c:	2b00      	cmp	r3, #0
 801199e:	d102      	bne.n	80119a6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 80119a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119a2:	f004 f875 	bl	8015a90 <tcp_output>
  while (pcb != NULL) {
 80119a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f47f ad5c 	bne.w	8011466 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80119b2:	4b0b      	ldr	r3, [pc, #44]	@ (80119e0 <tcp_slowtmr+0x5ac>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80119b8:	e067      	b.n	8011a8a <tcp_slowtmr+0x656>
 80119ba:	bf00      	nop
 80119bc:	2000c770 	.word	0x2000c770
 80119c0:	10624dd3 	.word	0x10624dd3
 80119c4:	000124f8 	.word	0x000124f8
 80119c8:	2000c77c 	.word	0x2000c77c
 80119cc:	0801d4a4 	.word	0x0801d4a4
 80119d0:	0801d8dc 	.word	0x0801d8dc
 80119d4:	0801d4e8 	.word	0x0801d4e8
 80119d8:	0801d908 	.word	0x0801d908
 80119dc:	2000c784 	.word	0x2000c784
 80119e0:	2000c780 	.word	0x2000c780
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80119e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e6:	7d1b      	ldrb	r3, [r3, #20]
 80119e8:	2b0a      	cmp	r3, #10
 80119ea:	d006      	beq.n	80119fa <tcp_slowtmr+0x5c6>
 80119ec:	4b2b      	ldr	r3, [pc, #172]	@ (8011a9c <tcp_slowtmr+0x668>)
 80119ee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80119f2:	492b      	ldr	r1, [pc, #172]	@ (8011aa0 <tcp_slowtmr+0x66c>)
 80119f4:	482b      	ldr	r0, [pc, #172]	@ (8011aa4 <tcp_slowtmr+0x670>)
 80119f6:	f008 fd49 	bl	801a48c <iprintf>
    pcb_remove = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011a00:	4b29      	ldr	r3, [pc, #164]	@ (8011aa8 <tcp_slowtmr+0x674>)
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a06:	6a1b      	ldr	r3, [r3, #32]
 8011a08:	1ad3      	subs	r3, r2, r3
 8011a0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8011a0c:	d904      	bls.n	8011a18 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a12:	3301      	adds	r3, #1
 8011a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d02f      	beq.n	8011a80 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a22:	f000 fbcf 	bl	80121c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d010      	beq.n	8011a4e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8011aac <tcp_slowtmr+0x678>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d106      	bne.n	8011a44 <tcp_slowtmr+0x610>
 8011a36:	4b19      	ldr	r3, [pc, #100]	@ (8011a9c <tcp_slowtmr+0x668>)
 8011a38:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011a3c:	491c      	ldr	r1, [pc, #112]	@ (8011ab0 <tcp_slowtmr+0x67c>)
 8011a3e:	4819      	ldr	r0, [pc, #100]	@ (8011aa4 <tcp_slowtmr+0x670>)
 8011a40:	f008 fd24 	bl	801a48c <iprintf>
        prev->next = pcb->next;
 8011a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a46:	68da      	ldr	r2, [r3, #12]
 8011a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a4a:	60da      	str	r2, [r3, #12]
 8011a4c:	e00f      	b.n	8011a6e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011a4e:	4b17      	ldr	r3, [pc, #92]	@ (8011aac <tcp_slowtmr+0x678>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d006      	beq.n	8011a66 <tcp_slowtmr+0x632>
 8011a58:	4b10      	ldr	r3, [pc, #64]	@ (8011a9c <tcp_slowtmr+0x668>)
 8011a5a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011a5e:	4915      	ldr	r1, [pc, #84]	@ (8011ab4 <tcp_slowtmr+0x680>)
 8011a60:	4810      	ldr	r0, [pc, #64]	@ (8011aa4 <tcp_slowtmr+0x670>)
 8011a62:	f008 fd13 	bl	801a48c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a68:	68db      	ldr	r3, [r3, #12]
 8011a6a:	4a10      	ldr	r2, [pc, #64]	@ (8011aac <tcp_slowtmr+0x678>)
 8011a6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011a78:	69f8      	ldr	r0, [r7, #28]
 8011a7a:	f7fe ff83 	bl	8010984 <tcp_free>
 8011a7e:	e004      	b.n	8011a8a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1a9      	bne.n	80119e4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8011a90:	bf00      	nop
 8011a92:	bf00      	nop
 8011a94:	3730      	adds	r7, #48	@ 0x30
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bdb0      	pop	{r4, r5, r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	0801d4a4 	.word	0x0801d4a4
 8011aa0:	0801d934 	.word	0x0801d934
 8011aa4:	0801d4e8 	.word	0x0801d4e8
 8011aa8:	2000c770 	.word	0x2000c770
 8011aac:	2000c780 	.word	0x2000c780
 8011ab0:	0801d964 	.word	0x0801d964
 8011ab4:	0801d98c 	.word	0x0801d98c

08011ab8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011abe:	4b2d      	ldr	r3, [pc, #180]	@ (8011b74 <tcp_fasttmr+0xbc>)
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8011b74 <tcp_fasttmr+0xbc>)
 8011ac8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011aca:	4b2b      	ldr	r3, [pc, #172]	@ (8011b78 <tcp_fasttmr+0xc0>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011ad0:	e048      	b.n	8011b64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	7f9a      	ldrb	r2, [r3, #30]
 8011ad6:	4b27      	ldr	r3, [pc, #156]	@ (8011b74 <tcp_fasttmr+0xbc>)
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d03f      	beq.n	8011b5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011ade:	4b25      	ldr	r3, [pc, #148]	@ (8011b74 <tcp_fasttmr+0xbc>)
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	8b5b      	ldrh	r3, [r3, #26]
 8011aea:	f003 0301 	and.w	r3, r3, #1
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d010      	beq.n	8011b14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	8b5b      	ldrh	r3, [r3, #26]
 8011af6:	f043 0302 	orr.w	r3, r3, #2
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f003 ffc5 	bl	8015a90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8b5b      	ldrh	r3, [r3, #26]
 8011b0a:	f023 0303 	bic.w	r3, r3, #3
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	8b5b      	ldrh	r3, [r3, #26]
 8011b18:	f003 0308 	and.w	r3, r3, #8
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d009      	beq.n	8011b34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	8b5b      	ldrh	r3, [r3, #26]
 8011b24:	f023 0308 	bic.w	r3, r3, #8
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff f8bc 	bl	8010cac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011b42:	4b0e      	ldr	r3, [pc, #56]	@ (8011b7c <tcp_fasttmr+0xc4>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 f819 	bl	8011b80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8011b7c <tcp_fasttmr+0xc4>)
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d000      	beq.n	8011b58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011b56:	e7b8      	b.n	8011aca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	607b      	str	r3, [r7, #4]
 8011b5c:	e002      	b.n	8011b64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1b3      	bne.n	8011ad2 <tcp_fasttmr+0x1a>
    }
  }
}
 8011b6a:	bf00      	nop
 8011b6c:	bf00      	nop
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	2000c786 	.word	0x2000c786
 8011b78:	2000c77c 	.word	0x2000c77c
 8011b7c:	2000c784 	.word	0x2000c784

08011b80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011b80:	b590      	push	{r4, r7, lr}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d109      	bne.n	8011ba2 <tcp_process_refused_data+0x22>
 8011b8e:	4b37      	ldr	r3, [pc, #220]	@ (8011c6c <tcp_process_refused_data+0xec>)
 8011b90:	f240 6209 	movw	r2, #1545	@ 0x609
 8011b94:	4936      	ldr	r1, [pc, #216]	@ (8011c70 <tcp_process_refused_data+0xf0>)
 8011b96:	4837      	ldr	r0, [pc, #220]	@ (8011c74 <tcp_process_refused_data+0xf4>)
 8011b98:	f008 fc78 	bl	801a48c <iprintf>
 8011b9c:	f06f 030f 	mvn.w	r3, #15
 8011ba0:	e060      	b.n	8011c64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ba6:	7b5b      	ldrb	r3, [r3, #13]
 8011ba8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00b      	beq.n	8011bd8 <tcp_process_refused_data+0x58>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6918      	ldr	r0, [r3, #16]
 8011bca:	2300      	movs	r3, #0
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	6879      	ldr	r1, [r7, #4]
 8011bd0:	47a0      	blx	r4
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	73fb      	strb	r3, [r7, #15]
 8011bd6:	e007      	b.n	8011be8 <tcp_process_refused_data+0x68>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	2000      	movs	r0, #0
 8011be0:	f000 f8c2 	bl	8011d68 <tcp_recv_null>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d12a      	bne.n	8011c46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011bf0:	7bbb      	ldrb	r3, [r7, #14]
 8011bf2:	f003 0320 	and.w	r3, r3, #32
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d033      	beq.n	8011c62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bfe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011c02:	d005      	beq.n	8011c10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c08:	3301      	adds	r3, #1
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00b      	beq.n	8011c32 <tcp_process_refused_data+0xb2>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6918      	ldr	r0, [r3, #16]
 8011c24:	2300      	movs	r3, #0
 8011c26:	2200      	movs	r2, #0
 8011c28:	6879      	ldr	r1, [r7, #4]
 8011c2a:	47a0      	blx	r4
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73fb      	strb	r3, [r7, #15]
 8011c30:	e001      	b.n	8011c36 <tcp_process_refused_data+0xb6>
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c3a:	f113 0f0d 	cmn.w	r3, #13
 8011c3e:	d110      	bne.n	8011c62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011c40:	f06f 030c 	mvn.w	r3, #12
 8011c44:	e00e      	b.n	8011c64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c4a:	f113 0f0d 	cmn.w	r3, #13
 8011c4e:	d102      	bne.n	8011c56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011c50:	f06f 030c 	mvn.w	r3, #12
 8011c54:	e006      	b.n	8011c64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011c5c:	f06f 0304 	mvn.w	r3, #4
 8011c60:	e000      	b.n	8011c64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3714      	adds	r7, #20
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd90      	pop	{r4, r7, pc}
 8011c6c:	0801d4a4 	.word	0x0801d4a4
 8011c70:	0801d9b4 	.word	0x0801d9b4
 8011c74:	0801d4e8 	.word	0x0801d4e8

08011c78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011c80:	e007      	b.n	8011c92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f80a 	bl	8011ca2 <tcp_seg_free>
    seg = next;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d1f4      	bne.n	8011c82 <tcp_segs_free+0xa>
  }
}
 8011c98:	bf00      	nop
 8011c9a:	bf00      	nop
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b082      	sub	sp, #8
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d00c      	beq.n	8011cca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d004      	beq.n	8011cc2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fe fbb5 	bl	801042c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011cc2:	6879      	ldr	r1, [r7, #4]
 8011cc4:	2003      	movs	r0, #3
 8011cc6:	f7fd fd3f 	bl	800f748 <memp_free>
  }
}
 8011cca:	bf00      	nop
 8011ccc:	3708      	adds	r7, #8
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
	...

08011cd4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	460b      	mov	r3, r1
 8011cde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d107      	bne.n	8011cf6 <tcp_setprio+0x22>
 8011ce6:	4b07      	ldr	r3, [pc, #28]	@ (8011d04 <tcp_setprio+0x30>)
 8011ce8:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8011cec:	4906      	ldr	r1, [pc, #24]	@ (8011d08 <tcp_setprio+0x34>)
 8011cee:	4807      	ldr	r0, [pc, #28]	@ (8011d0c <tcp_setprio+0x38>)
 8011cf0:	f008 fbcc 	bl	801a48c <iprintf>
 8011cf4:	e002      	b.n	8011cfc <tcp_setprio+0x28>

  pcb->prio = prio;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	755a      	strb	r2, [r3, #21]
}
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	0801d4a4 	.word	0x0801d4a4
 8011d08:	0801d9dc 	.word	0x0801d9dc
 8011d0c:	0801d4e8 	.word	0x0801d4e8

08011d10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d106      	bne.n	8011d2c <tcp_seg_copy+0x1c>
 8011d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8011d5c <tcp_seg_copy+0x4c>)
 8011d20:	f240 6282 	movw	r2, #1666	@ 0x682
 8011d24:	490e      	ldr	r1, [pc, #56]	@ (8011d60 <tcp_seg_copy+0x50>)
 8011d26:	480f      	ldr	r0, [pc, #60]	@ (8011d64 <tcp_seg_copy+0x54>)
 8011d28:	f008 fbb0 	bl	801a48c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011d2c:	2003      	movs	r0, #3
 8011d2e:	f7fd fc95 	bl	800f65c <memp_malloc>
 8011d32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <tcp_seg_copy+0x2e>
    return NULL;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e00a      	b.n	8011d54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011d3e:	2210      	movs	r2, #16
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f008 fd41 	bl	801a7ca <memcpy>
  pbuf_ref(cseg->p);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fe fc13 	bl	8010578 <pbuf_ref>
  return cseg;
 8011d52:	68fb      	ldr	r3, [r7, #12]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3710      	adds	r7, #16
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	0801d4a4 	.word	0x0801d4a4
 8011d60:	0801d9f8 	.word	0x0801d9f8
 8011d64:	0801d4e8 	.word	0x0801d4e8

08011d68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
 8011d74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d109      	bne.n	8011d90 <tcp_recv_null+0x28>
 8011d7c:	4b12      	ldr	r3, [pc, #72]	@ (8011dc8 <tcp_recv_null+0x60>)
 8011d7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011d82:	4912      	ldr	r1, [pc, #72]	@ (8011dcc <tcp_recv_null+0x64>)
 8011d84:	4812      	ldr	r0, [pc, #72]	@ (8011dd0 <tcp_recv_null+0x68>)
 8011d86:	f008 fb81 	bl	801a48c <iprintf>
 8011d8a:	f06f 030f 	mvn.w	r3, #15
 8011d8e:	e016      	b.n	8011dbe <tcp_recv_null+0x56>

  if (p != NULL) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d009      	beq.n	8011daa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	891b      	ldrh	r3, [r3, #8]
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	68b8      	ldr	r0, [r7, #8]
 8011d9e:	f7ff fab3 	bl	8011308 <tcp_recved>
    pbuf_free(p);
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f7fe fb42 	bl	801042c <pbuf_free>
 8011da8:	e008      	b.n	8011dbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d104      	bne.n	8011dbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f7fe ffe4 	bl	8010d80 <tcp_close>
 8011db8:	4603      	mov	r3, r0
 8011dba:	e000      	b.n	8011dbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	0801d4a4 	.word	0x0801d4a4
 8011dcc:	0801da14 	.word	0x0801da14
 8011dd0:	0801d4e8 	.word	0x0801d4e8

08011dd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b086      	sub	sp, #24
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	4603      	mov	r3, r0
 8011ddc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	db01      	blt.n	8011dea <tcp_kill_prio+0x16>
 8011de6:	79fb      	ldrb	r3, [r7, #7]
 8011de8:	e000      	b.n	8011dec <tcp_kill_prio+0x18>
 8011dea:	237f      	movs	r3, #127	@ 0x7f
 8011dec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011dee:	7afb      	ldrb	r3, [r7, #11]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d034      	beq.n	8011e5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011df4:	7afb      	ldrb	r3, [r7, #11]
 8011df6:	3b01      	subs	r3, #1
 8011df8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e02:	4b19      	ldr	r3, [pc, #100]	@ (8011e68 <tcp_kill_prio+0x94>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e01f      	b.n	8011e4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	7d5b      	ldrb	r3, [r3, #21]
 8011e0e:	7afa      	ldrb	r2, [r7, #11]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d80c      	bhi.n	8011e2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011e18:	7afa      	ldrb	r2, [r7, #11]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d112      	bne.n	8011e44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011e1e:	4b13      	ldr	r3, [pc, #76]	@ (8011e6c <tcp_kill_prio+0x98>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	6a1b      	ldr	r3, [r3, #32]
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d80a      	bhi.n	8011e44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e6c <tcp_kill_prio+0x98>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	6a1b      	ldr	r3, [r3, #32]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	7d5b      	ldrb	r3, [r3, #21]
 8011e42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	617b      	str	r3, [r7, #20]
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d1dc      	bne.n	8011e0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d004      	beq.n	8011e60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011e56:	6938      	ldr	r0, [r7, #16]
 8011e58:	f7ff f87c 	bl	8010f54 <tcp_abort>
 8011e5c:	e000      	b.n	8011e60 <tcp_kill_prio+0x8c>
    return;
 8011e5e:	bf00      	nop
  }
}
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	2000c77c 	.word	0x2000c77c
 8011e6c:	2000c770 	.word	0x2000c770

08011e70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	4603      	mov	r3, r0
 8011e78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011e7a:	79fb      	ldrb	r3, [r7, #7]
 8011e7c:	2b08      	cmp	r3, #8
 8011e7e:	d009      	beq.n	8011e94 <tcp_kill_state+0x24>
 8011e80:	79fb      	ldrb	r3, [r7, #7]
 8011e82:	2b09      	cmp	r3, #9
 8011e84:	d006      	beq.n	8011e94 <tcp_kill_state+0x24>
 8011e86:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef0 <tcp_kill_state+0x80>)
 8011e88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011e8c:	4919      	ldr	r1, [pc, #100]	@ (8011ef4 <tcp_kill_state+0x84>)
 8011e8e:	481a      	ldr	r0, [pc, #104]	@ (8011ef8 <tcp_kill_state+0x88>)
 8011e90:	f008 fafc 	bl	801a48c <iprintf>

  inactivity = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e9c:	4b17      	ldr	r3, [pc, #92]	@ (8011efc <tcp_kill_state+0x8c>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	617b      	str	r3, [r7, #20]
 8011ea2:	e017      	b.n	8011ed4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	7d1b      	ldrb	r3, [r3, #20]
 8011ea8:	79fa      	ldrb	r2, [r7, #7]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d10f      	bne.n	8011ece <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011eae:	4b14      	ldr	r3, [pc, #80]	@ (8011f00 <tcp_kill_state+0x90>)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d807      	bhi.n	8011ece <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011ebe:	4b10      	ldr	r3, [pc, #64]	@ (8011f00 <tcp_kill_state+0x90>)
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	6a1b      	ldr	r3, [r3, #32]
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	617b      	str	r3, [r7, #20]
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1e4      	bne.n	8011ea4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	6938      	ldr	r0, [r7, #16]
 8011ee4:	f7fe ff78 	bl	8010dd8 <tcp_abandon>
  }
}
 8011ee8:	bf00      	nop
 8011eea:	3718      	adds	r7, #24
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	0801d4a4 	.word	0x0801d4a4
 8011ef4:	0801da30 	.word	0x0801da30
 8011ef8:	0801d4e8 	.word	0x0801d4e8
 8011efc:	2000c77c 	.word	0x2000c77c
 8011f00:	2000c770 	.word	0x2000c770

08011f04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f12:	4b12      	ldr	r3, [pc, #72]	@ (8011f5c <tcp_kill_timewait+0x58>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	60fb      	str	r3, [r7, #12]
 8011f18:	e012      	b.n	8011f40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011f1a:	4b11      	ldr	r3, [pc, #68]	@ (8011f60 <tcp_kill_timewait+0x5c>)
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6a1b      	ldr	r3, [r3, #32]
 8011f22:	1ad3      	subs	r3, r2, r3
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d807      	bhi.n	8011f3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011f60 <tcp_kill_timewait+0x5c>)
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	6a1b      	ldr	r3, [r3, #32]
 8011f32:	1ad3      	subs	r3, r2, r3
 8011f34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	60fb      	str	r3, [r7, #12]
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d1e9      	bne.n	8011f1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011f4c:	68b8      	ldr	r0, [r7, #8]
 8011f4e:	f7ff f801 	bl	8010f54 <tcp_abort>
  }
}
 8011f52:	bf00      	nop
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	2000c780 	.word	0x2000c780
 8011f60:	2000c770 	.word	0x2000c770

08011f64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011f6a:	4b10      	ldr	r3, [pc, #64]	@ (8011fac <tcp_handle_closepend+0x48>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f70:	e014      	b.n	8011f9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	8b5b      	ldrh	r3, [r3, #26]
 8011f7c:	f003 0308 	and.w	r3, r3, #8
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d009      	beq.n	8011f98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	8b5b      	ldrh	r3, [r3, #26]
 8011f88:	f023 0308 	bic.w	r3, r3, #8
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7fe fe8a 	bl	8010cac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d1e7      	bne.n	8011f72 <tcp_handle_closepend+0xe>
  }
}
 8011fa2:	bf00      	nop
 8011fa4:	bf00      	nop
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	2000c77c 	.word	0x2000c77c

08011fb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fba:	2001      	movs	r0, #1
 8011fbc:	f7fd fb4e 	bl	800f65c <memp_malloc>
 8011fc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d126      	bne.n	8012016 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011fc8:	f7ff ffcc 	bl	8011f64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011fcc:	f7ff ff9a 	bl	8011f04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	f7fd fb43 	bl	800f65c <memp_malloc>
 8011fd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d11b      	bne.n	8012016 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011fde:	2009      	movs	r0, #9
 8011fe0:	f7ff ff46 	bl	8011e70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fe4:	2001      	movs	r0, #1
 8011fe6:	f7fd fb39 	bl	800f65c <memp_malloc>
 8011fea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d111      	bne.n	8012016 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011ff2:	2008      	movs	r0, #8
 8011ff4:	f7ff ff3c 	bl	8011e70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ff8:	2001      	movs	r0, #1
 8011ffa:	f7fd fb2f 	bl	800f65c <memp_malloc>
 8011ffe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d107      	bne.n	8012016 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012006:	79fb      	ldrb	r3, [r7, #7]
 8012008:	4618      	mov	r0, r3
 801200a:	f7ff fee3 	bl	8011dd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801200e:	2001      	movs	r0, #1
 8012010:	f7fd fb24 	bl	800f65c <memp_malloc>
 8012014:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d03f      	beq.n	801209c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801201c:	229c      	movs	r2, #156	@ 0x9c
 801201e:	2100      	movs	r1, #0
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f008 fae8 	bl	801a5f6 <memset>
    pcb->prio = prio;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	79fa      	ldrb	r2, [r7, #7]
 801202a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012032:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801203c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	22ff      	movs	r2, #255	@ 0xff
 801204a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012052:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2206      	movs	r2, #6
 8012058:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2206      	movs	r2, #6
 8012060:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012068:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2201      	movs	r2, #1
 801206e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012072:	4b0d      	ldr	r3, [pc, #52]	@ (80120a8 <tcp_alloc+0xf8>)
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801207a:	4b0c      	ldr	r3, [pc, #48]	@ (80120ac <tcp_alloc+0xfc>)
 801207c:	781a      	ldrb	r2, [r3, #0]
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012088:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4a08      	ldr	r2, [pc, #32]	@ (80120b0 <tcp_alloc+0x100>)
 8012090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	4a07      	ldr	r2, [pc, #28]	@ (80120b4 <tcp_alloc+0x104>)
 8012098:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801209c:	68fb      	ldr	r3, [r7, #12]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	2000c770 	.word	0x2000c770
 80120ac:	2000c786 	.word	0x2000c786
 80120b0:	08011d69 	.word	0x08011d69
 80120b4:	006ddd00 	.word	0x006ddd00

080120b8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80120bc:	2040      	movs	r0, #64	@ 0x40
 80120be:	f7ff ff77 	bl	8011fb0 <tcp_alloc>
 80120c2:	4603      	mov	r3, r0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00e      	beq.n	80120f6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7d1b      	ldrb	r3, [r3, #20]
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d106      	bne.n	80120ee <tcp_recv+0x26>
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <tcp_recv+0x38>)
 80120e2:	f240 72df 	movw	r2, #2015	@ 0x7df
 80120e6:	4907      	ldr	r1, [pc, #28]	@ (8012104 <tcp_recv+0x3c>)
 80120e8:	4807      	ldr	r0, [pc, #28]	@ (8012108 <tcp_recv+0x40>)
 80120ea:	f008 f9cf 	bl	801a48c <iprintf>
    pcb->recv = recv;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	683a      	ldr	r2, [r7, #0]
 80120f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80120f6:	bf00      	nop
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	0801d4a4 	.word	0x0801d4a4
 8012104:	0801da40 	.word	0x0801da40
 8012108:	0801d4e8 	.word	0x0801d4e8

0801210c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00e      	beq.n	801213a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	7d1b      	ldrb	r3, [r3, #20]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d106      	bne.n	8012132 <tcp_sent+0x26>
 8012124:	4b07      	ldr	r3, [pc, #28]	@ (8012144 <tcp_sent+0x38>)
 8012126:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801212a:	4907      	ldr	r1, [pc, #28]	@ (8012148 <tcp_sent+0x3c>)
 801212c:	4807      	ldr	r0, [pc, #28]	@ (801214c <tcp_sent+0x40>)
 801212e:	f008 f9ad 	bl	801a48c <iprintf>
    pcb->sent = sent;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	683a      	ldr	r2, [r7, #0]
 8012136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801213a:	bf00      	nop
 801213c:	3708      	adds	r7, #8
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	0801d4a4 	.word	0x0801d4a4
 8012148:	0801da68 	.word	0x0801da68
 801214c:	0801d4e8 	.word	0x0801d4e8

08012150 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d00e      	beq.n	801217e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	7d1b      	ldrb	r3, [r3, #20]
 8012164:	2b01      	cmp	r3, #1
 8012166:	d106      	bne.n	8012176 <tcp_err+0x26>
 8012168:	4b07      	ldr	r3, [pc, #28]	@ (8012188 <tcp_err+0x38>)
 801216a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801216e:	4907      	ldr	r1, [pc, #28]	@ (801218c <tcp_err+0x3c>)
 8012170:	4807      	ldr	r0, [pc, #28]	@ (8012190 <tcp_err+0x40>)
 8012172:	f008 f98b 	bl	801a48c <iprintf>
    pcb->errf = err;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801217e:	bf00      	nop
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	0801d4a4 	.word	0x0801d4a4
 801218c:	0801da90 	.word	0x0801da90
 8012190:	0801d4e8 	.word	0x0801d4e8

08012194 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d008      	beq.n	80121b6 <tcp_accept+0x22>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	7d1b      	ldrb	r3, [r3, #20]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d104      	bne.n	80121b6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	619a      	str	r2, [r3, #24]
  }
}
 80121b6:	bf00      	nop
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
	...

080121c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d107      	bne.n	80121e2 <tcp_pcb_purge+0x1e>
 80121d2:	4b21      	ldr	r3, [pc, #132]	@ (8012258 <tcp_pcb_purge+0x94>)
 80121d4:	f640 0251 	movw	r2, #2129	@ 0x851
 80121d8:	4920      	ldr	r1, [pc, #128]	@ (801225c <tcp_pcb_purge+0x98>)
 80121da:	4821      	ldr	r0, [pc, #132]	@ (8012260 <tcp_pcb_purge+0x9c>)
 80121dc:	f008 f956 	bl	801a48c <iprintf>
 80121e0:	e037      	b.n	8012252 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	7d1b      	ldrb	r3, [r3, #20]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d033      	beq.n	8012252 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80121ee:	2b0a      	cmp	r3, #10
 80121f0:	d02f      	beq.n	8012252 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d02b      	beq.n	8012252 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d007      	beq.n	8012212 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012206:	4618      	mov	r0, r3
 8012208:	f7fe f910 	bl	801042c <pbuf_free>
      pcb->refused_data = NULL;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2200      	movs	r2, #0
 8012210:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012216:	2b00      	cmp	r3, #0
 8012218:	d002      	beq.n	8012220 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 f986 	bl	801252c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012226:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801222c:	4618      	mov	r0, r3
 801222e:	f7ff fd23 	bl	8011c78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012236:	4618      	mov	r0, r3
 8012238:	f7ff fd1e 	bl	8011c78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2200      	movs	r2, #0
 801224e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012252:	3708      	adds	r7, #8
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	0801d4a4 	.word	0x0801d4a4
 801225c:	0801daf0 	.word	0x0801daf0
 8012260:	0801d4e8 	.word	0x0801d4e8

08012264 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d106      	bne.n	8012282 <tcp_pcb_remove+0x1e>
 8012274:	4b3e      	ldr	r3, [pc, #248]	@ (8012370 <tcp_pcb_remove+0x10c>)
 8012276:	f640 0283 	movw	r2, #2179	@ 0x883
 801227a:	493e      	ldr	r1, [pc, #248]	@ (8012374 <tcp_pcb_remove+0x110>)
 801227c:	483e      	ldr	r0, [pc, #248]	@ (8012378 <tcp_pcb_remove+0x114>)
 801227e:	f008 f905 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <tcp_pcb_remove+0x32>
 8012288:	4b39      	ldr	r3, [pc, #228]	@ (8012370 <tcp_pcb_remove+0x10c>)
 801228a:	f640 0284 	movw	r2, #2180	@ 0x884
 801228e:	493b      	ldr	r1, [pc, #236]	@ (801237c <tcp_pcb_remove+0x118>)
 8012290:	4839      	ldr	r0, [pc, #228]	@ (8012378 <tcp_pcb_remove+0x114>)
 8012292:	f008 f8fb 	bl	801a48c <iprintf>

  TCP_RMV(pcblist, pcb);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	683a      	ldr	r2, [r7, #0]
 801229c:	429a      	cmp	r2, r3
 801229e:	d105      	bne.n	80122ac <tcp_pcb_remove+0x48>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68da      	ldr	r2, [r3, #12]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	601a      	str	r2, [r3, #0]
 80122aa:	e013      	b.n	80122d4 <tcp_pcb_remove+0x70>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	60fb      	str	r3, [r7, #12]
 80122b2:	e00c      	b.n	80122ce <tcp_pcb_remove+0x6a>
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	683a      	ldr	r2, [r7, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d104      	bne.n	80122c8 <tcp_pcb_remove+0x64>
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	68da      	ldr	r2, [r3, #12]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	60da      	str	r2, [r3, #12]
 80122c6:	e005      	b.n	80122d4 <tcp_pcb_remove+0x70>
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	60fb      	str	r3, [r7, #12]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1ef      	bne.n	80122b4 <tcp_pcb_remove+0x50>
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	2200      	movs	r2, #0
 80122d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80122da:	6838      	ldr	r0, [r7, #0]
 80122dc:	f7ff ff72 	bl	80121c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	7d1b      	ldrb	r3, [r3, #20]
 80122e4:	2b0a      	cmp	r3, #10
 80122e6:	d013      	beq.n	8012310 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d00f      	beq.n	8012310 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d009      	beq.n	8012310 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	8b5b      	ldrh	r3, [r3, #26]
 8012300:	f043 0302 	orr.w	r3, r3, #2
 8012304:	b29a      	uxth	r2, r3
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801230a:	6838      	ldr	r0, [r7, #0]
 801230c:	f003 fbc0 	bl	8015a90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	7d1b      	ldrb	r3, [r3, #20]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d020      	beq.n	801235a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801231c:	2b00      	cmp	r3, #0
 801231e:	d006      	beq.n	801232e <tcp_pcb_remove+0xca>
 8012320:	4b13      	ldr	r3, [pc, #76]	@ (8012370 <tcp_pcb_remove+0x10c>)
 8012322:	f640 0293 	movw	r2, #2195	@ 0x893
 8012326:	4916      	ldr	r1, [pc, #88]	@ (8012380 <tcp_pcb_remove+0x11c>)
 8012328:	4813      	ldr	r0, [pc, #76]	@ (8012378 <tcp_pcb_remove+0x114>)
 801232a:	f008 f8af 	bl	801a48c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012332:	2b00      	cmp	r3, #0
 8012334:	d006      	beq.n	8012344 <tcp_pcb_remove+0xe0>
 8012336:	4b0e      	ldr	r3, [pc, #56]	@ (8012370 <tcp_pcb_remove+0x10c>)
 8012338:	f640 0294 	movw	r2, #2196	@ 0x894
 801233c:	4911      	ldr	r1, [pc, #68]	@ (8012384 <tcp_pcb_remove+0x120>)
 801233e:	480e      	ldr	r0, [pc, #56]	@ (8012378 <tcp_pcb_remove+0x114>)
 8012340:	f008 f8a4 	bl	801a48c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012348:	2b00      	cmp	r3, #0
 801234a:	d006      	beq.n	801235a <tcp_pcb_remove+0xf6>
 801234c:	4b08      	ldr	r3, [pc, #32]	@ (8012370 <tcp_pcb_remove+0x10c>)
 801234e:	f640 0296 	movw	r2, #2198	@ 0x896
 8012352:	490d      	ldr	r1, [pc, #52]	@ (8012388 <tcp_pcb_remove+0x124>)
 8012354:	4808      	ldr	r0, [pc, #32]	@ (8012378 <tcp_pcb_remove+0x114>)
 8012356:	f008 f899 	bl	801a48c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	2200      	movs	r2, #0
 801235e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	2200      	movs	r2, #0
 8012364:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012366:	bf00      	nop
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	0801d4a4 	.word	0x0801d4a4
 8012374:	0801db0c 	.word	0x0801db0c
 8012378:	0801d4e8 	.word	0x0801d4e8
 801237c:	0801db28 	.word	0x0801db28
 8012380:	0801db48 	.word	0x0801db48
 8012384:	0801db60 	.word	0x0801db60
 8012388:	0801db7c 	.word	0x0801db7c

0801238c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_next_iss+0x1c>
 801239a:	4b0a      	ldr	r3, [pc, #40]	@ (80123c4 <tcp_next_iss+0x38>)
 801239c:	f640 02af 	movw	r2, #2223	@ 0x8af
 80123a0:	4909      	ldr	r1, [pc, #36]	@ (80123c8 <tcp_next_iss+0x3c>)
 80123a2:	480a      	ldr	r0, [pc, #40]	@ (80123cc <tcp_next_iss+0x40>)
 80123a4:	f008 f872 	bl	801a48c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80123a8:	4b09      	ldr	r3, [pc, #36]	@ (80123d0 <tcp_next_iss+0x44>)
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	4b09      	ldr	r3, [pc, #36]	@ (80123d4 <tcp_next_iss+0x48>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4413      	add	r3, r2
 80123b2:	4a07      	ldr	r2, [pc, #28]	@ (80123d0 <tcp_next_iss+0x44>)
 80123b4:	6013      	str	r3, [r2, #0]
  return iss;
 80123b6:	4b06      	ldr	r3, [pc, #24]	@ (80123d0 <tcp_next_iss+0x44>)
 80123b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	0801d4a4 	.word	0x0801d4a4
 80123c8:	0801db94 	.word	0x0801db94
 80123cc:	0801d4e8 	.word	0x0801d4e8
 80123d0:	200000a0 	.word	0x200000a0
 80123d4:	2000c770 	.word	0x2000c770

080123d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
 80123de:	4603      	mov	r3, r0
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <tcp_eff_send_mss_netif+0x22>
 80123ec:	4b14      	ldr	r3, [pc, #80]	@ (8012440 <tcp_eff_send_mss_netif+0x68>)
 80123ee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80123f2:	4914      	ldr	r1, [pc, #80]	@ (8012444 <tcp_eff_send_mss_netif+0x6c>)
 80123f4:	4814      	ldr	r0, [pc, #80]	@ (8012448 <tcp_eff_send_mss_netif+0x70>)
 80123f6:	f008 f849 	bl	801a48c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012400:	89fb      	ldrh	r3, [r7, #14]
 8012402:	e019      	b.n	8012438 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012408:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801240a:	8afb      	ldrh	r3, [r7, #22]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d012      	beq.n	8012436 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012410:	2328      	movs	r3, #40	@ 0x28
 8012412:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012414:	8afa      	ldrh	r2, [r7, #22]
 8012416:	8abb      	ldrh	r3, [r7, #20]
 8012418:	429a      	cmp	r2, r3
 801241a:	d904      	bls.n	8012426 <tcp_eff_send_mss_netif+0x4e>
 801241c:	8afa      	ldrh	r2, [r7, #22]
 801241e:	8abb      	ldrh	r3, [r7, #20]
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	b29b      	uxth	r3, r3
 8012424:	e000      	b.n	8012428 <tcp_eff_send_mss_netif+0x50>
 8012426:	2300      	movs	r3, #0
 8012428:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801242a:	8a7a      	ldrh	r2, [r7, #18]
 801242c:	89fb      	ldrh	r3, [r7, #14]
 801242e:	4293      	cmp	r3, r2
 8012430:	bf28      	it	cs
 8012432:	4613      	movcs	r3, r2
 8012434:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012436:	89fb      	ldrh	r3, [r7, #14]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	0801d4a4 	.word	0x0801d4a4
 8012444:	0801dbb0 	.word	0x0801dbb0
 8012448:	0801d4e8 	.word	0x0801d4e8

0801244c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d119      	bne.n	8012494 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012460:	4b10      	ldr	r3, [pc, #64]	@ (80124a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012462:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8012466:	4910      	ldr	r1, [pc, #64]	@ (80124a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012468:	4810      	ldr	r0, [pc, #64]	@ (80124ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801246a:	f008 f80f 	bl	801a48c <iprintf>

  while (pcb != NULL) {
 801246e:	e011      	b.n	8012494 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	429a      	cmp	r2, r3
 801247a:	d108      	bne.n	801248e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7fe fd66 	bl	8010f54 <tcp_abort>
      pcb = next;
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	60fb      	str	r3, [r7, #12]
 801248c:	e002      	b.n	8012494 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d1ea      	bne.n	8012470 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801249a:	bf00      	nop
 801249c:	bf00      	nop
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	0801d4a4 	.word	0x0801d4a4
 80124a8:	0801dbd8 	.word	0x0801dbd8
 80124ac:	0801d4e8 	.word	0x0801d4e8

080124b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d02a      	beq.n	8012516 <tcp_netif_ip_addr_changed+0x66>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d026      	beq.n	8012516 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80124c8:	4b15      	ldr	r3, [pc, #84]	@ (8012520 <tcp_netif_ip_addr_changed+0x70>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4619      	mov	r1, r3
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff ffbc 	bl	801244c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80124d4:	4b13      	ldr	r3, [pc, #76]	@ (8012524 <tcp_netif_ip_addr_changed+0x74>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4619      	mov	r1, r3
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f7ff ffb6 	bl	801244c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d017      	beq.n	8012516 <tcp_netif_ip_addr_changed+0x66>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d013      	beq.n	8012516 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80124ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012528 <tcp_netif_ip_addr_changed+0x78>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	e00c      	b.n	8012510 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d103      	bne.n	801250a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	60fb      	str	r3, [r7, #12]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1ef      	bne.n	80124f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012516:	bf00      	nop
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	2000c77c 	.word	0x2000c77c
 8012524:	2000c774 	.word	0x2000c774
 8012528:	2000c778 	.word	0x2000c778

0801252c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012538:	2b00      	cmp	r3, #0
 801253a:	d007      	beq.n	801254c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012540:	4618      	mov	r0, r3
 8012542:	f7ff fb99 	bl	8011c78 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801254c:	bf00      	nop
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012554:	b590      	push	{r4, r7, lr}
 8012556:	b08d      	sub	sp, #52	@ 0x34
 8012558:	af04      	add	r7, sp, #16
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d105      	bne.n	8012570 <tcp_input+0x1c>
 8012564:	4b9b      	ldr	r3, [pc, #620]	@ (80127d4 <tcp_input+0x280>)
 8012566:	2283      	movs	r2, #131	@ 0x83
 8012568:	499b      	ldr	r1, [pc, #620]	@ (80127d8 <tcp_input+0x284>)
 801256a:	489c      	ldr	r0, [pc, #624]	@ (80127dc <tcp_input+0x288>)
 801256c:	f007 ff8e 	bl	801a48c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	4a9a      	ldr	r2, [pc, #616]	@ (80127e0 <tcp_input+0x28c>)
 8012576:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	895b      	ldrh	r3, [r3, #10]
 801257c:	2b13      	cmp	r3, #19
 801257e:	f240 83d1 	bls.w	8012d24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012582:	4b98      	ldr	r3, [pc, #608]	@ (80127e4 <tcp_input+0x290>)
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	4a97      	ldr	r2, [pc, #604]	@ (80127e4 <tcp_input+0x290>)
 8012588:	6812      	ldr	r2, [r2, #0]
 801258a:	4611      	mov	r1, r2
 801258c:	4618      	mov	r0, r3
 801258e:	f006 f867 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	f040 83c7 	bne.w	8012d28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801259a:	4b92      	ldr	r3, [pc, #584]	@ (80127e4 <tcp_input+0x290>)
 801259c:	695b      	ldr	r3, [r3, #20]
 801259e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80125a2:	2be0      	cmp	r3, #224	@ 0xe0
 80125a4:	f000 83c0 	beq.w	8012d28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80125a8:	4b8d      	ldr	r3, [pc, #564]	@ (80127e0 <tcp_input+0x28c>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fc fb7b 	bl	800ecac <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	0b1b      	lsrs	r3, r3, #12
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80125c2:	7cbb      	ldrb	r3, [r7, #18]
 80125c4:	2b13      	cmp	r3, #19
 80125c6:	f240 83b1 	bls.w	8012d2c <tcp_input+0x7d8>
 80125ca:	7cbb      	ldrb	r3, [r7, #18]
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	891b      	ldrh	r3, [r3, #8]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	f200 83aa 	bhi.w	8012d2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80125d8:	7cbb      	ldrb	r3, [r7, #18]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	3b14      	subs	r3, #20
 80125de:	b29a      	uxth	r2, r3
 80125e0:	4b81      	ldr	r3, [pc, #516]	@ (80127e8 <tcp_input+0x294>)
 80125e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80125e4:	4b81      	ldr	r3, [pc, #516]	@ (80127ec <tcp_input+0x298>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	895a      	ldrh	r2, [r3, #10]
 80125ee:	7cbb      	ldrb	r3, [r7, #18]
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d309      	bcc.n	801260a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80125f6:	4b7c      	ldr	r3, [pc, #496]	@ (80127e8 <tcp_input+0x294>)
 80125f8:	881a      	ldrh	r2, [r3, #0]
 80125fa:	4b7d      	ldr	r3, [pc, #500]	@ (80127f0 <tcp_input+0x29c>)
 80125fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80125fe:	7cbb      	ldrb	r3, [r7, #18]
 8012600:	4619      	mov	r1, r3
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7fd fe8c 	bl	8010320 <pbuf_remove_header>
 8012608:	e04e      	b.n	80126a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d105      	bne.n	801261e <tcp_input+0xca>
 8012612:	4b70      	ldr	r3, [pc, #448]	@ (80127d4 <tcp_input+0x280>)
 8012614:	22c2      	movs	r2, #194	@ 0xc2
 8012616:	4977      	ldr	r1, [pc, #476]	@ (80127f4 <tcp_input+0x2a0>)
 8012618:	4870      	ldr	r0, [pc, #448]	@ (80127dc <tcp_input+0x288>)
 801261a:	f007 ff37 	bl	801a48c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801261e:	2114      	movs	r1, #20
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7fd fe7d 	bl	8010320 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	895a      	ldrh	r2, [r3, #10]
 801262a:	4b71      	ldr	r3, [pc, #452]	@ (80127f0 <tcp_input+0x29c>)
 801262c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801262e:	4b6e      	ldr	r3, [pc, #440]	@ (80127e8 <tcp_input+0x294>)
 8012630:	881a      	ldrh	r2, [r3, #0]
 8012632:	4b6f      	ldr	r3, [pc, #444]	@ (80127f0 <tcp_input+0x29c>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801263a:	4b6d      	ldr	r3, [pc, #436]	@ (80127f0 <tcp_input+0x29c>)
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	4619      	mov	r1, r3
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f7fd fe6d 	bl	8010320 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	895b      	ldrh	r3, [r3, #10]
 801264c:	8a3a      	ldrh	r2, [r7, #16]
 801264e:	429a      	cmp	r2, r3
 8012650:	f200 836e 	bhi.w	8012d30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	4a64      	ldr	r2, [pc, #400]	@ (80127ec <tcp_input+0x298>)
 801265c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	8a3a      	ldrh	r2, [r7, #16]
 8012664:	4611      	mov	r1, r2
 8012666:	4618      	mov	r0, r3
 8012668:	f7fd fe5a 	bl	8010320 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	891a      	ldrh	r2, [r3, #8]
 8012670:	8a3b      	ldrh	r3, [r7, #16]
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	b29a      	uxth	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	895b      	ldrh	r3, [r3, #10]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d005      	beq.n	801268e <tcp_input+0x13a>
 8012682:	4b54      	ldr	r3, [pc, #336]	@ (80127d4 <tcp_input+0x280>)
 8012684:	22df      	movs	r2, #223	@ 0xdf
 8012686:	495c      	ldr	r1, [pc, #368]	@ (80127f8 <tcp_input+0x2a4>)
 8012688:	4854      	ldr	r0, [pc, #336]	@ (80127dc <tcp_input+0x288>)
 801268a:	f007 feff 	bl	801a48c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	891a      	ldrh	r2, [r3, #8]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	891b      	ldrh	r3, [r3, #8]
 8012698:	429a      	cmp	r2, r3
 801269a:	d005      	beq.n	80126a8 <tcp_input+0x154>
 801269c:	4b4d      	ldr	r3, [pc, #308]	@ (80127d4 <tcp_input+0x280>)
 801269e:	22e0      	movs	r2, #224	@ 0xe0
 80126a0:	4956      	ldr	r1, [pc, #344]	@ (80127fc <tcp_input+0x2a8>)
 80126a2:	484e      	ldr	r0, [pc, #312]	@ (80127dc <tcp_input+0x288>)
 80126a4:	f007 fef2 	bl	801a48c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80126a8:	4b4d      	ldr	r3, [pc, #308]	@ (80127e0 <tcp_input+0x28c>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	4a4b      	ldr	r2, [pc, #300]	@ (80127e0 <tcp_input+0x28c>)
 80126b2:	6814      	ldr	r4, [r2, #0]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fc faf9 	bl	800ecac <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80126be:	4b48      	ldr	r3, [pc, #288]	@ (80127e0 <tcp_input+0x28c>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	885b      	ldrh	r3, [r3, #2]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	4a46      	ldr	r2, [pc, #280]	@ (80127e0 <tcp_input+0x28c>)
 80126c8:	6814      	ldr	r4, [r2, #0]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fc faee 	bl	800ecac <lwip_htons>
 80126d0:	4603      	mov	r3, r0
 80126d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80126d4:	4b42      	ldr	r3, [pc, #264]	@ (80127e0 <tcp_input+0x28c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4a41      	ldr	r2, [pc, #260]	@ (80127e0 <tcp_input+0x28c>)
 80126dc:	6814      	ldr	r4, [r2, #0]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7fc fafa 	bl	800ecd8 <lwip_htonl>
 80126e4:	4603      	mov	r3, r0
 80126e6:	6063      	str	r3, [r4, #4]
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	4a45      	ldr	r2, [pc, #276]	@ (8012800 <tcp_input+0x2ac>)
 80126ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80126ee:	4b3c      	ldr	r3, [pc, #240]	@ (80127e0 <tcp_input+0x28c>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	689b      	ldr	r3, [r3, #8]
 80126f4:	4a3a      	ldr	r2, [pc, #232]	@ (80127e0 <tcp_input+0x28c>)
 80126f6:	6814      	ldr	r4, [r2, #0]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fc faed 	bl	800ecd8 <lwip_htonl>
 80126fe:	4603      	mov	r3, r0
 8012700:	60a3      	str	r3, [r4, #8]
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	4a3f      	ldr	r2, [pc, #252]	@ (8012804 <tcp_input+0x2b0>)
 8012706:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012708:	4b35      	ldr	r3, [pc, #212]	@ (80127e0 <tcp_input+0x28c>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	89db      	ldrh	r3, [r3, #14]
 801270e:	b29b      	uxth	r3, r3
 8012710:	4a33      	ldr	r2, [pc, #204]	@ (80127e0 <tcp_input+0x28c>)
 8012712:	6814      	ldr	r4, [r2, #0]
 8012714:	4618      	mov	r0, r3
 8012716:	f7fc fac9 	bl	800ecac <lwip_htons>
 801271a:	4603      	mov	r3, r0
 801271c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801271e:	4b30      	ldr	r3, [pc, #192]	@ (80127e0 <tcp_input+0x28c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	899b      	ldrh	r3, [r3, #12]
 8012724:	b29b      	uxth	r3, r3
 8012726:	4618      	mov	r0, r3
 8012728:	f7fc fac0 	bl	800ecac <lwip_htons>
 801272c:	4603      	mov	r3, r0
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012734:	b2da      	uxtb	r2, r3
 8012736:	4b34      	ldr	r3, [pc, #208]	@ (8012808 <tcp_input+0x2b4>)
 8012738:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	891a      	ldrh	r2, [r3, #8]
 801273e:	4b33      	ldr	r3, [pc, #204]	@ (801280c <tcp_input+0x2b8>)
 8012740:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012742:	4b31      	ldr	r3, [pc, #196]	@ (8012808 <tcp_input+0x2b4>)
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	f003 0303 	and.w	r3, r3, #3
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00c      	beq.n	8012768 <tcp_input+0x214>
    tcplen++;
 801274e:	4b2f      	ldr	r3, [pc, #188]	@ (801280c <tcp_input+0x2b8>)
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	3301      	adds	r3, #1
 8012754:	b29a      	uxth	r2, r3
 8012756:	4b2d      	ldr	r3, [pc, #180]	@ (801280c <tcp_input+0x2b8>)
 8012758:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	891a      	ldrh	r2, [r3, #8]
 801275e:	4b2b      	ldr	r3, [pc, #172]	@ (801280c <tcp_input+0x2b8>)
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	429a      	cmp	r2, r3
 8012764:	f200 82e6 	bhi.w	8012d34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012768:	2300      	movs	r3, #0
 801276a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801276c:	4b28      	ldr	r3, [pc, #160]	@ (8012810 <tcp_input+0x2bc>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	61fb      	str	r3, [r7, #28]
 8012772:	e09d      	b.n	80128b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	7d1b      	ldrb	r3, [r3, #20]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d105      	bne.n	8012788 <tcp_input+0x234>
 801277c:	4b15      	ldr	r3, [pc, #84]	@ (80127d4 <tcp_input+0x280>)
 801277e:	22fb      	movs	r2, #251	@ 0xfb
 8012780:	4924      	ldr	r1, [pc, #144]	@ (8012814 <tcp_input+0x2c0>)
 8012782:	4816      	ldr	r0, [pc, #88]	@ (80127dc <tcp_input+0x288>)
 8012784:	f007 fe82 	bl	801a48c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	2b0a      	cmp	r3, #10
 801278e:	d105      	bne.n	801279c <tcp_input+0x248>
 8012790:	4b10      	ldr	r3, [pc, #64]	@ (80127d4 <tcp_input+0x280>)
 8012792:	22fc      	movs	r2, #252	@ 0xfc
 8012794:	4920      	ldr	r1, [pc, #128]	@ (8012818 <tcp_input+0x2c4>)
 8012796:	4811      	ldr	r0, [pc, #68]	@ (80127dc <tcp_input+0x288>)
 8012798:	f007 fe78 	bl	801a48c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	7d1b      	ldrb	r3, [r3, #20]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d105      	bne.n	80127b0 <tcp_input+0x25c>
 80127a4:	4b0b      	ldr	r3, [pc, #44]	@ (80127d4 <tcp_input+0x280>)
 80127a6:	22fd      	movs	r2, #253	@ 0xfd
 80127a8:	491c      	ldr	r1, [pc, #112]	@ (801281c <tcp_input+0x2c8>)
 80127aa:	480c      	ldr	r0, [pc, #48]	@ (80127dc <tcp_input+0x288>)
 80127ac:	f007 fe6e 	bl	801a48c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	7a1b      	ldrb	r3, [r3, #8]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d033      	beq.n	8012820 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	7a1a      	ldrb	r2, [r3, #8]
 80127bc:	4b09      	ldr	r3, [pc, #36]	@ (80127e4 <tcp_input+0x290>)
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80127c4:	3301      	adds	r3, #1
 80127c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d029      	beq.n	8012820 <tcp_input+0x2cc>
      prev = pcb;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	61bb      	str	r3, [r7, #24]
      continue;
 80127d0:	e06b      	b.n	80128aa <tcp_input+0x356>
 80127d2:	bf00      	nop
 80127d4:	0801dc0c 	.word	0x0801dc0c
 80127d8:	0801dc40 	.word	0x0801dc40
 80127dc:	0801dc58 	.word	0x0801dc58
 80127e0:	2000c798 	.word	0x2000c798
 80127e4:	2000901c 	.word	0x2000901c
 80127e8:	2000c79c 	.word	0x2000c79c
 80127ec:	2000c7a0 	.word	0x2000c7a0
 80127f0:	2000c79e 	.word	0x2000c79e
 80127f4:	0801dc80 	.word	0x0801dc80
 80127f8:	0801dc90 	.word	0x0801dc90
 80127fc:	0801dc9c 	.word	0x0801dc9c
 8012800:	2000c7a8 	.word	0x2000c7a8
 8012804:	2000c7ac 	.word	0x2000c7ac
 8012808:	2000c7b4 	.word	0x2000c7b4
 801280c:	2000c7b2 	.word	0x2000c7b2
 8012810:	2000c77c 	.word	0x2000c77c
 8012814:	0801dcbc 	.word	0x0801dcbc
 8012818:	0801dce4 	.word	0x0801dce4
 801281c:	0801dd10 	.word	0x0801dd10
    }

    if (pcb->remote_port == tcphdr->src &&
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	8b1a      	ldrh	r2, [r3, #24]
 8012824:	4b72      	ldr	r3, [pc, #456]	@ (80129f0 <tcp_input+0x49c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	b29b      	uxth	r3, r3
 801282c:	429a      	cmp	r2, r3
 801282e:	d13a      	bne.n	80128a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	8ada      	ldrh	r2, [r3, #22]
 8012834:	4b6e      	ldr	r3, [pc, #440]	@ (80129f0 <tcp_input+0x49c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	885b      	ldrh	r3, [r3, #2]
 801283a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801283c:	429a      	cmp	r2, r3
 801283e:	d132      	bne.n	80128a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	685a      	ldr	r2, [r3, #4]
 8012844:	4b6b      	ldr	r3, [pc, #428]	@ (80129f4 <tcp_input+0x4a0>)
 8012846:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012848:	429a      	cmp	r2, r3
 801284a:	d12c      	bne.n	80128a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	4b68      	ldr	r3, [pc, #416]	@ (80129f4 <tcp_input+0x4a0>)
 8012852:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012854:	429a      	cmp	r2, r3
 8012856:	d126      	bne.n	80128a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	69fa      	ldr	r2, [r7, #28]
 801285e:	429a      	cmp	r2, r3
 8012860:	d106      	bne.n	8012870 <tcp_input+0x31c>
 8012862:	4b65      	ldr	r3, [pc, #404]	@ (80129f8 <tcp_input+0x4a4>)
 8012864:	f240 120d 	movw	r2, #269	@ 0x10d
 8012868:	4964      	ldr	r1, [pc, #400]	@ (80129fc <tcp_input+0x4a8>)
 801286a:	4865      	ldr	r0, [pc, #404]	@ (8012a00 <tcp_input+0x4ac>)
 801286c:	f007 fe0e 	bl	801a48c <iprintf>
      if (prev != NULL) {
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00a      	beq.n	801288c <tcp_input+0x338>
        prev->next = pcb->next;
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	68da      	ldr	r2, [r3, #12]
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801287e:	4b61      	ldr	r3, [pc, #388]	@ (8012a04 <tcp_input+0x4b0>)
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012886:	4a5f      	ldr	r2, [pc, #380]	@ (8012a04 <tcp_input+0x4b0>)
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	69fa      	ldr	r2, [r7, #28]
 8012892:	429a      	cmp	r2, r3
 8012894:	d111      	bne.n	80128ba <tcp_input+0x366>
 8012896:	4b58      	ldr	r3, [pc, #352]	@ (80129f8 <tcp_input+0x4a4>)
 8012898:	f240 1215 	movw	r2, #277	@ 0x115
 801289c:	495a      	ldr	r1, [pc, #360]	@ (8012a08 <tcp_input+0x4b4>)
 801289e:	4858      	ldr	r0, [pc, #352]	@ (8012a00 <tcp_input+0x4ac>)
 80128a0:	f007 fdf4 	bl	801a48c <iprintf>
      break;
 80128a4:	e009      	b.n	80128ba <tcp_input+0x366>
    }
    prev = pcb;
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	68db      	ldr	r3, [r3, #12]
 80128ae:	61fb      	str	r3, [r7, #28]
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f47f af5e 	bne.w	8012774 <tcp_input+0x220>
 80128b8:	e000      	b.n	80128bc <tcp_input+0x368>
      break;
 80128ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f040 80aa 	bne.w	8012a18 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80128c4:	4b51      	ldr	r3, [pc, #324]	@ (8012a0c <tcp_input+0x4b8>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	61fb      	str	r3, [r7, #28]
 80128ca:	e03f      	b.n	801294c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b0a      	cmp	r3, #10
 80128d2:	d006      	beq.n	80128e2 <tcp_input+0x38e>
 80128d4:	4b48      	ldr	r3, [pc, #288]	@ (80129f8 <tcp_input+0x4a4>)
 80128d6:	f240 121f 	movw	r2, #287	@ 0x11f
 80128da:	494d      	ldr	r1, [pc, #308]	@ (8012a10 <tcp_input+0x4bc>)
 80128dc:	4848      	ldr	r0, [pc, #288]	@ (8012a00 <tcp_input+0x4ac>)
 80128de:	f007 fdd5 	bl	801a48c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	7a1b      	ldrb	r3, [r3, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d009      	beq.n	80128fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	7a1a      	ldrb	r2, [r3, #8]
 80128ee:	4b41      	ldr	r3, [pc, #260]	@ (80129f4 <tcp_input+0x4a0>)
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128f6:	3301      	adds	r3, #1
 80128f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d122      	bne.n	8012944 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	8b1a      	ldrh	r2, [r3, #24]
 8012902:	4b3b      	ldr	r3, [pc, #236]	@ (80129f0 <tcp_input+0x49c>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	b29b      	uxth	r3, r3
 801290a:	429a      	cmp	r2, r3
 801290c:	d11b      	bne.n	8012946 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	8ada      	ldrh	r2, [r3, #22]
 8012912:	4b37      	ldr	r3, [pc, #220]	@ (80129f0 <tcp_input+0x49c>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	885b      	ldrh	r3, [r3, #2]
 8012918:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801291a:	429a      	cmp	r2, r3
 801291c:	d113      	bne.n	8012946 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801291e:	69fb      	ldr	r3, [r7, #28]
 8012920:	685a      	ldr	r2, [r3, #4]
 8012922:	4b34      	ldr	r3, [pc, #208]	@ (80129f4 <tcp_input+0x4a0>)
 8012924:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012926:	429a      	cmp	r2, r3
 8012928:	d10d      	bne.n	8012946 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	4b31      	ldr	r3, [pc, #196]	@ (80129f4 <tcp_input+0x4a0>)
 8012930:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012932:	429a      	cmp	r2, r3
 8012934:	d107      	bne.n	8012946 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012936:	69f8      	ldr	r0, [r7, #28]
 8012938:	f000 fb56 	bl	8012fe8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7fd fd75 	bl	801042c <pbuf_free>
        return;
 8012942:	e1fd      	b.n	8012d40 <tcp_input+0x7ec>
        continue;
 8012944:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	61fb      	str	r3, [r7, #28]
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d1bc      	bne.n	80128cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012952:	2300      	movs	r3, #0
 8012954:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012956:	4b2f      	ldr	r3, [pc, #188]	@ (8012a14 <tcp_input+0x4c0>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	617b      	str	r3, [r7, #20]
 801295c:	e02a      	b.n	80129b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	7a1b      	ldrb	r3, [r3, #8]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00c      	beq.n	8012980 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	7a1a      	ldrb	r2, [r3, #8]
 801296a:	4b22      	ldr	r3, [pc, #136]	@ (80129f4 <tcp_input+0x4a0>)
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012972:	3301      	adds	r3, #1
 8012974:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012976:	429a      	cmp	r2, r3
 8012978:	d002      	beq.n	8012980 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	61bb      	str	r3, [r7, #24]
        continue;
 801297e:	e016      	b.n	80129ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	8ada      	ldrh	r2, [r3, #22]
 8012984:	4b1a      	ldr	r3, [pc, #104]	@ (80129f0 <tcp_input+0x49c>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	885b      	ldrh	r3, [r3, #2]
 801298a:	b29b      	uxth	r3, r3
 801298c:	429a      	cmp	r2, r3
 801298e:	d10c      	bne.n	80129aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	4b17      	ldr	r3, [pc, #92]	@ (80129f4 <tcp_input+0x4a0>)
 8012996:	695b      	ldr	r3, [r3, #20]
 8012998:	429a      	cmp	r2, r3
 801299a:	d00f      	beq.n	80129bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d00d      	beq.n	80129be <tcp_input+0x46a>
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d009      	beq.n	80129be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	617b      	str	r3, [r7, #20]
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1d1      	bne.n	801295e <tcp_input+0x40a>
 80129ba:	e000      	b.n	80129be <tcp_input+0x46a>
            break;
 80129bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d029      	beq.n	8012a18 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00a      	beq.n	80129e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	68da      	ldr	r2, [r3, #12]
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80129d2:	4b10      	ldr	r3, [pc, #64]	@ (8012a14 <tcp_input+0x4c0>)
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80129da:	4a0e      	ldr	r2, [pc, #56]	@ (8012a14 <tcp_input+0x4c0>)
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80129e0:	6978      	ldr	r0, [r7, #20]
 80129e2:	f000 fa03 	bl	8012dec <tcp_listen_input>
      }
      pbuf_free(p);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7fd fd20 	bl	801042c <pbuf_free>
      return;
 80129ec:	e1a8      	b.n	8012d40 <tcp_input+0x7ec>
 80129ee:	bf00      	nop
 80129f0:	2000c798 	.word	0x2000c798
 80129f4:	2000901c 	.word	0x2000901c
 80129f8:	0801dc0c 	.word	0x0801dc0c
 80129fc:	0801dd38 	.word	0x0801dd38
 8012a00:	0801dc58 	.word	0x0801dc58
 8012a04:	2000c77c 	.word	0x2000c77c
 8012a08:	0801dd64 	.word	0x0801dd64
 8012a0c:	2000c780 	.word	0x2000c780
 8012a10:	0801dd90 	.word	0x0801dd90
 8012a14:	2000c778 	.word	0x2000c778
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f000 8158 	beq.w	8012cd0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012a20:	4b95      	ldr	r3, [pc, #596]	@ (8012c78 <tcp_input+0x724>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	891a      	ldrh	r2, [r3, #8]
 8012a2a:	4b93      	ldr	r3, [pc, #588]	@ (8012c78 <tcp_input+0x724>)
 8012a2c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012a2e:	4a92      	ldr	r2, [pc, #584]	@ (8012c78 <tcp_input+0x724>)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012a34:	4b91      	ldr	r3, [pc, #580]	@ (8012c7c <tcp_input+0x728>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4a8f      	ldr	r2, [pc, #572]	@ (8012c78 <tcp_input+0x724>)
 8012a3a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012a3c:	4b90      	ldr	r3, [pc, #576]	@ (8012c80 <tcp_input+0x72c>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012a42:	4b90      	ldr	r3, [pc, #576]	@ (8012c84 <tcp_input+0x730>)
 8012a44:	2200      	movs	r2, #0
 8012a46:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012a48:	4b8f      	ldr	r3, [pc, #572]	@ (8012c88 <tcp_input+0x734>)
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8012c8c <tcp_input+0x738>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	f003 0308 	and.w	r3, r3, #8
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d006      	beq.n	8012a68 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	7b5b      	ldrb	r3, [r3, #13]
 8012a5e:	f043 0301 	orr.w	r3, r3, #1
 8012a62:	b2da      	uxtb	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d017      	beq.n	8012aa0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012a70:	69f8      	ldr	r0, [r7, #28]
 8012a72:	f7ff f885 	bl	8011b80 <tcp_process_refused_data>
 8012a76:	4603      	mov	r3, r0
 8012a78:	f113 0f0d 	cmn.w	r3, #13
 8012a7c:	d007      	beq.n	8012a8e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00c      	beq.n	8012aa0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012a86:	4b82      	ldr	r3, [pc, #520]	@ (8012c90 <tcp_input+0x73c>)
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d008      	beq.n	8012aa0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	f040 80e3 	bne.w	8012c5e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012a98:	69f8      	ldr	r0, [r7, #28]
 8012a9a:	f003 fdff 	bl	801669c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012a9e:	e0de      	b.n	8012c5e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012aa0:	4a7c      	ldr	r2, [pc, #496]	@ (8012c94 <tcp_input+0x740>)
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012aa6:	69f8      	ldr	r0, [r7, #28]
 8012aa8:	f000 fb18 	bl	80130dc <tcp_process>
 8012aac:	4603      	mov	r3, r0
 8012aae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012ab0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ab4:	f113 0f0d 	cmn.w	r3, #13
 8012ab8:	f000 80d3 	beq.w	8012c62 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012abc:	4b71      	ldr	r3, [pc, #452]	@ (8012c84 <tcp_input+0x730>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	f003 0308 	and.w	r3, r3, #8
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d015      	beq.n	8012af4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d008      	beq.n	8012ae4 <tcp_input+0x590>
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ad8:	69fa      	ldr	r2, [r7, #28]
 8012ada:	6912      	ldr	r2, [r2, #16]
 8012adc:	f06f 010d 	mvn.w	r1, #13
 8012ae0:	4610      	mov	r0, r2
 8012ae2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012ae4:	69f9      	ldr	r1, [r7, #28]
 8012ae6:	486c      	ldr	r0, [pc, #432]	@ (8012c98 <tcp_input+0x744>)
 8012ae8:	f7ff fbbc 	bl	8012264 <tcp_pcb_remove>
        tcp_free(pcb);
 8012aec:	69f8      	ldr	r0, [r7, #28]
 8012aee:	f7fd ff49 	bl	8010984 <tcp_free>
 8012af2:	e0da      	b.n	8012caa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012af4:	2300      	movs	r3, #0
 8012af6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012af8:	4b63      	ldr	r3, [pc, #396]	@ (8012c88 <tcp_input+0x734>)
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d01d      	beq.n	8012b3c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012b00:	4b61      	ldr	r3, [pc, #388]	@ (8012c88 <tcp_input+0x734>)
 8012b02:	881b      	ldrh	r3, [r3, #0]
 8012b04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d00a      	beq.n	8012b26 <tcp_input+0x5d2>
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b16:	69fa      	ldr	r2, [r7, #28]
 8012b18:	6910      	ldr	r0, [r2, #16]
 8012b1a:	89fa      	ldrh	r2, [r7, #14]
 8012b1c:	69f9      	ldr	r1, [r7, #28]
 8012b1e:	4798      	blx	r3
 8012b20:	4603      	mov	r3, r0
 8012b22:	74fb      	strb	r3, [r7, #19]
 8012b24:	e001      	b.n	8012b2a <tcp_input+0x5d6>
 8012b26:	2300      	movs	r3, #0
 8012b28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012b2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b2e:	f113 0f0d 	cmn.w	r3, #13
 8012b32:	f000 8098 	beq.w	8012c66 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012b36:	4b54      	ldr	r3, [pc, #336]	@ (8012c88 <tcp_input+0x734>)
 8012b38:	2200      	movs	r2, #0
 8012b3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012b3c:	69f8      	ldr	r0, [r7, #28]
 8012b3e:	f000 f915 	bl	8012d6c <tcp_input_delayed_close>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	f040 8090 	bne.w	8012c6a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8012c80 <tcp_input+0x72c>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d041      	beq.n	8012bd6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <tcp_input+0x614>
 8012b5a:	4b50      	ldr	r3, [pc, #320]	@ (8012c9c <tcp_input+0x748>)
 8012b5c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012b60:	494f      	ldr	r1, [pc, #316]	@ (8012ca0 <tcp_input+0x74c>)
 8012b62:	4850      	ldr	r0, [pc, #320]	@ (8012ca4 <tcp_input+0x750>)
 8012b64:	f007 fc92 	bl	801a48c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	8b5b      	ldrh	r3, [r3, #26]
 8012b6c:	f003 0310 	and.w	r3, r3, #16
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d008      	beq.n	8012b86 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012b74:	4b42      	ldr	r3, [pc, #264]	@ (8012c80 <tcp_input+0x72c>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fd fc57 	bl	801042c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012b7e:	69f8      	ldr	r0, [r7, #28]
 8012b80:	f7fe f9e8 	bl	8010f54 <tcp_abort>
            goto aborted;
 8012b84:	e091      	b.n	8012caa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00c      	beq.n	8012baa <tcp_input+0x656>
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	6918      	ldr	r0, [r3, #16]
 8012b9a:	4b39      	ldr	r3, [pc, #228]	@ (8012c80 <tcp_input+0x72c>)
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	69f9      	ldr	r1, [r7, #28]
 8012ba2:	47a0      	blx	r4
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	74fb      	strb	r3, [r7, #19]
 8012ba8:	e008      	b.n	8012bbc <tcp_input+0x668>
 8012baa:	4b35      	ldr	r3, [pc, #212]	@ (8012c80 <tcp_input+0x72c>)
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	2300      	movs	r3, #0
 8012bb0:	69f9      	ldr	r1, [r7, #28]
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7ff f8d8 	bl	8011d68 <tcp_recv_null>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bc0:	f113 0f0d 	cmn.w	r3, #13
 8012bc4:	d053      	beq.n	8012c6e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d003      	beq.n	8012bd6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012bce:	4b2c      	ldr	r3, [pc, #176]	@ (8012c80 <tcp_input+0x72c>)
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8012c84 <tcp_input+0x730>)
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	f003 0320 	and.w	r3, r3, #32
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d030      	beq.n	8012c44 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d009      	beq.n	8012bfe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bee:	7b5a      	ldrb	r2, [r3, #13]
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bf4:	f042 0220 	orr.w	r2, r2, #32
 8012bf8:	b2d2      	uxtb	r2, r2
 8012bfa:	735a      	strb	r2, [r3, #13]
 8012bfc:	e022      	b.n	8012c44 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012bfe:	69fb      	ldr	r3, [r7, #28]
 8012c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c02:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012c06:	d005      	beq.n	8012c14 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00b      	beq.n	8012c36 <tcp_input+0x6e2>
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	6918      	ldr	r0, [r3, #16]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	69f9      	ldr	r1, [r7, #28]
 8012c2e:	47a0      	blx	r4
 8012c30:	4603      	mov	r3, r0
 8012c32:	74fb      	strb	r3, [r7, #19]
 8012c34:	e001      	b.n	8012c3a <tcp_input+0x6e6>
 8012c36:	2300      	movs	r3, #0
 8012c38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012c3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c3e:	f113 0f0d 	cmn.w	r3, #13
 8012c42:	d016      	beq.n	8012c72 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012c44:	4b13      	ldr	r3, [pc, #76]	@ (8012c94 <tcp_input+0x740>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012c4a:	69f8      	ldr	r0, [r7, #28]
 8012c4c:	f000 f88e 	bl	8012d6c <tcp_input_delayed_close>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d128      	bne.n	8012ca8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012c56:	69f8      	ldr	r0, [r7, #28]
 8012c58:	f002 ff1a 	bl	8015a90 <tcp_output>
 8012c5c:	e025      	b.n	8012caa <tcp_input+0x756>
        goto aborted;
 8012c5e:	bf00      	nop
 8012c60:	e023      	b.n	8012caa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012c62:	bf00      	nop
 8012c64:	e021      	b.n	8012caa <tcp_input+0x756>
              goto aborted;
 8012c66:	bf00      	nop
 8012c68:	e01f      	b.n	8012caa <tcp_input+0x756>
          goto aborted;
 8012c6a:	bf00      	nop
 8012c6c:	e01d      	b.n	8012caa <tcp_input+0x756>
            goto aborted;
 8012c6e:	bf00      	nop
 8012c70:	e01b      	b.n	8012caa <tcp_input+0x756>
              goto aborted;
 8012c72:	bf00      	nop
 8012c74:	e019      	b.n	8012caa <tcp_input+0x756>
 8012c76:	bf00      	nop
 8012c78:	2000c788 	.word	0x2000c788
 8012c7c:	2000c798 	.word	0x2000c798
 8012c80:	2000c7b8 	.word	0x2000c7b8
 8012c84:	2000c7b5 	.word	0x2000c7b5
 8012c88:	2000c7b0 	.word	0x2000c7b0
 8012c8c:	2000c7b4 	.word	0x2000c7b4
 8012c90:	2000c7b2 	.word	0x2000c7b2
 8012c94:	2000c7bc 	.word	0x2000c7bc
 8012c98:	2000c77c 	.word	0x2000c77c
 8012c9c:	0801dc0c 	.word	0x0801dc0c
 8012ca0:	0801ddc0 	.word	0x0801ddc0
 8012ca4:	0801dc58 	.word	0x0801dc58
          goto aborted;
 8012ca8:	bf00      	nop
    tcp_input_pcb = NULL;
 8012caa:	4b27      	ldr	r3, [pc, #156]	@ (8012d48 <tcp_input+0x7f4>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012cb0:	4b26      	ldr	r3, [pc, #152]	@ (8012d4c <tcp_input+0x7f8>)
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012cb6:	4b26      	ldr	r3, [pc, #152]	@ (8012d50 <tcp_input+0x7fc>)
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d03f      	beq.n	8012d3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012cbe:	4b24      	ldr	r3, [pc, #144]	@ (8012d50 <tcp_input+0x7fc>)
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7fd fbb2 	bl	801042c <pbuf_free>
      inseg.p = NULL;
 8012cc8:	4b21      	ldr	r3, [pc, #132]	@ (8012d50 <tcp_input+0x7fc>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012cce:	e036      	b.n	8012d3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012cd0:	4b20      	ldr	r3, [pc, #128]	@ (8012d54 <tcp_input+0x800>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	899b      	ldrh	r3, [r3, #12]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7fb ffe7 	bl	800ecac <lwip_htons>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	f003 0304 	and.w	r3, r3, #4
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d118      	bne.n	8012d1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cea:	4b1b      	ldr	r3, [pc, #108]	@ (8012d58 <tcp_input+0x804>)
 8012cec:	6819      	ldr	r1, [r3, #0]
 8012cee:	4b1b      	ldr	r3, [pc, #108]	@ (8012d5c <tcp_input+0x808>)
 8012cf0:	881b      	ldrh	r3, [r3, #0]
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8012d60 <tcp_input+0x80c>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012cfa:	4b16      	ldr	r3, [pc, #88]	@ (8012d54 <tcp_input+0x800>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cfe:	885b      	ldrh	r3, [r3, #2]
 8012d00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d02:	4a14      	ldr	r2, [pc, #80]	@ (8012d54 <tcp_input+0x800>)
 8012d04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d06:	8812      	ldrh	r2, [r2, #0]
 8012d08:	b292      	uxth	r2, r2
 8012d0a:	9202      	str	r2, [sp, #8]
 8012d0c:	9301      	str	r3, [sp, #4]
 8012d0e:	4b15      	ldr	r3, [pc, #84]	@ (8012d64 <tcp_input+0x810>)
 8012d10:	9300      	str	r3, [sp, #0]
 8012d12:	4b15      	ldr	r3, [pc, #84]	@ (8012d68 <tcp_input+0x814>)
 8012d14:	4602      	mov	r2, r0
 8012d16:	2000      	movs	r0, #0
 8012d18:	f003 fc6e 	bl	80165f8 <tcp_rst>
    pbuf_free(p);
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7fd fb85 	bl	801042c <pbuf_free>
  return;
 8012d22:	e00c      	b.n	8012d3e <tcp_input+0x7ea>
    goto dropped;
 8012d24:	bf00      	nop
 8012d26:	e006      	b.n	8012d36 <tcp_input+0x7e2>
    goto dropped;
 8012d28:	bf00      	nop
 8012d2a:	e004      	b.n	8012d36 <tcp_input+0x7e2>
    goto dropped;
 8012d2c:	bf00      	nop
 8012d2e:	e002      	b.n	8012d36 <tcp_input+0x7e2>
      goto dropped;
 8012d30:	bf00      	nop
 8012d32:	e000      	b.n	8012d36 <tcp_input+0x7e2>
      goto dropped;
 8012d34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7fd fb78 	bl	801042c <pbuf_free>
 8012d3c:	e000      	b.n	8012d40 <tcp_input+0x7ec>
  return;
 8012d3e:	bf00      	nop
}
 8012d40:	3724      	adds	r7, #36	@ 0x24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd90      	pop	{r4, r7, pc}
 8012d46:	bf00      	nop
 8012d48:	2000c7bc 	.word	0x2000c7bc
 8012d4c:	2000c7b8 	.word	0x2000c7b8
 8012d50:	2000c788 	.word	0x2000c788
 8012d54:	2000c798 	.word	0x2000c798
 8012d58:	2000c7ac 	.word	0x2000c7ac
 8012d5c:	2000c7b2 	.word	0x2000c7b2
 8012d60:	2000c7a8 	.word	0x2000c7a8
 8012d64:	2000902c 	.word	0x2000902c
 8012d68:	20009030 	.word	0x20009030

08012d6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <tcp_input_delayed_close+0x1c>
 8012d7a:	4b17      	ldr	r3, [pc, #92]	@ (8012dd8 <tcp_input_delayed_close+0x6c>)
 8012d7c:	f240 225a 	movw	r2, #602	@ 0x25a
 8012d80:	4916      	ldr	r1, [pc, #88]	@ (8012ddc <tcp_input_delayed_close+0x70>)
 8012d82:	4817      	ldr	r0, [pc, #92]	@ (8012de0 <tcp_input_delayed_close+0x74>)
 8012d84:	f007 fb82 	bl	801a48c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012d88:	4b16      	ldr	r3, [pc, #88]	@ (8012de4 <tcp_input_delayed_close+0x78>)
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	f003 0310 	and.w	r3, r3, #16
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d01c      	beq.n	8012dce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	8b5b      	ldrh	r3, [r3, #26]
 8012d98:	f003 0310 	and.w	r3, r3, #16
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d10d      	bne.n	8012dbc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d008      	beq.n	8012dbc <tcp_input_delayed_close+0x50>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	6912      	ldr	r2, [r2, #16]
 8012db4:	f06f 010e 	mvn.w	r1, #14
 8012db8:	4610      	mov	r0, r2
 8012dba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012dbc:	6879      	ldr	r1, [r7, #4]
 8012dbe:	480a      	ldr	r0, [pc, #40]	@ (8012de8 <tcp_input_delayed_close+0x7c>)
 8012dc0:	f7ff fa50 	bl	8012264 <tcp_pcb_remove>
    tcp_free(pcb);
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7fd fddd 	bl	8010984 <tcp_free>
    return 1;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e000      	b.n	8012dd0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	0801dc0c 	.word	0x0801dc0c
 8012ddc:	0801dddc 	.word	0x0801dddc
 8012de0:	0801dc58 	.word	0x0801dc58
 8012de4:	2000c7b5 	.word	0x2000c7b5
 8012de8:	2000c77c 	.word	0x2000c77c

08012dec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012dec:	b590      	push	{r4, r7, lr}
 8012dee:	b08b      	sub	sp, #44	@ 0x2c
 8012df0:	af04      	add	r7, sp, #16
 8012df2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012df4:	4b6f      	ldr	r3, [pc, #444]	@ (8012fb4 <tcp_listen_input+0x1c8>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	f003 0304 	and.w	r3, r3, #4
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	f040 80d2 	bne.w	8012fa6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d106      	bne.n	8012e16 <tcp_listen_input+0x2a>
 8012e08:	4b6b      	ldr	r3, [pc, #428]	@ (8012fb8 <tcp_listen_input+0x1cc>)
 8012e0a:	f240 2281 	movw	r2, #641	@ 0x281
 8012e0e:	496b      	ldr	r1, [pc, #428]	@ (8012fbc <tcp_listen_input+0x1d0>)
 8012e10:	486b      	ldr	r0, [pc, #428]	@ (8012fc0 <tcp_listen_input+0x1d4>)
 8012e12:	f007 fb3b 	bl	801a48c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012e16:	4b67      	ldr	r3, [pc, #412]	@ (8012fb4 <tcp_listen_input+0x1c8>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	f003 0310 	and.w	r3, r3, #16
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d019      	beq.n	8012e56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e22:	4b68      	ldr	r3, [pc, #416]	@ (8012fc4 <tcp_listen_input+0x1d8>)
 8012e24:	6819      	ldr	r1, [r3, #0]
 8012e26:	4b68      	ldr	r3, [pc, #416]	@ (8012fc8 <tcp_listen_input+0x1dc>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	4b67      	ldr	r3, [pc, #412]	@ (8012fcc <tcp_listen_input+0x1e0>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e32:	4b67      	ldr	r3, [pc, #412]	@ (8012fd0 <tcp_listen_input+0x1e4>)
 8012e34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e36:	885b      	ldrh	r3, [r3, #2]
 8012e38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e3a:	4a65      	ldr	r2, [pc, #404]	@ (8012fd0 <tcp_listen_input+0x1e4>)
 8012e3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e3e:	8812      	ldrh	r2, [r2, #0]
 8012e40:	b292      	uxth	r2, r2
 8012e42:	9202      	str	r2, [sp, #8]
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	4b63      	ldr	r3, [pc, #396]	@ (8012fd4 <tcp_listen_input+0x1e8>)
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	4b63      	ldr	r3, [pc, #396]	@ (8012fd8 <tcp_listen_input+0x1ec>)
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f003 fbd2 	bl	80165f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012e54:	e0a9      	b.n	8012faa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012e56:	4b57      	ldr	r3, [pc, #348]	@ (8012fb4 <tcp_listen_input+0x1c8>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	f003 0302 	and.w	r3, r3, #2
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 80a3 	beq.w	8012faa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	7d5b      	ldrb	r3, [r3, #21]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7ff f8a1 	bl	8011fb0 <tcp_alloc>
 8012e6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d111      	bne.n	8012e9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00a      	beq.n	8012e94 <tcp_listen_input+0xa8>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	699b      	ldr	r3, [r3, #24]
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	6910      	ldr	r0, [r2, #16]
 8012e86:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4798      	blx	r3
 8012e8e:	4603      	mov	r3, r0
 8012e90:	73bb      	strb	r3, [r7, #14]
      return;
 8012e92:	e08b      	b.n	8012fac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012e94:	23f0      	movs	r3, #240	@ 0xf0
 8012e96:	73bb      	strb	r3, [r7, #14]
      return;
 8012e98:	e088      	b.n	8012fac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012e9a:	4b50      	ldr	r3, [pc, #320]	@ (8012fdc <tcp_listen_input+0x1f0>)
 8012e9c:	695a      	ldr	r2, [r3, #20]
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8012fdc <tcp_listen_input+0x1f0>)
 8012ea4:	691a      	ldr	r2, [r3, #16]
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	8ada      	ldrh	r2, [r3, #22]
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012eb2:	4b47      	ldr	r3, [pc, #284]	@ (8012fd0 <tcp_listen_input+0x1e4>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2203      	movs	r2, #3
 8012ec2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012ec4:	4b41      	ldr	r3, [pc, #260]	@ (8012fcc <tcp_listen_input+0x1e0>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	1c5a      	adds	r2, r3, #1
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012ed6:	6978      	ldr	r0, [r7, #20]
 8012ed8:	f7ff fa58 	bl	801238c <tcp_next_iss>
 8012edc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	693a      	ldr	r2, [r7, #16]
 8012ee2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	693a      	ldr	r2, [r7, #16]
 8012ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	693a      	ldr	r2, [r7, #16]
 8012eee:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	693a      	ldr	r2, [r7, #16]
 8012ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012ef6:	4b35      	ldr	r3, [pc, #212]	@ (8012fcc <tcp_listen_input+0x1e0>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	1e5a      	subs	r2, r3, #1
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	691a      	ldr	r2, [r3, #16]
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	687a      	ldr	r2, [r7, #4]
 8012f0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7a5b      	ldrb	r3, [r3, #9]
 8012f12:	f003 030c 	and.w	r3, r3, #12
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	7a1a      	ldrb	r2, [r3, #8]
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012f24:	4b2e      	ldr	r3, [pc, #184]	@ (8012fe0 <tcp_listen_input+0x1f4>)
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	60da      	str	r2, [r3, #12]
 8012f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8012fe0 <tcp_listen_input+0x1f4>)
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	6013      	str	r3, [r2, #0]
 8012f32:	f003 fd23 	bl	801697c <tcp_timer_needed>
 8012f36:	4b2b      	ldr	r3, [pc, #172]	@ (8012fe4 <tcp_listen_input+0x1f8>)
 8012f38:	2201      	movs	r2, #1
 8012f3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012f3c:	6978      	ldr	r0, [r7, #20]
 8012f3e:	f001 fd8b 	bl	8014a58 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012f42:	4b23      	ldr	r3, [pc, #140]	@ (8012fd0 <tcp_listen_input+0x1e4>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	89db      	ldrh	r3, [r3, #14]
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	3304      	adds	r3, #4
 8012f64:	4618      	mov	r0, r3
 8012f66:	f005 f8e5 	bl	8018134 <ip4_route>
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	3304      	adds	r3, #4
 8012f70:	461a      	mov	r2, r3
 8012f72:	4620      	mov	r0, r4
 8012f74:	f7ff fa30 	bl	80123d8 <tcp_eff_send_mss_netif>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012f80:	2112      	movs	r1, #18
 8012f82:	6978      	ldr	r0, [r7, #20]
 8012f84:	f002 fc96 	bl	80158b4 <tcp_enqueue_flags>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d004      	beq.n	8012f9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012f94:	2100      	movs	r1, #0
 8012f96:	6978      	ldr	r0, [r7, #20]
 8012f98:	f7fd ff1e 	bl	8010dd8 <tcp_abandon>
      return;
 8012f9c:	e006      	b.n	8012fac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012f9e:	6978      	ldr	r0, [r7, #20]
 8012fa0:	f002 fd76 	bl	8015a90 <tcp_output>
  return;
 8012fa4:	e001      	b.n	8012faa <tcp_listen_input+0x1be>
    return;
 8012fa6:	bf00      	nop
 8012fa8:	e000      	b.n	8012fac <tcp_listen_input+0x1c0>
  return;
 8012faa:	bf00      	nop
}
 8012fac:	371c      	adds	r7, #28
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd90      	pop	{r4, r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	2000c7b4 	.word	0x2000c7b4
 8012fb8:	0801dc0c 	.word	0x0801dc0c
 8012fbc:	0801de04 	.word	0x0801de04
 8012fc0:	0801dc58 	.word	0x0801dc58
 8012fc4:	2000c7ac 	.word	0x2000c7ac
 8012fc8:	2000c7b2 	.word	0x2000c7b2
 8012fcc:	2000c7a8 	.word	0x2000c7a8
 8012fd0:	2000c798 	.word	0x2000c798
 8012fd4:	2000902c 	.word	0x2000902c
 8012fd8:	20009030 	.word	0x20009030
 8012fdc:	2000901c 	.word	0x2000901c
 8012fe0:	2000c77c 	.word	0x2000c77c
 8012fe4:	2000c784 	.word	0x2000c784

08012fe8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af04      	add	r7, sp, #16
 8012fee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80130b0 <tcp_timewait_input+0xc8>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 0304 	and.w	r3, r3, #4
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d153      	bne.n	80130a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d106      	bne.n	8013010 <tcp_timewait_input+0x28>
 8013002:	4b2c      	ldr	r3, [pc, #176]	@ (80130b4 <tcp_timewait_input+0xcc>)
 8013004:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013008:	492b      	ldr	r1, [pc, #172]	@ (80130b8 <tcp_timewait_input+0xd0>)
 801300a:	482c      	ldr	r0, [pc, #176]	@ (80130bc <tcp_timewait_input+0xd4>)
 801300c:	f007 fa3e 	bl	801a48c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013010:	4b27      	ldr	r3, [pc, #156]	@ (80130b0 <tcp_timewait_input+0xc8>)
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	f003 0302 	and.w	r3, r3, #2
 8013018:	2b00      	cmp	r3, #0
 801301a:	d02a      	beq.n	8013072 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801301c:	4b28      	ldr	r3, [pc, #160]	@ (80130c0 <tcp_timewait_input+0xd8>)
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	2b00      	cmp	r3, #0
 8013028:	db2d      	blt.n	8013086 <tcp_timewait_input+0x9e>
 801302a:	4b25      	ldr	r3, [pc, #148]	@ (80130c0 <tcp_timewait_input+0xd8>)
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013032:	6879      	ldr	r1, [r7, #4]
 8013034:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013036:	440b      	add	r3, r1
 8013038:	1ad3      	subs	r3, r2, r3
 801303a:	2b00      	cmp	r3, #0
 801303c:	dc23      	bgt.n	8013086 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801303e:	4b21      	ldr	r3, [pc, #132]	@ (80130c4 <tcp_timewait_input+0xdc>)
 8013040:	6819      	ldr	r1, [r3, #0]
 8013042:	4b21      	ldr	r3, [pc, #132]	@ (80130c8 <tcp_timewait_input+0xe0>)
 8013044:	881b      	ldrh	r3, [r3, #0]
 8013046:	461a      	mov	r2, r3
 8013048:	4b1d      	ldr	r3, [pc, #116]	@ (80130c0 <tcp_timewait_input+0xd8>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801304e:	4b1f      	ldr	r3, [pc, #124]	@ (80130cc <tcp_timewait_input+0xe4>)
 8013050:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013052:	885b      	ldrh	r3, [r3, #2]
 8013054:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013056:	4a1d      	ldr	r2, [pc, #116]	@ (80130cc <tcp_timewait_input+0xe4>)
 8013058:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801305a:	8812      	ldrh	r2, [r2, #0]
 801305c:	b292      	uxth	r2, r2
 801305e:	9202      	str	r2, [sp, #8]
 8013060:	9301      	str	r3, [sp, #4]
 8013062:	4b1b      	ldr	r3, [pc, #108]	@ (80130d0 <tcp_timewait_input+0xe8>)
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	4b1b      	ldr	r3, [pc, #108]	@ (80130d4 <tcp_timewait_input+0xec>)
 8013068:	4602      	mov	r2, r0
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f003 fac4 	bl	80165f8 <tcp_rst>
      return;
 8013070:	e01b      	b.n	80130aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013072:	4b0f      	ldr	r3, [pc, #60]	@ (80130b0 <tcp_timewait_input+0xc8>)
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f003 0301 	and.w	r3, r3, #1
 801307a:	2b00      	cmp	r3, #0
 801307c:	d003      	beq.n	8013086 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801307e:	4b16      	ldr	r3, [pc, #88]	@ (80130d8 <tcp_timewait_input+0xf0>)
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013086:	4b10      	ldr	r3, [pc, #64]	@ (80130c8 <tcp_timewait_input+0xe0>)
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00c      	beq.n	80130a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	8b5b      	ldrh	r3, [r3, #26]
 8013092:	f043 0302 	orr.w	r3, r3, #2
 8013096:	b29a      	uxth	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f002 fcf7 	bl	8015a90 <tcp_output>
  }
  return;
 80130a2:	e001      	b.n	80130a8 <tcp_timewait_input+0xc0>
    return;
 80130a4:	bf00      	nop
 80130a6:	e000      	b.n	80130aa <tcp_timewait_input+0xc2>
  return;
 80130a8:	bf00      	nop
}
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	2000c7b4 	.word	0x2000c7b4
 80130b4:	0801dc0c 	.word	0x0801dc0c
 80130b8:	0801de24 	.word	0x0801de24
 80130bc:	0801dc58 	.word	0x0801dc58
 80130c0:	2000c7a8 	.word	0x2000c7a8
 80130c4:	2000c7ac 	.word	0x2000c7ac
 80130c8:	2000c7b2 	.word	0x2000c7b2
 80130cc:	2000c798 	.word	0x2000c798
 80130d0:	2000902c 	.word	0x2000902c
 80130d4:	20009030 	.word	0x20009030
 80130d8:	2000c770 	.word	0x2000c770

080130dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80130dc:	b590      	push	{r4, r7, lr}
 80130de:	b08d      	sub	sp, #52	@ 0x34
 80130e0:	af04      	add	r7, sp, #16
 80130e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80130e4:	2300      	movs	r3, #0
 80130e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80130e8:	2300      	movs	r3, #0
 80130ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <tcp_process+0x24>
 80130f2:	4b9d      	ldr	r3, [pc, #628]	@ (8013368 <tcp_process+0x28c>)
 80130f4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80130f8:	499c      	ldr	r1, [pc, #624]	@ (801336c <tcp_process+0x290>)
 80130fa:	489d      	ldr	r0, [pc, #628]	@ (8013370 <tcp_process+0x294>)
 80130fc:	f007 f9c6 	bl	801a48c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013100:	4b9c      	ldr	r3, [pc, #624]	@ (8013374 <tcp_process+0x298>)
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	f003 0304 	and.w	r3, r3, #4
 8013108:	2b00      	cmp	r3, #0
 801310a:	d04e      	beq.n	80131aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	7d1b      	ldrb	r3, [r3, #20]
 8013110:	2b02      	cmp	r3, #2
 8013112:	d108      	bne.n	8013126 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013118:	4b97      	ldr	r3, [pc, #604]	@ (8013378 <tcp_process+0x29c>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	429a      	cmp	r2, r3
 801311e:	d123      	bne.n	8013168 <tcp_process+0x8c>
        acceptable = 1;
 8013120:	2301      	movs	r3, #1
 8013122:	76fb      	strb	r3, [r7, #27]
 8013124:	e020      	b.n	8013168 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801312a:	4b94      	ldr	r3, [pc, #592]	@ (801337c <tcp_process+0x2a0>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	429a      	cmp	r2, r3
 8013130:	d102      	bne.n	8013138 <tcp_process+0x5c>
        acceptable = 1;
 8013132:	2301      	movs	r3, #1
 8013134:	76fb      	strb	r3, [r7, #27]
 8013136:	e017      	b.n	8013168 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013138:	4b90      	ldr	r3, [pc, #576]	@ (801337c <tcp_process+0x2a0>)
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	db10      	blt.n	8013168 <tcp_process+0x8c>
 8013146:	4b8d      	ldr	r3, [pc, #564]	@ (801337c <tcp_process+0x2a0>)
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801314e:	6879      	ldr	r1, [r7, #4]
 8013150:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013152:	440b      	add	r3, r1
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	2b00      	cmp	r3, #0
 8013158:	dc06      	bgt.n	8013168 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	8b5b      	ldrh	r3, [r3, #26]
 801315e:	f043 0302 	orr.w	r3, r3, #2
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013168:	7efb      	ldrb	r3, [r7, #27]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d01b      	beq.n	80131a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	7d1b      	ldrb	r3, [r3, #20]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <tcp_process+0xa8>
 8013176:	4b7c      	ldr	r3, [pc, #496]	@ (8013368 <tcp_process+0x28c>)
 8013178:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801317c:	4980      	ldr	r1, [pc, #512]	@ (8013380 <tcp_process+0x2a4>)
 801317e:	487c      	ldr	r0, [pc, #496]	@ (8013370 <tcp_process+0x294>)
 8013180:	f007 f984 	bl	801a48c <iprintf>
      recv_flags |= TF_RESET;
 8013184:	4b7f      	ldr	r3, [pc, #508]	@ (8013384 <tcp_process+0x2a8>)
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	f043 0308 	orr.w	r3, r3, #8
 801318c:	b2da      	uxtb	r2, r3
 801318e:	4b7d      	ldr	r3, [pc, #500]	@ (8013384 <tcp_process+0x2a8>)
 8013190:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8b5b      	ldrh	r3, [r3, #26]
 8013196:	f023 0301 	bic.w	r3, r3, #1
 801319a:	b29a      	uxth	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80131a0:	f06f 030d 	mvn.w	r3, #13
 80131a4:	e37a      	b.n	801389c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80131a6:	2300      	movs	r3, #0
 80131a8:	e378      	b.n	801389c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80131aa:	4b72      	ldr	r3, [pc, #456]	@ (8013374 <tcp_process+0x298>)
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	f003 0302 	and.w	r3, r3, #2
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d010      	beq.n	80131d8 <tcp_process+0xfc>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	7d1b      	ldrb	r3, [r3, #20]
 80131ba:	2b02      	cmp	r3, #2
 80131bc:	d00c      	beq.n	80131d8 <tcp_process+0xfc>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	7d1b      	ldrb	r3, [r3, #20]
 80131c2:	2b03      	cmp	r3, #3
 80131c4:	d008      	beq.n	80131d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	8b5b      	ldrh	r3, [r3, #26]
 80131ca:	f043 0302 	orr.w	r3, r3, #2
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80131d4:	2300      	movs	r3, #0
 80131d6:	e361      	b.n	801389c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8b5b      	ldrh	r3, [r3, #26]
 80131dc:	f003 0310 	and.w	r3, r3, #16
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d103      	bne.n	80131ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80131e4:	4b68      	ldr	r3, [pc, #416]	@ (8013388 <tcp_process+0x2ac>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2200      	movs	r2, #0
 80131f0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f001 fc2b 	bl	8014a58 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	7d1b      	ldrb	r3, [r3, #20]
 8013206:	3b02      	subs	r3, #2
 8013208:	2b07      	cmp	r3, #7
 801320a:	f200 8337 	bhi.w	801387c <tcp_process+0x7a0>
 801320e:	a201      	add	r2, pc, #4	@ (adr r2, 8013214 <tcp_process+0x138>)
 8013210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013214:	08013235 	.word	0x08013235
 8013218:	08013465 	.word	0x08013465
 801321c:	080135dd 	.word	0x080135dd
 8013220:	08013607 	.word	0x08013607
 8013224:	0801372b 	.word	0x0801372b
 8013228:	080135dd 	.word	0x080135dd
 801322c:	080137b7 	.word	0x080137b7
 8013230:	08013847 	.word	0x08013847
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013234:	4b4f      	ldr	r3, [pc, #316]	@ (8013374 <tcp_process+0x298>)
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	f003 0310 	and.w	r3, r3, #16
 801323c:	2b00      	cmp	r3, #0
 801323e:	f000 80e4 	beq.w	801340a <tcp_process+0x32e>
 8013242:	4b4c      	ldr	r3, [pc, #304]	@ (8013374 <tcp_process+0x298>)
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	f003 0302 	and.w	r3, r3, #2
 801324a:	2b00      	cmp	r3, #0
 801324c:	f000 80dd 	beq.w	801340a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013254:	1c5a      	adds	r2, r3, #1
 8013256:	4b48      	ldr	r3, [pc, #288]	@ (8013378 <tcp_process+0x29c>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	429a      	cmp	r2, r3
 801325c:	f040 80d5 	bne.w	801340a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013260:	4b46      	ldr	r3, [pc, #280]	@ (801337c <tcp_process+0x2a0>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	1c5a      	adds	r2, r3, #1
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8013272:	4b41      	ldr	r3, [pc, #260]	@ (8013378 <tcp_process+0x29c>)
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801327a:	4b44      	ldr	r3, [pc, #272]	@ (801338c <tcp_process+0x2b0>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	89db      	ldrh	r3, [r3, #14]
 8013280:	b29a      	uxth	r2, r3
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013294:	4b39      	ldr	r3, [pc, #228]	@ (801337c <tcp_process+0x2a0>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	1e5a      	subs	r2, r3, #1
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2204      	movs	r2, #4
 80132a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	3304      	adds	r3, #4
 80132ac:	4618      	mov	r0, r3
 80132ae:	f004 ff41 	bl	8018134 <ip4_route>
 80132b2:	4601      	mov	r1, r0
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	3304      	adds	r3, #4
 80132b8:	461a      	mov	r2, r3
 80132ba:	4620      	mov	r0, r4
 80132bc:	f7ff f88c 	bl	80123d8 <tcp_eff_send_mss_netif>
 80132c0:	4603      	mov	r3, r0
 80132c2:	461a      	mov	r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132cc:	009a      	lsls	r2, r3, #2
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132d2:	005b      	lsls	r3, r3, #1
 80132d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80132d8:	428b      	cmp	r3, r1
 80132da:	bf38      	it	cc
 80132dc:	460b      	movcc	r3, r1
 80132de:	429a      	cmp	r2, r3
 80132e0:	d204      	bcs.n	80132ec <tcp_process+0x210>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	e00d      	b.n	8013308 <tcp_process+0x22c>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d904      	bls.n	8013304 <tcp_process+0x228>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	b29b      	uxth	r3, r3
 8013302:	e001      	b.n	8013308 <tcp_process+0x22c>
 8013304:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013314:	2b00      	cmp	r3, #0
 8013316:	d106      	bne.n	8013326 <tcp_process+0x24a>
 8013318:	4b13      	ldr	r3, [pc, #76]	@ (8013368 <tcp_process+0x28c>)
 801331a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801331e:	491c      	ldr	r1, [pc, #112]	@ (8013390 <tcp_process+0x2b4>)
 8013320:	4813      	ldr	r0, [pc, #76]	@ (8013370 <tcp_process+0x294>)
 8013322:	f007 f8b3 	bl	801a48c <iprintf>
        --pcb->snd_queuelen;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801332c:	3b01      	subs	r3, #1
 801332e:	b29a      	uxth	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801333a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d12a      	bne.n	8013398 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013346:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_process+0x280>
 801334e:	4b06      	ldr	r3, [pc, #24]	@ (8013368 <tcp_process+0x28c>)
 8013350:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8013354:	490f      	ldr	r1, [pc, #60]	@ (8013394 <tcp_process+0x2b8>)
 8013356:	4806      	ldr	r0, [pc, #24]	@ (8013370 <tcp_process+0x294>)
 8013358:	f007 f898 	bl	801a48c <iprintf>
          pcb->unsent = rseg->next;
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013364:	e01c      	b.n	80133a0 <tcp_process+0x2c4>
 8013366:	bf00      	nop
 8013368:	0801dc0c 	.word	0x0801dc0c
 801336c:	0801de44 	.word	0x0801de44
 8013370:	0801dc58 	.word	0x0801dc58
 8013374:	2000c7b4 	.word	0x2000c7b4
 8013378:	2000c7ac 	.word	0x2000c7ac
 801337c:	2000c7a8 	.word	0x2000c7a8
 8013380:	0801de60 	.word	0x0801de60
 8013384:	2000c7b5 	.word	0x2000c7b5
 8013388:	2000c770 	.word	0x2000c770
 801338c:	2000c798 	.word	0x2000c798
 8013390:	0801de80 	.word	0x0801de80
 8013394:	0801de98 	.word	0x0801de98
        } else {
          pcb->unacked = rseg->next;
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80133a0:	69f8      	ldr	r0, [r7, #28]
 80133a2:	f7fe fc7e 	bl	8011ca2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d104      	bne.n	80133b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133b4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80133b6:	e006      	b.n	80133c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2200      	movs	r2, #0
 80133c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00a      	beq.n	80133e6 <tcp_process+0x30a>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	6910      	ldr	r0, [r2, #16]
 80133da:	2200      	movs	r2, #0
 80133dc:	6879      	ldr	r1, [r7, #4]
 80133de:	4798      	blx	r3
 80133e0:	4603      	mov	r3, r0
 80133e2:	76bb      	strb	r3, [r7, #26]
 80133e4:	e001      	b.n	80133ea <tcp_process+0x30e>
 80133e6:	2300      	movs	r3, #0
 80133e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80133ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80133ee:	f113 0f0d 	cmn.w	r3, #13
 80133f2:	d102      	bne.n	80133fa <tcp_process+0x31e>
          return ERR_ABRT;
 80133f4:	f06f 030c 	mvn.w	r3, #12
 80133f8:	e250      	b.n	801389c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	8b5b      	ldrh	r3, [r3, #26]
 80133fe:	f043 0302 	orr.w	r3, r3, #2
 8013402:	b29a      	uxth	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013408:	e23a      	b.n	8013880 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801340a:	4b98      	ldr	r3, [pc, #608]	@ (801366c <tcp_process+0x590>)
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	f003 0310 	and.w	r3, r3, #16
 8013412:	2b00      	cmp	r3, #0
 8013414:	f000 8234 	beq.w	8013880 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013418:	4b95      	ldr	r3, [pc, #596]	@ (8013670 <tcp_process+0x594>)
 801341a:	6819      	ldr	r1, [r3, #0]
 801341c:	4b95      	ldr	r3, [pc, #596]	@ (8013674 <tcp_process+0x598>)
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	461a      	mov	r2, r3
 8013422:	4b95      	ldr	r3, [pc, #596]	@ (8013678 <tcp_process+0x59c>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013428:	4b94      	ldr	r3, [pc, #592]	@ (801367c <tcp_process+0x5a0>)
 801342a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801342c:	885b      	ldrh	r3, [r3, #2]
 801342e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013430:	4a92      	ldr	r2, [pc, #584]	@ (801367c <tcp_process+0x5a0>)
 8013432:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013434:	8812      	ldrh	r2, [r2, #0]
 8013436:	b292      	uxth	r2, r2
 8013438:	9202      	str	r2, [sp, #8]
 801343a:	9301      	str	r3, [sp, #4]
 801343c:	4b90      	ldr	r3, [pc, #576]	@ (8013680 <tcp_process+0x5a4>)
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	4b90      	ldr	r3, [pc, #576]	@ (8013684 <tcp_process+0x5a8>)
 8013442:	4602      	mov	r2, r0
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f003 f8d7 	bl	80165f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013450:	2b05      	cmp	r3, #5
 8013452:	f200 8215 	bhi.w	8013880 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2200      	movs	r2, #0
 801345a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f002 fea3 	bl	80161a8 <tcp_rexmit_rto>
      break;
 8013462:	e20d      	b.n	8013880 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013464:	4b81      	ldr	r3, [pc, #516]	@ (801366c <tcp_process+0x590>)
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	f003 0310 	and.w	r3, r3, #16
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 80a1 	beq.w	80135b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013472:	4b7f      	ldr	r3, [pc, #508]	@ (8013670 <tcp_process+0x594>)
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	3b01      	subs	r3, #1
 801347e:	2b00      	cmp	r3, #0
 8013480:	db7e      	blt.n	8013580 <tcp_process+0x4a4>
 8013482:	4b7b      	ldr	r3, [pc, #492]	@ (8013670 <tcp_process+0x594>)
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	2b00      	cmp	r3, #0
 801348e:	dc77      	bgt.n	8013580 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2204      	movs	r2, #4
 8013494:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801349a:	2b00      	cmp	r3, #0
 801349c:	d102      	bne.n	80134a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801349e:	23fa      	movs	r3, #250	@ 0xfa
 80134a0:	76bb      	strb	r3, [r7, #26]
 80134a2:	e01d      	b.n	80134e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134a8:	699b      	ldr	r3, [r3, #24]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <tcp_process+0x3e0>
 80134ae:	4b76      	ldr	r3, [pc, #472]	@ (8013688 <tcp_process+0x5ac>)
 80134b0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80134b4:	4975      	ldr	r1, [pc, #468]	@ (801368c <tcp_process+0x5b0>)
 80134b6:	4876      	ldr	r0, [pc, #472]	@ (8013690 <tcp_process+0x5b4>)
 80134b8:	f006 ffe8 	bl	801a48c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00a      	beq.n	80134dc <tcp_process+0x400>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134ca:	699b      	ldr	r3, [r3, #24]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	6910      	ldr	r0, [r2, #16]
 80134d0:	2200      	movs	r2, #0
 80134d2:	6879      	ldr	r1, [r7, #4]
 80134d4:	4798      	blx	r3
 80134d6:	4603      	mov	r3, r0
 80134d8:	76bb      	strb	r3, [r7, #26]
 80134da:	e001      	b.n	80134e0 <tcp_process+0x404>
 80134dc:	23f0      	movs	r3, #240	@ 0xf0
 80134de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80134e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d00a      	beq.n	80134fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80134e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80134ec:	f113 0f0d 	cmn.w	r3, #13
 80134f0:	d002      	beq.n	80134f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7fd fd2e 	bl	8010f54 <tcp_abort>
            }
            return ERR_ABRT;
 80134f8:	f06f 030c 	mvn.w	r3, #12
 80134fc:	e1ce      	b.n	801389c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 fae0 	bl	8013ac4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013504:	4b63      	ldr	r3, [pc, #396]	@ (8013694 <tcp_process+0x5b8>)
 8013506:	881b      	ldrh	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d005      	beq.n	8013518 <tcp_process+0x43c>
            recv_acked--;
 801350c:	4b61      	ldr	r3, [pc, #388]	@ (8013694 <tcp_process+0x5b8>)
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	3b01      	subs	r3, #1
 8013512:	b29a      	uxth	r2, r3
 8013514:	4b5f      	ldr	r3, [pc, #380]	@ (8013694 <tcp_process+0x5b8>)
 8013516:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801351c:	009a      	lsls	r2, r3, #2
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013522:	005b      	lsls	r3, r3, #1
 8013524:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013528:	428b      	cmp	r3, r1
 801352a:	bf38      	it	cc
 801352c:	460b      	movcc	r3, r1
 801352e:	429a      	cmp	r2, r3
 8013530:	d204      	bcs.n	801353c <tcp_process+0x460>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013536:	009b      	lsls	r3, r3, #2
 8013538:	b29b      	uxth	r3, r3
 801353a:	e00d      	b.n	8013558 <tcp_process+0x47c>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013546:	4293      	cmp	r3, r2
 8013548:	d904      	bls.n	8013554 <tcp_process+0x478>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	b29b      	uxth	r3, r3
 8013552:	e001      	b.n	8013558 <tcp_process+0x47c>
 8013554:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801355e:	4b4e      	ldr	r3, [pc, #312]	@ (8013698 <tcp_process+0x5bc>)
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	f003 0320 	and.w	r3, r3, #32
 8013566:	2b00      	cmp	r3, #0
 8013568:	d037      	beq.n	80135da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f043 0302 	orr.w	r3, r3, #2
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2207      	movs	r2, #7
 801357c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801357e:	e02c      	b.n	80135da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013580:	4b3b      	ldr	r3, [pc, #236]	@ (8013670 <tcp_process+0x594>)
 8013582:	6819      	ldr	r1, [r3, #0]
 8013584:	4b3b      	ldr	r3, [pc, #236]	@ (8013674 <tcp_process+0x598>)
 8013586:	881b      	ldrh	r3, [r3, #0]
 8013588:	461a      	mov	r2, r3
 801358a:	4b3b      	ldr	r3, [pc, #236]	@ (8013678 <tcp_process+0x59c>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013590:	4b3a      	ldr	r3, [pc, #232]	@ (801367c <tcp_process+0x5a0>)
 8013592:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013594:	885b      	ldrh	r3, [r3, #2]
 8013596:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013598:	4a38      	ldr	r2, [pc, #224]	@ (801367c <tcp_process+0x5a0>)
 801359a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801359c:	8812      	ldrh	r2, [r2, #0]
 801359e:	b292      	uxth	r2, r2
 80135a0:	9202      	str	r2, [sp, #8]
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	4b36      	ldr	r3, [pc, #216]	@ (8013680 <tcp_process+0x5a4>)
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	4b36      	ldr	r3, [pc, #216]	@ (8013684 <tcp_process+0x5a8>)
 80135aa:	4602      	mov	r2, r0
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f003 f823 	bl	80165f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80135b2:	e167      	b.n	8013884 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80135b4:	4b2d      	ldr	r3, [pc, #180]	@ (801366c <tcp_process+0x590>)
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	f003 0302 	and.w	r3, r3, #2
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f000 8161 	beq.w	8013884 <tcp_process+0x7a8>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135c6:	1e5a      	subs	r2, r3, #1
 80135c8:	4b2b      	ldr	r3, [pc, #172]	@ (8013678 <tcp_process+0x59c>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	f040 8159 	bne.w	8013884 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f002 fe0a 	bl	80161ec <tcp_rexmit>
      break;
 80135d8:	e154      	b.n	8013884 <tcp_process+0x7a8>
 80135da:	e153      	b.n	8013884 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f000 fa71 	bl	8013ac4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80135e2:	4b2d      	ldr	r3, [pc, #180]	@ (8013698 <tcp_process+0x5bc>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	f003 0320 	and.w	r3, r3, #32
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 814c 	beq.w	8013888 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	8b5b      	ldrh	r3, [r3, #26]
 80135f4:	f043 0302 	orr.w	r3, r3, #2
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2207      	movs	r2, #7
 8013602:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013604:	e140      	b.n	8013888 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 fa5c 	bl	8013ac4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801360c:	4b22      	ldr	r3, [pc, #136]	@ (8013698 <tcp_process+0x5bc>)
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	f003 0320 	and.w	r3, r3, #32
 8013614:	2b00      	cmp	r3, #0
 8013616:	d071      	beq.n	80136fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013618:	4b14      	ldr	r3, [pc, #80]	@ (801366c <tcp_process+0x590>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f003 0310 	and.w	r3, r3, #16
 8013620:	2b00      	cmp	r3, #0
 8013622:	d060      	beq.n	80136e6 <tcp_process+0x60a>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013628:	4b11      	ldr	r3, [pc, #68]	@ (8013670 <tcp_process+0x594>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	429a      	cmp	r2, r3
 801362e:	d15a      	bne.n	80136e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013634:	2b00      	cmp	r3, #0
 8013636:	d156      	bne.n	80136e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	8b5b      	ldrh	r3, [r3, #26]
 801363c:	f043 0302 	orr.w	r3, r3, #2
 8013640:	b29a      	uxth	r2, r3
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7fe fdbc 	bl	80121c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801364c:	4b13      	ldr	r3, [pc, #76]	@ (801369c <tcp_process+0x5c0>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	687a      	ldr	r2, [r7, #4]
 8013652:	429a      	cmp	r2, r3
 8013654:	d105      	bne.n	8013662 <tcp_process+0x586>
 8013656:	4b11      	ldr	r3, [pc, #68]	@ (801369c <tcp_process+0x5c0>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	4a0f      	ldr	r2, [pc, #60]	@ (801369c <tcp_process+0x5c0>)
 801365e:	6013      	str	r3, [r2, #0]
 8013660:	e02e      	b.n	80136c0 <tcp_process+0x5e4>
 8013662:	4b0e      	ldr	r3, [pc, #56]	@ (801369c <tcp_process+0x5c0>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	617b      	str	r3, [r7, #20]
 8013668:	e027      	b.n	80136ba <tcp_process+0x5de>
 801366a:	bf00      	nop
 801366c:	2000c7b4 	.word	0x2000c7b4
 8013670:	2000c7ac 	.word	0x2000c7ac
 8013674:	2000c7b2 	.word	0x2000c7b2
 8013678:	2000c7a8 	.word	0x2000c7a8
 801367c:	2000c798 	.word	0x2000c798
 8013680:	2000902c 	.word	0x2000902c
 8013684:	20009030 	.word	0x20009030
 8013688:	0801dc0c 	.word	0x0801dc0c
 801368c:	0801deac 	.word	0x0801deac
 8013690:	0801dc58 	.word	0x0801dc58
 8013694:	2000c7b0 	.word	0x2000c7b0
 8013698:	2000c7b5 	.word	0x2000c7b5
 801369c:	2000c77c 	.word	0x2000c77c
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d104      	bne.n	80136b4 <tcp_process+0x5d8>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	68da      	ldr	r2, [r3, #12]
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	60da      	str	r2, [r3, #12]
 80136b2:	e005      	b.n	80136c0 <tcp_process+0x5e4>
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	617b      	str	r3, [r7, #20]
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d1ef      	bne.n	80136a0 <tcp_process+0x5c4>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	60da      	str	r2, [r3, #12]
 80136c6:	4b77      	ldr	r3, [pc, #476]	@ (80138a4 <tcp_process+0x7c8>)
 80136c8:	2201      	movs	r2, #1
 80136ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	220a      	movs	r2, #10
 80136d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80136d2:	4b75      	ldr	r3, [pc, #468]	@ (80138a8 <tcp_process+0x7cc>)
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	60da      	str	r2, [r3, #12]
 80136da:	4a73      	ldr	r2, [pc, #460]	@ (80138a8 <tcp_process+0x7cc>)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6013      	str	r3, [r2, #0]
 80136e0:	f003 f94c 	bl	801697c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80136e4:	e0d2      	b.n	801388c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	8b5b      	ldrh	r3, [r3, #26]
 80136ea:	f043 0302 	orr.w	r3, r3, #2
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2208      	movs	r2, #8
 80136f8:	751a      	strb	r2, [r3, #20]
      break;
 80136fa:	e0c7      	b.n	801388c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80136fc:	4b6b      	ldr	r3, [pc, #428]	@ (80138ac <tcp_process+0x7d0>)
 80136fe:	781b      	ldrb	r3, [r3, #0]
 8013700:	f003 0310 	and.w	r3, r3, #16
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 80c1 	beq.w	801388c <tcp_process+0x7b0>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801370e:	4b68      	ldr	r3, [pc, #416]	@ (80138b0 <tcp_process+0x7d4>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	f040 80ba 	bne.w	801388c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801371c:	2b00      	cmp	r3, #0
 801371e:	f040 80b5 	bne.w	801388c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2206      	movs	r2, #6
 8013726:	751a      	strb	r2, [r3, #20]
      break;
 8013728:	e0b0      	b.n	801388c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 f9ca 	bl	8013ac4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013730:	4b60      	ldr	r3, [pc, #384]	@ (80138b4 <tcp_process+0x7d8>)
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	f003 0320 	and.w	r3, r3, #32
 8013738:	2b00      	cmp	r3, #0
 801373a:	f000 80a9 	beq.w	8013890 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f043 0302 	orr.w	r3, r3, #2
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7fe fd39 	bl	80121c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013752:	4b59      	ldr	r3, [pc, #356]	@ (80138b8 <tcp_process+0x7dc>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	429a      	cmp	r2, r3
 801375a:	d105      	bne.n	8013768 <tcp_process+0x68c>
 801375c:	4b56      	ldr	r3, [pc, #344]	@ (80138b8 <tcp_process+0x7dc>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	4a55      	ldr	r2, [pc, #340]	@ (80138b8 <tcp_process+0x7dc>)
 8013764:	6013      	str	r3, [r2, #0]
 8013766:	e013      	b.n	8013790 <tcp_process+0x6b4>
 8013768:	4b53      	ldr	r3, [pc, #332]	@ (80138b8 <tcp_process+0x7dc>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	613b      	str	r3, [r7, #16]
 801376e:	e00c      	b.n	801378a <tcp_process+0x6ae>
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d104      	bne.n	8013784 <tcp_process+0x6a8>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	68da      	ldr	r2, [r3, #12]
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	60da      	str	r2, [r3, #12]
 8013782:	e005      	b.n	8013790 <tcp_process+0x6b4>
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	613b      	str	r3, [r7, #16]
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d1ef      	bne.n	8013770 <tcp_process+0x694>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2200      	movs	r2, #0
 8013794:	60da      	str	r2, [r3, #12]
 8013796:	4b43      	ldr	r3, [pc, #268]	@ (80138a4 <tcp_process+0x7c8>)
 8013798:	2201      	movs	r2, #1
 801379a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	220a      	movs	r2, #10
 80137a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80137a2:	4b41      	ldr	r3, [pc, #260]	@ (80138a8 <tcp_process+0x7cc>)
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	60da      	str	r2, [r3, #12]
 80137aa:	4a3f      	ldr	r2, [pc, #252]	@ (80138a8 <tcp_process+0x7cc>)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6013      	str	r3, [r2, #0]
 80137b0:	f003 f8e4 	bl	801697c <tcp_timer_needed>
      }
      break;
 80137b4:	e06c      	b.n	8013890 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f000 f984 	bl	8013ac4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80137bc:	4b3b      	ldr	r3, [pc, #236]	@ (80138ac <tcp_process+0x7d0>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	f003 0310 	and.w	r3, r3, #16
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d065      	beq.n	8013894 <tcp_process+0x7b8>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80137cc:	4b38      	ldr	r3, [pc, #224]	@ (80138b0 <tcp_process+0x7d4>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d15f      	bne.n	8013894 <tcp_process+0x7b8>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d15b      	bne.n	8013894 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7fe fcf1 	bl	80121c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80137e2:	4b35      	ldr	r3, [pc, #212]	@ (80138b8 <tcp_process+0x7dc>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d105      	bne.n	80137f8 <tcp_process+0x71c>
 80137ec:	4b32      	ldr	r3, [pc, #200]	@ (80138b8 <tcp_process+0x7dc>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	4a31      	ldr	r2, [pc, #196]	@ (80138b8 <tcp_process+0x7dc>)
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	e013      	b.n	8013820 <tcp_process+0x744>
 80137f8:	4b2f      	ldr	r3, [pc, #188]	@ (80138b8 <tcp_process+0x7dc>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	60fb      	str	r3, [r7, #12]
 80137fe:	e00c      	b.n	801381a <tcp_process+0x73e>
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	429a      	cmp	r2, r3
 8013808:	d104      	bne.n	8013814 <tcp_process+0x738>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	68da      	ldr	r2, [r3, #12]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	60da      	str	r2, [r3, #12]
 8013812:	e005      	b.n	8013820 <tcp_process+0x744>
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	60fb      	str	r3, [r7, #12]
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d1ef      	bne.n	8013800 <tcp_process+0x724>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2200      	movs	r2, #0
 8013824:	60da      	str	r2, [r3, #12]
 8013826:	4b1f      	ldr	r3, [pc, #124]	@ (80138a4 <tcp_process+0x7c8>)
 8013828:	2201      	movs	r2, #1
 801382a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	220a      	movs	r2, #10
 8013830:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013832:	4b1d      	ldr	r3, [pc, #116]	@ (80138a8 <tcp_process+0x7cc>)
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	60da      	str	r2, [r3, #12]
 801383a:	4a1b      	ldr	r2, [pc, #108]	@ (80138a8 <tcp_process+0x7cc>)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6013      	str	r3, [r2, #0]
 8013840:	f003 f89c 	bl	801697c <tcp_timer_needed>
      }
      break;
 8013844:	e026      	b.n	8013894 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f000 f93c 	bl	8013ac4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801384c:	4b17      	ldr	r3, [pc, #92]	@ (80138ac <tcp_process+0x7d0>)
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	f003 0310 	and.w	r3, r3, #16
 8013854:	2b00      	cmp	r3, #0
 8013856:	d01f      	beq.n	8013898 <tcp_process+0x7bc>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801385c:	4b14      	ldr	r3, [pc, #80]	@ (80138b0 <tcp_process+0x7d4>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	429a      	cmp	r2, r3
 8013862:	d119      	bne.n	8013898 <tcp_process+0x7bc>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013868:	2b00      	cmp	r3, #0
 801386a:	d115      	bne.n	8013898 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801386c:	4b11      	ldr	r3, [pc, #68]	@ (80138b4 <tcp_process+0x7d8>)
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	f043 0310 	orr.w	r3, r3, #16
 8013874:	b2da      	uxtb	r2, r3
 8013876:	4b0f      	ldr	r3, [pc, #60]	@ (80138b4 <tcp_process+0x7d8>)
 8013878:	701a      	strb	r2, [r3, #0]
      }
      break;
 801387a:	e00d      	b.n	8013898 <tcp_process+0x7bc>
    default:
      break;
 801387c:	bf00      	nop
 801387e:	e00c      	b.n	801389a <tcp_process+0x7be>
      break;
 8013880:	bf00      	nop
 8013882:	e00a      	b.n	801389a <tcp_process+0x7be>
      break;
 8013884:	bf00      	nop
 8013886:	e008      	b.n	801389a <tcp_process+0x7be>
      break;
 8013888:	bf00      	nop
 801388a:	e006      	b.n	801389a <tcp_process+0x7be>
      break;
 801388c:	bf00      	nop
 801388e:	e004      	b.n	801389a <tcp_process+0x7be>
      break;
 8013890:	bf00      	nop
 8013892:	e002      	b.n	801389a <tcp_process+0x7be>
      break;
 8013894:	bf00      	nop
 8013896:	e000      	b.n	801389a <tcp_process+0x7be>
      break;
 8013898:	bf00      	nop
  }
  return ERR_OK;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3724      	adds	r7, #36	@ 0x24
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd90      	pop	{r4, r7, pc}
 80138a4:	2000c784 	.word	0x2000c784
 80138a8:	2000c780 	.word	0x2000c780
 80138ac:	2000c7b4 	.word	0x2000c7b4
 80138b0:	2000c7ac 	.word	0x2000c7ac
 80138b4:	2000c7b5 	.word	0x2000c7b5
 80138b8:	2000c77c 	.word	0x2000c77c

080138bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80138bc:	b590      	push	{r4, r7, lr}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d106      	bne.n	80138da <tcp_oos_insert_segment+0x1e>
 80138cc:	4b3b      	ldr	r3, [pc, #236]	@ (80139bc <tcp_oos_insert_segment+0x100>)
 80138ce:	f240 421f 	movw	r2, #1055	@ 0x41f
 80138d2:	493b      	ldr	r1, [pc, #236]	@ (80139c0 <tcp_oos_insert_segment+0x104>)
 80138d4:	483b      	ldr	r0, [pc, #236]	@ (80139c4 <tcp_oos_insert_segment+0x108>)
 80138d6:	f006 fdd9 	bl	801a48c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	899b      	ldrh	r3, [r3, #12]
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fb f9e2 	bl	800ecac <lwip_htons>
 80138e8:	4603      	mov	r3, r0
 80138ea:	b2db      	uxtb	r3, r3
 80138ec:	f003 0301 	and.w	r3, r3, #1
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d028      	beq.n	8013946 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80138f4:	6838      	ldr	r0, [r7, #0]
 80138f6:	f7fe f9bf 	bl	8011c78 <tcp_segs_free>
    next = NULL;
 80138fa:	2300      	movs	r3, #0
 80138fc:	603b      	str	r3, [r7, #0]
 80138fe:	e056      	b.n	80139ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	899b      	ldrh	r3, [r3, #12]
 8013906:	b29b      	uxth	r3, r3
 8013908:	4618      	mov	r0, r3
 801390a:	f7fb f9cf 	bl	800ecac <lwip_htons>
 801390e:	4603      	mov	r3, r0
 8013910:	b2db      	uxtb	r3, r3
 8013912:	f003 0301 	and.w	r3, r3, #1
 8013916:	2b00      	cmp	r3, #0
 8013918:	d00d      	beq.n	8013936 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	899b      	ldrh	r3, [r3, #12]
 8013920:	b29c      	uxth	r4, r3
 8013922:	2001      	movs	r0, #1
 8013924:	f7fb f9c2 	bl	800ecac <lwip_htons>
 8013928:	4603      	mov	r3, r0
 801392a:	461a      	mov	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	4322      	orrs	r2, r4
 8013932:	b292      	uxth	r2, r2
 8013934:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f7fe f9ae 	bl	8011ca2 <tcp_seg_free>
    while (next &&
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d00e      	beq.n	801396a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	891b      	ldrh	r3, [r3, #8]
 8013950:	461a      	mov	r2, r3
 8013952:	4b1d      	ldr	r3, [pc, #116]	@ (80139c8 <tcp_oos_insert_segment+0x10c>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	441a      	add	r2, r3
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	6839      	ldr	r1, [r7, #0]
 8013960:	8909      	ldrh	r1, [r1, #8]
 8013962:	440b      	add	r3, r1
 8013964:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013966:	2b00      	cmp	r3, #0
 8013968:	daca      	bge.n	8013900 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01e      	beq.n	80139ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	891b      	ldrh	r3, [r3, #8]
 8013974:	461a      	mov	r2, r3
 8013976:	4b14      	ldr	r3, [pc, #80]	@ (80139c8 <tcp_oos_insert_segment+0x10c>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	441a      	add	r2, r3
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013984:	2b00      	cmp	r3, #0
 8013986:	dd12      	ble.n	80139ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	b29a      	uxth	r2, r3
 8013990:	4b0d      	ldr	r3, [pc, #52]	@ (80139c8 <tcp_oos_insert_segment+0x10c>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	b29b      	uxth	r3, r3
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	b29a      	uxth	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	685a      	ldr	r2, [r3, #4]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	891b      	ldrh	r3, [r3, #8]
 80139a6:	4619      	mov	r1, r3
 80139a8:	4610      	mov	r0, r2
 80139aa:	f7fc fbb9 	bl	8010120 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	601a      	str	r2, [r3, #0]
}
 80139b4:	bf00      	nop
 80139b6:	3714      	adds	r7, #20
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd90      	pop	{r4, r7, pc}
 80139bc:	0801dc0c 	.word	0x0801dc0c
 80139c0:	0801decc 	.word	0x0801decc
 80139c4:	0801dc58 	.word	0x0801dc58
 80139c8:	2000c7a8 	.word	0x2000c7a8

080139cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80139cc:	b5b0      	push	{r4, r5, r7, lr}
 80139ce:	b086      	sub	sp, #24
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	607a      	str	r2, [r7, #4]
 80139d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80139da:	e03e      	b.n	8013a5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fc fdac 	bl	8010548 <pbuf_clen>
 80139f0:	4603      	mov	r3, r0
 80139f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139fa:	8a7a      	ldrh	r2, [r7, #18]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d906      	bls.n	8013a0e <tcp_free_acked_segments+0x42>
 8013a00:	4b2a      	ldr	r3, [pc, #168]	@ (8013aac <tcp_free_acked_segments+0xe0>)
 8013a02:	f240 4257 	movw	r2, #1111	@ 0x457
 8013a06:	492a      	ldr	r1, [pc, #168]	@ (8013ab0 <tcp_free_acked_segments+0xe4>)
 8013a08:	482a      	ldr	r0, [pc, #168]	@ (8013ab4 <tcp_free_acked_segments+0xe8>)
 8013a0a:	f006 fd3f 	bl	801a48c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013a14:	8a7b      	ldrh	r3, [r7, #18]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	891a      	ldrh	r2, [r3, #8]
 8013a24:	4b24      	ldr	r3, [pc, #144]	@ (8013ab8 <tcp_free_acked_segments+0xec>)
 8013a26:	881b      	ldrh	r3, [r3, #0]
 8013a28:	4413      	add	r3, r2
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	4b22      	ldr	r3, [pc, #136]	@ (8013ab8 <tcp_free_acked_segments+0xec>)
 8013a2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013a30:	6978      	ldr	r0, [r7, #20]
 8013a32:	f7fe f936 	bl	8011ca2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d00c      	beq.n	8013a5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d109      	bne.n	8013a5a <tcp_free_acked_segments+0x8e>
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d106      	bne.n	8013a5a <tcp_free_acked_segments+0x8e>
 8013a4c:	4b17      	ldr	r3, [pc, #92]	@ (8013aac <tcp_free_acked_segments+0xe0>)
 8013a4e:	f240 4261 	movw	r2, #1121	@ 0x461
 8013a52:	491a      	ldr	r1, [pc, #104]	@ (8013abc <tcp_free_acked_segments+0xf0>)
 8013a54:	4817      	ldr	r0, [pc, #92]	@ (8013ab4 <tcp_free_acked_segments+0xe8>)
 8013a56:	f006 fd19 	bl	801a48c <iprintf>
  while (seg_list != NULL &&
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d020      	beq.n	8013aa2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7fb f936 	bl	800ecd8 <lwip_htonl>
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	891b      	ldrh	r3, [r3, #8]
 8013a72:	461d      	mov	r5, r3
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fb f915 	bl	800ecac <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	f003 0303 	and.w	r3, r3, #3
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d001      	beq.n	8013a92 <tcp_free_acked_segments+0xc6>
 8013a8e:	2301      	movs	r3, #1
 8013a90:	e000      	b.n	8013a94 <tcp_free_acked_segments+0xc8>
 8013a92:	2300      	movs	r3, #0
 8013a94:	442b      	add	r3, r5
 8013a96:	18e2      	adds	r2, r4, r3
 8013a98:	4b09      	ldr	r3, [pc, #36]	@ (8013ac0 <tcp_free_acked_segments+0xf4>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	dd9c      	ble.n	80139dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013aa2:	68bb      	ldr	r3, [r7, #8]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3718      	adds	r7, #24
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8013aac:	0801dc0c 	.word	0x0801dc0c
 8013ab0:	0801def4 	.word	0x0801def4
 8013ab4:	0801dc58 	.word	0x0801dc58
 8013ab8:	2000c7b0 	.word	0x2000c7b0
 8013abc:	0801df1c 	.word	0x0801df1c
 8013ac0:	2000c7ac 	.word	0x2000c7ac

08013ac4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013ac4:	b5b0      	push	{r4, r5, r7, lr}
 8013ac6:	b094      	sub	sp, #80	@ 0x50
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013acc:	2300      	movs	r3, #0
 8013ace:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d106      	bne.n	8013ae4 <tcp_receive+0x20>
 8013ad6:	4b91      	ldr	r3, [pc, #580]	@ (8013d1c <tcp_receive+0x258>)
 8013ad8:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013adc:	4990      	ldr	r1, [pc, #576]	@ (8013d20 <tcp_receive+0x25c>)
 8013ade:	4891      	ldr	r0, [pc, #580]	@ (8013d24 <tcp_receive+0x260>)
 8013ae0:	f006 fcd4 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	7d1b      	ldrb	r3, [r3, #20]
 8013ae8:	2b03      	cmp	r3, #3
 8013aea:	d806      	bhi.n	8013afa <tcp_receive+0x36>
 8013aec:	4b8b      	ldr	r3, [pc, #556]	@ (8013d1c <tcp_receive+0x258>)
 8013aee:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013af2:	498d      	ldr	r1, [pc, #564]	@ (8013d28 <tcp_receive+0x264>)
 8013af4:	488b      	ldr	r0, [pc, #556]	@ (8013d24 <tcp_receive+0x260>)
 8013af6:	f006 fcc9 	bl	801a48c <iprintf>

  if (flags & TCP_ACK) {
 8013afa:	4b8c      	ldr	r3, [pc, #560]	@ (8013d2c <tcp_receive+0x268>)
 8013afc:	781b      	ldrb	r3, [r3, #0]
 8013afe:	f003 0310 	and.w	r3, r3, #16
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f000 8264 	beq.w	8013fd0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b0e:	461a      	mov	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b14:	4413      	add	r3, r2
 8013b16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b1c:	4b84      	ldr	r3, [pc, #528]	@ (8013d30 <tcp_receive+0x26c>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	db1b      	blt.n	8013b5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b2a:	4b81      	ldr	r3, [pc, #516]	@ (8013d30 <tcp_receive+0x26c>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d106      	bne.n	8013b40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013b36:	4b7f      	ldr	r3, [pc, #508]	@ (8013d34 <tcp_receive+0x270>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	db0e      	blt.n	8013b5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013b44:	4b7b      	ldr	r3, [pc, #492]	@ (8013d34 <tcp_receive+0x270>)
 8013b46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d125      	bne.n	8013b98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8013d38 <tcp_receive+0x274>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	89db      	ldrh	r3, [r3, #14]
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d91c      	bls.n	8013b98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013b5e:	4b76      	ldr	r3, [pc, #472]	@ (8013d38 <tcp_receive+0x274>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	89db      	ldrh	r3, [r3, #14]
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d205      	bcs.n	8013b88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013b88:	4b69      	ldr	r3, [pc, #420]	@ (8013d30 <tcp_receive+0x26c>)
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013b90:	4b68      	ldr	r3, [pc, #416]	@ (8013d34 <tcp_receive+0x270>)
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013b98:	4b66      	ldr	r3, [pc, #408]	@ (8013d34 <tcp_receive+0x270>)
 8013b9a:	681a      	ldr	r2, [r3, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ba0:	1ad3      	subs	r3, r2, r3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	dc58      	bgt.n	8013c58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013ba6:	4b65      	ldr	r3, [pc, #404]	@ (8013d3c <tcp_receive+0x278>)
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d14b      	bne.n	8013c46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013bb8:	4413      	add	r3, r2
 8013bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d142      	bne.n	8013c46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	db3d      	blt.n	8013c46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013bce:	4b59      	ldr	r3, [pc, #356]	@ (8013d34 <tcp_receive+0x270>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d137      	bne.n	8013c46 <tcp_receive+0x182>
              found_dupack = 1;
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013be0:	2bff      	cmp	r3, #255	@ 0xff
 8013be2:	d007      	beq.n	8013bf4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013bea:	3301      	adds	r3, #1
 8013bec:	b2da      	uxtb	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013bfa:	2b03      	cmp	r3, #3
 8013bfc:	d91b      	bls.n	8013c36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c08:	4413      	add	r3, r2
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d30a      	bcc.n	8013c2c <tcp_receive+0x168>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c20:	4413      	add	r3, r2
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013c2a:	e004      	b.n	8013c36 <tcp_receive+0x172>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d902      	bls.n	8013c46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f002 fb3f 	bl	80162c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f040 8161 	bne.w	8013f10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013c56:	e15b      	b.n	8013f10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c58:	4b36      	ldr	r3, [pc, #216]	@ (8013d34 <tcp_receive+0x270>)
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c60:	1ad3      	subs	r3, r2, r3
 8013c62:	3b01      	subs	r3, #1
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	f2c0 814e 	blt.w	8013f06 <tcp_receive+0x442>
 8013c6a:	4b32      	ldr	r3, [pc, #200]	@ (8013d34 <tcp_receive+0x270>)
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c72:	1ad3      	subs	r3, r2, r3
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	f300 8146 	bgt.w	8013f06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	8b5b      	ldrh	r3, [r3, #26]
 8013c7e:	f003 0304 	and.w	r3, r3, #4
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d010      	beq.n	8013ca8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	8b5b      	ldrh	r3, [r3, #26]
 8013c8a:	f023 0304 	bic.w	r3, r3, #4
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013cb6:	10db      	asrs	r3, r3, #3
 8013cb8:	b21b      	sxth	r3, r3
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	4413      	add	r3, r2
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	b21a      	sxth	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013cd0:	4b18      	ldr	r3, [pc, #96]	@ (8013d34 <tcp_receive+0x270>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013ce8:	4b12      	ldr	r3, [pc, #72]	@ (8013d34 <tcp_receive+0x270>)
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7d1b      	ldrb	r3, [r3, #20]
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	f240 8097 	bls.w	8013e28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d245      	bcs.n	8013d96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8b5b      	ldrh	r3, [r3, #26]
 8013d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d014      	beq.n	8013d40 <tcp_receive+0x27c>
 8013d16:	2301      	movs	r3, #1
 8013d18:	e013      	b.n	8013d42 <tcp_receive+0x27e>
 8013d1a:	bf00      	nop
 8013d1c:	0801dc0c 	.word	0x0801dc0c
 8013d20:	0801df3c 	.word	0x0801df3c
 8013d24:	0801dc58 	.word	0x0801dc58
 8013d28:	0801df58 	.word	0x0801df58
 8013d2c:	2000c7b4 	.word	0x2000c7b4
 8013d30:	2000c7a8 	.word	0x2000c7a8
 8013d34:	2000c7ac 	.word	0x2000c7ac
 8013d38:	2000c798 	.word	0x2000c798
 8013d3c:	2000c7b2 	.word	0x2000c7b2
 8013d40:	2302      	movs	r3, #2
 8013d42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013d46:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d50:	fb12 f303 	smulbb	r3, r2, r3
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	bf28      	it	cs
 8013d5c:	4613      	movcs	r3, r2
 8013d5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013d68:	4413      	add	r3, r2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d309      	bcc.n	8013d8a <tcp_receive+0x2c6>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013d7e:	4413      	add	r3, r2
 8013d80:	b29a      	uxth	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013d88:	e04e      	b.n	8013e28 <tcp_receive+0x364>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013d94:	e048      	b.n	8013e28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013d9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013d9e:	4413      	add	r3, r2
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d309      	bcc.n	8013dc0 <tcp_receive+0x2fc>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013db2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013db4:	4413      	add	r3, r2
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013dbe:	e004      	b.n	8013dca <tcp_receive+0x306>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d326      	bcc.n	8013e28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013dfa:	4413      	add	r3, r2
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d30a      	bcc.n	8013e1e <tcp_receive+0x35a>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e12:	4413      	add	r3, r2
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e1c:	e004      	b.n	8013e28 <tcp_receive+0x364>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e30:	4a98      	ldr	r2, [pc, #608]	@ (8014094 <tcp_receive+0x5d0>)
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ff fdca 	bl	80139cc <tcp_free_acked_segments>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e46:	4a94      	ldr	r2, [pc, #592]	@ (8014098 <tcp_receive+0x5d4>)
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7ff fdbf 	bl	80139cc <tcp_free_acked_segments>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d104      	bne.n	8013e66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013e64:	e002      	b.n	8013e6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d103      	bne.n	8013e82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013e88:	4b84      	ldr	r3, [pc, #528]	@ (801409c <tcp_receive+0x5d8>)
 8013e8a:	881b      	ldrh	r3, [r3, #0]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	8b5b      	ldrh	r3, [r3, #26]
 8013e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d035      	beq.n	8013f0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d118      	bne.n	8013edc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d00c      	beq.n	8013ecc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fa ff0a 	bl	800ecd8 <lwip_htonl>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	dc20      	bgt.n	8013f0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013eda:	e018      	b.n	8013f0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fa fef5 	bl	800ecd8 <lwip_htonl>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	1ae3      	subs	r3, r4, r3
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	dc0b      	bgt.n	8013f0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	8b5b      	ldrh	r3, [r3, #26]
 8013efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f04:	e003      	b.n	8013f0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f002 fbc8 	bl	801669c <tcp_send_empty_ack>
 8013f0c:	e000      	b.n	8013f10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d05b      	beq.n	8013fd0 <tcp_receive+0x50c>
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f1c:	4b60      	ldr	r3, [pc, #384]	@ (80140a0 <tcp_receive+0x5dc>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	da54      	bge.n	8013fd0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013f26:	4b5f      	ldr	r3, [pc, #380]	@ (80140a4 <tcp_receive+0x5e0>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013f3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013f44:	10db      	asrs	r3, r3, #3
 8013f46:	b21b      	sxth	r3, r3
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	b29b      	uxth	r3, r3
 8013f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013f5e:	4413      	add	r3, r2
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	b21a      	sxth	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013f68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	da05      	bge.n	8013f7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013f74:	425b      	negs	r3, r3
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013f7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013f86:	109b      	asrs	r3, r3, #2
 8013f88:	b21b      	sxth	r3, r3
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013fa0:	4413      	add	r3, r2
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	b21a      	sxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013fb0:	10db      	asrs	r3, r3, #3
 8013fb2:	b21b      	sxth	r3, r3
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	4413      	add	r3, r2
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	b21a      	sxth	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013fd0:	4b35      	ldr	r3, [pc, #212]	@ (80140a8 <tcp_receive+0x5e4>)
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f000 84df 	beq.w	8014998 <tcp_receive+0xed4>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	7d1b      	ldrb	r3, [r3, #20]
 8013fde:	2b06      	cmp	r3, #6
 8013fe0:	f200 84da 	bhi.w	8014998 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013fe8:	4b30      	ldr	r3, [pc, #192]	@ (80140ac <tcp_receive+0x5e8>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f2c0 808f 	blt.w	8014114 <tcp_receive+0x650>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80140a8 <tcp_receive+0x5e4>)
 8013ffc:	881b      	ldrh	r3, [r3, #0]
 8013ffe:	4619      	mov	r1, r3
 8014000:	4b2a      	ldr	r3, [pc, #168]	@ (80140ac <tcp_receive+0x5e8>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	440b      	add	r3, r1
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	3301      	adds	r3, #1
 801400a:	2b00      	cmp	r3, #0
 801400c:	f300 8082 	bgt.w	8014114 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014010:	4b27      	ldr	r3, [pc, #156]	@ (80140b0 <tcp_receive+0x5ec>)
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801401a:	4b24      	ldr	r3, [pc, #144]	@ (80140ac <tcp_receive+0x5e8>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	1ad3      	subs	r3, r2, r3
 8014020:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014022:	4b23      	ldr	r3, [pc, #140]	@ (80140b0 <tcp_receive+0x5ec>)
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d106      	bne.n	8014038 <tcp_receive+0x574>
 801402a:	4b22      	ldr	r3, [pc, #136]	@ (80140b4 <tcp_receive+0x5f0>)
 801402c:	f240 5294 	movw	r2, #1428	@ 0x594
 8014030:	4921      	ldr	r1, [pc, #132]	@ (80140b8 <tcp_receive+0x5f4>)
 8014032:	4822      	ldr	r0, [pc, #136]	@ (80140bc <tcp_receive+0x5f8>)
 8014034:	f006 fa2a 	bl	801a48c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801403a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801403e:	4293      	cmp	r3, r2
 8014040:	d906      	bls.n	8014050 <tcp_receive+0x58c>
 8014042:	4b1c      	ldr	r3, [pc, #112]	@ (80140b4 <tcp_receive+0x5f0>)
 8014044:	f240 5295 	movw	r2, #1429	@ 0x595
 8014048:	491d      	ldr	r1, [pc, #116]	@ (80140c0 <tcp_receive+0x5fc>)
 801404a:	481c      	ldr	r0, [pc, #112]	@ (80140bc <tcp_receive+0x5f8>)
 801404c:	f006 fa1e 	bl	801a48c <iprintf>
      off = (u16_t)off32;
 8014050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014052:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014056:	4b16      	ldr	r3, [pc, #88]	@ (80140b0 <tcp_receive+0x5ec>)
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	891b      	ldrh	r3, [r3, #8]
 801405c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014060:	429a      	cmp	r2, r3
 8014062:	d906      	bls.n	8014072 <tcp_receive+0x5ae>
 8014064:	4b13      	ldr	r3, [pc, #76]	@ (80140b4 <tcp_receive+0x5f0>)
 8014066:	f240 5297 	movw	r2, #1431	@ 0x597
 801406a:	4916      	ldr	r1, [pc, #88]	@ (80140c4 <tcp_receive+0x600>)
 801406c:	4813      	ldr	r0, [pc, #76]	@ (80140bc <tcp_receive+0x5f8>)
 801406e:	f006 fa0d 	bl	801a48c <iprintf>
      inseg.len -= off;
 8014072:	4b0f      	ldr	r3, [pc, #60]	@ (80140b0 <tcp_receive+0x5ec>)
 8014074:	891a      	ldrh	r2, [r3, #8]
 8014076:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801407a:	1ad3      	subs	r3, r2, r3
 801407c:	b29a      	uxth	r2, r3
 801407e:	4b0c      	ldr	r3, [pc, #48]	@ (80140b0 <tcp_receive+0x5ec>)
 8014080:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014082:	4b0b      	ldr	r3, [pc, #44]	@ (80140b0 <tcp_receive+0x5ec>)
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	891a      	ldrh	r2, [r3, #8]
 8014088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801408c:	1ad3      	subs	r3, r2, r3
 801408e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014090:	e02a      	b.n	80140e8 <tcp_receive+0x624>
 8014092:	bf00      	nop
 8014094:	0801df74 	.word	0x0801df74
 8014098:	0801df7c 	.word	0x0801df7c
 801409c:	2000c7b0 	.word	0x2000c7b0
 80140a0:	2000c7ac 	.word	0x2000c7ac
 80140a4:	2000c770 	.word	0x2000c770
 80140a8:	2000c7b2 	.word	0x2000c7b2
 80140ac:	2000c7a8 	.word	0x2000c7a8
 80140b0:	2000c788 	.word	0x2000c788
 80140b4:	0801dc0c 	.word	0x0801dc0c
 80140b8:	0801df84 	.word	0x0801df84
 80140bc:	0801dc58 	.word	0x0801dc58
 80140c0:	0801df94 	.word	0x0801df94
 80140c4:	0801dfa4 	.word	0x0801dfa4
        off -= p->len;
 80140c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ca:	895b      	ldrh	r3, [r3, #10]
 80140cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80140d0:	1ad3      	subs	r3, r2, r3
 80140d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80140d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80140da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80140dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140de:	2200      	movs	r2, #0
 80140e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80140e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80140e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ea:	895b      	ldrh	r3, [r3, #10]
 80140ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d8e9      	bhi.n	80140c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80140f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80140f8:	4619      	mov	r1, r3
 80140fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80140fc:	f7fc f910 	bl	8010320 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014104:	4a90      	ldr	r2, [pc, #576]	@ (8014348 <tcp_receive+0x884>)
 8014106:	6013      	str	r3, [r2, #0]
 8014108:	4b90      	ldr	r3, [pc, #576]	@ (801434c <tcp_receive+0x888>)
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	4a8e      	ldr	r2, [pc, #568]	@ (8014348 <tcp_receive+0x884>)
 801410e:	6812      	ldr	r2, [r2, #0]
 8014110:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014112:	e00d      	b.n	8014130 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014114:	4b8c      	ldr	r3, [pc, #560]	@ (8014348 <tcp_receive+0x884>)
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	da06      	bge.n	8014130 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8b5b      	ldrh	r3, [r3, #26]
 8014126:	f043 0302 	orr.w	r3, r3, #2
 801412a:	b29a      	uxth	r2, r3
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014130:	4b85      	ldr	r3, [pc, #532]	@ (8014348 <tcp_receive+0x884>)
 8014132:	681a      	ldr	r2, [r3, #0]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	2b00      	cmp	r3, #0
 801413c:	f2c0 8427 	blt.w	801498e <tcp_receive+0xeca>
 8014140:	4b81      	ldr	r3, [pc, #516]	@ (8014348 <tcp_receive+0x884>)
 8014142:	681a      	ldr	r2, [r3, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014148:	6879      	ldr	r1, [r7, #4]
 801414a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801414c:	440b      	add	r3, r1
 801414e:	1ad3      	subs	r3, r2, r3
 8014150:	3301      	adds	r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	f300 841b 	bgt.w	801498e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801415c:	4b7a      	ldr	r3, [pc, #488]	@ (8014348 <tcp_receive+0x884>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	429a      	cmp	r2, r3
 8014162:	f040 8298 	bne.w	8014696 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014166:	4b79      	ldr	r3, [pc, #484]	@ (801434c <tcp_receive+0x888>)
 8014168:	891c      	ldrh	r4, [r3, #8]
 801416a:	4b78      	ldr	r3, [pc, #480]	@ (801434c <tcp_receive+0x888>)
 801416c:	68db      	ldr	r3, [r3, #12]
 801416e:	899b      	ldrh	r3, [r3, #12]
 8014170:	b29b      	uxth	r3, r3
 8014172:	4618      	mov	r0, r3
 8014174:	f7fa fd9a 	bl	800ecac <lwip_htons>
 8014178:	4603      	mov	r3, r0
 801417a:	b2db      	uxtb	r3, r3
 801417c:	f003 0303 	and.w	r3, r3, #3
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <tcp_receive+0x6c4>
 8014184:	2301      	movs	r3, #1
 8014186:	e000      	b.n	801418a <tcp_receive+0x6c6>
 8014188:	2300      	movs	r3, #0
 801418a:	4423      	add	r3, r4
 801418c:	b29a      	uxth	r2, r3
 801418e:	4b70      	ldr	r3, [pc, #448]	@ (8014350 <tcp_receive+0x88c>)
 8014190:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014196:	4b6e      	ldr	r3, [pc, #440]	@ (8014350 <tcp_receive+0x88c>)
 8014198:	881b      	ldrh	r3, [r3, #0]
 801419a:	429a      	cmp	r2, r3
 801419c:	d274      	bcs.n	8014288 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801419e:	4b6b      	ldr	r3, [pc, #428]	@ (801434c <tcp_receive+0x888>)
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	899b      	ldrh	r3, [r3, #12]
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fa fd80 	bl	800ecac <lwip_htons>
 80141ac:	4603      	mov	r3, r0
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	f003 0301 	and.w	r3, r3, #1
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d01e      	beq.n	80141f6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80141b8:	4b64      	ldr	r3, [pc, #400]	@ (801434c <tcp_receive+0x888>)
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	899b      	ldrh	r3, [r3, #12]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	b21b      	sxth	r3, r3
 80141c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80141c6:	b21c      	sxth	r4, r3
 80141c8:	4b60      	ldr	r3, [pc, #384]	@ (801434c <tcp_receive+0x888>)
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	899b      	ldrh	r3, [r3, #12]
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7fa fd6b 	bl	800ecac <lwip_htons>
 80141d6:	4603      	mov	r3, r0
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80141de:	b29b      	uxth	r3, r3
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fa fd63 	bl	800ecac <lwip_htons>
 80141e6:	4603      	mov	r3, r0
 80141e8:	b21b      	sxth	r3, r3
 80141ea:	4323      	orrs	r3, r4
 80141ec:	b21a      	sxth	r2, r3
 80141ee:	4b57      	ldr	r3, [pc, #348]	@ (801434c <tcp_receive+0x888>)
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	b292      	uxth	r2, r2
 80141f4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141fa:	4b54      	ldr	r3, [pc, #336]	@ (801434c <tcp_receive+0x888>)
 80141fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80141fe:	4b53      	ldr	r3, [pc, #332]	@ (801434c <tcp_receive+0x888>)
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	899b      	ldrh	r3, [r3, #12]
 8014204:	b29b      	uxth	r3, r3
 8014206:	4618      	mov	r0, r3
 8014208:	f7fa fd50 	bl	800ecac <lwip_htons>
 801420c:	4603      	mov	r3, r0
 801420e:	b2db      	uxtb	r3, r3
 8014210:	f003 0302 	and.w	r3, r3, #2
 8014214:	2b00      	cmp	r3, #0
 8014216:	d005      	beq.n	8014224 <tcp_receive+0x760>
            inseg.len -= 1;
 8014218:	4b4c      	ldr	r3, [pc, #304]	@ (801434c <tcp_receive+0x888>)
 801421a:	891b      	ldrh	r3, [r3, #8]
 801421c:	3b01      	subs	r3, #1
 801421e:	b29a      	uxth	r2, r3
 8014220:	4b4a      	ldr	r3, [pc, #296]	@ (801434c <tcp_receive+0x888>)
 8014222:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014224:	4b49      	ldr	r3, [pc, #292]	@ (801434c <tcp_receive+0x888>)
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	4a48      	ldr	r2, [pc, #288]	@ (801434c <tcp_receive+0x888>)
 801422a:	8912      	ldrh	r2, [r2, #8]
 801422c:	4611      	mov	r1, r2
 801422e:	4618      	mov	r0, r3
 8014230:	f7fb ff76 	bl	8010120 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014234:	4b45      	ldr	r3, [pc, #276]	@ (801434c <tcp_receive+0x888>)
 8014236:	891c      	ldrh	r4, [r3, #8]
 8014238:	4b44      	ldr	r3, [pc, #272]	@ (801434c <tcp_receive+0x888>)
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	899b      	ldrh	r3, [r3, #12]
 801423e:	b29b      	uxth	r3, r3
 8014240:	4618      	mov	r0, r3
 8014242:	f7fa fd33 	bl	800ecac <lwip_htons>
 8014246:	4603      	mov	r3, r0
 8014248:	b2db      	uxtb	r3, r3
 801424a:	f003 0303 	and.w	r3, r3, #3
 801424e:	2b00      	cmp	r3, #0
 8014250:	d001      	beq.n	8014256 <tcp_receive+0x792>
 8014252:	2301      	movs	r3, #1
 8014254:	e000      	b.n	8014258 <tcp_receive+0x794>
 8014256:	2300      	movs	r3, #0
 8014258:	4423      	add	r3, r4
 801425a:	b29a      	uxth	r2, r3
 801425c:	4b3c      	ldr	r3, [pc, #240]	@ (8014350 <tcp_receive+0x88c>)
 801425e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014260:	4b3b      	ldr	r3, [pc, #236]	@ (8014350 <tcp_receive+0x88c>)
 8014262:	881b      	ldrh	r3, [r3, #0]
 8014264:	461a      	mov	r2, r3
 8014266:	4b38      	ldr	r3, [pc, #224]	@ (8014348 <tcp_receive+0x884>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	441a      	add	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014270:	6879      	ldr	r1, [r7, #4]
 8014272:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014274:	440b      	add	r3, r1
 8014276:	429a      	cmp	r2, r3
 8014278:	d006      	beq.n	8014288 <tcp_receive+0x7c4>
 801427a:	4b36      	ldr	r3, [pc, #216]	@ (8014354 <tcp_receive+0x890>)
 801427c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014280:	4935      	ldr	r1, [pc, #212]	@ (8014358 <tcp_receive+0x894>)
 8014282:	4836      	ldr	r0, [pc, #216]	@ (801435c <tcp_receive+0x898>)
 8014284:	f006 f902 	bl	801a48c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801428c:	2b00      	cmp	r3, #0
 801428e:	f000 80e6 	beq.w	801445e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014292:	4b2e      	ldr	r3, [pc, #184]	@ (801434c <tcp_receive+0x888>)
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	899b      	ldrh	r3, [r3, #12]
 8014298:	b29b      	uxth	r3, r3
 801429a:	4618      	mov	r0, r3
 801429c:	f7fa fd06 	bl	800ecac <lwip_htons>
 80142a0:	4603      	mov	r3, r0
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	f003 0301 	and.w	r3, r3, #1
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d010      	beq.n	80142ce <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80142ac:	e00a      	b.n	80142c4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142b2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f7fd fcef 	bl	8011ca2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1f0      	bne.n	80142ae <tcp_receive+0x7ea>
 80142cc:	e0c7      	b.n	801445e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80142d4:	e051      	b.n	801437a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80142d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80142d8:	68db      	ldr	r3, [r3, #12]
 80142da:	899b      	ldrh	r3, [r3, #12]
 80142dc:	b29b      	uxth	r3, r3
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fa fce4 	bl	800ecac <lwip_htons>
 80142e4:	4603      	mov	r3, r0
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	f003 0301 	and.w	r3, r3, #1
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d03c      	beq.n	801436a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80142f0:	4b16      	ldr	r3, [pc, #88]	@ (801434c <tcp_receive+0x888>)
 80142f2:	68db      	ldr	r3, [r3, #12]
 80142f4:	899b      	ldrh	r3, [r3, #12]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fa fcd7 	bl	800ecac <lwip_htons>
 80142fe:	4603      	mov	r3, r0
 8014300:	b2db      	uxtb	r3, r3
 8014302:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014306:	2b00      	cmp	r3, #0
 8014308:	d12f      	bne.n	801436a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801430a:	4b10      	ldr	r3, [pc, #64]	@ (801434c <tcp_receive+0x888>)
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	899b      	ldrh	r3, [r3, #12]
 8014310:	b29c      	uxth	r4, r3
 8014312:	2001      	movs	r0, #1
 8014314:	f7fa fcca 	bl	800ecac <lwip_htons>
 8014318:	4603      	mov	r3, r0
 801431a:	461a      	mov	r2, r3
 801431c:	4b0b      	ldr	r3, [pc, #44]	@ (801434c <tcp_receive+0x888>)
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	4322      	orrs	r2, r4
 8014322:	b292      	uxth	r2, r2
 8014324:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014326:	4b09      	ldr	r3, [pc, #36]	@ (801434c <tcp_receive+0x888>)
 8014328:	891c      	ldrh	r4, [r3, #8]
 801432a:	4b08      	ldr	r3, [pc, #32]	@ (801434c <tcp_receive+0x888>)
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	899b      	ldrh	r3, [r3, #12]
 8014330:	b29b      	uxth	r3, r3
 8014332:	4618      	mov	r0, r3
 8014334:	f7fa fcba 	bl	800ecac <lwip_htons>
 8014338:	4603      	mov	r3, r0
 801433a:	b2db      	uxtb	r3, r3
 801433c:	f003 0303 	and.w	r3, r3, #3
 8014340:	2b00      	cmp	r3, #0
 8014342:	d00d      	beq.n	8014360 <tcp_receive+0x89c>
 8014344:	2301      	movs	r3, #1
 8014346:	e00c      	b.n	8014362 <tcp_receive+0x89e>
 8014348:	2000c7a8 	.word	0x2000c7a8
 801434c:	2000c788 	.word	0x2000c788
 8014350:	2000c7b2 	.word	0x2000c7b2
 8014354:	0801dc0c 	.word	0x0801dc0c
 8014358:	0801dfb4 	.word	0x0801dfb4
 801435c:	0801dc58 	.word	0x0801dc58
 8014360:	2300      	movs	r3, #0
 8014362:	4423      	add	r3, r4
 8014364:	b29a      	uxth	r2, r3
 8014366:	4b98      	ldr	r3, [pc, #608]	@ (80145c8 <tcp_receive+0xb04>)
 8014368:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801436a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801436c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8014374:	6938      	ldr	r0, [r7, #16]
 8014376:	f7fd fc94 	bl	8011ca2 <tcp_seg_free>
            while (next &&
 801437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00e      	beq.n	801439e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014380:	4b91      	ldr	r3, [pc, #580]	@ (80145c8 <tcp_receive+0xb04>)
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	461a      	mov	r2, r3
 8014386:	4b91      	ldr	r3, [pc, #580]	@ (80145cc <tcp_receive+0xb08>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	441a      	add	r2, r3
 801438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014394:	8909      	ldrh	r1, [r1, #8]
 8014396:	440b      	add	r3, r1
 8014398:	1ad3      	subs	r3, r2, r3
            while (next &&
 801439a:	2b00      	cmp	r3, #0
 801439c:	da9b      	bge.n	80142d6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801439e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d059      	beq.n	8014458 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80143a4:	4b88      	ldr	r3, [pc, #544]	@ (80145c8 <tcp_receive+0xb04>)
 80143a6:	881b      	ldrh	r3, [r3, #0]
 80143a8:	461a      	mov	r2, r3
 80143aa:	4b88      	ldr	r3, [pc, #544]	@ (80145cc <tcp_receive+0xb08>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	441a      	add	r2, r3
 80143b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	dd4d      	ble.n	8014458 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80143bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	b29a      	uxth	r2, r3
 80143c4:	4b81      	ldr	r3, [pc, #516]	@ (80145cc <tcp_receive+0xb08>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	1ad3      	subs	r3, r2, r3
 80143cc:	b29a      	uxth	r2, r3
 80143ce:	4b80      	ldr	r3, [pc, #512]	@ (80145d0 <tcp_receive+0xb0c>)
 80143d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80143d2:	4b7f      	ldr	r3, [pc, #508]	@ (80145d0 <tcp_receive+0xb0c>)
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	899b      	ldrh	r3, [r3, #12]
 80143d8:	b29b      	uxth	r3, r3
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fa fc66 	bl	800ecac <lwip_htons>
 80143e0:	4603      	mov	r3, r0
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	f003 0302 	and.w	r3, r3, #2
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d005      	beq.n	80143f8 <tcp_receive+0x934>
                inseg.len -= 1;
 80143ec:	4b78      	ldr	r3, [pc, #480]	@ (80145d0 <tcp_receive+0xb0c>)
 80143ee:	891b      	ldrh	r3, [r3, #8]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	4b76      	ldr	r3, [pc, #472]	@ (80145d0 <tcp_receive+0xb0c>)
 80143f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80143f8:	4b75      	ldr	r3, [pc, #468]	@ (80145d0 <tcp_receive+0xb0c>)
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	4a74      	ldr	r2, [pc, #464]	@ (80145d0 <tcp_receive+0xb0c>)
 80143fe:	8912      	ldrh	r2, [r2, #8]
 8014400:	4611      	mov	r1, r2
 8014402:	4618      	mov	r0, r3
 8014404:	f7fb fe8c 	bl	8010120 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014408:	4b71      	ldr	r3, [pc, #452]	@ (80145d0 <tcp_receive+0xb0c>)
 801440a:	891c      	ldrh	r4, [r3, #8]
 801440c:	4b70      	ldr	r3, [pc, #448]	@ (80145d0 <tcp_receive+0xb0c>)
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	899b      	ldrh	r3, [r3, #12]
 8014412:	b29b      	uxth	r3, r3
 8014414:	4618      	mov	r0, r3
 8014416:	f7fa fc49 	bl	800ecac <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	b2db      	uxtb	r3, r3
 801441e:	f003 0303 	and.w	r3, r3, #3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <tcp_receive+0x966>
 8014426:	2301      	movs	r3, #1
 8014428:	e000      	b.n	801442c <tcp_receive+0x968>
 801442a:	2300      	movs	r3, #0
 801442c:	4423      	add	r3, r4
 801442e:	b29a      	uxth	r2, r3
 8014430:	4b65      	ldr	r3, [pc, #404]	@ (80145c8 <tcp_receive+0xb04>)
 8014432:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014434:	4b64      	ldr	r3, [pc, #400]	@ (80145c8 <tcp_receive+0xb04>)
 8014436:	881b      	ldrh	r3, [r3, #0]
 8014438:	461a      	mov	r2, r3
 801443a:	4b64      	ldr	r3, [pc, #400]	@ (80145cc <tcp_receive+0xb08>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	441a      	add	r2, r3
 8014440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	429a      	cmp	r2, r3
 8014448:	d006      	beq.n	8014458 <tcp_receive+0x994>
 801444a:	4b62      	ldr	r3, [pc, #392]	@ (80145d4 <tcp_receive+0xb10>)
 801444c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014450:	4961      	ldr	r1, [pc, #388]	@ (80145d8 <tcp_receive+0xb14>)
 8014452:	4862      	ldr	r0, [pc, #392]	@ (80145dc <tcp_receive+0xb18>)
 8014454:	f006 f81a 	bl	801a48c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801445c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801445e:	4b5a      	ldr	r3, [pc, #360]	@ (80145c8 <tcp_receive+0xb04>)
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	461a      	mov	r2, r3
 8014464:	4b59      	ldr	r3, [pc, #356]	@ (80145cc <tcp_receive+0xb08>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	441a      	add	r2, r3
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014472:	4b55      	ldr	r3, [pc, #340]	@ (80145c8 <tcp_receive+0xb04>)
 8014474:	881b      	ldrh	r3, [r3, #0]
 8014476:	429a      	cmp	r2, r3
 8014478:	d206      	bcs.n	8014488 <tcp_receive+0x9c4>
 801447a:	4b56      	ldr	r3, [pc, #344]	@ (80145d4 <tcp_receive+0xb10>)
 801447c:	f240 6207 	movw	r2, #1543	@ 0x607
 8014480:	4957      	ldr	r1, [pc, #348]	@ (80145e0 <tcp_receive+0xb1c>)
 8014482:	4856      	ldr	r0, [pc, #344]	@ (80145dc <tcp_receive+0xb18>)
 8014484:	f006 f802 	bl	801a48c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801448c:	4b4e      	ldr	r3, [pc, #312]	@ (80145c8 <tcp_receive+0xb04>)
 801448e:	881b      	ldrh	r3, [r3, #0]
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	b29a      	uxth	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7fc fedb 	bl	8011254 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801449e:	4b4c      	ldr	r3, [pc, #304]	@ (80145d0 <tcp_receive+0xb0c>)
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	891b      	ldrh	r3, [r3, #8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d006      	beq.n	80144b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80144a8:	4b49      	ldr	r3, [pc, #292]	@ (80145d0 <tcp_receive+0xb0c>)
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	4a4d      	ldr	r2, [pc, #308]	@ (80145e4 <tcp_receive+0xb20>)
 80144ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80144b0:	4b47      	ldr	r3, [pc, #284]	@ (80145d0 <tcp_receive+0xb0c>)
 80144b2:	2200      	movs	r2, #0
 80144b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144b6:	4b46      	ldr	r3, [pc, #280]	@ (80145d0 <tcp_receive+0xb0c>)
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	899b      	ldrh	r3, [r3, #12]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fa fbf4 	bl	800ecac <lwip_htons>
 80144c4:	4603      	mov	r3, r0
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f000 80b8 	beq.w	8014642 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80144d2:	4b45      	ldr	r3, [pc, #276]	@ (80145e8 <tcp_receive+0xb24>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	f043 0320 	orr.w	r3, r3, #32
 80144da:	b2da      	uxtb	r2, r3
 80144dc:	4b42      	ldr	r3, [pc, #264]	@ (80145e8 <tcp_receive+0xb24>)
 80144de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80144e0:	e0af      	b.n	8014642 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144ec:	68db      	ldr	r3, [r3, #12]
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	4a36      	ldr	r2, [pc, #216]	@ (80145cc <tcp_receive+0xb08>)
 80144f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	891b      	ldrh	r3, [r3, #8]
 80144f8:	461c      	mov	r4, r3
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	899b      	ldrh	r3, [r3, #12]
 8014500:	b29b      	uxth	r3, r3
 8014502:	4618      	mov	r0, r3
 8014504:	f7fa fbd2 	bl	800ecac <lwip_htons>
 8014508:	4603      	mov	r3, r0
 801450a:	b2db      	uxtb	r3, r3
 801450c:	f003 0303 	and.w	r3, r3, #3
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <tcp_receive+0xa54>
 8014514:	2301      	movs	r3, #1
 8014516:	e000      	b.n	801451a <tcp_receive+0xa56>
 8014518:	2300      	movs	r3, #0
 801451a:	191a      	adds	r2, r3, r4
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014520:	441a      	add	r2, r3
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801452a:	461c      	mov	r4, r3
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	891b      	ldrh	r3, [r3, #8]
 8014530:	461d      	mov	r5, r3
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	899b      	ldrh	r3, [r3, #12]
 8014538:	b29b      	uxth	r3, r3
 801453a:	4618      	mov	r0, r3
 801453c:	f7fa fbb6 	bl	800ecac <lwip_htons>
 8014540:	4603      	mov	r3, r0
 8014542:	b2db      	uxtb	r3, r3
 8014544:	f003 0303 	and.w	r3, r3, #3
 8014548:	2b00      	cmp	r3, #0
 801454a:	d001      	beq.n	8014550 <tcp_receive+0xa8c>
 801454c:	2301      	movs	r3, #1
 801454e:	e000      	b.n	8014552 <tcp_receive+0xa8e>
 8014550:	2300      	movs	r3, #0
 8014552:	442b      	add	r3, r5
 8014554:	429c      	cmp	r4, r3
 8014556:	d206      	bcs.n	8014566 <tcp_receive+0xaa2>
 8014558:	4b1e      	ldr	r3, [pc, #120]	@ (80145d4 <tcp_receive+0xb10>)
 801455a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801455e:	4923      	ldr	r1, [pc, #140]	@ (80145ec <tcp_receive+0xb28>)
 8014560:	481e      	ldr	r0, [pc, #120]	@ (80145dc <tcp_receive+0xb18>)
 8014562:	f005 ff93 	bl	801a48c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	891b      	ldrh	r3, [r3, #8]
 801456a:	461c      	mov	r4, r3
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	899b      	ldrh	r3, [r3, #12]
 8014572:	b29b      	uxth	r3, r3
 8014574:	4618      	mov	r0, r3
 8014576:	f7fa fb99 	bl	800ecac <lwip_htons>
 801457a:	4603      	mov	r3, r0
 801457c:	b2db      	uxtb	r3, r3
 801457e:	f003 0303 	and.w	r3, r3, #3
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <tcp_receive+0xac6>
 8014586:	2301      	movs	r3, #1
 8014588:	e000      	b.n	801458c <tcp_receive+0xac8>
 801458a:	2300      	movs	r3, #0
 801458c:	1919      	adds	r1, r3, r4
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014592:	b28b      	uxth	r3, r1
 8014594:	1ad3      	subs	r3, r2, r3
 8014596:	b29a      	uxth	r2, r3
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7fc fe59 	bl	8011254 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	891b      	ldrh	r3, [r3, #8]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d028      	beq.n	80145fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80145ac:	4b0d      	ldr	r3, [pc, #52]	@ (80145e4 <tcp_receive+0xb20>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d01d      	beq.n	80145f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80145b4:	4b0b      	ldr	r3, [pc, #44]	@ (80145e4 <tcp_receive+0xb20>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	4619      	mov	r1, r3
 80145be:	4610      	mov	r0, r2
 80145c0:	f7fc f802 	bl	80105c8 <pbuf_cat>
 80145c4:	e018      	b.n	80145f8 <tcp_receive+0xb34>
 80145c6:	bf00      	nop
 80145c8:	2000c7b2 	.word	0x2000c7b2
 80145cc:	2000c7a8 	.word	0x2000c7a8
 80145d0:	2000c788 	.word	0x2000c788
 80145d4:	0801dc0c 	.word	0x0801dc0c
 80145d8:	0801dfec 	.word	0x0801dfec
 80145dc:	0801dc58 	.word	0x0801dc58
 80145e0:	0801e028 	.word	0x0801e028
 80145e4:	2000c7b8 	.word	0x2000c7b8
 80145e8:	2000c7b5 	.word	0x2000c7b5
 80145ec:	0801e048 	.word	0x0801e048
            } else {
              recv_data = cseg->p;
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	4a70      	ldr	r2, [pc, #448]	@ (80147b8 <tcp_receive+0xcf4>)
 80145f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	2200      	movs	r2, #0
 80145fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	899b      	ldrh	r3, [r3, #12]
 8014604:	b29b      	uxth	r3, r3
 8014606:	4618      	mov	r0, r3
 8014608:	f7fa fb50 	bl	800ecac <lwip_htons>
 801460c:	4603      	mov	r3, r0
 801460e:	b2db      	uxtb	r3, r3
 8014610:	f003 0301 	and.w	r3, r3, #1
 8014614:	2b00      	cmp	r3, #0
 8014616:	d00d      	beq.n	8014634 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014618:	4b68      	ldr	r3, [pc, #416]	@ (80147bc <tcp_receive+0xcf8>)
 801461a:	781b      	ldrb	r3, [r3, #0]
 801461c:	f043 0320 	orr.w	r3, r3, #32
 8014620:	b2da      	uxtb	r2, r3
 8014622:	4b66      	ldr	r3, [pc, #408]	@ (80147bc <tcp_receive+0xcf8>)
 8014624:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	7d1b      	ldrb	r3, [r3, #20]
 801462a:	2b04      	cmp	r3, #4
 801462c:	d102      	bne.n	8014634 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2207      	movs	r2, #7
 8014632:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801463c:	68b8      	ldr	r0, [r7, #8]
 801463e:	f7fd fb30 	bl	8011ca2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014646:	2b00      	cmp	r3, #0
 8014648:	d008      	beq.n	801465c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	685a      	ldr	r2, [r3, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014656:	429a      	cmp	r2, r3
 8014658:	f43f af43 	beq.w	80144e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	8b5b      	ldrh	r3, [r3, #26]
 8014660:	f003 0301 	and.w	r3, r3, #1
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00e      	beq.n	8014686 <tcp_receive+0xbc2>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	8b5b      	ldrh	r3, [r3, #26]
 801466c:	f023 0301 	bic.w	r3, r3, #1
 8014670:	b29a      	uxth	r2, r3
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	835a      	strh	r2, [r3, #26]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	8b5b      	ldrh	r3, [r3, #26]
 801467a:	f043 0302 	orr.w	r3, r3, #2
 801467e:	b29a      	uxth	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014684:	e187      	b.n	8014996 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	8b5b      	ldrh	r3, [r3, #26]
 801468a:	f043 0301 	orr.w	r3, r3, #1
 801468e:	b29a      	uxth	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014694:	e17f      	b.n	8014996 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801469a:	2b00      	cmp	r3, #0
 801469c:	d106      	bne.n	80146ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801469e:	4848      	ldr	r0, [pc, #288]	@ (80147c0 <tcp_receive+0xcfc>)
 80146a0:	f7fd fb36 	bl	8011d10 <tcp_seg_copy>
 80146a4:	4602      	mov	r2, r0
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80146aa:	e16c      	b.n	8014986 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80146ac:	2300      	movs	r3, #0
 80146ae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80146b6:	e156      	b.n	8014966 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80146b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	4b41      	ldr	r3, [pc, #260]	@ (80147c4 <tcp_receive+0xd00>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d11d      	bne.n	8014702 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80146c6:	4b3e      	ldr	r3, [pc, #248]	@ (80147c0 <tcp_receive+0xcfc>)
 80146c8:	891a      	ldrh	r2, [r3, #8]
 80146ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146cc:	891b      	ldrh	r3, [r3, #8]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	f240 814e 	bls.w	8014970 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80146d4:	483a      	ldr	r0, [pc, #232]	@ (80147c0 <tcp_receive+0xcfc>)
 80146d6:	f7fd fb1b 	bl	8011d10 <tcp_seg_copy>
 80146da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	f000 8148 	beq.w	8014974 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80146e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d003      	beq.n	80146f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80146ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146ec:	697a      	ldr	r2, [r7, #20]
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	e002      	b.n	80146f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	697a      	ldr	r2, [r7, #20]
 80146f6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80146f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80146fa:	6978      	ldr	r0, [r7, #20]
 80146fc:	f7ff f8de 	bl	80138bc <tcp_oos_insert_segment>
                }
                break;
 8014700:	e138      	b.n	8014974 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014704:	2b00      	cmp	r3, #0
 8014706:	d117      	bne.n	8014738 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014708:	4b2e      	ldr	r3, [pc, #184]	@ (80147c4 <tcp_receive+0xd00>)
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	2b00      	cmp	r3, #0
 8014716:	da57      	bge.n	80147c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014718:	4829      	ldr	r0, [pc, #164]	@ (80147c0 <tcp_receive+0xcfc>)
 801471a:	f7fd faf9 	bl	8011d10 <tcp_seg_copy>
 801471e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	2b00      	cmp	r3, #0
 8014724:	f000 8128 	beq.w	8014978 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	69ba      	ldr	r2, [r7, #24]
 801472c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801472e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014730:	69b8      	ldr	r0, [r7, #24]
 8014732:	f7ff f8c3 	bl	80138bc <tcp_oos_insert_segment>
                  }
                  break;
 8014736:	e11f      	b.n	8014978 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014738:	4b22      	ldr	r3, [pc, #136]	@ (80147c4 <tcp_receive+0xd00>)
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	3b01      	subs	r3, #1
 8014746:	2b00      	cmp	r3, #0
 8014748:	db3e      	blt.n	80147c8 <tcp_receive+0xd04>
 801474a:	4b1e      	ldr	r3, [pc, #120]	@ (80147c4 <tcp_receive+0xd00>)
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014750:	68db      	ldr	r3, [r3, #12]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	3301      	adds	r3, #1
 8014758:	2b00      	cmp	r3, #0
 801475a:	dc35      	bgt.n	80147c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801475c:	4818      	ldr	r0, [pc, #96]	@ (80147c0 <tcp_receive+0xcfc>)
 801475e:	f7fd fad7 	bl	8011d10 <tcp_seg_copy>
 8014762:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	2b00      	cmp	r3, #0
 8014768:	f000 8108 	beq.w	801497c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801476c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014774:	8912      	ldrh	r2, [r2, #8]
 8014776:	441a      	add	r2, r3
 8014778:	4b12      	ldr	r3, [pc, #72]	@ (80147c4 <tcp_receive+0xd00>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	1ad3      	subs	r3, r2, r3
 801477e:	2b00      	cmp	r3, #0
 8014780:	dd12      	ble.n	80147a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014782:	4b10      	ldr	r3, [pc, #64]	@ (80147c4 <tcp_receive+0xd00>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	b29a      	uxth	r2, r3
 8014788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	b29b      	uxth	r3, r3
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	b29a      	uxth	r2, r3
 8014794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014796:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801479a:	685a      	ldr	r2, [r3, #4]
 801479c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801479e:	891b      	ldrh	r3, [r3, #8]
 80147a0:	4619      	mov	r1, r3
 80147a2:	4610      	mov	r0, r2
 80147a4:	f7fb fcbc 	bl	8010120 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80147a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147aa:	69fa      	ldr	r2, [r7, #28]
 80147ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80147ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80147b0:	69f8      	ldr	r0, [r7, #28]
 80147b2:	f7ff f883 	bl	80138bc <tcp_oos_insert_segment>
                  }
                  break;
 80147b6:	e0e1      	b.n	801497c <tcp_receive+0xeb8>
 80147b8:	2000c7b8 	.word	0x2000c7b8
 80147bc:	2000c7b5 	.word	0x2000c7b5
 80147c0:	2000c788 	.word	0x2000c788
 80147c4:	2000c7a8 	.word	0x2000c7a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80147c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80147cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f040 80c5 	bne.w	8014960 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80147d6:	4b7f      	ldr	r3, [pc, #508]	@ (80149d4 <tcp_receive+0xf10>)
 80147d8:	681a      	ldr	r2, [r3, #0]
 80147da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f340 80bc 	ble.w	8014960 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80147e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	899b      	ldrh	r3, [r3, #12]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7fa fa5b 	bl	800ecac <lwip_htons>
 80147f6:	4603      	mov	r3, r0
 80147f8:	b2db      	uxtb	r3, r3
 80147fa:	f003 0301 	and.w	r3, r3, #1
 80147fe:	2b00      	cmp	r3, #0
 8014800:	f040 80be 	bne.w	8014980 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014804:	4874      	ldr	r0, [pc, #464]	@ (80149d8 <tcp_receive+0xf14>)
 8014806:	f7fd fa83 	bl	8011d10 <tcp_seg_copy>
 801480a:	4602      	mov	r2, r0
 801480c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801480e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	f000 80b5 	beq.w	8014984 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014822:	8912      	ldrh	r2, [r2, #8]
 8014824:	441a      	add	r2, r3
 8014826:	4b6b      	ldr	r3, [pc, #428]	@ (80149d4 <tcp_receive+0xf10>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	2b00      	cmp	r3, #0
 801482e:	dd12      	ble.n	8014856 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014830:	4b68      	ldr	r3, [pc, #416]	@ (80149d4 <tcp_receive+0xf10>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	b29a      	uxth	r2, r3
 8014836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014838:	68db      	ldr	r3, [r3, #12]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	b29b      	uxth	r3, r3
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	b29a      	uxth	r2, r3
 8014842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014844:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801484c:	891b      	ldrh	r3, [r3, #8]
 801484e:	4619      	mov	r1, r3
 8014850:	4610      	mov	r0, r2
 8014852:	f7fb fc65 	bl	8010120 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014856:	4b61      	ldr	r3, [pc, #388]	@ (80149dc <tcp_receive+0xf18>)
 8014858:	881b      	ldrh	r3, [r3, #0]
 801485a:	461a      	mov	r2, r3
 801485c:	4b5d      	ldr	r3, [pc, #372]	@ (80149d4 <tcp_receive+0xf10>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	441a      	add	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801486a:	440b      	add	r3, r1
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	2b00      	cmp	r3, #0
 8014870:	f340 8088 	ble.w	8014984 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68db      	ldr	r3, [r3, #12]
 801487a:	899b      	ldrh	r3, [r3, #12]
 801487c:	b29b      	uxth	r3, r3
 801487e:	4618      	mov	r0, r3
 8014880:	f7fa fa14 	bl	800ecac <lwip_htons>
 8014884:	4603      	mov	r3, r0
 8014886:	b2db      	uxtb	r3, r3
 8014888:	f003 0301 	and.w	r3, r3, #1
 801488c:	2b00      	cmp	r3, #0
 801488e:	d021      	beq.n	80148d4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	899b      	ldrh	r3, [r3, #12]
 8014898:	b29b      	uxth	r3, r3
 801489a:	b21b      	sxth	r3, r3
 801489c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80148a0:	b21c      	sxth	r4, r3
 80148a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	68db      	ldr	r3, [r3, #12]
 80148a8:	899b      	ldrh	r3, [r3, #12]
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7fa f9fd 	bl	800ecac <lwip_htons>
 80148b2:	4603      	mov	r3, r0
 80148b4:	b2db      	uxtb	r3, r3
 80148b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fa f9f5 	bl	800ecac <lwip_htons>
 80148c2:	4603      	mov	r3, r0
 80148c4:	b21b      	sxth	r3, r3
 80148c6:	4323      	orrs	r3, r4
 80148c8:	b21a      	sxth	r2, r3
 80148ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	b292      	uxth	r2, r2
 80148d2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148d8:	b29a      	uxth	r2, r3
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148de:	4413      	add	r3, r2
 80148e0:	b299      	uxth	r1, r3
 80148e2:	4b3c      	ldr	r3, [pc, #240]	@ (80149d4 <tcp_receive+0xf10>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	1a8a      	subs	r2, r1, r2
 80148ee:	b292      	uxth	r2, r2
 80148f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80148f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	685a      	ldr	r2, [r3, #4]
 80148f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	891b      	ldrh	r3, [r3, #8]
 80148fe:	4619      	mov	r1, r3
 8014900:	4610      	mov	r0, r2
 8014902:	f7fb fc0d 	bl	8010120 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	891c      	ldrh	r4, [r3, #8]
 801490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	899b      	ldrh	r3, [r3, #12]
 8014914:	b29b      	uxth	r3, r3
 8014916:	4618      	mov	r0, r3
 8014918:	f7fa f9c8 	bl	800ecac <lwip_htons>
 801491c:	4603      	mov	r3, r0
 801491e:	b2db      	uxtb	r3, r3
 8014920:	f003 0303 	and.w	r3, r3, #3
 8014924:	2b00      	cmp	r3, #0
 8014926:	d001      	beq.n	801492c <tcp_receive+0xe68>
 8014928:	2301      	movs	r3, #1
 801492a:	e000      	b.n	801492e <tcp_receive+0xe6a>
 801492c:	2300      	movs	r3, #0
 801492e:	4423      	add	r3, r4
 8014930:	b29a      	uxth	r2, r3
 8014932:	4b2a      	ldr	r3, [pc, #168]	@ (80149dc <tcp_receive+0xf18>)
 8014934:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014936:	4b29      	ldr	r3, [pc, #164]	@ (80149dc <tcp_receive+0xf18>)
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	4b25      	ldr	r3, [pc, #148]	@ (80149d4 <tcp_receive+0xf10>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	441a      	add	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014946:	6879      	ldr	r1, [r7, #4]
 8014948:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801494a:	440b      	add	r3, r1
 801494c:	429a      	cmp	r2, r3
 801494e:	d019      	beq.n	8014984 <tcp_receive+0xec0>
 8014950:	4b23      	ldr	r3, [pc, #140]	@ (80149e0 <tcp_receive+0xf1c>)
 8014952:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014956:	4923      	ldr	r1, [pc, #140]	@ (80149e4 <tcp_receive+0xf20>)
 8014958:	4823      	ldr	r0, [pc, #140]	@ (80149e8 <tcp_receive+0xf24>)
 801495a:	f005 fd97 	bl	801a48c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801495e:	e011      	b.n	8014984 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014968:	2b00      	cmp	r3, #0
 801496a:	f47f aea5 	bne.w	80146b8 <tcp_receive+0xbf4>
 801496e:	e00a      	b.n	8014986 <tcp_receive+0xec2>
                break;
 8014970:	bf00      	nop
 8014972:	e008      	b.n	8014986 <tcp_receive+0xec2>
                break;
 8014974:	bf00      	nop
 8014976:	e006      	b.n	8014986 <tcp_receive+0xec2>
                  break;
 8014978:	bf00      	nop
 801497a:	e004      	b.n	8014986 <tcp_receive+0xec2>
                  break;
 801497c:	bf00      	nop
 801497e:	e002      	b.n	8014986 <tcp_receive+0xec2>
                  break;
 8014980:	bf00      	nop
 8014982:	e000      	b.n	8014986 <tcp_receive+0xec2>
                break;
 8014984:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f001 fe88 	bl	801669c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801498c:	e003      	b.n	8014996 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f001 fe84 	bl	801669c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014994:	e01a      	b.n	80149cc <tcp_receive+0xf08>
 8014996:	e019      	b.n	80149cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014998:	4b0e      	ldr	r3, [pc, #56]	@ (80149d4 <tcp_receive+0xf10>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149a0:	1ad3      	subs	r3, r2, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	db0a      	blt.n	80149bc <tcp_receive+0xef8>
 80149a6:	4b0b      	ldr	r3, [pc, #44]	@ (80149d4 <tcp_receive+0xf10>)
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80149b2:	440b      	add	r3, r1
 80149b4:	1ad3      	subs	r3, r2, r3
 80149b6:	3301      	adds	r3, #1
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	dd07      	ble.n	80149cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	8b5b      	ldrh	r3, [r3, #26]
 80149c0:	f043 0302 	orr.w	r3, r3, #2
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80149ca:	e7ff      	b.n	80149cc <tcp_receive+0xf08>
 80149cc:	bf00      	nop
 80149ce:	3750      	adds	r7, #80	@ 0x50
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bdb0      	pop	{r4, r5, r7, pc}
 80149d4:	2000c7a8 	.word	0x2000c7a8
 80149d8:	2000c788 	.word	0x2000c788
 80149dc:	2000c7b2 	.word	0x2000c7b2
 80149e0:	0801dc0c 	.word	0x0801dc0c
 80149e4:	0801dfb4 	.word	0x0801dfb4
 80149e8:	0801dc58 	.word	0x0801dc58

080149ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80149f2:	4b15      	ldr	r3, [pc, #84]	@ (8014a48 <tcp_get_next_optbyte+0x5c>)
 80149f4:	881b      	ldrh	r3, [r3, #0]
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	b291      	uxth	r1, r2
 80149fa:	4a13      	ldr	r2, [pc, #76]	@ (8014a48 <tcp_get_next_optbyte+0x5c>)
 80149fc:	8011      	strh	r1, [r2, #0]
 80149fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014a00:	4b12      	ldr	r3, [pc, #72]	@ (8014a4c <tcp_get_next_optbyte+0x60>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d004      	beq.n	8014a12 <tcp_get_next_optbyte+0x26>
 8014a08:	4b11      	ldr	r3, [pc, #68]	@ (8014a50 <tcp_get_next_optbyte+0x64>)
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	88fa      	ldrh	r2, [r7, #6]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d208      	bcs.n	8014a24 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014a12:	4b10      	ldr	r3, [pc, #64]	@ (8014a54 <tcp_get_next_optbyte+0x68>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	3314      	adds	r3, #20
 8014a18:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014a1a:	88fb      	ldrh	r3, [r7, #6]
 8014a1c:	683a      	ldr	r2, [r7, #0]
 8014a1e:	4413      	add	r3, r2
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	e00b      	b.n	8014a3c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014a24:	88fb      	ldrh	r3, [r7, #6]
 8014a26:	b2da      	uxtb	r2, r3
 8014a28:	4b09      	ldr	r3, [pc, #36]	@ (8014a50 <tcp_get_next_optbyte+0x64>)
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	1ad3      	subs	r3, r2, r3
 8014a30:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014a32:	4b06      	ldr	r3, [pc, #24]	@ (8014a4c <tcp_get_next_optbyte+0x60>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	797b      	ldrb	r3, [r7, #5]
 8014a38:	4413      	add	r3, r2
 8014a3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr
 8014a48:	2000c7a4 	.word	0x2000c7a4
 8014a4c:	2000c7a0 	.word	0x2000c7a0
 8014a50:	2000c79e 	.word	0x2000c79e
 8014a54:	2000c798 	.word	0x2000c798

08014a58 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b084      	sub	sp, #16
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d106      	bne.n	8014a74 <tcp_parseopt+0x1c>
 8014a66:	4b32      	ldr	r3, [pc, #200]	@ (8014b30 <tcp_parseopt+0xd8>)
 8014a68:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014a6c:	4931      	ldr	r1, [pc, #196]	@ (8014b34 <tcp_parseopt+0xdc>)
 8014a6e:	4832      	ldr	r0, [pc, #200]	@ (8014b38 <tcp_parseopt+0xe0>)
 8014a70:	f005 fd0c 	bl	801a48c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014a74:	4b31      	ldr	r3, [pc, #196]	@ (8014b3c <tcp_parseopt+0xe4>)
 8014a76:	881b      	ldrh	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d056      	beq.n	8014b2a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014a7c:	4b30      	ldr	r3, [pc, #192]	@ (8014b40 <tcp_parseopt+0xe8>)
 8014a7e:	2200      	movs	r2, #0
 8014a80:	801a      	strh	r2, [r3, #0]
 8014a82:	e046      	b.n	8014b12 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014a84:	f7ff ffb2 	bl	80149ec <tcp_get_next_optbyte>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014a8c:	7bfb      	ldrb	r3, [r7, #15]
 8014a8e:	2b02      	cmp	r3, #2
 8014a90:	d006      	beq.n	8014aa0 <tcp_parseopt+0x48>
 8014a92:	2b02      	cmp	r3, #2
 8014a94:	dc2a      	bgt.n	8014aec <tcp_parseopt+0x94>
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d042      	beq.n	8014b20 <tcp_parseopt+0xc8>
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	d038      	beq.n	8014b10 <tcp_parseopt+0xb8>
 8014a9e:	e025      	b.n	8014aec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014aa0:	f7ff ffa4 	bl	80149ec <tcp_get_next_optbyte>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b04      	cmp	r3, #4
 8014aa8:	d13c      	bne.n	8014b24 <tcp_parseopt+0xcc>
 8014aaa:	4b25      	ldr	r3, [pc, #148]	@ (8014b40 <tcp_parseopt+0xe8>)
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	4a22      	ldr	r2, [pc, #136]	@ (8014b3c <tcp_parseopt+0xe4>)
 8014ab2:	8812      	ldrh	r2, [r2, #0]
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	da35      	bge.n	8014b24 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014ab8:	f7ff ff98 	bl	80149ec <tcp_get_next_optbyte>
 8014abc:	4603      	mov	r3, r0
 8014abe:	021b      	lsls	r3, r3, #8
 8014ac0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014ac2:	f7ff ff93 	bl	80149ec <tcp_get_next_optbyte>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	461a      	mov	r2, r3
 8014aca:	89bb      	ldrh	r3, [r7, #12]
 8014acc:	4313      	orrs	r3, r2
 8014ace:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014ad0:	89bb      	ldrh	r3, [r7, #12]
 8014ad2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014ad6:	d804      	bhi.n	8014ae2 <tcp_parseopt+0x8a>
 8014ad8:	89bb      	ldrh	r3, [r7, #12]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d001      	beq.n	8014ae2 <tcp_parseopt+0x8a>
 8014ade:	89ba      	ldrh	r2, [r7, #12]
 8014ae0:	e001      	b.n	8014ae6 <tcp_parseopt+0x8e>
 8014ae2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014aea:	e012      	b.n	8014b12 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014aec:	f7ff ff7e 	bl	80149ec <tcp_get_next_optbyte>
 8014af0:	4603      	mov	r3, r0
 8014af2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014af4:	7afb      	ldrb	r3, [r7, #11]
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d916      	bls.n	8014b28 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014afa:	7afb      	ldrb	r3, [r7, #11]
 8014afc:	b29a      	uxth	r2, r3
 8014afe:	4b10      	ldr	r3, [pc, #64]	@ (8014b40 <tcp_parseopt+0xe8>)
 8014b00:	881b      	ldrh	r3, [r3, #0]
 8014b02:	4413      	add	r3, r2
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	3b02      	subs	r3, #2
 8014b08:	b29a      	uxth	r2, r3
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b40 <tcp_parseopt+0xe8>)
 8014b0c:	801a      	strh	r2, [r3, #0]
 8014b0e:	e000      	b.n	8014b12 <tcp_parseopt+0xba>
          break;
 8014b10:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014b12:	4b0b      	ldr	r3, [pc, #44]	@ (8014b40 <tcp_parseopt+0xe8>)
 8014b14:	881a      	ldrh	r2, [r3, #0]
 8014b16:	4b09      	ldr	r3, [pc, #36]	@ (8014b3c <tcp_parseopt+0xe4>)
 8014b18:	881b      	ldrh	r3, [r3, #0]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d3b2      	bcc.n	8014a84 <tcp_parseopt+0x2c>
 8014b1e:	e004      	b.n	8014b2a <tcp_parseopt+0xd2>
          return;
 8014b20:	bf00      	nop
 8014b22:	e002      	b.n	8014b2a <tcp_parseopt+0xd2>
            return;
 8014b24:	bf00      	nop
 8014b26:	e000      	b.n	8014b2a <tcp_parseopt+0xd2>
            return;
 8014b28:	bf00      	nop
      }
    }
  }
}
 8014b2a:	3710      	adds	r7, #16
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	0801dc0c 	.word	0x0801dc0c
 8014b34:	0801e070 	.word	0x0801e070
 8014b38:	0801dc58 	.word	0x0801dc58
 8014b3c:	2000c79c 	.word	0x2000c79c
 8014b40:	2000c7a4 	.word	0x2000c7a4

08014b44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014b44:	b480      	push	{r7}
 8014b46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014b48:	4b05      	ldr	r3, [pc, #20]	@ (8014b60 <tcp_trigger_input_pcb_close+0x1c>)
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	f043 0310 	orr.w	r3, r3, #16
 8014b50:	b2da      	uxtb	r2, r3
 8014b52:	4b03      	ldr	r3, [pc, #12]	@ (8014b60 <tcp_trigger_input_pcb_close+0x1c>)
 8014b54:	701a      	strb	r2, [r3, #0]
}
 8014b56:	bf00      	nop
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr
 8014b60:	2000c7b5 	.word	0x2000c7b5

08014b64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d00a      	beq.n	8014b8c <tcp_route+0x28>
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	7a1b      	ldrb	r3, [r3, #8]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d006      	beq.n	8014b8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	7a1b      	ldrb	r3, [r3, #8]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fb f8c4 	bl	800fd10 <netif_get_by_index>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	e003      	b.n	8014b94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f003 fad1 	bl	8018134 <ip4_route>
 8014b92:	4603      	mov	r3, r0
  }
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014b9c:	b590      	push	{r4, r7, lr}
 8014b9e:	b087      	sub	sp, #28
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	603b      	str	r3, [r7, #0]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d105      	bne.n	8014bbe <tcp_create_segment+0x22>
 8014bb2:	4b43      	ldr	r3, [pc, #268]	@ (8014cc0 <tcp_create_segment+0x124>)
 8014bb4:	22a3      	movs	r2, #163	@ 0xa3
 8014bb6:	4943      	ldr	r1, [pc, #268]	@ (8014cc4 <tcp_create_segment+0x128>)
 8014bb8:	4843      	ldr	r0, [pc, #268]	@ (8014cc8 <tcp_create_segment+0x12c>)
 8014bba:	f005 fc67 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d105      	bne.n	8014bd0 <tcp_create_segment+0x34>
 8014bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8014cc0 <tcp_create_segment+0x124>)
 8014bc6:	22a4      	movs	r2, #164	@ 0xa4
 8014bc8:	4940      	ldr	r1, [pc, #256]	@ (8014ccc <tcp_create_segment+0x130>)
 8014bca:	483f      	ldr	r0, [pc, #252]	@ (8014cc8 <tcp_create_segment+0x12c>)
 8014bcc:	f005 fc5e 	bl	801a48c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014bd4:	009b      	lsls	r3, r3, #2
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	f003 0304 	and.w	r3, r3, #4
 8014bdc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014bde:	2003      	movs	r0, #3
 8014be0:	f7fa fd3c 	bl	800f65c <memp_malloc>
 8014be4:	6138      	str	r0, [r7, #16]
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d104      	bne.n	8014bf6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014bec:	68b8      	ldr	r0, [r7, #8]
 8014bee:	f7fb fc1d 	bl	801042c <pbuf_free>
    return NULL;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	e060      	b.n	8014cb8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014bf6:	693b      	ldr	r3, [r7, #16]
 8014bf8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014bfc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	2200      	movs	r2, #0
 8014c02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	68ba      	ldr	r2, [r7, #8]
 8014c08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	891a      	ldrh	r2, [r3, #8]
 8014c0e:	7dfb      	ldrb	r3, [r7, #23]
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d205      	bcs.n	8014c22 <tcp_create_segment+0x86>
 8014c16:	4b2a      	ldr	r3, [pc, #168]	@ (8014cc0 <tcp_create_segment+0x124>)
 8014c18:	22b0      	movs	r2, #176	@ 0xb0
 8014c1a:	492d      	ldr	r1, [pc, #180]	@ (8014cd0 <tcp_create_segment+0x134>)
 8014c1c:	482a      	ldr	r0, [pc, #168]	@ (8014cc8 <tcp_create_segment+0x12c>)
 8014c1e:	f005 fc35 	bl	801a48c <iprintf>
  seg->len = p->tot_len - optlen;
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	891a      	ldrh	r2, [r3, #8]
 8014c26:	7dfb      	ldrb	r3, [r7, #23]
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014c32:	2114      	movs	r1, #20
 8014c34:	68b8      	ldr	r0, [r7, #8]
 8014c36:	f7fb fb63 	bl	8010300 <pbuf_add_header>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d004      	beq.n	8014c4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014c40:	6938      	ldr	r0, [r7, #16]
 8014c42:	f7fd f82e 	bl	8011ca2 <tcp_seg_free>
    return NULL;
 8014c46:	2300      	movs	r3, #0
 8014c48:	e036      	b.n	8014cb8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014c4a:	693b      	ldr	r3, [r7, #16]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	685a      	ldr	r2, [r3, #4]
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	8ada      	ldrh	r2, [r3, #22]
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	68dc      	ldr	r4, [r3, #12]
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	f7fa f825 	bl	800ecac <lwip_htons>
 8014c62:	4603      	mov	r3, r0
 8014c64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	8b1a      	ldrh	r2, [r3, #24]
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	68dc      	ldr	r4, [r3, #12]
 8014c6e:	4610      	mov	r0, r2
 8014c70:	f7fa f81c 	bl	800ecac <lwip_htons>
 8014c74:	4603      	mov	r3, r0
 8014c76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	68dc      	ldr	r4, [r3, #12]
 8014c7c:	6838      	ldr	r0, [r7, #0]
 8014c7e:	f7fa f82b 	bl	800ecd8 <lwip_htonl>
 8014c82:	4603      	mov	r3, r0
 8014c84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014c86:	7dfb      	ldrb	r3, [r7, #23]
 8014c88:	089b      	lsrs	r3, r3, #2
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	3305      	adds	r3, #5
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	031b      	lsls	r3, r3, #12
 8014c92:	b29a      	uxth	r2, r3
 8014c94:	79fb      	ldrb	r3, [r7, #7]
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	4313      	orrs	r3, r2
 8014c9a:	b29a      	uxth	r2, r3
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	68dc      	ldr	r4, [r3, #12]
 8014ca0:	4610      	mov	r0, r2
 8014ca2:	f7fa f803 	bl	800ecac <lwip_htons>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	749a      	strb	r2, [r3, #18]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	74da      	strb	r2, [r3, #19]
  return seg;
 8014cb6:	693b      	ldr	r3, [r7, #16]
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	371c      	adds	r7, #28
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd90      	pop	{r4, r7, pc}
 8014cc0:	0801e08c 	.word	0x0801e08c
 8014cc4:	0801e0c0 	.word	0x0801e0c0
 8014cc8:	0801e0e0 	.word	0x0801e0e0
 8014ccc:	0801e108 	.word	0x0801e108
 8014cd0:	0801e12c 	.word	0x0801e12c

08014cd4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	607b      	str	r3, [r7, #4]
 8014cdc:	4603      	mov	r3, r0
 8014cde:	73fb      	strb	r3, [r7, #15]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	81bb      	strh	r3, [r7, #12]
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014ce8:	89bb      	ldrh	r3, [r7, #12]
 8014cea:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d105      	bne.n	8014cfe <tcp_pbuf_prealloc+0x2a>
 8014cf2:	4b30      	ldr	r3, [pc, #192]	@ (8014db4 <tcp_pbuf_prealloc+0xe0>)
 8014cf4:	22e8      	movs	r2, #232	@ 0xe8
 8014cf6:	4930      	ldr	r1, [pc, #192]	@ (8014db8 <tcp_pbuf_prealloc+0xe4>)
 8014cf8:	4830      	ldr	r0, [pc, #192]	@ (8014dbc <tcp_pbuf_prealloc+0xe8>)
 8014cfa:	f005 fbc7 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014cfe:	6a3b      	ldr	r3, [r7, #32]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d105      	bne.n	8014d10 <tcp_pbuf_prealloc+0x3c>
 8014d04:	4b2b      	ldr	r3, [pc, #172]	@ (8014db4 <tcp_pbuf_prealloc+0xe0>)
 8014d06:	22e9      	movs	r2, #233	@ 0xe9
 8014d08:	492d      	ldr	r1, [pc, #180]	@ (8014dc0 <tcp_pbuf_prealloc+0xec>)
 8014d0a:	482c      	ldr	r0, [pc, #176]	@ (8014dbc <tcp_pbuf_prealloc+0xe8>)
 8014d0c:	f005 fbbe 	bl	801a48c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014d10:	89ba      	ldrh	r2, [r7, #12]
 8014d12:	897b      	ldrh	r3, [r7, #10]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d221      	bcs.n	8014d5c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014d1c:	f003 0302 	and.w	r3, r3, #2
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d111      	bne.n	8014d48 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	8b5b      	ldrh	r3, [r3, #26]
 8014d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d115      	bne.n	8014d5c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014d30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d007      	beq.n	8014d48 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d103      	bne.n	8014d48 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014d40:	6a3b      	ldr	r3, [r7, #32]
 8014d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d009      	beq.n	8014d5c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014d48:	89bb      	ldrh	r3, [r7, #12]
 8014d4a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8014d4e:	f023 0203 	bic.w	r2, r3, #3
 8014d52:	897b      	ldrh	r3, [r7, #10]
 8014d54:	4293      	cmp	r3, r2
 8014d56:	bf28      	it	cs
 8014d58:	4613      	movcs	r3, r2
 8014d5a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014d5c:	8af9      	ldrh	r1, [r7, #22]
 8014d5e:	7bfb      	ldrb	r3, [r7, #15]
 8014d60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7fb f87d 	bl	800fe64 <pbuf_alloc>
 8014d6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d101      	bne.n	8014d76 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014d72:	2300      	movs	r3, #0
 8014d74:	e019      	b.n	8014daa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d006      	beq.n	8014d8c <tcp_pbuf_prealloc+0xb8>
 8014d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8014db4 <tcp_pbuf_prealloc+0xe0>)
 8014d80:	f240 120b 	movw	r2, #267	@ 0x10b
 8014d84:	490f      	ldr	r1, [pc, #60]	@ (8014dc4 <tcp_pbuf_prealloc+0xf0>)
 8014d86:	480d      	ldr	r0, [pc, #52]	@ (8014dbc <tcp_pbuf_prealloc+0xe8>)
 8014d88:	f005 fb80 	bl	801a48c <iprintf>
  *oversize = p->len - length;
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	895a      	ldrh	r2, [r3, #10]
 8014d90:	89bb      	ldrh	r3, [r7, #12]
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	b29a      	uxth	r2, r3
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	89ba      	ldrh	r2, [r7, #12]
 8014d9e:	811a      	strh	r2, [r3, #8]
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	891a      	ldrh	r2, [r3, #8]
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	815a      	strh	r2, [r3, #10]
  return p;
 8014da8:	693b      	ldr	r3, [r7, #16]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3718      	adds	r7, #24
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	0801e08c 	.word	0x0801e08c
 8014db8:	0801e144 	.word	0x0801e144
 8014dbc:	0801e0e0 	.word	0x0801e0e0
 8014dc0:	0801e168 	.word	0x0801e168
 8014dc4:	0801e188 	.word	0x0801e188

08014dc8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d106      	bne.n	8014de8 <tcp_write_checks+0x20>
 8014dda:	4b33      	ldr	r3, [pc, #204]	@ (8014ea8 <tcp_write_checks+0xe0>)
 8014ddc:	f240 1233 	movw	r2, #307	@ 0x133
 8014de0:	4932      	ldr	r1, [pc, #200]	@ (8014eac <tcp_write_checks+0xe4>)
 8014de2:	4833      	ldr	r0, [pc, #204]	@ (8014eb0 <tcp_write_checks+0xe8>)
 8014de4:	f005 fb52 	bl	801a48c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	7d1b      	ldrb	r3, [r3, #20]
 8014dec:	2b04      	cmp	r3, #4
 8014dee:	d00e      	beq.n	8014e0e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014df4:	2b07      	cmp	r3, #7
 8014df6:	d00a      	beq.n	8014e0e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014dfc:	2b02      	cmp	r3, #2
 8014dfe:	d006      	beq.n	8014e0e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014e04:	2b03      	cmp	r3, #3
 8014e06:	d002      	beq.n	8014e0e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014e08:	f06f 030a 	mvn.w	r3, #10
 8014e0c:	e048      	b.n	8014ea0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014e0e:	887b      	ldrh	r3, [r7, #2]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d101      	bne.n	8014e18 <tcp_write_checks+0x50>
    return ERR_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	e043      	b.n	8014ea0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e1e:	887a      	ldrh	r2, [r7, #2]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d909      	bls.n	8014e38 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	8b5b      	ldrh	r3, [r3, #26]
 8014e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014e32:	f04f 33ff 	mov.w	r3, #4294967295
 8014e36:	e033      	b.n	8014ea0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e3e:	2b08      	cmp	r3, #8
 8014e40:	d909      	bls.n	8014e56 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	8b5b      	ldrh	r3, [r3, #26]
 8014e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e4a:	b29a      	uxth	r2, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295
 8014e54:	e024      	b.n	8014ea0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d00f      	beq.n	8014e80 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d11a      	bne.n	8014e9e <tcp_write_checks+0xd6>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d116      	bne.n	8014e9e <tcp_write_checks+0xd6>
 8014e70:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea8 <tcp_write_checks+0xe0>)
 8014e72:	f240 1255 	movw	r2, #341	@ 0x155
 8014e76:	490f      	ldr	r1, [pc, #60]	@ (8014eb4 <tcp_write_checks+0xec>)
 8014e78:	480d      	ldr	r0, [pc, #52]	@ (8014eb0 <tcp_write_checks+0xe8>)
 8014e7a:	f005 fb07 	bl	801a48c <iprintf>
 8014e7e:	e00e      	b.n	8014e9e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d103      	bne.n	8014e90 <tcp_write_checks+0xc8>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d006      	beq.n	8014e9e <tcp_write_checks+0xd6>
 8014e90:	4b05      	ldr	r3, [pc, #20]	@ (8014ea8 <tcp_write_checks+0xe0>)
 8014e92:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8014e96:	4908      	ldr	r1, [pc, #32]	@ (8014eb8 <tcp_write_checks+0xf0>)
 8014e98:	4805      	ldr	r0, [pc, #20]	@ (8014eb0 <tcp_write_checks+0xe8>)
 8014e9a:	f005 faf7 	bl	801a48c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	0801e08c 	.word	0x0801e08c
 8014eac:	0801e19c 	.word	0x0801e19c
 8014eb0:	0801e0e0 	.word	0x0801e0e0
 8014eb4:	0801e1bc 	.word	0x0801e1bc
 8014eb8:	0801e1f8 	.word	0x0801e1f8

08014ebc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014ebc:	b590      	push	{r4, r7, lr}
 8014ebe:	b09b      	sub	sp, #108	@ 0x6c
 8014ec0:	af04      	add	r7, sp, #16
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	4611      	mov	r1, r2
 8014ec8:	461a      	mov	r2, r3
 8014eca:	460b      	mov	r3, r1
 8014ecc:	80fb      	strh	r3, [r7, #6]
 8014ece:	4613      	mov	r3, r2
 8014ed0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8014eda:	2300      	movs	r3, #0
 8014edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014ede:	2300      	movs	r3, #0
 8014ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014eec:	2300      	movs	r3, #0
 8014eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014efa:	2300      	movs	r3, #0
 8014efc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d109      	bne.n	8014f18 <tcp_write+0x5c>
 8014f04:	4ba4      	ldr	r3, [pc, #656]	@ (8015198 <tcp_write+0x2dc>)
 8014f06:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8014f0a:	49a4      	ldr	r1, [pc, #656]	@ (801519c <tcp_write+0x2e0>)
 8014f0c:	48a4      	ldr	r0, [pc, #656]	@ (80151a0 <tcp_write+0x2e4>)
 8014f0e:	f005 fabd 	bl	801a48c <iprintf>
 8014f12:	f06f 030f 	mvn.w	r3, #15
 8014f16:	e32a      	b.n	801556e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014f1e:	085b      	lsrs	r3, r3, #1
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f26:	4293      	cmp	r3, r2
 8014f28:	bf28      	it	cs
 8014f2a:	4613      	movcs	r3, r2
 8014f2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014f2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d102      	bne.n	8014f3a <tcp_write+0x7e>
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f38:	e000      	b.n	8014f3c <tcp_write+0x80>
 8014f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014f3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d109      	bne.n	8014f58 <tcp_write+0x9c>
 8014f44:	4b94      	ldr	r3, [pc, #592]	@ (8015198 <tcp_write+0x2dc>)
 8014f46:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8014f4a:	4996      	ldr	r1, [pc, #600]	@ (80151a4 <tcp_write+0x2e8>)
 8014f4c:	4894      	ldr	r0, [pc, #592]	@ (80151a0 <tcp_write+0x2e4>)
 8014f4e:	f005 fa9d 	bl	801a48c <iprintf>
 8014f52:	f06f 030f 	mvn.w	r3, #15
 8014f56:	e30a      	b.n	801556e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014f58:	88fb      	ldrh	r3, [r7, #6]
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f7ff ff33 	bl	8014dc8 <tcp_write_checks>
 8014f62:	4603      	mov	r3, r0
 8014f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8014f68:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d002      	beq.n	8014f76 <tcp_write+0xba>
    return err;
 8014f70:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014f74:	e2fb      	b.n	801556e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f80:	2300      	movs	r3, #0
 8014f82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 80f6 	beq.w	801517c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8014f96:	e002      	b.n	8014f9e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1f8      	bne.n	8014f98 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fa8:	7a9b      	ldrb	r3, [r3, #10]
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	f003 0304 	and.w	r3, r3, #4
 8014fb2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014fb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fb8:	891b      	ldrh	r3, [r3, #8]
 8014fba:	4619      	mov	r1, r3
 8014fbc:	8c3b      	ldrh	r3, [r7, #32]
 8014fbe:	440b      	add	r3, r1
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	da06      	bge.n	8014fd2 <tcp_write+0x116>
 8014fc4:	4b74      	ldr	r3, [pc, #464]	@ (8015198 <tcp_write+0x2dc>)
 8014fc6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014fca:	4977      	ldr	r1, [pc, #476]	@ (80151a8 <tcp_write+0x2ec>)
 8014fcc:	4874      	ldr	r0, [pc, #464]	@ (80151a0 <tcp_write+0x2e4>)
 8014fce:	f005 fa5d 	bl	801a48c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fd4:	891a      	ldrh	r2, [r3, #8]
 8014fd6:	8c3b      	ldrh	r3, [r7, #32]
 8014fd8:	4413      	add	r3, r2
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014fe8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014fea:	8a7b      	ldrh	r3, [r7, #18]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d026      	beq.n	801503e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014ff0:	8a7b      	ldrh	r3, [r7, #18]
 8014ff2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d206      	bcs.n	8015006 <tcp_write+0x14a>
 8014ff8:	4b67      	ldr	r3, [pc, #412]	@ (8015198 <tcp_write+0x2dc>)
 8014ffa:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8014ffe:	496b      	ldr	r1, [pc, #428]	@ (80151ac <tcp_write+0x2f0>)
 8015000:	4867      	ldr	r0, [pc, #412]	@ (80151a0 <tcp_write+0x2e4>)
 8015002:	f005 fa43 	bl	801a48c <iprintf>
      seg = last_unsent;
 8015006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015008:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801500a:	8a7b      	ldrh	r3, [r7, #18]
 801500c:	88fa      	ldrh	r2, [r7, #6]
 801500e:	4293      	cmp	r3, r2
 8015010:	bf28      	it	cs
 8015012:	4613      	movcs	r3, r2
 8015014:	b29b      	uxth	r3, r3
 8015016:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015018:	4293      	cmp	r3, r2
 801501a:	bf28      	it	cs
 801501c:	4613      	movcs	r3, r2
 801501e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8015020:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015024:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015026:	4413      	add	r3, r2
 8015028:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801502c:	8a7a      	ldrh	r2, [r7, #18]
 801502e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015030:	1ad3      	subs	r3, r2, r3
 8015032:	b29b      	uxth	r3, r3
 8015034:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015036:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015038:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801503a:	1ad3      	subs	r3, r2, r3
 801503c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801503e:	8a7b      	ldrh	r3, [r7, #18]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d00b      	beq.n	801505c <tcp_write+0x1a0>
 8015044:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015048:	88fb      	ldrh	r3, [r7, #6]
 801504a:	429a      	cmp	r2, r3
 801504c:	d006      	beq.n	801505c <tcp_write+0x1a0>
 801504e:	4b52      	ldr	r3, [pc, #328]	@ (8015198 <tcp_write+0x2dc>)
 8015050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015054:	4956      	ldr	r1, [pc, #344]	@ (80151b0 <tcp_write+0x2f4>)
 8015056:	4852      	ldr	r0, [pc, #328]	@ (80151a0 <tcp_write+0x2e4>)
 8015058:	f005 fa18 	bl	801a48c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801505c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015060:	88fb      	ldrh	r3, [r7, #6]
 8015062:	429a      	cmp	r2, r3
 8015064:	f080 8167 	bcs.w	8015336 <tcp_write+0x47a>
 8015068:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801506a:	2b00      	cmp	r3, #0
 801506c:	f000 8163 	beq.w	8015336 <tcp_write+0x47a>
 8015070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015072:	891b      	ldrh	r3, [r3, #8]
 8015074:	2b00      	cmp	r3, #0
 8015076:	f000 815e 	beq.w	8015336 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801507a:	88fa      	ldrh	r2, [r7, #6]
 801507c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015080:	1ad2      	subs	r2, r2, r3
 8015082:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015084:	4293      	cmp	r3, r2
 8015086:	bfa8      	it	ge
 8015088:	4613      	movge	r3, r2
 801508a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801508c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801508e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015090:	797b      	ldrb	r3, [r7, #5]
 8015092:	f003 0301 	and.w	r3, r3, #1
 8015096:	2b00      	cmp	r3, #0
 8015098:	d027      	beq.n	80150ea <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801509a:	f107 0012 	add.w	r0, r7, #18
 801509e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80150a0:	8bf9      	ldrh	r1, [r7, #30]
 80150a2:	2301      	movs	r3, #1
 80150a4:	9302      	str	r3, [sp, #8]
 80150a6:	797b      	ldrb	r3, [r7, #5]
 80150a8:	9301      	str	r3, [sp, #4]
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	4603      	mov	r3, r0
 80150b0:	2000      	movs	r0, #0
 80150b2:	f7ff fe0f 	bl	8014cd4 <tcp_pbuf_prealloc>
 80150b6:	6578      	str	r0, [r7, #84]	@ 0x54
 80150b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	f000 8225 	beq.w	801550a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80150c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150c2:	6858      	ldr	r0, [r3, #4]
 80150c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80150c8:	68ba      	ldr	r2, [r7, #8]
 80150ca:	4413      	add	r3, r2
 80150cc:	8bfa      	ldrh	r2, [r7, #30]
 80150ce:	4619      	mov	r1, r3
 80150d0:	f005 fb7b 	bl	801a7ca <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80150d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80150d6:	f7fb fa37 	bl	8010548 <pbuf_clen>
 80150da:	4603      	mov	r3, r0
 80150dc:	461a      	mov	r2, r3
 80150de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80150e2:	4413      	add	r3, r2
 80150e4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80150e8:	e041      	b.n	801516e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80150ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80150f0:	e002      	b.n	80150f8 <tcp_write+0x23c>
 80150f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80150f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1f8      	bne.n	80150f2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015102:	7b1b      	ldrb	r3, [r3, #12]
 8015104:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d115      	bne.n	8015138 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015112:	8952      	ldrh	r2, [r2, #10]
 8015114:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	429a      	cmp	r2, r3
 801511a:	d10d      	bne.n	8015138 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801511c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015120:	2b00      	cmp	r3, #0
 8015122:	d006      	beq.n	8015132 <tcp_write+0x276>
 8015124:	4b1c      	ldr	r3, [pc, #112]	@ (8015198 <tcp_write+0x2dc>)
 8015126:	f240 2231 	movw	r2, #561	@ 0x231
 801512a:	4922      	ldr	r1, [pc, #136]	@ (80151b4 <tcp_write+0x2f8>)
 801512c:	481c      	ldr	r0, [pc, #112]	@ (80151a0 <tcp_write+0x2e4>)
 801512e:	f005 f9ad 	bl	801a48c <iprintf>
          extendlen = seglen;
 8015132:	8bfb      	ldrh	r3, [r7, #30]
 8015134:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8015136:	e01a      	b.n	801516e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015138:	8bfb      	ldrh	r3, [r7, #30]
 801513a:	2201      	movs	r2, #1
 801513c:	4619      	mov	r1, r3
 801513e:	2000      	movs	r0, #0
 8015140:	f7fa fe90 	bl	800fe64 <pbuf_alloc>
 8015144:	6578      	str	r0, [r7, #84]	@ 0x54
 8015146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015148:	2b00      	cmp	r3, #0
 801514a:	f000 81e0 	beq.w	801550e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801514e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015152:	68ba      	ldr	r2, [r7, #8]
 8015154:	441a      	add	r2, r3
 8015156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015158:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801515a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801515c:	f7fb f9f4 	bl	8010548 <pbuf_clen>
 8015160:	4603      	mov	r3, r0
 8015162:	461a      	mov	r2, r3
 8015164:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015168:	4413      	add	r3, r2
 801516a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801516e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015172:	8bfb      	ldrh	r3, [r7, #30]
 8015174:	4413      	add	r3, r2
 8015176:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801517a:	e0dc      	b.n	8015336 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 80d7 	beq.w	8015336 <tcp_write+0x47a>
 8015188:	4b03      	ldr	r3, [pc, #12]	@ (8015198 <tcp_write+0x2dc>)
 801518a:	f240 224a 	movw	r2, #586	@ 0x24a
 801518e:	490a      	ldr	r1, [pc, #40]	@ (80151b8 <tcp_write+0x2fc>)
 8015190:	4803      	ldr	r0, [pc, #12]	@ (80151a0 <tcp_write+0x2e4>)
 8015192:	f005 f97b 	bl	801a48c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015196:	e0ce      	b.n	8015336 <tcp_write+0x47a>
 8015198:	0801e08c 	.word	0x0801e08c
 801519c:	0801e22c 	.word	0x0801e22c
 80151a0:	0801e0e0 	.word	0x0801e0e0
 80151a4:	0801e244 	.word	0x0801e244
 80151a8:	0801e278 	.word	0x0801e278
 80151ac:	0801e290 	.word	0x0801e290
 80151b0:	0801e2b0 	.word	0x0801e2b0
 80151b4:	0801e2d0 	.word	0x0801e2d0
 80151b8:	0801e2fc 	.word	0x0801e2fc
    struct pbuf *p;
    u16_t left = len - pos;
 80151bc:	88fa      	ldrh	r2, [r7, #6]
 80151be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80151c2:	1ad3      	subs	r3, r2, r3
 80151c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80151c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80151ca:	b29b      	uxth	r3, r3
 80151cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80151ce:	1ad3      	subs	r3, r2, r3
 80151d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80151d2:	8b7a      	ldrh	r2, [r7, #26]
 80151d4:	8bbb      	ldrh	r3, [r7, #28]
 80151d6:	4293      	cmp	r3, r2
 80151d8:	bf28      	it	cs
 80151da:	4613      	movcs	r3, r2
 80151dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80151de:	797b      	ldrb	r3, [r7, #5]
 80151e0:	f003 0301 	and.w	r3, r3, #1
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d036      	beq.n	8015256 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80151e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	8b3b      	ldrh	r3, [r7, #24]
 80151f0:	4413      	add	r3, r2
 80151f2:	b299      	uxth	r1, r3
 80151f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	bf0c      	ite	eq
 80151fa:	2301      	moveq	r3, #1
 80151fc:	2300      	movne	r3, #0
 80151fe:	b2db      	uxtb	r3, r3
 8015200:	f107 0012 	add.w	r0, r7, #18
 8015204:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015206:	9302      	str	r3, [sp, #8]
 8015208:	797b      	ldrb	r3, [r7, #5]
 801520a:	9301      	str	r3, [sp, #4]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	9300      	str	r3, [sp, #0]
 8015210:	4603      	mov	r3, r0
 8015212:	2036      	movs	r0, #54	@ 0x36
 8015214:	f7ff fd5e 	bl	8014cd4 <tcp_pbuf_prealloc>
 8015218:	6338      	str	r0, [r7, #48]	@ 0x30
 801521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801521c:	2b00      	cmp	r3, #0
 801521e:	f000 8178 	beq.w	8015512 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015224:	895b      	ldrh	r3, [r3, #10]
 8015226:	8b3a      	ldrh	r2, [r7, #24]
 8015228:	429a      	cmp	r2, r3
 801522a:	d906      	bls.n	801523a <tcp_write+0x37e>
 801522c:	4b8c      	ldr	r3, [pc, #560]	@ (8015460 <tcp_write+0x5a4>)
 801522e:	f240 2266 	movw	r2, #614	@ 0x266
 8015232:	498c      	ldr	r1, [pc, #560]	@ (8015464 <tcp_write+0x5a8>)
 8015234:	488c      	ldr	r0, [pc, #560]	@ (8015468 <tcp_write+0x5ac>)
 8015236:	f005 f929 	bl	801a48c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801523c:	685a      	ldr	r2, [r3, #4]
 801523e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015242:	18d0      	adds	r0, r2, r3
 8015244:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015248:	68ba      	ldr	r2, [r7, #8]
 801524a:	4413      	add	r3, r2
 801524c:	8b3a      	ldrh	r2, [r7, #24]
 801524e:	4619      	mov	r1, r3
 8015250:	f005 fabb 	bl	801a7ca <memcpy>
 8015254:	e02f      	b.n	80152b6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015256:	8a7b      	ldrh	r3, [r7, #18]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d006      	beq.n	801526a <tcp_write+0x3ae>
 801525c:	4b80      	ldr	r3, [pc, #512]	@ (8015460 <tcp_write+0x5a4>)
 801525e:	f240 2271 	movw	r2, #625	@ 0x271
 8015262:	4982      	ldr	r1, [pc, #520]	@ (801546c <tcp_write+0x5b0>)
 8015264:	4880      	ldr	r0, [pc, #512]	@ (8015468 <tcp_write+0x5ac>)
 8015266:	f005 f911 	bl	801a48c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801526a:	8b3b      	ldrh	r3, [r7, #24]
 801526c:	2201      	movs	r2, #1
 801526e:	4619      	mov	r1, r3
 8015270:	2036      	movs	r0, #54	@ 0x36
 8015272:	f7fa fdf7 	bl	800fe64 <pbuf_alloc>
 8015276:	6178      	str	r0, [r7, #20]
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	2b00      	cmp	r3, #0
 801527c:	f000 814b 	beq.w	8015516 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015284:	68ba      	ldr	r2, [r7, #8]
 8015286:	441a      	add	r2, r3
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801528c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015290:	b29b      	uxth	r3, r3
 8015292:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015296:	4619      	mov	r1, r3
 8015298:	2036      	movs	r0, #54	@ 0x36
 801529a:	f7fa fde3 	bl	800fe64 <pbuf_alloc>
 801529e:	6338      	str	r0, [r7, #48]	@ 0x30
 80152a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d103      	bne.n	80152ae <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80152a6:	6978      	ldr	r0, [r7, #20]
 80152a8:	f7fb f8c0 	bl	801042c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80152ac:	e136      	b.n	801551c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80152ae:	6979      	ldr	r1, [r7, #20]
 80152b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152b2:	f7fb f989 	bl	80105c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80152b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152b8:	f7fb f946 	bl	8010548 <pbuf_clen>
 80152bc:	4603      	mov	r3, r0
 80152be:	461a      	mov	r2, r3
 80152c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80152c4:	4413      	add	r3, r2
 80152c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80152ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80152ce:	2b09      	cmp	r3, #9
 80152d0:	d903      	bls.n	80152da <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80152d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152d4:	f7fb f8aa 	bl	801042c <pbuf_free>
      goto memerr;
 80152d8:	e120      	b.n	801551c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80152de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80152e2:	441a      	add	r2, r3
 80152e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	4613      	mov	r3, r2
 80152ec:	2200      	movs	r2, #0
 80152ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f7ff fc53 	bl	8014b9c <tcp_create_segment>
 80152f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80152f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	f000 810d 	beq.w	801551a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015302:	2b00      	cmp	r3, #0
 8015304:	d102      	bne.n	801530c <tcp_write+0x450>
      queue = seg;
 8015306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015308:	647b      	str	r3, [r7, #68]	@ 0x44
 801530a:	e00c      	b.n	8015326 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801530c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801530e:	2b00      	cmp	r3, #0
 8015310:	d106      	bne.n	8015320 <tcp_write+0x464>
 8015312:	4b53      	ldr	r3, [pc, #332]	@ (8015460 <tcp_write+0x5a4>)
 8015314:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015318:	4955      	ldr	r1, [pc, #340]	@ (8015470 <tcp_write+0x5b4>)
 801531a:	4853      	ldr	r0, [pc, #332]	@ (8015468 <tcp_write+0x5ac>)
 801531c:	f005 f8b6 	bl	801a48c <iprintf>
      prev_seg->next = seg;
 8015320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015322:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015324:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015328:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801532a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801532e:	8b3b      	ldrh	r3, [r7, #24]
 8015330:	4413      	add	r3, r2
 8015332:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8015336:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801533a:	88fb      	ldrh	r3, [r7, #6]
 801533c:	429a      	cmp	r2, r3
 801533e:	f4ff af3d 	bcc.w	80151bc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015342:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015344:	2b00      	cmp	r3, #0
 8015346:	d02c      	beq.n	80153a2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801534e:	e01e      	b.n	801538e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015352:	891a      	ldrh	r2, [r3, #8]
 8015354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015356:	4413      	add	r3, r2
 8015358:	b29a      	uxth	r2, r3
 801535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d110      	bne.n	8015388 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801536c:	8952      	ldrh	r2, [r2, #10]
 801536e:	4413      	add	r3, r2
 8015370:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015372:	68b9      	ldr	r1, [r7, #8]
 8015374:	4618      	mov	r0, r3
 8015376:	f005 fa28 	bl	801a7ca <memcpy>
        p->len += oversize_used;
 801537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801537c:	895a      	ldrh	r2, [r3, #10]
 801537e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015380:	4413      	add	r3, r2
 8015382:	b29a      	uxth	r2, r3
 8015384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015386:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015390:	2b00      	cmp	r3, #0
 8015392:	d1dd      	bne.n	8015350 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015396:	891a      	ldrh	r2, [r3, #8]
 8015398:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801539a:	4413      	add	r3, r2
 801539c:	b29a      	uxth	r2, r3
 801539e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80153a2:	8a7a      	ldrh	r2, [r7, #18]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80153aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d018      	beq.n	80153e2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80153b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d106      	bne.n	80153c4 <tcp_write+0x508>
 80153b6:	4b2a      	ldr	r3, [pc, #168]	@ (8015460 <tcp_write+0x5a4>)
 80153b8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80153bc:	492d      	ldr	r1, [pc, #180]	@ (8015474 <tcp_write+0x5b8>)
 80153be:	482a      	ldr	r0, [pc, #168]	@ (8015468 <tcp_write+0x5ac>)
 80153c0:	f005 f864 	bl	801a48c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80153c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7fb f8fc 	bl	80105c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80153d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153d2:	891a      	ldrh	r2, [r3, #8]
 80153d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153d6:	891b      	ldrh	r3, [r3, #8]
 80153d8:	4413      	add	r3, r2
 80153da:	b29a      	uxth	r2, r3
 80153dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153de:	811a      	strh	r2, [r3, #8]
 80153e0:	e037      	b.n	8015452 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80153e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d034      	beq.n	8015452 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80153e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d003      	beq.n	80153f6 <tcp_write+0x53a>
 80153ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d106      	bne.n	8015404 <tcp_write+0x548>
 80153f6:	4b1a      	ldr	r3, [pc, #104]	@ (8015460 <tcp_write+0x5a4>)
 80153f8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80153fc:	491e      	ldr	r1, [pc, #120]	@ (8015478 <tcp_write+0x5bc>)
 80153fe:	481a      	ldr	r0, [pc, #104]	@ (8015468 <tcp_write+0x5ac>)
 8015400:	f005 f844 	bl	801a48c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	62bb      	str	r3, [r7, #40]	@ 0x28
 801540a:	e009      	b.n	8015420 <tcp_write+0x564>
      p->tot_len += extendlen;
 801540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540e:	891a      	ldrh	r2, [r3, #8]
 8015410:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015412:	4413      	add	r3, r2
 8015414:	b29a      	uxth	r2, r3
 8015416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015418:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d1f1      	bne.n	801540c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801542a:	891a      	ldrh	r2, [r3, #8]
 801542c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801542e:	4413      	add	r3, r2
 8015430:	b29a      	uxth	r2, r3
 8015432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015434:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015438:	895a      	ldrh	r2, [r3, #10]
 801543a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801543c:	4413      	add	r3, r2
 801543e:	b29a      	uxth	r2, r3
 8015440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015442:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015446:	891a      	ldrh	r2, [r3, #8]
 8015448:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801544a:	4413      	add	r3, r2
 801544c:	b29a      	uxth	r2, r3
 801544e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015450:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015454:	2b00      	cmp	r3, #0
 8015456:	d111      	bne.n	801547c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801545c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801545e:	e010      	b.n	8015482 <tcp_write+0x5c6>
 8015460:	0801e08c 	.word	0x0801e08c
 8015464:	0801e32c 	.word	0x0801e32c
 8015468:	0801e0e0 	.word	0x0801e0e0
 801546c:	0801e36c 	.word	0x0801e36c
 8015470:	0801e37c 	.word	0x0801e37c
 8015474:	0801e390 	.word	0x0801e390
 8015478:	0801e3c8 	.word	0x0801e3c8
  } else {
    last_unsent->next = queue;
 801547c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801547e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015480:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015486:	88fb      	ldrh	r3, [r7, #6]
 8015488:	441a      	add	r2, r3
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015494:	88fb      	ldrh	r3, [r7, #6]
 8015496:	1ad3      	subs	r3, r2, r3
 8015498:	b29a      	uxth	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80154a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d00e      	beq.n	80154d2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10a      	bne.n	80154d2 <tcp_write+0x616>
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d106      	bne.n	80154d2 <tcp_write+0x616>
 80154c4:	4b2c      	ldr	r3, [pc, #176]	@ (8015578 <tcp_write+0x6bc>)
 80154c6:	f240 3212 	movw	r2, #786	@ 0x312
 80154ca:	492c      	ldr	r1, [pc, #176]	@ (801557c <tcp_write+0x6c0>)
 80154cc:	482c      	ldr	r0, [pc, #176]	@ (8015580 <tcp_write+0x6c4>)
 80154ce:	f004 ffdd 	bl	801a48c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80154d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d016      	beq.n	8015506 <tcp_write+0x64a>
 80154d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154da:	68db      	ldr	r3, [r3, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d012      	beq.n	8015506 <tcp_write+0x64a>
 80154e0:	797b      	ldrb	r3, [r7, #5]
 80154e2:	f003 0302 	and.w	r3, r3, #2
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d10d      	bne.n	8015506 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80154ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	899b      	ldrh	r3, [r3, #12]
 80154f0:	b29c      	uxth	r4, r3
 80154f2:	2008      	movs	r0, #8
 80154f4:	f7f9 fbda 	bl	800ecac <lwip_htons>
 80154f8:	4603      	mov	r3, r0
 80154fa:	461a      	mov	r2, r3
 80154fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	4322      	orrs	r2, r4
 8015502:	b292      	uxth	r2, r2
 8015504:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015506:	2300      	movs	r3, #0
 8015508:	e031      	b.n	801556e <tcp_write+0x6b2>
          goto memerr;
 801550a:	bf00      	nop
 801550c:	e006      	b.n	801551c <tcp_write+0x660>
            goto memerr;
 801550e:	bf00      	nop
 8015510:	e004      	b.n	801551c <tcp_write+0x660>
        goto memerr;
 8015512:	bf00      	nop
 8015514:	e002      	b.n	801551c <tcp_write+0x660>
        goto memerr;
 8015516:	bf00      	nop
 8015518:	e000      	b.n	801551c <tcp_write+0x660>
      goto memerr;
 801551a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	8b5b      	ldrh	r3, [r3, #26]
 8015520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015524:	b29a      	uxth	r2, r3
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801552c:	2b00      	cmp	r3, #0
 801552e:	d002      	beq.n	8015536 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015530:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015532:	f7fa ff7b 	bl	801042c <pbuf_free>
  }
  if (queue != NULL) {
 8015536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015538:	2b00      	cmp	r3, #0
 801553a:	d002      	beq.n	8015542 <tcp_write+0x686>
    tcp_segs_free(queue);
 801553c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801553e:	f7fc fb9b 	bl	8011c78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015548:	2b00      	cmp	r3, #0
 801554a:	d00e      	beq.n	801556a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015550:	2b00      	cmp	r3, #0
 8015552:	d10a      	bne.n	801556a <tcp_write+0x6ae>
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015558:	2b00      	cmp	r3, #0
 801555a:	d106      	bne.n	801556a <tcp_write+0x6ae>
 801555c:	4b06      	ldr	r3, [pc, #24]	@ (8015578 <tcp_write+0x6bc>)
 801555e:	f240 3227 	movw	r2, #807	@ 0x327
 8015562:	4906      	ldr	r1, [pc, #24]	@ (801557c <tcp_write+0x6c0>)
 8015564:	4806      	ldr	r0, [pc, #24]	@ (8015580 <tcp_write+0x6c4>)
 8015566:	f004 ff91 	bl	801a48c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801556a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801556e:	4618      	mov	r0, r3
 8015570:	375c      	adds	r7, #92	@ 0x5c
 8015572:	46bd      	mov	sp, r7
 8015574:	bd90      	pop	{r4, r7, pc}
 8015576:	bf00      	nop
 8015578:	0801e08c 	.word	0x0801e08c
 801557c:	0801e400 	.word	0x0801e400
 8015580:	0801e0e0 	.word	0x0801e0e0

08015584 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015584:	b590      	push	{r4, r7, lr}
 8015586:	b08b      	sub	sp, #44	@ 0x2c
 8015588:	af02      	add	r7, sp, #8
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	460b      	mov	r3, r1
 801558e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015590:	2300      	movs	r3, #0
 8015592:	61fb      	str	r3, [r7, #28]
 8015594:	2300      	movs	r3, #0
 8015596:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015598:	2300      	movs	r3, #0
 801559a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <tcp_split_unsent_seg+0x2c>
 80155a2:	4b95      	ldr	r3, [pc, #596]	@ (80157f8 <tcp_split_unsent_seg+0x274>)
 80155a4:	f240 324b 	movw	r2, #843	@ 0x34b
 80155a8:	4994      	ldr	r1, [pc, #592]	@ (80157fc <tcp_split_unsent_seg+0x278>)
 80155aa:	4895      	ldr	r0, [pc, #596]	@ (8015800 <tcp_split_unsent_seg+0x27c>)
 80155ac:	f004 ff6e 	bl	801a48c <iprintf>

  useg = pcb->unsent;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d102      	bne.n	80155c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80155bc:	f04f 33ff 	mov.w	r3, #4294967295
 80155c0:	e116      	b.n	80157f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80155c2:	887b      	ldrh	r3, [r7, #2]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d109      	bne.n	80155dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80155c8:	4b8b      	ldr	r3, [pc, #556]	@ (80157f8 <tcp_split_unsent_seg+0x274>)
 80155ca:	f240 3253 	movw	r2, #851	@ 0x353
 80155ce:	498d      	ldr	r1, [pc, #564]	@ (8015804 <tcp_split_unsent_seg+0x280>)
 80155d0:	488b      	ldr	r0, [pc, #556]	@ (8015800 <tcp_split_unsent_seg+0x27c>)
 80155d2:	f004 ff5b 	bl	801a48c <iprintf>
    return ERR_VAL;
 80155d6:	f06f 0305 	mvn.w	r3, #5
 80155da:	e109      	b.n	80157f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	891b      	ldrh	r3, [r3, #8]
 80155e0:	887a      	ldrh	r2, [r7, #2]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d301      	bcc.n	80155ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80155e6:	2300      	movs	r3, #0
 80155e8:	e102      	b.n	80157f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155ee:	887a      	ldrh	r2, [r7, #2]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d906      	bls.n	8015602 <tcp_split_unsent_seg+0x7e>
 80155f4:	4b80      	ldr	r3, [pc, #512]	@ (80157f8 <tcp_split_unsent_seg+0x274>)
 80155f6:	f240 325b 	movw	r2, #859	@ 0x35b
 80155fa:	4983      	ldr	r1, [pc, #524]	@ (8015808 <tcp_split_unsent_seg+0x284>)
 80155fc:	4880      	ldr	r0, [pc, #512]	@ (8015800 <tcp_split_unsent_seg+0x27c>)
 80155fe:	f004 ff45 	bl	801a48c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	891b      	ldrh	r3, [r3, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d106      	bne.n	8015618 <tcp_split_unsent_seg+0x94>
 801560a:	4b7b      	ldr	r3, [pc, #492]	@ (80157f8 <tcp_split_unsent_seg+0x274>)
 801560c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8015610:	497e      	ldr	r1, [pc, #504]	@ (801580c <tcp_split_unsent_seg+0x288>)
 8015612:	487b      	ldr	r0, [pc, #492]	@ (8015800 <tcp_split_unsent_seg+0x27c>)
 8015614:	f004 ff3a 	bl	801a48c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	7a9b      	ldrb	r3, [r3, #10]
 801561c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801561e:	7bfb      	ldrb	r3, [r7, #15]
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	b2db      	uxtb	r3, r3
 8015624:	f003 0304 	and.w	r3, r3, #4
 8015628:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	891a      	ldrh	r2, [r3, #8]
 801562e:	887b      	ldrh	r3, [r7, #2]
 8015630:	1ad3      	subs	r3, r2, r3
 8015632:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015634:	7bbb      	ldrb	r3, [r7, #14]
 8015636:	b29a      	uxth	r2, r3
 8015638:	89bb      	ldrh	r3, [r7, #12]
 801563a:	4413      	add	r3, r2
 801563c:	b29b      	uxth	r3, r3
 801563e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015642:	4619      	mov	r1, r3
 8015644:	2036      	movs	r0, #54	@ 0x36
 8015646:	f7fa fc0d 	bl	800fe64 <pbuf_alloc>
 801564a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	2b00      	cmp	r3, #0
 8015650:	f000 80b7 	beq.w	80157c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	891a      	ldrh	r2, [r3, #8]
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	891b      	ldrh	r3, [r3, #8]
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	b29a      	uxth	r2, r3
 8015662:	887b      	ldrh	r3, [r7, #2]
 8015664:	4413      	add	r3, r2
 8015666:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	6858      	ldr	r0, [r3, #4]
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	685a      	ldr	r2, [r3, #4]
 8015670:	7bbb      	ldrb	r3, [r7, #14]
 8015672:	18d1      	adds	r1, r2, r3
 8015674:	897b      	ldrh	r3, [r7, #10]
 8015676:	89ba      	ldrh	r2, [r7, #12]
 8015678:	f7fb f8ce 	bl	8010818 <pbuf_copy_partial>
 801567c:	4603      	mov	r3, r0
 801567e:	461a      	mov	r2, r3
 8015680:	89bb      	ldrh	r3, [r7, #12]
 8015682:	4293      	cmp	r3, r2
 8015684:	f040 809f 	bne.w	80157c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	899b      	ldrh	r3, [r3, #12]
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7f9 fb0b 	bl	800ecac <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	b2db      	uxtb	r3, r3
 801569a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801569e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80156a0:	2300      	movs	r3, #0
 80156a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80156a4:	7efb      	ldrb	r3, [r7, #27]
 80156a6:	f003 0308 	and.w	r3, r3, #8
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d007      	beq.n	80156be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80156ae:	7efb      	ldrb	r3, [r7, #27]
 80156b0:	f023 0308 	bic.w	r3, r3, #8
 80156b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80156b6:	7ebb      	ldrb	r3, [r7, #26]
 80156b8:	f043 0308 	orr.w	r3, r3, #8
 80156bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80156be:	7efb      	ldrb	r3, [r7, #27]
 80156c0:	f003 0301 	and.w	r3, r3, #1
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d007      	beq.n	80156d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80156c8:	7efb      	ldrb	r3, [r7, #27]
 80156ca:	f023 0301 	bic.w	r3, r3, #1
 80156ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80156d0:	7ebb      	ldrb	r3, [r7, #26]
 80156d2:	f043 0301 	orr.w	r3, r3, #1
 80156d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	4618      	mov	r0, r3
 80156e0:	f7f9 fafa 	bl	800ecd8 <lwip_htonl>
 80156e4:	4602      	mov	r2, r0
 80156e6:	887b      	ldrh	r3, [r7, #2]
 80156e8:	18d1      	adds	r1, r2, r3
 80156ea:	7eba      	ldrb	r2, [r7, #26]
 80156ec:	7bfb      	ldrb	r3, [r7, #15]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	460b      	mov	r3, r1
 80156f2:	6939      	ldr	r1, [r7, #16]
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7ff fa51 	bl	8014b9c <tcp_create_segment>
 80156fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d063      	beq.n	80157ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	f7fa ff1e 	bl	8010548 <pbuf_clen>
 801570c:	4603      	mov	r3, r0
 801570e:	461a      	mov	r2, r3
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015716:	1a9b      	subs	r3, r3, r2
 8015718:	b29a      	uxth	r2, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	6858      	ldr	r0, [r3, #4]
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	891a      	ldrh	r2, [r3, #8]
 801572a:	89bb      	ldrh	r3, [r7, #12]
 801572c:	1ad3      	subs	r3, r2, r3
 801572e:	b29b      	uxth	r3, r3
 8015730:	4619      	mov	r1, r3
 8015732:	f7fa fcf5 	bl	8010120 <pbuf_realloc>
  useg->len -= remainder;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	891a      	ldrh	r2, [r3, #8]
 801573a:	89bb      	ldrh	r3, [r7, #12]
 801573c:	1ad3      	subs	r3, r2, r3
 801573e:	b29a      	uxth	r2, r3
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	899b      	ldrh	r3, [r3, #12]
 801574a:	b29c      	uxth	r4, r3
 801574c:	7efb      	ldrb	r3, [r7, #27]
 801574e:	b29b      	uxth	r3, r3
 8015750:	4618      	mov	r0, r3
 8015752:	f7f9 faab 	bl	800ecac <lwip_htons>
 8015756:	4603      	mov	r3, r0
 8015758:	461a      	mov	r2, r3
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	4322      	orrs	r2, r4
 8015760:	b292      	uxth	r2, r2
 8015762:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	4618      	mov	r0, r3
 801576a:	f7fa feed 	bl	8010548 <pbuf_clen>
 801576e:	4603      	mov	r3, r0
 8015770:	461a      	mov	r2, r3
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015778:	4413      	add	r3, r2
 801577a:	b29a      	uxth	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	4618      	mov	r0, r3
 8015788:	f7fa fede 	bl	8010548 <pbuf_clen>
 801578c:	4603      	mov	r3, r0
 801578e:	461a      	mov	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015796:	4413      	add	r3, r2
 8015798:	b29a      	uxth	r2, r3
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	69fa      	ldr	r2, [r7, #28]
 80157ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d103      	bne.n	80157be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2200      	movs	r2, #0
 80157ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80157be:	2300      	movs	r3, #0
 80157c0:	e016      	b.n	80157f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80157c2:	bf00      	nop
 80157c4:	e002      	b.n	80157cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80157c6:	bf00      	nop
 80157c8:	e000      	b.n	80157cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80157ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80157cc:	69fb      	ldr	r3, [r7, #28]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d006      	beq.n	80157e0 <tcp_split_unsent_seg+0x25c>
 80157d2:	4b09      	ldr	r3, [pc, #36]	@ (80157f8 <tcp_split_unsent_seg+0x274>)
 80157d4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80157d8:	490d      	ldr	r1, [pc, #52]	@ (8015810 <tcp_split_unsent_seg+0x28c>)
 80157da:	4809      	ldr	r0, [pc, #36]	@ (8015800 <tcp_split_unsent_seg+0x27c>)
 80157dc:	f004 fe56 	bl	801a48c <iprintf>
  if (p != NULL) {
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d002      	beq.n	80157ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80157e6:	6938      	ldr	r0, [r7, #16]
 80157e8:	f7fa fe20 	bl	801042c <pbuf_free>
  }

  return ERR_MEM;
 80157ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3724      	adds	r7, #36	@ 0x24
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd90      	pop	{r4, r7, pc}
 80157f8:	0801e08c 	.word	0x0801e08c
 80157fc:	0801e420 	.word	0x0801e420
 8015800:	0801e0e0 	.word	0x0801e0e0
 8015804:	0801e444 	.word	0x0801e444
 8015808:	0801e468 	.word	0x0801e468
 801580c:	0801e478 	.word	0x0801e478
 8015810:	0801e488 	.word	0x0801e488

08015814 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015814:	b590      	push	{r4, r7, lr}
 8015816:	b085      	sub	sp, #20
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d106      	bne.n	8015830 <tcp_send_fin+0x1c>
 8015822:	4b21      	ldr	r3, [pc, #132]	@ (80158a8 <tcp_send_fin+0x94>)
 8015824:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8015828:	4920      	ldr	r1, [pc, #128]	@ (80158ac <tcp_send_fin+0x98>)
 801582a:	4821      	ldr	r0, [pc, #132]	@ (80158b0 <tcp_send_fin+0x9c>)
 801582c:	f004 fe2e 	bl	801a48c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015834:	2b00      	cmp	r3, #0
 8015836:	d02e      	beq.n	8015896 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801583c:	60fb      	str	r3, [r7, #12]
 801583e:	e002      	b.n	8015846 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d1f8      	bne.n	8015840 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	899b      	ldrh	r3, [r3, #12]
 8015854:	b29b      	uxth	r3, r3
 8015856:	4618      	mov	r0, r3
 8015858:	f7f9 fa28 	bl	800ecac <lwip_htons>
 801585c:	4603      	mov	r3, r0
 801585e:	b2db      	uxtb	r3, r3
 8015860:	f003 0307 	and.w	r3, r3, #7
 8015864:	2b00      	cmp	r3, #0
 8015866:	d116      	bne.n	8015896 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	899b      	ldrh	r3, [r3, #12]
 801586e:	b29c      	uxth	r4, r3
 8015870:	2001      	movs	r0, #1
 8015872:	f7f9 fa1b 	bl	800ecac <lwip_htons>
 8015876:	4603      	mov	r3, r0
 8015878:	461a      	mov	r2, r3
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	4322      	orrs	r2, r4
 8015880:	b292      	uxth	r2, r2
 8015882:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	8b5b      	ldrh	r3, [r3, #26]
 8015888:	f043 0320 	orr.w	r3, r3, #32
 801588c:	b29a      	uxth	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015892:	2300      	movs	r3, #0
 8015894:	e004      	b.n	80158a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015896:	2101      	movs	r1, #1
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f000 f80b 	bl	80158b4 <tcp_enqueue_flags>
 801589e:	4603      	mov	r3, r0
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd90      	pop	{r4, r7, pc}
 80158a8:	0801e08c 	.word	0x0801e08c
 80158ac:	0801e494 	.word	0x0801e494
 80158b0:	0801e0e0 	.word	0x0801e0e0

080158b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b08a      	sub	sp, #40	@ 0x28
 80158b8:	af02      	add	r7, sp, #8
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	460b      	mov	r3, r1
 80158be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80158c4:	2300      	movs	r3, #0
 80158c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80158c8:	78fb      	ldrb	r3, [r7, #3]
 80158ca:	f003 0303 	and.w	r3, r3, #3
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d106      	bne.n	80158e0 <tcp_enqueue_flags+0x2c>
 80158d2:	4b67      	ldr	r3, [pc, #412]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 80158d4:	f240 4211 	movw	r2, #1041	@ 0x411
 80158d8:	4966      	ldr	r1, [pc, #408]	@ (8015a74 <tcp_enqueue_flags+0x1c0>)
 80158da:	4867      	ldr	r0, [pc, #412]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 80158dc:	f004 fdd6 	bl	801a48c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d106      	bne.n	80158f4 <tcp_enqueue_flags+0x40>
 80158e6:	4b62      	ldr	r3, [pc, #392]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 80158e8:	f240 4213 	movw	r2, #1043	@ 0x413
 80158ec:	4963      	ldr	r1, [pc, #396]	@ (8015a7c <tcp_enqueue_flags+0x1c8>)
 80158ee:	4862      	ldr	r0, [pc, #392]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 80158f0:	f004 fdcc 	bl	801a48c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80158f4:	78fb      	ldrb	r3, [r7, #3]
 80158f6:	f003 0302 	and.w	r3, r3, #2
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d001      	beq.n	8015902 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80158fe:	2301      	movs	r3, #1
 8015900:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015902:	7ffb      	ldrb	r3, [r7, #31]
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	b2db      	uxtb	r3, r3
 8015908:	f003 0304 	and.w	r3, r3, #4
 801590c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801590e:	7dfb      	ldrb	r3, [r7, #23]
 8015910:	b29b      	uxth	r3, r3
 8015912:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015916:	4619      	mov	r1, r3
 8015918:	2036      	movs	r0, #54	@ 0x36
 801591a:	f7fa faa3 	bl	800fe64 <pbuf_alloc>
 801591e:	6138      	str	r0, [r7, #16]
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d109      	bne.n	801593a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	8b5b      	ldrh	r3, [r3, #26]
 801592a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801592e:	b29a      	uxth	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015934:	f04f 33ff 	mov.w	r3, #4294967295
 8015938:	e095      	b.n	8015a66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	895a      	ldrh	r2, [r3, #10]
 801593e:	7dfb      	ldrb	r3, [r7, #23]
 8015940:	b29b      	uxth	r3, r3
 8015942:	429a      	cmp	r2, r3
 8015944:	d206      	bcs.n	8015954 <tcp_enqueue_flags+0xa0>
 8015946:	4b4a      	ldr	r3, [pc, #296]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 8015948:	f240 4239 	movw	r2, #1081	@ 0x439
 801594c:	494c      	ldr	r1, [pc, #304]	@ (8015a80 <tcp_enqueue_flags+0x1cc>)
 801594e:	484a      	ldr	r0, [pc, #296]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 8015950:	f004 fd9c 	bl	801a48c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8015958:	78fa      	ldrb	r2, [r7, #3]
 801595a:	7ffb      	ldrb	r3, [r7, #31]
 801595c:	9300      	str	r3, [sp, #0]
 801595e:	460b      	mov	r3, r1
 8015960:	6939      	ldr	r1, [r7, #16]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f7ff f91a 	bl	8014b9c <tcp_create_segment>
 8015968:	60f8      	str	r0, [r7, #12]
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d109      	bne.n	8015984 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	8b5b      	ldrh	r3, [r3, #26]
 8015974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015978:	b29a      	uxth	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801597e:	f04f 33ff 	mov.w	r3, #4294967295
 8015982:	e070      	b.n	8015a66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	f003 0303 	and.w	r3, r3, #3
 801598c:	2b00      	cmp	r3, #0
 801598e:	d006      	beq.n	801599e <tcp_enqueue_flags+0xea>
 8015990:	4b37      	ldr	r3, [pc, #220]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 8015992:	f240 4242 	movw	r2, #1090	@ 0x442
 8015996:	493b      	ldr	r1, [pc, #236]	@ (8015a84 <tcp_enqueue_flags+0x1d0>)
 8015998:	4837      	ldr	r0, [pc, #220]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 801599a:	f004 fd77 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	891b      	ldrh	r3, [r3, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d006      	beq.n	80159b4 <tcp_enqueue_flags+0x100>
 80159a6:	4b32      	ldr	r3, [pc, #200]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 80159a8:	f240 4243 	movw	r2, #1091	@ 0x443
 80159ac:	4936      	ldr	r1, [pc, #216]	@ (8015a88 <tcp_enqueue_flags+0x1d4>)
 80159ae:	4832      	ldr	r0, [pc, #200]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 80159b0:	f004 fd6c 	bl	801a48c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d103      	bne.n	80159c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	68fa      	ldr	r2, [r7, #12]
 80159c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80159c2:	e00d      	b.n	80159e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159c8:	61bb      	str	r3, [r7, #24]
 80159ca:	e002      	b.n	80159d2 <tcp_enqueue_flags+0x11e>
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	61bb      	str	r3, [r7, #24]
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1f8      	bne.n	80159cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	68fa      	ldr	r2, [r7, #12]
 80159de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2200      	movs	r2, #0
 80159e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80159e8:	78fb      	ldrb	r3, [r7, #3]
 80159ea:	f003 0302 	and.w	r3, r3, #2
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d104      	bne.n	80159fc <tcp_enqueue_flags+0x148>
 80159f2:	78fb      	ldrb	r3, [r7, #3]
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d004      	beq.n	8015a06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015a00:	1c5a      	adds	r2, r3, #1
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015a06:	78fb      	ldrb	r3, [r7, #3]
 8015a08:	f003 0301 	and.w	r3, r3, #1
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d006      	beq.n	8015a1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	8b5b      	ldrh	r3, [r3, #26]
 8015a14:	f043 0320 	orr.w	r3, r3, #32
 8015a18:	b29a      	uxth	r2, r3
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7fa fd90 	bl	8010548 <pbuf_clen>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	461a      	mov	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015a32:	4413      	add	r3, r2
 8015a34:	b29a      	uxth	r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00e      	beq.n	8015a64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10a      	bne.n	8015a64 <tcp_enqueue_flags+0x1b0>
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d106      	bne.n	8015a64 <tcp_enqueue_flags+0x1b0>
 8015a56:	4b06      	ldr	r3, [pc, #24]	@ (8015a70 <tcp_enqueue_flags+0x1bc>)
 8015a58:	f240 4265 	movw	r2, #1125	@ 0x465
 8015a5c:	490b      	ldr	r1, [pc, #44]	@ (8015a8c <tcp_enqueue_flags+0x1d8>)
 8015a5e:	4806      	ldr	r0, [pc, #24]	@ (8015a78 <tcp_enqueue_flags+0x1c4>)
 8015a60:	f004 fd14 	bl	801a48c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3720      	adds	r7, #32
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	0801e08c 	.word	0x0801e08c
 8015a74:	0801e4b0 	.word	0x0801e4b0
 8015a78:	0801e0e0 	.word	0x0801e0e0
 8015a7c:	0801e508 	.word	0x0801e508
 8015a80:	0801e528 	.word	0x0801e528
 8015a84:	0801e564 	.word	0x0801e564
 8015a88:	0801e57c 	.word	0x0801e57c
 8015a8c:	0801e5a8 	.word	0x0801e5a8

08015a90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015a90:	b5b0      	push	{r4, r5, r7, lr}
 8015a92:	b08a      	sub	sp, #40	@ 0x28
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d106      	bne.n	8015aac <tcp_output+0x1c>
 8015a9e:	4b8a      	ldr	r3, [pc, #552]	@ (8015cc8 <tcp_output+0x238>)
 8015aa0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8015aa4:	4989      	ldr	r1, [pc, #548]	@ (8015ccc <tcp_output+0x23c>)
 8015aa6:	488a      	ldr	r0, [pc, #552]	@ (8015cd0 <tcp_output+0x240>)
 8015aa8:	f004 fcf0 	bl	801a48c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	7d1b      	ldrb	r3, [r3, #20]
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d106      	bne.n	8015ac2 <tcp_output+0x32>
 8015ab4:	4b84      	ldr	r3, [pc, #528]	@ (8015cc8 <tcp_output+0x238>)
 8015ab6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8015aba:	4986      	ldr	r1, [pc, #536]	@ (8015cd4 <tcp_output+0x244>)
 8015abc:	4884      	ldr	r0, [pc, #528]	@ (8015cd0 <tcp_output+0x240>)
 8015abe:	f004 fce5 	bl	801a48c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015ac2:	4b85      	ldr	r3, [pc, #532]	@ (8015cd8 <tcp_output+0x248>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d101      	bne.n	8015ad0 <tcp_output+0x40>
    return ERR_OK;
 8015acc:	2300      	movs	r3, #0
 8015ace:	e1ce      	b.n	8015e6e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015adc:	4293      	cmp	r3, r2
 8015ade:	bf28      	it	cs
 8015ae0:	4613      	movcs	r3, r2
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015aea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10b      	bne.n	8015b0a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	8b5b      	ldrh	r3, [r3, #26]
 8015af6:	f003 0302 	and.w	r3, r3, #2
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 81aa 	beq.w	8015e54 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 fdcb 	bl	801669c <tcp_send_empty_ack>
 8015b06:	4603      	mov	r3, r0
 8015b08:	e1b1      	b.n	8015e6e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015b0a:	6879      	ldr	r1, [r7, #4]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	3304      	adds	r3, #4
 8015b10:	461a      	mov	r2, r3
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff f826 	bl	8014b64 <tcp_route>
 8015b18:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d102      	bne.n	8015b26 <tcp_output+0x96>
    return ERR_RTE;
 8015b20:	f06f 0303 	mvn.w	r3, #3
 8015b24:	e1a3      	b.n	8015e6e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d003      	beq.n	8015b34 <tcp_output+0xa4>
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d111      	bne.n	8015b58 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d002      	beq.n	8015b40 <tcp_output+0xb0>
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	e000      	b.n	8015b42 <tcp_output+0xb2>
 8015b40:	2300      	movs	r3, #0
 8015b42:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d102      	bne.n	8015b50 <tcp_output+0xc0>
      return ERR_RTE;
 8015b4a:	f06f 0303 	mvn.w	r3, #3
 8015b4e:	e18e      	b.n	8015e6e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7f9 f8ba 	bl	800ecd8 <lwip_htonl>
 8015b64:	4602      	mov	r2, r0
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b6a:	1ad3      	subs	r3, r2, r3
 8015b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b6e:	8912      	ldrh	r2, [r2, #8]
 8015b70:	4413      	add	r3, r2
 8015b72:	69ba      	ldr	r2, [r7, #24]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d227      	bcs.n	8015bc8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015b7e:	461a      	mov	r2, r3
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	4293      	cmp	r3, r2
 8015b84:	d114      	bne.n	8015bb0 <tcp_output+0x120>
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d110      	bne.n	8015bb0 <tcp_output+0x120>
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d10b      	bne.n	8015bb0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	8b5b      	ldrh	r3, [r3, #26]
 8015bb4:	f003 0302 	and.w	r3, r3, #2
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	f000 814d 	beq.w	8015e58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f000 fd6c 	bl	801669c <tcp_send_empty_ack>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	e152      	b.n	8015e6e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015bd4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015bd6:	6a3b      	ldr	r3, [r7, #32]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f000 811c 	beq.w	8015e16 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015bde:	e002      	b.n	8015be6 <tcp_output+0x156>
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	623b      	str	r3, [r7, #32]
 8015be6:	6a3b      	ldr	r3, [r7, #32]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d1f8      	bne.n	8015be0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015bee:	e112      	b.n	8015e16 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf2:	68db      	ldr	r3, [r3, #12]
 8015bf4:	899b      	ldrh	r3, [r3, #12]
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7f9 f857 	bl	800ecac <lwip_htons>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	f003 0304 	and.w	r3, r3, #4
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d006      	beq.n	8015c18 <tcp_output+0x188>
 8015c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8015cc8 <tcp_output+0x238>)
 8015c0c:	f240 5236 	movw	r2, #1334	@ 0x536
 8015c10:	4932      	ldr	r1, [pc, #200]	@ (8015cdc <tcp_output+0x24c>)
 8015c12:	482f      	ldr	r0, [pc, #188]	@ (8015cd0 <tcp_output+0x240>)
 8015c14:	f004 fc3a 	bl	801a48c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d01f      	beq.n	8015c60 <tcp_output+0x1d0>
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	8b5b      	ldrh	r3, [r3, #26]
 8015c24:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d119      	bne.n	8015c60 <tcp_output+0x1d0>
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d00b      	beq.n	8015c4c <tcp_output+0x1bc>
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d110      	bne.n	8015c60 <tcp_output+0x1d0>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c42:	891a      	ldrh	r2, [r3, #8]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d209      	bcs.n	8015c60 <tcp_output+0x1d0>
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d004      	beq.n	8015c60 <tcp_output+0x1d0>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c5c:	2b08      	cmp	r3, #8
 8015c5e:	d901      	bls.n	8015c64 <tcp_output+0x1d4>
 8015c60:	2301      	movs	r3, #1
 8015c62:	e000      	b.n	8015c66 <tcp_output+0x1d6>
 8015c64:	2300      	movs	r3, #0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d106      	bne.n	8015c78 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8b5b      	ldrh	r3, [r3, #26]
 8015c6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	f000 80e4 	beq.w	8015e40 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	7d1b      	ldrb	r3, [r3, #20]
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d00d      	beq.n	8015c9c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	899b      	ldrh	r3, [r3, #12]
 8015c86:	b29c      	uxth	r4, r3
 8015c88:	2010      	movs	r0, #16
 8015c8a:	f7f9 f80f 	bl	800ecac <lwip_htons>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	461a      	mov	r2, r3
 8015c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	4322      	orrs	r2, r4
 8015c98:	b292      	uxth	r2, r2
 8015c9a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	6879      	ldr	r1, [r7, #4]
 8015ca0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ca2:	f000 f909 	bl	8015eb8 <tcp_output_segment>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d016      	beq.n	8015ce0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	8b5b      	ldrh	r3, [r3, #26]
 8015cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015cba:	b29a      	uxth	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	835a      	strh	r2, [r3, #26]
      return err;
 8015cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cc4:	e0d3      	b.n	8015e6e <tcp_output+0x3de>
 8015cc6:	bf00      	nop
 8015cc8:	0801e08c 	.word	0x0801e08c
 8015ccc:	0801e5d0 	.word	0x0801e5d0
 8015cd0:	0801e0e0 	.word	0x0801e0e0
 8015cd4:	0801e5e8 	.word	0x0801e5e8
 8015cd8:	2000c7bc 	.word	0x2000c7bc
 8015cdc:	0801e610 	.word	0x0801e610
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ce2:	681a      	ldr	r2, [r3, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7d1b      	ldrb	r3, [r3, #20]
 8015cec:	2b02      	cmp	r3, #2
 8015cee:	d006      	beq.n	8015cfe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	8b5b      	ldrh	r3, [r3, #26]
 8015cf4:	f023 0303 	bic.w	r3, r3, #3
 8015cf8:	b29a      	uxth	r2, r3
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7f8 ffe7 	bl	800ecd8 <lwip_htonl>
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d0e:	891b      	ldrh	r3, [r3, #8]
 8015d10:	461d      	mov	r5, r3
 8015d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	899b      	ldrh	r3, [r3, #12]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f8 ffc6 	bl	800ecac <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	f003 0303 	and.w	r3, r3, #3
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d001      	beq.n	8015d30 <tcp_output+0x2a0>
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e000      	b.n	8015d32 <tcp_output+0x2a2>
 8015d30:	2300      	movs	r3, #0
 8015d32:	442b      	add	r3, r5
 8015d34:	4423      	add	r3, r4
 8015d36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d3c:	68bb      	ldr	r3, [r7, #8]
 8015d3e:	1ad3      	subs	r3, r2, r3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	da02      	bge.n	8015d4a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	68ba      	ldr	r2, [r7, #8]
 8015d48:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d4c:	891b      	ldrh	r3, [r3, #8]
 8015d4e:	461c      	mov	r4, r3
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	899b      	ldrh	r3, [r3, #12]
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f8 ffa7 	bl	800ecac <lwip_htons>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	b2db      	uxtb	r3, r3
 8015d62:	f003 0303 	and.w	r3, r3, #3
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d001      	beq.n	8015d6e <tcp_output+0x2de>
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	e000      	b.n	8015d70 <tcp_output+0x2e0>
 8015d6e:	2300      	movs	r3, #0
 8015d70:	4423      	add	r3, r4
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d049      	beq.n	8015e0a <tcp_output+0x37a>
      seg->next = NULL;
 8015d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d78:	2200      	movs	r2, #0
 8015d7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d105      	bne.n	8015d90 <tcp_output+0x300>
        pcb->unacked = seg;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d88:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d8c:	623b      	str	r3, [r7, #32]
 8015d8e:	e03f      	b.n	8015e10 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f8 ff9e 	bl	800ecd8 <lwip_htonl>
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	6a3b      	ldr	r3, [r7, #32]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f8 ff97 	bl	800ecd8 <lwip_htonl>
 8015daa:	4603      	mov	r3, r0
 8015dac:	1ae3      	subs	r3, r4, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	da24      	bge.n	8015dfc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	3370      	adds	r3, #112	@ 0x70
 8015db6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015db8:	e002      	b.n	8015dc0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015dba:	69fb      	ldr	r3, [r7, #28]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d011      	beq.n	8015dec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	68db      	ldr	r3, [r3, #12]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f8 ff81 	bl	800ecd8 <lwip_htonl>
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f8 ff7a 	bl	800ecd8 <lwip_htonl>
 8015de4:	4603      	mov	r3, r0
 8015de6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	dbe6      	blt.n	8015dba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	681a      	ldr	r2, [r3, #0]
 8015df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015df8:	601a      	str	r2, [r3, #0]
 8015dfa:	e009      	b.n	8015e10 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015dfc:	6a3b      	ldr	r3, [r7, #32]
 8015dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015e02:	6a3b      	ldr	r3, [r7, #32]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	623b      	str	r3, [r7, #32]
 8015e08:	e002      	b.n	8015e10 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e0c:	f7fb ff49 	bl	8011ca2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d012      	beq.n	8015e42 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e1e:	68db      	ldr	r3, [r3, #12]
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f8 ff58 	bl	800ecd8 <lwip_htonl>
 8015e28:	4602      	mov	r2, r0
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e2e:	1ad3      	subs	r3, r2, r3
 8015e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e32:	8912      	ldrh	r2, [r2, #8]
 8015e34:	4413      	add	r3, r2
  while (seg != NULL &&
 8015e36:	69ba      	ldr	r2, [r7, #24]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	f4bf aed9 	bcs.w	8015bf0 <tcp_output+0x160>
 8015e3e:	e000      	b.n	8015e42 <tcp_output+0x3b2>
      break;
 8015e40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d108      	bne.n	8015e5c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015e52:	e004      	b.n	8015e5e <tcp_output+0x3ce>
    goto output_done;
 8015e54:	bf00      	nop
 8015e56:	e002      	b.n	8015e5e <tcp_output+0x3ce>
    goto output_done;
 8015e58:	bf00      	nop
 8015e5a:	e000      	b.n	8015e5e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015e5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	8b5b      	ldrh	r3, [r3, #26]
 8015e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015e66:	b29a      	uxth	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3728      	adds	r7, #40	@ 0x28
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bdb0      	pop	{r4, r5, r7, pc}
 8015e76:	bf00      	nop

08015e78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d106      	bne.n	8015e94 <tcp_output_segment_busy+0x1c>
 8015e86:	4b09      	ldr	r3, [pc, #36]	@ (8015eac <tcp_output_segment_busy+0x34>)
 8015e88:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015e8c:	4908      	ldr	r1, [pc, #32]	@ (8015eb0 <tcp_output_segment_busy+0x38>)
 8015e8e:	4809      	ldr	r0, [pc, #36]	@ (8015eb4 <tcp_output_segment_busy+0x3c>)
 8015e90:	f004 fafc 	bl	801a48c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	685b      	ldr	r3, [r3, #4]
 8015e98:	7b9b      	ldrb	r3, [r3, #14]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d001      	beq.n	8015ea2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	e000      	b.n	8015ea4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	0801e08c 	.word	0x0801e08c
 8015eb0:	0801e628 	.word	0x0801e628
 8015eb4:	0801e0e0 	.word	0x0801e0e0

08015eb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015eb8:	b5b0      	push	{r4, r5, r7, lr}
 8015eba:	b08c      	sub	sp, #48	@ 0x30
 8015ebc:	af04      	add	r7, sp, #16
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d106      	bne.n	8015ed8 <tcp_output_segment+0x20>
 8015eca:	4b64      	ldr	r3, [pc, #400]	@ (801605c <tcp_output_segment+0x1a4>)
 8015ecc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015ed0:	4963      	ldr	r1, [pc, #396]	@ (8016060 <tcp_output_segment+0x1a8>)
 8015ed2:	4864      	ldr	r0, [pc, #400]	@ (8016064 <tcp_output_segment+0x1ac>)
 8015ed4:	f004 fada 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d106      	bne.n	8015eec <tcp_output_segment+0x34>
 8015ede:	4b5f      	ldr	r3, [pc, #380]	@ (801605c <tcp_output_segment+0x1a4>)
 8015ee0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015ee4:	4960      	ldr	r1, [pc, #384]	@ (8016068 <tcp_output_segment+0x1b0>)
 8015ee6:	485f      	ldr	r0, [pc, #380]	@ (8016064 <tcp_output_segment+0x1ac>)
 8015ee8:	f004 fad0 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d106      	bne.n	8015f00 <tcp_output_segment+0x48>
 8015ef2:	4b5a      	ldr	r3, [pc, #360]	@ (801605c <tcp_output_segment+0x1a4>)
 8015ef4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015ef8:	495c      	ldr	r1, [pc, #368]	@ (801606c <tcp_output_segment+0x1b4>)
 8015efa:	485a      	ldr	r0, [pc, #360]	@ (8016064 <tcp_output_segment+0x1ac>)
 8015efc:	f004 fac6 	bl	801a48c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015f00:	68f8      	ldr	r0, [r7, #12]
 8015f02:	f7ff ffb9 	bl	8015e78 <tcp_output_segment_busy>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e0a1      	b.n	8016054 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	68dc      	ldr	r4, [r3, #12]
 8015f18:	4610      	mov	r0, r2
 8015f1a:	f7f8 fedd 	bl	800ecd8 <lwip_htonl>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015f22:	68bb      	ldr	r3, [r7, #8]
 8015f24:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	68dc      	ldr	r4, [r3, #12]
 8015f2a:	4610      	mov	r0, r2
 8015f2c:	f7f8 febe 	bl	800ecac <lwip_htons>
 8015f30:	4603      	mov	r3, r0
 8015f32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015f3c:	441a      	add	r2, r3
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	3314      	adds	r3, #20
 8015f48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	7a9b      	ldrb	r3, [r3, #10]
 8015f4e:	f003 0301 	and.w	r3, r3, #1
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d015      	beq.n	8015f82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	3304      	adds	r3, #4
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	6879      	ldr	r1, [r7, #4]
 8015f5e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8015f62:	f7fc fa39 	bl	80123d8 <tcp_eff_send_mss_netif>
 8015f66:	4603      	mov	r3, r0
 8015f68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015f6a:	8b7b      	ldrh	r3, [r7, #26]
 8015f6c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7f8 feb1 	bl	800ecd8 <lwip_htonl>
 8015f76:	4602      	mov	r2, r0
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	3304      	adds	r3, #4
 8015f80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	da02      	bge.n	8015f92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d10c      	bne.n	8015fb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015f9a:	4b35      	ldr	r3, [pc, #212]	@ (8016070 <tcp_output_segment+0x1b8>)
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f8 fe95 	bl	800ecd8 <lwip_htonl>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	68da      	ldr	r2, [r3, #12]
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	1ad3      	subs	r3, r2, r3
 8015fc0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	685b      	ldr	r3, [r3, #4]
 8015fc6:	8959      	ldrh	r1, [r3, #10]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	8b3a      	ldrh	r2, [r7, #24]
 8015fce:	1a8a      	subs	r2, r1, r2
 8015fd0:	b292      	uxth	r2, r2
 8015fd2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	8919      	ldrh	r1, [r3, #8]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	8b3a      	ldrh	r2, [r7, #24]
 8015fe0:	1a8a      	subs	r2, r1, r2
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	68fa      	ldr	r2, [r7, #12]
 8015fec:	68d2      	ldr	r2, [r2, #12]
 8015fee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	68db      	ldr	r3, [r3, #12]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	741a      	strb	r2, [r3, #16]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	68da      	ldr	r2, [r3, #12]
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	7a9b      	ldrb	r3, [r3, #10]
 8016004:	f003 0301 	and.w	r3, r3, #1
 8016008:	2b00      	cmp	r3, #0
 801600a:	d001      	beq.n	8016010 <tcp_output_segment+0x158>
 801600c:	2318      	movs	r3, #24
 801600e:	e000      	b.n	8016012 <tcp_output_segment+0x15a>
 8016010:	2314      	movs	r3, #20
 8016012:	4413      	add	r3, r2
 8016014:	69fa      	ldr	r2, [r7, #28]
 8016016:	429a      	cmp	r2, r3
 8016018:	d006      	beq.n	8016028 <tcp_output_segment+0x170>
 801601a:	4b10      	ldr	r3, [pc, #64]	@ (801605c <tcp_output_segment+0x1a4>)
 801601c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016020:	4914      	ldr	r1, [pc, #80]	@ (8016074 <tcp_output_segment+0x1bc>)
 8016022:	4810      	ldr	r0, [pc, #64]	@ (8016064 <tcp_output_segment+0x1ac>)
 8016024:	f004 fa32 	bl	801a48c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	6858      	ldr	r0, [r3, #4]
 801602c:	68b9      	ldr	r1, [r7, #8]
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	1d1c      	adds	r4, r3, #4
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	7add      	ldrb	r5, [r3, #11]
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	7a9b      	ldrb	r3, [r3, #10]
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	9202      	str	r2, [sp, #8]
 801603e:	2206      	movs	r2, #6
 8016040:	9201      	str	r2, [sp, #4]
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	462b      	mov	r3, r5
 8016046:	4622      	mov	r2, r4
 8016048:	f002 fa32 	bl	80184b0 <ip4_output_if>
 801604c:	4603      	mov	r3, r0
 801604e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016054:	4618      	mov	r0, r3
 8016056:	3720      	adds	r7, #32
 8016058:	46bd      	mov	sp, r7
 801605a:	bdb0      	pop	{r4, r5, r7, pc}
 801605c:	0801e08c 	.word	0x0801e08c
 8016060:	0801e650 	.word	0x0801e650
 8016064:	0801e0e0 	.word	0x0801e0e0
 8016068:	0801e670 	.word	0x0801e670
 801606c:	0801e690 	.word	0x0801e690
 8016070:	2000c770 	.word	0x2000c770
 8016074:	0801e6b4 	.word	0x0801e6b4

08016078 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016078:	b5b0      	push	{r4, r5, r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d106      	bne.n	8016094 <tcp_rexmit_rto_prepare+0x1c>
 8016086:	4b31      	ldr	r3, [pc, #196]	@ (801614c <tcp_rexmit_rto_prepare+0xd4>)
 8016088:	f240 6263 	movw	r2, #1635	@ 0x663
 801608c:	4930      	ldr	r1, [pc, #192]	@ (8016150 <tcp_rexmit_rto_prepare+0xd8>)
 801608e:	4831      	ldr	r0, [pc, #196]	@ (8016154 <tcp_rexmit_rto_prepare+0xdc>)
 8016090:	f004 f9fc 	bl	801a48c <iprintf>

  if (pcb->unacked == NULL) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016098:	2b00      	cmp	r3, #0
 801609a:	d102      	bne.n	80160a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801609c:	f06f 0305 	mvn.w	r3, #5
 80160a0:	e050      	b.n	8016144 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160a6:	60fb      	str	r3, [r7, #12]
 80160a8:	e00b      	b.n	80160c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	f7ff fee4 	bl	8015e78 <tcp_output_segment_busy>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d002      	beq.n	80160bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80160b6:	f06f 0305 	mvn.w	r3, #5
 80160ba:	e043      	b.n	8016144 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	60fb      	str	r3, [r7, #12]
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d1ef      	bne.n	80160aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	f7ff fed4 	bl	8015e78 <tcp_output_segment_busy>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d002      	beq.n	80160dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80160d6:	f06f 0305 	mvn.w	r3, #5
 80160da:	e033      	b.n	8016144 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	8b5b      	ldrh	r3, [r3, #26]
 80160f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80160fa:	b29a      	uxth	r2, r3
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	68db      	ldr	r3, [r3, #12]
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	4618      	mov	r0, r3
 8016108:	f7f8 fde6 	bl	800ecd8 <lwip_htonl>
 801610c:	4604      	mov	r4, r0
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	891b      	ldrh	r3, [r3, #8]
 8016112:	461d      	mov	r5, r3
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	899b      	ldrh	r3, [r3, #12]
 801611a:	b29b      	uxth	r3, r3
 801611c:	4618      	mov	r0, r3
 801611e:	f7f8 fdc5 	bl	800ecac <lwip_htons>
 8016122:	4603      	mov	r3, r0
 8016124:	b2db      	uxtb	r3, r3
 8016126:	f003 0303 	and.w	r3, r3, #3
 801612a:	2b00      	cmp	r3, #0
 801612c:	d001      	beq.n	8016132 <tcp_rexmit_rto_prepare+0xba>
 801612e:	2301      	movs	r3, #1
 8016130:	e000      	b.n	8016134 <tcp_rexmit_rto_prepare+0xbc>
 8016132:	2300      	movs	r3, #0
 8016134:	442b      	add	r3, r5
 8016136:	18e2      	adds	r2, r4, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2200      	movs	r2, #0
 8016140:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016142:	2300      	movs	r3, #0
}
 8016144:	4618      	mov	r0, r3
 8016146:	3710      	adds	r7, #16
 8016148:	46bd      	mov	sp, r7
 801614a:	bdb0      	pop	{r4, r5, r7, pc}
 801614c:	0801e08c 	.word	0x0801e08c
 8016150:	0801e6c8 	.word	0x0801e6c8
 8016154:	0801e0e0 	.word	0x0801e0e0

08016158 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d106      	bne.n	8016174 <tcp_rexmit_rto_commit+0x1c>
 8016166:	4b0d      	ldr	r3, [pc, #52]	@ (801619c <tcp_rexmit_rto_commit+0x44>)
 8016168:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801616c:	490c      	ldr	r1, [pc, #48]	@ (80161a0 <tcp_rexmit_rto_commit+0x48>)
 801616e:	480d      	ldr	r0, [pc, #52]	@ (80161a4 <tcp_rexmit_rto_commit+0x4c>)
 8016170:	f004 f98c 	bl	801a48c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801617a:	2bff      	cmp	r3, #255	@ 0xff
 801617c:	d007      	beq.n	801618e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016184:	3301      	adds	r3, #1
 8016186:	b2da      	uxtb	r2, r3
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff fc7e 	bl	8015a90 <tcp_output>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	0801e08c 	.word	0x0801e08c
 80161a0:	0801e6ec 	.word	0x0801e6ec
 80161a4:	0801e0e0 	.word	0x0801e0e0

080161a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d106      	bne.n	80161c4 <tcp_rexmit_rto+0x1c>
 80161b6:	4b0a      	ldr	r3, [pc, #40]	@ (80161e0 <tcp_rexmit_rto+0x38>)
 80161b8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80161bc:	4909      	ldr	r1, [pc, #36]	@ (80161e4 <tcp_rexmit_rto+0x3c>)
 80161be:	480a      	ldr	r0, [pc, #40]	@ (80161e8 <tcp_rexmit_rto+0x40>)
 80161c0:	f004 f964 	bl	801a48c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7ff ff57 	bl	8016078 <tcp_rexmit_rto_prepare>
 80161ca:	4603      	mov	r3, r0
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d102      	bne.n	80161d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff ffc1 	bl	8016158 <tcp_rexmit_rto_commit>
  }
}
 80161d6:	bf00      	nop
 80161d8:	3708      	adds	r7, #8
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	0801e08c 	.word	0x0801e08c
 80161e4:	0801e710 	.word	0x0801e710
 80161e8:	0801e0e0 	.word	0x0801e0e0

080161ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80161ec:	b590      	push	{r4, r7, lr}
 80161ee:	b085      	sub	sp, #20
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d106      	bne.n	8016208 <tcp_rexmit+0x1c>
 80161fa:	4b2f      	ldr	r3, [pc, #188]	@ (80162b8 <tcp_rexmit+0xcc>)
 80161fc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8016200:	492e      	ldr	r1, [pc, #184]	@ (80162bc <tcp_rexmit+0xd0>)
 8016202:	482f      	ldr	r0, [pc, #188]	@ (80162c0 <tcp_rexmit+0xd4>)
 8016204:	f004 f942 	bl	801a48c <iprintf>

  if (pcb->unacked == NULL) {
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801620c:	2b00      	cmp	r3, #0
 801620e:	d102      	bne.n	8016216 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016210:	f06f 0305 	mvn.w	r3, #5
 8016214:	e04c      	b.n	80162b0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801621a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801621c:	68b8      	ldr	r0, [r7, #8]
 801621e:	f7ff fe2b 	bl	8015e78 <tcp_output_segment_busy>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d002      	beq.n	801622e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016228:	f06f 0305 	mvn.w	r3, #5
 801622c:	e040      	b.n	80162b0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	336c      	adds	r3, #108	@ 0x6c
 801623a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801623c:	e002      	b.n	8016244 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d011      	beq.n	8016270 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	4618      	mov	r0, r3
 8016256:	f7f8 fd3f 	bl	800ecd8 <lwip_htonl>
 801625a:	4604      	mov	r4, r0
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	4618      	mov	r0, r3
 8016264:	f7f8 fd38 	bl	800ecd8 <lwip_htonl>
 8016268:	4603      	mov	r3, r0
 801626a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801626c:	2b00      	cmp	r3, #0
 801626e:	dbe6      	blt.n	801623e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	68ba      	ldr	r2, [r7, #8]
 801627c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d103      	bne.n	801628e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016294:	2bff      	cmp	r3, #255	@ 0xff
 8016296:	d007      	beq.n	80162a8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801629e:	3301      	adds	r3, #1
 80162a0:	b2da      	uxtb	r2, r3
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80162ae:	2300      	movs	r3, #0
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd90      	pop	{r4, r7, pc}
 80162b8:	0801e08c 	.word	0x0801e08c
 80162bc:	0801e72c 	.word	0x0801e72c
 80162c0:	0801e0e0 	.word	0x0801e0e0

080162c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d106      	bne.n	80162e0 <tcp_rexmit_fast+0x1c>
 80162d2:	4b2a      	ldr	r3, [pc, #168]	@ (801637c <tcp_rexmit_fast+0xb8>)
 80162d4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80162d8:	4929      	ldr	r1, [pc, #164]	@ (8016380 <tcp_rexmit_fast+0xbc>)
 80162da:	482a      	ldr	r0, [pc, #168]	@ (8016384 <tcp_rexmit_fast+0xc0>)
 80162dc:	f004 f8d6 	bl	801a48c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d044      	beq.n	8016372 <tcp_rexmit_fast+0xae>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	8b5b      	ldrh	r3, [r3, #26]
 80162ec:	f003 0304 	and.w	r3, r3, #4
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d13e      	bne.n	8016372 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f7ff ff79 	bl	80161ec <tcp_rexmit>
 80162fa:	4603      	mov	r3, r0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d138      	bne.n	8016372 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801630c:	4293      	cmp	r3, r2
 801630e:	bf28      	it	cs
 8016310:	4613      	movcs	r3, r2
 8016312:	b29b      	uxth	r3, r3
 8016314:	0fda      	lsrs	r2, r3, #31
 8016316:	4413      	add	r3, r2
 8016318:	105b      	asrs	r3, r3, #1
 801631a:	b29a      	uxth	r2, r3
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016328:	461a      	mov	r2, r3
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	429a      	cmp	r2, r3
 8016332:	d206      	bcs.n	8016342 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016338:	005b      	lsls	r3, r3, #1
 801633a:	b29a      	uxth	r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801634c:	4619      	mov	r1, r3
 801634e:	0049      	lsls	r1, r1, #1
 8016350:	440b      	add	r3, r1
 8016352:	b29b      	uxth	r3, r3
 8016354:	4413      	add	r3, r2
 8016356:	b29a      	uxth	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	8b5b      	ldrh	r3, [r3, #26]
 8016362:	f043 0304 	orr.w	r3, r3, #4
 8016366:	b29a      	uxth	r2, r3
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2200      	movs	r2, #0
 8016370:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8016372:	bf00      	nop
 8016374:	3708      	adds	r7, #8
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}
 801637a:	bf00      	nop
 801637c:	0801e08c 	.word	0x0801e08c
 8016380:	0801e744 	.word	0x0801e744
 8016384:	0801e0e0 	.word	0x0801e0e0

08016388 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b086      	sub	sp, #24
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	607b      	str	r3, [r7, #4]
 8016392:	460b      	mov	r3, r1
 8016394:	817b      	strh	r3, [r7, #10]
 8016396:	4613      	mov	r3, r2
 8016398:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801639a:	897a      	ldrh	r2, [r7, #10]
 801639c:	893b      	ldrh	r3, [r7, #8]
 801639e:	4413      	add	r3, r2
 80163a0:	b29b      	uxth	r3, r3
 80163a2:	3314      	adds	r3, #20
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80163aa:	4619      	mov	r1, r3
 80163ac:	2022      	movs	r0, #34	@ 0x22
 80163ae:	f7f9 fd59 	bl	800fe64 <pbuf_alloc>
 80163b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d04d      	beq.n	8016456 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80163ba:	897b      	ldrh	r3, [r7, #10]
 80163bc:	3313      	adds	r3, #19
 80163be:	697a      	ldr	r2, [r7, #20]
 80163c0:	8952      	ldrh	r2, [r2, #10]
 80163c2:	4293      	cmp	r3, r2
 80163c4:	db06      	blt.n	80163d4 <tcp_output_alloc_header_common+0x4c>
 80163c6:	4b26      	ldr	r3, [pc, #152]	@ (8016460 <tcp_output_alloc_header_common+0xd8>)
 80163c8:	f240 7223 	movw	r2, #1827	@ 0x723
 80163cc:	4925      	ldr	r1, [pc, #148]	@ (8016464 <tcp_output_alloc_header_common+0xdc>)
 80163ce:	4826      	ldr	r0, [pc, #152]	@ (8016468 <tcp_output_alloc_header_common+0xe0>)
 80163d0:	f004 f85c 	bl	801a48c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80163da:	8c3b      	ldrh	r3, [r7, #32]
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f8 fc65 	bl	800ecac <lwip_htons>
 80163e2:	4603      	mov	r3, r0
 80163e4:	461a      	mov	r2, r3
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80163ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7f8 fc5d 	bl	800ecac <lwip_htons>
 80163f2:	4603      	mov	r3, r0
 80163f4:	461a      	mov	r2, r3
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80163fa:	693b      	ldr	r3, [r7, #16]
 80163fc:	687a      	ldr	r2, [r7, #4]
 80163fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7f8 fc69 	bl	800ecd8 <lwip_htonl>
 8016406:	4602      	mov	r2, r0
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801640c:	897b      	ldrh	r3, [r7, #10]
 801640e:	089b      	lsrs	r3, r3, #2
 8016410:	b29b      	uxth	r3, r3
 8016412:	3305      	adds	r3, #5
 8016414:	b29b      	uxth	r3, r3
 8016416:	031b      	lsls	r3, r3, #12
 8016418:	b29a      	uxth	r2, r3
 801641a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801641e:	b29b      	uxth	r3, r3
 8016420:	4313      	orrs	r3, r2
 8016422:	b29b      	uxth	r3, r3
 8016424:	4618      	mov	r0, r3
 8016426:	f7f8 fc41 	bl	800ecac <lwip_htons>
 801642a:	4603      	mov	r3, r0
 801642c:	461a      	mov	r2, r3
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016432:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016434:	4618      	mov	r0, r3
 8016436:	f7f8 fc39 	bl	800ecac <lwip_htons>
 801643a:	4603      	mov	r3, r0
 801643c:	461a      	mov	r2, r3
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	2200      	movs	r2, #0
 8016446:	741a      	strb	r2, [r3, #16]
 8016448:	2200      	movs	r2, #0
 801644a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	2200      	movs	r2, #0
 8016450:	749a      	strb	r2, [r3, #18]
 8016452:	2200      	movs	r2, #0
 8016454:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016456:	697b      	ldr	r3, [r7, #20]
}
 8016458:	4618      	mov	r0, r3
 801645a:	3718      	adds	r7, #24
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	0801e08c 	.word	0x0801e08c
 8016464:	0801e764 	.word	0x0801e764
 8016468:	0801e0e0 	.word	0x0801e0e0

0801646c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801646c:	b5b0      	push	{r4, r5, r7, lr}
 801646e:	b08a      	sub	sp, #40	@ 0x28
 8016470:	af04      	add	r7, sp, #16
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	607b      	str	r3, [r7, #4]
 8016476:	460b      	mov	r3, r1
 8016478:	817b      	strh	r3, [r7, #10]
 801647a:	4613      	mov	r3, r2
 801647c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d106      	bne.n	8016492 <tcp_output_alloc_header+0x26>
 8016484:	4b15      	ldr	r3, [pc, #84]	@ (80164dc <tcp_output_alloc_header+0x70>)
 8016486:	f240 7242 	movw	r2, #1858	@ 0x742
 801648a:	4915      	ldr	r1, [pc, #84]	@ (80164e0 <tcp_output_alloc_header+0x74>)
 801648c:	4815      	ldr	r0, [pc, #84]	@ (80164e4 <tcp_output_alloc_header+0x78>)
 801648e:	f003 fffd 	bl	801a48c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	8adb      	ldrh	r3, [r3, #22]
 801649a:	68fa      	ldr	r2, [r7, #12]
 801649c:	8b12      	ldrh	r2, [r2, #24]
 801649e:	68f9      	ldr	r1, [r7, #12]
 80164a0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80164a2:	893d      	ldrh	r5, [r7, #8]
 80164a4:	897c      	ldrh	r4, [r7, #10]
 80164a6:	9103      	str	r1, [sp, #12]
 80164a8:	2110      	movs	r1, #16
 80164aa:	9102      	str	r1, [sp, #8]
 80164ac:	9201      	str	r2, [sp, #4]
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	462a      	mov	r2, r5
 80164b4:	4621      	mov	r1, r4
 80164b6:	f7ff ff67 	bl	8016388 <tcp_output_alloc_header_common>
 80164ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80164bc:	697b      	ldr	r3, [r7, #20]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d006      	beq.n	80164d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80164ca:	441a      	add	r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80164d0:	697b      	ldr	r3, [r7, #20]
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bdb0      	pop	{r4, r5, r7, pc}
 80164da:	bf00      	nop
 80164dc:	0801e08c 	.word	0x0801e08c
 80164e0:	0801e794 	.word	0x0801e794
 80164e4:	0801e0e0 	.word	0x0801e0e0

080164e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b088      	sub	sp, #32
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	60b9      	str	r1, [r7, #8]
 80164f2:	4611      	mov	r1, r2
 80164f4:	461a      	mov	r2, r3
 80164f6:	460b      	mov	r3, r1
 80164f8:	71fb      	strb	r3, [r7, #7]
 80164fa:	4613      	mov	r3, r2
 80164fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80164fe:	2300      	movs	r3, #0
 8016500:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d106      	bne.n	8016516 <tcp_output_fill_options+0x2e>
 8016508:	4b12      	ldr	r3, [pc, #72]	@ (8016554 <tcp_output_fill_options+0x6c>)
 801650a:	f240 7256 	movw	r2, #1878	@ 0x756
 801650e:	4912      	ldr	r1, [pc, #72]	@ (8016558 <tcp_output_fill_options+0x70>)
 8016510:	4812      	ldr	r0, [pc, #72]	@ (801655c <tcp_output_fill_options+0x74>)
 8016512:	f003 ffbb 	bl	801a48c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	3314      	adds	r3, #20
 8016520:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016522:	8bfb      	ldrh	r3, [r7, #30]
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	461a      	mov	r2, r3
 8016528:	79fb      	ldrb	r3, [r7, #7]
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	f003 0304 	and.w	r3, r3, #4
 8016530:	4413      	add	r3, r2
 8016532:	3314      	adds	r3, #20
 8016534:	69ba      	ldr	r2, [r7, #24]
 8016536:	4413      	add	r3, r2
 8016538:	697a      	ldr	r2, [r7, #20]
 801653a:	429a      	cmp	r2, r3
 801653c:	d006      	beq.n	801654c <tcp_output_fill_options+0x64>
 801653e:	4b05      	ldr	r3, [pc, #20]	@ (8016554 <tcp_output_fill_options+0x6c>)
 8016540:	f240 7275 	movw	r2, #1909	@ 0x775
 8016544:	4906      	ldr	r1, [pc, #24]	@ (8016560 <tcp_output_fill_options+0x78>)
 8016546:	4805      	ldr	r0, [pc, #20]	@ (801655c <tcp_output_fill_options+0x74>)
 8016548:	f003 ffa0 	bl	801a48c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801654c:	bf00      	nop
 801654e:	3720      	adds	r7, #32
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	0801e08c 	.word	0x0801e08c
 8016558:	0801e7bc 	.word	0x0801e7bc
 801655c:	0801e0e0 	.word	0x0801e0e0
 8016560:	0801e6b4 	.word	0x0801e6b4

08016564 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b08a      	sub	sp, #40	@ 0x28
 8016568:	af04      	add	r7, sp, #16
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
 8016570:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d106      	bne.n	8016586 <tcp_output_control_segment+0x22>
 8016578:	4b1c      	ldr	r3, [pc, #112]	@ (80165ec <tcp_output_control_segment+0x88>)
 801657a:	f240 7287 	movw	r2, #1927	@ 0x787
 801657e:	491c      	ldr	r1, [pc, #112]	@ (80165f0 <tcp_output_control_segment+0x8c>)
 8016580:	481c      	ldr	r0, [pc, #112]	@ (80165f4 <tcp_output_control_segment+0x90>)
 8016582:	f003 ff83 	bl	801a48c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	6879      	ldr	r1, [r7, #4]
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f7fe faea 	bl	8014b64 <tcp_route>
 8016590:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d102      	bne.n	801659e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016598:	23fc      	movs	r3, #252	@ 0xfc
 801659a:	75fb      	strb	r3, [r7, #23]
 801659c:	e01c      	b.n	80165d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d006      	beq.n	80165b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	7adb      	ldrb	r3, [r3, #11]
 80165a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	7a9b      	ldrb	r3, [r3, #10]
 80165ae:	757b      	strb	r3, [r7, #21]
 80165b0:	e003      	b.n	80165ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80165b2:	23ff      	movs	r3, #255	@ 0xff
 80165b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80165ba:	7dba      	ldrb	r2, [r7, #22]
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	9302      	str	r3, [sp, #8]
 80165c0:	2306      	movs	r3, #6
 80165c2:	9301      	str	r3, [sp, #4]
 80165c4:	7d7b      	ldrb	r3, [r7, #21]
 80165c6:	9300      	str	r3, [sp, #0]
 80165c8:	4613      	mov	r3, r2
 80165ca:	683a      	ldr	r2, [r7, #0]
 80165cc:	6879      	ldr	r1, [r7, #4]
 80165ce:	68b8      	ldr	r0, [r7, #8]
 80165d0:	f001 ff6e 	bl	80184b0 <ip4_output_if>
 80165d4:	4603      	mov	r3, r0
 80165d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80165d8:	68b8      	ldr	r0, [r7, #8]
 80165da:	f7f9 ff27 	bl	801042c <pbuf_free>
  return err;
 80165de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3718      	adds	r7, #24
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	0801e08c 	.word	0x0801e08c
 80165f0:	0801e7e4 	.word	0x0801e7e4
 80165f4:	0801e0e0 	.word	0x0801e0e0

080165f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80165f8:	b590      	push	{r4, r7, lr}
 80165fa:	b08b      	sub	sp, #44	@ 0x2c
 80165fc:	af04      	add	r7, sp, #16
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	607a      	str	r2, [r7, #4]
 8016604:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d106      	bne.n	801661a <tcp_rst+0x22>
 801660c:	4b1f      	ldr	r3, [pc, #124]	@ (801668c <tcp_rst+0x94>)
 801660e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8016612:	491f      	ldr	r1, [pc, #124]	@ (8016690 <tcp_rst+0x98>)
 8016614:	481f      	ldr	r0, [pc, #124]	@ (8016694 <tcp_rst+0x9c>)
 8016616:	f003 ff39 	bl	801a48c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801661c:	2b00      	cmp	r3, #0
 801661e:	d106      	bne.n	801662e <tcp_rst+0x36>
 8016620:	4b1a      	ldr	r3, [pc, #104]	@ (801668c <tcp_rst+0x94>)
 8016622:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8016626:	491c      	ldr	r1, [pc, #112]	@ (8016698 <tcp_rst+0xa0>)
 8016628:	481a      	ldr	r0, [pc, #104]	@ (8016694 <tcp_rst+0x9c>)
 801662a:	f003 ff2f 	bl	801a48c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801662e:	2300      	movs	r3, #0
 8016630:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016632:	f246 0308 	movw	r3, #24584	@ 0x6008
 8016636:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016638:	7dfb      	ldrb	r3, [r7, #23]
 801663a:	b29c      	uxth	r4, r3
 801663c:	68b8      	ldr	r0, [r7, #8]
 801663e:	f7f8 fb4b 	bl	800ecd8 <lwip_htonl>
 8016642:	4602      	mov	r2, r0
 8016644:	8abb      	ldrh	r3, [r7, #20]
 8016646:	9303      	str	r3, [sp, #12]
 8016648:	2314      	movs	r3, #20
 801664a:	9302      	str	r3, [sp, #8]
 801664c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801664e:	9301      	str	r3, [sp, #4]
 8016650:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016652:	9300      	str	r3, [sp, #0]
 8016654:	4613      	mov	r3, r2
 8016656:	2200      	movs	r2, #0
 8016658:	4621      	mov	r1, r4
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f7ff fe94 	bl	8016388 <tcp_output_alloc_header_common>
 8016660:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d00c      	beq.n	8016682 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016668:	7dfb      	ldrb	r3, [r7, #23]
 801666a:	2200      	movs	r2, #0
 801666c:	6939      	ldr	r1, [r7, #16]
 801666e:	68f8      	ldr	r0, [r7, #12]
 8016670:	f7ff ff3a 	bl	80164e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016676:	683a      	ldr	r2, [r7, #0]
 8016678:	6939      	ldr	r1, [r7, #16]
 801667a:	68f8      	ldr	r0, [r7, #12]
 801667c:	f7ff ff72 	bl	8016564 <tcp_output_control_segment>
 8016680:	e000      	b.n	8016684 <tcp_rst+0x8c>
    return;
 8016682:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016684:	371c      	adds	r7, #28
 8016686:	46bd      	mov	sp, r7
 8016688:	bd90      	pop	{r4, r7, pc}
 801668a:	bf00      	nop
 801668c:	0801e08c 	.word	0x0801e08c
 8016690:	0801e810 	.word	0x0801e810
 8016694:	0801e0e0 	.word	0x0801e0e0
 8016698:	0801e82c 	.word	0x0801e82c

0801669c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801669c:	b590      	push	{r4, r7, lr}
 801669e:	b087      	sub	sp, #28
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80166a8:	2300      	movs	r3, #0
 80166aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d106      	bne.n	80166c0 <tcp_send_empty_ack+0x24>
 80166b2:	4b28      	ldr	r3, [pc, #160]	@ (8016754 <tcp_send_empty_ack+0xb8>)
 80166b4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80166b8:	4927      	ldr	r1, [pc, #156]	@ (8016758 <tcp_send_empty_ack+0xbc>)
 80166ba:	4828      	ldr	r0, [pc, #160]	@ (801675c <tcp_send_empty_ack+0xc0>)
 80166bc:	f003 fee6 	bl	801a48c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80166c0:	7dfb      	ldrb	r3, [r7, #23]
 80166c2:	009b      	lsls	r3, r3, #2
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	f003 0304 	and.w	r3, r3, #4
 80166ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80166cc:	7d7b      	ldrb	r3, [r7, #21]
 80166ce:	b29c      	uxth	r4, r3
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7f8 faff 	bl	800ecd8 <lwip_htonl>
 80166da:	4603      	mov	r3, r0
 80166dc:	2200      	movs	r2, #0
 80166de:	4621      	mov	r1, r4
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f7ff fec3 	bl	801646c <tcp_output_alloc_header>
 80166e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d109      	bne.n	8016702 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	8b5b      	ldrh	r3, [r3, #26]
 80166f2:	f043 0303 	orr.w	r3, r3, #3
 80166f6:	b29a      	uxth	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80166fc:	f06f 0301 	mvn.w	r3, #1
 8016700:	e023      	b.n	801674a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016702:	7dbb      	ldrb	r3, [r7, #22]
 8016704:	7dfa      	ldrb	r2, [r7, #23]
 8016706:	6939      	ldr	r1, [r7, #16]
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7ff feed 	bl	80164e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	3304      	adds	r3, #4
 8016714:	6939      	ldr	r1, [r7, #16]
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7ff ff24 	bl	8016564 <tcp_output_control_segment>
 801671c:	4603      	mov	r3, r0
 801671e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d007      	beq.n	8016738 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	8b5b      	ldrh	r3, [r3, #26]
 801672c:	f043 0303 	orr.w	r3, r3, #3
 8016730:	b29a      	uxth	r2, r3
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	835a      	strh	r2, [r3, #26]
 8016736:	e006      	b.n	8016746 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	8b5b      	ldrh	r3, [r3, #26]
 801673c:	f023 0303 	bic.w	r3, r3, #3
 8016740:	b29a      	uxth	r2, r3
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801674a:	4618      	mov	r0, r3
 801674c:	371c      	adds	r7, #28
 801674e:	46bd      	mov	sp, r7
 8016750:	bd90      	pop	{r4, r7, pc}
 8016752:	bf00      	nop
 8016754:	0801e08c 	.word	0x0801e08c
 8016758:	0801e848 	.word	0x0801e848
 801675c:	0801e0e0 	.word	0x0801e0e0

08016760 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016760:	b590      	push	{r4, r7, lr}
 8016762:	b087      	sub	sp, #28
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016768:	2300      	movs	r3, #0
 801676a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d106      	bne.n	8016780 <tcp_keepalive+0x20>
 8016772:	4b18      	ldr	r3, [pc, #96]	@ (80167d4 <tcp_keepalive+0x74>)
 8016774:	f640 0224 	movw	r2, #2084	@ 0x824
 8016778:	4917      	ldr	r1, [pc, #92]	@ (80167d8 <tcp_keepalive+0x78>)
 801677a:	4818      	ldr	r0, [pc, #96]	@ (80167dc <tcp_keepalive+0x7c>)
 801677c:	f003 fe86 	bl	801a48c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016780:	7dfb      	ldrb	r3, [r7, #23]
 8016782:	b29c      	uxth	r4, r3
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016788:	3b01      	subs	r3, #1
 801678a:	4618      	mov	r0, r3
 801678c:	f7f8 faa4 	bl	800ecd8 <lwip_htonl>
 8016790:	4603      	mov	r3, r0
 8016792:	2200      	movs	r2, #0
 8016794:	4621      	mov	r1, r4
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7ff fe68 	bl	801646c <tcp_output_alloc_header>
 801679c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d102      	bne.n	80167aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80167a4:	f04f 33ff 	mov.w	r3, #4294967295
 80167a8:	e010      	b.n	80167cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80167aa:	7dfb      	ldrb	r3, [r7, #23]
 80167ac:	2200      	movs	r2, #0
 80167ae:	6939      	ldr	r1, [r7, #16]
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	f7ff fe99 	bl	80164e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3304      	adds	r3, #4
 80167bc:	6939      	ldr	r1, [r7, #16]
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f7ff fed0 	bl	8016564 <tcp_output_control_segment>
 80167c4:	4603      	mov	r3, r0
 80167c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80167c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	371c      	adds	r7, #28
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd90      	pop	{r4, r7, pc}
 80167d4:	0801e08c 	.word	0x0801e08c
 80167d8:	0801e868 	.word	0x0801e868
 80167dc:	0801e0e0 	.word	0x0801e0e0

080167e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80167e0:	b590      	push	{r4, r7, lr}
 80167e2:	b08b      	sub	sp, #44	@ 0x2c
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80167e8:	2300      	movs	r3, #0
 80167ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d106      	bne.n	8016802 <tcp_zero_window_probe+0x22>
 80167f4:	4b4c      	ldr	r3, [pc, #304]	@ (8016928 <tcp_zero_window_probe+0x148>)
 80167f6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80167fa:	494c      	ldr	r1, [pc, #304]	@ (801692c <tcp_zero_window_probe+0x14c>)
 80167fc:	484c      	ldr	r0, [pc, #304]	@ (8016930 <tcp_zero_window_probe+0x150>)
 80167fe:	f003 fe45 	bl	801a48c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016806:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016808:	6a3b      	ldr	r3, [r7, #32]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d101      	bne.n	8016812 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	e086      	b.n	8016920 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016818:	2bff      	cmp	r3, #255	@ 0xff
 801681a:	d007      	beq.n	801682c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016822:	3301      	adds	r3, #1
 8016824:	b2da      	uxtb	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801682c:	6a3b      	ldr	r3, [r7, #32]
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	899b      	ldrh	r3, [r3, #12]
 8016832:	b29b      	uxth	r3, r3
 8016834:	4618      	mov	r0, r3
 8016836:	f7f8 fa39 	bl	800ecac <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	b2db      	uxtb	r3, r3
 801683e:	f003 0301 	and.w	r3, r3, #1
 8016842:	2b00      	cmp	r3, #0
 8016844:	d005      	beq.n	8016852 <tcp_zero_window_probe+0x72>
 8016846:	6a3b      	ldr	r3, [r7, #32]
 8016848:	891b      	ldrh	r3, [r3, #8]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d101      	bne.n	8016852 <tcp_zero_window_probe+0x72>
 801684e:	2301      	movs	r3, #1
 8016850:	e000      	b.n	8016854 <tcp_zero_window_probe+0x74>
 8016852:	2300      	movs	r3, #0
 8016854:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016856:	7ffb      	ldrb	r3, [r7, #31]
 8016858:	2b00      	cmp	r3, #0
 801685a:	bf0c      	ite	eq
 801685c:	2301      	moveq	r3, #1
 801685e:	2300      	movne	r3, #0
 8016860:	b2db      	uxtb	r3, r3
 8016862:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016868:	b299      	uxth	r1, r3
 801686a:	6a3b      	ldr	r3, [r7, #32]
 801686c:	68db      	ldr	r3, [r3, #12]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	8bba      	ldrh	r2, [r7, #28]
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	f7ff fdfa 	bl	801646c <tcp_output_alloc_header>
 8016878:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d102      	bne.n	8016886 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016880:	f04f 33ff 	mov.w	r3, #4294967295
 8016884:	e04c      	b.n	8016920 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016886:	69bb      	ldr	r3, [r7, #24]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801688c:	7ffb      	ldrb	r3, [r7, #31]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d011      	beq.n	80168b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	899b      	ldrh	r3, [r3, #12]
 8016896:	b29b      	uxth	r3, r3
 8016898:	b21b      	sxth	r3, r3
 801689a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801689e:	b21c      	sxth	r4, r3
 80168a0:	2011      	movs	r0, #17
 80168a2:	f7f8 fa03 	bl	800ecac <lwip_htons>
 80168a6:	4603      	mov	r3, r0
 80168a8:	b21b      	sxth	r3, r3
 80168aa:	4323      	orrs	r3, r4
 80168ac:	b21b      	sxth	r3, r3
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	819a      	strh	r2, [r3, #12]
 80168b4:	e010      	b.n	80168d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80168b6:	69bb      	ldr	r3, [r7, #24]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	3314      	adds	r3, #20
 80168bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80168be:	6a3b      	ldr	r3, [r7, #32]
 80168c0:	6858      	ldr	r0, [r3, #4]
 80168c2:	6a3b      	ldr	r3, [r7, #32]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	891a      	ldrh	r2, [r3, #8]
 80168c8:	6a3b      	ldr	r3, [r7, #32]
 80168ca:	891b      	ldrh	r3, [r3, #8]
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	2201      	movs	r2, #1
 80168d2:	6939      	ldr	r1, [r7, #16]
 80168d4:	f7f9 ffa0 	bl	8010818 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80168d8:	6a3b      	ldr	r3, [r7, #32]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	4618      	mov	r0, r3
 80168e0:	f7f8 f9fa 	bl	800ecd8 <lwip_htonl>
 80168e4:	4603      	mov	r3, r0
 80168e6:	3301      	adds	r3, #1
 80168e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	1ad3      	subs	r3, r2, r3
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	da02      	bge.n	80168fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	68fa      	ldr	r2, [r7, #12]
 80168fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80168fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016900:	2200      	movs	r2, #0
 8016902:	69b9      	ldr	r1, [r7, #24]
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7ff fdef 	bl	80164e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3304      	adds	r3, #4
 8016910:	69b9      	ldr	r1, [r7, #24]
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f7ff fe26 	bl	8016564 <tcp_output_control_segment>
 8016918:	4603      	mov	r3, r0
 801691a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801691c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016920:	4618      	mov	r0, r3
 8016922:	372c      	adds	r7, #44	@ 0x2c
 8016924:	46bd      	mov	sp, r7
 8016926:	bd90      	pop	{r4, r7, pc}
 8016928:	0801e08c 	.word	0x0801e08c
 801692c:	0801e884 	.word	0x0801e884
 8016930:	0801e0e0 	.word	0x0801e0e0

08016934 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801693c:	f7fa f85a 	bl	80109f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016940:	4b0a      	ldr	r3, [pc, #40]	@ (801696c <tcpip_tcp_timer+0x38>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d103      	bne.n	8016950 <tcpip_tcp_timer+0x1c>
 8016948:	4b09      	ldr	r3, [pc, #36]	@ (8016970 <tcpip_tcp_timer+0x3c>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d005      	beq.n	801695c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016950:	2200      	movs	r2, #0
 8016952:	4908      	ldr	r1, [pc, #32]	@ (8016974 <tcpip_tcp_timer+0x40>)
 8016954:	20fa      	movs	r0, #250	@ 0xfa
 8016956:	f000 f8f3 	bl	8016b40 <sys_timeout>
 801695a:	e003      	b.n	8016964 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801695c:	4b06      	ldr	r3, [pc, #24]	@ (8016978 <tcpip_tcp_timer+0x44>)
 801695e:	2200      	movs	r2, #0
 8016960:	601a      	str	r2, [r3, #0]
  }
}
 8016962:	bf00      	nop
 8016964:	bf00      	nop
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	2000c77c 	.word	0x2000c77c
 8016970:	2000c780 	.word	0x2000c780
 8016974:	08016935 	.word	0x08016935
 8016978:	2000c7c8 	.word	0x2000c7c8

0801697c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016980:	4b0a      	ldr	r3, [pc, #40]	@ (80169ac <tcp_timer_needed+0x30>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d10f      	bne.n	80169a8 <tcp_timer_needed+0x2c>
 8016988:	4b09      	ldr	r3, [pc, #36]	@ (80169b0 <tcp_timer_needed+0x34>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d103      	bne.n	8016998 <tcp_timer_needed+0x1c>
 8016990:	4b08      	ldr	r3, [pc, #32]	@ (80169b4 <tcp_timer_needed+0x38>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d007      	beq.n	80169a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016998:	4b04      	ldr	r3, [pc, #16]	@ (80169ac <tcp_timer_needed+0x30>)
 801699a:	2201      	movs	r2, #1
 801699c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801699e:	2200      	movs	r2, #0
 80169a0:	4905      	ldr	r1, [pc, #20]	@ (80169b8 <tcp_timer_needed+0x3c>)
 80169a2:	20fa      	movs	r0, #250	@ 0xfa
 80169a4:	f000 f8cc 	bl	8016b40 <sys_timeout>
  }
}
 80169a8:	bf00      	nop
 80169aa:	bd80      	pop	{r7, pc}
 80169ac:	2000c7c8 	.word	0x2000c7c8
 80169b0:	2000c77c 	.word	0x2000c77c
 80169b4:	2000c780 	.word	0x2000c780
 80169b8:	08016935 	.word	0x08016935

080169bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b086      	sub	sp, #24
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80169c8:	200a      	movs	r0, #10
 80169ca:	f7f8 fe47 	bl	800f65c <memp_malloc>
 80169ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d109      	bne.n	80169ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d151      	bne.n	8016a80 <sys_timeout_abs+0xc4>
 80169dc:	4b2a      	ldr	r3, [pc, #168]	@ (8016a88 <sys_timeout_abs+0xcc>)
 80169de:	22be      	movs	r2, #190	@ 0xbe
 80169e0:	492a      	ldr	r1, [pc, #168]	@ (8016a8c <sys_timeout_abs+0xd0>)
 80169e2:	482b      	ldr	r0, [pc, #172]	@ (8016a90 <sys_timeout_abs+0xd4>)
 80169e4:	f003 fd52 	bl	801a48c <iprintf>
    return;
 80169e8:	e04a      	b.n	8016a80 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	2200      	movs	r2, #0
 80169ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80169f0:	693b      	ldr	r3, [r7, #16]
 80169f2:	68ba      	ldr	r2, [r7, #8]
 80169f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80169f6:	693b      	ldr	r3, [r7, #16]
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016a02:	4b24      	ldr	r3, [pc, #144]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d103      	bne.n	8016a12 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016a0a:	4a22      	ldr	r2, [pc, #136]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	6013      	str	r3, [r2, #0]
    return;
 8016a10:	e037      	b.n	8016a82 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	685a      	ldr	r2, [r3, #4]
 8016a16:	4b1f      	ldr	r3, [pc, #124]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	1ad3      	subs	r3, r2, r3
 8016a1e:	0fdb      	lsrs	r3, r3, #31
 8016a20:	f003 0301 	and.w	r3, r3, #1
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d007      	beq.n	8016a3a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016a32:	4a18      	ldr	r2, [pc, #96]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	6013      	str	r3, [r2, #0]
 8016a38:	e023      	b.n	8016a82 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016a3a:	4b16      	ldr	r3, [pc, #88]	@ (8016a94 <sys_timeout_abs+0xd8>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	617b      	str	r3, [r7, #20]
 8016a40:	e01a      	b.n	8016a78 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d00b      	beq.n	8016a62 <sys_timeout_abs+0xa6>
 8016a4a:	693b      	ldr	r3, [r7, #16]
 8016a4c:	685a      	ldr	r2, [r3, #4]
 8016a4e:	697b      	ldr	r3, [r7, #20]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	1ad3      	subs	r3, r2, r3
 8016a56:	0fdb      	lsrs	r3, r3, #31
 8016a58:	f003 0301 	and.w	r3, r3, #1
 8016a5c:	b2db      	uxtb	r3, r3
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d007      	beq.n	8016a72 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	693a      	ldr	r2, [r7, #16]
 8016a6e:	601a      	str	r2, [r3, #0]
        break;
 8016a70:	e007      	b.n	8016a82 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	617b      	str	r3, [r7, #20]
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d1e1      	bne.n	8016a42 <sys_timeout_abs+0x86>
 8016a7e:	e000      	b.n	8016a82 <sys_timeout_abs+0xc6>
    return;
 8016a80:	bf00      	nop
      }
    }
  }
}
 8016a82:	3718      	adds	r7, #24
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}
 8016a88:	0801e8a8 	.word	0x0801e8a8
 8016a8c:	0801e8dc 	.word	0x0801e8dc
 8016a90:	0801e91c 	.word	0x0801e91c
 8016a94:	2000c7c0 	.word	0x2000c7c0

08016a98 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	4798      	blx	r3

  now = sys_now();
 8016aaa:	f7f2 fcc5 	bl	8009438 <sys_now>
 8016aae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	681a      	ldr	r2, [r3, #0]
 8016ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8016af4 <lwip_cyclic_timer+0x5c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4413      	add	r3, r2
 8016aba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016abc:	68fa      	ldr	r2, [r7, #12]
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	0fdb      	lsrs	r3, r3, #31
 8016ac4:	f003 0301 	and.w	r3, r3, #1
 8016ac8:	b2db      	uxtb	r3, r3
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d009      	beq.n	8016ae2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	4413      	add	r3, r2
 8016ad6:	687a      	ldr	r2, [r7, #4]
 8016ad8:	4907      	ldr	r1, [pc, #28]	@ (8016af8 <lwip_cyclic_timer+0x60>)
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7ff ff6e 	bl	80169bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016ae0:	e004      	b.n	8016aec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	4904      	ldr	r1, [pc, #16]	@ (8016af8 <lwip_cyclic_timer+0x60>)
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f7ff ff68 	bl	80169bc <sys_timeout_abs>
}
 8016aec:	bf00      	nop
 8016aee:	3718      	adds	r7, #24
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}
 8016af4:	2000c7c4 	.word	0x2000c7c4
 8016af8:	08016a99 	.word	0x08016a99

08016afc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b02:	2301      	movs	r3, #1
 8016b04:	607b      	str	r3, [r7, #4]
 8016b06:	e00e      	b.n	8016b26 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016b08:	4a0b      	ldr	r2, [pc, #44]	@ (8016b38 <sys_timeouts_init+0x3c>)
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	00db      	lsls	r3, r3, #3
 8016b14:	4a08      	ldr	r2, [pc, #32]	@ (8016b38 <sys_timeouts_init+0x3c>)
 8016b16:	4413      	add	r3, r2
 8016b18:	461a      	mov	r2, r3
 8016b1a:	4908      	ldr	r1, [pc, #32]	@ (8016b3c <sys_timeouts_init+0x40>)
 8016b1c:	f000 f810 	bl	8016b40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	3301      	adds	r3, #1
 8016b24:	607b      	str	r3, [r7, #4]
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2b02      	cmp	r3, #2
 8016b2a:	d9ed      	bls.n	8016b08 <sys_timeouts_init+0xc>
  }
}
 8016b2c:	bf00      	nop
 8016b2e:	bf00      	nop
 8016b30:	3708      	adds	r7, #8
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	0801f51c 	.word	0x0801f51c
 8016b3c:	08016a99 	.word	0x08016a99

08016b40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b086      	sub	sp, #24
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	60f8      	str	r0, [r7, #12]
 8016b48:	60b9      	str	r1, [r7, #8]
 8016b4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016b52:	d306      	bcc.n	8016b62 <sys_timeout+0x22>
 8016b54:	4b0a      	ldr	r3, [pc, #40]	@ (8016b80 <sys_timeout+0x40>)
 8016b56:	f240 1229 	movw	r2, #297	@ 0x129
 8016b5a:	490a      	ldr	r1, [pc, #40]	@ (8016b84 <sys_timeout+0x44>)
 8016b5c:	480a      	ldr	r0, [pc, #40]	@ (8016b88 <sys_timeout+0x48>)
 8016b5e:	f003 fc95 	bl	801a48c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016b62:	f7f2 fc69 	bl	8009438 <sys_now>
 8016b66:	4602      	mov	r2, r0
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	4413      	add	r3, r2
 8016b6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	68b9      	ldr	r1, [r7, #8]
 8016b72:	6978      	ldr	r0, [r7, #20]
 8016b74:	f7ff ff22 	bl	80169bc <sys_timeout_abs>
#endif
}
 8016b78:	bf00      	nop
 8016b7a:	3718      	adds	r7, #24
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}
 8016b80:	0801e8a8 	.word	0x0801e8a8
 8016b84:	0801e944 	.word	0x0801e944
 8016b88:	0801e91c 	.word	0x0801e91c

08016b8c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016b92:	f7f2 fc51 	bl	8009438 <sys_now>
 8016b96:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016b98:	4b17      	ldr	r3, [pc, #92]	@ (8016bf8 <sys_check_timeouts+0x6c>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d022      	beq.n	8016bea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	1ad3      	subs	r3, r2, r3
 8016bac:	0fdb      	lsrs	r3, r3, #31
 8016bae:	f003 0301 	and.w	r3, r3, #1
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d11a      	bne.n	8016bee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8016bf8 <sys_check_timeouts+0x6c>)
 8016bbe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8016bfc <sys_check_timeouts+0x70>)
 8016bd2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016bd4:	68b9      	ldr	r1, [r7, #8]
 8016bd6:	200a      	movs	r0, #10
 8016bd8:	f7f8 fdb6 	bl	800f748 <memp_free>
    if (handler != NULL) {
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d0da      	beq.n	8016b98 <sys_check_timeouts+0xc>
      handler(arg);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6838      	ldr	r0, [r7, #0]
 8016be6:	4798      	blx	r3
  do {
 8016be8:	e7d6      	b.n	8016b98 <sys_check_timeouts+0xc>
      return;
 8016bea:	bf00      	nop
 8016bec:	e000      	b.n	8016bf0 <sys_check_timeouts+0x64>
      return;
 8016bee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016bf0:	3710      	adds	r7, #16
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	2000c7c0 	.word	0x2000c7c0
 8016bfc:	2000c7c4 	.word	0x2000c7c4

08016c00 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016c06:	4b16      	ldr	r3, [pc, #88]	@ (8016c60 <sys_timeouts_sleeptime+0x60>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d102      	bne.n	8016c14 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c12:	e020      	b.n	8016c56 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016c14:	f7f2 fc10 	bl	8009438 <sys_now>
 8016c18:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016c1a:	4b11      	ldr	r3, [pc, #68]	@ (8016c60 <sys_timeouts_sleeptime+0x60>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	685a      	ldr	r2, [r3, #4]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	0fdb      	lsrs	r3, r3, #31
 8016c26:	f003 0301 	and.w	r3, r3, #1
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016c30:	2300      	movs	r3, #0
 8016c32:	e010      	b.n	8016c56 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016c34:	4b0a      	ldr	r3, [pc, #40]	@ (8016c60 <sys_timeouts_sleeptime+0x60>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	685a      	ldr	r2, [r3, #4]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	1ad3      	subs	r3, r2, r3
 8016c3e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	da06      	bge.n	8016c54 <sys_timeouts_sleeptime+0x54>
 8016c46:	4b07      	ldr	r3, [pc, #28]	@ (8016c64 <sys_timeouts_sleeptime+0x64>)
 8016c48:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016c4c:	4906      	ldr	r1, [pc, #24]	@ (8016c68 <sys_timeouts_sleeptime+0x68>)
 8016c4e:	4807      	ldr	r0, [pc, #28]	@ (8016c6c <sys_timeouts_sleeptime+0x6c>)
 8016c50:	f003 fc1c 	bl	801a48c <iprintf>
    return ret;
 8016c54:	683b      	ldr	r3, [r7, #0]
  }
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3708      	adds	r7, #8
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	2000c7c0 	.word	0x2000c7c0
 8016c64:	0801e8a8 	.word	0x0801e8a8
 8016c68:	0801e97c 	.word	0x0801e97c
 8016c6c:	0801e91c 	.word	0x0801e91c

08016c70 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016c74:	f003 fb0a 	bl	801a28c <rand>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016c86:	b29a      	uxth	r2, r3
 8016c88:	4b01      	ldr	r3, [pc, #4]	@ (8016c90 <udp_init+0x20>)
 8016c8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016c8c:	bf00      	nop
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	200000a4 	.word	0x200000a4

08016c94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b084      	sub	sp, #16
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d105      	bne.n	8016cb4 <udp_input_local_match+0x20>
 8016ca8:	4b27      	ldr	r3, [pc, #156]	@ (8016d48 <udp_input_local_match+0xb4>)
 8016caa:	2287      	movs	r2, #135	@ 0x87
 8016cac:	4927      	ldr	r1, [pc, #156]	@ (8016d4c <udp_input_local_match+0xb8>)
 8016cae:	4828      	ldr	r0, [pc, #160]	@ (8016d50 <udp_input_local_match+0xbc>)
 8016cb0:	f003 fbec 	bl	801a48c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d105      	bne.n	8016cc6 <udp_input_local_match+0x32>
 8016cba:	4b23      	ldr	r3, [pc, #140]	@ (8016d48 <udp_input_local_match+0xb4>)
 8016cbc:	2288      	movs	r2, #136	@ 0x88
 8016cbe:	4925      	ldr	r1, [pc, #148]	@ (8016d54 <udp_input_local_match+0xc0>)
 8016cc0:	4823      	ldr	r0, [pc, #140]	@ (8016d50 <udp_input_local_match+0xbc>)
 8016cc2:	f003 fbe3 	bl	801a48c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	7a1b      	ldrb	r3, [r3, #8]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d00b      	beq.n	8016ce6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	7a1a      	ldrb	r2, [r3, #8]
 8016cd2:	4b21      	ldr	r3, [pc, #132]	@ (8016d58 <udp_input_local_match+0xc4>)
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016cda:	3301      	adds	r3, #1
 8016cdc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	d001      	beq.n	8016ce6 <udp_input_local_match+0x52>
    return 0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	e02b      	b.n	8016d3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016ce6:	79fb      	ldrb	r3, [r7, #7]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d018      	beq.n	8016d1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d013      	beq.n	8016d1a <udp_input_local_match+0x86>
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d00f      	beq.n	8016d1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016cfa:	4b17      	ldr	r3, [pc, #92]	@ (8016d58 <udp_input_local_match+0xc4>)
 8016cfc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d02:	d00a      	beq.n	8016d1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	681a      	ldr	r2, [r3, #0]
 8016d08:	4b13      	ldr	r3, [pc, #76]	@ (8016d58 <udp_input_local_match+0xc4>)
 8016d0a:	695b      	ldr	r3, [r3, #20]
 8016d0c:	405a      	eors	r2, r3
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	3308      	adds	r3, #8
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d110      	bne.n	8016d3c <udp_input_local_match+0xa8>
          return 1;
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	e00f      	b.n	8016d3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d009      	beq.n	8016d38 <udp_input_local_match+0xa4>
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d005      	beq.n	8016d38 <udp_input_local_match+0xa4>
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681a      	ldr	r2, [r3, #0]
 8016d30:	4b09      	ldr	r3, [pc, #36]	@ (8016d58 <udp_input_local_match+0xc4>)
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d101      	bne.n	8016d3c <udp_input_local_match+0xa8>
        return 1;
 8016d38:	2301      	movs	r3, #1
 8016d3a:	e000      	b.n	8016d3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016d3c:	2300      	movs	r3, #0
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3710      	adds	r7, #16
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	0801e990 	.word	0x0801e990
 8016d4c:	0801e9c0 	.word	0x0801e9c0
 8016d50:	0801e9e4 	.word	0x0801e9e4
 8016d54:	0801ea0c 	.word	0x0801ea0c
 8016d58:	2000901c 	.word	0x2000901c

08016d5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016d5c:	b590      	push	{r4, r7, lr}
 8016d5e:	b08d      	sub	sp, #52	@ 0x34
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016d66:	2300      	movs	r3, #0
 8016d68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d105      	bne.n	8016d7c <udp_input+0x20>
 8016d70:	4b7c      	ldr	r3, [pc, #496]	@ (8016f64 <udp_input+0x208>)
 8016d72:	22cf      	movs	r2, #207	@ 0xcf
 8016d74:	497c      	ldr	r1, [pc, #496]	@ (8016f68 <udp_input+0x20c>)
 8016d76:	487d      	ldr	r0, [pc, #500]	@ (8016f6c <udp_input+0x210>)
 8016d78:	f003 fb88 	bl	801a48c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016d7c:	683b      	ldr	r3, [r7, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <udp_input+0x32>
 8016d82:	4b78      	ldr	r3, [pc, #480]	@ (8016f64 <udp_input+0x208>)
 8016d84:	22d0      	movs	r2, #208	@ 0xd0
 8016d86:	497a      	ldr	r1, [pc, #488]	@ (8016f70 <udp_input+0x214>)
 8016d88:	4878      	ldr	r0, [pc, #480]	@ (8016f6c <udp_input+0x210>)
 8016d8a:	f003 fb7f 	bl	801a48c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	895b      	ldrh	r3, [r3, #10]
 8016d92:	2b07      	cmp	r3, #7
 8016d94:	d803      	bhi.n	8016d9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7f9 fb48 	bl	801042c <pbuf_free>
    goto end;
 8016d9c:	e0de      	b.n	8016f5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016da4:	4b73      	ldr	r3, [pc, #460]	@ (8016f74 <udp_input+0x218>)
 8016da6:	695b      	ldr	r3, [r3, #20]
 8016da8:	4a72      	ldr	r2, [pc, #456]	@ (8016f74 <udp_input+0x218>)
 8016daa:	6812      	ldr	r2, [r2, #0]
 8016dac:	4611      	mov	r1, r2
 8016dae:	4618      	mov	r0, r3
 8016db0:	f001 fc56 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8016db4:	4603      	mov	r3, r0
 8016db6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016db8:	697b      	ldr	r3, [r7, #20]
 8016dba:	881b      	ldrh	r3, [r3, #0]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7f7 ff74 	bl	800ecac <lwip_htons>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	885b      	ldrh	r3, [r3, #2]
 8016dcc:	b29b      	uxth	r3, r3
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7f7 ff6c 	bl	800ecac <lwip_htons>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016de0:	2300      	movs	r3, #0
 8016de2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016de4:	4b64      	ldr	r3, [pc, #400]	@ (8016f78 <udp_input+0x21c>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8016dea:	e054      	b.n	8016e96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dee:	8a5b      	ldrh	r3, [r3, #18]
 8016df0:	89fa      	ldrh	r2, [r7, #14]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d14a      	bne.n	8016e8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016df6:	7cfb      	ldrb	r3, [r7, #19]
 8016df8:	461a      	mov	r2, r3
 8016dfa:	6839      	ldr	r1, [r7, #0]
 8016dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016dfe:	f7ff ff49 	bl	8016c94 <udp_input_local_match>
 8016e02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d041      	beq.n	8016e8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e0a:	7c1b      	ldrb	r3, [r3, #16]
 8016e0c:	f003 0304 	and.w	r3, r3, #4
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d11d      	bne.n	8016e50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016e14:	69fb      	ldr	r3, [r7, #28]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d102      	bne.n	8016e20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e1c:	61fb      	str	r3, [r7, #28]
 8016e1e:	e017      	b.n	8016e50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016e20:	7cfb      	ldrb	r3, [r7, #19]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d014      	beq.n	8016e50 <udp_input+0xf4>
 8016e26:	4b53      	ldr	r3, [pc, #332]	@ (8016f74 <udp_input+0x218>)
 8016e28:	695b      	ldr	r3, [r3, #20]
 8016e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e2e:	d10f      	bne.n	8016e50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016e30:	69fb      	ldr	r3, [r7, #28]
 8016e32:	681a      	ldr	r2, [r3, #0]
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	3304      	adds	r3, #4
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d008      	beq.n	8016e50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	3304      	adds	r3, #4
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d101      	bne.n	8016e50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e52:	8a9b      	ldrh	r3, [r3, #20]
 8016e54:	8a3a      	ldrh	r2, [r7, #16]
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d118      	bne.n	8016e8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d005      	beq.n	8016e6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e64:	685a      	ldr	r2, [r3, #4]
 8016e66:	4b43      	ldr	r3, [pc, #268]	@ (8016f74 <udp_input+0x218>)
 8016e68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d10e      	bne.n	8016e8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016e6e:	6a3b      	ldr	r3, [r7, #32]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d014      	beq.n	8016e9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e76:	68da      	ldr	r2, [r3, #12]
 8016e78:	6a3b      	ldr	r3, [r7, #32]
 8016e7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8016f78 <udp_input+0x21c>)
 8016e7e:	681a      	ldr	r2, [r3, #0]
 8016e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016e84:	4a3c      	ldr	r2, [pc, #240]	@ (8016f78 <udp_input+0x21c>)
 8016e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016e8a:	e008      	b.n	8016e9e <udp_input+0x142>
      }
    }

    prev = pcb;
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d1a7      	bne.n	8016dec <udp_input+0x90>
 8016e9c:	e000      	b.n	8016ea0 <udp_input+0x144>
        break;
 8016e9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d101      	bne.n	8016eaa <udp_input+0x14e>
    pcb = uncon_pcb;
 8016ea6:	69fb      	ldr	r3, [r7, #28]
 8016ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d002      	beq.n	8016eb6 <udp_input+0x15a>
    for_us = 1;
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	76fb      	strb	r3, [r7, #27]
 8016eb4:	e00a      	b.n	8016ecc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	3304      	adds	r3, #4
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8016f74 <udp_input+0x218>)
 8016ebe:	695b      	ldr	r3, [r3, #20]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	bf0c      	ite	eq
 8016ec4:	2301      	moveq	r3, #1
 8016ec6:	2300      	movne	r3, #0
 8016ec8:	b2db      	uxtb	r3, r3
 8016eca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016ecc:	7efb      	ldrb	r3, [r7, #27]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d041      	beq.n	8016f56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016ed2:	2108      	movs	r1, #8
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7f9 fa23 	bl	8010320 <pbuf_remove_header>
 8016eda:	4603      	mov	r3, r0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d00a      	beq.n	8016ef6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016ee0:	4b20      	ldr	r3, [pc, #128]	@ (8016f64 <udp_input+0x208>)
 8016ee2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016ee6:	4925      	ldr	r1, [pc, #148]	@ (8016f7c <udp_input+0x220>)
 8016ee8:	4820      	ldr	r0, [pc, #128]	@ (8016f6c <udp_input+0x210>)
 8016eea:	f003 facf 	bl	801a48c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f7f9 fa9c 	bl	801042c <pbuf_free>
      goto end;
 8016ef4:	e032      	b.n	8016f5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d012      	beq.n	8016f22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016efe:	699b      	ldr	r3, [r3, #24]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d00a      	beq.n	8016f1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f06:	699c      	ldr	r4, [r3, #24]
 8016f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f0a:	69d8      	ldr	r0, [r3, #28]
 8016f0c:	8a3b      	ldrh	r3, [r7, #16]
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	4b1b      	ldr	r3, [pc, #108]	@ (8016f80 <udp_input+0x224>)
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016f16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016f18:	e021      	b.n	8016f5e <udp_input+0x202>
        pbuf_free(p);
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	f7f9 fa86 	bl	801042c <pbuf_free>
        goto end;
 8016f20:	e01c      	b.n	8016f5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016f22:	7cfb      	ldrb	r3, [r7, #19]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d112      	bne.n	8016f4e <udp_input+0x1f2>
 8016f28:	4b12      	ldr	r3, [pc, #72]	@ (8016f74 <udp_input+0x218>)
 8016f2a:	695b      	ldr	r3, [r3, #20]
 8016f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016f30:	2be0      	cmp	r3, #224	@ 0xe0
 8016f32:	d00c      	beq.n	8016f4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016f34:	4b0f      	ldr	r3, [pc, #60]	@ (8016f74 <udp_input+0x218>)
 8016f36:	899b      	ldrh	r3, [r3, #12]
 8016f38:	3308      	adds	r3, #8
 8016f3a:	b29b      	uxth	r3, r3
 8016f3c:	b21b      	sxth	r3, r3
 8016f3e:	4619      	mov	r1, r3
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f7f9 fa60 	bl	8010406 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016f46:	2103      	movs	r1, #3
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f001 f869 	bl	8018020 <icmp_dest_unreach>
      pbuf_free(p);
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f7f9 fa6c 	bl	801042c <pbuf_free>
  return;
 8016f54:	e003      	b.n	8016f5e <udp_input+0x202>
    pbuf_free(p);
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7f9 fa68 	bl	801042c <pbuf_free>
  return;
 8016f5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016f5e:	372c      	adds	r7, #44	@ 0x2c
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd90      	pop	{r4, r7, pc}
 8016f64:	0801e990 	.word	0x0801e990
 8016f68:	0801ea34 	.word	0x0801ea34
 8016f6c:	0801e9e4 	.word	0x0801e9e4
 8016f70:	0801ea4c 	.word	0x0801ea4c
 8016f74:	2000901c 	.word	0x2000901c
 8016f78:	2000c7cc 	.word	0x2000c7cc
 8016f7c:	0801ea68 	.word	0x0801ea68
 8016f80:	2000902c 	.word	0x2000902c

08016f84 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b085      	sub	sp, #20
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d01e      	beq.n	8016fd2 <udp_netif_ip_addr_changed+0x4e>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d01a      	beq.n	8016fd2 <udp_netif_ip_addr_changed+0x4e>
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d017      	beq.n	8016fd2 <udp_netif_ip_addr_changed+0x4e>
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d013      	beq.n	8016fd2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016faa:	4b0d      	ldr	r3, [pc, #52]	@ (8016fe0 <udp_netif_ip_addr_changed+0x5c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	60fb      	str	r3, [r7, #12]
 8016fb0:	e00c      	b.n	8016fcc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	681a      	ldr	r2, [r3, #0]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d103      	bne.n	8016fc6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	68db      	ldr	r3, [r3, #12]
 8016fca:	60fb      	str	r3, [r7, #12]
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d1ef      	bne.n	8016fb2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016fd2:	bf00      	nop
 8016fd4:	3714      	adds	r7, #20
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop
 8016fe0:	2000c7cc 	.word	0x2000c7cc

08016fe4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016fec:	4915      	ldr	r1, [pc, #84]	@ (8017044 <etharp_free_entry+0x60>)
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	4613      	mov	r3, r2
 8016ff2:	005b      	lsls	r3, r3, #1
 8016ff4:	4413      	add	r3, r2
 8016ff6:	00db      	lsls	r3, r3, #3
 8016ff8:	440b      	add	r3, r1
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d013      	beq.n	8017028 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017000:	4910      	ldr	r1, [pc, #64]	@ (8017044 <etharp_free_entry+0x60>)
 8017002:	687a      	ldr	r2, [r7, #4]
 8017004:	4613      	mov	r3, r2
 8017006:	005b      	lsls	r3, r3, #1
 8017008:	4413      	add	r3, r2
 801700a:	00db      	lsls	r3, r3, #3
 801700c:	440b      	add	r3, r1
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4618      	mov	r0, r3
 8017012:	f7f9 fa0b 	bl	801042c <pbuf_free>
    arp_table[i].q = NULL;
 8017016:	490b      	ldr	r1, [pc, #44]	@ (8017044 <etharp_free_entry+0x60>)
 8017018:	687a      	ldr	r2, [r7, #4]
 801701a:	4613      	mov	r3, r2
 801701c:	005b      	lsls	r3, r3, #1
 801701e:	4413      	add	r3, r2
 8017020:	00db      	lsls	r3, r3, #3
 8017022:	440b      	add	r3, r1
 8017024:	2200      	movs	r2, #0
 8017026:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017028:	4906      	ldr	r1, [pc, #24]	@ (8017044 <etharp_free_entry+0x60>)
 801702a:	687a      	ldr	r2, [r7, #4]
 801702c:	4613      	mov	r3, r2
 801702e:	005b      	lsls	r3, r3, #1
 8017030:	4413      	add	r3, r2
 8017032:	00db      	lsls	r3, r3, #3
 8017034:	440b      	add	r3, r1
 8017036:	3314      	adds	r3, #20
 8017038:	2200      	movs	r2, #0
 801703a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801703c:	bf00      	nop
 801703e:	3708      	adds	r7, #8
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	2000c7d0 	.word	0x2000c7d0

08017048 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b082      	sub	sp, #8
 801704c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801704e:	2300      	movs	r3, #0
 8017050:	607b      	str	r3, [r7, #4]
 8017052:	e096      	b.n	8017182 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017054:	494f      	ldr	r1, [pc, #316]	@ (8017194 <etharp_tmr+0x14c>)
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	4613      	mov	r3, r2
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	4413      	add	r3, r2
 801705e:	00db      	lsls	r3, r3, #3
 8017060:	440b      	add	r3, r1
 8017062:	3314      	adds	r3, #20
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017068:	78fb      	ldrb	r3, [r7, #3]
 801706a:	2b00      	cmp	r3, #0
 801706c:	f000 8086 	beq.w	801717c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017070:	4948      	ldr	r1, [pc, #288]	@ (8017194 <etharp_tmr+0x14c>)
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	4613      	mov	r3, r2
 8017076:	005b      	lsls	r3, r3, #1
 8017078:	4413      	add	r3, r2
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	440b      	add	r3, r1
 801707e:	3312      	adds	r3, #18
 8017080:	881b      	ldrh	r3, [r3, #0]
 8017082:	3301      	adds	r3, #1
 8017084:	b298      	uxth	r0, r3
 8017086:	4943      	ldr	r1, [pc, #268]	@ (8017194 <etharp_tmr+0x14c>)
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	4613      	mov	r3, r2
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	4413      	add	r3, r2
 8017090:	00db      	lsls	r3, r3, #3
 8017092:	440b      	add	r3, r1
 8017094:	3312      	adds	r3, #18
 8017096:	4602      	mov	r2, r0
 8017098:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801709a:	493e      	ldr	r1, [pc, #248]	@ (8017194 <etharp_tmr+0x14c>)
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	4613      	mov	r3, r2
 80170a0:	005b      	lsls	r3, r3, #1
 80170a2:	4413      	add	r3, r2
 80170a4:	00db      	lsls	r3, r3, #3
 80170a6:	440b      	add	r3, r1
 80170a8:	3312      	adds	r3, #18
 80170aa:	881b      	ldrh	r3, [r3, #0]
 80170ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80170b0:	d215      	bcs.n	80170de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80170b2:	4938      	ldr	r1, [pc, #224]	@ (8017194 <etharp_tmr+0x14c>)
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	4613      	mov	r3, r2
 80170b8:	005b      	lsls	r3, r3, #1
 80170ba:	4413      	add	r3, r2
 80170bc:	00db      	lsls	r3, r3, #3
 80170be:	440b      	add	r3, r1
 80170c0:	3314      	adds	r3, #20
 80170c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d10e      	bne.n	80170e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80170c8:	4932      	ldr	r1, [pc, #200]	@ (8017194 <etharp_tmr+0x14c>)
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	4613      	mov	r3, r2
 80170ce:	005b      	lsls	r3, r3, #1
 80170d0:	4413      	add	r3, r2
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	440b      	add	r3, r1
 80170d6:	3312      	adds	r3, #18
 80170d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80170da:	2b04      	cmp	r3, #4
 80170dc:	d903      	bls.n	80170e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f7ff ff80 	bl	8016fe4 <etharp_free_entry>
 80170e4:	e04a      	b.n	801717c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80170e6:	492b      	ldr	r1, [pc, #172]	@ (8017194 <etharp_tmr+0x14c>)
 80170e8:	687a      	ldr	r2, [r7, #4]
 80170ea:	4613      	mov	r3, r2
 80170ec:	005b      	lsls	r3, r3, #1
 80170ee:	4413      	add	r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	440b      	add	r3, r1
 80170f4:	3314      	adds	r3, #20
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b03      	cmp	r3, #3
 80170fa:	d10a      	bne.n	8017112 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80170fc:	4925      	ldr	r1, [pc, #148]	@ (8017194 <etharp_tmr+0x14c>)
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	4613      	mov	r3, r2
 8017102:	005b      	lsls	r3, r3, #1
 8017104:	4413      	add	r3, r2
 8017106:	00db      	lsls	r3, r3, #3
 8017108:	440b      	add	r3, r1
 801710a:	3314      	adds	r3, #20
 801710c:	2204      	movs	r2, #4
 801710e:	701a      	strb	r2, [r3, #0]
 8017110:	e034      	b.n	801717c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017112:	4920      	ldr	r1, [pc, #128]	@ (8017194 <etharp_tmr+0x14c>)
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	4613      	mov	r3, r2
 8017118:	005b      	lsls	r3, r3, #1
 801711a:	4413      	add	r3, r2
 801711c:	00db      	lsls	r3, r3, #3
 801711e:	440b      	add	r3, r1
 8017120:	3314      	adds	r3, #20
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	2b04      	cmp	r3, #4
 8017126:	d10a      	bne.n	801713e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017128:	491a      	ldr	r1, [pc, #104]	@ (8017194 <etharp_tmr+0x14c>)
 801712a:	687a      	ldr	r2, [r7, #4]
 801712c:	4613      	mov	r3, r2
 801712e:	005b      	lsls	r3, r3, #1
 8017130:	4413      	add	r3, r2
 8017132:	00db      	lsls	r3, r3, #3
 8017134:	440b      	add	r3, r1
 8017136:	3314      	adds	r3, #20
 8017138:	2202      	movs	r2, #2
 801713a:	701a      	strb	r2, [r3, #0]
 801713c:	e01e      	b.n	801717c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801713e:	4915      	ldr	r1, [pc, #84]	@ (8017194 <etharp_tmr+0x14c>)
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	4613      	mov	r3, r2
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	4413      	add	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	440b      	add	r3, r1
 801714c:	3314      	adds	r3, #20
 801714e:	781b      	ldrb	r3, [r3, #0]
 8017150:	2b01      	cmp	r3, #1
 8017152:	d113      	bne.n	801717c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017154:	490f      	ldr	r1, [pc, #60]	@ (8017194 <etharp_tmr+0x14c>)
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	4613      	mov	r3, r2
 801715a:	005b      	lsls	r3, r3, #1
 801715c:	4413      	add	r3, r2
 801715e:	00db      	lsls	r3, r3, #3
 8017160:	440b      	add	r3, r1
 8017162:	3308      	adds	r3, #8
 8017164:	6818      	ldr	r0, [r3, #0]
 8017166:	687a      	ldr	r2, [r7, #4]
 8017168:	4613      	mov	r3, r2
 801716a:	005b      	lsls	r3, r3, #1
 801716c:	4413      	add	r3, r2
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	4a08      	ldr	r2, [pc, #32]	@ (8017194 <etharp_tmr+0x14c>)
 8017172:	4413      	add	r3, r2
 8017174:	3304      	adds	r3, #4
 8017176:	4619      	mov	r1, r3
 8017178:	f000 fe3e 	bl	8017df8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	3301      	adds	r3, #1
 8017180:	607b      	str	r3, [r7, #4]
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2b09      	cmp	r3, #9
 8017186:	f77f af65 	ble.w	8017054 <etharp_tmr+0xc>
      }
    }
  }
}
 801718a:	bf00      	nop
 801718c:	bf00      	nop
 801718e:	3708      	adds	r7, #8
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	2000c7d0 	.word	0x2000c7d0

08017198 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b08a      	sub	sp, #40	@ 0x28
 801719c:	af00      	add	r7, sp, #0
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	460b      	mov	r3, r1
 80171a2:	607a      	str	r2, [r7, #4]
 80171a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80171a6:	230a      	movs	r3, #10
 80171a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80171aa:	230a      	movs	r3, #10
 80171ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80171ae:	230a      	movs	r3, #10
 80171b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80171b6:	230a      	movs	r3, #10
 80171b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80171ba:	2300      	movs	r3, #0
 80171bc:	83bb      	strh	r3, [r7, #28]
 80171be:	2300      	movs	r3, #0
 80171c0:	837b      	strh	r3, [r7, #26]
 80171c2:	2300      	movs	r3, #0
 80171c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171c6:	2300      	movs	r3, #0
 80171c8:	843b      	strh	r3, [r7, #32]
 80171ca:	e0ae      	b.n	801732a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80171cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171d0:	49a6      	ldr	r1, [pc, #664]	@ (801746c <etharp_find_entry+0x2d4>)
 80171d2:	4613      	mov	r3, r2
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	4413      	add	r3, r2
 80171d8:	00db      	lsls	r3, r3, #3
 80171da:	440b      	add	r3, r1
 80171dc:	3314      	adds	r3, #20
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80171e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80171e6:	2b0a      	cmp	r3, #10
 80171e8:	d105      	bne.n	80171f6 <etharp_find_entry+0x5e>
 80171ea:	7dfb      	ldrb	r3, [r7, #23]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d102      	bne.n	80171f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80171f0:	8c3b      	ldrh	r3, [r7, #32]
 80171f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80171f4:	e095      	b.n	8017322 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80171f6:	7dfb      	ldrb	r3, [r7, #23]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	f000 8092 	beq.w	8017322 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80171fe:	7dfb      	ldrb	r3, [r7, #23]
 8017200:	2b01      	cmp	r3, #1
 8017202:	d009      	beq.n	8017218 <etharp_find_entry+0x80>
 8017204:	7dfb      	ldrb	r3, [r7, #23]
 8017206:	2b01      	cmp	r3, #1
 8017208:	d806      	bhi.n	8017218 <etharp_find_entry+0x80>
 801720a:	4b99      	ldr	r3, [pc, #612]	@ (8017470 <etharp_find_entry+0x2d8>)
 801720c:	f240 1223 	movw	r2, #291	@ 0x123
 8017210:	4998      	ldr	r1, [pc, #608]	@ (8017474 <etharp_find_entry+0x2dc>)
 8017212:	4899      	ldr	r0, [pc, #612]	@ (8017478 <etharp_find_entry+0x2e0>)
 8017214:	f003 f93a 	bl	801a48c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d020      	beq.n	8017260 <etharp_find_entry+0xc8>
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	6819      	ldr	r1, [r3, #0]
 8017222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017226:	4891      	ldr	r0, [pc, #580]	@ (801746c <etharp_find_entry+0x2d4>)
 8017228:	4613      	mov	r3, r2
 801722a:	005b      	lsls	r3, r3, #1
 801722c:	4413      	add	r3, r2
 801722e:	00db      	lsls	r3, r3, #3
 8017230:	4403      	add	r3, r0
 8017232:	3304      	adds	r3, #4
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	4299      	cmp	r1, r3
 8017238:	d112      	bne.n	8017260 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d00c      	beq.n	801725a <etharp_find_entry+0xc2>
 8017240:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017244:	4989      	ldr	r1, [pc, #548]	@ (801746c <etharp_find_entry+0x2d4>)
 8017246:	4613      	mov	r3, r2
 8017248:	005b      	lsls	r3, r3, #1
 801724a:	4413      	add	r3, r2
 801724c:	00db      	lsls	r3, r3, #3
 801724e:	440b      	add	r3, r1
 8017250:	3308      	adds	r3, #8
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	429a      	cmp	r2, r3
 8017258:	d102      	bne.n	8017260 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801725a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801725e:	e100      	b.n	8017462 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017260:	7dfb      	ldrb	r3, [r7, #23]
 8017262:	2b01      	cmp	r3, #1
 8017264:	d140      	bne.n	80172e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801726a:	4980      	ldr	r1, [pc, #512]	@ (801746c <etharp_find_entry+0x2d4>)
 801726c:	4613      	mov	r3, r2
 801726e:	005b      	lsls	r3, r3, #1
 8017270:	4413      	add	r3, r2
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	440b      	add	r3, r1
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d01a      	beq.n	80172b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801727c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017280:	497a      	ldr	r1, [pc, #488]	@ (801746c <etharp_find_entry+0x2d4>)
 8017282:	4613      	mov	r3, r2
 8017284:	005b      	lsls	r3, r3, #1
 8017286:	4413      	add	r3, r2
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	440b      	add	r3, r1
 801728c:	3312      	adds	r3, #18
 801728e:	881b      	ldrh	r3, [r3, #0]
 8017290:	8bba      	ldrh	r2, [r7, #28]
 8017292:	429a      	cmp	r2, r3
 8017294:	d845      	bhi.n	8017322 <etharp_find_entry+0x18a>
            old_queue = i;
 8017296:	8c3b      	ldrh	r3, [r7, #32]
 8017298:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801729a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801729e:	4973      	ldr	r1, [pc, #460]	@ (801746c <etharp_find_entry+0x2d4>)
 80172a0:	4613      	mov	r3, r2
 80172a2:	005b      	lsls	r3, r3, #1
 80172a4:	4413      	add	r3, r2
 80172a6:	00db      	lsls	r3, r3, #3
 80172a8:	440b      	add	r3, r1
 80172aa:	3312      	adds	r3, #18
 80172ac:	881b      	ldrh	r3, [r3, #0]
 80172ae:	83bb      	strh	r3, [r7, #28]
 80172b0:	e037      	b.n	8017322 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80172b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172b6:	496d      	ldr	r1, [pc, #436]	@ (801746c <etharp_find_entry+0x2d4>)
 80172b8:	4613      	mov	r3, r2
 80172ba:	005b      	lsls	r3, r3, #1
 80172bc:	4413      	add	r3, r2
 80172be:	00db      	lsls	r3, r3, #3
 80172c0:	440b      	add	r3, r1
 80172c2:	3312      	adds	r3, #18
 80172c4:	881b      	ldrh	r3, [r3, #0]
 80172c6:	8b7a      	ldrh	r2, [r7, #26]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d82a      	bhi.n	8017322 <etharp_find_entry+0x18a>
            old_pending = i;
 80172cc:	8c3b      	ldrh	r3, [r7, #32]
 80172ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80172d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172d4:	4965      	ldr	r1, [pc, #404]	@ (801746c <etharp_find_entry+0x2d4>)
 80172d6:	4613      	mov	r3, r2
 80172d8:	005b      	lsls	r3, r3, #1
 80172da:	4413      	add	r3, r2
 80172dc:	00db      	lsls	r3, r3, #3
 80172de:	440b      	add	r3, r1
 80172e0:	3312      	adds	r3, #18
 80172e2:	881b      	ldrh	r3, [r3, #0]
 80172e4:	837b      	strh	r3, [r7, #26]
 80172e6:	e01c      	b.n	8017322 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80172e8:	7dfb      	ldrb	r3, [r7, #23]
 80172ea:	2b01      	cmp	r3, #1
 80172ec:	d919      	bls.n	8017322 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80172ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172f2:	495e      	ldr	r1, [pc, #376]	@ (801746c <etharp_find_entry+0x2d4>)
 80172f4:	4613      	mov	r3, r2
 80172f6:	005b      	lsls	r3, r3, #1
 80172f8:	4413      	add	r3, r2
 80172fa:	00db      	lsls	r3, r3, #3
 80172fc:	440b      	add	r3, r1
 80172fe:	3312      	adds	r3, #18
 8017300:	881b      	ldrh	r3, [r3, #0]
 8017302:	8b3a      	ldrh	r2, [r7, #24]
 8017304:	429a      	cmp	r2, r3
 8017306:	d80c      	bhi.n	8017322 <etharp_find_entry+0x18a>
            old_stable = i;
 8017308:	8c3b      	ldrh	r3, [r7, #32]
 801730a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801730c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017310:	4956      	ldr	r1, [pc, #344]	@ (801746c <etharp_find_entry+0x2d4>)
 8017312:	4613      	mov	r3, r2
 8017314:	005b      	lsls	r3, r3, #1
 8017316:	4413      	add	r3, r2
 8017318:	00db      	lsls	r3, r3, #3
 801731a:	440b      	add	r3, r1
 801731c:	3312      	adds	r3, #18
 801731e:	881b      	ldrh	r3, [r3, #0]
 8017320:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017322:	8c3b      	ldrh	r3, [r7, #32]
 8017324:	3301      	adds	r3, #1
 8017326:	b29b      	uxth	r3, r3
 8017328:	843b      	strh	r3, [r7, #32]
 801732a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801732e:	2b09      	cmp	r3, #9
 8017330:	f77f af4c 	ble.w	80171cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017334:	7afb      	ldrb	r3, [r7, #11]
 8017336:	f003 0302 	and.w	r3, r3, #2
 801733a:	2b00      	cmp	r3, #0
 801733c:	d108      	bne.n	8017350 <etharp_find_entry+0x1b8>
 801733e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017342:	2b0a      	cmp	r3, #10
 8017344:	d107      	bne.n	8017356 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017346:	7afb      	ldrb	r3, [r7, #11]
 8017348:	f003 0301 	and.w	r3, r3, #1
 801734c:	2b00      	cmp	r3, #0
 801734e:	d102      	bne.n	8017356 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017350:	f04f 33ff 	mov.w	r3, #4294967295
 8017354:	e085      	b.n	8017462 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801735a:	2b09      	cmp	r3, #9
 801735c:	dc02      	bgt.n	8017364 <etharp_find_entry+0x1cc>
    i = empty;
 801735e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017360:	843b      	strh	r3, [r7, #32]
 8017362:	e039      	b.n	80173d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017364:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017368:	2b09      	cmp	r3, #9
 801736a:	dc14      	bgt.n	8017396 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801736c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801736e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017374:	493d      	ldr	r1, [pc, #244]	@ (801746c <etharp_find_entry+0x2d4>)
 8017376:	4613      	mov	r3, r2
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	4413      	add	r3, r2
 801737c:	00db      	lsls	r3, r3, #3
 801737e:	440b      	add	r3, r1
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d018      	beq.n	80173b8 <etharp_find_entry+0x220>
 8017386:	4b3a      	ldr	r3, [pc, #232]	@ (8017470 <etharp_find_entry+0x2d8>)
 8017388:	f240 126d 	movw	r2, #365	@ 0x16d
 801738c:	493b      	ldr	r1, [pc, #236]	@ (801747c <etharp_find_entry+0x2e4>)
 801738e:	483a      	ldr	r0, [pc, #232]	@ (8017478 <etharp_find_entry+0x2e0>)
 8017390:	f003 f87c 	bl	801a48c <iprintf>
 8017394:	e010      	b.n	80173b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017396:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801739a:	2b09      	cmp	r3, #9
 801739c:	dc02      	bgt.n	80173a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801739e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80173a0:	843b      	strh	r3, [r7, #32]
 80173a2:	e009      	b.n	80173b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80173a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80173a8:	2b09      	cmp	r3, #9
 80173aa:	dc02      	bgt.n	80173b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80173ac:	8bfb      	ldrh	r3, [r7, #30]
 80173ae:	843b      	strh	r3, [r7, #32]
 80173b0:	e002      	b.n	80173b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80173b2:	f04f 33ff 	mov.w	r3, #4294967295
 80173b6:	e054      	b.n	8017462 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80173b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80173bc:	2b09      	cmp	r3, #9
 80173be:	dd06      	ble.n	80173ce <etharp_find_entry+0x236>
 80173c0:	4b2b      	ldr	r3, [pc, #172]	@ (8017470 <etharp_find_entry+0x2d8>)
 80173c2:	f240 127f 	movw	r2, #383	@ 0x17f
 80173c6:	492e      	ldr	r1, [pc, #184]	@ (8017480 <etharp_find_entry+0x2e8>)
 80173c8:	482b      	ldr	r0, [pc, #172]	@ (8017478 <etharp_find_entry+0x2e0>)
 80173ca:	f003 f85f 	bl	801a48c <iprintf>
    etharp_free_entry(i);
 80173ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7ff fe06 	bl	8016fe4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80173d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80173dc:	2b09      	cmp	r3, #9
 80173de:	dd06      	ble.n	80173ee <etharp_find_entry+0x256>
 80173e0:	4b23      	ldr	r3, [pc, #140]	@ (8017470 <etharp_find_entry+0x2d8>)
 80173e2:	f240 1283 	movw	r2, #387	@ 0x183
 80173e6:	4926      	ldr	r1, [pc, #152]	@ (8017480 <etharp_find_entry+0x2e8>)
 80173e8:	4823      	ldr	r0, [pc, #140]	@ (8017478 <etharp_find_entry+0x2e0>)
 80173ea:	f003 f84f 	bl	801a48c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80173ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173f2:	491e      	ldr	r1, [pc, #120]	@ (801746c <etharp_find_entry+0x2d4>)
 80173f4:	4613      	mov	r3, r2
 80173f6:	005b      	lsls	r3, r3, #1
 80173f8:	4413      	add	r3, r2
 80173fa:	00db      	lsls	r3, r3, #3
 80173fc:	440b      	add	r3, r1
 80173fe:	3314      	adds	r3, #20
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d006      	beq.n	8017414 <etharp_find_entry+0x27c>
 8017406:	4b1a      	ldr	r3, [pc, #104]	@ (8017470 <etharp_find_entry+0x2d8>)
 8017408:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801740c:	491d      	ldr	r1, [pc, #116]	@ (8017484 <etharp_find_entry+0x2ec>)
 801740e:	481a      	ldr	r0, [pc, #104]	@ (8017478 <etharp_find_entry+0x2e0>)
 8017410:	f003 f83c 	bl	801a48c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d00b      	beq.n	8017432 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801741a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	6819      	ldr	r1, [r3, #0]
 8017422:	4812      	ldr	r0, [pc, #72]	@ (801746c <etharp_find_entry+0x2d4>)
 8017424:	4613      	mov	r3, r2
 8017426:	005b      	lsls	r3, r3, #1
 8017428:	4413      	add	r3, r2
 801742a:	00db      	lsls	r3, r3, #3
 801742c:	4403      	add	r3, r0
 801742e:	3304      	adds	r3, #4
 8017430:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017432:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017436:	490d      	ldr	r1, [pc, #52]	@ (801746c <etharp_find_entry+0x2d4>)
 8017438:	4613      	mov	r3, r2
 801743a:	005b      	lsls	r3, r3, #1
 801743c:	4413      	add	r3, r2
 801743e:	00db      	lsls	r3, r3, #3
 8017440:	440b      	add	r3, r1
 8017442:	3312      	adds	r3, #18
 8017444:	2200      	movs	r2, #0
 8017446:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801744c:	4907      	ldr	r1, [pc, #28]	@ (801746c <etharp_find_entry+0x2d4>)
 801744e:	4613      	mov	r3, r2
 8017450:	005b      	lsls	r3, r3, #1
 8017452:	4413      	add	r3, r2
 8017454:	00db      	lsls	r3, r3, #3
 8017456:	440b      	add	r3, r1
 8017458:	3308      	adds	r3, #8
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801745e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017462:	4618      	mov	r0, r3
 8017464:	3728      	adds	r7, #40	@ 0x28
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}
 801746a:	bf00      	nop
 801746c:	2000c7d0 	.word	0x2000c7d0
 8017470:	0801ecf4 	.word	0x0801ecf4
 8017474:	0801ed2c 	.word	0x0801ed2c
 8017478:	0801ed6c 	.word	0x0801ed6c
 801747c:	0801ed94 	.word	0x0801ed94
 8017480:	0801edac 	.word	0x0801edac
 8017484:	0801edc0 	.word	0x0801edc0

08017488 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b088      	sub	sp, #32
 801748c:	af02      	add	r7, sp, #8
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
 8017494:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801749c:	2b06      	cmp	r3, #6
 801749e:	d006      	beq.n	80174ae <etharp_update_arp_entry+0x26>
 80174a0:	4b48      	ldr	r3, [pc, #288]	@ (80175c4 <etharp_update_arp_entry+0x13c>)
 80174a2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80174a6:	4948      	ldr	r1, [pc, #288]	@ (80175c8 <etharp_update_arp_entry+0x140>)
 80174a8:	4848      	ldr	r0, [pc, #288]	@ (80175cc <etharp_update_arp_entry+0x144>)
 80174aa:	f002 ffef 	bl	801a48c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d012      	beq.n	80174da <etharp_update_arp_entry+0x52>
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d00e      	beq.n	80174da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	68f9      	ldr	r1, [r7, #12]
 80174c2:	4618      	mov	r0, r3
 80174c4:	f001 f8cc 	bl	8018660 <ip4_addr_isbroadcast_u32>
 80174c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d105      	bne.n	80174da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80174d6:	2be0      	cmp	r3, #224	@ 0xe0
 80174d8:	d102      	bne.n	80174e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80174da:	f06f 030f 	mvn.w	r3, #15
 80174de:	e06c      	b.n	80175ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80174e0:	78fb      	ldrb	r3, [r7, #3]
 80174e2:	68fa      	ldr	r2, [r7, #12]
 80174e4:	4619      	mov	r1, r3
 80174e6:	68b8      	ldr	r0, [r7, #8]
 80174e8:	f7ff fe56 	bl	8017198 <etharp_find_entry>
 80174ec:	4603      	mov	r3, r0
 80174ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80174f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	da02      	bge.n	80174fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80174f8:	8afb      	ldrh	r3, [r7, #22]
 80174fa:	b25b      	sxtb	r3, r3
 80174fc:	e05d      	b.n	80175ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80174fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017502:	4933      	ldr	r1, [pc, #204]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 8017504:	4613      	mov	r3, r2
 8017506:	005b      	lsls	r3, r3, #1
 8017508:	4413      	add	r3, r2
 801750a:	00db      	lsls	r3, r3, #3
 801750c:	440b      	add	r3, r1
 801750e:	3314      	adds	r3, #20
 8017510:	2202      	movs	r2, #2
 8017512:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017514:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017518:	492d      	ldr	r1, [pc, #180]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 801751a:	4613      	mov	r3, r2
 801751c:	005b      	lsls	r3, r3, #1
 801751e:	4413      	add	r3, r2
 8017520:	00db      	lsls	r3, r3, #3
 8017522:	440b      	add	r3, r1
 8017524:	3308      	adds	r3, #8
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801752a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801752e:	4613      	mov	r3, r2
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	4413      	add	r3, r2
 8017534:	00db      	lsls	r3, r3, #3
 8017536:	3308      	adds	r3, #8
 8017538:	4a25      	ldr	r2, [pc, #148]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 801753a:	4413      	add	r3, r2
 801753c:	3304      	adds	r3, #4
 801753e:	2206      	movs	r2, #6
 8017540:	6879      	ldr	r1, [r7, #4]
 8017542:	4618      	mov	r0, r3
 8017544:	f003 f941 	bl	801a7ca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017548:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801754c:	4920      	ldr	r1, [pc, #128]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 801754e:	4613      	mov	r3, r2
 8017550:	005b      	lsls	r3, r3, #1
 8017552:	4413      	add	r3, r2
 8017554:	00db      	lsls	r3, r3, #3
 8017556:	440b      	add	r3, r1
 8017558:	3312      	adds	r3, #18
 801755a:	2200      	movs	r2, #0
 801755c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801755e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017562:	491b      	ldr	r1, [pc, #108]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	00db      	lsls	r3, r3, #3
 801756c:	440b      	add	r3, r1
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d021      	beq.n	80175b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017578:	4915      	ldr	r1, [pc, #84]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 801757a:	4613      	mov	r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4413      	add	r3, r2
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	440b      	add	r3, r1
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017588:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801758c:	4910      	ldr	r1, [pc, #64]	@ (80175d0 <etharp_update_arp_entry+0x148>)
 801758e:	4613      	mov	r3, r2
 8017590:	005b      	lsls	r3, r3, #1
 8017592:	4413      	add	r3, r2
 8017594:	00db      	lsls	r3, r3, #3
 8017596:	440b      	add	r3, r1
 8017598:	2200      	movs	r2, #0
 801759a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80175a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80175a6:	9300      	str	r3, [sp, #0]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6939      	ldr	r1, [r7, #16]
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f001 fff5 	bl	801959c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80175b2:	6938      	ldr	r0, [r7, #16]
 80175b4:	f7f8 ff3a 	bl	801042c <pbuf_free>
  }
  return ERR_OK;
 80175b8:	2300      	movs	r3, #0
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3718      	adds	r7, #24
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	0801ecf4 	.word	0x0801ecf4
 80175c8:	0801edec 	.word	0x0801edec
 80175cc:	0801ed6c 	.word	0x0801ed6c
 80175d0:	2000c7d0 	.word	0x2000c7d0

080175d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80175d4:	b5b0      	push	{r4, r5, r7, lr}
 80175d6:	b08a      	sub	sp, #40	@ 0x28
 80175d8:	af04      	add	r7, sp, #16
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d107      	bne.n	80175f4 <etharp_input+0x20>
 80175e4:	4b3d      	ldr	r3, [pc, #244]	@ (80176dc <etharp_input+0x108>)
 80175e6:	f240 228a 	movw	r2, #650	@ 0x28a
 80175ea:	493d      	ldr	r1, [pc, #244]	@ (80176e0 <etharp_input+0x10c>)
 80175ec:	483d      	ldr	r0, [pc, #244]	@ (80176e4 <etharp_input+0x110>)
 80175ee:	f002 ff4d 	bl	801a48c <iprintf>
 80175f2:	e06f      	b.n	80176d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	685b      	ldr	r3, [r3, #4]
 80175f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	b29b      	uxth	r3, r3
 8017600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017604:	d10c      	bne.n	8017620 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017606:	693b      	ldr	r3, [r7, #16]
 8017608:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801760a:	2b06      	cmp	r3, #6
 801760c:	d108      	bne.n	8017620 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801760e:	693b      	ldr	r3, [r7, #16]
 8017610:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017612:	2b04      	cmp	r3, #4
 8017614:	d104      	bne.n	8017620 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	885b      	ldrh	r3, [r3, #2]
 801761a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801761c:	2b08      	cmp	r3, #8
 801761e:	d003      	beq.n	8017628 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7f8 ff03 	bl	801042c <pbuf_free>
    return;
 8017626:	e055      	b.n	80176d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	330e      	adds	r3, #14
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	3318      	adds	r3, #24
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	3304      	adds	r3, #4
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d102      	bne.n	8017648 <etharp_input+0x74>
    for_us = 0;
 8017642:	2300      	movs	r3, #0
 8017644:	75fb      	strb	r3, [r7, #23]
 8017646:	e009      	b.n	801765c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	3304      	adds	r3, #4
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	429a      	cmp	r2, r3
 8017652:	bf0c      	ite	eq
 8017654:	2301      	moveq	r3, #1
 8017656:	2300      	movne	r3, #0
 8017658:	b2db      	uxtb	r3, r3
 801765a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	f103 0208 	add.w	r2, r3, #8
 8017662:	7dfb      	ldrb	r3, [r7, #23]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d001      	beq.n	801766c <etharp_input+0x98>
 8017668:	2301      	movs	r3, #1
 801766a:	e000      	b.n	801766e <etharp_input+0x9a>
 801766c:	2302      	movs	r3, #2
 801766e:	f107 010c 	add.w	r1, r7, #12
 8017672:	6838      	ldr	r0, [r7, #0]
 8017674:	f7ff ff08 	bl	8017488 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	88db      	ldrh	r3, [r3, #6]
 801767c:	b29b      	uxth	r3, r3
 801767e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017682:	d003      	beq.n	801768c <etharp_input+0xb8>
 8017684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017688:	d01e      	beq.n	80176c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801768a:	e020      	b.n	80176ce <etharp_input+0xfa>
      if (for_us) {
 801768c:	7dfb      	ldrb	r3, [r7, #23]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d01c      	beq.n	80176cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80176a8:	693a      	ldr	r2, [r7, #16]
 80176aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80176ac:	2102      	movs	r1, #2
 80176ae:	9103      	str	r1, [sp, #12]
 80176b0:	f107 010c 	add.w	r1, r7, #12
 80176b4:	9102      	str	r1, [sp, #8]
 80176b6:	9201      	str	r2, [sp, #4]
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	462b      	mov	r3, r5
 80176bc:	4622      	mov	r2, r4
 80176be:	4601      	mov	r1, r0
 80176c0:	6838      	ldr	r0, [r7, #0]
 80176c2:	f000 faeb 	bl	8017c9c <etharp_raw>
      break;
 80176c6:	e001      	b.n	80176cc <etharp_input+0xf8>
      break;
 80176c8:	bf00      	nop
 80176ca:	e000      	b.n	80176ce <etharp_input+0xfa>
      break;
 80176cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	f7f8 feac 	bl	801042c <pbuf_free>
}
 80176d4:	3718      	adds	r7, #24
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bdb0      	pop	{r4, r5, r7, pc}
 80176da:	bf00      	nop
 80176dc:	0801ecf4 	.word	0x0801ecf4
 80176e0:	0801ee44 	.word	0x0801ee44
 80176e4:	0801ed6c 	.word	0x0801ed6c

080176e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b086      	sub	sp, #24
 80176ec:	af02      	add	r7, sp, #8
 80176ee:	60f8      	str	r0, [r7, #12]
 80176f0:	60b9      	str	r1, [r7, #8]
 80176f2:	4613      	mov	r3, r2
 80176f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80176f6:	79fa      	ldrb	r2, [r7, #7]
 80176f8:	4944      	ldr	r1, [pc, #272]	@ (801780c <etharp_output_to_arp_index+0x124>)
 80176fa:	4613      	mov	r3, r2
 80176fc:	005b      	lsls	r3, r3, #1
 80176fe:	4413      	add	r3, r2
 8017700:	00db      	lsls	r3, r3, #3
 8017702:	440b      	add	r3, r1
 8017704:	3314      	adds	r3, #20
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b01      	cmp	r3, #1
 801770a:	d806      	bhi.n	801771a <etharp_output_to_arp_index+0x32>
 801770c:	4b40      	ldr	r3, [pc, #256]	@ (8017810 <etharp_output_to_arp_index+0x128>)
 801770e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017712:	4940      	ldr	r1, [pc, #256]	@ (8017814 <etharp_output_to_arp_index+0x12c>)
 8017714:	4840      	ldr	r0, [pc, #256]	@ (8017818 <etharp_output_to_arp_index+0x130>)
 8017716:	f002 feb9 	bl	801a48c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801771a:	79fa      	ldrb	r2, [r7, #7]
 801771c:	493b      	ldr	r1, [pc, #236]	@ (801780c <etharp_output_to_arp_index+0x124>)
 801771e:	4613      	mov	r3, r2
 8017720:	005b      	lsls	r3, r3, #1
 8017722:	4413      	add	r3, r2
 8017724:	00db      	lsls	r3, r3, #3
 8017726:	440b      	add	r3, r1
 8017728:	3314      	adds	r3, #20
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	2b02      	cmp	r3, #2
 801772e:	d153      	bne.n	80177d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017730:	79fa      	ldrb	r2, [r7, #7]
 8017732:	4936      	ldr	r1, [pc, #216]	@ (801780c <etharp_output_to_arp_index+0x124>)
 8017734:	4613      	mov	r3, r2
 8017736:	005b      	lsls	r3, r3, #1
 8017738:	4413      	add	r3, r2
 801773a:	00db      	lsls	r3, r3, #3
 801773c:	440b      	add	r3, r1
 801773e:	3312      	adds	r3, #18
 8017740:	881b      	ldrh	r3, [r3, #0]
 8017742:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8017746:	d919      	bls.n	801777c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017748:	79fa      	ldrb	r2, [r7, #7]
 801774a:	4613      	mov	r3, r2
 801774c:	005b      	lsls	r3, r3, #1
 801774e:	4413      	add	r3, r2
 8017750:	00db      	lsls	r3, r3, #3
 8017752:	4a2e      	ldr	r2, [pc, #184]	@ (801780c <etharp_output_to_arp_index+0x124>)
 8017754:	4413      	add	r3, r2
 8017756:	3304      	adds	r3, #4
 8017758:	4619      	mov	r1, r3
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f000 fb4c 	bl	8017df8 <etharp_request>
 8017760:	4603      	mov	r3, r0
 8017762:	2b00      	cmp	r3, #0
 8017764:	d138      	bne.n	80177d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017766:	79fa      	ldrb	r2, [r7, #7]
 8017768:	4928      	ldr	r1, [pc, #160]	@ (801780c <etharp_output_to_arp_index+0x124>)
 801776a:	4613      	mov	r3, r2
 801776c:	005b      	lsls	r3, r3, #1
 801776e:	4413      	add	r3, r2
 8017770:	00db      	lsls	r3, r3, #3
 8017772:	440b      	add	r3, r1
 8017774:	3314      	adds	r3, #20
 8017776:	2203      	movs	r2, #3
 8017778:	701a      	strb	r2, [r3, #0]
 801777a:	e02d      	b.n	80177d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801777c:	79fa      	ldrb	r2, [r7, #7]
 801777e:	4923      	ldr	r1, [pc, #140]	@ (801780c <etharp_output_to_arp_index+0x124>)
 8017780:	4613      	mov	r3, r2
 8017782:	005b      	lsls	r3, r3, #1
 8017784:	4413      	add	r3, r2
 8017786:	00db      	lsls	r3, r3, #3
 8017788:	440b      	add	r3, r1
 801778a:	3312      	adds	r3, #18
 801778c:	881b      	ldrh	r3, [r3, #0]
 801778e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8017792:	d321      	bcc.n	80177d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017794:	79fa      	ldrb	r2, [r7, #7]
 8017796:	4613      	mov	r3, r2
 8017798:	005b      	lsls	r3, r3, #1
 801779a:	4413      	add	r3, r2
 801779c:	00db      	lsls	r3, r3, #3
 801779e:	4a1b      	ldr	r2, [pc, #108]	@ (801780c <etharp_output_to_arp_index+0x124>)
 80177a0:	4413      	add	r3, r2
 80177a2:	1d19      	adds	r1, r3, #4
 80177a4:	79fa      	ldrb	r2, [r7, #7]
 80177a6:	4613      	mov	r3, r2
 80177a8:	005b      	lsls	r3, r3, #1
 80177aa:	4413      	add	r3, r2
 80177ac:	00db      	lsls	r3, r3, #3
 80177ae:	3308      	adds	r3, #8
 80177b0:	4a16      	ldr	r2, [pc, #88]	@ (801780c <etharp_output_to_arp_index+0x124>)
 80177b2:	4413      	add	r3, r2
 80177b4:	3304      	adds	r3, #4
 80177b6:	461a      	mov	r2, r3
 80177b8:	68f8      	ldr	r0, [r7, #12]
 80177ba:	f000 fafb 	bl	8017db4 <etharp_request_dst>
 80177be:	4603      	mov	r3, r0
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d109      	bne.n	80177d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80177c4:	79fa      	ldrb	r2, [r7, #7]
 80177c6:	4911      	ldr	r1, [pc, #68]	@ (801780c <etharp_output_to_arp_index+0x124>)
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3314      	adds	r3, #20
 80177d4:	2203      	movs	r2, #3
 80177d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80177de:	79fa      	ldrb	r2, [r7, #7]
 80177e0:	4613      	mov	r3, r2
 80177e2:	005b      	lsls	r3, r3, #1
 80177e4:	4413      	add	r3, r2
 80177e6:	00db      	lsls	r3, r3, #3
 80177e8:	3308      	adds	r3, #8
 80177ea:	4a08      	ldr	r2, [pc, #32]	@ (801780c <etharp_output_to_arp_index+0x124>)
 80177ec:	4413      	add	r3, r2
 80177ee:	3304      	adds	r3, #4
 80177f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80177f4:	9200      	str	r2, [sp, #0]
 80177f6:	460a      	mov	r2, r1
 80177f8:	68b9      	ldr	r1, [r7, #8]
 80177fa:	68f8      	ldr	r0, [r7, #12]
 80177fc:	f001 fece 	bl	801959c <ethernet_output>
 8017800:	4603      	mov	r3, r0
}
 8017802:	4618      	mov	r0, r3
 8017804:	3710      	adds	r7, #16
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}
 801780a:	bf00      	nop
 801780c:	2000c7d0 	.word	0x2000c7d0
 8017810:	0801ecf4 	.word	0x0801ecf4
 8017814:	0801ee64 	.word	0x0801ee64
 8017818:	0801ed6c 	.word	0x0801ed6c

0801781c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b08a      	sub	sp, #40	@ 0x28
 8017820:	af02      	add	r7, sp, #8
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d106      	bne.n	8017840 <etharp_output+0x24>
 8017832:	4b73      	ldr	r3, [pc, #460]	@ (8017a00 <etharp_output+0x1e4>)
 8017834:	f240 321e 	movw	r2, #798	@ 0x31e
 8017838:	4972      	ldr	r1, [pc, #456]	@ (8017a04 <etharp_output+0x1e8>)
 801783a:	4873      	ldr	r0, [pc, #460]	@ (8017a08 <etharp_output+0x1ec>)
 801783c:	f002 fe26 	bl	801a48c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d106      	bne.n	8017854 <etharp_output+0x38>
 8017846:	4b6e      	ldr	r3, [pc, #440]	@ (8017a00 <etharp_output+0x1e4>)
 8017848:	f240 321f 	movw	r2, #799	@ 0x31f
 801784c:	496f      	ldr	r1, [pc, #444]	@ (8017a0c <etharp_output+0x1f0>)
 801784e:	486e      	ldr	r0, [pc, #440]	@ (8017a08 <etharp_output+0x1ec>)
 8017850:	f002 fe1c 	bl	801a48c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d106      	bne.n	8017868 <etharp_output+0x4c>
 801785a:	4b69      	ldr	r3, [pc, #420]	@ (8017a00 <etharp_output+0x1e4>)
 801785c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017860:	496b      	ldr	r1, [pc, #428]	@ (8017a10 <etharp_output+0x1f4>)
 8017862:	4869      	ldr	r0, [pc, #420]	@ (8017a08 <etharp_output+0x1ec>)
 8017864:	f002 fe12 	bl	801a48c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	68f9      	ldr	r1, [r7, #12]
 801786e:	4618      	mov	r0, r3
 8017870:	f000 fef6 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8017874:	4603      	mov	r3, r0
 8017876:	2b00      	cmp	r3, #0
 8017878:	d002      	beq.n	8017880 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801787a:	4b66      	ldr	r3, [pc, #408]	@ (8017a14 <etharp_output+0x1f8>)
 801787c:	61fb      	str	r3, [r7, #28]
 801787e:	e0af      	b.n	80179e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017888:	2be0      	cmp	r3, #224	@ 0xe0
 801788a:	d118      	bne.n	80178be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801788c:	2301      	movs	r3, #1
 801788e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017890:	2300      	movs	r3, #0
 8017892:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017894:	235e      	movs	r3, #94	@ 0x5e
 8017896:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	3301      	adds	r3, #1
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80178a2:	b2db      	uxtb	r3, r3
 80178a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	3302      	adds	r3, #2
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	3303      	adds	r3, #3
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80178b6:	f107 0310 	add.w	r3, r7, #16
 80178ba:	61fb      	str	r3, [r7, #28]
 80178bc:	e090      	b.n	80179e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	3304      	adds	r3, #4
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	405a      	eors	r2, r3
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	3308      	adds	r3, #8
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	4013      	ands	r3, r2
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d012      	beq.n	80178fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80178dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d00b      	beq.n	80178fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	330c      	adds	r3, #12
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d003      	beq.n	80178f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	330c      	adds	r3, #12
 80178f2:	61bb      	str	r3, [r7, #24]
 80178f4:	e002      	b.n	80178fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80178f6:	f06f 0303 	mvn.w	r3, #3
 80178fa:	e07d      	b.n	80179f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80178fc:	4b46      	ldr	r3, [pc, #280]	@ (8017a18 <etharp_output+0x1fc>)
 80178fe:	781b      	ldrb	r3, [r3, #0]
 8017900:	4619      	mov	r1, r3
 8017902:	4a46      	ldr	r2, [pc, #280]	@ (8017a1c <etharp_output+0x200>)
 8017904:	460b      	mov	r3, r1
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	440b      	add	r3, r1
 801790a:	00db      	lsls	r3, r3, #3
 801790c:	4413      	add	r3, r2
 801790e:	3314      	adds	r3, #20
 8017910:	781b      	ldrb	r3, [r3, #0]
 8017912:	2b01      	cmp	r3, #1
 8017914:	d925      	bls.n	8017962 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017916:	4b40      	ldr	r3, [pc, #256]	@ (8017a18 <etharp_output+0x1fc>)
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	4619      	mov	r1, r3
 801791c:	4a3f      	ldr	r2, [pc, #252]	@ (8017a1c <etharp_output+0x200>)
 801791e:	460b      	mov	r3, r1
 8017920:	005b      	lsls	r3, r3, #1
 8017922:	440b      	add	r3, r1
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	4413      	add	r3, r2
 8017928:	3308      	adds	r3, #8
 801792a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801792c:	68fa      	ldr	r2, [r7, #12]
 801792e:	429a      	cmp	r2, r3
 8017930:	d117      	bne.n	8017962 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017932:	69bb      	ldr	r3, [r7, #24]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	4b38      	ldr	r3, [pc, #224]	@ (8017a18 <etharp_output+0x1fc>)
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	4618      	mov	r0, r3
 801793c:	4937      	ldr	r1, [pc, #220]	@ (8017a1c <etharp_output+0x200>)
 801793e:	4603      	mov	r3, r0
 8017940:	005b      	lsls	r3, r3, #1
 8017942:	4403      	add	r3, r0
 8017944:	00db      	lsls	r3, r3, #3
 8017946:	440b      	add	r3, r1
 8017948:	3304      	adds	r3, #4
 801794a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801794c:	429a      	cmp	r2, r3
 801794e:	d108      	bne.n	8017962 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017950:	4b31      	ldr	r3, [pc, #196]	@ (8017a18 <etharp_output+0x1fc>)
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	461a      	mov	r2, r3
 8017956:	68b9      	ldr	r1, [r7, #8]
 8017958:	68f8      	ldr	r0, [r7, #12]
 801795a:	f7ff fec5 	bl	80176e8 <etharp_output_to_arp_index>
 801795e:	4603      	mov	r3, r0
 8017960:	e04a      	b.n	80179f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017962:	2300      	movs	r3, #0
 8017964:	75fb      	strb	r3, [r7, #23]
 8017966:	e031      	b.n	80179cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017968:	7dfa      	ldrb	r2, [r7, #23]
 801796a:	492c      	ldr	r1, [pc, #176]	@ (8017a1c <etharp_output+0x200>)
 801796c:	4613      	mov	r3, r2
 801796e:	005b      	lsls	r3, r3, #1
 8017970:	4413      	add	r3, r2
 8017972:	00db      	lsls	r3, r3, #3
 8017974:	440b      	add	r3, r1
 8017976:	3314      	adds	r3, #20
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	2b01      	cmp	r3, #1
 801797c:	d923      	bls.n	80179c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801797e:	7dfa      	ldrb	r2, [r7, #23]
 8017980:	4926      	ldr	r1, [pc, #152]	@ (8017a1c <etharp_output+0x200>)
 8017982:	4613      	mov	r3, r2
 8017984:	005b      	lsls	r3, r3, #1
 8017986:	4413      	add	r3, r2
 8017988:	00db      	lsls	r3, r3, #3
 801798a:	440b      	add	r3, r1
 801798c:	3308      	adds	r3, #8
 801798e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017990:	68fa      	ldr	r2, [r7, #12]
 8017992:	429a      	cmp	r2, r3
 8017994:	d117      	bne.n	80179c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017996:	69bb      	ldr	r3, [r7, #24]
 8017998:	6819      	ldr	r1, [r3, #0]
 801799a:	7dfa      	ldrb	r2, [r7, #23]
 801799c:	481f      	ldr	r0, [pc, #124]	@ (8017a1c <etharp_output+0x200>)
 801799e:	4613      	mov	r3, r2
 80179a0:	005b      	lsls	r3, r3, #1
 80179a2:	4413      	add	r3, r2
 80179a4:	00db      	lsls	r3, r3, #3
 80179a6:	4403      	add	r3, r0
 80179a8:	3304      	adds	r3, #4
 80179aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80179ac:	4299      	cmp	r1, r3
 80179ae:	d10a      	bne.n	80179c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80179b0:	4a19      	ldr	r2, [pc, #100]	@ (8017a18 <etharp_output+0x1fc>)
 80179b2:	7dfb      	ldrb	r3, [r7, #23]
 80179b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80179b6:	7dfb      	ldrb	r3, [r7, #23]
 80179b8:	461a      	mov	r2, r3
 80179ba:	68b9      	ldr	r1, [r7, #8]
 80179bc:	68f8      	ldr	r0, [r7, #12]
 80179be:	f7ff fe93 	bl	80176e8 <etharp_output_to_arp_index>
 80179c2:	4603      	mov	r3, r0
 80179c4:	e018      	b.n	80179f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80179c6:	7dfb      	ldrb	r3, [r7, #23]
 80179c8:	3301      	adds	r3, #1
 80179ca:	75fb      	strb	r3, [r7, #23]
 80179cc:	7dfb      	ldrb	r3, [r7, #23]
 80179ce:	2b09      	cmp	r3, #9
 80179d0:	d9ca      	bls.n	8017968 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80179d2:	68ba      	ldr	r2, [r7, #8]
 80179d4:	69b9      	ldr	r1, [r7, #24]
 80179d6:	68f8      	ldr	r0, [r7, #12]
 80179d8:	f000 f822 	bl	8017a20 <etharp_query>
 80179dc:	4603      	mov	r3, r0
 80179de:	e00b      	b.n	80179f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80179e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	69fb      	ldr	r3, [r7, #28]
 80179ee:	68b9      	ldr	r1, [r7, #8]
 80179f0:	68f8      	ldr	r0, [r7, #12]
 80179f2:	f001 fdd3 	bl	801959c <ethernet_output>
 80179f6:	4603      	mov	r3, r0
}
 80179f8:	4618      	mov	r0, r3
 80179fa:	3720      	adds	r7, #32
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}
 8017a00:	0801ecf4 	.word	0x0801ecf4
 8017a04:	0801ee44 	.word	0x0801ee44
 8017a08:	0801ed6c 	.word	0x0801ed6c
 8017a0c:	0801ee94 	.word	0x0801ee94
 8017a10:	0801ee34 	.word	0x0801ee34
 8017a14:	0801f538 	.word	0x0801f538
 8017a18:	2000c8c0 	.word	0x2000c8c0
 8017a1c:	2000c7d0 	.word	0x2000c7d0

08017a20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b08c      	sub	sp, #48	@ 0x30
 8017a24:	af02      	add	r7, sp, #8
 8017a26:	60f8      	str	r0, [r7, #12]
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	3326      	adds	r3, #38	@ 0x26
 8017a30:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017a32:	23ff      	movs	r3, #255	@ 0xff
 8017a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	68f9      	ldr	r1, [r7, #12]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f000 fe0c 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d10c      	bne.n	8017a68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a56:	2be0      	cmp	r3, #224	@ 0xe0
 8017a58:	d006      	beq.n	8017a68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d003      	beq.n	8017a68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d102      	bne.n	8017a6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017a68:	f06f 030f 	mvn.w	r3, #15
 8017a6c:	e101      	b.n	8017c72 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017a6e:	68fa      	ldr	r2, [r7, #12]
 8017a70:	2101      	movs	r1, #1
 8017a72:	68b8      	ldr	r0, [r7, #8]
 8017a74:	f7ff fb90 	bl	8017198 <etharp_find_entry>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017a7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	da02      	bge.n	8017a8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017a84:	8a7b      	ldrh	r3, [r7, #18]
 8017a86:	b25b      	sxtb	r3, r3
 8017a88:	e0f3      	b.n	8017c72 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017a8a:	8a7b      	ldrh	r3, [r7, #18]
 8017a8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8017a8e:	d906      	bls.n	8017a9e <etharp_query+0x7e>
 8017a90:	4b7a      	ldr	r3, [pc, #488]	@ (8017c7c <etharp_query+0x25c>)
 8017a92:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8017a96:	497a      	ldr	r1, [pc, #488]	@ (8017c80 <etharp_query+0x260>)
 8017a98:	487a      	ldr	r0, [pc, #488]	@ (8017c84 <etharp_query+0x264>)
 8017a9a:	f002 fcf7 	bl	801a48c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017a9e:	8a7b      	ldrh	r3, [r7, #18]
 8017aa0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017aa2:	7c7a      	ldrb	r2, [r7, #17]
 8017aa4:	4978      	ldr	r1, [pc, #480]	@ (8017c88 <etharp_query+0x268>)
 8017aa6:	4613      	mov	r3, r2
 8017aa8:	005b      	lsls	r3, r3, #1
 8017aaa:	4413      	add	r3, r2
 8017aac:	00db      	lsls	r3, r3, #3
 8017aae:	440b      	add	r3, r1
 8017ab0:	3314      	adds	r3, #20
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d115      	bne.n	8017ae4 <etharp_query+0xc4>
    is_new_entry = 1;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017abc:	7c7a      	ldrb	r2, [r7, #17]
 8017abe:	4972      	ldr	r1, [pc, #456]	@ (8017c88 <etharp_query+0x268>)
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	005b      	lsls	r3, r3, #1
 8017ac4:	4413      	add	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	440b      	add	r3, r1
 8017aca:	3314      	adds	r3, #20
 8017acc:	2201      	movs	r2, #1
 8017ace:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017ad0:	7c7a      	ldrb	r2, [r7, #17]
 8017ad2:	496d      	ldr	r1, [pc, #436]	@ (8017c88 <etharp_query+0x268>)
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	005b      	lsls	r3, r3, #1
 8017ad8:	4413      	add	r3, r2
 8017ada:	00db      	lsls	r3, r3, #3
 8017adc:	440b      	add	r3, r1
 8017ade:	3308      	adds	r3, #8
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017ae4:	7c7a      	ldrb	r2, [r7, #17]
 8017ae6:	4968      	ldr	r1, [pc, #416]	@ (8017c88 <etharp_query+0x268>)
 8017ae8:	4613      	mov	r3, r2
 8017aea:	005b      	lsls	r3, r3, #1
 8017aec:	4413      	add	r3, r2
 8017aee:	00db      	lsls	r3, r3, #3
 8017af0:	440b      	add	r3, r1
 8017af2:	3314      	adds	r3, #20
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	d011      	beq.n	8017b1e <etharp_query+0xfe>
 8017afa:	7c7a      	ldrb	r2, [r7, #17]
 8017afc:	4962      	ldr	r1, [pc, #392]	@ (8017c88 <etharp_query+0x268>)
 8017afe:	4613      	mov	r3, r2
 8017b00:	005b      	lsls	r3, r3, #1
 8017b02:	4413      	add	r3, r2
 8017b04:	00db      	lsls	r3, r3, #3
 8017b06:	440b      	add	r3, r1
 8017b08:	3314      	adds	r3, #20
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d806      	bhi.n	8017b1e <etharp_query+0xfe>
 8017b10:	4b5a      	ldr	r3, [pc, #360]	@ (8017c7c <etharp_query+0x25c>)
 8017b12:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8017b16:	495d      	ldr	r1, [pc, #372]	@ (8017c8c <etharp_query+0x26c>)
 8017b18:	485a      	ldr	r0, [pc, #360]	@ (8017c84 <etharp_query+0x264>)
 8017b1a:	f002 fcb7 	bl	801a48c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017b1e:	6a3b      	ldr	r3, [r7, #32]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d102      	bne.n	8017b2a <etharp_query+0x10a>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d10c      	bne.n	8017b44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017b2a:	68b9      	ldr	r1, [r7, #8]
 8017b2c:	68f8      	ldr	r0, [r7, #12]
 8017b2e:	f000 f963 	bl	8017df8 <etharp_request>
 8017b32:	4603      	mov	r3, r0
 8017b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d102      	bne.n	8017b44 <etharp_query+0x124>
      return result;
 8017b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017b42:	e096      	b.n	8017c72 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d106      	bne.n	8017b58 <etharp_query+0x138>
 8017b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8017c7c <etharp_query+0x25c>)
 8017b4c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017b50:	494f      	ldr	r1, [pc, #316]	@ (8017c90 <etharp_query+0x270>)
 8017b52:	484c      	ldr	r0, [pc, #304]	@ (8017c84 <etharp_query+0x264>)
 8017b54:	f002 fc9a 	bl	801a48c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017b58:	7c7a      	ldrb	r2, [r7, #17]
 8017b5a:	494b      	ldr	r1, [pc, #300]	@ (8017c88 <etharp_query+0x268>)
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	005b      	lsls	r3, r3, #1
 8017b60:	4413      	add	r3, r2
 8017b62:	00db      	lsls	r3, r3, #3
 8017b64:	440b      	add	r3, r1
 8017b66:	3314      	adds	r3, #20
 8017b68:	781b      	ldrb	r3, [r3, #0]
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d917      	bls.n	8017b9e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017b6e:	4a49      	ldr	r2, [pc, #292]	@ (8017c94 <etharp_query+0x274>)
 8017b70:	7c7b      	ldrb	r3, [r7, #17]
 8017b72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017b74:	7c7a      	ldrb	r2, [r7, #17]
 8017b76:	4613      	mov	r3, r2
 8017b78:	005b      	lsls	r3, r3, #1
 8017b7a:	4413      	add	r3, r2
 8017b7c:	00db      	lsls	r3, r3, #3
 8017b7e:	3308      	adds	r3, #8
 8017b80:	4a41      	ldr	r2, [pc, #260]	@ (8017c88 <etharp_query+0x268>)
 8017b82:	4413      	add	r3, r2
 8017b84:	3304      	adds	r3, #4
 8017b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017b8a:	9200      	str	r2, [sp, #0]
 8017b8c:	697a      	ldr	r2, [r7, #20]
 8017b8e:	6879      	ldr	r1, [r7, #4]
 8017b90:	68f8      	ldr	r0, [r7, #12]
 8017b92:	f001 fd03 	bl	801959c <ethernet_output>
 8017b96:	4603      	mov	r3, r0
 8017b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017b9c:	e067      	b.n	8017c6e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b9e:	7c7a      	ldrb	r2, [r7, #17]
 8017ba0:	4939      	ldr	r1, [pc, #228]	@ (8017c88 <etharp_query+0x268>)
 8017ba2:	4613      	mov	r3, r2
 8017ba4:	005b      	lsls	r3, r3, #1
 8017ba6:	4413      	add	r3, r2
 8017ba8:	00db      	lsls	r3, r3, #3
 8017baa:	440b      	add	r3, r1
 8017bac:	3314      	adds	r3, #20
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	2b01      	cmp	r3, #1
 8017bb2:	d15c      	bne.n	8017c6e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017bbc:	e01c      	b.n	8017bf8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	895a      	ldrh	r2, [r3, #10]
 8017bc2:	69fb      	ldr	r3, [r7, #28]
 8017bc4:	891b      	ldrh	r3, [r3, #8]
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d10a      	bne.n	8017be0 <etharp_query+0x1c0>
 8017bca:	69fb      	ldr	r3, [r7, #28]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d006      	beq.n	8017be0 <etharp_query+0x1c0>
 8017bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8017c7c <etharp_query+0x25c>)
 8017bd4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017bd8:	492f      	ldr	r1, [pc, #188]	@ (8017c98 <etharp_query+0x278>)
 8017bda:	482a      	ldr	r0, [pc, #168]	@ (8017c84 <etharp_query+0x264>)
 8017bdc:	f002 fc56 	bl	801a48c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	7b1b      	ldrb	r3, [r3, #12]
 8017be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d002      	beq.n	8017bf2 <etharp_query+0x1d2>
        copy_needed = 1;
 8017bec:	2301      	movs	r3, #1
 8017bee:	61bb      	str	r3, [r7, #24]
        break;
 8017bf0:	e005      	b.n	8017bfe <etharp_query+0x1de>
      }
      p = p->next;
 8017bf2:	69fb      	ldr	r3, [r7, #28]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d1df      	bne.n	8017bbe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017bfe:	69bb      	ldr	r3, [r7, #24]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d007      	beq.n	8017c14 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8017c0a:	200e      	movs	r0, #14
 8017c0c:	f7f8 fe76 	bl	80108fc <pbuf_clone>
 8017c10:	61f8      	str	r0, [r7, #28]
 8017c12:	e004      	b.n	8017c1e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017c18:	69f8      	ldr	r0, [r7, #28]
 8017c1a:	f7f8 fcad 	bl	8010578 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d021      	beq.n	8017c68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017c24:	7c7a      	ldrb	r2, [r7, #17]
 8017c26:	4918      	ldr	r1, [pc, #96]	@ (8017c88 <etharp_query+0x268>)
 8017c28:	4613      	mov	r3, r2
 8017c2a:	005b      	lsls	r3, r3, #1
 8017c2c:	4413      	add	r3, r2
 8017c2e:	00db      	lsls	r3, r3, #3
 8017c30:	440b      	add	r3, r1
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d00a      	beq.n	8017c4e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017c38:	7c7a      	ldrb	r2, [r7, #17]
 8017c3a:	4913      	ldr	r1, [pc, #76]	@ (8017c88 <etharp_query+0x268>)
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	005b      	lsls	r3, r3, #1
 8017c40:	4413      	add	r3, r2
 8017c42:	00db      	lsls	r3, r3, #3
 8017c44:	440b      	add	r3, r1
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f8 fbef 	bl	801042c <pbuf_free>
      }
      arp_table[i].q = p;
 8017c4e:	7c7a      	ldrb	r2, [r7, #17]
 8017c50:	490d      	ldr	r1, [pc, #52]	@ (8017c88 <etharp_query+0x268>)
 8017c52:	4613      	mov	r3, r2
 8017c54:	005b      	lsls	r3, r3, #1
 8017c56:	4413      	add	r3, r2
 8017c58:	00db      	lsls	r3, r3, #3
 8017c5a:	440b      	add	r3, r1
 8017c5c:	69fa      	ldr	r2, [r7, #28]
 8017c5e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017c60:	2300      	movs	r3, #0
 8017c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017c66:	e002      	b.n	8017c6e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017c68:	23ff      	movs	r3, #255	@ 0xff
 8017c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017c6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3728      	adds	r7, #40	@ 0x28
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801ecf4 	.word	0x0801ecf4
 8017c80:	0801eea0 	.word	0x0801eea0
 8017c84:	0801ed6c 	.word	0x0801ed6c
 8017c88:	2000c7d0 	.word	0x2000c7d0
 8017c8c:	0801eeb0 	.word	0x0801eeb0
 8017c90:	0801ee94 	.word	0x0801ee94
 8017c94:	2000c8c0 	.word	0x2000c8c0
 8017c98:	0801eed8 	.word	0x0801eed8

08017c9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b08a      	sub	sp, #40	@ 0x28
 8017ca0:	af02      	add	r7, sp, #8
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
 8017ca8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017caa:	2300      	movs	r3, #0
 8017cac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d106      	bne.n	8017cc2 <etharp_raw+0x26>
 8017cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8017da0 <etharp_raw+0x104>)
 8017cb6:	f240 4257 	movw	r2, #1111	@ 0x457
 8017cba:	493a      	ldr	r1, [pc, #232]	@ (8017da4 <etharp_raw+0x108>)
 8017cbc:	483a      	ldr	r0, [pc, #232]	@ (8017da8 <etharp_raw+0x10c>)
 8017cbe:	f002 fbe5 	bl	801a48c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017cc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017cc6:	211c      	movs	r1, #28
 8017cc8:	200e      	movs	r0, #14
 8017cca:	f7f8 f8cb 	bl	800fe64 <pbuf_alloc>
 8017cce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017cd0:	69bb      	ldr	r3, [r7, #24]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d102      	bne.n	8017cdc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017cda:	e05d      	b.n	8017d98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017cdc:	69bb      	ldr	r3, [r7, #24]
 8017cde:	895b      	ldrh	r3, [r3, #10]
 8017ce0:	2b1b      	cmp	r3, #27
 8017ce2:	d806      	bhi.n	8017cf2 <etharp_raw+0x56>
 8017ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8017da0 <etharp_raw+0x104>)
 8017ce6:	f240 4262 	movw	r2, #1122	@ 0x462
 8017cea:	4930      	ldr	r1, [pc, #192]	@ (8017dac <etharp_raw+0x110>)
 8017cec:	482e      	ldr	r0, [pc, #184]	@ (8017da8 <etharp_raw+0x10c>)
 8017cee:	f002 fbcd 	bl	801a48c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017cf2:	69bb      	ldr	r3, [r7, #24]
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017cf8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7f6 ffd6 	bl	800ecac <lwip_htons>
 8017d00:	4603      	mov	r3, r0
 8017d02:	461a      	mov	r2, r3
 8017d04:	697b      	ldr	r3, [r7, #20]
 8017d06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017d0e:	2b06      	cmp	r3, #6
 8017d10:	d006      	beq.n	8017d20 <etharp_raw+0x84>
 8017d12:	4b23      	ldr	r3, [pc, #140]	@ (8017da0 <etharp_raw+0x104>)
 8017d14:	f240 4269 	movw	r2, #1129	@ 0x469
 8017d18:	4925      	ldr	r1, [pc, #148]	@ (8017db0 <etharp_raw+0x114>)
 8017d1a:	4823      	ldr	r0, [pc, #140]	@ (8017da8 <etharp_raw+0x10c>)
 8017d1c:	f002 fbb6 	bl	801a48c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017d20:	697b      	ldr	r3, [r7, #20]
 8017d22:	3308      	adds	r3, #8
 8017d24:	2206      	movs	r2, #6
 8017d26:	6839      	ldr	r1, [r7, #0]
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f002 fd4e 	bl	801a7ca <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017d2e:	697b      	ldr	r3, [r7, #20]
 8017d30:	3312      	adds	r3, #18
 8017d32:	2206      	movs	r2, #6
 8017d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017d36:	4618      	mov	r0, r3
 8017d38:	f002 fd47 	bl	801a7ca <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	330e      	adds	r3, #14
 8017d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d42:	6812      	ldr	r2, [r2, #0]
 8017d44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	3318      	adds	r3, #24
 8017d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d4c:	6812      	ldr	r2, [r2, #0]
 8017d4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	2200      	movs	r2, #0
 8017d54:	701a      	strb	r2, [r3, #0]
 8017d56:	2200      	movs	r2, #0
 8017d58:	f042 0201 	orr.w	r2, r2, #1
 8017d5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	2200      	movs	r2, #0
 8017d62:	f042 0208 	orr.w	r2, r2, #8
 8017d66:	709a      	strb	r2, [r3, #2]
 8017d68:	2200      	movs	r2, #0
 8017d6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	2206      	movs	r2, #6
 8017d70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	2204      	movs	r2, #4
 8017d76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017d78:	f640 0306 	movw	r3, #2054	@ 0x806
 8017d7c:	9300      	str	r3, [sp, #0]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	68ba      	ldr	r2, [r7, #8]
 8017d82:	69b9      	ldr	r1, [r7, #24]
 8017d84:	68f8      	ldr	r0, [r7, #12]
 8017d86:	f001 fc09 	bl	801959c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017d8a:	69b8      	ldr	r0, [r7, #24]
 8017d8c:	f7f8 fb4e 	bl	801042c <pbuf_free>
  p = NULL;
 8017d90:	2300      	movs	r3, #0
 8017d92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3720      	adds	r7, #32
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	0801ecf4 	.word	0x0801ecf4
 8017da4:	0801ee44 	.word	0x0801ee44
 8017da8:	0801ed6c 	.word	0x0801ed6c
 8017dac:	0801eef4 	.word	0x0801eef4
 8017db0:	0801ef28 	.word	0x0801ef28

08017db4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b088      	sub	sp, #32
 8017db8:	af04      	add	r7, sp, #16
 8017dba:	60f8      	str	r0, [r7, #12]
 8017dbc:	60b9      	str	r1, [r7, #8]
 8017dbe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017dd0:	2201      	movs	r2, #1
 8017dd2:	9203      	str	r2, [sp, #12]
 8017dd4:	68ba      	ldr	r2, [r7, #8]
 8017dd6:	9202      	str	r2, [sp, #8]
 8017dd8:	4a06      	ldr	r2, [pc, #24]	@ (8017df4 <etharp_request_dst+0x40>)
 8017dda:	9201      	str	r2, [sp, #4]
 8017ddc:	9300      	str	r3, [sp, #0]
 8017dde:	4603      	mov	r3, r0
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	68f8      	ldr	r0, [r7, #12]
 8017de4:	f7ff ff5a 	bl	8017c9c <etharp_raw>
 8017de8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3710      	adds	r7, #16
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
 8017df2:	bf00      	nop
 8017df4:	0801f540 	.word	0x0801f540

08017df8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b082      	sub	sp, #8
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
 8017e00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017e02:	4a05      	ldr	r2, [pc, #20]	@ (8017e18 <etharp_request+0x20>)
 8017e04:	6839      	ldr	r1, [r7, #0]
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f7ff ffd4 	bl	8017db4 <etharp_request_dst>
 8017e0c:	4603      	mov	r3, r0
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3708      	adds	r7, #8
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}
 8017e16:	bf00      	nop
 8017e18:	0801f538 	.word	0x0801f538

08017e1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b08e      	sub	sp, #56	@ 0x38
 8017e20:	af04      	add	r7, sp, #16
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017e26:	4b78      	ldr	r3, [pc, #480]	@ (8018008 <icmp_input+0x1ec>)
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	781b      	ldrb	r3, [r3, #0]
 8017e30:	f003 030f 	and.w	r3, r3, #15
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	009b      	lsls	r3, r3, #2
 8017e38:	b2db      	uxtb	r3, r3
 8017e3a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8017e3c:	8bfb      	ldrh	r3, [r7, #30]
 8017e3e:	2b13      	cmp	r3, #19
 8017e40:	f240 80cf 	bls.w	8017fe2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	895b      	ldrh	r3, [r3, #10]
 8017e48:	2b03      	cmp	r3, #3
 8017e4a:	f240 80cc 	bls.w	8017fe6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	781b      	ldrb	r3, [r3, #0]
 8017e54:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017e56:	7f7b      	ldrb	r3, [r7, #29]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	f000 80bb 	beq.w	8017fd4 <icmp_input+0x1b8>
 8017e5e:	2b08      	cmp	r3, #8
 8017e60:	f040 80bb 	bne.w	8017fda <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017e64:	4b69      	ldr	r3, [pc, #420]	@ (801800c <icmp_input+0x1f0>)
 8017e66:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e68:	4b67      	ldr	r3, [pc, #412]	@ (8018008 <icmp_input+0x1ec>)
 8017e6a:	695b      	ldr	r3, [r3, #20]
 8017e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017e70:	2be0      	cmp	r3, #224	@ 0xe0
 8017e72:	d102      	bne.n	8017e7a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	3304      	adds	r3, #4
 8017e78:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017e7a:	4b63      	ldr	r3, [pc, #396]	@ (8018008 <icmp_input+0x1ec>)
 8017e7c:	695b      	ldr	r3, [r3, #20]
 8017e7e:	4a62      	ldr	r2, [pc, #392]	@ (8018008 <icmp_input+0x1ec>)
 8017e80:	6812      	ldr	r2, [r2, #0]
 8017e82:	4611      	mov	r1, r2
 8017e84:	4618      	mov	r0, r3
 8017e86:	f000 fbeb 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d002      	beq.n	8017e96 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	3304      	adds	r3, #4
 8017e94:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	891b      	ldrh	r3, [r3, #8]
 8017e9a:	2b07      	cmp	r3, #7
 8017e9c:	f240 80a5 	bls.w	8017fea <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017ea0:	8bfb      	ldrh	r3, [r7, #30]
 8017ea2:	330e      	adds	r3, #14
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7f8 fa2a 	bl	8010300 <pbuf_add_header>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d04b      	beq.n	8017f4a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	891a      	ldrh	r2, [r3, #8]
 8017eb6:	8bfb      	ldrh	r3, [r7, #30]
 8017eb8:	4413      	add	r3, r2
 8017eba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	891b      	ldrh	r3, [r3, #8]
 8017ec0:	8b7a      	ldrh	r2, [r7, #26]
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	f0c0 8096 	bcc.w	8017ff4 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017ec8:	8b7b      	ldrh	r3, [r7, #26]
 8017eca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017ece:	4619      	mov	r1, r3
 8017ed0:	200e      	movs	r0, #14
 8017ed2:	f7f7 ffc7 	bl	800fe64 <pbuf_alloc>
 8017ed6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	f000 808c 	beq.w	8017ff8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	895b      	ldrh	r3, [r3, #10]
 8017ee4:	461a      	mov	r2, r3
 8017ee6:	8bfb      	ldrh	r3, [r7, #30]
 8017ee8:	3308      	adds	r3, #8
 8017eea:	429a      	cmp	r2, r3
 8017eec:	d203      	bcs.n	8017ef6 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017eee:	6978      	ldr	r0, [r7, #20]
 8017ef0:	f7f8 fa9c 	bl	801042c <pbuf_free>
          goto icmperr;
 8017ef4:	e081      	b.n	8017ffa <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	8bfa      	ldrh	r2, [r7, #30]
 8017efc:	6a39      	ldr	r1, [r7, #32]
 8017efe:	4618      	mov	r0, r3
 8017f00:	f002 fc63 	bl	801a7ca <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017f04:	8bfb      	ldrh	r3, [r7, #30]
 8017f06:	4619      	mov	r1, r3
 8017f08:	6978      	ldr	r0, [r7, #20]
 8017f0a:	f7f8 fa09 	bl	8010320 <pbuf_remove_header>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d009      	beq.n	8017f28 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017f14:	4b3e      	ldr	r3, [pc, #248]	@ (8018010 <icmp_input+0x1f4>)
 8017f16:	22b6      	movs	r2, #182	@ 0xb6
 8017f18:	493e      	ldr	r1, [pc, #248]	@ (8018014 <icmp_input+0x1f8>)
 8017f1a:	483f      	ldr	r0, [pc, #252]	@ (8018018 <icmp_input+0x1fc>)
 8017f1c:	f002 fab6 	bl	801a48c <iprintf>
          pbuf_free(r);
 8017f20:	6978      	ldr	r0, [r7, #20]
 8017f22:	f7f8 fa83 	bl	801042c <pbuf_free>
          goto icmperr;
 8017f26:	e068      	b.n	8017ffa <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017f28:	6879      	ldr	r1, [r7, #4]
 8017f2a:	6978      	ldr	r0, [r7, #20]
 8017f2c:	f7f8 fba2 	bl	8010674 <pbuf_copy>
 8017f30:	4603      	mov	r3, r0
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d003      	beq.n	8017f3e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017f36:	6978      	ldr	r0, [r7, #20]
 8017f38:	f7f8 fa78 	bl	801042c <pbuf_free>
          goto icmperr;
 8017f3c:	e05d      	b.n	8017ffa <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7f8 fa74 	bl	801042c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017f44:	697b      	ldr	r3, [r7, #20]
 8017f46:	607b      	str	r3, [r7, #4]
 8017f48:	e00f      	b.n	8017f6a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017f4a:	8bfb      	ldrh	r3, [r7, #30]
 8017f4c:	330e      	adds	r3, #14
 8017f4e:	4619      	mov	r1, r3
 8017f50:	6878      	ldr	r0, [r7, #4]
 8017f52:	f7f8 f9e5 	bl	8010320 <pbuf_remove_header>
 8017f56:	4603      	mov	r3, r0
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d006      	beq.n	8017f6a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8018010 <icmp_input+0x1f4>)
 8017f5e:	22c7      	movs	r2, #199	@ 0xc7
 8017f60:	492e      	ldr	r1, [pc, #184]	@ (801801c <icmp_input+0x200>)
 8017f62:	482d      	ldr	r0, [pc, #180]	@ (8018018 <icmp_input+0x1fc>)
 8017f64:	f002 fa92 	bl	801a48c <iprintf>
          goto icmperr;
 8017f68:	e047      	b.n	8017ffa <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017f70:	8bfb      	ldrh	r3, [r7, #30]
 8017f72:	4619      	mov	r1, r3
 8017f74:	6878      	ldr	r0, [r7, #4]
 8017f76:	f7f8 f9c3 	bl	8010300 <pbuf_add_header>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d12b      	bne.n	8017fd8 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f88:	681a      	ldr	r2, [r3, #0]
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8018008 <icmp_input+0x1ec>)
 8017f90:	691a      	ldr	r2, [r3, #16]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017f96:	693b      	ldr	r3, [r7, #16]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	709a      	strb	r2, [r3, #2]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	22ff      	movs	r2, #255	@ 0xff
 8017faa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	729a      	strb	r2, [r3, #10]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	9302      	str	r3, [sp, #8]
 8017fba:	2301      	movs	r3, #1
 8017fbc:	9301      	str	r3, [sp, #4]
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	9300      	str	r3, [sp, #0]
 8017fc2:	23ff      	movs	r3, #255	@ 0xff
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f000 fa71 	bl	80184b0 <ip4_output_if>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017fd2:	e001      	b.n	8017fd8 <icmp_input+0x1bc>
      break;
 8017fd4:	bf00      	nop
 8017fd6:	e000      	b.n	8017fda <icmp_input+0x1be>
      break;
 8017fd8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f7f8 fa26 	bl	801042c <pbuf_free>
  return;
 8017fe0:	e00f      	b.n	8018002 <icmp_input+0x1e6>
    goto lenerr;
 8017fe2:	bf00      	nop
 8017fe4:	e002      	b.n	8017fec <icmp_input+0x1d0>
    goto lenerr;
 8017fe6:	bf00      	nop
 8017fe8:	e000      	b.n	8017fec <icmp_input+0x1d0>
        goto lenerr;
 8017fea:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f7f8 fa1d 	bl	801042c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ff2:	e006      	b.n	8018002 <icmp_input+0x1e6>
          goto icmperr;
 8017ff4:	bf00      	nop
 8017ff6:	e000      	b.n	8017ffa <icmp_input+0x1de>
          goto icmperr;
 8017ff8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7f8 fa16 	bl	801042c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018000:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018002:	3728      	adds	r7, #40	@ 0x28
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}
 8018008:	2000901c 	.word	0x2000901c
 801800c:	20009030 	.word	0x20009030
 8018010:	0801ef6c 	.word	0x0801ef6c
 8018014:	0801efa4 	.word	0x0801efa4
 8018018:	0801efdc 	.word	0x0801efdc
 801801c:	0801f004 	.word	0x0801f004

08018020 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	460b      	mov	r3, r1
 801802a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801802c:	78fb      	ldrb	r3, [r7, #3]
 801802e:	461a      	mov	r2, r3
 8018030:	2103      	movs	r1, #3
 8018032:	6878      	ldr	r0, [r7, #4]
 8018034:	f000 f814 	bl	8018060 <icmp_send_response>
}
 8018038:	bf00      	nop
 801803a:	3708      	adds	r7, #8
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
 8018048:	460b      	mov	r3, r1
 801804a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801804c:	78fb      	ldrb	r3, [r7, #3]
 801804e:	461a      	mov	r2, r3
 8018050:	210b      	movs	r1, #11
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	f000 f804 	bl	8018060 <icmp_send_response>
}
 8018058:	bf00      	nop
 801805a:	3708      	adds	r7, #8
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b08c      	sub	sp, #48	@ 0x30
 8018064:	af04      	add	r7, sp, #16
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	460b      	mov	r3, r1
 801806a:	70fb      	strb	r3, [r7, #3]
 801806c:	4613      	mov	r3, r2
 801806e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018070:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018074:	2124      	movs	r1, #36	@ 0x24
 8018076:	2022      	movs	r0, #34	@ 0x22
 8018078:	f7f7 fef4 	bl	800fe64 <pbuf_alloc>
 801807c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801807e:	69fb      	ldr	r3, [r7, #28]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d04c      	beq.n	801811e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	895b      	ldrh	r3, [r3, #10]
 8018088:	2b23      	cmp	r3, #35	@ 0x23
 801808a:	d806      	bhi.n	801809a <icmp_send_response+0x3a>
 801808c:	4b26      	ldr	r3, [pc, #152]	@ (8018128 <icmp_send_response+0xc8>)
 801808e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018092:	4926      	ldr	r1, [pc, #152]	@ (801812c <icmp_send_response+0xcc>)
 8018094:	4826      	ldr	r0, [pc, #152]	@ (8018130 <icmp_send_response+0xd0>)
 8018096:	f002 f9f9 	bl	801a48c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	685b      	ldr	r3, [r3, #4]
 80180a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	78fa      	ldrb	r2, [r7, #3]
 80180aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	78ba      	ldrb	r2, [r7, #2]
 80180b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	2200      	movs	r2, #0
 80180b6:	711a      	strb	r2, [r3, #4]
 80180b8:	2200      	movs	r2, #0
 80180ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	2200      	movs	r2, #0
 80180c0:	719a      	strb	r2, [r3, #6]
 80180c2:	2200      	movs	r2, #0
 80180c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	685b      	ldr	r3, [r3, #4]
 80180ca:	f103 0008 	add.w	r0, r3, #8
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	685b      	ldr	r3, [r3, #4]
 80180d2:	221c      	movs	r2, #28
 80180d4:	4619      	mov	r1, r3
 80180d6:	f002 fb78 	bl	801a7ca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80180da:	69bb      	ldr	r3, [r7, #24]
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80180e0:	f107 030c 	add.w	r3, r7, #12
 80180e4:	4618      	mov	r0, r3
 80180e6:	f000 f825 	bl	8018134 <ip4_route>
 80180ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80180ec:	693b      	ldr	r3, [r7, #16]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d011      	beq.n	8018116 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	2200      	movs	r2, #0
 80180f6:	709a      	strb	r2, [r3, #2]
 80180f8:	2200      	movs	r2, #0
 80180fa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80180fc:	f107 020c 	add.w	r2, r7, #12
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	9302      	str	r3, [sp, #8]
 8018104:	2301      	movs	r3, #1
 8018106:	9301      	str	r3, [sp, #4]
 8018108:	2300      	movs	r3, #0
 801810a:	9300      	str	r3, [sp, #0]
 801810c:	23ff      	movs	r3, #255	@ 0xff
 801810e:	2100      	movs	r1, #0
 8018110:	69f8      	ldr	r0, [r7, #28]
 8018112:	f000 f9cd 	bl	80184b0 <ip4_output_if>
  }
  pbuf_free(q);
 8018116:	69f8      	ldr	r0, [r7, #28]
 8018118:	f7f8 f988 	bl	801042c <pbuf_free>
 801811c:	e000      	b.n	8018120 <icmp_send_response+0xc0>
    return;
 801811e:	bf00      	nop
}
 8018120:	3720      	adds	r7, #32
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}
 8018126:	bf00      	nop
 8018128:	0801ef6c 	.word	0x0801ef6c
 801812c:	0801f038 	.word	0x0801f038
 8018130:	0801efdc 	.word	0x0801efdc

08018134 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018134:	b480      	push	{r7}
 8018136:	b085      	sub	sp, #20
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801813c:	4b33      	ldr	r3, [pc, #204]	@ (801820c <ip4_route+0xd8>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	60fb      	str	r3, [r7, #12]
 8018142:	e036      	b.n	80181b2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801814a:	f003 0301 	and.w	r3, r3, #1
 801814e:	b2db      	uxtb	r3, r3
 8018150:	2b00      	cmp	r3, #0
 8018152:	d02b      	beq.n	80181ac <ip4_route+0x78>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801815a:	089b      	lsrs	r3, r3, #2
 801815c:	f003 0301 	and.w	r3, r3, #1
 8018160:	b2db      	uxtb	r3, r3
 8018162:	2b00      	cmp	r3, #0
 8018164:	d022      	beq.n	80181ac <ip4_route+0x78>
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	3304      	adds	r3, #4
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d01d      	beq.n	80181ac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	3304      	adds	r3, #4
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	405a      	eors	r2, r3
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	3308      	adds	r3, #8
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	4013      	ands	r3, r2
 8018184:	2b00      	cmp	r3, #0
 8018186:	d101      	bne.n	801818c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	e038      	b.n	80181fe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018192:	f003 0302 	and.w	r3, r3, #2
 8018196:	2b00      	cmp	r3, #0
 8018198:	d108      	bne.n	80181ac <ip4_route+0x78>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	330c      	adds	r3, #12
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d101      	bne.n	80181ac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	e028      	b.n	80181fe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	60fb      	str	r3, [r7, #12]
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d1c5      	bne.n	8018144 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80181b8:	4b15      	ldr	r3, [pc, #84]	@ (8018210 <ip4_route+0xdc>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d01a      	beq.n	80181f6 <ip4_route+0xc2>
 80181c0:	4b13      	ldr	r3, [pc, #76]	@ (8018210 <ip4_route+0xdc>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80181c8:	f003 0301 	and.w	r3, r3, #1
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d012      	beq.n	80181f6 <ip4_route+0xc2>
 80181d0:	4b0f      	ldr	r3, [pc, #60]	@ (8018210 <ip4_route+0xdc>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80181d8:	f003 0304 	and.w	r3, r3, #4
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d00a      	beq.n	80181f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181e0:	4b0b      	ldr	r3, [pc, #44]	@ (8018210 <ip4_route+0xdc>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	3304      	adds	r3, #4
 80181e6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d004      	beq.n	80181f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	b2db      	uxtb	r3, r3
 80181f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80181f4:	d101      	bne.n	80181fa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80181f6:	2300      	movs	r3, #0
 80181f8:	e001      	b.n	80181fe <ip4_route+0xca>
  }

  return netif_default;
 80181fa:	4b05      	ldr	r3, [pc, #20]	@ (8018210 <ip4_route+0xdc>)
 80181fc:	681b      	ldr	r3, [r3, #0]
}
 80181fe:	4618      	mov	r0, r3
 8018200:	3714      	adds	r7, #20
 8018202:	46bd      	mov	sp, r7
 8018204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018208:	4770      	bx	lr
 801820a:	bf00      	nop
 801820c:	2000c764 	.word	0x2000c764
 8018210:	2000c768 	.word	0x2000c768

08018214 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018222:	f003 0301 	and.w	r3, r3, #1
 8018226:	b2db      	uxtb	r3, r3
 8018228:	2b00      	cmp	r3, #0
 801822a:	d016      	beq.n	801825a <ip4_input_accept+0x46>
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	3304      	adds	r3, #4
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d011      	beq.n	801825a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018236:	4b0b      	ldr	r3, [pc, #44]	@ (8018264 <ip4_input_accept+0x50>)
 8018238:	695a      	ldr	r2, [r3, #20]
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	3304      	adds	r3, #4
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	429a      	cmp	r2, r3
 8018242:	d008      	beq.n	8018256 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018244:	4b07      	ldr	r3, [pc, #28]	@ (8018264 <ip4_input_accept+0x50>)
 8018246:	695b      	ldr	r3, [r3, #20]
 8018248:	6879      	ldr	r1, [r7, #4]
 801824a:	4618      	mov	r0, r3
 801824c:	f000 fa08 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8018250:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018252:	2b00      	cmp	r3, #0
 8018254:	d001      	beq.n	801825a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018256:	2301      	movs	r3, #1
 8018258:	e000      	b.n	801825c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801825a:	2300      	movs	r3, #0
}
 801825c:	4618      	mov	r0, r3
 801825e:	3708      	adds	r7, #8
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	2000901c 	.word	0x2000901c

08018268 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b086      	sub	sp, #24
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
 8018270:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	685b      	ldr	r3, [r3, #4]
 8018276:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	781b      	ldrb	r3, [r3, #0]
 801827c:	091b      	lsrs	r3, r3, #4
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b04      	cmp	r3, #4
 8018282:	d004      	beq.n	801828e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7f8 f8d1 	bl	801042c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801828a:	2300      	movs	r3, #0
 801828c:	e107      	b.n	801849e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801828e:	697b      	ldr	r3, [r7, #20]
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	f003 030f 	and.w	r3, r3, #15
 8018296:	b2db      	uxtb	r3, r3
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	b2db      	uxtb	r3, r3
 801829c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	885b      	ldrh	r3, [r3, #2]
 80182a2:	b29b      	uxth	r3, r3
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7f6 fd01 	bl	800ecac <lwip_htons>
 80182aa:	4603      	mov	r3, r0
 80182ac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	891b      	ldrh	r3, [r3, #8]
 80182b2:	89ba      	ldrh	r2, [r7, #12]
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d204      	bcs.n	80182c2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80182b8:	89bb      	ldrh	r3, [r7, #12]
 80182ba:	4619      	mov	r1, r3
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f7f7 ff2f 	bl	8010120 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	895b      	ldrh	r3, [r3, #10]
 80182c6:	89fa      	ldrh	r2, [r7, #14]
 80182c8:	429a      	cmp	r2, r3
 80182ca:	d807      	bhi.n	80182dc <ip4_input+0x74>
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	891b      	ldrh	r3, [r3, #8]
 80182d0:	89ba      	ldrh	r2, [r7, #12]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	d802      	bhi.n	80182dc <ip4_input+0x74>
 80182d6:	89fb      	ldrh	r3, [r7, #14]
 80182d8:	2b13      	cmp	r3, #19
 80182da:	d804      	bhi.n	80182e6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80182dc:	6878      	ldr	r0, [r7, #4]
 80182de:	f7f8 f8a5 	bl	801042c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80182e2:	2300      	movs	r3, #0
 80182e4:	e0db      	b.n	801849e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	691b      	ldr	r3, [r3, #16]
 80182ea:	4a6f      	ldr	r2, [pc, #444]	@ (80184a8 <ip4_input+0x240>)
 80182ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80182ee:	697b      	ldr	r3, [r7, #20]
 80182f0:	68db      	ldr	r3, [r3, #12]
 80182f2:	4a6d      	ldr	r2, [pc, #436]	@ (80184a8 <ip4_input+0x240>)
 80182f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182f6:	4b6c      	ldr	r3, [pc, #432]	@ (80184a8 <ip4_input+0x240>)
 80182f8:	695b      	ldr	r3, [r3, #20]
 80182fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182fe:	2be0      	cmp	r3, #224	@ 0xe0
 8018300:	d112      	bne.n	8018328 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018308:	f003 0301 	and.w	r3, r3, #1
 801830c:	b2db      	uxtb	r3, r3
 801830e:	2b00      	cmp	r3, #0
 8018310:	d007      	beq.n	8018322 <ip4_input+0xba>
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	3304      	adds	r3, #4
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d002      	beq.n	8018322 <ip4_input+0xba>
      netif = inp;
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	613b      	str	r3, [r7, #16]
 8018320:	e02a      	b.n	8018378 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018322:	2300      	movs	r3, #0
 8018324:	613b      	str	r3, [r7, #16]
 8018326:	e027      	b.n	8018378 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018328:	6838      	ldr	r0, [r7, #0]
 801832a:	f7ff ff73 	bl	8018214 <ip4_input_accept>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d002      	beq.n	801833a <ip4_input+0xd2>
      netif = inp;
 8018334:	683b      	ldr	r3, [r7, #0]
 8018336:	613b      	str	r3, [r7, #16]
 8018338:	e01e      	b.n	8018378 <ip4_input+0x110>
    } else {
      netif = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801833e:	4b5a      	ldr	r3, [pc, #360]	@ (80184a8 <ip4_input+0x240>)
 8018340:	695b      	ldr	r3, [r3, #20]
 8018342:	b2db      	uxtb	r3, r3
 8018344:	2b7f      	cmp	r3, #127	@ 0x7f
 8018346:	d017      	beq.n	8018378 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018348:	4b58      	ldr	r3, [pc, #352]	@ (80184ac <ip4_input+0x244>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	613b      	str	r3, [r7, #16]
 801834e:	e00e      	b.n	801836e <ip4_input+0x106>
          if (netif == inp) {
 8018350:	693a      	ldr	r2, [r7, #16]
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	429a      	cmp	r2, r3
 8018356:	d006      	beq.n	8018366 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018358:	6938      	ldr	r0, [r7, #16]
 801835a:	f7ff ff5b 	bl	8018214 <ip4_input_accept>
 801835e:	4603      	mov	r3, r0
 8018360:	2b00      	cmp	r3, #0
 8018362:	d108      	bne.n	8018376 <ip4_input+0x10e>
 8018364:	e000      	b.n	8018368 <ip4_input+0x100>
            continue;
 8018366:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018368:	693b      	ldr	r3, [r7, #16]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	613b      	str	r3, [r7, #16]
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d1ed      	bne.n	8018350 <ip4_input+0xe8>
 8018374:	e000      	b.n	8018378 <ip4_input+0x110>
            break;
 8018376:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018378:	4b4b      	ldr	r3, [pc, #300]	@ (80184a8 <ip4_input+0x240>)
 801837a:	691b      	ldr	r3, [r3, #16]
 801837c:	6839      	ldr	r1, [r7, #0]
 801837e:	4618      	mov	r0, r3
 8018380:	f000 f96e 	bl	8018660 <ip4_addr_isbroadcast_u32>
 8018384:	4603      	mov	r3, r0
 8018386:	2b00      	cmp	r3, #0
 8018388:	d105      	bne.n	8018396 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801838a:	4b47      	ldr	r3, [pc, #284]	@ (80184a8 <ip4_input+0x240>)
 801838c:	691b      	ldr	r3, [r3, #16]
 801838e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018392:	2be0      	cmp	r3, #224	@ 0xe0
 8018394:	d104      	bne.n	80183a0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f7f8 f848 	bl	801042c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801839c:	2300      	movs	r3, #0
 801839e:	e07e      	b.n	801849e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d104      	bne.n	80183b0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7f8 f840 	bl	801042c <pbuf_free>
    return ERR_OK;
 80183ac:	2300      	movs	r3, #0
 80183ae:	e076      	b.n	801849e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	88db      	ldrh	r3, [r3, #6]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	461a      	mov	r2, r3
 80183b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80183bc:	4013      	ands	r3, r2
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d00b      	beq.n	80183da <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80183c2:	6878      	ldr	r0, [r7, #4]
 80183c4:	f000 fd22 	bl	8018e0c <ip4_reass>
 80183c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d101      	bne.n	80183d4 <ip4_input+0x16c>
      return ERR_OK;
 80183d0:	2300      	movs	r3, #0
 80183d2:	e064      	b.n	801849e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80183da:	4a33      	ldr	r2, [pc, #204]	@ (80184a8 <ip4_input+0x240>)
 80183dc:	693b      	ldr	r3, [r7, #16]
 80183de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80183e0:	4a31      	ldr	r2, [pc, #196]	@ (80184a8 <ip4_input+0x240>)
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80183e6:	4a30      	ldr	r2, [pc, #192]	@ (80184a8 <ip4_input+0x240>)
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	781b      	ldrb	r3, [r3, #0]
 80183f0:	f003 030f 	and.w	r3, r3, #15
 80183f4:	b2db      	uxtb	r3, r3
 80183f6:	009b      	lsls	r3, r3, #2
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	461a      	mov	r2, r3
 80183fc:	4b2a      	ldr	r3, [pc, #168]	@ (80184a8 <ip4_input+0x240>)
 80183fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018400:	89fb      	ldrh	r3, [r7, #14]
 8018402:	4619      	mov	r1, r3
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f7f7 ff8b 	bl	8010320 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	7a5b      	ldrb	r3, [r3, #9]
 801840e:	2b11      	cmp	r3, #17
 8018410:	d006      	beq.n	8018420 <ip4_input+0x1b8>
 8018412:	2b11      	cmp	r3, #17
 8018414:	dc13      	bgt.n	801843e <ip4_input+0x1d6>
 8018416:	2b01      	cmp	r3, #1
 8018418:	d00c      	beq.n	8018434 <ip4_input+0x1cc>
 801841a:	2b06      	cmp	r3, #6
 801841c:	d005      	beq.n	801842a <ip4_input+0x1c2>
 801841e:	e00e      	b.n	801843e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018420:	6839      	ldr	r1, [r7, #0]
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7fe fc9a 	bl	8016d5c <udp_input>
        break;
 8018428:	e026      	b.n	8018478 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801842a:	6839      	ldr	r1, [r7, #0]
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7fa f891 	bl	8012554 <tcp_input>
        break;
 8018432:	e021      	b.n	8018478 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018434:	6839      	ldr	r1, [r7, #0]
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f7ff fcf0 	bl	8017e1c <icmp_input>
        break;
 801843c:	e01c      	b.n	8018478 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801843e:	4b1a      	ldr	r3, [pc, #104]	@ (80184a8 <ip4_input+0x240>)
 8018440:	695b      	ldr	r3, [r3, #20]
 8018442:	6939      	ldr	r1, [r7, #16]
 8018444:	4618      	mov	r0, r3
 8018446:	f000 f90b 	bl	8018660 <ip4_addr_isbroadcast_u32>
 801844a:	4603      	mov	r3, r0
 801844c:	2b00      	cmp	r3, #0
 801844e:	d10f      	bne.n	8018470 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018450:	4b15      	ldr	r3, [pc, #84]	@ (80184a8 <ip4_input+0x240>)
 8018452:	695b      	ldr	r3, [r3, #20]
 8018454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018458:	2be0      	cmp	r3, #224	@ 0xe0
 801845a:	d009      	beq.n	8018470 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801845c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018460:	4619      	mov	r1, r3
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f7f7 ffcf 	bl	8010406 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018468:	2102      	movs	r1, #2
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	f7ff fdd8 	bl	8018020 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018470:	6878      	ldr	r0, [r7, #4]
 8018472:	f7f7 ffdb 	bl	801042c <pbuf_free>
        break;
 8018476:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018478:	4b0b      	ldr	r3, [pc, #44]	@ (80184a8 <ip4_input+0x240>)
 801847a:	2200      	movs	r2, #0
 801847c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801847e:	4b0a      	ldr	r3, [pc, #40]	@ (80184a8 <ip4_input+0x240>)
 8018480:	2200      	movs	r2, #0
 8018482:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018484:	4b08      	ldr	r3, [pc, #32]	@ (80184a8 <ip4_input+0x240>)
 8018486:	2200      	movs	r2, #0
 8018488:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801848a:	4b07      	ldr	r3, [pc, #28]	@ (80184a8 <ip4_input+0x240>)
 801848c:	2200      	movs	r2, #0
 801848e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018490:	4b05      	ldr	r3, [pc, #20]	@ (80184a8 <ip4_input+0x240>)
 8018492:	2200      	movs	r2, #0
 8018494:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018496:	4b04      	ldr	r3, [pc, #16]	@ (80184a8 <ip4_input+0x240>)
 8018498:	2200      	movs	r2, #0
 801849a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801849c:	2300      	movs	r3, #0
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3718      	adds	r7, #24
 80184a2:	46bd      	mov	sp, r7
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	bf00      	nop
 80184a8:	2000901c 	.word	0x2000901c
 80184ac:	2000c764 	.word	0x2000c764

080184b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b08a      	sub	sp, #40	@ 0x28
 80184b4:	af04      	add	r7, sp, #16
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	607a      	str	r2, [r7, #4]
 80184bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d009      	beq.n	80184dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d003      	beq.n	80184d6 <ip4_output_if+0x26>
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d102      	bne.n	80184dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80184d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184d8:	3304      	adds	r3, #4
 80184da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80184dc:	78fa      	ldrb	r2, [r7, #3]
 80184de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184e0:	9302      	str	r3, [sp, #8]
 80184e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80184e6:	9301      	str	r3, [sp, #4]
 80184e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80184ec:	9300      	str	r3, [sp, #0]
 80184ee:	4613      	mov	r3, r2
 80184f0:	687a      	ldr	r2, [r7, #4]
 80184f2:	6979      	ldr	r1, [r7, #20]
 80184f4:	68f8      	ldr	r0, [r7, #12]
 80184f6:	f000 f805 	bl	8018504 <ip4_output_if_src>
 80184fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80184fc:	4618      	mov	r0, r3
 80184fe:	3718      	adds	r7, #24
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}

08018504 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b088      	sub	sp, #32
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
 8018510:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	7b9b      	ldrb	r3, [r3, #14]
 8018516:	2b01      	cmp	r3, #1
 8018518:	d006      	beq.n	8018528 <ip4_output_if_src+0x24>
 801851a:	4b4b      	ldr	r3, [pc, #300]	@ (8018648 <ip4_output_if_src+0x144>)
 801851c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8018520:	494a      	ldr	r1, [pc, #296]	@ (801864c <ip4_output_if_src+0x148>)
 8018522:	484b      	ldr	r0, [pc, #300]	@ (8018650 <ip4_output_if_src+0x14c>)
 8018524:	f001 ffb2 	bl	801a48c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d060      	beq.n	80185f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801852e:	2314      	movs	r3, #20
 8018530:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018532:	2114      	movs	r1, #20
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f7f7 fee3 	bl	8010300 <pbuf_add_header>
 801853a:	4603      	mov	r3, r0
 801853c:	2b00      	cmp	r3, #0
 801853e:	d002      	beq.n	8018546 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018540:	f06f 0301 	mvn.w	r3, #1
 8018544:	e07c      	b.n	8018640 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	685b      	ldr	r3, [r3, #4]
 801854a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	895b      	ldrh	r3, [r3, #10]
 8018550:	2b13      	cmp	r3, #19
 8018552:	d806      	bhi.n	8018562 <ip4_output_if_src+0x5e>
 8018554:	4b3c      	ldr	r3, [pc, #240]	@ (8018648 <ip4_output_if_src+0x144>)
 8018556:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801855a:	493e      	ldr	r1, [pc, #248]	@ (8018654 <ip4_output_if_src+0x150>)
 801855c:	483c      	ldr	r0, [pc, #240]	@ (8018650 <ip4_output_if_src+0x14c>)
 801855e:	f001 ff95 	bl	801a48c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	78fa      	ldrb	r2, [r7, #3]
 8018566:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018568:	69fb      	ldr	r3, [r7, #28]
 801856a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801856e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681a      	ldr	r2, [r3, #0]
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018578:	8b7b      	ldrh	r3, [r7, #26]
 801857a:	089b      	lsrs	r3, r3, #2
 801857c:	b29b      	uxth	r3, r3
 801857e:	b2db      	uxtb	r3, r3
 8018580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018584:	b2da      	uxtb	r2, r3
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801858a:	69fb      	ldr	r3, [r7, #28]
 801858c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018590:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	891b      	ldrh	r3, [r3, #8]
 8018596:	4618      	mov	r0, r3
 8018598:	f7f6 fb88 	bl	800ecac <lwip_htons>
 801859c:	4603      	mov	r3, r0
 801859e:	461a      	mov	r2, r3
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80185a4:	69fb      	ldr	r3, [r7, #28]
 80185a6:	2200      	movs	r2, #0
 80185a8:	719a      	strb	r2, [r3, #6]
 80185aa:	2200      	movs	r2, #0
 80185ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80185ae:	4b2a      	ldr	r3, [pc, #168]	@ (8018658 <ip4_output_if_src+0x154>)
 80185b0:	881b      	ldrh	r3, [r3, #0]
 80185b2:	4618      	mov	r0, r3
 80185b4:	f7f6 fb7a 	bl	800ecac <lwip_htons>
 80185b8:	4603      	mov	r3, r0
 80185ba:	461a      	mov	r2, r3
 80185bc:	69fb      	ldr	r3, [r7, #28]
 80185be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80185c0:	4b25      	ldr	r3, [pc, #148]	@ (8018658 <ip4_output_if_src+0x154>)
 80185c2:	881b      	ldrh	r3, [r3, #0]
 80185c4:	3301      	adds	r3, #1
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	4b23      	ldr	r3, [pc, #140]	@ (8018658 <ip4_output_if_src+0x154>)
 80185ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d104      	bne.n	80185dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80185d2:	4b22      	ldr	r3, [pc, #136]	@ (801865c <ip4_output_if_src+0x158>)
 80185d4:	681a      	ldr	r2, [r3, #0]
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	60da      	str	r2, [r3, #12]
 80185da:	e003      	b.n	80185e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	681a      	ldr	r2, [r3, #0]
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80185e4:	69fb      	ldr	r3, [r7, #28]
 80185e6:	2200      	movs	r2, #0
 80185e8:	729a      	strb	r2, [r3, #10]
 80185ea:	2200      	movs	r2, #0
 80185ec:	72da      	strb	r2, [r3, #11]
 80185ee:	e00f      	b.n	8018610 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	895b      	ldrh	r3, [r3, #10]
 80185f4:	2b13      	cmp	r3, #19
 80185f6:	d802      	bhi.n	80185fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80185f8:	f06f 0301 	mvn.w	r3, #1
 80185fc:	e020      	b.n	8018640 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	685b      	ldr	r3, [r3, #4]
 8018602:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	691b      	ldr	r3, [r3, #16]
 8018608:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801860a:	f107 0314 	add.w	r3, r7, #20
 801860e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018612:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018614:	2b00      	cmp	r3, #0
 8018616:	d00c      	beq.n	8018632 <ip4_output_if_src+0x12e>
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	891a      	ldrh	r2, [r3, #8]
 801861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801861e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018620:	429a      	cmp	r2, r3
 8018622:	d906      	bls.n	8018632 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018624:	687a      	ldr	r2, [r7, #4]
 8018626:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018628:	68f8      	ldr	r0, [r7, #12]
 801862a:	f000 fde3 	bl	80191f4 <ip4_frag>
 801862e:	4603      	mov	r3, r0
 8018630:	e006      	b.n	8018640 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018634:	695b      	ldr	r3, [r3, #20]
 8018636:	687a      	ldr	r2, [r7, #4]
 8018638:	68f9      	ldr	r1, [r7, #12]
 801863a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801863c:	4798      	blx	r3
 801863e:	4603      	mov	r3, r0
}
 8018640:	4618      	mov	r0, r3
 8018642:	3720      	adds	r7, #32
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	0801f064 	.word	0x0801f064
 801864c:	0801f098 	.word	0x0801f098
 8018650:	0801f0a4 	.word	0x0801f0a4
 8018654:	0801f0cc 	.word	0x0801f0cc
 8018658:	2000c8c2 	.word	0x2000c8c2
 801865c:	0801f534 	.word	0x0801f534

08018660 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018660:	b480      	push	{r7}
 8018662:	b085      	sub	sp, #20
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018674:	d002      	beq.n	801867c <ip4_addr_isbroadcast_u32+0x1c>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d101      	bne.n	8018680 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801867c:	2301      	movs	r3, #1
 801867e:	e02a      	b.n	80186d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018686:	f003 0302 	and.w	r3, r3, #2
 801868a:	2b00      	cmp	r3, #0
 801868c:	d101      	bne.n	8018692 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801868e:	2300      	movs	r3, #0
 8018690:	e021      	b.n	80186d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	3304      	adds	r3, #4
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	429a      	cmp	r2, r3
 801869c:	d101      	bne.n	80186a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801869e:	2300      	movs	r3, #0
 80186a0:	e019      	b.n	80186d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80186a2:	68fa      	ldr	r2, [r7, #12]
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	3304      	adds	r3, #4
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	405a      	eors	r2, r3
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	3308      	adds	r3, #8
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	4013      	ands	r3, r2
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d10d      	bne.n	80186d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	3308      	adds	r3, #8
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	43da      	mvns	r2, r3
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	3308      	adds	r3, #8
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d101      	bne.n	80186d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80186d0:	2301      	movs	r3, #1
 80186d2:	e000      	b.n	80186d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80186d4:	2300      	movs	r3, #0
  }
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3714      	adds	r7, #20
 80186da:	46bd      	mov	sp, r7
 80186dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e0:	4770      	bx	lr
	...

080186e4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80186ec:	2210      	movs	r2, #16
 80186ee:	4904      	ldr	r1, [pc, #16]	@ (8018700 <ip4addr_ntoa+0x1c>)
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f000 f807 	bl	8018704 <ip4addr_ntoa_r>
 80186f6:	4603      	mov	r3, r0
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	3708      	adds	r7, #8
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	2000c8c4 	.word	0x2000c8c4

08018704 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8018704:	b480      	push	{r7}
 8018706:	b08d      	sub	sp, #52	@ 0x34
 8018708:	af00      	add	r7, sp, #0
 801870a:	60f8      	str	r0, [r7, #12]
 801870c:	60b9      	str	r1, [r7, #8]
 801870e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8018710:	2300      	movs	r3, #0
 8018712:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801871e:	f107 0318 	add.w	r3, r7, #24
 8018722:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8018724:	2300      	movs	r3, #0
 8018726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801872a:	e058      	b.n	80187de <ip4addr_ntoa_r+0xda>
    i = 0;
 801872c:	2300      	movs	r3, #0
 801872e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8018732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018734:	781a      	ldrb	r2, [r3, #0]
 8018736:	4b32      	ldr	r3, [pc, #200]	@ (8018800 <ip4addr_ntoa_r+0xfc>)
 8018738:	fba3 1302 	umull	r1, r3, r3, r2
 801873c:	08d9      	lsrs	r1, r3, #3
 801873e:	460b      	mov	r3, r1
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	440b      	add	r3, r1
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	1ad3      	subs	r3, r2, r3
 8018748:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	4a2c      	ldr	r2, [pc, #176]	@ (8018800 <ip4addr_ntoa_r+0xfc>)
 8018750:	fba2 2303 	umull	r2, r3, r2, r3
 8018754:	08db      	lsrs	r3, r3, #3
 8018756:	b2da      	uxtb	r2, r3
 8018758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801875a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801875c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018760:	1c5a      	adds	r2, r3, #1
 8018762:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8018766:	4619      	mov	r1, r3
 8018768:	7ffb      	ldrb	r3, [r7, #31]
 801876a:	3330      	adds	r3, #48	@ 0x30
 801876c:	b2da      	uxtb	r2, r3
 801876e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8018772:	443b      	add	r3, r7
 8018774:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8018778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d1d8      	bne.n	8018732 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8018780:	e011      	b.n	80187a6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8018782:	6a3b      	ldr	r3, [r7, #32]
 8018784:	1c5a      	adds	r2, r3, #1
 8018786:	623a      	str	r2, [r7, #32]
 8018788:	687a      	ldr	r2, [r7, #4]
 801878a:	429a      	cmp	r2, r3
 801878c:	dc01      	bgt.n	8018792 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801878e:	2300      	movs	r3, #0
 8018790:	e030      	b.n	80187f4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8018792:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8018796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018798:	1c59      	adds	r1, r3, #1
 801879a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801879c:	3230      	adds	r2, #48	@ 0x30
 801879e:	443a      	add	r2, r7
 80187a0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80187a4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80187a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80187aa:	1e5a      	subs	r2, r3, #1
 80187ac:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d1e6      	bne.n	8018782 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80187b4:	6a3b      	ldr	r3, [r7, #32]
 80187b6:	1c5a      	adds	r2, r3, #1
 80187b8:	623a      	str	r2, [r7, #32]
 80187ba:	687a      	ldr	r2, [r7, #4]
 80187bc:	429a      	cmp	r2, r3
 80187be:	dc01      	bgt.n	80187c4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80187c0:	2300      	movs	r3, #0
 80187c2:	e017      	b.n	80187f4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80187c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187c6:	1c5a      	adds	r2, r3, #1
 80187c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80187ca:	222e      	movs	r2, #46	@ 0x2e
 80187cc:	701a      	strb	r2, [r3, #0]
    ap++;
 80187ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d0:	3301      	adds	r3, #1
 80187d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80187d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80187d8:	3301      	adds	r3, #1
 80187da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80187de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80187e2:	2b03      	cmp	r3, #3
 80187e4:	d9a2      	bls.n	801872c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80187e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187e8:	3b01      	subs	r3, #1
 80187ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80187ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ee:	2200      	movs	r2, #0
 80187f0:	701a      	strb	r2, [r3, #0]
  return buf;
 80187f2:	68bb      	ldr	r3, [r7, #8]
}
 80187f4:	4618      	mov	r0, r3
 80187f6:	3734      	adds	r7, #52	@ 0x34
 80187f8:	46bd      	mov	sp, r7
 80187fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fe:	4770      	bx	lr
 8018800:	cccccccd 	.word	0xcccccccd

08018804 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801880a:	2300      	movs	r3, #0
 801880c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801880e:	4b12      	ldr	r3, [pc, #72]	@ (8018858 <ip_reass_tmr+0x54>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018814:	e018      	b.n	8018848 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	7fdb      	ldrb	r3, [r3, #31]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d00b      	beq.n	8018836 <ip_reass_tmr+0x32>
      r->timer--;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	7fdb      	ldrb	r3, [r3, #31]
 8018822:	3b01      	subs	r3, #1
 8018824:	b2da      	uxtb	r2, r3
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	60fb      	str	r3, [r7, #12]
 8018834:	e008      	b.n	8018848 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018840:	68b9      	ldr	r1, [r7, #8]
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f000 f80a 	bl	801885c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d1e3      	bne.n	8018816 <ip_reass_tmr+0x12>
    }
  }
}
 801884e:	bf00      	nop
 8018850:	bf00      	nop
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	2000c8d4 	.word	0x2000c8d4

0801885c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b088      	sub	sp, #32
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018866:	2300      	movs	r3, #0
 8018868:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801886a:	683a      	ldr	r2, [r7, #0]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	429a      	cmp	r2, r3
 8018870:	d105      	bne.n	801887e <ip_reass_free_complete_datagram+0x22>
 8018872:	4b45      	ldr	r3, [pc, #276]	@ (8018988 <ip_reass_free_complete_datagram+0x12c>)
 8018874:	22ab      	movs	r2, #171	@ 0xab
 8018876:	4945      	ldr	r1, [pc, #276]	@ (801898c <ip_reass_free_complete_datagram+0x130>)
 8018878:	4845      	ldr	r0, [pc, #276]	@ (8018990 <ip_reass_free_complete_datagram+0x134>)
 801887a:	f001 fe07 	bl	801a48c <iprintf>
  if (prev != NULL) {
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d00a      	beq.n	801889a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	687a      	ldr	r2, [r7, #4]
 801888a:	429a      	cmp	r2, r3
 801888c:	d005      	beq.n	801889a <ip_reass_free_complete_datagram+0x3e>
 801888e:	4b3e      	ldr	r3, [pc, #248]	@ (8018988 <ip_reass_free_complete_datagram+0x12c>)
 8018890:	22ad      	movs	r2, #173	@ 0xad
 8018892:	4940      	ldr	r1, [pc, #256]	@ (8018994 <ip_reass_free_complete_datagram+0x138>)
 8018894:	483e      	ldr	r0, [pc, #248]	@ (8018990 <ip_reass_free_complete_datagram+0x134>)
 8018896:	f001 fdf9 	bl	801a48c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	889b      	ldrh	r3, [r3, #4]
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d12a      	bne.n	8018902 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	681a      	ldr	r2, [r3, #0]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80188ba:	69bb      	ldr	r3, [r7, #24]
 80188bc:	6858      	ldr	r0, [r3, #4]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	3308      	adds	r3, #8
 80188c2:	2214      	movs	r2, #20
 80188c4:	4619      	mov	r1, r3
 80188c6:	f001 ff80 	bl	801a7ca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80188ca:	2101      	movs	r1, #1
 80188cc:	69b8      	ldr	r0, [r7, #24]
 80188ce:	f7ff fbb7 	bl	8018040 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80188d2:	69b8      	ldr	r0, [r7, #24]
 80188d4:	f7f7 fe38 	bl	8010548 <pbuf_clen>
 80188d8:	4603      	mov	r3, r0
 80188da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80188dc:	8bfa      	ldrh	r2, [r7, #30]
 80188de:	8a7b      	ldrh	r3, [r7, #18]
 80188e0:	4413      	add	r3, r2
 80188e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80188e6:	db05      	blt.n	80188f4 <ip_reass_free_complete_datagram+0x98>
 80188e8:	4b27      	ldr	r3, [pc, #156]	@ (8018988 <ip_reass_free_complete_datagram+0x12c>)
 80188ea:	22bc      	movs	r2, #188	@ 0xbc
 80188ec:	492a      	ldr	r1, [pc, #168]	@ (8018998 <ip_reass_free_complete_datagram+0x13c>)
 80188ee:	4828      	ldr	r0, [pc, #160]	@ (8018990 <ip_reass_free_complete_datagram+0x134>)
 80188f0:	f001 fdcc 	bl	801a48c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80188f4:	8bfa      	ldrh	r2, [r7, #30]
 80188f6:	8a7b      	ldrh	r3, [r7, #18]
 80188f8:	4413      	add	r3, r2
 80188fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80188fc:	69b8      	ldr	r0, [r7, #24]
 80188fe:	f7f7 fd95 	bl	801042c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018908:	e01f      	b.n	801894a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801890a:	69bb      	ldr	r3, [r7, #24]
 801890c:	685b      	ldr	r3, [r3, #4]
 801890e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018910:	69bb      	ldr	r3, [r7, #24]
 8018912:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801891a:	68f8      	ldr	r0, [r7, #12]
 801891c:	f7f7 fe14 	bl	8010548 <pbuf_clen>
 8018920:	4603      	mov	r3, r0
 8018922:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018924:	8bfa      	ldrh	r2, [r7, #30]
 8018926:	8a7b      	ldrh	r3, [r7, #18]
 8018928:	4413      	add	r3, r2
 801892a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801892e:	db05      	blt.n	801893c <ip_reass_free_complete_datagram+0xe0>
 8018930:	4b15      	ldr	r3, [pc, #84]	@ (8018988 <ip_reass_free_complete_datagram+0x12c>)
 8018932:	22cc      	movs	r2, #204	@ 0xcc
 8018934:	4918      	ldr	r1, [pc, #96]	@ (8018998 <ip_reass_free_complete_datagram+0x13c>)
 8018936:	4816      	ldr	r0, [pc, #88]	@ (8018990 <ip_reass_free_complete_datagram+0x134>)
 8018938:	f001 fda8 	bl	801a48c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801893c:	8bfa      	ldrh	r2, [r7, #30]
 801893e:	8a7b      	ldrh	r3, [r7, #18]
 8018940:	4413      	add	r3, r2
 8018942:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018944:	68f8      	ldr	r0, [r7, #12]
 8018946:	f7f7 fd71 	bl	801042c <pbuf_free>
  while (p != NULL) {
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d1dc      	bne.n	801890a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018950:	6839      	ldr	r1, [r7, #0]
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f000 f8c2 	bl	8018adc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018958:	4b10      	ldr	r3, [pc, #64]	@ (801899c <ip_reass_free_complete_datagram+0x140>)
 801895a:	881b      	ldrh	r3, [r3, #0]
 801895c:	8bfa      	ldrh	r2, [r7, #30]
 801895e:	429a      	cmp	r2, r3
 8018960:	d905      	bls.n	801896e <ip_reass_free_complete_datagram+0x112>
 8018962:	4b09      	ldr	r3, [pc, #36]	@ (8018988 <ip_reass_free_complete_datagram+0x12c>)
 8018964:	22d2      	movs	r2, #210	@ 0xd2
 8018966:	490e      	ldr	r1, [pc, #56]	@ (80189a0 <ip_reass_free_complete_datagram+0x144>)
 8018968:	4809      	ldr	r0, [pc, #36]	@ (8018990 <ip_reass_free_complete_datagram+0x134>)
 801896a:	f001 fd8f 	bl	801a48c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801896e:	4b0b      	ldr	r3, [pc, #44]	@ (801899c <ip_reass_free_complete_datagram+0x140>)
 8018970:	881a      	ldrh	r2, [r3, #0]
 8018972:	8bfb      	ldrh	r3, [r7, #30]
 8018974:	1ad3      	subs	r3, r2, r3
 8018976:	b29a      	uxth	r2, r3
 8018978:	4b08      	ldr	r3, [pc, #32]	@ (801899c <ip_reass_free_complete_datagram+0x140>)
 801897a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801897c:	8bfb      	ldrh	r3, [r7, #30]
}
 801897e:	4618      	mov	r0, r3
 8018980:	3720      	adds	r7, #32
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	0801f0fc 	.word	0x0801f0fc
 801898c:	0801f138 	.word	0x0801f138
 8018990:	0801f144 	.word	0x0801f144
 8018994:	0801f16c 	.word	0x0801f16c
 8018998:	0801f180 	.word	0x0801f180
 801899c:	2000c8d8 	.word	0x2000c8d8
 80189a0:	0801f1a0 	.word	0x0801f1a0

080189a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b08a      	sub	sp, #40	@ 0x28
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80189ae:	2300      	movs	r3, #0
 80189b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80189b2:	2300      	movs	r3, #0
 80189b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80189b6:	2300      	movs	r3, #0
 80189b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80189ba:	2300      	movs	r3, #0
 80189bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80189be:	2300      	movs	r3, #0
 80189c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80189c2:	4b28      	ldr	r3, [pc, #160]	@ (8018a64 <ip_reass_remove_oldest_datagram+0xc0>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80189c8:	e030      	b.n	8018a2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80189ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189cc:	695a      	ldr	r2, [r3, #20]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	68db      	ldr	r3, [r3, #12]
 80189d2:	429a      	cmp	r2, r3
 80189d4:	d10c      	bne.n	80189f0 <ip_reass_remove_oldest_datagram+0x4c>
 80189d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d8:	699a      	ldr	r2, [r3, #24]
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	691b      	ldr	r3, [r3, #16]
 80189de:	429a      	cmp	r2, r3
 80189e0:	d106      	bne.n	80189f0 <ip_reass_remove_oldest_datagram+0x4c>
 80189e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189e4:	899a      	ldrh	r2, [r3, #12]
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	889b      	ldrh	r3, [r3, #4]
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d014      	beq.n	8018a1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80189f0:	693b      	ldr	r3, [r7, #16]
 80189f2:	3301      	adds	r3, #1
 80189f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80189f6:	6a3b      	ldr	r3, [r7, #32]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d104      	bne.n	8018a06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80189fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018a00:	69fb      	ldr	r3, [r7, #28]
 8018a02:	61bb      	str	r3, [r7, #24]
 8018a04:	e009      	b.n	8018a1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a08:	7fda      	ldrb	r2, [r3, #31]
 8018a0a:	6a3b      	ldr	r3, [r7, #32]
 8018a0c:	7fdb      	ldrb	r3, [r3, #31]
 8018a0e:	429a      	cmp	r2, r3
 8018a10:	d803      	bhi.n	8018a1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018a16:	69fb      	ldr	r3, [r7, #28]
 8018a18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d001      	beq.n	8018a26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d1cb      	bne.n	80189ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018a32:	6a3b      	ldr	r3, [r7, #32]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d008      	beq.n	8018a4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018a38:	69b9      	ldr	r1, [r7, #24]
 8018a3a:	6a38      	ldr	r0, [r7, #32]
 8018a3c:	f7ff ff0e 	bl	801885c <ip_reass_free_complete_datagram>
 8018a40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018a42:	697a      	ldr	r2, [r7, #20]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	4413      	add	r3, r2
 8018a48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018a4a:	697a      	ldr	r2, [r7, #20]
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	da02      	bge.n	8018a58 <ip_reass_remove_oldest_datagram+0xb4>
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	2b01      	cmp	r3, #1
 8018a56:	dcac      	bgt.n	80189b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018a58:	697b      	ldr	r3, [r7, #20]
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3728      	adds	r7, #40	@ 0x28
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}
 8018a62:	bf00      	nop
 8018a64:	2000c8d4 	.word	0x2000c8d4

08018a68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b084      	sub	sp, #16
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
 8018a70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018a72:	2004      	movs	r0, #4
 8018a74:	f7f6 fdf2 	bl	800f65c <memp_malloc>
 8018a78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d110      	bne.n	8018aa2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018a80:	6839      	ldr	r1, [r7, #0]
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f7ff ff8e 	bl	80189a4 <ip_reass_remove_oldest_datagram>
 8018a88:	4602      	mov	r2, r0
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	4293      	cmp	r3, r2
 8018a8e:	dc03      	bgt.n	8018a98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018a90:	2004      	movs	r0, #4
 8018a92:	f7f6 fde3 	bl	800f65c <memp_malloc>
 8018a96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d101      	bne.n	8018aa2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e016      	b.n	8018ad0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018aa2:	2220      	movs	r2, #32
 8018aa4:	2100      	movs	r1, #0
 8018aa6:	68f8      	ldr	r0, [r7, #12]
 8018aa8:	f001 fda5 	bl	801a5f6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	220f      	movs	r2, #15
 8018ab0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018ab2:	4b09      	ldr	r3, [pc, #36]	@ (8018ad8 <ip_reass_enqueue_new_datagram+0x70>)
 8018ab4:	681a      	ldr	r2, [r3, #0]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018aba:	4a07      	ldr	r2, [pc, #28]	@ (8018ad8 <ip_reass_enqueue_new_datagram+0x70>)
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	3308      	adds	r3, #8
 8018ac4:	2214      	movs	r2, #20
 8018ac6:	6879      	ldr	r1, [r7, #4]
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f001 fe7e 	bl	801a7ca <memcpy>
  return ipr;
 8018ace:	68fb      	ldr	r3, [r7, #12]
}
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	3710      	adds	r7, #16
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}
 8018ad8:	2000c8d4 	.word	0x2000c8d4

08018adc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018ae6:	4b10      	ldr	r3, [pc, #64]	@ (8018b28 <ip_reass_dequeue_datagram+0x4c>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d104      	bne.n	8018afa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	4a0c      	ldr	r2, [pc, #48]	@ (8018b28 <ip_reass_dequeue_datagram+0x4c>)
 8018af6:	6013      	str	r3, [r2, #0]
 8018af8:	e00d      	b.n	8018b16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d106      	bne.n	8018b0e <ip_reass_dequeue_datagram+0x32>
 8018b00:	4b0a      	ldr	r3, [pc, #40]	@ (8018b2c <ip_reass_dequeue_datagram+0x50>)
 8018b02:	f240 1245 	movw	r2, #325	@ 0x145
 8018b06:	490a      	ldr	r1, [pc, #40]	@ (8018b30 <ip_reass_dequeue_datagram+0x54>)
 8018b08:	480a      	ldr	r0, [pc, #40]	@ (8018b34 <ip_reass_dequeue_datagram+0x58>)
 8018b0a:	f001 fcbf 	bl	801a48c <iprintf>
    prev->next = ipr->next;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681a      	ldr	r2, [r3, #0]
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018b16:	6879      	ldr	r1, [r7, #4]
 8018b18:	2004      	movs	r0, #4
 8018b1a:	f7f6 fe15 	bl	800f748 <memp_free>
}
 8018b1e:	bf00      	nop
 8018b20:	3708      	adds	r7, #8
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bd80      	pop	{r7, pc}
 8018b26:	bf00      	nop
 8018b28:	2000c8d4 	.word	0x2000c8d4
 8018b2c:	0801f0fc 	.word	0x0801f0fc
 8018b30:	0801f1c4 	.word	0x0801f1c4
 8018b34:	0801f144 	.word	0x0801f144

08018b38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b08c      	sub	sp, #48	@ 0x30
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018b44:	2300      	movs	r3, #0
 8018b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018b48:	2301      	movs	r3, #1
 8018b4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018b4c:	68bb      	ldr	r3, [r7, #8]
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	885b      	ldrh	r3, [r3, #2]
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f6 f8a7 	bl	800ecac <lwip_htons>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018b62:	69fb      	ldr	r3, [r7, #28]
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	f003 030f 	and.w	r3, r3, #15
 8018b6a:	b2db      	uxtb	r3, r3
 8018b6c:	009b      	lsls	r3, r3, #2
 8018b6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018b70:	7e7b      	ldrb	r3, [r7, #25]
 8018b72:	b29b      	uxth	r3, r3
 8018b74:	8b7a      	ldrh	r2, [r7, #26]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d202      	bcs.n	8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b7e:	e135      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018b80:	7e7b      	ldrb	r3, [r7, #25]
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	8b7a      	ldrh	r2, [r7, #26]
 8018b86:	1ad3      	subs	r3, r2, r3
 8018b88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018b8a:	69fb      	ldr	r3, [r7, #28]
 8018b8c:	88db      	ldrh	r3, [r3, #6]
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7f6 f88b 	bl	800ecac <lwip_htons>
 8018b96:	4603      	mov	r3, r0
 8018b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	00db      	lsls	r3, r3, #3
 8018ba0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018baa:	2200      	movs	r2, #0
 8018bac:	701a      	strb	r2, [r3, #0]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	705a      	strb	r2, [r3, #1]
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	709a      	strb	r2, [r3, #2]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bbc:	8afa      	ldrh	r2, [r7, #22]
 8018bbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018bc0:	8afa      	ldrh	r2, [r7, #22]
 8018bc2:	8b7b      	ldrh	r3, [r7, #26]
 8018bc4:	4413      	add	r3, r2
 8018bc6:	b29a      	uxth	r2, r3
 8018bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bce:	88db      	ldrh	r3, [r3, #6]
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	8afa      	ldrh	r2, [r7, #22]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d902      	bls.n	8018bde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018bdc:	e106      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8018be4:	e068      	b.n	8018cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be8:	685b      	ldr	r3, [r3, #4]
 8018bea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bee:	889b      	ldrh	r3, [r3, #4]
 8018bf0:	b29a      	uxth	r2, r3
 8018bf2:	693b      	ldr	r3, [r7, #16]
 8018bf4:	889b      	ldrh	r3, [r3, #4]
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d235      	bcs.n	8018c68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d020      	beq.n	8018c4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c0a:	889b      	ldrh	r3, [r3, #4]
 8018c0c:	b29a      	uxth	r2, r3
 8018c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c10:	88db      	ldrh	r3, [r3, #6]
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d307      	bcc.n	8018c28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c1a:	88db      	ldrh	r3, [r3, #6]
 8018c1c:	b29a      	uxth	r2, r3
 8018c1e:	693b      	ldr	r3, [r7, #16]
 8018c20:	889b      	ldrh	r3, [r3, #4]
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	429a      	cmp	r2, r3
 8018c26:	d902      	bls.n	8018c2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c28:	f04f 33ff 	mov.w	r3, #4294967295
 8018c2c:	e0de      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c30:	68ba      	ldr	r2, [r7, #8]
 8018c32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c36:	88db      	ldrh	r3, [r3, #6]
 8018c38:	b29a      	uxth	r2, r3
 8018c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c3c:	889b      	ldrh	r3, [r3, #4]
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d03d      	beq.n	8018cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018c44:	2300      	movs	r3, #0
 8018c46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018c48:	e03a      	b.n	8018cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c4c:	88db      	ldrh	r3, [r3, #6]
 8018c4e:	b29a      	uxth	r2, r3
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	889b      	ldrh	r3, [r3, #4]
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d902      	bls.n	8018c60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c5e:	e0c5      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	68ba      	ldr	r2, [r7, #8]
 8018c64:	605a      	str	r2, [r3, #4]
      break;
 8018c66:	e02b      	b.n	8018cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c6a:	889b      	ldrh	r3, [r3, #4]
 8018c6c:	b29a      	uxth	r2, r3
 8018c6e:	693b      	ldr	r3, [r7, #16]
 8018c70:	889b      	ldrh	r3, [r3, #4]
 8018c72:	b29b      	uxth	r3, r3
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d102      	bne.n	8018c7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c78:	f04f 33ff 	mov.w	r3, #4294967295
 8018c7c:	e0b6      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c80:	889b      	ldrh	r3, [r3, #4]
 8018c82:	b29a      	uxth	r2, r3
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	88db      	ldrh	r3, [r3, #6]
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d202      	bcs.n	8018c94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c92:	e0ab      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d009      	beq.n	8018cae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c9c:	88db      	ldrh	r3, [r3, #6]
 8018c9e:	b29a      	uxth	r2, r3
 8018ca0:	693b      	ldr	r3, [r7, #16]
 8018ca2:	889b      	ldrh	r3, [r3, #4]
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d001      	beq.n	8018cae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018caa:	2300      	movs	r3, #0
 8018cac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d193      	bne.n	8018be6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018cbe:	e000      	b.n	8018cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018cc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d12d      	bne.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d01c      	beq.n	8018d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cd0:	88db      	ldrh	r3, [r3, #6]
 8018cd2:	b29a      	uxth	r2, r3
 8018cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cd6:	889b      	ldrh	r3, [r3, #4]
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d906      	bls.n	8018cec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018cde:	4b45      	ldr	r3, [pc, #276]	@ (8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ce0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018ce4:	4944      	ldr	r1, [pc, #272]	@ (8018df8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018ce6:	4845      	ldr	r0, [pc, #276]	@ (8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ce8:	f001 fbd0 	bl	801a48c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cee:	68ba      	ldr	r2, [r7, #8]
 8018cf0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cf4:	88db      	ldrh	r3, [r3, #6]
 8018cf6:	b29a      	uxth	r2, r3
 8018cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cfa:	889b      	ldrh	r3, [r3, #4]
 8018cfc:	b29b      	uxth	r3, r3
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	d010      	beq.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018d02:	2300      	movs	r3, #0
 8018d04:	623b      	str	r3, [r7, #32]
 8018d06:	e00d      	b.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	685b      	ldr	r3, [r3, #4]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d006      	beq.n	8018d1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018d10:	4b38      	ldr	r3, [pc, #224]	@ (8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018d12:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018d16:	493a      	ldr	r1, [pc, #232]	@ (8018e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018d18:	4838      	ldr	r0, [pc, #224]	@ (8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018d1a:	f001 fbb7 	bl	801a48c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	68ba      	ldr	r2, [r7, #8]
 8018d22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d105      	bne.n	8018d36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	7f9b      	ldrb	r3, [r3, #30]
 8018d2e:	f003 0301 	and.w	r3, r3, #1
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d059      	beq.n	8018dea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018d36:	6a3b      	ldr	r3, [r7, #32]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d04f      	beq.n	8018ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d006      	beq.n	8018d52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	685b      	ldr	r3, [r3, #4]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	889b      	ldrh	r3, [r3, #4]
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d002      	beq.n	8018d58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018d52:	2300      	movs	r3, #0
 8018d54:	623b      	str	r3, [r7, #32]
 8018d56:	e041      	b.n	8018ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018d62:	e012      	b.n	8018d8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d6c:	88db      	ldrh	r3, [r3, #6]
 8018d6e:	b29a      	uxth	r2, r3
 8018d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d72:	889b      	ldrh	r3, [r3, #4]
 8018d74:	b29b      	uxth	r3, r3
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d002      	beq.n	8018d80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	623b      	str	r3, [r7, #32]
            break;
 8018d7e:	e007      	b.n	8018d90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d82:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d1e9      	bne.n	8018d64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018d90:	6a3b      	ldr	r3, [r7, #32]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d022      	beq.n	8018ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	685b      	ldr	r3, [r3, #4]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d106      	bne.n	8018dac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018d9e:	4b15      	ldr	r3, [pc, #84]	@ (8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018da0:	f240 12df 	movw	r2, #479	@ 0x1df
 8018da4:	4917      	ldr	r1, [pc, #92]	@ (8018e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018da6:	4815      	ldr	r0, [pc, #84]	@ (8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018da8:	f001 fb70 	bl	801a48c <iprintf>
          LWIP_ASSERT("sanity check",
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	685b      	ldr	r3, [r3, #4]
 8018db0:	685b      	ldr	r3, [r3, #4]
 8018db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d106      	bne.n	8018dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018db8:	4b0e      	ldr	r3, [pc, #56]	@ (8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018dba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018dbe:	4911      	ldr	r1, [pc, #68]	@ (8018e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018dc0:	480e      	ldr	r0, [pc, #56]	@ (8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018dc2:	f001 fb63 	bl	801a48c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d006      	beq.n	8018ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018dce:	4b09      	ldr	r3, [pc, #36]	@ (8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018dd0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018dd4:	490c      	ldr	r1, [pc, #48]	@ (8018e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018dd6:	4809      	ldr	r0, [pc, #36]	@ (8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018dd8:	f001 fb58 	bl	801a48c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018ddc:	6a3b      	ldr	r3, [r7, #32]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	bf14      	ite	ne
 8018de2:	2301      	movne	r3, #1
 8018de4:	2300      	moveq	r3, #0
 8018de6:	b2db      	uxtb	r3, r3
 8018de8:	e000      	b.n	8018dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018dea:	2300      	movs	r3, #0
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3730      	adds	r7, #48	@ 0x30
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}
 8018df4:	0801f0fc 	.word	0x0801f0fc
 8018df8:	0801f1e0 	.word	0x0801f1e0
 8018dfc:	0801f144 	.word	0x0801f144
 8018e00:	0801f200 	.word	0x0801f200
 8018e04:	0801f238 	.word	0x0801f238
 8018e08:	0801f248 	.word	0x0801f248

08018e0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b08e      	sub	sp, #56	@ 0x38
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	685b      	ldr	r3, [r3, #4]
 8018e18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e1c:	781b      	ldrb	r3, [r3, #0]
 8018e1e:	f003 030f 	and.w	r3, r3, #15
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	009b      	lsls	r3, r3, #2
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	2b14      	cmp	r3, #20
 8018e2a:	f040 8171 	bne.w	8019110 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e30:	88db      	ldrh	r3, [r3, #6]
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f5 ff39 	bl	800ecac <lwip_htons>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	00db      	lsls	r3, r3, #3
 8018e44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e48:	885b      	ldrh	r3, [r3, #2]
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f5 ff2d 	bl	800ecac <lwip_htons>
 8018e52:	4603      	mov	r3, r0
 8018e54:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e58:	781b      	ldrb	r3, [r3, #0]
 8018e5a:	f003 030f 	and.w	r3, r3, #15
 8018e5e:	b2db      	uxtb	r3, r3
 8018e60:	009b      	lsls	r3, r3, #2
 8018e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	f0c0 8150 	bcc.w	8019114 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018e7c:	1ad3      	subs	r3, r2, r3
 8018e7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	f7f7 fb61 	bl	8010548 <pbuf_clen>
 8018e86:	4603      	mov	r3, r0
 8018e88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018e8a:	4b8c      	ldr	r3, [pc, #560]	@ (80190bc <ip4_reass+0x2b0>)
 8018e8c:	881b      	ldrh	r3, [r3, #0]
 8018e8e:	461a      	mov	r2, r3
 8018e90:	8c3b      	ldrh	r3, [r7, #32]
 8018e92:	4413      	add	r3, r2
 8018e94:	2b0a      	cmp	r3, #10
 8018e96:	dd10      	ble.n	8018eba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018e98:	8c3b      	ldrh	r3, [r7, #32]
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018e9e:	f7ff fd81 	bl	80189a4 <ip_reass_remove_oldest_datagram>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	f000 8137 	beq.w	8019118 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018eaa:	4b84      	ldr	r3, [pc, #528]	@ (80190bc <ip4_reass+0x2b0>)
 8018eac:	881b      	ldrh	r3, [r3, #0]
 8018eae:	461a      	mov	r2, r3
 8018eb0:	8c3b      	ldrh	r3, [r7, #32]
 8018eb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018eb4:	2b0a      	cmp	r3, #10
 8018eb6:	f300 812f 	bgt.w	8019118 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018eba:	4b81      	ldr	r3, [pc, #516]	@ (80190c0 <ip4_reass+0x2b4>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ec0:	e015      	b.n	8018eee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ec4:	695a      	ldr	r2, [r3, #20]
 8018ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ec8:	68db      	ldr	r3, [r3, #12]
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d10c      	bne.n	8018ee8 <ip4_reass+0xdc>
 8018ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ed0:	699a      	ldr	r2, [r3, #24]
 8018ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ed4:	691b      	ldr	r3, [r3, #16]
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d106      	bne.n	8018ee8 <ip4_reass+0xdc>
 8018eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018edc:	899a      	ldrh	r2, [r3, #12]
 8018ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ee0:	889b      	ldrh	r3, [r3, #4]
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d006      	beq.n	8018ef6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8018eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d1e6      	bne.n	8018ec2 <ip4_reass+0xb6>
 8018ef4:	e000      	b.n	8018ef8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018ef6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d109      	bne.n	8018f12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018efe:	8c3b      	ldrh	r3, [r7, #32]
 8018f00:	4619      	mov	r1, r3
 8018f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018f04:	f7ff fdb0 	bl	8018a68 <ip_reass_enqueue_new_datagram>
 8018f08:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d11c      	bne.n	8018f4a <ip4_reass+0x13e>
      goto nullreturn;
 8018f10:	e105      	b.n	801911e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f14:	88db      	ldrh	r3, [r3, #6]
 8018f16:	b29b      	uxth	r3, r3
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f7f5 fec7 	bl	800ecac <lwip_htons>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d110      	bne.n	8018f4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f2a:	89db      	ldrh	r3, [r3, #14]
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	f7f5 febd 	bl	800ecac <lwip_htons>
 8018f32:	4603      	mov	r3, r0
 8018f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d006      	beq.n	8018f4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f3e:	3308      	adds	r3, #8
 8018f40:	2214      	movs	r2, #20
 8018f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018f44:	4618      	mov	r0, r3
 8018f46:	f001 fc40 	bl	801a7ca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f4c:	88db      	ldrh	r3, [r3, #6]
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	f003 0320 	and.w	r3, r3, #32
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	bf0c      	ite	eq
 8018f58:	2301      	moveq	r3, #1
 8018f5a:	2300      	movne	r3, #0
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d00e      	beq.n	8018f84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018f66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f6a:	4413      	add	r3, r2
 8018f6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018f6e:	8b7a      	ldrh	r2, [r7, #26]
 8018f70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018f72:	429a      	cmp	r2, r3
 8018f74:	f0c0 80a0 	bcc.w	80190b8 <ip4_reass+0x2ac>
 8018f78:	8b7b      	ldrh	r3, [r7, #26]
 8018f7a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018f7e:	4293      	cmp	r3, r2
 8018f80:	f200 809a 	bhi.w	80190b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018f84:	69fa      	ldr	r2, [r7, #28]
 8018f86:	6879      	ldr	r1, [r7, #4]
 8018f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018f8a:	f7ff fdd5 	bl	8018b38 <ip_reass_chain_frag_into_datagram_and_validate>
 8018f8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018f90:	697b      	ldr	r3, [r7, #20]
 8018f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f96:	f000 809b 	beq.w	80190d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018f9a:	4b48      	ldr	r3, [pc, #288]	@ (80190bc <ip4_reass+0x2b0>)
 8018f9c:	881a      	ldrh	r2, [r3, #0]
 8018f9e:	8c3b      	ldrh	r3, [r7, #32]
 8018fa0:	4413      	add	r3, r2
 8018fa2:	b29a      	uxth	r2, r3
 8018fa4:	4b45      	ldr	r3, [pc, #276]	@ (80190bc <ip4_reass+0x2b0>)
 8018fa6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018fa8:	69fb      	ldr	r3, [r7, #28]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d00d      	beq.n	8018fca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018fae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018fb2:	4413      	add	r3, r2
 8018fb4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fb8:	8a7a      	ldrh	r2, [r7, #18]
 8018fba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fbe:	7f9b      	ldrb	r3, [r3, #30]
 8018fc0:	f043 0301 	orr.w	r3, r3, #1
 8018fc4:	b2da      	uxtb	r2, r3
 8018fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fc8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018fca:	697b      	ldr	r3, [r7, #20]
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d171      	bne.n	80190b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fd2:	8b9b      	ldrh	r3, [r3, #28]
 8018fd4:	3314      	adds	r3, #20
 8018fd6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fda:	685b      	ldr	r3, [r3, #4]
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fe4:	685b      	ldr	r3, [r3, #4]
 8018fe6:	685b      	ldr	r3, [r3, #4]
 8018fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fec:	3308      	adds	r3, #8
 8018fee:	2214      	movs	r2, #20
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ff4:	f001 fbe9 	bl	801a7ca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ff8:	8a3b      	ldrh	r3, [r7, #16]
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7f5 fe56 	bl	800ecac <lwip_htons>
 8019000:	4603      	mov	r3, r0
 8019002:	461a      	mov	r2, r3
 8019004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019006:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801900a:	2200      	movs	r2, #0
 801900c:	719a      	strb	r2, [r3, #6]
 801900e:	2200      	movs	r2, #0
 8019010:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019014:	2200      	movs	r2, #0
 8019016:	729a      	strb	r2, [r3, #10]
 8019018:	2200      	movs	r2, #0
 801901a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901e:	685b      	ldr	r3, [r3, #4]
 8019020:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019022:	e00d      	b.n	8019040 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801902a:	2114      	movs	r1, #20
 801902c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801902e:	f7f7 f977 	bl	8010320 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019032:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f7f7 fac7 	bl	80105c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8019040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019042:	2b00      	cmp	r3, #0
 8019044:	d1ee      	bne.n	8019024 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019046:	4b1e      	ldr	r3, [pc, #120]	@ (80190c0 <ip4_reass+0x2b4>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801904c:	429a      	cmp	r2, r3
 801904e:	d102      	bne.n	8019056 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019050:	2300      	movs	r3, #0
 8019052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019054:	e010      	b.n	8019078 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019056:	4b1a      	ldr	r3, [pc, #104]	@ (80190c0 <ip4_reass+0x2b4>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801905c:	e007      	b.n	801906e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019064:	429a      	cmp	r2, r3
 8019066:	d006      	beq.n	8019076 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019070:	2b00      	cmp	r3, #0
 8019072:	d1f4      	bne.n	801905e <ip4_reass+0x252>
 8019074:	e000      	b.n	8019078 <ip4_reass+0x26c>
          break;
 8019076:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801907a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801907c:	f7ff fd2e 	bl	8018adc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f7f7 fa61 	bl	8010548 <pbuf_clen>
 8019086:	4603      	mov	r3, r0
 8019088:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801908a:	4b0c      	ldr	r3, [pc, #48]	@ (80190bc <ip4_reass+0x2b0>)
 801908c:	881b      	ldrh	r3, [r3, #0]
 801908e:	8c3a      	ldrh	r2, [r7, #32]
 8019090:	429a      	cmp	r2, r3
 8019092:	d906      	bls.n	80190a2 <ip4_reass+0x296>
 8019094:	4b0b      	ldr	r3, [pc, #44]	@ (80190c4 <ip4_reass+0x2b8>)
 8019096:	f240 229b 	movw	r2, #667	@ 0x29b
 801909a:	490b      	ldr	r1, [pc, #44]	@ (80190c8 <ip4_reass+0x2bc>)
 801909c:	480b      	ldr	r0, [pc, #44]	@ (80190cc <ip4_reass+0x2c0>)
 801909e:	f001 f9f5 	bl	801a48c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80190a2:	4b06      	ldr	r3, [pc, #24]	@ (80190bc <ip4_reass+0x2b0>)
 80190a4:	881a      	ldrh	r2, [r3, #0]
 80190a6:	8c3b      	ldrh	r3, [r7, #32]
 80190a8:	1ad3      	subs	r3, r2, r3
 80190aa:	b29a      	uxth	r2, r3
 80190ac:	4b03      	ldr	r3, [pc, #12]	@ (80190bc <ip4_reass+0x2b0>)
 80190ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	e038      	b.n	8019126 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80190b4:	2300      	movs	r3, #0
 80190b6:	e036      	b.n	8019126 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80190b8:	bf00      	nop
 80190ba:	e00a      	b.n	80190d2 <ip4_reass+0x2c6>
 80190bc:	2000c8d8 	.word	0x2000c8d8
 80190c0:	2000c8d4 	.word	0x2000c8d4
 80190c4:	0801f0fc 	.word	0x0801f0fc
 80190c8:	0801f26c 	.word	0x0801f26c
 80190cc:	0801f144 	.word	0x0801f144
    goto nullreturn_ipr;
 80190d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80190d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d106      	bne.n	80190e6 <ip4_reass+0x2da>
 80190d8:	4b15      	ldr	r3, [pc, #84]	@ (8019130 <ip4_reass+0x324>)
 80190da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80190de:	4915      	ldr	r1, [pc, #84]	@ (8019134 <ip4_reass+0x328>)
 80190e0:	4815      	ldr	r0, [pc, #84]	@ (8019138 <ip4_reass+0x32c>)
 80190e2:	f001 f9d3 	bl	801a48c <iprintf>
  if (ipr->p == NULL) {
 80190e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d116      	bne.n	801911c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80190ee:	4b13      	ldr	r3, [pc, #76]	@ (801913c <ip4_reass+0x330>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80190f4:	429a      	cmp	r2, r3
 80190f6:	d006      	beq.n	8019106 <ip4_reass+0x2fa>
 80190f8:	4b0d      	ldr	r3, [pc, #52]	@ (8019130 <ip4_reass+0x324>)
 80190fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80190fe:	4910      	ldr	r1, [pc, #64]	@ (8019140 <ip4_reass+0x334>)
 8019100:	480d      	ldr	r0, [pc, #52]	@ (8019138 <ip4_reass+0x32c>)
 8019102:	f001 f9c3 	bl	801a48c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019106:	2100      	movs	r1, #0
 8019108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801910a:	f7ff fce7 	bl	8018adc <ip_reass_dequeue_datagram>
 801910e:	e006      	b.n	801911e <ip4_reass+0x312>
    goto nullreturn;
 8019110:	bf00      	nop
 8019112:	e004      	b.n	801911e <ip4_reass+0x312>
    goto nullreturn;
 8019114:	bf00      	nop
 8019116:	e002      	b.n	801911e <ip4_reass+0x312>
      goto nullreturn;
 8019118:	bf00      	nop
 801911a:	e000      	b.n	801911e <ip4_reass+0x312>
  }

nullreturn:
 801911c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	f7f7 f984 	bl	801042c <pbuf_free>
  return NULL;
 8019124:	2300      	movs	r3, #0
}
 8019126:	4618      	mov	r0, r3
 8019128:	3738      	adds	r7, #56	@ 0x38
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}
 801912e:	bf00      	nop
 8019130:	0801f0fc 	.word	0x0801f0fc
 8019134:	0801f288 	.word	0x0801f288
 8019138:	0801f144 	.word	0x0801f144
 801913c:	2000c8d4 	.word	0x2000c8d4
 8019140:	0801f294 	.word	0x0801f294

08019144 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019148:	2005      	movs	r0, #5
 801914a:	f7f6 fa87 	bl	800f65c <memp_malloc>
 801914e:	4603      	mov	r3, r0
}
 8019150:	4618      	mov	r0, r3
 8019152:	bd80      	pop	{r7, pc}

08019154 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d106      	bne.n	8019170 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019162:	4b07      	ldr	r3, [pc, #28]	@ (8019180 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019164:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8019168:	4906      	ldr	r1, [pc, #24]	@ (8019184 <ip_frag_free_pbuf_custom_ref+0x30>)
 801916a:	4807      	ldr	r0, [pc, #28]	@ (8019188 <ip_frag_free_pbuf_custom_ref+0x34>)
 801916c:	f001 f98e 	bl	801a48c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019170:	6879      	ldr	r1, [r7, #4]
 8019172:	2005      	movs	r0, #5
 8019174:	f7f6 fae8 	bl	800f748 <memp_free>
}
 8019178:	bf00      	nop
 801917a:	3708      	adds	r7, #8
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	0801f0fc 	.word	0x0801f0fc
 8019184:	0801f2b4 	.word	0x0801f2b4
 8019188:	0801f144 	.word	0x0801f144

0801918c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b084      	sub	sp, #16
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d106      	bne.n	80191ac <ipfrag_free_pbuf_custom+0x20>
 801919e:	4b11      	ldr	r3, [pc, #68]	@ (80191e4 <ipfrag_free_pbuf_custom+0x58>)
 80191a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80191a4:	4910      	ldr	r1, [pc, #64]	@ (80191e8 <ipfrag_free_pbuf_custom+0x5c>)
 80191a6:	4811      	ldr	r0, [pc, #68]	@ (80191ec <ipfrag_free_pbuf_custom+0x60>)
 80191a8:	f001 f970 	bl	801a48c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80191ac:	68fa      	ldr	r2, [r7, #12]
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d006      	beq.n	80191c2 <ipfrag_free_pbuf_custom+0x36>
 80191b4:	4b0b      	ldr	r3, [pc, #44]	@ (80191e4 <ipfrag_free_pbuf_custom+0x58>)
 80191b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80191ba:	490d      	ldr	r1, [pc, #52]	@ (80191f0 <ipfrag_free_pbuf_custom+0x64>)
 80191bc:	480b      	ldr	r0, [pc, #44]	@ (80191ec <ipfrag_free_pbuf_custom+0x60>)
 80191be:	f001 f965 	bl	801a48c <iprintf>
  if (pcr->original != NULL) {
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	695b      	ldr	r3, [r3, #20]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d004      	beq.n	80191d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	695b      	ldr	r3, [r3, #20]
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7f7 f92c 	bl	801042c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f7ff ffbd 	bl	8019154 <ip_frag_free_pbuf_custom_ref>
}
 80191da:	bf00      	nop
 80191dc:	3710      	adds	r7, #16
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}
 80191e2:	bf00      	nop
 80191e4:	0801f0fc 	.word	0x0801f0fc
 80191e8:	0801f2c0 	.word	0x0801f2c0
 80191ec:	0801f144 	.word	0x0801f144
 80191f0:	0801f2cc 	.word	0x0801f2cc

080191f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b094      	sub	sp, #80	@ 0x50
 80191f8:	af02      	add	r7, sp, #8
 80191fa:	60f8      	str	r0, [r7, #12]
 80191fc:	60b9      	str	r1, [r7, #8]
 80191fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019200:	2300      	movs	r3, #0
 8019202:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019206:	68bb      	ldr	r3, [r7, #8]
 8019208:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801920a:	3b14      	subs	r3, #20
 801920c:	2b00      	cmp	r3, #0
 801920e:	da00      	bge.n	8019212 <ip4_frag+0x1e>
 8019210:	3307      	adds	r3, #7
 8019212:	10db      	asrs	r3, r3, #3
 8019214:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019216:	2314      	movs	r3, #20
 8019218:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8019220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019222:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	f003 030f 	and.w	r3, r3, #15
 801922c:	b2db      	uxtb	r3, r3
 801922e:	009b      	lsls	r3, r3, #2
 8019230:	b2db      	uxtb	r3, r3
 8019232:	2b14      	cmp	r3, #20
 8019234:	d002      	beq.n	801923c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019236:	f06f 0305 	mvn.w	r3, #5
 801923a:	e110      	b.n	801945e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	895b      	ldrh	r3, [r3, #10]
 8019240:	2b13      	cmp	r3, #19
 8019242:	d809      	bhi.n	8019258 <ip4_frag+0x64>
 8019244:	4b88      	ldr	r3, [pc, #544]	@ (8019468 <ip4_frag+0x274>)
 8019246:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801924a:	4988      	ldr	r1, [pc, #544]	@ (801946c <ip4_frag+0x278>)
 801924c:	4888      	ldr	r0, [pc, #544]	@ (8019470 <ip4_frag+0x27c>)
 801924e:	f001 f91d 	bl	801a48c <iprintf>
 8019252:	f06f 0305 	mvn.w	r3, #5
 8019256:	e102      	b.n	801945e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801925a:	88db      	ldrh	r3, [r3, #6]
 801925c:	b29b      	uxth	r3, r3
 801925e:	4618      	mov	r0, r3
 8019260:	f7f5 fd24 	bl	800ecac <lwip_htons>
 8019264:	4603      	mov	r3, r0
 8019266:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801926a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801926e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019272:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019278:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	891b      	ldrh	r3, [r3, #8]
 801927e:	3b14      	subs	r3, #20
 8019280:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019284:	e0e1      	b.n	801944a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019286:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019288:	00db      	lsls	r3, r3, #3
 801928a:	b29b      	uxth	r3, r3
 801928c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019290:	4293      	cmp	r3, r2
 8019292:	bf28      	it	cs
 8019294:	4613      	movcs	r3, r2
 8019296:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019298:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801929c:	2114      	movs	r1, #20
 801929e:	200e      	movs	r0, #14
 80192a0:	f7f6 fde0 	bl	800fe64 <pbuf_alloc>
 80192a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80192a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	f000 80d5 	beq.w	8019458 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80192ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b0:	895b      	ldrh	r3, [r3, #10]
 80192b2:	2b13      	cmp	r3, #19
 80192b4:	d806      	bhi.n	80192c4 <ip4_frag+0xd0>
 80192b6:	4b6c      	ldr	r3, [pc, #432]	@ (8019468 <ip4_frag+0x274>)
 80192b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80192bc:	496d      	ldr	r1, [pc, #436]	@ (8019474 <ip4_frag+0x280>)
 80192be:	486c      	ldr	r0, [pc, #432]	@ (8019470 <ip4_frag+0x27c>)
 80192c0:	f001 f8e4 	bl	801a48c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80192c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	2214      	movs	r2, #20
 80192ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80192cc:	4618      	mov	r0, r3
 80192ce:	f001 fa7c 	bl	801a7ca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80192d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d4:	685b      	ldr	r3, [r3, #4]
 80192d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80192d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80192da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80192de:	e064      	b.n	80193aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	895a      	ldrh	r2, [r3, #10]
 80192e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80192e6:	1ad3      	subs	r3, r2, r3
 80192e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	895b      	ldrh	r3, [r3, #10]
 80192ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d906      	bls.n	8019302 <ip4_frag+0x10e>
 80192f4:	4b5c      	ldr	r3, [pc, #368]	@ (8019468 <ip4_frag+0x274>)
 80192f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80192fa:	495f      	ldr	r1, [pc, #380]	@ (8019478 <ip4_frag+0x284>)
 80192fc:	485c      	ldr	r0, [pc, #368]	@ (8019470 <ip4_frag+0x27c>)
 80192fe:	f001 f8c5 	bl	801a48c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019302:	8bfa      	ldrh	r2, [r7, #30]
 8019304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019308:	4293      	cmp	r3, r2
 801930a:	bf28      	it	cs
 801930c:	4613      	movcs	r3, r2
 801930e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019316:	2b00      	cmp	r3, #0
 8019318:	d105      	bne.n	8019326 <ip4_frag+0x132>
        poff = 0;
 801931a:	2300      	movs	r3, #0
 801931c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	60fb      	str	r3, [r7, #12]
        continue;
 8019324:	e041      	b.n	80193aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019326:	f7ff ff0d 	bl	8019144 <ip_frag_alloc_pbuf_custom_ref>
 801932a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801932c:	69bb      	ldr	r3, [r7, #24]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d103      	bne.n	801933a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019334:	f7f7 f87a 	bl	801042c <pbuf_free>
        goto memerr;
 8019338:	e08f      	b.n	801945a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801933a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019342:	4413      	add	r3, r2
 8019344:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8019348:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801934c:	9201      	str	r2, [sp, #4]
 801934e:	9300      	str	r3, [sp, #0]
 8019350:	4603      	mov	r3, r0
 8019352:	2241      	movs	r2, #65	@ 0x41
 8019354:	2000      	movs	r0, #0
 8019356:	f7f6 feaf 	bl	80100b8 <pbuf_alloced_custom>
 801935a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d106      	bne.n	8019370 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019362:	69b8      	ldr	r0, [r7, #24]
 8019364:	f7ff fef6 	bl	8019154 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801936a:	f7f7 f85f 	bl	801042c <pbuf_free>
        goto memerr;
 801936e:	e074      	b.n	801945a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019370:	68f8      	ldr	r0, [r7, #12]
 8019372:	f7f7 f901 	bl	8010578 <pbuf_ref>
      pcr->original = p;
 8019376:	69bb      	ldr	r3, [r7, #24]
 8019378:	68fa      	ldr	r2, [r7, #12]
 801937a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801937c:	69bb      	ldr	r3, [r7, #24]
 801937e:	4a3f      	ldr	r2, [pc, #252]	@ (801947c <ip4_frag+0x288>)
 8019380:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019382:	6979      	ldr	r1, [r7, #20]
 8019384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019386:	f7f7 f91f 	bl	80105c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801938a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801938e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019392:	1ad3      	subs	r3, r2, r3
 8019394:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801939c:	2b00      	cmp	r3, #0
 801939e:	d004      	beq.n	80193aa <ip4_frag+0x1b6>
        poff = 0;
 80193a0:	2300      	movs	r3, #0
 80193a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80193aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d196      	bne.n	80192e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80193b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80193b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80193b8:	4413      	add	r3, r2
 80193ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80193c0:	f1a3 0213 	sub.w	r2, r3, #19
 80193c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80193c8:	429a      	cmp	r2, r3
 80193ca:	bfcc      	ite	gt
 80193cc:	2301      	movgt	r3, #1
 80193ce:	2300      	movle	r3, #0
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80193d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80193d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80193de:	6a3b      	ldr	r3, [r7, #32]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d002      	beq.n	80193ea <ip4_frag+0x1f6>
 80193e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d003      	beq.n	80193f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80193ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80193f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80193f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7f5 fc59 	bl	800ecac <lwip_htons>
 80193fa:	4603      	mov	r3, r0
 80193fc:	461a      	mov	r2, r3
 80193fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019400:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019402:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019404:	3314      	adds	r3, #20
 8019406:	b29b      	uxth	r3, r3
 8019408:	4618      	mov	r0, r3
 801940a:	f7f5 fc4f 	bl	800ecac <lwip_htons>
 801940e:	4603      	mov	r3, r0
 8019410:	461a      	mov	r2, r3
 8019412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019414:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019418:	2200      	movs	r2, #0
 801941a:	729a      	strb	r2, [r3, #10]
 801941c:	2200      	movs	r2, #0
 801941e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	695b      	ldr	r3, [r3, #20]
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019428:	68b8      	ldr	r0, [r7, #8]
 801942a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801942c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801942e:	f7f6 fffd 	bl	801042c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019432:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019436:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019438:	1ad3      	subs	r3, r2, r3
 801943a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801943e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019442:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019444:	4413      	add	r3, r2
 8019446:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801944a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801944e:	2b00      	cmp	r3, #0
 8019450:	f47f af19 	bne.w	8019286 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019454:	2300      	movs	r3, #0
 8019456:	e002      	b.n	801945e <ip4_frag+0x26a>
      goto memerr;
 8019458:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801945a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801945e:	4618      	mov	r0, r3
 8019460:	3748      	adds	r7, #72	@ 0x48
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	0801f0fc 	.word	0x0801f0fc
 801946c:	0801f2d8 	.word	0x0801f2d8
 8019470:	0801f144 	.word	0x0801f144
 8019474:	0801f2f4 	.word	0x0801f2f4
 8019478:	0801f314 	.word	0x0801f314
 801947c:	0801918d 	.word	0x0801918d

08019480 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b086      	sub	sp, #24
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801948a:	230e      	movs	r3, #14
 801948c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	895b      	ldrh	r3, [r3, #10]
 8019492:	2b0e      	cmp	r3, #14
 8019494:	d96e      	bls.n	8019574 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	7bdb      	ldrb	r3, [r3, #15]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d106      	bne.n	80194ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80194a4:	3301      	adds	r3, #1
 80194a6:	b2da      	uxtb	r2, r3
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	685b      	ldr	r3, [r3, #4]
 80194b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	7b1a      	ldrb	r2, [r3, #12]
 80194b6:	7b5b      	ldrb	r3, [r3, #13]
 80194b8:	021b      	lsls	r3, r3, #8
 80194ba:	4313      	orrs	r3, r2
 80194bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	781b      	ldrb	r3, [r3, #0]
 80194c2:	f003 0301 	and.w	r3, r3, #1
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d023      	beq.n	8019512 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	2b01      	cmp	r3, #1
 80194d0:	d10f      	bne.n	80194f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	785b      	ldrb	r3, [r3, #1]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d11b      	bne.n	8019512 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80194de:	2b5e      	cmp	r3, #94	@ 0x5e
 80194e0:	d117      	bne.n	8019512 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	7b5b      	ldrb	r3, [r3, #13]
 80194e6:	f043 0310 	orr.w	r3, r3, #16
 80194ea:	b2da      	uxtb	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	735a      	strb	r2, [r3, #13]
 80194f0:	e00f      	b.n	8019512 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	2206      	movs	r2, #6
 80194f6:	4928      	ldr	r1, [pc, #160]	@ (8019598 <ethernet_input+0x118>)
 80194f8:	4618      	mov	r0, r3
 80194fa:	f001 f852 	bl	801a5a2 <memcmp>
 80194fe:	4603      	mov	r3, r0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d106      	bne.n	8019512 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	7b5b      	ldrb	r3, [r3, #13]
 8019508:	f043 0308 	orr.w	r3, r3, #8
 801950c:	b2da      	uxtb	r2, r3
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019512:	89fb      	ldrh	r3, [r7, #14]
 8019514:	2b08      	cmp	r3, #8
 8019516:	d003      	beq.n	8019520 <ethernet_input+0xa0>
 8019518:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801951c:	d014      	beq.n	8019548 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801951e:	e032      	b.n	8019586 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019526:	f003 0308 	and.w	r3, r3, #8
 801952a:	2b00      	cmp	r3, #0
 801952c:	d024      	beq.n	8019578 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801952e:	8afb      	ldrh	r3, [r7, #22]
 8019530:	4619      	mov	r1, r3
 8019532:	6878      	ldr	r0, [r7, #4]
 8019534:	f7f6 fef4 	bl	8010320 <pbuf_remove_header>
 8019538:	4603      	mov	r3, r0
 801953a:	2b00      	cmp	r3, #0
 801953c:	d11e      	bne.n	801957c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801953e:	6839      	ldr	r1, [r7, #0]
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7fe fe91 	bl	8018268 <ip4_input>
      break;
 8019546:	e013      	b.n	8019570 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801954e:	f003 0308 	and.w	r3, r3, #8
 8019552:	2b00      	cmp	r3, #0
 8019554:	d014      	beq.n	8019580 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019556:	8afb      	ldrh	r3, [r7, #22]
 8019558:	4619      	mov	r1, r3
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f7f6 fee0 	bl	8010320 <pbuf_remove_header>
 8019560:	4603      	mov	r3, r0
 8019562:	2b00      	cmp	r3, #0
 8019564:	d10e      	bne.n	8019584 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019566:	6839      	ldr	r1, [r7, #0]
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7fe f833 	bl	80175d4 <etharp_input>
      break;
 801956e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019570:	2300      	movs	r3, #0
 8019572:	e00c      	b.n	801958e <ethernet_input+0x10e>
    goto free_and_return;
 8019574:	bf00      	nop
 8019576:	e006      	b.n	8019586 <ethernet_input+0x106>
        goto free_and_return;
 8019578:	bf00      	nop
 801957a:	e004      	b.n	8019586 <ethernet_input+0x106>
        goto free_and_return;
 801957c:	bf00      	nop
 801957e:	e002      	b.n	8019586 <ethernet_input+0x106>
        goto free_and_return;
 8019580:	bf00      	nop
 8019582:	e000      	b.n	8019586 <ethernet_input+0x106>
        goto free_and_return;
 8019584:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	f7f6 ff50 	bl	801042c <pbuf_free>
  return ERR_OK;
 801958c:	2300      	movs	r3, #0
}
 801958e:	4618      	mov	r0, r3
 8019590:	3718      	adds	r7, #24
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
 8019596:	bf00      	nop
 8019598:	0801f538 	.word	0x0801f538

0801959c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801959c:	b580      	push	{r7, lr}
 801959e:	b086      	sub	sp, #24
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
 80195a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80195aa:	8c3b      	ldrh	r3, [r7, #32]
 80195ac:	4618      	mov	r0, r3
 80195ae:	f7f5 fb7d 	bl	800ecac <lwip_htons>
 80195b2:	4603      	mov	r3, r0
 80195b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80195b6:	210e      	movs	r1, #14
 80195b8:	68b8      	ldr	r0, [r7, #8]
 80195ba:	f7f6 fea1 	bl	8010300 <pbuf_add_header>
 80195be:	4603      	mov	r3, r0
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d125      	bne.n	8019610 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	8afa      	ldrh	r2, [r7, #22]
 80195ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	2206      	movs	r2, #6
 80195d4:	6839      	ldr	r1, [r7, #0]
 80195d6:	4618      	mov	r0, r3
 80195d8:	f001 f8f7 	bl	801a7ca <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	3306      	adds	r3, #6
 80195e0:	2206      	movs	r2, #6
 80195e2:	6879      	ldr	r1, [r7, #4]
 80195e4:	4618      	mov	r0, r3
 80195e6:	f001 f8f0 	bl	801a7ca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80195f0:	2b06      	cmp	r3, #6
 80195f2:	d006      	beq.n	8019602 <ethernet_output+0x66>
 80195f4:	4b0a      	ldr	r3, [pc, #40]	@ (8019620 <ethernet_output+0x84>)
 80195f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80195fa:	490a      	ldr	r1, [pc, #40]	@ (8019624 <ethernet_output+0x88>)
 80195fc:	480a      	ldr	r0, [pc, #40]	@ (8019628 <ethernet_output+0x8c>)
 80195fe:	f000 ff45 	bl	801a48c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	699b      	ldr	r3, [r3, #24]
 8019606:	68b9      	ldr	r1, [r7, #8]
 8019608:	68f8      	ldr	r0, [r7, #12]
 801960a:	4798      	blx	r3
 801960c:	4603      	mov	r3, r0
 801960e:	e002      	b.n	8019616 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019610:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019612:	f06f 0301 	mvn.w	r3, #1
}
 8019616:	4618      	mov	r0, r3
 8019618:	3718      	adds	r7, #24
 801961a:	46bd      	mov	sp, r7
 801961c:	bd80      	pop	{r7, pc}
 801961e:	bf00      	nop
 8019620:	0801f324 	.word	0x0801f324
 8019624:	0801f35c 	.word	0x0801f35c
 8019628:	0801f390 	.word	0x0801f390

0801962c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b086      	sub	sp, #24
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	60bb      	str	r3, [r7, #8]
 801963a:	2304      	movs	r3, #4
 801963c:	60fb      	str	r3, [r7, #12]
 801963e:	2300      	movs	r3, #0
 8019640:	613b      	str	r3, [r7, #16]
 8019642:	2300      	movs	r3, #0
 8019644:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019646:	f107 0308 	add.w	r3, r7, #8
 801964a:	2100      	movs	r1, #0
 801964c:	4618      	mov	r0, r3
 801964e:	f7f2 fc0f 	bl	800be70 <osMessageCreate>
 8019652:	4602      	mov	r2, r0
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d102      	bne.n	8019666 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019660:	f04f 33ff 	mov.w	r3, #4294967295
 8019664:	e000      	b.n	8019668 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019666:	2300      	movs	r3, #0
}
 8019668:	4618      	mov	r0, r3
 801966a:	3718      	adds	r7, #24
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
 8019678:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	6839      	ldr	r1, [r7, #0]
 8019680:	2200      	movs	r2, #0
 8019682:	4618      	mov	r0, r3
 8019684:	f7f2 fc1c 	bl	800bec0 <osMessagePut>
 8019688:	4603      	mov	r3, r0
 801968a:	2b00      	cmp	r3, #0
 801968c:	d102      	bne.n	8019694 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801968e:	2300      	movs	r3, #0
 8019690:	73fb      	strb	r3, [r7, #15]
 8019692:	e001      	b.n	8019698 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019694:	23ff      	movs	r3, #255	@ 0xff
 8019696:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801969c:	4618      	mov	r0, r3
 801969e:	3710      	adds	r7, #16
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}

080196a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b08c      	sub	sp, #48	@ 0x30
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	61f8      	str	r0, [r7, #28]
 80196ac:	61b9      	str	r1, [r7, #24]
 80196ae:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80196b0:	f7f2 fa1c 	bl	800baec <osKernelSysTick>
 80196b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d017      	beq.n	80196ec <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	6819      	ldr	r1, [r3, #0]
 80196c0:	f107 0320 	add.w	r3, r7, #32
 80196c4:	697a      	ldr	r2, [r7, #20]
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7f2 fc3a 	bl	800bf40 <osMessageGet>

    if(event.status == osEventMessage)
 80196cc:	6a3b      	ldr	r3, [r7, #32]
 80196ce:	2b10      	cmp	r3, #16
 80196d0:	d109      	bne.n	80196e6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80196d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196d4:	461a      	mov	r2, r3
 80196d6:	69bb      	ldr	r3, [r7, #24]
 80196d8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80196da:	f7f2 fa07 	bl	800baec <osKernelSysTick>
 80196de:	4602      	mov	r2, r0
 80196e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196e2:	1ad3      	subs	r3, r2, r3
 80196e4:	e019      	b.n	801971a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80196e6:	f04f 33ff 	mov.w	r3, #4294967295
 80196ea:	e016      	b.n	801971a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	6819      	ldr	r1, [r3, #0]
 80196f0:	463b      	mov	r3, r7
 80196f2:	f04f 32ff 	mov.w	r2, #4294967295
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7f2 fc22 	bl	800bf40 <osMessageGet>
 80196fc:	f107 0320 	add.w	r3, r7, #32
 8019700:	463a      	mov	r2, r7
 8019702:	ca07      	ldmia	r2, {r0, r1, r2}
 8019704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801970a:	461a      	mov	r2, r3
 801970c:	69bb      	ldr	r3, [r7, #24]
 801970e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019710:	f7f2 f9ec 	bl	800baec <osKernelSysTick>
 8019714:	4602      	mov	r2, r0
 8019716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019718:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801971a:	4618      	mov	r0, r3
 801971c:	3730      	adds	r7, #48	@ 0x30
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}

08019722 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019722:	b480      	push	{r7}
 8019724:	b083      	sub	sp, #12
 8019726:	af00      	add	r7, sp, #0
 8019728:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d101      	bne.n	8019736 <sys_mbox_valid+0x14>
    return 0;
 8019732:	2300      	movs	r3, #0
 8019734:	e000      	b.n	8019738 <sys_mbox_valid+0x16>
  else
    return 1;
 8019736:	2301      	movs	r3, #1
}
 8019738:	4618      	mov	r0, r3
 801973a:	370c      	adds	r7, #12
 801973c:	46bd      	mov	sp, r7
 801973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019742:	4770      	bx	lr

08019744 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019748:	4803      	ldr	r0, [pc, #12]	@ (8019758 <sys_init+0x14>)
 801974a:	f7f2 fa3f 	bl	800bbcc <osMutexCreate>
 801974e:	4603      	mov	r3, r0
 8019750:	4a02      	ldr	r2, [pc, #8]	@ (801975c <sys_init+0x18>)
 8019752:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019754:	bf00      	nop
 8019756:	bd80      	pop	{r7, pc}
 8019758:	0801f548 	.word	0x0801f548
 801975c:	2000c8dc 	.word	0x2000c8dc

08019760 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019768:	2300      	movs	r3, #0
 801976a:	60bb      	str	r3, [r7, #8]
 801976c:	2300      	movs	r3, #0
 801976e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019770:	f107 0308 	add.w	r3, r7, #8
 8019774:	4618      	mov	r0, r3
 8019776:	f7f2 fa29 	bl	800bbcc <osMutexCreate>
 801977a:	4602      	mov	r2, r0
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d102      	bne.n	801978e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019788:	f04f 33ff 	mov.w	r3, #4294967295
 801978c:	e000      	b.n	8019790 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801978e:	2300      	movs	r3, #0
}
 8019790:	4618      	mov	r0, r3
 8019792:	3710      	adds	r7, #16
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f04f 31ff 	mov.w	r1, #4294967295
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7f2 fa27 	bl	800bbfc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80197ae:	bf00      	nop
 80197b0:	3708      	adds	r7, #8
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}

080197b6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80197b6:	b580      	push	{r7, lr}
 80197b8:	b082      	sub	sp, #8
 80197ba:	af00      	add	r7, sp, #0
 80197bc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7f2 fa68 	bl	800bc98 <osMutexRelease>
}
 80197c8:	bf00      	nop
 80197ca:	3708      	adds	r7, #8
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}

080197d0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b08c      	sub	sp, #48	@ 0x30
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	60f8      	str	r0, [r7, #12]
 80197d8:	60b9      	str	r1, [r7, #8]
 80197da:	607a      	str	r2, [r7, #4]
 80197dc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80197de:	f107 0314 	add.w	r3, r7, #20
 80197e2:	2200      	movs	r2, #0
 80197e4:	601a      	str	r2, [r3, #0]
 80197e6:	605a      	str	r2, [r3, #4]
 80197e8:	609a      	str	r2, [r3, #8]
 80197ea:	60da      	str	r2, [r3, #12]
 80197ec:	611a      	str	r2, [r3, #16]
 80197ee:	615a      	str	r2, [r3, #20]
 80197f0:	619a      	str	r2, [r3, #24]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	617b      	str	r3, [r7, #20]
 80197f6:	68bb      	ldr	r3, [r7, #8]
 80197f8:	61bb      	str	r3, [r7, #24]
 80197fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197fc:	b21b      	sxth	r3, r3
 80197fe:	83bb      	strh	r3, [r7, #28]
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019804:	f107 0314 	add.w	r3, r7, #20
 8019808:	6879      	ldr	r1, [r7, #4]
 801980a:	4618      	mov	r0, r3
 801980c:	f7f2 f97e 	bl	800bb0c <osThreadCreate>
 8019810:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019812:	4618      	mov	r0, r3
 8019814:	3730      	adds	r7, #48	@ 0x30
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}
	...

0801981c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019820:	4b04      	ldr	r3, [pc, #16]	@ (8019834 <sys_arch_protect+0x18>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	f04f 31ff 	mov.w	r1, #4294967295
 8019828:	4618      	mov	r0, r3
 801982a:	f7f2 f9e7 	bl	800bbfc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801982e:	2301      	movs	r3, #1
}
 8019830:	4618      	mov	r0, r3
 8019832:	bd80      	pop	{r7, pc}
 8019834:	2000c8dc 	.word	0x2000c8dc

08019838 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019840:	4b04      	ldr	r3, [pc, #16]	@ (8019854 <sys_arch_unprotect+0x1c>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	4618      	mov	r0, r3
 8019846:	f7f2 fa27 	bl	800bc98 <osMutexRelease>
}
 801984a:	bf00      	nop
 801984c:	3708      	adds	r7, #8
 801984e:	46bd      	mov	sp, r7
 8019850:	bd80      	pop	{r7, pc}
 8019852:	bf00      	nop
 8019854:	2000c8dc 	.word	0x2000c8dc

08019858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801985c:	2200      	movs	r2, #0
 801985e:	4912      	ldr	r1, [pc, #72]	@ (80198a8 <MX_USB_DEVICE_Init+0x50>)
 8019860:	4812      	ldr	r0, [pc, #72]	@ (80198ac <MX_USB_DEVICE_Init+0x54>)
 8019862:	f7f0 fdf3 	bl	800a44c <USBD_Init>
 8019866:	4603      	mov	r3, r0
 8019868:	2b00      	cmp	r3, #0
 801986a:	d001      	beq.n	8019870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801986c:	f7e7 f8bc 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019870:	490f      	ldr	r1, [pc, #60]	@ (80198b0 <MX_USB_DEVICE_Init+0x58>)
 8019872:	480e      	ldr	r0, [pc, #56]	@ (80198ac <MX_USB_DEVICE_Init+0x54>)
 8019874:	f7f0 fe1a 	bl	800a4ac <USBD_RegisterClass>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d001      	beq.n	8019882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801987e:	f7e7 f8b3 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019882:	490c      	ldr	r1, [pc, #48]	@ (80198b4 <MX_USB_DEVICE_Init+0x5c>)
 8019884:	4809      	ldr	r0, [pc, #36]	@ (80198ac <MX_USB_DEVICE_Init+0x54>)
 8019886:	f7f0 fd11 	bl	800a2ac <USBD_CDC_RegisterInterface>
 801988a:	4603      	mov	r3, r0
 801988c:	2b00      	cmp	r3, #0
 801988e:	d001      	beq.n	8019894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019890:	f7e7 f8aa 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019894:	4805      	ldr	r0, [pc, #20]	@ (80198ac <MX_USB_DEVICE_Init+0x54>)
 8019896:	f7f0 fe3f 	bl	800a518 <USBD_Start>
 801989a:	4603      	mov	r3, r0
 801989c:	2b00      	cmp	r3, #0
 801989e:	d001      	beq.n	80198a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80198a0:	f7e7 f8a2 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80198a4:	bf00      	nop
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	200000bc 	.word	0x200000bc
 80198ac:	2000c8e0 	.word	0x2000c8e0
 80198b0:	20000018 	.word	0x20000018
 80198b4:	200000a8 	.word	0x200000a8

080198b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80198bc:	2200      	movs	r2, #0
 80198be:	4905      	ldr	r1, [pc, #20]	@ (80198d4 <CDC_Init_FS+0x1c>)
 80198c0:	4805      	ldr	r0, [pc, #20]	@ (80198d8 <CDC_Init_FS+0x20>)
 80198c2:	f7f0 fd0d 	bl	800a2e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80198c6:	4905      	ldr	r1, [pc, #20]	@ (80198dc <CDC_Init_FS+0x24>)
 80198c8:	4803      	ldr	r0, [pc, #12]	@ (80198d8 <CDC_Init_FS+0x20>)
 80198ca:	f7f0 fd2b 	bl	800a324 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80198ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	bd80      	pop	{r7, pc}
 80198d4:	2000d3bc 	.word	0x2000d3bc
 80198d8:	2000c8e0 	.word	0x2000c8e0
 80198dc:	2000cbbc 	.word	0x2000cbbc

080198e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80198e0:	b480      	push	{r7}
 80198e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80198e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80198e6:	4618      	mov	r0, r3
 80198e8:	46bd      	mov	sp, r7
 80198ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ee:	4770      	bx	lr

080198f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b083      	sub	sp, #12
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	4603      	mov	r3, r0
 80198f8:	6039      	str	r1, [r7, #0]
 80198fa:	71fb      	strb	r3, [r7, #7]
 80198fc:	4613      	mov	r3, r2
 80198fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019900:	79fb      	ldrb	r3, [r7, #7]
 8019902:	2b23      	cmp	r3, #35	@ 0x23
 8019904:	d84a      	bhi.n	801999c <CDC_Control_FS+0xac>
 8019906:	a201      	add	r2, pc, #4	@ (adr r2, 801990c <CDC_Control_FS+0x1c>)
 8019908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801990c:	0801999d 	.word	0x0801999d
 8019910:	0801999d 	.word	0x0801999d
 8019914:	0801999d 	.word	0x0801999d
 8019918:	0801999d 	.word	0x0801999d
 801991c:	0801999d 	.word	0x0801999d
 8019920:	0801999d 	.word	0x0801999d
 8019924:	0801999d 	.word	0x0801999d
 8019928:	0801999d 	.word	0x0801999d
 801992c:	0801999d 	.word	0x0801999d
 8019930:	0801999d 	.word	0x0801999d
 8019934:	0801999d 	.word	0x0801999d
 8019938:	0801999d 	.word	0x0801999d
 801993c:	0801999d 	.word	0x0801999d
 8019940:	0801999d 	.word	0x0801999d
 8019944:	0801999d 	.word	0x0801999d
 8019948:	0801999d 	.word	0x0801999d
 801994c:	0801999d 	.word	0x0801999d
 8019950:	0801999d 	.word	0x0801999d
 8019954:	0801999d 	.word	0x0801999d
 8019958:	0801999d 	.word	0x0801999d
 801995c:	0801999d 	.word	0x0801999d
 8019960:	0801999d 	.word	0x0801999d
 8019964:	0801999d 	.word	0x0801999d
 8019968:	0801999d 	.word	0x0801999d
 801996c:	0801999d 	.word	0x0801999d
 8019970:	0801999d 	.word	0x0801999d
 8019974:	0801999d 	.word	0x0801999d
 8019978:	0801999d 	.word	0x0801999d
 801997c:	0801999d 	.word	0x0801999d
 8019980:	0801999d 	.word	0x0801999d
 8019984:	0801999d 	.word	0x0801999d
 8019988:	0801999d 	.word	0x0801999d
 801998c:	0801999d 	.word	0x0801999d
 8019990:	0801999d 	.word	0x0801999d
 8019994:	0801999d 	.word	0x0801999d
 8019998:	0801999d 	.word	0x0801999d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801999c:	bf00      	nop
  }

  return (USBD_OK);
 801999e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	370c      	adds	r7, #12
 80199a4:	46bd      	mov	sp, r7
 80199a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199aa:	4770      	bx	lr

080199ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b082      	sub	sp, #8
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80199b6:	6879      	ldr	r1, [r7, #4]
 80199b8:	4805      	ldr	r0, [pc, #20]	@ (80199d0 <CDC_Receive_FS+0x24>)
 80199ba:	f7f0 fcb3 	bl	800a324 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80199be:	4804      	ldr	r0, [pc, #16]	@ (80199d0 <CDC_Receive_FS+0x24>)
 80199c0:	f7f0 fd0e 	bl	800a3e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80199c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80199c6:	4618      	mov	r0, r3
 80199c8:	3708      	adds	r7, #8
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}
 80199ce:	bf00      	nop
 80199d0:	2000c8e0 	.word	0x2000c8e0

080199d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b084      	sub	sp, #16
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	460b      	mov	r3, r1
 80199de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80199e0:	2300      	movs	r3, #0
 80199e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80199e4:	4b0d      	ldr	r3, [pc, #52]	@ (8019a1c <CDC_Transmit_FS+0x48>)
 80199e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80199ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d001      	beq.n	80199fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e00b      	b.n	8019a12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80199fa:	887b      	ldrh	r3, [r7, #2]
 80199fc:	461a      	mov	r2, r3
 80199fe:	6879      	ldr	r1, [r7, #4]
 8019a00:	4806      	ldr	r0, [pc, #24]	@ (8019a1c <CDC_Transmit_FS+0x48>)
 8019a02:	f7f0 fc6d 	bl	800a2e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019a06:	4805      	ldr	r0, [pc, #20]	@ (8019a1c <CDC_Transmit_FS+0x48>)
 8019a08:	f7f0 fcaa 	bl	800a360 <USBD_CDC_TransmitPacket>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	3710      	adds	r7, #16
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
 8019a1a:	bf00      	nop
 8019a1c:	2000c8e0 	.word	0x2000c8e0

08019a20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019a20:	b480      	push	{r7}
 8019a22:	b087      	sub	sp, #28
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	371c      	adds	r7, #28
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a40:	4770      	bx	lr
	...

08019a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6039      	str	r1, [r7, #0]
 8019a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	2212      	movs	r2, #18
 8019a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019a56:	4b03      	ldr	r3, [pc, #12]	@ (8019a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	370c      	adds	r7, #12
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr
 8019a64:	200000d8 	.word	0x200000d8

08019a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b083      	sub	sp, #12
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	4603      	mov	r3, r0
 8019a70:	6039      	str	r1, [r7, #0]
 8019a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	2204      	movs	r2, #4
 8019a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019a7a:	4b03      	ldr	r3, [pc, #12]	@ (8019a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	370c      	adds	r7, #12
 8019a80:	46bd      	mov	sp, r7
 8019a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a86:	4770      	bx	lr
 8019a88:	200000ec 	.word	0x200000ec

08019a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b082      	sub	sp, #8
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	4603      	mov	r3, r0
 8019a94:	6039      	str	r1, [r7, #0]
 8019a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a98:	79fb      	ldrb	r3, [r7, #7]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d105      	bne.n	8019aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a9e:	683a      	ldr	r2, [r7, #0]
 8019aa0:	4907      	ldr	r1, [pc, #28]	@ (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019aa2:	4808      	ldr	r0, [pc, #32]	@ (8019ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019aa4:	f7f1 fefe 	bl	800b8a4 <USBD_GetString>
 8019aa8:	e004      	b.n	8019ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019aaa:	683a      	ldr	r2, [r7, #0]
 8019aac:	4904      	ldr	r1, [pc, #16]	@ (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019aae:	4805      	ldr	r0, [pc, #20]	@ (8019ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019ab0:	f7f1 fef8 	bl	800b8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ab4:	4b02      	ldr	r3, [pc, #8]	@ (8019ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
 8019abe:	bf00      	nop
 8019ac0:	2000dbbc 	.word	0x2000dbbc
 8019ac4:	0801f3b8 	.word	0x0801f3b8

08019ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b082      	sub	sp, #8
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	4603      	mov	r3, r0
 8019ad0:	6039      	str	r1, [r7, #0]
 8019ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019ad4:	683a      	ldr	r2, [r7, #0]
 8019ad6:	4904      	ldr	r1, [pc, #16]	@ (8019ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019ad8:	4804      	ldr	r0, [pc, #16]	@ (8019aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019ada:	f7f1 fee3 	bl	800b8a4 <USBD_GetString>
  return USBD_StrDesc;
 8019ade:	4b02      	ldr	r3, [pc, #8]	@ (8019ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	3708      	adds	r7, #8
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	2000dbbc 	.word	0x2000dbbc
 8019aec:	0801f3d0 	.word	0x0801f3d0

08019af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b082      	sub	sp, #8
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	4603      	mov	r3, r0
 8019af8:	6039      	str	r1, [r7, #0]
 8019afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	221a      	movs	r2, #26
 8019b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019b02:	f000 f843 	bl	8019b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019b06:	4b02      	ldr	r3, [pc, #8]	@ (8019b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3708      	adds	r7, #8
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}
 8019b10:	200000f0 	.word	0x200000f0

08019b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	6039      	str	r1, [r7, #0]
 8019b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019b20:	79fb      	ldrb	r3, [r7, #7]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d105      	bne.n	8019b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019b26:	683a      	ldr	r2, [r7, #0]
 8019b28:	4907      	ldr	r1, [pc, #28]	@ (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019b2a:	4808      	ldr	r0, [pc, #32]	@ (8019b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019b2c:	f7f1 feba 	bl	800b8a4 <USBD_GetString>
 8019b30:	e004      	b.n	8019b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	4904      	ldr	r1, [pc, #16]	@ (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019b36:	4805      	ldr	r0, [pc, #20]	@ (8019b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019b38:	f7f1 feb4 	bl	800b8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b3c:	4b02      	ldr	r3, [pc, #8]	@ (8019b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3708      	adds	r7, #8
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	2000dbbc 	.word	0x2000dbbc
 8019b4c:	0801f3e4 	.word	0x0801f3e4

08019b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	4603      	mov	r3, r0
 8019b58:	6039      	str	r1, [r7, #0]
 8019b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019b5c:	79fb      	ldrb	r3, [r7, #7]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d105      	bne.n	8019b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b62:	683a      	ldr	r2, [r7, #0]
 8019b64:	4907      	ldr	r1, [pc, #28]	@ (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b66:	4808      	ldr	r0, [pc, #32]	@ (8019b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b68:	f7f1 fe9c 	bl	800b8a4 <USBD_GetString>
 8019b6c:	e004      	b.n	8019b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	4904      	ldr	r1, [pc, #16]	@ (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b72:	4805      	ldr	r0, [pc, #20]	@ (8019b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b74:	f7f1 fe96 	bl	800b8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b78:	4b02      	ldr	r3, [pc, #8]	@ (8019b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3708      	adds	r7, #8
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	2000dbbc 	.word	0x2000dbbc
 8019b88:	0801f3f0 	.word	0x0801f3f0

08019b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019b92:	4b0f      	ldr	r3, [pc, #60]	@ (8019bd0 <Get_SerialNum+0x44>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019b98:	4b0e      	ldr	r3, [pc, #56]	@ (8019bd4 <Get_SerialNum+0x48>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8019bd8 <Get_SerialNum+0x4c>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019ba4:	68fa      	ldr	r2, [r7, #12]
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	4413      	add	r3, r2
 8019baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d009      	beq.n	8019bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019bb2:	2208      	movs	r2, #8
 8019bb4:	4909      	ldr	r1, [pc, #36]	@ (8019bdc <Get_SerialNum+0x50>)
 8019bb6:	68f8      	ldr	r0, [r7, #12]
 8019bb8:	f000 f814 	bl	8019be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019bbc:	2204      	movs	r2, #4
 8019bbe:	4908      	ldr	r1, [pc, #32]	@ (8019be0 <Get_SerialNum+0x54>)
 8019bc0:	68b8      	ldr	r0, [r7, #8]
 8019bc2:	f000 f80f 	bl	8019be4 <IntToUnicode>
  }
}
 8019bc6:	bf00      	nop
 8019bc8:	3710      	adds	r7, #16
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}
 8019bce:	bf00      	nop
 8019bd0:	1fff7a10 	.word	0x1fff7a10
 8019bd4:	1fff7a14 	.word	0x1fff7a14
 8019bd8:	1fff7a18 	.word	0x1fff7a18
 8019bdc:	200000f2 	.word	0x200000f2
 8019be0:	20000102 	.word	0x20000102

08019be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019be4:	b480      	push	{r7}
 8019be6:	b087      	sub	sp, #28
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	60f8      	str	r0, [r7, #12]
 8019bec:	60b9      	str	r1, [r7, #8]
 8019bee:	4613      	mov	r3, r2
 8019bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	75fb      	strb	r3, [r7, #23]
 8019bfa:	e027      	b.n	8019c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	0f1b      	lsrs	r3, r3, #28
 8019c00:	2b09      	cmp	r3, #9
 8019c02:	d80b      	bhi.n	8019c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	0f1b      	lsrs	r3, r3, #28
 8019c08:	b2da      	uxtb	r2, r3
 8019c0a:	7dfb      	ldrb	r3, [r7, #23]
 8019c0c:	005b      	lsls	r3, r3, #1
 8019c0e:	4619      	mov	r1, r3
 8019c10:	68bb      	ldr	r3, [r7, #8]
 8019c12:	440b      	add	r3, r1
 8019c14:	3230      	adds	r2, #48	@ 0x30
 8019c16:	b2d2      	uxtb	r2, r2
 8019c18:	701a      	strb	r2, [r3, #0]
 8019c1a:	e00a      	b.n	8019c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	0f1b      	lsrs	r3, r3, #28
 8019c20:	b2da      	uxtb	r2, r3
 8019c22:	7dfb      	ldrb	r3, [r7, #23]
 8019c24:	005b      	lsls	r3, r3, #1
 8019c26:	4619      	mov	r1, r3
 8019c28:	68bb      	ldr	r3, [r7, #8]
 8019c2a:	440b      	add	r3, r1
 8019c2c:	3237      	adds	r2, #55	@ 0x37
 8019c2e:	b2d2      	uxtb	r2, r2
 8019c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	011b      	lsls	r3, r3, #4
 8019c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019c38:	7dfb      	ldrb	r3, [r7, #23]
 8019c3a:	005b      	lsls	r3, r3, #1
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	68ba      	ldr	r2, [r7, #8]
 8019c40:	4413      	add	r3, r2
 8019c42:	2200      	movs	r2, #0
 8019c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019c46:	7dfb      	ldrb	r3, [r7, #23]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	75fb      	strb	r3, [r7, #23]
 8019c4c:	7dfa      	ldrb	r2, [r7, #23]
 8019c4e:	79fb      	ldrb	r3, [r7, #7]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d3d3      	bcc.n	8019bfc <IntToUnicode+0x18>
  }
}
 8019c54:	bf00      	nop
 8019c56:	bf00      	nop
 8019c58:	371c      	adds	r7, #28
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c60:	4770      	bx	lr
	...

08019c64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b08a      	sub	sp, #40	@ 0x28
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c6c:	f107 0314 	add.w	r3, r7, #20
 8019c70:	2200      	movs	r2, #0
 8019c72:	601a      	str	r2, [r3, #0]
 8019c74:	605a      	str	r2, [r3, #4]
 8019c76:	609a      	str	r2, [r3, #8]
 8019c78:	60da      	str	r2, [r3, #12]
 8019c7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8019c84:	d13a      	bne.n	8019cfc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019c86:	2300      	movs	r3, #0
 8019c88:	613b      	str	r3, [r7, #16]
 8019c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019c90:	f043 0301 	orr.w	r3, r3, #1
 8019c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8019c96:	4b1b      	ldr	r3, [pc, #108]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c9a:	f003 0301 	and.w	r3, r3, #1
 8019c9e:	613b      	str	r3, [r7, #16]
 8019ca0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019ca2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8019ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019ca8:	2302      	movs	r3, #2
 8019caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019cac:	2300      	movs	r3, #0
 8019cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019cb0:	2303      	movs	r3, #3
 8019cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019cb4:	230a      	movs	r3, #10
 8019cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019cb8:	f107 0314 	add.w	r3, r7, #20
 8019cbc:	4619      	mov	r1, r3
 8019cbe:	4812      	ldr	r0, [pc, #72]	@ (8019d08 <HAL_PCD_MspInit+0xa4>)
 8019cc0:	f7ea f952 	bl	8003f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019cce:	6353      	str	r3, [r2, #52]	@ 0x34
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	60fb      	str	r3, [r7, #12]
 8019cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019cde:	6453      	str	r3, [r2, #68]	@ 0x44
 8019ce0:	4b08      	ldr	r3, [pc, #32]	@ (8019d04 <HAL_PCD_MspInit+0xa0>)
 8019ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019ce8:	60fb      	str	r3, [r7, #12]
 8019cea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8019cec:	2200      	movs	r2, #0
 8019cee:	2106      	movs	r1, #6
 8019cf0:	2043      	movs	r0, #67	@ 0x43
 8019cf2:	f7e8 fedb 	bl	8002aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019cf6:	2043      	movs	r0, #67	@ 0x43
 8019cf8:	f7e8 fef4 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019cfc:	bf00      	nop
 8019cfe:	3728      	adds	r7, #40	@ 0x28
 8019d00:	46bd      	mov	sp, r7
 8019d02:	bd80      	pop	{r7, pc}
 8019d04:	40023800 	.word	0x40023800
 8019d08:	40020000 	.word	0x40020000

08019d0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8019d20:	4619      	mov	r1, r3
 8019d22:	4610      	mov	r0, r2
 8019d24:	f7f0 fc45 	bl	800a5b2 <USBD_LL_SetupStage>
}
 8019d28:	bf00      	nop
 8019d2a:	3708      	adds	r7, #8
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}

08019d30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b082      	sub	sp, #8
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	460b      	mov	r3, r1
 8019d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019d42:	78fa      	ldrb	r2, [r7, #3]
 8019d44:	6879      	ldr	r1, [r7, #4]
 8019d46:	4613      	mov	r3, r2
 8019d48:	00db      	lsls	r3, r3, #3
 8019d4a:	4413      	add	r3, r2
 8019d4c:	009b      	lsls	r3, r3, #2
 8019d4e:	440b      	add	r3, r1
 8019d50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8019d54:	681a      	ldr	r2, [r3, #0]
 8019d56:	78fb      	ldrb	r3, [r7, #3]
 8019d58:	4619      	mov	r1, r3
 8019d5a:	f7f0 fc7f 	bl	800a65c <USBD_LL_DataOutStage>
}
 8019d5e:	bf00      	nop
 8019d60:	3708      	adds	r7, #8
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}

08019d66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d66:	b580      	push	{r7, lr}
 8019d68:	b082      	sub	sp, #8
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]
 8019d6e:	460b      	mov	r3, r1
 8019d70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019d78:	78fa      	ldrb	r2, [r7, #3]
 8019d7a:	6879      	ldr	r1, [r7, #4]
 8019d7c:	4613      	mov	r3, r2
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	4413      	add	r3, r2
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	440b      	add	r3, r1
 8019d86:	3320      	adds	r3, #32
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	78fb      	ldrb	r3, [r7, #3]
 8019d8c:	4619      	mov	r1, r3
 8019d8e:	f7f0 fd21 	bl	800a7d4 <USBD_LL_DataInStage>
}
 8019d92:	bf00      	nop
 8019d94:	3708      	adds	r7, #8
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd80      	pop	{r7, pc}

08019d9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d9a:	b580      	push	{r7, lr}
 8019d9c:	b082      	sub	sp, #8
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7f0 fe65 	bl	800aa78 <USBD_LL_SOF>
}
 8019dae:	bf00      	nop
 8019db0:	3708      	adds	r7, #8
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}

08019db6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019db6:	b580      	push	{r7, lr}
 8019db8:	b084      	sub	sp, #16
 8019dba:	af00      	add	r7, sp, #0
 8019dbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	79db      	ldrb	r3, [r3, #7]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d102      	bne.n	8019dd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019dca:	2300      	movs	r3, #0
 8019dcc:	73fb      	strb	r3, [r7, #15]
 8019dce:	e008      	b.n	8019de2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	79db      	ldrb	r3, [r3, #7]
 8019dd4:	2b02      	cmp	r3, #2
 8019dd6:	d102      	bne.n	8019dde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019dd8:	2301      	movs	r3, #1
 8019dda:	73fb      	strb	r3, [r7, #15]
 8019ddc:	e001      	b.n	8019de2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019dde:	f7e6 fe03 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019de8:	7bfa      	ldrb	r2, [r7, #15]
 8019dea:	4611      	mov	r1, r2
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7f0 fdff 	bl	800a9f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7f0 fda6 	bl	800a94a <USBD_LL_Reset>
}
 8019dfe:	bf00      	nop
 8019e00:	3710      	adds	r7, #16
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
	...

08019e08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7f0 fdfa 	bl	800aa10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	6812      	ldr	r2, [r2, #0]
 8019e2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8019e2e:	f043 0301 	orr.w	r3, r3, #1
 8019e32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	7adb      	ldrb	r3, [r3, #11]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d005      	beq.n	8019e48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e3c:	4b04      	ldr	r3, [pc, #16]	@ (8019e50 <HAL_PCD_SuspendCallback+0x48>)
 8019e3e:	691b      	ldr	r3, [r3, #16]
 8019e40:	4a03      	ldr	r2, [pc, #12]	@ (8019e50 <HAL_PCD_SuspendCallback+0x48>)
 8019e42:	f043 0306 	orr.w	r3, r3, #6
 8019e46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019e48:	bf00      	nop
 8019e4a:	3708      	adds	r7, #8
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}
 8019e50:	e000ed00 	.word	0xe000ed00

08019e54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7f0 fdf0 	bl	800aa48 <USBD_LL_Resume>
}
 8019e68:	bf00      	nop
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	460b      	mov	r3, r1
 8019e7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019e82:	78fa      	ldrb	r2, [r7, #3]
 8019e84:	4611      	mov	r1, r2
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7f0 fe48 	bl	800ab1c <USBD_LL_IsoOUTIncomplete>
}
 8019e8c:	bf00      	nop
 8019e8e:	3708      	adds	r7, #8
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b082      	sub	sp, #8
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019ea6:	78fa      	ldrb	r2, [r7, #3]
 8019ea8:	4611      	mov	r1, r2
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7f0 fe04 	bl	800aab8 <USBD_LL_IsoINIncomplete>
}
 8019eb0:	bf00      	nop
 8019eb2:	3708      	adds	r7, #8
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7f0 fe5a 	bl	800ab80 <USBD_LL_DevConnected>
}
 8019ecc:	bf00      	nop
 8019ece:	3708      	adds	r7, #8
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}

08019ed4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b082      	sub	sp, #8
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	f7f0 fe57 	bl	800ab96 <USBD_LL_DevDisconnected>
}
 8019ee8:	bf00      	nop
 8019eea:	3708      	adds	r7, #8
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd80      	pop	{r7, pc}

08019ef0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b082      	sub	sp, #8
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d13c      	bne.n	8019f7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019f00:	4a20      	ldr	r2, [pc, #128]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019f10:	4b1c      	ldr	r3, [pc, #112]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019f16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019f18:	4b1a      	ldr	r3, [pc, #104]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f1a:	2204      	movs	r2, #4
 8019f1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019f1e:	4b19      	ldr	r3, [pc, #100]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f20:	2202      	movs	r2, #2
 8019f22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019f24:	4b17      	ldr	r3, [pc, #92]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f26:	2200      	movs	r2, #0
 8019f28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019f2a:	4b16      	ldr	r3, [pc, #88]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f2c:	2202      	movs	r2, #2
 8019f2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019f30:	4b14      	ldr	r3, [pc, #80]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f32:	2200      	movs	r2, #0
 8019f34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019f36:	4b13      	ldr	r3, [pc, #76]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f38:	2200      	movs	r2, #0
 8019f3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019f3c:	4b11      	ldr	r3, [pc, #68]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f3e:	2200      	movs	r2, #0
 8019f40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019f42:	4b10      	ldr	r3, [pc, #64]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f44:	2200      	movs	r2, #0
 8019f46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019f48:	4b0e      	ldr	r3, [pc, #56]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019f4e:	480d      	ldr	r0, [pc, #52]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f50:	f7ea f9bf 	bl	80042d2 <HAL_PCD_Init>
 8019f54:	4603      	mov	r3, r0
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d001      	beq.n	8019f5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019f5a:	f7e6 fd45 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019f5e:	2180      	movs	r1, #128	@ 0x80
 8019f60:	4808      	ldr	r0, [pc, #32]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f62:	f7eb fbec 	bl	800573e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019f66:	2240      	movs	r2, #64	@ 0x40
 8019f68:	2100      	movs	r1, #0
 8019f6a:	4806      	ldr	r0, [pc, #24]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f6c:	f7eb fba0 	bl	80056b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019f70:	2280      	movs	r2, #128	@ 0x80
 8019f72:	2101      	movs	r1, #1
 8019f74:	4803      	ldr	r0, [pc, #12]	@ (8019f84 <USBD_LL_Init+0x94>)
 8019f76:	f7eb fb9b 	bl	80056b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019f7a:	2300      	movs	r3, #0
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	3708      	adds	r7, #8
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd80      	pop	{r7, pc}
 8019f84:	2000ddbc 	.word	0x2000ddbc

08019f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b084      	sub	sp, #16
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f90:	2300      	movs	r3, #0
 8019f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f94:	2300      	movs	r3, #0
 8019f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f7ea faa6 	bl	80044f0 <HAL_PCD_Start>
 8019fa4:	4603      	mov	r3, r0
 8019fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fa8:	7bfb      	ldrb	r3, [r7, #15]
 8019faa:	4618      	mov	r0, r3
 8019fac:	f000 f942 	bl	801a234 <USBD_Get_USB_Status>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	3710      	adds	r7, #16
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}

08019fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019fbe:	b580      	push	{r7, lr}
 8019fc0:	b084      	sub	sp, #16
 8019fc2:	af00      	add	r7, sp, #0
 8019fc4:	6078      	str	r0, [r7, #4]
 8019fc6:	4608      	mov	r0, r1
 8019fc8:	4611      	mov	r1, r2
 8019fca:	461a      	mov	r2, r3
 8019fcc:	4603      	mov	r3, r0
 8019fce:	70fb      	strb	r3, [r7, #3]
 8019fd0:	460b      	mov	r3, r1
 8019fd2:	70bb      	strb	r3, [r7, #2]
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fd8:	2300      	movs	r3, #0
 8019fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019fe6:	78bb      	ldrb	r3, [r7, #2]
 8019fe8:	883a      	ldrh	r2, [r7, #0]
 8019fea:	78f9      	ldrb	r1, [r7, #3]
 8019fec:	f7ea ff7a 	bl	8004ee4 <HAL_PCD_EP_Open>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ff4:	7bfb      	ldrb	r3, [r7, #15]
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f000 f91c 	bl	801a234 <USBD_Get_USB_Status>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a000:	7bbb      	ldrb	r3, [r7, #14]
}
 801a002:	4618      	mov	r0, r3
 801a004:	3710      	adds	r7, #16
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}

0801a00a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a00a:	b580      	push	{r7, lr}
 801a00c:	b084      	sub	sp, #16
 801a00e:	af00      	add	r7, sp, #0
 801a010:	6078      	str	r0, [r7, #4]
 801a012:	460b      	mov	r3, r1
 801a014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a016:	2300      	movs	r3, #0
 801a018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a01a:	2300      	movs	r3, #0
 801a01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a024:	78fa      	ldrb	r2, [r7, #3]
 801a026:	4611      	mov	r1, r2
 801a028:	4618      	mov	r0, r3
 801a02a:	f7ea ffc5 	bl	8004fb8 <HAL_PCD_EP_Close>
 801a02e:	4603      	mov	r3, r0
 801a030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a032:	7bfb      	ldrb	r3, [r7, #15]
 801a034:	4618      	mov	r0, r3
 801a036:	f000 f8fd 	bl	801a234 <USBD_Get_USB_Status>
 801a03a:	4603      	mov	r3, r0
 801a03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a03e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a040:	4618      	mov	r0, r3
 801a042:	3710      	adds	r7, #16
 801a044:	46bd      	mov	sp, r7
 801a046:	bd80      	pop	{r7, pc}

0801a048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b084      	sub	sp, #16
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	460b      	mov	r3, r1
 801a052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a054:	2300      	movs	r3, #0
 801a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a058:	2300      	movs	r3, #0
 801a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a062:	78fa      	ldrb	r2, [r7, #3]
 801a064:	4611      	mov	r1, r2
 801a066:	4618      	mov	r0, r3
 801a068:	f7eb f87d 	bl	8005166 <HAL_PCD_EP_SetStall>
 801a06c:	4603      	mov	r3, r0
 801a06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a070:	7bfb      	ldrb	r3, [r7, #15]
 801a072:	4618      	mov	r0, r3
 801a074:	f000 f8de 	bl	801a234 <USBD_Get_USB_Status>
 801a078:	4603      	mov	r3, r0
 801a07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a07c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3710      	adds	r7, #16
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}

0801a086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a086:	b580      	push	{r7, lr}
 801a088:	b084      	sub	sp, #16
 801a08a:	af00      	add	r7, sp, #0
 801a08c:	6078      	str	r0, [r7, #4]
 801a08e:	460b      	mov	r3, r1
 801a090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a092:	2300      	movs	r3, #0
 801a094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a096:	2300      	movs	r3, #0
 801a098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a0a0:	78fa      	ldrb	r2, [r7, #3]
 801a0a2:	4611      	mov	r1, r2
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f7eb f8c1 	bl	800522c <HAL_PCD_EP_ClrStall>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0ae:	7bfb      	ldrb	r3, [r7, #15]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f000 f8bf 	bl	801a234 <USBD_Get_USB_Status>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 801a0bc:	4618      	mov	r0, r3
 801a0be:	3710      	adds	r7, #16
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	bd80      	pop	{r7, pc}

0801a0c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b085      	sub	sp, #20
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	460b      	mov	r3, r1
 801a0ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a0d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a0d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	da0b      	bge.n	801a0f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a0e0:	78fb      	ldrb	r3, [r7, #3]
 801a0e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a0e6:	68f9      	ldr	r1, [r7, #12]
 801a0e8:	4613      	mov	r3, r2
 801a0ea:	00db      	lsls	r3, r3, #3
 801a0ec:	4413      	add	r3, r2
 801a0ee:	009b      	lsls	r3, r3, #2
 801a0f0:	440b      	add	r3, r1
 801a0f2:	3316      	adds	r3, #22
 801a0f4:	781b      	ldrb	r3, [r3, #0]
 801a0f6:	e00b      	b.n	801a110 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a0f8:	78fb      	ldrb	r3, [r7, #3]
 801a0fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a0fe:	68f9      	ldr	r1, [r7, #12]
 801a100:	4613      	mov	r3, r2
 801a102:	00db      	lsls	r3, r3, #3
 801a104:	4413      	add	r3, r2
 801a106:	009b      	lsls	r3, r3, #2
 801a108:	440b      	add	r3, r1
 801a10a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a10e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a110:	4618      	mov	r0, r3
 801a112:	3714      	adds	r7, #20
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr

0801a11c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b084      	sub	sp, #16
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
 801a124:	460b      	mov	r3, r1
 801a126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a128:	2300      	movs	r3, #0
 801a12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a12c:	2300      	movs	r3, #0
 801a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a136:	78fa      	ldrb	r2, [r7, #3]
 801a138:	4611      	mov	r1, r2
 801a13a:	4618      	mov	r0, r3
 801a13c:	f7ea feae 	bl	8004e9c <HAL_PCD_SetAddress>
 801a140:	4603      	mov	r3, r0
 801a142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a144:	7bfb      	ldrb	r3, [r7, #15]
 801a146:	4618      	mov	r0, r3
 801a148:	f000 f874 	bl	801a234 <USBD_Get_USB_Status>
 801a14c:	4603      	mov	r3, r0
 801a14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a150:	7bbb      	ldrb	r3, [r7, #14]
}
 801a152:	4618      	mov	r0, r3
 801a154:	3710      	adds	r7, #16
 801a156:	46bd      	mov	sp, r7
 801a158:	bd80      	pop	{r7, pc}

0801a15a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a15a:	b580      	push	{r7, lr}
 801a15c:	b086      	sub	sp, #24
 801a15e:	af00      	add	r7, sp, #0
 801a160:	60f8      	str	r0, [r7, #12]
 801a162:	607a      	str	r2, [r7, #4]
 801a164:	603b      	str	r3, [r7, #0]
 801a166:	460b      	mov	r3, r1
 801a168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a16a:	2300      	movs	r3, #0
 801a16c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a16e:	2300      	movs	r3, #0
 801a170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a178:	7af9      	ldrb	r1, [r7, #11]
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	f7ea ffb8 	bl	80050f2 <HAL_PCD_EP_Transmit>
 801a182:	4603      	mov	r3, r0
 801a184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a186:	7dfb      	ldrb	r3, [r7, #23]
 801a188:	4618      	mov	r0, r3
 801a18a:	f000 f853 	bl	801a234 <USBD_Get_USB_Status>
 801a18e:	4603      	mov	r3, r0
 801a190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a192:	7dbb      	ldrb	r3, [r7, #22]
}
 801a194:	4618      	mov	r0, r3
 801a196:	3718      	adds	r7, #24
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b086      	sub	sp, #24
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	60f8      	str	r0, [r7, #12]
 801a1a4:	607a      	str	r2, [r7, #4]
 801a1a6:	603b      	str	r3, [r7, #0]
 801a1a8:	460b      	mov	r3, r1
 801a1aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a1ba:	7af9      	ldrb	r1, [r7, #11]
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	687a      	ldr	r2, [r7, #4]
 801a1c0:	f7ea ff44 	bl	800504c <HAL_PCD_EP_Receive>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a1c8:	7dfb      	ldrb	r3, [r7, #23]
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f000 f832 	bl	801a234 <USBD_Get_USB_Status>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	3718      	adds	r7, #24
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	bd80      	pop	{r7, pc}

0801a1de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1de:	b580      	push	{r7, lr}
 801a1e0:	b082      	sub	sp, #8
 801a1e2:	af00      	add	r7, sp, #0
 801a1e4:	6078      	str	r0, [r7, #4]
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a1f0:	78fa      	ldrb	r2, [r7, #3]
 801a1f2:	4611      	mov	r1, r2
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7ea ff64 	bl	80050c2 <HAL_PCD_EP_GetRxCount>
 801a1fa:	4603      	mov	r3, r0
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3708      	adds	r7, #8
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a204:	b480      	push	{r7}
 801a206:	b083      	sub	sp, #12
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a20c:	4b03      	ldr	r3, [pc, #12]	@ (801a21c <USBD_static_malloc+0x18>)
}
 801a20e:	4618      	mov	r0, r3
 801a210:	370c      	adds	r7, #12
 801a212:	46bd      	mov	sp, r7
 801a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a218:	4770      	bx	lr
 801a21a:	bf00      	nop
 801a21c:	2000e2a0 	.word	0x2000e2a0

0801a220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a220:	b480      	push	{r7}
 801a222:	b083      	sub	sp, #12
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]

}
 801a228:	bf00      	nop
 801a22a:	370c      	adds	r7, #12
 801a22c:	46bd      	mov	sp, r7
 801a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a232:	4770      	bx	lr

0801a234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a234:	b480      	push	{r7}
 801a236:	b085      	sub	sp, #20
 801a238:	af00      	add	r7, sp, #0
 801a23a:	4603      	mov	r3, r0
 801a23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a23e:	2300      	movs	r3, #0
 801a240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a242:	79fb      	ldrb	r3, [r7, #7]
 801a244:	2b03      	cmp	r3, #3
 801a246:	d817      	bhi.n	801a278 <USBD_Get_USB_Status+0x44>
 801a248:	a201      	add	r2, pc, #4	@ (adr r2, 801a250 <USBD_Get_USB_Status+0x1c>)
 801a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a24e:	bf00      	nop
 801a250:	0801a261 	.word	0x0801a261
 801a254:	0801a267 	.word	0x0801a267
 801a258:	0801a26d 	.word	0x0801a26d
 801a25c:	0801a273 	.word	0x0801a273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a260:	2300      	movs	r3, #0
 801a262:	73fb      	strb	r3, [r7, #15]
    break;
 801a264:	e00b      	b.n	801a27e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a266:	2303      	movs	r3, #3
 801a268:	73fb      	strb	r3, [r7, #15]
    break;
 801a26a:	e008      	b.n	801a27e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a26c:	2301      	movs	r3, #1
 801a26e:	73fb      	strb	r3, [r7, #15]
    break;
 801a270:	e005      	b.n	801a27e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a272:	2303      	movs	r3, #3
 801a274:	73fb      	strb	r3, [r7, #15]
    break;
 801a276:	e002      	b.n	801a27e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a278:	2303      	movs	r3, #3
 801a27a:	73fb      	strb	r3, [r7, #15]
    break;
 801a27c:	bf00      	nop
  }
  return usb_status;
 801a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a280:	4618      	mov	r0, r3
 801a282:	3714      	adds	r7, #20
 801a284:	46bd      	mov	sp, r7
 801a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28a:	4770      	bx	lr

0801a28c <rand>:
 801a28c:	4b16      	ldr	r3, [pc, #88]	@ (801a2e8 <rand+0x5c>)
 801a28e:	b510      	push	{r4, lr}
 801a290:	681c      	ldr	r4, [r3, #0]
 801a292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a294:	b9b3      	cbnz	r3, 801a2c4 <rand+0x38>
 801a296:	2018      	movs	r0, #24
 801a298:	f000 fb0e 	bl	801a8b8 <malloc>
 801a29c:	4602      	mov	r2, r0
 801a29e:	6320      	str	r0, [r4, #48]	@ 0x30
 801a2a0:	b920      	cbnz	r0, 801a2ac <rand+0x20>
 801a2a2:	4b12      	ldr	r3, [pc, #72]	@ (801a2ec <rand+0x60>)
 801a2a4:	4812      	ldr	r0, [pc, #72]	@ (801a2f0 <rand+0x64>)
 801a2a6:	2152      	movs	r1, #82	@ 0x52
 801a2a8:	f000 fa9e 	bl	801a7e8 <__assert_func>
 801a2ac:	4911      	ldr	r1, [pc, #68]	@ (801a2f4 <rand+0x68>)
 801a2ae:	4b12      	ldr	r3, [pc, #72]	@ (801a2f8 <rand+0x6c>)
 801a2b0:	e9c0 1300 	strd	r1, r3, [r0]
 801a2b4:	4b11      	ldr	r3, [pc, #68]	@ (801a2fc <rand+0x70>)
 801a2b6:	6083      	str	r3, [r0, #8]
 801a2b8:	230b      	movs	r3, #11
 801a2ba:	8183      	strh	r3, [r0, #12]
 801a2bc:	2100      	movs	r1, #0
 801a2be:	2001      	movs	r0, #1
 801a2c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a2c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a2c6:	480e      	ldr	r0, [pc, #56]	@ (801a300 <rand+0x74>)
 801a2c8:	690b      	ldr	r3, [r1, #16]
 801a2ca:	694c      	ldr	r4, [r1, #20]
 801a2cc:	4a0d      	ldr	r2, [pc, #52]	@ (801a304 <rand+0x78>)
 801a2ce:	4358      	muls	r0, r3
 801a2d0:	fb02 0004 	mla	r0, r2, r4, r0
 801a2d4:	fba3 3202 	umull	r3, r2, r3, r2
 801a2d8:	3301      	adds	r3, #1
 801a2da:	eb40 0002 	adc.w	r0, r0, r2
 801a2de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a2e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a2e6:	bd10      	pop	{r4, pc}
 801a2e8:	20000118 	.word	0x20000118
 801a2ec:	0801f550 	.word	0x0801f550
 801a2f0:	0801f567 	.word	0x0801f567
 801a2f4:	abcd330e 	.word	0xabcd330e
 801a2f8:	e66d1234 	.word	0xe66d1234
 801a2fc:	0005deec 	.word	0x0005deec
 801a300:	5851f42d 	.word	0x5851f42d
 801a304:	4c957f2d 	.word	0x4c957f2d

0801a308 <std>:
 801a308:	2300      	movs	r3, #0
 801a30a:	b510      	push	{r4, lr}
 801a30c:	4604      	mov	r4, r0
 801a30e:	e9c0 3300 	strd	r3, r3, [r0]
 801a312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a316:	6083      	str	r3, [r0, #8]
 801a318:	8181      	strh	r1, [r0, #12]
 801a31a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a31c:	81c2      	strh	r2, [r0, #14]
 801a31e:	6183      	str	r3, [r0, #24]
 801a320:	4619      	mov	r1, r3
 801a322:	2208      	movs	r2, #8
 801a324:	305c      	adds	r0, #92	@ 0x5c
 801a326:	f000 f966 	bl	801a5f6 <memset>
 801a32a:	4b0d      	ldr	r3, [pc, #52]	@ (801a360 <std+0x58>)
 801a32c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a32e:	4b0d      	ldr	r3, [pc, #52]	@ (801a364 <std+0x5c>)
 801a330:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a332:	4b0d      	ldr	r3, [pc, #52]	@ (801a368 <std+0x60>)
 801a334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a336:	4b0d      	ldr	r3, [pc, #52]	@ (801a36c <std+0x64>)
 801a338:	6323      	str	r3, [r4, #48]	@ 0x30
 801a33a:	4b0d      	ldr	r3, [pc, #52]	@ (801a370 <std+0x68>)
 801a33c:	6224      	str	r4, [r4, #32]
 801a33e:	429c      	cmp	r4, r3
 801a340:	d006      	beq.n	801a350 <std+0x48>
 801a342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a346:	4294      	cmp	r4, r2
 801a348:	d002      	beq.n	801a350 <std+0x48>
 801a34a:	33d0      	adds	r3, #208	@ 0xd0
 801a34c:	429c      	cmp	r4, r3
 801a34e:	d105      	bne.n	801a35c <std+0x54>
 801a350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a358:	f000 ba2c 	b.w	801a7b4 <__retarget_lock_init_recursive>
 801a35c:	bd10      	pop	{r4, pc}
 801a35e:	bf00      	nop
 801a360:	0801a51d 	.word	0x0801a51d
 801a364:	0801a53f 	.word	0x0801a53f
 801a368:	0801a577 	.word	0x0801a577
 801a36c:	0801a59b 	.word	0x0801a59b
 801a370:	2000e4c0 	.word	0x2000e4c0

0801a374 <stdio_exit_handler>:
 801a374:	4a02      	ldr	r2, [pc, #8]	@ (801a380 <stdio_exit_handler+0xc>)
 801a376:	4903      	ldr	r1, [pc, #12]	@ (801a384 <stdio_exit_handler+0x10>)
 801a378:	4803      	ldr	r0, [pc, #12]	@ (801a388 <stdio_exit_handler+0x14>)
 801a37a:	f000 b869 	b.w	801a450 <_fwalk_sglue>
 801a37e:	bf00      	nop
 801a380:	2000010c 	.word	0x2000010c
 801a384:	0801b379 	.word	0x0801b379
 801a388:	2000011c 	.word	0x2000011c

0801a38c <cleanup_stdio>:
 801a38c:	6841      	ldr	r1, [r0, #4]
 801a38e:	4b0c      	ldr	r3, [pc, #48]	@ (801a3c0 <cleanup_stdio+0x34>)
 801a390:	4299      	cmp	r1, r3
 801a392:	b510      	push	{r4, lr}
 801a394:	4604      	mov	r4, r0
 801a396:	d001      	beq.n	801a39c <cleanup_stdio+0x10>
 801a398:	f000 ffee 	bl	801b378 <_fflush_r>
 801a39c:	68a1      	ldr	r1, [r4, #8]
 801a39e:	4b09      	ldr	r3, [pc, #36]	@ (801a3c4 <cleanup_stdio+0x38>)
 801a3a0:	4299      	cmp	r1, r3
 801a3a2:	d002      	beq.n	801a3aa <cleanup_stdio+0x1e>
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	f000 ffe7 	bl	801b378 <_fflush_r>
 801a3aa:	68e1      	ldr	r1, [r4, #12]
 801a3ac:	4b06      	ldr	r3, [pc, #24]	@ (801a3c8 <cleanup_stdio+0x3c>)
 801a3ae:	4299      	cmp	r1, r3
 801a3b0:	d004      	beq.n	801a3bc <cleanup_stdio+0x30>
 801a3b2:	4620      	mov	r0, r4
 801a3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3b8:	f000 bfde 	b.w	801b378 <_fflush_r>
 801a3bc:	bd10      	pop	{r4, pc}
 801a3be:	bf00      	nop
 801a3c0:	2000e4c0 	.word	0x2000e4c0
 801a3c4:	2000e528 	.word	0x2000e528
 801a3c8:	2000e590 	.word	0x2000e590

0801a3cc <global_stdio_init.part.0>:
 801a3cc:	b510      	push	{r4, lr}
 801a3ce:	4b0b      	ldr	r3, [pc, #44]	@ (801a3fc <global_stdio_init.part.0+0x30>)
 801a3d0:	4c0b      	ldr	r4, [pc, #44]	@ (801a400 <global_stdio_init.part.0+0x34>)
 801a3d2:	4a0c      	ldr	r2, [pc, #48]	@ (801a404 <global_stdio_init.part.0+0x38>)
 801a3d4:	601a      	str	r2, [r3, #0]
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	2200      	movs	r2, #0
 801a3da:	2104      	movs	r1, #4
 801a3dc:	f7ff ff94 	bl	801a308 <std>
 801a3e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a3e4:	2201      	movs	r2, #1
 801a3e6:	2109      	movs	r1, #9
 801a3e8:	f7ff ff8e 	bl	801a308 <std>
 801a3ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a3f0:	2202      	movs	r2, #2
 801a3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3f6:	2112      	movs	r1, #18
 801a3f8:	f7ff bf86 	b.w	801a308 <std>
 801a3fc:	2000e5f8 	.word	0x2000e5f8
 801a400:	2000e4c0 	.word	0x2000e4c0
 801a404:	0801a375 	.word	0x0801a375

0801a408 <__sfp_lock_acquire>:
 801a408:	4801      	ldr	r0, [pc, #4]	@ (801a410 <__sfp_lock_acquire+0x8>)
 801a40a:	f000 b9d4 	b.w	801a7b6 <__retarget_lock_acquire_recursive>
 801a40e:	bf00      	nop
 801a410:	2000e601 	.word	0x2000e601

0801a414 <__sfp_lock_release>:
 801a414:	4801      	ldr	r0, [pc, #4]	@ (801a41c <__sfp_lock_release+0x8>)
 801a416:	f000 b9cf 	b.w	801a7b8 <__retarget_lock_release_recursive>
 801a41a:	bf00      	nop
 801a41c:	2000e601 	.word	0x2000e601

0801a420 <__sinit>:
 801a420:	b510      	push	{r4, lr}
 801a422:	4604      	mov	r4, r0
 801a424:	f7ff fff0 	bl	801a408 <__sfp_lock_acquire>
 801a428:	6a23      	ldr	r3, [r4, #32]
 801a42a:	b11b      	cbz	r3, 801a434 <__sinit+0x14>
 801a42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a430:	f7ff bff0 	b.w	801a414 <__sfp_lock_release>
 801a434:	4b04      	ldr	r3, [pc, #16]	@ (801a448 <__sinit+0x28>)
 801a436:	6223      	str	r3, [r4, #32]
 801a438:	4b04      	ldr	r3, [pc, #16]	@ (801a44c <__sinit+0x2c>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d1f5      	bne.n	801a42c <__sinit+0xc>
 801a440:	f7ff ffc4 	bl	801a3cc <global_stdio_init.part.0>
 801a444:	e7f2      	b.n	801a42c <__sinit+0xc>
 801a446:	bf00      	nop
 801a448:	0801a38d 	.word	0x0801a38d
 801a44c:	2000e5f8 	.word	0x2000e5f8

0801a450 <_fwalk_sglue>:
 801a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a454:	4607      	mov	r7, r0
 801a456:	4688      	mov	r8, r1
 801a458:	4614      	mov	r4, r2
 801a45a:	2600      	movs	r6, #0
 801a45c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a460:	f1b9 0901 	subs.w	r9, r9, #1
 801a464:	d505      	bpl.n	801a472 <_fwalk_sglue+0x22>
 801a466:	6824      	ldr	r4, [r4, #0]
 801a468:	2c00      	cmp	r4, #0
 801a46a:	d1f7      	bne.n	801a45c <_fwalk_sglue+0xc>
 801a46c:	4630      	mov	r0, r6
 801a46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a472:	89ab      	ldrh	r3, [r5, #12]
 801a474:	2b01      	cmp	r3, #1
 801a476:	d907      	bls.n	801a488 <_fwalk_sglue+0x38>
 801a478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a47c:	3301      	adds	r3, #1
 801a47e:	d003      	beq.n	801a488 <_fwalk_sglue+0x38>
 801a480:	4629      	mov	r1, r5
 801a482:	4638      	mov	r0, r7
 801a484:	47c0      	blx	r8
 801a486:	4306      	orrs	r6, r0
 801a488:	3568      	adds	r5, #104	@ 0x68
 801a48a:	e7e9      	b.n	801a460 <_fwalk_sglue+0x10>

0801a48c <iprintf>:
 801a48c:	b40f      	push	{r0, r1, r2, r3}
 801a48e:	b507      	push	{r0, r1, r2, lr}
 801a490:	4906      	ldr	r1, [pc, #24]	@ (801a4ac <iprintf+0x20>)
 801a492:	ab04      	add	r3, sp, #16
 801a494:	6808      	ldr	r0, [r1, #0]
 801a496:	f853 2b04 	ldr.w	r2, [r3], #4
 801a49a:	6881      	ldr	r1, [r0, #8]
 801a49c:	9301      	str	r3, [sp, #4]
 801a49e:	f000 fc43 	bl	801ad28 <_vfiprintf_r>
 801a4a2:	b003      	add	sp, #12
 801a4a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4a8:	b004      	add	sp, #16
 801a4aa:	4770      	bx	lr
 801a4ac:	20000118 	.word	0x20000118

0801a4b0 <sniprintf>:
 801a4b0:	b40c      	push	{r2, r3}
 801a4b2:	b530      	push	{r4, r5, lr}
 801a4b4:	4b18      	ldr	r3, [pc, #96]	@ (801a518 <sniprintf+0x68>)
 801a4b6:	1e0c      	subs	r4, r1, #0
 801a4b8:	681d      	ldr	r5, [r3, #0]
 801a4ba:	b09d      	sub	sp, #116	@ 0x74
 801a4bc:	da08      	bge.n	801a4d0 <sniprintf+0x20>
 801a4be:	238b      	movs	r3, #139	@ 0x8b
 801a4c0:	602b      	str	r3, [r5, #0]
 801a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c6:	b01d      	add	sp, #116	@ 0x74
 801a4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4cc:	b002      	add	sp, #8
 801a4ce:	4770      	bx	lr
 801a4d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a4d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a4d8:	f04f 0300 	mov.w	r3, #0
 801a4dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a4de:	bf14      	ite	ne
 801a4e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a4e4:	4623      	moveq	r3, r4
 801a4e6:	9304      	str	r3, [sp, #16]
 801a4e8:	9307      	str	r3, [sp, #28]
 801a4ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a4ee:	9002      	str	r0, [sp, #8]
 801a4f0:	9006      	str	r0, [sp, #24]
 801a4f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a4f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a4f8:	ab21      	add	r3, sp, #132	@ 0x84
 801a4fa:	a902      	add	r1, sp, #8
 801a4fc:	4628      	mov	r0, r5
 801a4fe:	9301      	str	r3, [sp, #4]
 801a500:	f000 faec 	bl	801aadc <_svfiprintf_r>
 801a504:	1c43      	adds	r3, r0, #1
 801a506:	bfbc      	itt	lt
 801a508:	238b      	movlt	r3, #139	@ 0x8b
 801a50a:	602b      	strlt	r3, [r5, #0]
 801a50c:	2c00      	cmp	r4, #0
 801a50e:	d0da      	beq.n	801a4c6 <sniprintf+0x16>
 801a510:	9b02      	ldr	r3, [sp, #8]
 801a512:	2200      	movs	r2, #0
 801a514:	701a      	strb	r2, [r3, #0]
 801a516:	e7d6      	b.n	801a4c6 <sniprintf+0x16>
 801a518:	20000118 	.word	0x20000118

0801a51c <__sread>:
 801a51c:	b510      	push	{r4, lr}
 801a51e:	460c      	mov	r4, r1
 801a520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a524:	f000 f8fe 	bl	801a724 <_read_r>
 801a528:	2800      	cmp	r0, #0
 801a52a:	bfab      	itete	ge
 801a52c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a52e:	89a3      	ldrhlt	r3, [r4, #12]
 801a530:	181b      	addge	r3, r3, r0
 801a532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a536:	bfac      	ite	ge
 801a538:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a53a:	81a3      	strhlt	r3, [r4, #12]
 801a53c:	bd10      	pop	{r4, pc}

0801a53e <__swrite>:
 801a53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a542:	461f      	mov	r7, r3
 801a544:	898b      	ldrh	r3, [r1, #12]
 801a546:	05db      	lsls	r3, r3, #23
 801a548:	4605      	mov	r5, r0
 801a54a:	460c      	mov	r4, r1
 801a54c:	4616      	mov	r6, r2
 801a54e:	d505      	bpl.n	801a55c <__swrite+0x1e>
 801a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a554:	2302      	movs	r3, #2
 801a556:	2200      	movs	r2, #0
 801a558:	f000 f8d2 	bl	801a700 <_lseek_r>
 801a55c:	89a3      	ldrh	r3, [r4, #12]
 801a55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a566:	81a3      	strh	r3, [r4, #12]
 801a568:	4632      	mov	r2, r6
 801a56a:	463b      	mov	r3, r7
 801a56c:	4628      	mov	r0, r5
 801a56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a572:	f000 b8e9 	b.w	801a748 <_write_r>

0801a576 <__sseek>:
 801a576:	b510      	push	{r4, lr}
 801a578:	460c      	mov	r4, r1
 801a57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a57e:	f000 f8bf 	bl	801a700 <_lseek_r>
 801a582:	1c43      	adds	r3, r0, #1
 801a584:	89a3      	ldrh	r3, [r4, #12]
 801a586:	bf15      	itete	ne
 801a588:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a58a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a58e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a592:	81a3      	strheq	r3, [r4, #12]
 801a594:	bf18      	it	ne
 801a596:	81a3      	strhne	r3, [r4, #12]
 801a598:	bd10      	pop	{r4, pc}

0801a59a <__sclose>:
 801a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a59e:	f000 b841 	b.w	801a624 <_close_r>

0801a5a2 <memcmp>:
 801a5a2:	b510      	push	{r4, lr}
 801a5a4:	3901      	subs	r1, #1
 801a5a6:	4402      	add	r2, r0
 801a5a8:	4290      	cmp	r0, r2
 801a5aa:	d101      	bne.n	801a5b0 <memcmp+0xe>
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	e005      	b.n	801a5bc <memcmp+0x1a>
 801a5b0:	7803      	ldrb	r3, [r0, #0]
 801a5b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a5b6:	42a3      	cmp	r3, r4
 801a5b8:	d001      	beq.n	801a5be <memcmp+0x1c>
 801a5ba:	1b18      	subs	r0, r3, r4
 801a5bc:	bd10      	pop	{r4, pc}
 801a5be:	3001      	adds	r0, #1
 801a5c0:	e7f2      	b.n	801a5a8 <memcmp+0x6>

0801a5c2 <memmove>:
 801a5c2:	4288      	cmp	r0, r1
 801a5c4:	b510      	push	{r4, lr}
 801a5c6:	eb01 0402 	add.w	r4, r1, r2
 801a5ca:	d902      	bls.n	801a5d2 <memmove+0x10>
 801a5cc:	4284      	cmp	r4, r0
 801a5ce:	4623      	mov	r3, r4
 801a5d0:	d807      	bhi.n	801a5e2 <memmove+0x20>
 801a5d2:	1e43      	subs	r3, r0, #1
 801a5d4:	42a1      	cmp	r1, r4
 801a5d6:	d008      	beq.n	801a5ea <memmove+0x28>
 801a5d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a5dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a5e0:	e7f8      	b.n	801a5d4 <memmove+0x12>
 801a5e2:	4402      	add	r2, r0
 801a5e4:	4601      	mov	r1, r0
 801a5e6:	428a      	cmp	r2, r1
 801a5e8:	d100      	bne.n	801a5ec <memmove+0x2a>
 801a5ea:	bd10      	pop	{r4, pc}
 801a5ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a5f4:	e7f7      	b.n	801a5e6 <memmove+0x24>

0801a5f6 <memset>:
 801a5f6:	4402      	add	r2, r0
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d100      	bne.n	801a600 <memset+0xa>
 801a5fe:	4770      	bx	lr
 801a600:	f803 1b01 	strb.w	r1, [r3], #1
 801a604:	e7f9      	b.n	801a5fa <memset+0x4>

0801a606 <strcat>:
 801a606:	b510      	push	{r4, lr}
 801a608:	4602      	mov	r2, r0
 801a60a:	7814      	ldrb	r4, [r2, #0]
 801a60c:	4613      	mov	r3, r2
 801a60e:	3201      	adds	r2, #1
 801a610:	2c00      	cmp	r4, #0
 801a612:	d1fa      	bne.n	801a60a <strcat+0x4>
 801a614:	3b01      	subs	r3, #1
 801a616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a61e:	2a00      	cmp	r2, #0
 801a620:	d1f9      	bne.n	801a616 <strcat+0x10>
 801a622:	bd10      	pop	{r4, pc}

0801a624 <_close_r>:
 801a624:	b538      	push	{r3, r4, r5, lr}
 801a626:	4d06      	ldr	r5, [pc, #24]	@ (801a640 <_close_r+0x1c>)
 801a628:	2300      	movs	r3, #0
 801a62a:	4604      	mov	r4, r0
 801a62c:	4608      	mov	r0, r1
 801a62e:	602b      	str	r3, [r5, #0]
 801a630:	f7e7 fd6e 	bl	8002110 <_close>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_close_r+0x1a>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_close_r+0x1a>
 801a63c:	6023      	str	r3, [r4, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	2000e5fc 	.word	0x2000e5fc

0801a644 <_reclaim_reent>:
 801a644:	4b2d      	ldr	r3, [pc, #180]	@ (801a6fc <_reclaim_reent+0xb8>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	4283      	cmp	r3, r0
 801a64a:	b570      	push	{r4, r5, r6, lr}
 801a64c:	4604      	mov	r4, r0
 801a64e:	d053      	beq.n	801a6f8 <_reclaim_reent+0xb4>
 801a650:	69c3      	ldr	r3, [r0, #28]
 801a652:	b31b      	cbz	r3, 801a69c <_reclaim_reent+0x58>
 801a654:	68db      	ldr	r3, [r3, #12]
 801a656:	b163      	cbz	r3, 801a672 <_reclaim_reent+0x2e>
 801a658:	2500      	movs	r5, #0
 801a65a:	69e3      	ldr	r3, [r4, #28]
 801a65c:	68db      	ldr	r3, [r3, #12]
 801a65e:	5959      	ldr	r1, [r3, r5]
 801a660:	b9b1      	cbnz	r1, 801a690 <_reclaim_reent+0x4c>
 801a662:	3504      	adds	r5, #4
 801a664:	2d80      	cmp	r5, #128	@ 0x80
 801a666:	d1f8      	bne.n	801a65a <_reclaim_reent+0x16>
 801a668:	69e3      	ldr	r3, [r4, #28]
 801a66a:	4620      	mov	r0, r4
 801a66c:	68d9      	ldr	r1, [r3, #12]
 801a66e:	f000 f8d9 	bl	801a824 <_free_r>
 801a672:	69e3      	ldr	r3, [r4, #28]
 801a674:	6819      	ldr	r1, [r3, #0]
 801a676:	b111      	cbz	r1, 801a67e <_reclaim_reent+0x3a>
 801a678:	4620      	mov	r0, r4
 801a67a:	f000 f8d3 	bl	801a824 <_free_r>
 801a67e:	69e3      	ldr	r3, [r4, #28]
 801a680:	689d      	ldr	r5, [r3, #8]
 801a682:	b15d      	cbz	r5, 801a69c <_reclaim_reent+0x58>
 801a684:	4629      	mov	r1, r5
 801a686:	4620      	mov	r0, r4
 801a688:	682d      	ldr	r5, [r5, #0]
 801a68a:	f000 f8cb 	bl	801a824 <_free_r>
 801a68e:	e7f8      	b.n	801a682 <_reclaim_reent+0x3e>
 801a690:	680e      	ldr	r6, [r1, #0]
 801a692:	4620      	mov	r0, r4
 801a694:	f000 f8c6 	bl	801a824 <_free_r>
 801a698:	4631      	mov	r1, r6
 801a69a:	e7e1      	b.n	801a660 <_reclaim_reent+0x1c>
 801a69c:	6961      	ldr	r1, [r4, #20]
 801a69e:	b111      	cbz	r1, 801a6a6 <_reclaim_reent+0x62>
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	f000 f8bf 	bl	801a824 <_free_r>
 801a6a6:	69e1      	ldr	r1, [r4, #28]
 801a6a8:	b111      	cbz	r1, 801a6b0 <_reclaim_reent+0x6c>
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f000 f8ba 	bl	801a824 <_free_r>
 801a6b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a6b2:	b111      	cbz	r1, 801a6ba <_reclaim_reent+0x76>
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	f000 f8b5 	bl	801a824 <_free_r>
 801a6ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a6bc:	b111      	cbz	r1, 801a6c4 <_reclaim_reent+0x80>
 801a6be:	4620      	mov	r0, r4
 801a6c0:	f000 f8b0 	bl	801a824 <_free_r>
 801a6c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a6c6:	b111      	cbz	r1, 801a6ce <_reclaim_reent+0x8a>
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	f000 f8ab 	bl	801a824 <_free_r>
 801a6ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a6d0:	b111      	cbz	r1, 801a6d8 <_reclaim_reent+0x94>
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	f000 f8a6 	bl	801a824 <_free_r>
 801a6d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a6da:	b111      	cbz	r1, 801a6e2 <_reclaim_reent+0x9e>
 801a6dc:	4620      	mov	r0, r4
 801a6de:	f000 f8a1 	bl	801a824 <_free_r>
 801a6e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a6e4:	b111      	cbz	r1, 801a6ec <_reclaim_reent+0xa8>
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	f000 f89c 	bl	801a824 <_free_r>
 801a6ec:	6a23      	ldr	r3, [r4, #32]
 801a6ee:	b11b      	cbz	r3, 801a6f8 <_reclaim_reent+0xb4>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6f6:	4718      	bx	r3
 801a6f8:	bd70      	pop	{r4, r5, r6, pc}
 801a6fa:	bf00      	nop
 801a6fc:	20000118 	.word	0x20000118

0801a700 <_lseek_r>:
 801a700:	b538      	push	{r3, r4, r5, lr}
 801a702:	4d07      	ldr	r5, [pc, #28]	@ (801a720 <_lseek_r+0x20>)
 801a704:	4604      	mov	r4, r0
 801a706:	4608      	mov	r0, r1
 801a708:	4611      	mov	r1, r2
 801a70a:	2200      	movs	r2, #0
 801a70c:	602a      	str	r2, [r5, #0]
 801a70e:	461a      	mov	r2, r3
 801a710:	f7e7 fd25 	bl	800215e <_lseek>
 801a714:	1c43      	adds	r3, r0, #1
 801a716:	d102      	bne.n	801a71e <_lseek_r+0x1e>
 801a718:	682b      	ldr	r3, [r5, #0]
 801a71a:	b103      	cbz	r3, 801a71e <_lseek_r+0x1e>
 801a71c:	6023      	str	r3, [r4, #0]
 801a71e:	bd38      	pop	{r3, r4, r5, pc}
 801a720:	2000e5fc 	.word	0x2000e5fc

0801a724 <_read_r>:
 801a724:	b538      	push	{r3, r4, r5, lr}
 801a726:	4d07      	ldr	r5, [pc, #28]	@ (801a744 <_read_r+0x20>)
 801a728:	4604      	mov	r4, r0
 801a72a:	4608      	mov	r0, r1
 801a72c:	4611      	mov	r1, r2
 801a72e:	2200      	movs	r2, #0
 801a730:	602a      	str	r2, [r5, #0]
 801a732:	461a      	mov	r2, r3
 801a734:	f7e7 fcb3 	bl	800209e <_read>
 801a738:	1c43      	adds	r3, r0, #1
 801a73a:	d102      	bne.n	801a742 <_read_r+0x1e>
 801a73c:	682b      	ldr	r3, [r5, #0]
 801a73e:	b103      	cbz	r3, 801a742 <_read_r+0x1e>
 801a740:	6023      	str	r3, [r4, #0]
 801a742:	bd38      	pop	{r3, r4, r5, pc}
 801a744:	2000e5fc 	.word	0x2000e5fc

0801a748 <_write_r>:
 801a748:	b538      	push	{r3, r4, r5, lr}
 801a74a:	4d07      	ldr	r5, [pc, #28]	@ (801a768 <_write_r+0x20>)
 801a74c:	4604      	mov	r4, r0
 801a74e:	4608      	mov	r0, r1
 801a750:	4611      	mov	r1, r2
 801a752:	2200      	movs	r2, #0
 801a754:	602a      	str	r2, [r5, #0]
 801a756:	461a      	mov	r2, r3
 801a758:	f7e7 fcbe 	bl	80020d8 <_write>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d102      	bne.n	801a766 <_write_r+0x1e>
 801a760:	682b      	ldr	r3, [r5, #0]
 801a762:	b103      	cbz	r3, 801a766 <_write_r+0x1e>
 801a764:	6023      	str	r3, [r4, #0]
 801a766:	bd38      	pop	{r3, r4, r5, pc}
 801a768:	2000e5fc 	.word	0x2000e5fc

0801a76c <__libc_init_array>:
 801a76c:	b570      	push	{r4, r5, r6, lr}
 801a76e:	4d0d      	ldr	r5, [pc, #52]	@ (801a7a4 <__libc_init_array+0x38>)
 801a770:	4c0d      	ldr	r4, [pc, #52]	@ (801a7a8 <__libc_init_array+0x3c>)
 801a772:	1b64      	subs	r4, r4, r5
 801a774:	10a4      	asrs	r4, r4, #2
 801a776:	2600      	movs	r6, #0
 801a778:	42a6      	cmp	r6, r4
 801a77a:	d109      	bne.n	801a790 <__libc_init_array+0x24>
 801a77c:	4d0b      	ldr	r5, [pc, #44]	@ (801a7ac <__libc_init_array+0x40>)
 801a77e:	4c0c      	ldr	r4, [pc, #48]	@ (801a7b0 <__libc_init_array+0x44>)
 801a780:	f000 ffde 	bl	801b740 <_init>
 801a784:	1b64      	subs	r4, r4, r5
 801a786:	10a4      	asrs	r4, r4, #2
 801a788:	2600      	movs	r6, #0
 801a78a:	42a6      	cmp	r6, r4
 801a78c:	d105      	bne.n	801a79a <__libc_init_array+0x2e>
 801a78e:	bd70      	pop	{r4, r5, r6, pc}
 801a790:	f855 3b04 	ldr.w	r3, [r5], #4
 801a794:	4798      	blx	r3
 801a796:	3601      	adds	r6, #1
 801a798:	e7ee      	b.n	801a778 <__libc_init_array+0xc>
 801a79a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a79e:	4798      	blx	r3
 801a7a0:	3601      	adds	r6, #1
 801a7a2:	e7f2      	b.n	801a78a <__libc_init_array+0x1e>
 801a7a4:	0801f638 	.word	0x0801f638
 801a7a8:	0801f638 	.word	0x0801f638
 801a7ac:	0801f638 	.word	0x0801f638
 801a7b0:	0801f63c 	.word	0x0801f63c

0801a7b4 <__retarget_lock_init_recursive>:
 801a7b4:	4770      	bx	lr

0801a7b6 <__retarget_lock_acquire_recursive>:
 801a7b6:	4770      	bx	lr

0801a7b8 <__retarget_lock_release_recursive>:
 801a7b8:	4770      	bx	lr

0801a7ba <strcpy>:
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7c0:	f803 2b01 	strb.w	r2, [r3], #1
 801a7c4:	2a00      	cmp	r2, #0
 801a7c6:	d1f9      	bne.n	801a7bc <strcpy+0x2>
 801a7c8:	4770      	bx	lr

0801a7ca <memcpy>:
 801a7ca:	440a      	add	r2, r1
 801a7cc:	4291      	cmp	r1, r2
 801a7ce:	f100 33ff 	add.w	r3, r0, #4294967295
 801a7d2:	d100      	bne.n	801a7d6 <memcpy+0xc>
 801a7d4:	4770      	bx	lr
 801a7d6:	b510      	push	{r4, lr}
 801a7d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7e0:	4291      	cmp	r1, r2
 801a7e2:	d1f9      	bne.n	801a7d8 <memcpy+0xe>
 801a7e4:	bd10      	pop	{r4, pc}
	...

0801a7e8 <__assert_func>:
 801a7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7ea:	4614      	mov	r4, r2
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	4b09      	ldr	r3, [pc, #36]	@ (801a814 <__assert_func+0x2c>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	4605      	mov	r5, r0
 801a7f4:	68d8      	ldr	r0, [r3, #12]
 801a7f6:	b14c      	cbz	r4, 801a80c <__assert_func+0x24>
 801a7f8:	4b07      	ldr	r3, [pc, #28]	@ (801a818 <__assert_func+0x30>)
 801a7fa:	9100      	str	r1, [sp, #0]
 801a7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a800:	4906      	ldr	r1, [pc, #24]	@ (801a81c <__assert_func+0x34>)
 801a802:	462b      	mov	r3, r5
 801a804:	f000 fde0 	bl	801b3c8 <fiprintf>
 801a808:	f000 fe94 	bl	801b534 <abort>
 801a80c:	4b04      	ldr	r3, [pc, #16]	@ (801a820 <__assert_func+0x38>)
 801a80e:	461c      	mov	r4, r3
 801a810:	e7f3      	b.n	801a7fa <__assert_func+0x12>
 801a812:	bf00      	nop
 801a814:	20000118 	.word	0x20000118
 801a818:	0801f5bf 	.word	0x0801f5bf
 801a81c:	0801f5cc 	.word	0x0801f5cc
 801a820:	0801f5fa 	.word	0x0801f5fa

0801a824 <_free_r>:
 801a824:	b538      	push	{r3, r4, r5, lr}
 801a826:	4605      	mov	r5, r0
 801a828:	2900      	cmp	r1, #0
 801a82a:	d041      	beq.n	801a8b0 <_free_r+0x8c>
 801a82c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a830:	1f0c      	subs	r4, r1, #4
 801a832:	2b00      	cmp	r3, #0
 801a834:	bfb8      	it	lt
 801a836:	18e4      	addlt	r4, r4, r3
 801a838:	f000 f8e8 	bl	801aa0c <__malloc_lock>
 801a83c:	4a1d      	ldr	r2, [pc, #116]	@ (801a8b4 <_free_r+0x90>)
 801a83e:	6813      	ldr	r3, [r2, #0]
 801a840:	b933      	cbnz	r3, 801a850 <_free_r+0x2c>
 801a842:	6063      	str	r3, [r4, #4]
 801a844:	6014      	str	r4, [r2, #0]
 801a846:	4628      	mov	r0, r5
 801a848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a84c:	f000 b8e4 	b.w	801aa18 <__malloc_unlock>
 801a850:	42a3      	cmp	r3, r4
 801a852:	d908      	bls.n	801a866 <_free_r+0x42>
 801a854:	6820      	ldr	r0, [r4, #0]
 801a856:	1821      	adds	r1, r4, r0
 801a858:	428b      	cmp	r3, r1
 801a85a:	bf01      	itttt	eq
 801a85c:	6819      	ldreq	r1, [r3, #0]
 801a85e:	685b      	ldreq	r3, [r3, #4]
 801a860:	1809      	addeq	r1, r1, r0
 801a862:	6021      	streq	r1, [r4, #0]
 801a864:	e7ed      	b.n	801a842 <_free_r+0x1e>
 801a866:	461a      	mov	r2, r3
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	b10b      	cbz	r3, 801a870 <_free_r+0x4c>
 801a86c:	42a3      	cmp	r3, r4
 801a86e:	d9fa      	bls.n	801a866 <_free_r+0x42>
 801a870:	6811      	ldr	r1, [r2, #0]
 801a872:	1850      	adds	r0, r2, r1
 801a874:	42a0      	cmp	r0, r4
 801a876:	d10b      	bne.n	801a890 <_free_r+0x6c>
 801a878:	6820      	ldr	r0, [r4, #0]
 801a87a:	4401      	add	r1, r0
 801a87c:	1850      	adds	r0, r2, r1
 801a87e:	4283      	cmp	r3, r0
 801a880:	6011      	str	r1, [r2, #0]
 801a882:	d1e0      	bne.n	801a846 <_free_r+0x22>
 801a884:	6818      	ldr	r0, [r3, #0]
 801a886:	685b      	ldr	r3, [r3, #4]
 801a888:	6053      	str	r3, [r2, #4]
 801a88a:	4408      	add	r0, r1
 801a88c:	6010      	str	r0, [r2, #0]
 801a88e:	e7da      	b.n	801a846 <_free_r+0x22>
 801a890:	d902      	bls.n	801a898 <_free_r+0x74>
 801a892:	230c      	movs	r3, #12
 801a894:	602b      	str	r3, [r5, #0]
 801a896:	e7d6      	b.n	801a846 <_free_r+0x22>
 801a898:	6820      	ldr	r0, [r4, #0]
 801a89a:	1821      	adds	r1, r4, r0
 801a89c:	428b      	cmp	r3, r1
 801a89e:	bf04      	itt	eq
 801a8a0:	6819      	ldreq	r1, [r3, #0]
 801a8a2:	685b      	ldreq	r3, [r3, #4]
 801a8a4:	6063      	str	r3, [r4, #4]
 801a8a6:	bf04      	itt	eq
 801a8a8:	1809      	addeq	r1, r1, r0
 801a8aa:	6021      	streq	r1, [r4, #0]
 801a8ac:	6054      	str	r4, [r2, #4]
 801a8ae:	e7ca      	b.n	801a846 <_free_r+0x22>
 801a8b0:	bd38      	pop	{r3, r4, r5, pc}
 801a8b2:	bf00      	nop
 801a8b4:	2000e608 	.word	0x2000e608

0801a8b8 <malloc>:
 801a8b8:	4b02      	ldr	r3, [pc, #8]	@ (801a8c4 <malloc+0xc>)
 801a8ba:	4601      	mov	r1, r0
 801a8bc:	6818      	ldr	r0, [r3, #0]
 801a8be:	f000 b825 	b.w	801a90c <_malloc_r>
 801a8c2:	bf00      	nop
 801a8c4:	20000118 	.word	0x20000118

0801a8c8 <sbrk_aligned>:
 801a8c8:	b570      	push	{r4, r5, r6, lr}
 801a8ca:	4e0f      	ldr	r6, [pc, #60]	@ (801a908 <sbrk_aligned+0x40>)
 801a8cc:	460c      	mov	r4, r1
 801a8ce:	6831      	ldr	r1, [r6, #0]
 801a8d0:	4605      	mov	r5, r0
 801a8d2:	b911      	cbnz	r1, 801a8da <sbrk_aligned+0x12>
 801a8d4:	f000 fe1e 	bl	801b514 <_sbrk_r>
 801a8d8:	6030      	str	r0, [r6, #0]
 801a8da:	4621      	mov	r1, r4
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f000 fe19 	bl	801b514 <_sbrk_r>
 801a8e2:	1c43      	adds	r3, r0, #1
 801a8e4:	d103      	bne.n	801a8ee <sbrk_aligned+0x26>
 801a8e6:	f04f 34ff 	mov.w	r4, #4294967295
 801a8ea:	4620      	mov	r0, r4
 801a8ec:	bd70      	pop	{r4, r5, r6, pc}
 801a8ee:	1cc4      	adds	r4, r0, #3
 801a8f0:	f024 0403 	bic.w	r4, r4, #3
 801a8f4:	42a0      	cmp	r0, r4
 801a8f6:	d0f8      	beq.n	801a8ea <sbrk_aligned+0x22>
 801a8f8:	1a21      	subs	r1, r4, r0
 801a8fa:	4628      	mov	r0, r5
 801a8fc:	f000 fe0a 	bl	801b514 <_sbrk_r>
 801a900:	3001      	adds	r0, #1
 801a902:	d1f2      	bne.n	801a8ea <sbrk_aligned+0x22>
 801a904:	e7ef      	b.n	801a8e6 <sbrk_aligned+0x1e>
 801a906:	bf00      	nop
 801a908:	2000e604 	.word	0x2000e604

0801a90c <_malloc_r>:
 801a90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a910:	1ccd      	adds	r5, r1, #3
 801a912:	f025 0503 	bic.w	r5, r5, #3
 801a916:	3508      	adds	r5, #8
 801a918:	2d0c      	cmp	r5, #12
 801a91a:	bf38      	it	cc
 801a91c:	250c      	movcc	r5, #12
 801a91e:	2d00      	cmp	r5, #0
 801a920:	4606      	mov	r6, r0
 801a922:	db01      	blt.n	801a928 <_malloc_r+0x1c>
 801a924:	42a9      	cmp	r1, r5
 801a926:	d904      	bls.n	801a932 <_malloc_r+0x26>
 801a928:	230c      	movs	r3, #12
 801a92a:	6033      	str	r3, [r6, #0]
 801a92c:	2000      	movs	r0, #0
 801a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801aa08 <_malloc_r+0xfc>
 801a936:	f000 f869 	bl	801aa0c <__malloc_lock>
 801a93a:	f8d8 3000 	ldr.w	r3, [r8]
 801a93e:	461c      	mov	r4, r3
 801a940:	bb44      	cbnz	r4, 801a994 <_malloc_r+0x88>
 801a942:	4629      	mov	r1, r5
 801a944:	4630      	mov	r0, r6
 801a946:	f7ff ffbf 	bl	801a8c8 <sbrk_aligned>
 801a94a:	1c43      	adds	r3, r0, #1
 801a94c:	4604      	mov	r4, r0
 801a94e:	d158      	bne.n	801aa02 <_malloc_r+0xf6>
 801a950:	f8d8 4000 	ldr.w	r4, [r8]
 801a954:	4627      	mov	r7, r4
 801a956:	2f00      	cmp	r7, #0
 801a958:	d143      	bne.n	801a9e2 <_malloc_r+0xd6>
 801a95a:	2c00      	cmp	r4, #0
 801a95c:	d04b      	beq.n	801a9f6 <_malloc_r+0xea>
 801a95e:	6823      	ldr	r3, [r4, #0]
 801a960:	4639      	mov	r1, r7
 801a962:	4630      	mov	r0, r6
 801a964:	eb04 0903 	add.w	r9, r4, r3
 801a968:	f000 fdd4 	bl	801b514 <_sbrk_r>
 801a96c:	4581      	cmp	r9, r0
 801a96e:	d142      	bne.n	801a9f6 <_malloc_r+0xea>
 801a970:	6821      	ldr	r1, [r4, #0]
 801a972:	1a6d      	subs	r5, r5, r1
 801a974:	4629      	mov	r1, r5
 801a976:	4630      	mov	r0, r6
 801a978:	f7ff ffa6 	bl	801a8c8 <sbrk_aligned>
 801a97c:	3001      	adds	r0, #1
 801a97e:	d03a      	beq.n	801a9f6 <_malloc_r+0xea>
 801a980:	6823      	ldr	r3, [r4, #0]
 801a982:	442b      	add	r3, r5
 801a984:	6023      	str	r3, [r4, #0]
 801a986:	f8d8 3000 	ldr.w	r3, [r8]
 801a98a:	685a      	ldr	r2, [r3, #4]
 801a98c:	bb62      	cbnz	r2, 801a9e8 <_malloc_r+0xdc>
 801a98e:	f8c8 7000 	str.w	r7, [r8]
 801a992:	e00f      	b.n	801a9b4 <_malloc_r+0xa8>
 801a994:	6822      	ldr	r2, [r4, #0]
 801a996:	1b52      	subs	r2, r2, r5
 801a998:	d420      	bmi.n	801a9dc <_malloc_r+0xd0>
 801a99a:	2a0b      	cmp	r2, #11
 801a99c:	d917      	bls.n	801a9ce <_malloc_r+0xc2>
 801a99e:	1961      	adds	r1, r4, r5
 801a9a0:	42a3      	cmp	r3, r4
 801a9a2:	6025      	str	r5, [r4, #0]
 801a9a4:	bf18      	it	ne
 801a9a6:	6059      	strne	r1, [r3, #4]
 801a9a8:	6863      	ldr	r3, [r4, #4]
 801a9aa:	bf08      	it	eq
 801a9ac:	f8c8 1000 	streq.w	r1, [r8]
 801a9b0:	5162      	str	r2, [r4, r5]
 801a9b2:	604b      	str	r3, [r1, #4]
 801a9b4:	4630      	mov	r0, r6
 801a9b6:	f000 f82f 	bl	801aa18 <__malloc_unlock>
 801a9ba:	f104 000b 	add.w	r0, r4, #11
 801a9be:	1d23      	adds	r3, r4, #4
 801a9c0:	f020 0007 	bic.w	r0, r0, #7
 801a9c4:	1ac2      	subs	r2, r0, r3
 801a9c6:	bf1c      	itt	ne
 801a9c8:	1a1b      	subne	r3, r3, r0
 801a9ca:	50a3      	strne	r3, [r4, r2]
 801a9cc:	e7af      	b.n	801a92e <_malloc_r+0x22>
 801a9ce:	6862      	ldr	r2, [r4, #4]
 801a9d0:	42a3      	cmp	r3, r4
 801a9d2:	bf0c      	ite	eq
 801a9d4:	f8c8 2000 	streq.w	r2, [r8]
 801a9d8:	605a      	strne	r2, [r3, #4]
 801a9da:	e7eb      	b.n	801a9b4 <_malloc_r+0xa8>
 801a9dc:	4623      	mov	r3, r4
 801a9de:	6864      	ldr	r4, [r4, #4]
 801a9e0:	e7ae      	b.n	801a940 <_malloc_r+0x34>
 801a9e2:	463c      	mov	r4, r7
 801a9e4:	687f      	ldr	r7, [r7, #4]
 801a9e6:	e7b6      	b.n	801a956 <_malloc_r+0x4a>
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	685b      	ldr	r3, [r3, #4]
 801a9ec:	42a3      	cmp	r3, r4
 801a9ee:	d1fb      	bne.n	801a9e8 <_malloc_r+0xdc>
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	6053      	str	r3, [r2, #4]
 801a9f4:	e7de      	b.n	801a9b4 <_malloc_r+0xa8>
 801a9f6:	230c      	movs	r3, #12
 801a9f8:	6033      	str	r3, [r6, #0]
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	f000 f80c 	bl	801aa18 <__malloc_unlock>
 801aa00:	e794      	b.n	801a92c <_malloc_r+0x20>
 801aa02:	6005      	str	r5, [r0, #0]
 801aa04:	e7d6      	b.n	801a9b4 <_malloc_r+0xa8>
 801aa06:	bf00      	nop
 801aa08:	2000e608 	.word	0x2000e608

0801aa0c <__malloc_lock>:
 801aa0c:	4801      	ldr	r0, [pc, #4]	@ (801aa14 <__malloc_lock+0x8>)
 801aa0e:	f7ff bed2 	b.w	801a7b6 <__retarget_lock_acquire_recursive>
 801aa12:	bf00      	nop
 801aa14:	2000e600 	.word	0x2000e600

0801aa18 <__malloc_unlock>:
 801aa18:	4801      	ldr	r0, [pc, #4]	@ (801aa20 <__malloc_unlock+0x8>)
 801aa1a:	f7ff becd 	b.w	801a7b8 <__retarget_lock_release_recursive>
 801aa1e:	bf00      	nop
 801aa20:	2000e600 	.word	0x2000e600

0801aa24 <__ssputs_r>:
 801aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa28:	688e      	ldr	r6, [r1, #8]
 801aa2a:	461f      	mov	r7, r3
 801aa2c:	42be      	cmp	r6, r7
 801aa2e:	680b      	ldr	r3, [r1, #0]
 801aa30:	4682      	mov	sl, r0
 801aa32:	460c      	mov	r4, r1
 801aa34:	4690      	mov	r8, r2
 801aa36:	d82d      	bhi.n	801aa94 <__ssputs_r+0x70>
 801aa38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801aa3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801aa40:	d026      	beq.n	801aa90 <__ssputs_r+0x6c>
 801aa42:	6965      	ldr	r5, [r4, #20]
 801aa44:	6909      	ldr	r1, [r1, #16]
 801aa46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa4a:	eba3 0901 	sub.w	r9, r3, r1
 801aa4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aa52:	1c7b      	adds	r3, r7, #1
 801aa54:	444b      	add	r3, r9
 801aa56:	106d      	asrs	r5, r5, #1
 801aa58:	429d      	cmp	r5, r3
 801aa5a:	bf38      	it	cc
 801aa5c:	461d      	movcc	r5, r3
 801aa5e:	0553      	lsls	r3, r2, #21
 801aa60:	d527      	bpl.n	801aab2 <__ssputs_r+0x8e>
 801aa62:	4629      	mov	r1, r5
 801aa64:	f7ff ff52 	bl	801a90c <_malloc_r>
 801aa68:	4606      	mov	r6, r0
 801aa6a:	b360      	cbz	r0, 801aac6 <__ssputs_r+0xa2>
 801aa6c:	6921      	ldr	r1, [r4, #16]
 801aa6e:	464a      	mov	r2, r9
 801aa70:	f7ff feab 	bl	801a7ca <memcpy>
 801aa74:	89a3      	ldrh	r3, [r4, #12]
 801aa76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801aa7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aa7e:	81a3      	strh	r3, [r4, #12]
 801aa80:	6126      	str	r6, [r4, #16]
 801aa82:	6165      	str	r5, [r4, #20]
 801aa84:	444e      	add	r6, r9
 801aa86:	eba5 0509 	sub.w	r5, r5, r9
 801aa8a:	6026      	str	r6, [r4, #0]
 801aa8c:	60a5      	str	r5, [r4, #8]
 801aa8e:	463e      	mov	r6, r7
 801aa90:	42be      	cmp	r6, r7
 801aa92:	d900      	bls.n	801aa96 <__ssputs_r+0x72>
 801aa94:	463e      	mov	r6, r7
 801aa96:	6820      	ldr	r0, [r4, #0]
 801aa98:	4632      	mov	r2, r6
 801aa9a:	4641      	mov	r1, r8
 801aa9c:	f7ff fd91 	bl	801a5c2 <memmove>
 801aaa0:	68a3      	ldr	r3, [r4, #8]
 801aaa2:	1b9b      	subs	r3, r3, r6
 801aaa4:	60a3      	str	r3, [r4, #8]
 801aaa6:	6823      	ldr	r3, [r4, #0]
 801aaa8:	4433      	add	r3, r6
 801aaaa:	6023      	str	r3, [r4, #0]
 801aaac:	2000      	movs	r0, #0
 801aaae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aab2:	462a      	mov	r2, r5
 801aab4:	f000 fd45 	bl	801b542 <_realloc_r>
 801aab8:	4606      	mov	r6, r0
 801aaba:	2800      	cmp	r0, #0
 801aabc:	d1e0      	bne.n	801aa80 <__ssputs_r+0x5c>
 801aabe:	6921      	ldr	r1, [r4, #16]
 801aac0:	4650      	mov	r0, sl
 801aac2:	f7ff feaf 	bl	801a824 <_free_r>
 801aac6:	230c      	movs	r3, #12
 801aac8:	f8ca 3000 	str.w	r3, [sl]
 801aacc:	89a3      	ldrh	r3, [r4, #12]
 801aace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aad2:	81a3      	strh	r3, [r4, #12]
 801aad4:	f04f 30ff 	mov.w	r0, #4294967295
 801aad8:	e7e9      	b.n	801aaae <__ssputs_r+0x8a>
	...

0801aadc <_svfiprintf_r>:
 801aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae0:	4698      	mov	r8, r3
 801aae2:	898b      	ldrh	r3, [r1, #12]
 801aae4:	061b      	lsls	r3, r3, #24
 801aae6:	b09d      	sub	sp, #116	@ 0x74
 801aae8:	4607      	mov	r7, r0
 801aaea:	460d      	mov	r5, r1
 801aaec:	4614      	mov	r4, r2
 801aaee:	d510      	bpl.n	801ab12 <_svfiprintf_r+0x36>
 801aaf0:	690b      	ldr	r3, [r1, #16]
 801aaf2:	b973      	cbnz	r3, 801ab12 <_svfiprintf_r+0x36>
 801aaf4:	2140      	movs	r1, #64	@ 0x40
 801aaf6:	f7ff ff09 	bl	801a90c <_malloc_r>
 801aafa:	6028      	str	r0, [r5, #0]
 801aafc:	6128      	str	r0, [r5, #16]
 801aafe:	b930      	cbnz	r0, 801ab0e <_svfiprintf_r+0x32>
 801ab00:	230c      	movs	r3, #12
 801ab02:	603b      	str	r3, [r7, #0]
 801ab04:	f04f 30ff 	mov.w	r0, #4294967295
 801ab08:	b01d      	add	sp, #116	@ 0x74
 801ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab0e:	2340      	movs	r3, #64	@ 0x40
 801ab10:	616b      	str	r3, [r5, #20]
 801ab12:	2300      	movs	r3, #0
 801ab14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab16:	2320      	movs	r3, #32
 801ab18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ab1c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab20:	2330      	movs	r3, #48	@ 0x30
 801ab22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801acc0 <_svfiprintf_r+0x1e4>
 801ab26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ab2a:	f04f 0901 	mov.w	r9, #1
 801ab2e:	4623      	mov	r3, r4
 801ab30:	469a      	mov	sl, r3
 801ab32:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab36:	b10a      	cbz	r2, 801ab3c <_svfiprintf_r+0x60>
 801ab38:	2a25      	cmp	r2, #37	@ 0x25
 801ab3a:	d1f9      	bne.n	801ab30 <_svfiprintf_r+0x54>
 801ab3c:	ebba 0b04 	subs.w	fp, sl, r4
 801ab40:	d00b      	beq.n	801ab5a <_svfiprintf_r+0x7e>
 801ab42:	465b      	mov	r3, fp
 801ab44:	4622      	mov	r2, r4
 801ab46:	4629      	mov	r1, r5
 801ab48:	4638      	mov	r0, r7
 801ab4a:	f7ff ff6b 	bl	801aa24 <__ssputs_r>
 801ab4e:	3001      	adds	r0, #1
 801ab50:	f000 80a7 	beq.w	801aca2 <_svfiprintf_r+0x1c6>
 801ab54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab56:	445a      	add	r2, fp
 801ab58:	9209      	str	r2, [sp, #36]	@ 0x24
 801ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	f000 809f 	beq.w	801aca2 <_svfiprintf_r+0x1c6>
 801ab64:	2300      	movs	r3, #0
 801ab66:	f04f 32ff 	mov.w	r2, #4294967295
 801ab6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab6e:	f10a 0a01 	add.w	sl, sl, #1
 801ab72:	9304      	str	r3, [sp, #16]
 801ab74:	9307      	str	r3, [sp, #28]
 801ab76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ab7a:	931a      	str	r3, [sp, #104]	@ 0x68
 801ab7c:	4654      	mov	r4, sl
 801ab7e:	2205      	movs	r2, #5
 801ab80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab84:	484e      	ldr	r0, [pc, #312]	@ (801acc0 <_svfiprintf_r+0x1e4>)
 801ab86:	f7e5 fb2b 	bl	80001e0 <memchr>
 801ab8a:	9a04      	ldr	r2, [sp, #16]
 801ab8c:	b9d8      	cbnz	r0, 801abc6 <_svfiprintf_r+0xea>
 801ab8e:	06d0      	lsls	r0, r2, #27
 801ab90:	bf44      	itt	mi
 801ab92:	2320      	movmi	r3, #32
 801ab94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ab98:	0711      	lsls	r1, r2, #28
 801ab9a:	bf44      	itt	mi
 801ab9c:	232b      	movmi	r3, #43	@ 0x2b
 801ab9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aba2:	f89a 3000 	ldrb.w	r3, [sl]
 801aba6:	2b2a      	cmp	r3, #42	@ 0x2a
 801aba8:	d015      	beq.n	801abd6 <_svfiprintf_r+0xfa>
 801abaa:	9a07      	ldr	r2, [sp, #28]
 801abac:	4654      	mov	r4, sl
 801abae:	2000      	movs	r0, #0
 801abb0:	f04f 0c0a 	mov.w	ip, #10
 801abb4:	4621      	mov	r1, r4
 801abb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abba:	3b30      	subs	r3, #48	@ 0x30
 801abbc:	2b09      	cmp	r3, #9
 801abbe:	d94b      	bls.n	801ac58 <_svfiprintf_r+0x17c>
 801abc0:	b1b0      	cbz	r0, 801abf0 <_svfiprintf_r+0x114>
 801abc2:	9207      	str	r2, [sp, #28]
 801abc4:	e014      	b.n	801abf0 <_svfiprintf_r+0x114>
 801abc6:	eba0 0308 	sub.w	r3, r0, r8
 801abca:	fa09 f303 	lsl.w	r3, r9, r3
 801abce:	4313      	orrs	r3, r2
 801abd0:	9304      	str	r3, [sp, #16]
 801abd2:	46a2      	mov	sl, r4
 801abd4:	e7d2      	b.n	801ab7c <_svfiprintf_r+0xa0>
 801abd6:	9b03      	ldr	r3, [sp, #12]
 801abd8:	1d19      	adds	r1, r3, #4
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	9103      	str	r1, [sp, #12]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	bfbb      	ittet	lt
 801abe2:	425b      	neglt	r3, r3
 801abe4:	f042 0202 	orrlt.w	r2, r2, #2
 801abe8:	9307      	strge	r3, [sp, #28]
 801abea:	9307      	strlt	r3, [sp, #28]
 801abec:	bfb8      	it	lt
 801abee:	9204      	strlt	r2, [sp, #16]
 801abf0:	7823      	ldrb	r3, [r4, #0]
 801abf2:	2b2e      	cmp	r3, #46	@ 0x2e
 801abf4:	d10a      	bne.n	801ac0c <_svfiprintf_r+0x130>
 801abf6:	7863      	ldrb	r3, [r4, #1]
 801abf8:	2b2a      	cmp	r3, #42	@ 0x2a
 801abfa:	d132      	bne.n	801ac62 <_svfiprintf_r+0x186>
 801abfc:	9b03      	ldr	r3, [sp, #12]
 801abfe:	1d1a      	adds	r2, r3, #4
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	9203      	str	r2, [sp, #12]
 801ac04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ac08:	3402      	adds	r4, #2
 801ac0a:	9305      	str	r3, [sp, #20]
 801ac0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801acd0 <_svfiprintf_r+0x1f4>
 801ac10:	7821      	ldrb	r1, [r4, #0]
 801ac12:	2203      	movs	r2, #3
 801ac14:	4650      	mov	r0, sl
 801ac16:	f7e5 fae3 	bl	80001e0 <memchr>
 801ac1a:	b138      	cbz	r0, 801ac2c <_svfiprintf_r+0x150>
 801ac1c:	9b04      	ldr	r3, [sp, #16]
 801ac1e:	eba0 000a 	sub.w	r0, r0, sl
 801ac22:	2240      	movs	r2, #64	@ 0x40
 801ac24:	4082      	lsls	r2, r0
 801ac26:	4313      	orrs	r3, r2
 801ac28:	3401      	adds	r4, #1
 801ac2a:	9304      	str	r3, [sp, #16]
 801ac2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac30:	4824      	ldr	r0, [pc, #144]	@ (801acc4 <_svfiprintf_r+0x1e8>)
 801ac32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ac36:	2206      	movs	r2, #6
 801ac38:	f7e5 fad2 	bl	80001e0 <memchr>
 801ac3c:	2800      	cmp	r0, #0
 801ac3e:	d036      	beq.n	801acae <_svfiprintf_r+0x1d2>
 801ac40:	4b21      	ldr	r3, [pc, #132]	@ (801acc8 <_svfiprintf_r+0x1ec>)
 801ac42:	bb1b      	cbnz	r3, 801ac8c <_svfiprintf_r+0x1b0>
 801ac44:	9b03      	ldr	r3, [sp, #12]
 801ac46:	3307      	adds	r3, #7
 801ac48:	f023 0307 	bic.w	r3, r3, #7
 801ac4c:	3308      	adds	r3, #8
 801ac4e:	9303      	str	r3, [sp, #12]
 801ac50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac52:	4433      	add	r3, r6
 801ac54:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac56:	e76a      	b.n	801ab2e <_svfiprintf_r+0x52>
 801ac58:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac5c:	460c      	mov	r4, r1
 801ac5e:	2001      	movs	r0, #1
 801ac60:	e7a8      	b.n	801abb4 <_svfiprintf_r+0xd8>
 801ac62:	2300      	movs	r3, #0
 801ac64:	3401      	adds	r4, #1
 801ac66:	9305      	str	r3, [sp, #20]
 801ac68:	4619      	mov	r1, r3
 801ac6a:	f04f 0c0a 	mov.w	ip, #10
 801ac6e:	4620      	mov	r0, r4
 801ac70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac74:	3a30      	subs	r2, #48	@ 0x30
 801ac76:	2a09      	cmp	r2, #9
 801ac78:	d903      	bls.n	801ac82 <_svfiprintf_r+0x1a6>
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d0c6      	beq.n	801ac0c <_svfiprintf_r+0x130>
 801ac7e:	9105      	str	r1, [sp, #20]
 801ac80:	e7c4      	b.n	801ac0c <_svfiprintf_r+0x130>
 801ac82:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac86:	4604      	mov	r4, r0
 801ac88:	2301      	movs	r3, #1
 801ac8a:	e7f0      	b.n	801ac6e <_svfiprintf_r+0x192>
 801ac8c:	ab03      	add	r3, sp, #12
 801ac8e:	9300      	str	r3, [sp, #0]
 801ac90:	462a      	mov	r2, r5
 801ac92:	4b0e      	ldr	r3, [pc, #56]	@ (801accc <_svfiprintf_r+0x1f0>)
 801ac94:	a904      	add	r1, sp, #16
 801ac96:	4638      	mov	r0, r7
 801ac98:	f3af 8000 	nop.w
 801ac9c:	1c42      	adds	r2, r0, #1
 801ac9e:	4606      	mov	r6, r0
 801aca0:	d1d6      	bne.n	801ac50 <_svfiprintf_r+0x174>
 801aca2:	89ab      	ldrh	r3, [r5, #12]
 801aca4:	065b      	lsls	r3, r3, #25
 801aca6:	f53f af2d 	bmi.w	801ab04 <_svfiprintf_r+0x28>
 801acaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801acac:	e72c      	b.n	801ab08 <_svfiprintf_r+0x2c>
 801acae:	ab03      	add	r3, sp, #12
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	462a      	mov	r2, r5
 801acb4:	4b05      	ldr	r3, [pc, #20]	@ (801accc <_svfiprintf_r+0x1f0>)
 801acb6:	a904      	add	r1, sp, #16
 801acb8:	4638      	mov	r0, r7
 801acba:	f000 f9bb 	bl	801b034 <_printf_i>
 801acbe:	e7ed      	b.n	801ac9c <_svfiprintf_r+0x1c0>
 801acc0:	0801f5fb 	.word	0x0801f5fb
 801acc4:	0801f605 	.word	0x0801f605
 801acc8:	00000000 	.word	0x00000000
 801accc:	0801aa25 	.word	0x0801aa25
 801acd0:	0801f601 	.word	0x0801f601

0801acd4 <__sfputc_r>:
 801acd4:	6893      	ldr	r3, [r2, #8]
 801acd6:	3b01      	subs	r3, #1
 801acd8:	2b00      	cmp	r3, #0
 801acda:	b410      	push	{r4}
 801acdc:	6093      	str	r3, [r2, #8]
 801acde:	da08      	bge.n	801acf2 <__sfputc_r+0x1e>
 801ace0:	6994      	ldr	r4, [r2, #24]
 801ace2:	42a3      	cmp	r3, r4
 801ace4:	db01      	blt.n	801acea <__sfputc_r+0x16>
 801ace6:	290a      	cmp	r1, #10
 801ace8:	d103      	bne.n	801acf2 <__sfputc_r+0x1e>
 801acea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acee:	f000 bb7d 	b.w	801b3ec <__swbuf_r>
 801acf2:	6813      	ldr	r3, [r2, #0]
 801acf4:	1c58      	adds	r0, r3, #1
 801acf6:	6010      	str	r0, [r2, #0]
 801acf8:	7019      	strb	r1, [r3, #0]
 801acfa:	4608      	mov	r0, r1
 801acfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad00:	4770      	bx	lr

0801ad02 <__sfputs_r>:
 801ad02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad04:	4606      	mov	r6, r0
 801ad06:	460f      	mov	r7, r1
 801ad08:	4614      	mov	r4, r2
 801ad0a:	18d5      	adds	r5, r2, r3
 801ad0c:	42ac      	cmp	r4, r5
 801ad0e:	d101      	bne.n	801ad14 <__sfputs_r+0x12>
 801ad10:	2000      	movs	r0, #0
 801ad12:	e007      	b.n	801ad24 <__sfputs_r+0x22>
 801ad14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad18:	463a      	mov	r2, r7
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f7ff ffda 	bl	801acd4 <__sfputc_r>
 801ad20:	1c43      	adds	r3, r0, #1
 801ad22:	d1f3      	bne.n	801ad0c <__sfputs_r+0xa>
 801ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ad28 <_vfiprintf_r>:
 801ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad2c:	460d      	mov	r5, r1
 801ad2e:	b09d      	sub	sp, #116	@ 0x74
 801ad30:	4614      	mov	r4, r2
 801ad32:	4698      	mov	r8, r3
 801ad34:	4606      	mov	r6, r0
 801ad36:	b118      	cbz	r0, 801ad40 <_vfiprintf_r+0x18>
 801ad38:	6a03      	ldr	r3, [r0, #32]
 801ad3a:	b90b      	cbnz	r3, 801ad40 <_vfiprintf_r+0x18>
 801ad3c:	f7ff fb70 	bl	801a420 <__sinit>
 801ad40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad42:	07d9      	lsls	r1, r3, #31
 801ad44:	d405      	bmi.n	801ad52 <_vfiprintf_r+0x2a>
 801ad46:	89ab      	ldrh	r3, [r5, #12]
 801ad48:	059a      	lsls	r2, r3, #22
 801ad4a:	d402      	bmi.n	801ad52 <_vfiprintf_r+0x2a>
 801ad4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad4e:	f7ff fd32 	bl	801a7b6 <__retarget_lock_acquire_recursive>
 801ad52:	89ab      	ldrh	r3, [r5, #12]
 801ad54:	071b      	lsls	r3, r3, #28
 801ad56:	d501      	bpl.n	801ad5c <_vfiprintf_r+0x34>
 801ad58:	692b      	ldr	r3, [r5, #16]
 801ad5a:	b99b      	cbnz	r3, 801ad84 <_vfiprintf_r+0x5c>
 801ad5c:	4629      	mov	r1, r5
 801ad5e:	4630      	mov	r0, r6
 801ad60:	f000 fb82 	bl	801b468 <__swsetup_r>
 801ad64:	b170      	cbz	r0, 801ad84 <_vfiprintf_r+0x5c>
 801ad66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad68:	07dc      	lsls	r4, r3, #31
 801ad6a:	d504      	bpl.n	801ad76 <_vfiprintf_r+0x4e>
 801ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad70:	b01d      	add	sp, #116	@ 0x74
 801ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad76:	89ab      	ldrh	r3, [r5, #12]
 801ad78:	0598      	lsls	r0, r3, #22
 801ad7a:	d4f7      	bmi.n	801ad6c <_vfiprintf_r+0x44>
 801ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad7e:	f7ff fd1b 	bl	801a7b8 <__retarget_lock_release_recursive>
 801ad82:	e7f3      	b.n	801ad6c <_vfiprintf_r+0x44>
 801ad84:	2300      	movs	r3, #0
 801ad86:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad88:	2320      	movs	r3, #32
 801ad8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ad8e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad92:	2330      	movs	r3, #48	@ 0x30
 801ad94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801af44 <_vfiprintf_r+0x21c>
 801ad98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ad9c:	f04f 0901 	mov.w	r9, #1
 801ada0:	4623      	mov	r3, r4
 801ada2:	469a      	mov	sl, r3
 801ada4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ada8:	b10a      	cbz	r2, 801adae <_vfiprintf_r+0x86>
 801adaa:	2a25      	cmp	r2, #37	@ 0x25
 801adac:	d1f9      	bne.n	801ada2 <_vfiprintf_r+0x7a>
 801adae:	ebba 0b04 	subs.w	fp, sl, r4
 801adb2:	d00b      	beq.n	801adcc <_vfiprintf_r+0xa4>
 801adb4:	465b      	mov	r3, fp
 801adb6:	4622      	mov	r2, r4
 801adb8:	4629      	mov	r1, r5
 801adba:	4630      	mov	r0, r6
 801adbc:	f7ff ffa1 	bl	801ad02 <__sfputs_r>
 801adc0:	3001      	adds	r0, #1
 801adc2:	f000 80a7 	beq.w	801af14 <_vfiprintf_r+0x1ec>
 801adc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801adc8:	445a      	add	r2, fp
 801adca:	9209      	str	r2, [sp, #36]	@ 0x24
 801adcc:	f89a 3000 	ldrb.w	r3, [sl]
 801add0:	2b00      	cmp	r3, #0
 801add2:	f000 809f 	beq.w	801af14 <_vfiprintf_r+0x1ec>
 801add6:	2300      	movs	r3, #0
 801add8:	f04f 32ff 	mov.w	r2, #4294967295
 801addc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ade0:	f10a 0a01 	add.w	sl, sl, #1
 801ade4:	9304      	str	r3, [sp, #16]
 801ade6:	9307      	str	r3, [sp, #28]
 801ade8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801adec:	931a      	str	r3, [sp, #104]	@ 0x68
 801adee:	4654      	mov	r4, sl
 801adf0:	2205      	movs	r2, #5
 801adf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adf6:	4853      	ldr	r0, [pc, #332]	@ (801af44 <_vfiprintf_r+0x21c>)
 801adf8:	f7e5 f9f2 	bl	80001e0 <memchr>
 801adfc:	9a04      	ldr	r2, [sp, #16]
 801adfe:	b9d8      	cbnz	r0, 801ae38 <_vfiprintf_r+0x110>
 801ae00:	06d1      	lsls	r1, r2, #27
 801ae02:	bf44      	itt	mi
 801ae04:	2320      	movmi	r3, #32
 801ae06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae0a:	0713      	lsls	r3, r2, #28
 801ae0c:	bf44      	itt	mi
 801ae0e:	232b      	movmi	r3, #43	@ 0x2b
 801ae10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae14:	f89a 3000 	ldrb.w	r3, [sl]
 801ae18:	2b2a      	cmp	r3, #42	@ 0x2a
 801ae1a:	d015      	beq.n	801ae48 <_vfiprintf_r+0x120>
 801ae1c:	9a07      	ldr	r2, [sp, #28]
 801ae1e:	4654      	mov	r4, sl
 801ae20:	2000      	movs	r0, #0
 801ae22:	f04f 0c0a 	mov.w	ip, #10
 801ae26:	4621      	mov	r1, r4
 801ae28:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae2c:	3b30      	subs	r3, #48	@ 0x30
 801ae2e:	2b09      	cmp	r3, #9
 801ae30:	d94b      	bls.n	801aeca <_vfiprintf_r+0x1a2>
 801ae32:	b1b0      	cbz	r0, 801ae62 <_vfiprintf_r+0x13a>
 801ae34:	9207      	str	r2, [sp, #28]
 801ae36:	e014      	b.n	801ae62 <_vfiprintf_r+0x13a>
 801ae38:	eba0 0308 	sub.w	r3, r0, r8
 801ae3c:	fa09 f303 	lsl.w	r3, r9, r3
 801ae40:	4313      	orrs	r3, r2
 801ae42:	9304      	str	r3, [sp, #16]
 801ae44:	46a2      	mov	sl, r4
 801ae46:	e7d2      	b.n	801adee <_vfiprintf_r+0xc6>
 801ae48:	9b03      	ldr	r3, [sp, #12]
 801ae4a:	1d19      	adds	r1, r3, #4
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	9103      	str	r1, [sp, #12]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	bfbb      	ittet	lt
 801ae54:	425b      	neglt	r3, r3
 801ae56:	f042 0202 	orrlt.w	r2, r2, #2
 801ae5a:	9307      	strge	r3, [sp, #28]
 801ae5c:	9307      	strlt	r3, [sp, #28]
 801ae5e:	bfb8      	it	lt
 801ae60:	9204      	strlt	r2, [sp, #16]
 801ae62:	7823      	ldrb	r3, [r4, #0]
 801ae64:	2b2e      	cmp	r3, #46	@ 0x2e
 801ae66:	d10a      	bne.n	801ae7e <_vfiprintf_r+0x156>
 801ae68:	7863      	ldrb	r3, [r4, #1]
 801ae6a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ae6c:	d132      	bne.n	801aed4 <_vfiprintf_r+0x1ac>
 801ae6e:	9b03      	ldr	r3, [sp, #12]
 801ae70:	1d1a      	adds	r2, r3, #4
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	9203      	str	r2, [sp, #12]
 801ae76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ae7a:	3402      	adds	r4, #2
 801ae7c:	9305      	str	r3, [sp, #20]
 801ae7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801af54 <_vfiprintf_r+0x22c>
 801ae82:	7821      	ldrb	r1, [r4, #0]
 801ae84:	2203      	movs	r2, #3
 801ae86:	4650      	mov	r0, sl
 801ae88:	f7e5 f9aa 	bl	80001e0 <memchr>
 801ae8c:	b138      	cbz	r0, 801ae9e <_vfiprintf_r+0x176>
 801ae8e:	9b04      	ldr	r3, [sp, #16]
 801ae90:	eba0 000a 	sub.w	r0, r0, sl
 801ae94:	2240      	movs	r2, #64	@ 0x40
 801ae96:	4082      	lsls	r2, r0
 801ae98:	4313      	orrs	r3, r2
 801ae9a:	3401      	adds	r4, #1
 801ae9c:	9304      	str	r3, [sp, #16]
 801ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aea2:	4829      	ldr	r0, [pc, #164]	@ (801af48 <_vfiprintf_r+0x220>)
 801aea4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aea8:	2206      	movs	r2, #6
 801aeaa:	f7e5 f999 	bl	80001e0 <memchr>
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	d03f      	beq.n	801af32 <_vfiprintf_r+0x20a>
 801aeb2:	4b26      	ldr	r3, [pc, #152]	@ (801af4c <_vfiprintf_r+0x224>)
 801aeb4:	bb1b      	cbnz	r3, 801aefe <_vfiprintf_r+0x1d6>
 801aeb6:	9b03      	ldr	r3, [sp, #12]
 801aeb8:	3307      	adds	r3, #7
 801aeba:	f023 0307 	bic.w	r3, r3, #7
 801aebe:	3308      	adds	r3, #8
 801aec0:	9303      	str	r3, [sp, #12]
 801aec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aec4:	443b      	add	r3, r7
 801aec6:	9309      	str	r3, [sp, #36]	@ 0x24
 801aec8:	e76a      	b.n	801ada0 <_vfiprintf_r+0x78>
 801aeca:	fb0c 3202 	mla	r2, ip, r2, r3
 801aece:	460c      	mov	r4, r1
 801aed0:	2001      	movs	r0, #1
 801aed2:	e7a8      	b.n	801ae26 <_vfiprintf_r+0xfe>
 801aed4:	2300      	movs	r3, #0
 801aed6:	3401      	adds	r4, #1
 801aed8:	9305      	str	r3, [sp, #20]
 801aeda:	4619      	mov	r1, r3
 801aedc:	f04f 0c0a 	mov.w	ip, #10
 801aee0:	4620      	mov	r0, r4
 801aee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aee6:	3a30      	subs	r2, #48	@ 0x30
 801aee8:	2a09      	cmp	r2, #9
 801aeea:	d903      	bls.n	801aef4 <_vfiprintf_r+0x1cc>
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d0c6      	beq.n	801ae7e <_vfiprintf_r+0x156>
 801aef0:	9105      	str	r1, [sp, #20]
 801aef2:	e7c4      	b.n	801ae7e <_vfiprintf_r+0x156>
 801aef4:	fb0c 2101 	mla	r1, ip, r1, r2
 801aef8:	4604      	mov	r4, r0
 801aefa:	2301      	movs	r3, #1
 801aefc:	e7f0      	b.n	801aee0 <_vfiprintf_r+0x1b8>
 801aefe:	ab03      	add	r3, sp, #12
 801af00:	9300      	str	r3, [sp, #0]
 801af02:	462a      	mov	r2, r5
 801af04:	4b12      	ldr	r3, [pc, #72]	@ (801af50 <_vfiprintf_r+0x228>)
 801af06:	a904      	add	r1, sp, #16
 801af08:	4630      	mov	r0, r6
 801af0a:	f3af 8000 	nop.w
 801af0e:	4607      	mov	r7, r0
 801af10:	1c78      	adds	r0, r7, #1
 801af12:	d1d6      	bne.n	801aec2 <_vfiprintf_r+0x19a>
 801af14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af16:	07d9      	lsls	r1, r3, #31
 801af18:	d405      	bmi.n	801af26 <_vfiprintf_r+0x1fe>
 801af1a:	89ab      	ldrh	r3, [r5, #12]
 801af1c:	059a      	lsls	r2, r3, #22
 801af1e:	d402      	bmi.n	801af26 <_vfiprintf_r+0x1fe>
 801af20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af22:	f7ff fc49 	bl	801a7b8 <__retarget_lock_release_recursive>
 801af26:	89ab      	ldrh	r3, [r5, #12]
 801af28:	065b      	lsls	r3, r3, #25
 801af2a:	f53f af1f 	bmi.w	801ad6c <_vfiprintf_r+0x44>
 801af2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801af30:	e71e      	b.n	801ad70 <_vfiprintf_r+0x48>
 801af32:	ab03      	add	r3, sp, #12
 801af34:	9300      	str	r3, [sp, #0]
 801af36:	462a      	mov	r2, r5
 801af38:	4b05      	ldr	r3, [pc, #20]	@ (801af50 <_vfiprintf_r+0x228>)
 801af3a:	a904      	add	r1, sp, #16
 801af3c:	4630      	mov	r0, r6
 801af3e:	f000 f879 	bl	801b034 <_printf_i>
 801af42:	e7e4      	b.n	801af0e <_vfiprintf_r+0x1e6>
 801af44:	0801f5fb 	.word	0x0801f5fb
 801af48:	0801f605 	.word	0x0801f605
 801af4c:	00000000 	.word	0x00000000
 801af50:	0801ad03 	.word	0x0801ad03
 801af54:	0801f601 	.word	0x0801f601

0801af58 <_printf_common>:
 801af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af5c:	4616      	mov	r6, r2
 801af5e:	4698      	mov	r8, r3
 801af60:	688a      	ldr	r2, [r1, #8]
 801af62:	690b      	ldr	r3, [r1, #16]
 801af64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801af68:	4293      	cmp	r3, r2
 801af6a:	bfb8      	it	lt
 801af6c:	4613      	movlt	r3, r2
 801af6e:	6033      	str	r3, [r6, #0]
 801af70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801af74:	4607      	mov	r7, r0
 801af76:	460c      	mov	r4, r1
 801af78:	b10a      	cbz	r2, 801af7e <_printf_common+0x26>
 801af7a:	3301      	adds	r3, #1
 801af7c:	6033      	str	r3, [r6, #0]
 801af7e:	6823      	ldr	r3, [r4, #0]
 801af80:	0699      	lsls	r1, r3, #26
 801af82:	bf42      	ittt	mi
 801af84:	6833      	ldrmi	r3, [r6, #0]
 801af86:	3302      	addmi	r3, #2
 801af88:	6033      	strmi	r3, [r6, #0]
 801af8a:	6825      	ldr	r5, [r4, #0]
 801af8c:	f015 0506 	ands.w	r5, r5, #6
 801af90:	d106      	bne.n	801afa0 <_printf_common+0x48>
 801af92:	f104 0a19 	add.w	sl, r4, #25
 801af96:	68e3      	ldr	r3, [r4, #12]
 801af98:	6832      	ldr	r2, [r6, #0]
 801af9a:	1a9b      	subs	r3, r3, r2
 801af9c:	42ab      	cmp	r3, r5
 801af9e:	dc26      	bgt.n	801afee <_printf_common+0x96>
 801afa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801afa4:	6822      	ldr	r2, [r4, #0]
 801afa6:	3b00      	subs	r3, #0
 801afa8:	bf18      	it	ne
 801afaa:	2301      	movne	r3, #1
 801afac:	0692      	lsls	r2, r2, #26
 801afae:	d42b      	bmi.n	801b008 <_printf_common+0xb0>
 801afb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801afb4:	4641      	mov	r1, r8
 801afb6:	4638      	mov	r0, r7
 801afb8:	47c8      	blx	r9
 801afba:	3001      	adds	r0, #1
 801afbc:	d01e      	beq.n	801affc <_printf_common+0xa4>
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	6922      	ldr	r2, [r4, #16]
 801afc2:	f003 0306 	and.w	r3, r3, #6
 801afc6:	2b04      	cmp	r3, #4
 801afc8:	bf02      	ittt	eq
 801afca:	68e5      	ldreq	r5, [r4, #12]
 801afcc:	6833      	ldreq	r3, [r6, #0]
 801afce:	1aed      	subeq	r5, r5, r3
 801afd0:	68a3      	ldr	r3, [r4, #8]
 801afd2:	bf0c      	ite	eq
 801afd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801afd8:	2500      	movne	r5, #0
 801afda:	4293      	cmp	r3, r2
 801afdc:	bfc4      	itt	gt
 801afde:	1a9b      	subgt	r3, r3, r2
 801afe0:	18ed      	addgt	r5, r5, r3
 801afe2:	2600      	movs	r6, #0
 801afe4:	341a      	adds	r4, #26
 801afe6:	42b5      	cmp	r5, r6
 801afe8:	d11a      	bne.n	801b020 <_printf_common+0xc8>
 801afea:	2000      	movs	r0, #0
 801afec:	e008      	b.n	801b000 <_printf_common+0xa8>
 801afee:	2301      	movs	r3, #1
 801aff0:	4652      	mov	r2, sl
 801aff2:	4641      	mov	r1, r8
 801aff4:	4638      	mov	r0, r7
 801aff6:	47c8      	blx	r9
 801aff8:	3001      	adds	r0, #1
 801affa:	d103      	bne.n	801b004 <_printf_common+0xac>
 801affc:	f04f 30ff 	mov.w	r0, #4294967295
 801b000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b004:	3501      	adds	r5, #1
 801b006:	e7c6      	b.n	801af96 <_printf_common+0x3e>
 801b008:	18e1      	adds	r1, r4, r3
 801b00a:	1c5a      	adds	r2, r3, #1
 801b00c:	2030      	movs	r0, #48	@ 0x30
 801b00e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b012:	4422      	add	r2, r4
 801b014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b01c:	3302      	adds	r3, #2
 801b01e:	e7c7      	b.n	801afb0 <_printf_common+0x58>
 801b020:	2301      	movs	r3, #1
 801b022:	4622      	mov	r2, r4
 801b024:	4641      	mov	r1, r8
 801b026:	4638      	mov	r0, r7
 801b028:	47c8      	blx	r9
 801b02a:	3001      	adds	r0, #1
 801b02c:	d0e6      	beq.n	801affc <_printf_common+0xa4>
 801b02e:	3601      	adds	r6, #1
 801b030:	e7d9      	b.n	801afe6 <_printf_common+0x8e>
	...

0801b034 <_printf_i>:
 801b034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b038:	7e0f      	ldrb	r7, [r1, #24]
 801b03a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b03c:	2f78      	cmp	r7, #120	@ 0x78
 801b03e:	4691      	mov	r9, r2
 801b040:	4680      	mov	r8, r0
 801b042:	460c      	mov	r4, r1
 801b044:	469a      	mov	sl, r3
 801b046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b04a:	d807      	bhi.n	801b05c <_printf_i+0x28>
 801b04c:	2f62      	cmp	r7, #98	@ 0x62
 801b04e:	d80a      	bhi.n	801b066 <_printf_i+0x32>
 801b050:	2f00      	cmp	r7, #0
 801b052:	f000 80d1 	beq.w	801b1f8 <_printf_i+0x1c4>
 801b056:	2f58      	cmp	r7, #88	@ 0x58
 801b058:	f000 80b8 	beq.w	801b1cc <_printf_i+0x198>
 801b05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b064:	e03a      	b.n	801b0dc <_printf_i+0xa8>
 801b066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b06a:	2b15      	cmp	r3, #21
 801b06c:	d8f6      	bhi.n	801b05c <_printf_i+0x28>
 801b06e:	a101      	add	r1, pc, #4	@ (adr r1, 801b074 <_printf_i+0x40>)
 801b070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b074:	0801b0cd 	.word	0x0801b0cd
 801b078:	0801b0e1 	.word	0x0801b0e1
 801b07c:	0801b05d 	.word	0x0801b05d
 801b080:	0801b05d 	.word	0x0801b05d
 801b084:	0801b05d 	.word	0x0801b05d
 801b088:	0801b05d 	.word	0x0801b05d
 801b08c:	0801b0e1 	.word	0x0801b0e1
 801b090:	0801b05d 	.word	0x0801b05d
 801b094:	0801b05d 	.word	0x0801b05d
 801b098:	0801b05d 	.word	0x0801b05d
 801b09c:	0801b05d 	.word	0x0801b05d
 801b0a0:	0801b1df 	.word	0x0801b1df
 801b0a4:	0801b10b 	.word	0x0801b10b
 801b0a8:	0801b199 	.word	0x0801b199
 801b0ac:	0801b05d 	.word	0x0801b05d
 801b0b0:	0801b05d 	.word	0x0801b05d
 801b0b4:	0801b201 	.word	0x0801b201
 801b0b8:	0801b05d 	.word	0x0801b05d
 801b0bc:	0801b10b 	.word	0x0801b10b
 801b0c0:	0801b05d 	.word	0x0801b05d
 801b0c4:	0801b05d 	.word	0x0801b05d
 801b0c8:	0801b1a1 	.word	0x0801b1a1
 801b0cc:	6833      	ldr	r3, [r6, #0]
 801b0ce:	1d1a      	adds	r2, r3, #4
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	6032      	str	r2, [r6, #0]
 801b0d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b0d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b0dc:	2301      	movs	r3, #1
 801b0de:	e09c      	b.n	801b21a <_printf_i+0x1e6>
 801b0e0:	6833      	ldr	r3, [r6, #0]
 801b0e2:	6820      	ldr	r0, [r4, #0]
 801b0e4:	1d19      	adds	r1, r3, #4
 801b0e6:	6031      	str	r1, [r6, #0]
 801b0e8:	0606      	lsls	r6, r0, #24
 801b0ea:	d501      	bpl.n	801b0f0 <_printf_i+0xbc>
 801b0ec:	681d      	ldr	r5, [r3, #0]
 801b0ee:	e003      	b.n	801b0f8 <_printf_i+0xc4>
 801b0f0:	0645      	lsls	r5, r0, #25
 801b0f2:	d5fb      	bpl.n	801b0ec <_printf_i+0xb8>
 801b0f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b0f8:	2d00      	cmp	r5, #0
 801b0fa:	da03      	bge.n	801b104 <_printf_i+0xd0>
 801b0fc:	232d      	movs	r3, #45	@ 0x2d
 801b0fe:	426d      	negs	r5, r5
 801b100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b104:	4858      	ldr	r0, [pc, #352]	@ (801b268 <_printf_i+0x234>)
 801b106:	230a      	movs	r3, #10
 801b108:	e011      	b.n	801b12e <_printf_i+0xfa>
 801b10a:	6821      	ldr	r1, [r4, #0]
 801b10c:	6833      	ldr	r3, [r6, #0]
 801b10e:	0608      	lsls	r0, r1, #24
 801b110:	f853 5b04 	ldr.w	r5, [r3], #4
 801b114:	d402      	bmi.n	801b11c <_printf_i+0xe8>
 801b116:	0649      	lsls	r1, r1, #25
 801b118:	bf48      	it	mi
 801b11a:	b2ad      	uxthmi	r5, r5
 801b11c:	2f6f      	cmp	r7, #111	@ 0x6f
 801b11e:	4852      	ldr	r0, [pc, #328]	@ (801b268 <_printf_i+0x234>)
 801b120:	6033      	str	r3, [r6, #0]
 801b122:	bf14      	ite	ne
 801b124:	230a      	movne	r3, #10
 801b126:	2308      	moveq	r3, #8
 801b128:	2100      	movs	r1, #0
 801b12a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b12e:	6866      	ldr	r6, [r4, #4]
 801b130:	60a6      	str	r6, [r4, #8]
 801b132:	2e00      	cmp	r6, #0
 801b134:	db05      	blt.n	801b142 <_printf_i+0x10e>
 801b136:	6821      	ldr	r1, [r4, #0]
 801b138:	432e      	orrs	r6, r5
 801b13a:	f021 0104 	bic.w	r1, r1, #4
 801b13e:	6021      	str	r1, [r4, #0]
 801b140:	d04b      	beq.n	801b1da <_printf_i+0x1a6>
 801b142:	4616      	mov	r6, r2
 801b144:	fbb5 f1f3 	udiv	r1, r5, r3
 801b148:	fb03 5711 	mls	r7, r3, r1, r5
 801b14c:	5dc7      	ldrb	r7, [r0, r7]
 801b14e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b152:	462f      	mov	r7, r5
 801b154:	42bb      	cmp	r3, r7
 801b156:	460d      	mov	r5, r1
 801b158:	d9f4      	bls.n	801b144 <_printf_i+0x110>
 801b15a:	2b08      	cmp	r3, #8
 801b15c:	d10b      	bne.n	801b176 <_printf_i+0x142>
 801b15e:	6823      	ldr	r3, [r4, #0]
 801b160:	07df      	lsls	r7, r3, #31
 801b162:	d508      	bpl.n	801b176 <_printf_i+0x142>
 801b164:	6923      	ldr	r3, [r4, #16]
 801b166:	6861      	ldr	r1, [r4, #4]
 801b168:	4299      	cmp	r1, r3
 801b16a:	bfde      	ittt	le
 801b16c:	2330      	movle	r3, #48	@ 0x30
 801b16e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b172:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b176:	1b92      	subs	r2, r2, r6
 801b178:	6122      	str	r2, [r4, #16]
 801b17a:	f8cd a000 	str.w	sl, [sp]
 801b17e:	464b      	mov	r3, r9
 801b180:	aa03      	add	r2, sp, #12
 801b182:	4621      	mov	r1, r4
 801b184:	4640      	mov	r0, r8
 801b186:	f7ff fee7 	bl	801af58 <_printf_common>
 801b18a:	3001      	adds	r0, #1
 801b18c:	d14a      	bne.n	801b224 <_printf_i+0x1f0>
 801b18e:	f04f 30ff 	mov.w	r0, #4294967295
 801b192:	b004      	add	sp, #16
 801b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b198:	6823      	ldr	r3, [r4, #0]
 801b19a:	f043 0320 	orr.w	r3, r3, #32
 801b19e:	6023      	str	r3, [r4, #0]
 801b1a0:	4832      	ldr	r0, [pc, #200]	@ (801b26c <_printf_i+0x238>)
 801b1a2:	2778      	movs	r7, #120	@ 0x78
 801b1a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b1a8:	6823      	ldr	r3, [r4, #0]
 801b1aa:	6831      	ldr	r1, [r6, #0]
 801b1ac:	061f      	lsls	r7, r3, #24
 801b1ae:	f851 5b04 	ldr.w	r5, [r1], #4
 801b1b2:	d402      	bmi.n	801b1ba <_printf_i+0x186>
 801b1b4:	065f      	lsls	r7, r3, #25
 801b1b6:	bf48      	it	mi
 801b1b8:	b2ad      	uxthmi	r5, r5
 801b1ba:	6031      	str	r1, [r6, #0]
 801b1bc:	07d9      	lsls	r1, r3, #31
 801b1be:	bf44      	itt	mi
 801b1c0:	f043 0320 	orrmi.w	r3, r3, #32
 801b1c4:	6023      	strmi	r3, [r4, #0]
 801b1c6:	b11d      	cbz	r5, 801b1d0 <_printf_i+0x19c>
 801b1c8:	2310      	movs	r3, #16
 801b1ca:	e7ad      	b.n	801b128 <_printf_i+0xf4>
 801b1cc:	4826      	ldr	r0, [pc, #152]	@ (801b268 <_printf_i+0x234>)
 801b1ce:	e7e9      	b.n	801b1a4 <_printf_i+0x170>
 801b1d0:	6823      	ldr	r3, [r4, #0]
 801b1d2:	f023 0320 	bic.w	r3, r3, #32
 801b1d6:	6023      	str	r3, [r4, #0]
 801b1d8:	e7f6      	b.n	801b1c8 <_printf_i+0x194>
 801b1da:	4616      	mov	r6, r2
 801b1dc:	e7bd      	b.n	801b15a <_printf_i+0x126>
 801b1de:	6833      	ldr	r3, [r6, #0]
 801b1e0:	6825      	ldr	r5, [r4, #0]
 801b1e2:	6961      	ldr	r1, [r4, #20]
 801b1e4:	1d18      	adds	r0, r3, #4
 801b1e6:	6030      	str	r0, [r6, #0]
 801b1e8:	062e      	lsls	r6, r5, #24
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	d501      	bpl.n	801b1f2 <_printf_i+0x1be>
 801b1ee:	6019      	str	r1, [r3, #0]
 801b1f0:	e002      	b.n	801b1f8 <_printf_i+0x1c4>
 801b1f2:	0668      	lsls	r0, r5, #25
 801b1f4:	d5fb      	bpl.n	801b1ee <_printf_i+0x1ba>
 801b1f6:	8019      	strh	r1, [r3, #0]
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	6123      	str	r3, [r4, #16]
 801b1fc:	4616      	mov	r6, r2
 801b1fe:	e7bc      	b.n	801b17a <_printf_i+0x146>
 801b200:	6833      	ldr	r3, [r6, #0]
 801b202:	1d1a      	adds	r2, r3, #4
 801b204:	6032      	str	r2, [r6, #0]
 801b206:	681e      	ldr	r6, [r3, #0]
 801b208:	6862      	ldr	r2, [r4, #4]
 801b20a:	2100      	movs	r1, #0
 801b20c:	4630      	mov	r0, r6
 801b20e:	f7e4 ffe7 	bl	80001e0 <memchr>
 801b212:	b108      	cbz	r0, 801b218 <_printf_i+0x1e4>
 801b214:	1b80      	subs	r0, r0, r6
 801b216:	6060      	str	r0, [r4, #4]
 801b218:	6863      	ldr	r3, [r4, #4]
 801b21a:	6123      	str	r3, [r4, #16]
 801b21c:	2300      	movs	r3, #0
 801b21e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b222:	e7aa      	b.n	801b17a <_printf_i+0x146>
 801b224:	6923      	ldr	r3, [r4, #16]
 801b226:	4632      	mov	r2, r6
 801b228:	4649      	mov	r1, r9
 801b22a:	4640      	mov	r0, r8
 801b22c:	47d0      	blx	sl
 801b22e:	3001      	adds	r0, #1
 801b230:	d0ad      	beq.n	801b18e <_printf_i+0x15a>
 801b232:	6823      	ldr	r3, [r4, #0]
 801b234:	079b      	lsls	r3, r3, #30
 801b236:	d413      	bmi.n	801b260 <_printf_i+0x22c>
 801b238:	68e0      	ldr	r0, [r4, #12]
 801b23a:	9b03      	ldr	r3, [sp, #12]
 801b23c:	4298      	cmp	r0, r3
 801b23e:	bfb8      	it	lt
 801b240:	4618      	movlt	r0, r3
 801b242:	e7a6      	b.n	801b192 <_printf_i+0x15e>
 801b244:	2301      	movs	r3, #1
 801b246:	4632      	mov	r2, r6
 801b248:	4649      	mov	r1, r9
 801b24a:	4640      	mov	r0, r8
 801b24c:	47d0      	blx	sl
 801b24e:	3001      	adds	r0, #1
 801b250:	d09d      	beq.n	801b18e <_printf_i+0x15a>
 801b252:	3501      	adds	r5, #1
 801b254:	68e3      	ldr	r3, [r4, #12]
 801b256:	9903      	ldr	r1, [sp, #12]
 801b258:	1a5b      	subs	r3, r3, r1
 801b25a:	42ab      	cmp	r3, r5
 801b25c:	dcf2      	bgt.n	801b244 <_printf_i+0x210>
 801b25e:	e7eb      	b.n	801b238 <_printf_i+0x204>
 801b260:	2500      	movs	r5, #0
 801b262:	f104 0619 	add.w	r6, r4, #25
 801b266:	e7f5      	b.n	801b254 <_printf_i+0x220>
 801b268:	0801f60c 	.word	0x0801f60c
 801b26c:	0801f61d 	.word	0x0801f61d

0801b270 <__sflush_r>:
 801b270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b278:	0716      	lsls	r6, r2, #28
 801b27a:	4605      	mov	r5, r0
 801b27c:	460c      	mov	r4, r1
 801b27e:	d454      	bmi.n	801b32a <__sflush_r+0xba>
 801b280:	684b      	ldr	r3, [r1, #4]
 801b282:	2b00      	cmp	r3, #0
 801b284:	dc02      	bgt.n	801b28c <__sflush_r+0x1c>
 801b286:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b288:	2b00      	cmp	r3, #0
 801b28a:	dd48      	ble.n	801b31e <__sflush_r+0xae>
 801b28c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b28e:	2e00      	cmp	r6, #0
 801b290:	d045      	beq.n	801b31e <__sflush_r+0xae>
 801b292:	2300      	movs	r3, #0
 801b294:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b298:	682f      	ldr	r7, [r5, #0]
 801b29a:	6a21      	ldr	r1, [r4, #32]
 801b29c:	602b      	str	r3, [r5, #0]
 801b29e:	d030      	beq.n	801b302 <__sflush_r+0x92>
 801b2a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b2a2:	89a3      	ldrh	r3, [r4, #12]
 801b2a4:	0759      	lsls	r1, r3, #29
 801b2a6:	d505      	bpl.n	801b2b4 <__sflush_r+0x44>
 801b2a8:	6863      	ldr	r3, [r4, #4]
 801b2aa:	1ad2      	subs	r2, r2, r3
 801b2ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b2ae:	b10b      	cbz	r3, 801b2b4 <__sflush_r+0x44>
 801b2b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b2b2:	1ad2      	subs	r2, r2, r3
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b2b8:	6a21      	ldr	r1, [r4, #32]
 801b2ba:	4628      	mov	r0, r5
 801b2bc:	47b0      	blx	r6
 801b2be:	1c43      	adds	r3, r0, #1
 801b2c0:	89a3      	ldrh	r3, [r4, #12]
 801b2c2:	d106      	bne.n	801b2d2 <__sflush_r+0x62>
 801b2c4:	6829      	ldr	r1, [r5, #0]
 801b2c6:	291d      	cmp	r1, #29
 801b2c8:	d82b      	bhi.n	801b322 <__sflush_r+0xb2>
 801b2ca:	4a2a      	ldr	r2, [pc, #168]	@ (801b374 <__sflush_r+0x104>)
 801b2cc:	40ca      	lsrs	r2, r1
 801b2ce:	07d6      	lsls	r6, r2, #31
 801b2d0:	d527      	bpl.n	801b322 <__sflush_r+0xb2>
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	6062      	str	r2, [r4, #4]
 801b2d6:	04d9      	lsls	r1, r3, #19
 801b2d8:	6922      	ldr	r2, [r4, #16]
 801b2da:	6022      	str	r2, [r4, #0]
 801b2dc:	d504      	bpl.n	801b2e8 <__sflush_r+0x78>
 801b2de:	1c42      	adds	r2, r0, #1
 801b2e0:	d101      	bne.n	801b2e6 <__sflush_r+0x76>
 801b2e2:	682b      	ldr	r3, [r5, #0]
 801b2e4:	b903      	cbnz	r3, 801b2e8 <__sflush_r+0x78>
 801b2e6:	6560      	str	r0, [r4, #84]	@ 0x54
 801b2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b2ea:	602f      	str	r7, [r5, #0]
 801b2ec:	b1b9      	cbz	r1, 801b31e <__sflush_r+0xae>
 801b2ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b2f2:	4299      	cmp	r1, r3
 801b2f4:	d002      	beq.n	801b2fc <__sflush_r+0x8c>
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	f7ff fa94 	bl	801a824 <_free_r>
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801b300:	e00d      	b.n	801b31e <__sflush_r+0xae>
 801b302:	2301      	movs	r3, #1
 801b304:	4628      	mov	r0, r5
 801b306:	47b0      	blx	r6
 801b308:	4602      	mov	r2, r0
 801b30a:	1c50      	adds	r0, r2, #1
 801b30c:	d1c9      	bne.n	801b2a2 <__sflush_r+0x32>
 801b30e:	682b      	ldr	r3, [r5, #0]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d0c6      	beq.n	801b2a2 <__sflush_r+0x32>
 801b314:	2b1d      	cmp	r3, #29
 801b316:	d001      	beq.n	801b31c <__sflush_r+0xac>
 801b318:	2b16      	cmp	r3, #22
 801b31a:	d11e      	bne.n	801b35a <__sflush_r+0xea>
 801b31c:	602f      	str	r7, [r5, #0]
 801b31e:	2000      	movs	r0, #0
 801b320:	e022      	b.n	801b368 <__sflush_r+0xf8>
 801b322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b326:	b21b      	sxth	r3, r3
 801b328:	e01b      	b.n	801b362 <__sflush_r+0xf2>
 801b32a:	690f      	ldr	r7, [r1, #16]
 801b32c:	2f00      	cmp	r7, #0
 801b32e:	d0f6      	beq.n	801b31e <__sflush_r+0xae>
 801b330:	0793      	lsls	r3, r2, #30
 801b332:	680e      	ldr	r6, [r1, #0]
 801b334:	bf08      	it	eq
 801b336:	694b      	ldreq	r3, [r1, #20]
 801b338:	600f      	str	r7, [r1, #0]
 801b33a:	bf18      	it	ne
 801b33c:	2300      	movne	r3, #0
 801b33e:	eba6 0807 	sub.w	r8, r6, r7
 801b342:	608b      	str	r3, [r1, #8]
 801b344:	f1b8 0f00 	cmp.w	r8, #0
 801b348:	dde9      	ble.n	801b31e <__sflush_r+0xae>
 801b34a:	6a21      	ldr	r1, [r4, #32]
 801b34c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b34e:	4643      	mov	r3, r8
 801b350:	463a      	mov	r2, r7
 801b352:	4628      	mov	r0, r5
 801b354:	47b0      	blx	r6
 801b356:	2800      	cmp	r0, #0
 801b358:	dc08      	bgt.n	801b36c <__sflush_r+0xfc>
 801b35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b362:	81a3      	strh	r3, [r4, #12]
 801b364:	f04f 30ff 	mov.w	r0, #4294967295
 801b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b36c:	4407      	add	r7, r0
 801b36e:	eba8 0800 	sub.w	r8, r8, r0
 801b372:	e7e7      	b.n	801b344 <__sflush_r+0xd4>
 801b374:	20400001 	.word	0x20400001

0801b378 <_fflush_r>:
 801b378:	b538      	push	{r3, r4, r5, lr}
 801b37a:	690b      	ldr	r3, [r1, #16]
 801b37c:	4605      	mov	r5, r0
 801b37e:	460c      	mov	r4, r1
 801b380:	b913      	cbnz	r3, 801b388 <_fflush_r+0x10>
 801b382:	2500      	movs	r5, #0
 801b384:	4628      	mov	r0, r5
 801b386:	bd38      	pop	{r3, r4, r5, pc}
 801b388:	b118      	cbz	r0, 801b392 <_fflush_r+0x1a>
 801b38a:	6a03      	ldr	r3, [r0, #32]
 801b38c:	b90b      	cbnz	r3, 801b392 <_fflush_r+0x1a>
 801b38e:	f7ff f847 	bl	801a420 <__sinit>
 801b392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d0f3      	beq.n	801b382 <_fflush_r+0xa>
 801b39a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b39c:	07d0      	lsls	r0, r2, #31
 801b39e:	d404      	bmi.n	801b3aa <_fflush_r+0x32>
 801b3a0:	0599      	lsls	r1, r3, #22
 801b3a2:	d402      	bmi.n	801b3aa <_fflush_r+0x32>
 801b3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b3a6:	f7ff fa06 	bl	801a7b6 <__retarget_lock_acquire_recursive>
 801b3aa:	4628      	mov	r0, r5
 801b3ac:	4621      	mov	r1, r4
 801b3ae:	f7ff ff5f 	bl	801b270 <__sflush_r>
 801b3b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b3b4:	07da      	lsls	r2, r3, #31
 801b3b6:	4605      	mov	r5, r0
 801b3b8:	d4e4      	bmi.n	801b384 <_fflush_r+0xc>
 801b3ba:	89a3      	ldrh	r3, [r4, #12]
 801b3bc:	059b      	lsls	r3, r3, #22
 801b3be:	d4e1      	bmi.n	801b384 <_fflush_r+0xc>
 801b3c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b3c2:	f7ff f9f9 	bl	801a7b8 <__retarget_lock_release_recursive>
 801b3c6:	e7dd      	b.n	801b384 <_fflush_r+0xc>

0801b3c8 <fiprintf>:
 801b3c8:	b40e      	push	{r1, r2, r3}
 801b3ca:	b503      	push	{r0, r1, lr}
 801b3cc:	4601      	mov	r1, r0
 801b3ce:	ab03      	add	r3, sp, #12
 801b3d0:	4805      	ldr	r0, [pc, #20]	@ (801b3e8 <fiprintf+0x20>)
 801b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3d6:	6800      	ldr	r0, [r0, #0]
 801b3d8:	9301      	str	r3, [sp, #4]
 801b3da:	f7ff fca5 	bl	801ad28 <_vfiprintf_r>
 801b3de:	b002      	add	sp, #8
 801b3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3e4:	b003      	add	sp, #12
 801b3e6:	4770      	bx	lr
 801b3e8:	20000118 	.word	0x20000118

0801b3ec <__swbuf_r>:
 801b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ee:	460e      	mov	r6, r1
 801b3f0:	4614      	mov	r4, r2
 801b3f2:	4605      	mov	r5, r0
 801b3f4:	b118      	cbz	r0, 801b3fe <__swbuf_r+0x12>
 801b3f6:	6a03      	ldr	r3, [r0, #32]
 801b3f8:	b90b      	cbnz	r3, 801b3fe <__swbuf_r+0x12>
 801b3fa:	f7ff f811 	bl	801a420 <__sinit>
 801b3fe:	69a3      	ldr	r3, [r4, #24]
 801b400:	60a3      	str	r3, [r4, #8]
 801b402:	89a3      	ldrh	r3, [r4, #12]
 801b404:	071a      	lsls	r2, r3, #28
 801b406:	d501      	bpl.n	801b40c <__swbuf_r+0x20>
 801b408:	6923      	ldr	r3, [r4, #16]
 801b40a:	b943      	cbnz	r3, 801b41e <__swbuf_r+0x32>
 801b40c:	4621      	mov	r1, r4
 801b40e:	4628      	mov	r0, r5
 801b410:	f000 f82a 	bl	801b468 <__swsetup_r>
 801b414:	b118      	cbz	r0, 801b41e <__swbuf_r+0x32>
 801b416:	f04f 37ff 	mov.w	r7, #4294967295
 801b41a:	4638      	mov	r0, r7
 801b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b41e:	6823      	ldr	r3, [r4, #0]
 801b420:	6922      	ldr	r2, [r4, #16]
 801b422:	1a98      	subs	r0, r3, r2
 801b424:	6963      	ldr	r3, [r4, #20]
 801b426:	b2f6      	uxtb	r6, r6
 801b428:	4283      	cmp	r3, r0
 801b42a:	4637      	mov	r7, r6
 801b42c:	dc05      	bgt.n	801b43a <__swbuf_r+0x4e>
 801b42e:	4621      	mov	r1, r4
 801b430:	4628      	mov	r0, r5
 801b432:	f7ff ffa1 	bl	801b378 <_fflush_r>
 801b436:	2800      	cmp	r0, #0
 801b438:	d1ed      	bne.n	801b416 <__swbuf_r+0x2a>
 801b43a:	68a3      	ldr	r3, [r4, #8]
 801b43c:	3b01      	subs	r3, #1
 801b43e:	60a3      	str	r3, [r4, #8]
 801b440:	6823      	ldr	r3, [r4, #0]
 801b442:	1c5a      	adds	r2, r3, #1
 801b444:	6022      	str	r2, [r4, #0]
 801b446:	701e      	strb	r6, [r3, #0]
 801b448:	6962      	ldr	r2, [r4, #20]
 801b44a:	1c43      	adds	r3, r0, #1
 801b44c:	429a      	cmp	r2, r3
 801b44e:	d004      	beq.n	801b45a <__swbuf_r+0x6e>
 801b450:	89a3      	ldrh	r3, [r4, #12]
 801b452:	07db      	lsls	r3, r3, #31
 801b454:	d5e1      	bpl.n	801b41a <__swbuf_r+0x2e>
 801b456:	2e0a      	cmp	r6, #10
 801b458:	d1df      	bne.n	801b41a <__swbuf_r+0x2e>
 801b45a:	4621      	mov	r1, r4
 801b45c:	4628      	mov	r0, r5
 801b45e:	f7ff ff8b 	bl	801b378 <_fflush_r>
 801b462:	2800      	cmp	r0, #0
 801b464:	d0d9      	beq.n	801b41a <__swbuf_r+0x2e>
 801b466:	e7d6      	b.n	801b416 <__swbuf_r+0x2a>

0801b468 <__swsetup_r>:
 801b468:	b538      	push	{r3, r4, r5, lr}
 801b46a:	4b29      	ldr	r3, [pc, #164]	@ (801b510 <__swsetup_r+0xa8>)
 801b46c:	4605      	mov	r5, r0
 801b46e:	6818      	ldr	r0, [r3, #0]
 801b470:	460c      	mov	r4, r1
 801b472:	b118      	cbz	r0, 801b47c <__swsetup_r+0x14>
 801b474:	6a03      	ldr	r3, [r0, #32]
 801b476:	b90b      	cbnz	r3, 801b47c <__swsetup_r+0x14>
 801b478:	f7fe ffd2 	bl	801a420 <__sinit>
 801b47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b480:	0719      	lsls	r1, r3, #28
 801b482:	d422      	bmi.n	801b4ca <__swsetup_r+0x62>
 801b484:	06da      	lsls	r2, r3, #27
 801b486:	d407      	bmi.n	801b498 <__swsetup_r+0x30>
 801b488:	2209      	movs	r2, #9
 801b48a:	602a      	str	r2, [r5, #0]
 801b48c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b490:	81a3      	strh	r3, [r4, #12]
 801b492:	f04f 30ff 	mov.w	r0, #4294967295
 801b496:	e033      	b.n	801b500 <__swsetup_r+0x98>
 801b498:	0758      	lsls	r0, r3, #29
 801b49a:	d512      	bpl.n	801b4c2 <__swsetup_r+0x5a>
 801b49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b49e:	b141      	cbz	r1, 801b4b2 <__swsetup_r+0x4a>
 801b4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b4a4:	4299      	cmp	r1, r3
 801b4a6:	d002      	beq.n	801b4ae <__swsetup_r+0x46>
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	f7ff f9bb 	bl	801a824 <_free_r>
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801b4b2:	89a3      	ldrh	r3, [r4, #12]
 801b4b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b4b8:	81a3      	strh	r3, [r4, #12]
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	6063      	str	r3, [r4, #4]
 801b4be:	6923      	ldr	r3, [r4, #16]
 801b4c0:	6023      	str	r3, [r4, #0]
 801b4c2:	89a3      	ldrh	r3, [r4, #12]
 801b4c4:	f043 0308 	orr.w	r3, r3, #8
 801b4c8:	81a3      	strh	r3, [r4, #12]
 801b4ca:	6923      	ldr	r3, [r4, #16]
 801b4cc:	b94b      	cbnz	r3, 801b4e2 <__swsetup_r+0x7a>
 801b4ce:	89a3      	ldrh	r3, [r4, #12]
 801b4d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b4d8:	d003      	beq.n	801b4e2 <__swsetup_r+0x7a>
 801b4da:	4621      	mov	r1, r4
 801b4dc:	4628      	mov	r0, r5
 801b4de:	f000 f884 	bl	801b5ea <__smakebuf_r>
 801b4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4e6:	f013 0201 	ands.w	r2, r3, #1
 801b4ea:	d00a      	beq.n	801b502 <__swsetup_r+0x9a>
 801b4ec:	2200      	movs	r2, #0
 801b4ee:	60a2      	str	r2, [r4, #8]
 801b4f0:	6962      	ldr	r2, [r4, #20]
 801b4f2:	4252      	negs	r2, r2
 801b4f4:	61a2      	str	r2, [r4, #24]
 801b4f6:	6922      	ldr	r2, [r4, #16]
 801b4f8:	b942      	cbnz	r2, 801b50c <__swsetup_r+0xa4>
 801b4fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b4fe:	d1c5      	bne.n	801b48c <__swsetup_r+0x24>
 801b500:	bd38      	pop	{r3, r4, r5, pc}
 801b502:	0799      	lsls	r1, r3, #30
 801b504:	bf58      	it	pl
 801b506:	6962      	ldrpl	r2, [r4, #20]
 801b508:	60a2      	str	r2, [r4, #8]
 801b50a:	e7f4      	b.n	801b4f6 <__swsetup_r+0x8e>
 801b50c:	2000      	movs	r0, #0
 801b50e:	e7f7      	b.n	801b500 <__swsetup_r+0x98>
 801b510:	20000118 	.word	0x20000118

0801b514 <_sbrk_r>:
 801b514:	b538      	push	{r3, r4, r5, lr}
 801b516:	4d06      	ldr	r5, [pc, #24]	@ (801b530 <_sbrk_r+0x1c>)
 801b518:	2300      	movs	r3, #0
 801b51a:	4604      	mov	r4, r0
 801b51c:	4608      	mov	r0, r1
 801b51e:	602b      	str	r3, [r5, #0]
 801b520:	f7e6 fe2a 	bl	8002178 <_sbrk>
 801b524:	1c43      	adds	r3, r0, #1
 801b526:	d102      	bne.n	801b52e <_sbrk_r+0x1a>
 801b528:	682b      	ldr	r3, [r5, #0]
 801b52a:	b103      	cbz	r3, 801b52e <_sbrk_r+0x1a>
 801b52c:	6023      	str	r3, [r4, #0]
 801b52e:	bd38      	pop	{r3, r4, r5, pc}
 801b530:	2000e5fc 	.word	0x2000e5fc

0801b534 <abort>:
 801b534:	b508      	push	{r3, lr}
 801b536:	2006      	movs	r0, #6
 801b538:	f000 f8bc 	bl	801b6b4 <raise>
 801b53c:	2001      	movs	r0, #1
 801b53e:	f7e6 fda3 	bl	8002088 <_exit>

0801b542 <_realloc_r>:
 801b542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b546:	4607      	mov	r7, r0
 801b548:	4614      	mov	r4, r2
 801b54a:	460d      	mov	r5, r1
 801b54c:	b921      	cbnz	r1, 801b558 <_realloc_r+0x16>
 801b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b552:	4611      	mov	r1, r2
 801b554:	f7ff b9da 	b.w	801a90c <_malloc_r>
 801b558:	b92a      	cbnz	r2, 801b566 <_realloc_r+0x24>
 801b55a:	f7ff f963 	bl	801a824 <_free_r>
 801b55e:	4625      	mov	r5, r4
 801b560:	4628      	mov	r0, r5
 801b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b566:	f000 f8e3 	bl	801b730 <_malloc_usable_size_r>
 801b56a:	4284      	cmp	r4, r0
 801b56c:	4606      	mov	r6, r0
 801b56e:	d802      	bhi.n	801b576 <_realloc_r+0x34>
 801b570:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b574:	d8f4      	bhi.n	801b560 <_realloc_r+0x1e>
 801b576:	4621      	mov	r1, r4
 801b578:	4638      	mov	r0, r7
 801b57a:	f7ff f9c7 	bl	801a90c <_malloc_r>
 801b57e:	4680      	mov	r8, r0
 801b580:	b908      	cbnz	r0, 801b586 <_realloc_r+0x44>
 801b582:	4645      	mov	r5, r8
 801b584:	e7ec      	b.n	801b560 <_realloc_r+0x1e>
 801b586:	42b4      	cmp	r4, r6
 801b588:	4622      	mov	r2, r4
 801b58a:	4629      	mov	r1, r5
 801b58c:	bf28      	it	cs
 801b58e:	4632      	movcs	r2, r6
 801b590:	f7ff f91b 	bl	801a7ca <memcpy>
 801b594:	4629      	mov	r1, r5
 801b596:	4638      	mov	r0, r7
 801b598:	f7ff f944 	bl	801a824 <_free_r>
 801b59c:	e7f1      	b.n	801b582 <_realloc_r+0x40>

0801b59e <__swhatbuf_r>:
 801b59e:	b570      	push	{r4, r5, r6, lr}
 801b5a0:	460c      	mov	r4, r1
 801b5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5a6:	2900      	cmp	r1, #0
 801b5a8:	b096      	sub	sp, #88	@ 0x58
 801b5aa:	4615      	mov	r5, r2
 801b5ac:	461e      	mov	r6, r3
 801b5ae:	da0d      	bge.n	801b5cc <__swhatbuf_r+0x2e>
 801b5b0:	89a3      	ldrh	r3, [r4, #12]
 801b5b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b5b6:	f04f 0100 	mov.w	r1, #0
 801b5ba:	bf14      	ite	ne
 801b5bc:	2340      	movne	r3, #64	@ 0x40
 801b5be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b5c2:	2000      	movs	r0, #0
 801b5c4:	6031      	str	r1, [r6, #0]
 801b5c6:	602b      	str	r3, [r5, #0]
 801b5c8:	b016      	add	sp, #88	@ 0x58
 801b5ca:	bd70      	pop	{r4, r5, r6, pc}
 801b5cc:	466a      	mov	r2, sp
 801b5ce:	f000 f879 	bl	801b6c4 <_fstat_r>
 801b5d2:	2800      	cmp	r0, #0
 801b5d4:	dbec      	blt.n	801b5b0 <__swhatbuf_r+0x12>
 801b5d6:	9901      	ldr	r1, [sp, #4]
 801b5d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b5dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b5e0:	4259      	negs	r1, r3
 801b5e2:	4159      	adcs	r1, r3
 801b5e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b5e8:	e7eb      	b.n	801b5c2 <__swhatbuf_r+0x24>

0801b5ea <__smakebuf_r>:
 801b5ea:	898b      	ldrh	r3, [r1, #12]
 801b5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b5ee:	079d      	lsls	r5, r3, #30
 801b5f0:	4606      	mov	r6, r0
 801b5f2:	460c      	mov	r4, r1
 801b5f4:	d507      	bpl.n	801b606 <__smakebuf_r+0x1c>
 801b5f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b5fa:	6023      	str	r3, [r4, #0]
 801b5fc:	6123      	str	r3, [r4, #16]
 801b5fe:	2301      	movs	r3, #1
 801b600:	6163      	str	r3, [r4, #20]
 801b602:	b003      	add	sp, #12
 801b604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b606:	ab01      	add	r3, sp, #4
 801b608:	466a      	mov	r2, sp
 801b60a:	f7ff ffc8 	bl	801b59e <__swhatbuf_r>
 801b60e:	9f00      	ldr	r7, [sp, #0]
 801b610:	4605      	mov	r5, r0
 801b612:	4639      	mov	r1, r7
 801b614:	4630      	mov	r0, r6
 801b616:	f7ff f979 	bl	801a90c <_malloc_r>
 801b61a:	b948      	cbnz	r0, 801b630 <__smakebuf_r+0x46>
 801b61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b620:	059a      	lsls	r2, r3, #22
 801b622:	d4ee      	bmi.n	801b602 <__smakebuf_r+0x18>
 801b624:	f023 0303 	bic.w	r3, r3, #3
 801b628:	f043 0302 	orr.w	r3, r3, #2
 801b62c:	81a3      	strh	r3, [r4, #12]
 801b62e:	e7e2      	b.n	801b5f6 <__smakebuf_r+0xc>
 801b630:	89a3      	ldrh	r3, [r4, #12]
 801b632:	6020      	str	r0, [r4, #0]
 801b634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b638:	81a3      	strh	r3, [r4, #12]
 801b63a:	9b01      	ldr	r3, [sp, #4]
 801b63c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b640:	b15b      	cbz	r3, 801b65a <__smakebuf_r+0x70>
 801b642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b646:	4630      	mov	r0, r6
 801b648:	f000 f84e 	bl	801b6e8 <_isatty_r>
 801b64c:	b128      	cbz	r0, 801b65a <__smakebuf_r+0x70>
 801b64e:	89a3      	ldrh	r3, [r4, #12]
 801b650:	f023 0303 	bic.w	r3, r3, #3
 801b654:	f043 0301 	orr.w	r3, r3, #1
 801b658:	81a3      	strh	r3, [r4, #12]
 801b65a:	89a3      	ldrh	r3, [r4, #12]
 801b65c:	431d      	orrs	r5, r3
 801b65e:	81a5      	strh	r5, [r4, #12]
 801b660:	e7cf      	b.n	801b602 <__smakebuf_r+0x18>

0801b662 <_raise_r>:
 801b662:	291f      	cmp	r1, #31
 801b664:	b538      	push	{r3, r4, r5, lr}
 801b666:	4605      	mov	r5, r0
 801b668:	460c      	mov	r4, r1
 801b66a:	d904      	bls.n	801b676 <_raise_r+0x14>
 801b66c:	2316      	movs	r3, #22
 801b66e:	6003      	str	r3, [r0, #0]
 801b670:	f04f 30ff 	mov.w	r0, #4294967295
 801b674:	bd38      	pop	{r3, r4, r5, pc}
 801b676:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b678:	b112      	cbz	r2, 801b680 <_raise_r+0x1e>
 801b67a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b67e:	b94b      	cbnz	r3, 801b694 <_raise_r+0x32>
 801b680:	4628      	mov	r0, r5
 801b682:	f000 f853 	bl	801b72c <_getpid_r>
 801b686:	4622      	mov	r2, r4
 801b688:	4601      	mov	r1, r0
 801b68a:	4628      	mov	r0, r5
 801b68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b690:	f000 b83a 	b.w	801b708 <_kill_r>
 801b694:	2b01      	cmp	r3, #1
 801b696:	d00a      	beq.n	801b6ae <_raise_r+0x4c>
 801b698:	1c59      	adds	r1, r3, #1
 801b69a:	d103      	bne.n	801b6a4 <_raise_r+0x42>
 801b69c:	2316      	movs	r3, #22
 801b69e:	6003      	str	r3, [r0, #0]
 801b6a0:	2001      	movs	r0, #1
 801b6a2:	e7e7      	b.n	801b674 <_raise_r+0x12>
 801b6a4:	2100      	movs	r1, #0
 801b6a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	4798      	blx	r3
 801b6ae:	2000      	movs	r0, #0
 801b6b0:	e7e0      	b.n	801b674 <_raise_r+0x12>
	...

0801b6b4 <raise>:
 801b6b4:	4b02      	ldr	r3, [pc, #8]	@ (801b6c0 <raise+0xc>)
 801b6b6:	4601      	mov	r1, r0
 801b6b8:	6818      	ldr	r0, [r3, #0]
 801b6ba:	f7ff bfd2 	b.w	801b662 <_raise_r>
 801b6be:	bf00      	nop
 801b6c0:	20000118 	.word	0x20000118

0801b6c4 <_fstat_r>:
 801b6c4:	b538      	push	{r3, r4, r5, lr}
 801b6c6:	4d07      	ldr	r5, [pc, #28]	@ (801b6e4 <_fstat_r+0x20>)
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	4608      	mov	r0, r1
 801b6ce:	4611      	mov	r1, r2
 801b6d0:	602b      	str	r3, [r5, #0]
 801b6d2:	f7e6 fd29 	bl	8002128 <_fstat>
 801b6d6:	1c43      	adds	r3, r0, #1
 801b6d8:	d102      	bne.n	801b6e0 <_fstat_r+0x1c>
 801b6da:	682b      	ldr	r3, [r5, #0]
 801b6dc:	b103      	cbz	r3, 801b6e0 <_fstat_r+0x1c>
 801b6de:	6023      	str	r3, [r4, #0]
 801b6e0:	bd38      	pop	{r3, r4, r5, pc}
 801b6e2:	bf00      	nop
 801b6e4:	2000e5fc 	.word	0x2000e5fc

0801b6e8 <_isatty_r>:
 801b6e8:	b538      	push	{r3, r4, r5, lr}
 801b6ea:	4d06      	ldr	r5, [pc, #24]	@ (801b704 <_isatty_r+0x1c>)
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	4604      	mov	r4, r0
 801b6f0:	4608      	mov	r0, r1
 801b6f2:	602b      	str	r3, [r5, #0]
 801b6f4:	f7e6 fd28 	bl	8002148 <_isatty>
 801b6f8:	1c43      	adds	r3, r0, #1
 801b6fa:	d102      	bne.n	801b702 <_isatty_r+0x1a>
 801b6fc:	682b      	ldr	r3, [r5, #0]
 801b6fe:	b103      	cbz	r3, 801b702 <_isatty_r+0x1a>
 801b700:	6023      	str	r3, [r4, #0]
 801b702:	bd38      	pop	{r3, r4, r5, pc}
 801b704:	2000e5fc 	.word	0x2000e5fc

0801b708 <_kill_r>:
 801b708:	b538      	push	{r3, r4, r5, lr}
 801b70a:	4d07      	ldr	r5, [pc, #28]	@ (801b728 <_kill_r+0x20>)
 801b70c:	2300      	movs	r3, #0
 801b70e:	4604      	mov	r4, r0
 801b710:	4608      	mov	r0, r1
 801b712:	4611      	mov	r1, r2
 801b714:	602b      	str	r3, [r5, #0]
 801b716:	f7e6 fca5 	bl	8002064 <_kill>
 801b71a:	1c43      	adds	r3, r0, #1
 801b71c:	d102      	bne.n	801b724 <_kill_r+0x1c>
 801b71e:	682b      	ldr	r3, [r5, #0]
 801b720:	b103      	cbz	r3, 801b724 <_kill_r+0x1c>
 801b722:	6023      	str	r3, [r4, #0]
 801b724:	bd38      	pop	{r3, r4, r5, pc}
 801b726:	bf00      	nop
 801b728:	2000e5fc 	.word	0x2000e5fc

0801b72c <_getpid_r>:
 801b72c:	f7e6 bc92 	b.w	8002054 <_getpid>

0801b730 <_malloc_usable_size_r>:
 801b730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b734:	1f18      	subs	r0, r3, #4
 801b736:	2b00      	cmp	r3, #0
 801b738:	bfbc      	itt	lt
 801b73a:	580b      	ldrlt	r3, [r1, r0]
 801b73c:	18c0      	addlt	r0, r0, r3
 801b73e:	4770      	bx	lr

0801b740 <_init>:
 801b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b742:	bf00      	nop
 801b744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b746:	bc08      	pop	{r3}
 801b748:	469e      	mov	lr, r3
 801b74a:	4770      	bx	lr

0801b74c <_fini>:
 801b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b74e:	bf00      	nop
 801b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b752:	bc08      	pop	{r3}
 801b754:	469e      	mov	lr, r3
 801b756:	4770      	bx	lr


dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e660  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048b8  0801e7f0  0801e7f0  0001f7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080230a8  080230a8  00025168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080230a8  080230a8  000240a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080230b0  080230b0  00025168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080230b0  080230b0  000240b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080230b4  080230b4  000240b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  080230b8  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00025168  2**0
                  CONTENTS
 10 .bss          0000e6e0  20000168  20000168  00025168  2**2
                  ALLOC
 11 .eth_desc     00000018  2000e848  2000e848  00025168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e860  2000e860  00025168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e860  2000e860  00025168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003cfca  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a345  00000000  00000000  00062162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c70  00000000  00000000  0006c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000022c2  00000000  00000000  0006f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037991  00000000  00000000  000713da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004784e  00000000  00000000  000a8d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f73d1  00000000  00000000  000f05b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e798a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c168  00000000  00000000  001e79d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001f3b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e7d8 	.word	0x0801e7d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801e7d8 	.word	0x0801e7d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    
    // 初始化舵机相关寄存器
    holding_regs[REG_ROTATION_TRIGGER] = 3;               // 40023 转动触发：3=上电初始化值
 80005b2:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <app_business_init+0xcc>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    // 初始化当前角度寄存器为默认值500 (40017-40022)
    holding_regs[REG_CURRENT_ANGLE1] = 500;
 80005b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <app_business_init+0xcc>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_regs[REG_CURRENT_ANGLE2] = 500;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <app_business_init+0xcc>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    holding_regs[REG_CURRENT_ANGLE3] = 500;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <app_business_init+0xcc>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    holding_regs[REG_CURRENT_ANGLE4] = 500;
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <app_business_init+0xcc>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    holding_regs[REG_CURRENT_ANGLE5] = 500;
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <app_business_init+0xcc>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    holding_regs[REG_CURRENT_ANGLE6] = 500;
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <app_business_init+0xcc>)
 80005e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 0;                   // 40029 泵1状态：直接显示错误码
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <app_business_init+0xcc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	875a      	strh	r2, [r3, #58]	@ 0x3a
    holding_regs[REG_PUMP2_STATUS] = 0;                   // 40034 泵2状态：直接显示错误码
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <app_business_init+0xcc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    
    // 初始化业务状态变量
    last_rotation_trigger = 3;    // 对应寄存器的初始值
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <app_business_init+0xd0>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <app_business_init+0xd4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <app_business_init+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <app_business_init+0xdc>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 800060e:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <app_business_init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <app_business_init+0xe4>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <app_business_init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <app_business_init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <app_business_init+0xf0>)
 8000628:	2200      	movs	r2, #0
 800062a:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <app_business_init+0xf4>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <app_business_init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <app_business_init+0xfc>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
    
    // 初始化舵机状态变量
    servo_moving = 0;
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <app_business_init+0x100>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
    servo_move_start_time = 0;
 8000644:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <app_business_init+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e008      	b.n	8000662 <app_business_init+0xb6>
        servo_current_positions[i] = 500;  // 默认位置500
 8000650:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <app_business_init+0x108>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b05      	cmp	r3, #5
 8000666:	ddf3      	ble.n	8000650 <app_business_init+0xa4>
    }
    
    cdc_debug_print("Business logic initialized");
 8000668:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <app_business_init+0x10c>)
 800066a:	f000 f833 	bl	80006d4 <cdc_debug_print>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000058c 	.word	0x2000058c
 800067c:	20000184 	.word	0x20000184
 8000680:	20000188 	.word	0x20000188
 8000684:	2000018c 	.word	0x2000018c
 8000688:	20000190 	.word	0x20000190
 800068c:	20000194 	.word	0x20000194
 8000690:	20000198 	.word	0x20000198
 8000694:	2000021c 	.word	0x2000021c
 8000698:	2000021d 	.word	0x2000021d
 800069c:	2000021e 	.word	0x2000021e
 80006a0:	20000220 	.word	0x20000220
 80006a4:	20000224 	.word	0x20000224
 80006a8:	20000228 	.word	0x20000228
 80006ac:	2000022c 	.word	0x2000022c
 80006b0:	20000230 	.word	0x20000230
 80006b4:	20000234 	.word	0x20000234
 80006b8:	0801e7f0 	.word	0x0801e7f0

080006bc <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 80006c0:	f000 f828 	bl	8000714 <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 80006c4:	f000 f906 	bl	80008d4 <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006c8:	f000 f926 	bl	8000918 <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006cc:	f000 fa5e 	bl	8000b8c <update_sensor_data>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
static void cdc_debug_print(const char* message) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <cdc_debug_print+0x38>)
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <cdc_debug_print+0x3c>)
 80006e4:	f01c ff1c 	bl	801d520 <sniprintf>
 80006e8:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dd08      	ble.n	8000702 <cdc_debug_print+0x2e>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80006f4:	d805      	bhi.n	8000702 <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);  // 暂时启用调试输出
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <cdc_debug_print+0x3c>)
 80006fe:	f01c f919 	bl	801c934 <CDC_Transmit_FS>
    }
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	0801e80c 	.word	0x0801e80c
 8000710:	2000019c 	.word	0x2000019c

08000714 <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	b0ad      	sub	sp, #180	@ 0xb4
 8000718:	af06      	add	r7, sp, #24
    // 状态机逻辑：
    // 1 = 正在执行任务（忙）
    // 2 = 任务完成，可重新写入1开始新任务
    // 3 = 上电初始化值，可接受写入1
    // 当写入1时执行移动，执行期间保持状态1，完成后置为状态2
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800071a:	4b63      	ldr	r3, [pc, #396]	@ (80008a8 <process_servo_commands+0x194>)
 800071c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800071e:	2b01      	cmp	r3, #1
 8000720:	f040 80ac 	bne.w	800087c <process_servo_commands+0x168>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000724:	4b61      	ldr	r3, [pc, #388]	@ (80008ac <process_servo_commands+0x198>)
 8000726:	681b      	ldr	r3, [r3, #0]
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 8000728:	2b02      	cmp	r3, #2
 800072a:	d004      	beq.n	8000736 <process_servo_commands+0x22>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 800072c:	4b5f      	ldr	r3, [pc, #380]	@ (80008ac <process_servo_commands+0x198>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	f040 80a3 	bne.w	800087c <process_servo_commands+0x168>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000736:	4b5e      	ldr	r3, [pc, #376]	@ (80008b0 <process_servo_commands+0x19c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 809a 	bne.w	8000874 <process_servo_commands+0x160>
            cdc_debug_print("Servo rotation triggered, status 1 (busy)");
 8000740:	485c      	ldr	r0, [pc, #368]	@ (80008b4 <process_servo_commands+0x1a0>)
 8000742:	f7ff ffc7 	bl	80006d4 <cdc_debug_print>
            
            // 获取转动时间 (40010) - 现在只用一个寄存器
            uint16_t rotation_time = holding_regs[REG_ROTATION_TIME];
 8000746:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <process_servo_commands+0x194>)
 8000748:	8a9b      	ldrh	r3, [r3, #20]
 800074a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            
            // 验证转动时间范围 (1-65535ms)
            if (rotation_time == 0) {
 800074e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000752:	2b00      	cmp	r3, #0
 8000754:	d106      	bne.n	8000764 <process_servo_commands+0x50>
                rotation_time = 1000;  // 默认1秒
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
                cdc_debug_print("Using default rotation time: 1000ms");
 800075e:	4856      	ldr	r0, [pc, #344]	@ (80008b8 <process_servo_commands+0x1a4>)
 8000760:	f7ff ffb8 	bl	80006d4 <cdc_debug_print>
            }
            
            // 获取目标角度 (40011-40016，每个角度占用1个寄存器)
            uint16_t target_angles[6];
            target_angles[0] = holding_regs[REG_TARGET_ANGLE1];
 8000764:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <process_servo_commands+0x194>)
 8000766:	8adb      	ldrh	r3, [r3, #22]
 8000768:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
            target_angles[1] = holding_regs[REG_TARGET_ANGLE2];
 800076c:	4b4e      	ldr	r3, [pc, #312]	@ (80008a8 <process_servo_commands+0x194>)
 800076e:	8b1b      	ldrh	r3, [r3, #24]
 8000770:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            target_angles[2] = holding_regs[REG_TARGET_ANGLE3];
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <process_servo_commands+0x194>)
 8000776:	8b5b      	ldrh	r3, [r3, #26]
 8000778:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
            target_angles[3] = holding_regs[REG_TARGET_ANGLE4];
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <process_servo_commands+0x194>)
 800077e:	8b9b      	ldrh	r3, [r3, #28]
 8000780:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            target_angles[4] = holding_regs[REG_TARGET_ANGLE5];
 8000784:	4b48      	ldr	r3, [pc, #288]	@ (80008a8 <process_servo_commands+0x194>)
 8000786:	8bdb      	ldrh	r3, [r3, #30]
 8000788:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
            target_angles[5] = holding_regs[REG_TARGET_ANGLE6];
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <process_servo_commands+0x194>)
 800078e:	8c1b      	ldrh	r3, [r3, #32]
 8000790:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            
            // 验证角度范围 (0-1000)
            for (int i = 0; i < 6; i++) {
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800079a:	e02c      	b.n	80007f6 <process_servo_commands+0xe2>
                if (target_angles[i] > 1000) {
 800079c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	3398      	adds	r3, #152	@ 0x98
 80007a4:	443b      	add	r3, r7
 80007a6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ae:	d91d      	bls.n	80007ec <process_servo_commands+0xd8>
                    char warning_msg[60];
                    snprintf(warning_msg, sizeof(warning_msg), "Servo%d angle limited to 1000 (was %d)", i+1, target_angles[i]);
 80007b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	3398      	adds	r3, #152	@ 0x98
 80007be:	443b      	add	r3, r7
 80007c0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007c4:	1d38      	adds	r0, r7, #4
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	4a3c      	ldr	r2, [pc, #240]	@ (80008bc <process_servo_commands+0x1a8>)
 80007cc:	213c      	movs	r1, #60	@ 0x3c
 80007ce:	f01c fea7 	bl	801d520 <sniprintf>
                    cdc_debug_print(warning_msg);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff7d 	bl	80006d4 <cdc_debug_print>
                    target_angles[i] = 1000;
 80007da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	3398      	adds	r3, #152	@ 0x98
 80007e2:	443b      	add	r3, r7
 80007e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e8:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (int i = 0; i < 6; i++) {
 80007ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007f0:	3301      	adds	r3, #1
 80007f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	ddce      	ble.n	800079c <process_servo_commands+0x88>
            }
            
            // 调试信息：显示所有目标角度
            char angles_msg[128];
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
                    target_angles[0], target_angles[1], target_angles[2], 
 80007fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000802:	469c      	mov	ip, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 8000804:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000808:	461a      	mov	r2, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 800080a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800080e:	4619      	mov	r1, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000810:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000814:	461c      	mov	r4, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000816:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800081a:	461d      	mov	r5, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 800081c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000820:	461e      	mov	r6, r3
 8000822:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	9305      	str	r3, [sp, #20]
 800082a:	9604      	str	r6, [sp, #16]
 800082c:	9503      	str	r5, [sp, #12]
 800082e:	9402      	str	r4, [sp, #8]
 8000830:	9101      	str	r1, [sp, #4]
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	4663      	mov	r3, ip
 8000836:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <process_servo_commands+0x1ac>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	f01c fe71 	bl	801d520 <sniprintf>
            cdc_debug_print(angles_msg);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff47 	bl	80006d4 <cdc_debug_print>
            
            // 发送舵机控制命令到各个舵机 (ID 1-6)
            servo_move_all(target_angles, rotation_time);
 8000846:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800084a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fb3d 	bl	8000ed0 <servo_move_all>
            
            // 设置移动状态
            servo_moving = 1;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <process_servo_commands+0x19c>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
            servo_move_start_time = HAL_GetTick();
 800085c:	f003 fea0 	bl	80045a0 <HAL_GetTick>
 8000860:	4603      	mov	r3, r0
 8000862:	4a18      	ldr	r2, [pc, #96]	@ (80008c4 <process_servo_commands+0x1b0>)
 8000864:	6013      	str	r3, [r2, #0]
            
            // 状态保持为1表示正在执行任务（忙）
            // holding_regs[REG_ROTATION_TRIGGER] = 1;  // 状态已经是1，不需要改变
            last_rotation_trigger = 1;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <process_servo_commands+0x198>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo rotation commands sent, status remains 1 (busy)");
 800086c:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <process_servo_commands+0x1b4>)
 800086e:	f7ff ff31 	bl	80006d4 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000872:	e00e      	b.n	8000892 <process_servo_commands+0x17e>
        } else {
            cdc_debug_print("Servos are busy, ignoring rotation command");
 8000874:	4815      	ldr	r0, [pc, #84]	@ (80008cc <process_servo_commands+0x1b8>)
 8000876:	f7ff ff2d 	bl	80006d4 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800087a:	e00a      	b.n	8000892 <process_servo_commands+0x17e>
        }
    } else if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger == 1) {
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <process_servo_commands+0x194>)
 800087e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000880:	2b01      	cmp	r3, #1
 8000882:	d106      	bne.n	8000892 <process_servo_commands+0x17e>
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <process_servo_commands+0x198>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d102      	bne.n	8000892 <process_servo_commands+0x17e>
        // 如果连续写入1，给出警告（系统正忙）
        cdc_debug_print("Warning: Servo rotation command ignored - system busy (status 1)");
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <process_servo_commands+0x1bc>)
 800088e:	f7ff ff21 	bl	80006d4 <cdc_debug_print>
    }
    
    // 更新舵机状态（检查是否完成移动）
    servo_update_status();
 8000892:	f000 fbe9 	bl	8001068 <servo_update_status>
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 8000896:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <process_servo_commands+0x194>)
 8000898:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800089a:	461a      	mov	r2, r3
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <process_servo_commands+0x198>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	379c      	adds	r7, #156	@ 0x9c
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	2000058c 	.word	0x2000058c
 80008ac:	20000184 	.word	0x20000184
 80008b0:	2000022c 	.word	0x2000022c
 80008b4:	0801e81c 	.word	0x0801e81c
 80008b8:	0801e848 	.word	0x0801e848
 80008bc:	0801e86c 	.word	0x0801e86c
 80008c0:	0801e894 	.word	0x0801e894
 80008c4:	20000230 	.word	0x20000230
 80008c8:	0801e8c4 	.word	0x0801e8c4
 80008cc:	0801e8fc 	.word	0x0801e8fc
 80008d0:	0801e928 	.word	0x0801e928

080008d4 <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <process_weight_commands+0x34>)
 80008da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10c      	bne.n	80008fa <process_weight_commands+0x26>
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <process_weight_commands+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d008      	beq.n	80008fa <process_weight_commands+0x26>
        cdc_debug_print("Weight measurement started");
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <process_weight_commands+0x3c>)
 80008ea:	f7ff fef3 	bl	80006d4 <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <process_weight_commands+0x34>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	865a      	strh	r2, [r3, #50]	@ 0x32
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 80008f4:	4807      	ldr	r0, [pc, #28]	@ (8000914 <process_weight_commands+0x40>)
 80008f6:	f7ff feed 	bl	80006d4 <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 80008fa:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <process_weight_commands+0x34>)
 80008fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008fe:	461a      	mov	r2, r3
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <process_weight_commands+0x38>)
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000058c 	.word	0x2000058c
 800090c:	20000188 	.word	0x20000188
 8000910:	0801e96c 	.word	0x0801e96c
 8000914:	0801e988 	.word	0x0801e988

08000918 <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	@ 0x38
 800091c:	af00      	add	r7, sp, #0
    // 处理泵1命令
    // 检查泵1初始化触发 (40026) - 只有当状态位(40029)为0时才允许
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800091e:	4b80      	ldr	r3, [pc, #512]	@ (8000b20 <process_pump_commands+0x208>)
 8000920:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000922:	2b01      	cmp	r3, #1
 8000924:	d11a      	bne.n	800095c <process_pump_commands+0x44>
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 8000926:	4b7e      	ldr	r3, [pc, #504]	@ (8000b20 <process_pump_commands+0x208>)
 8000928:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800092a:	2b00      	cmp	r3, #0
 800092c:	d116      	bne.n	800095c <process_pump_commands+0x44>
        cdc_debug_print("Pump1 initialization triggered");
 800092e:	487d      	ldr	r0, [pc, #500]	@ (8000b24 <process_pump_commands+0x20c>)
 8000930:	f7ff fed0 	bl	80006d4 <cdc_debug_print>
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 8000934:	2001      	movs	r0, #1
 8000936:	f000 f96f 	bl	8000c18 <pump_init_device>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <process_pump_commands+0x30>
            cdc_debug_print("Pump1 init command sent successfully");
 8000940:	4879      	ldr	r0, [pc, #484]	@ (8000b28 <process_pump_commands+0x210>)
 8000942:	f7ff fec7 	bl	80006d4 <cdc_debug_print>
 8000946:	e002      	b.n	800094e <process_pump_commands+0x36>
            // 位置和状态将通过查询来更新，不在这里直接设置
        } else {
            cdc_debug_print("Pump1 init command failed");
 8000948:	4878      	ldr	r0, [pc, #480]	@ (8000b2c <process_pump_commands+0x214>)
 800094a:	f7ff fec3 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 800094e:	4b74      	ldr	r3, [pc, #464]	@ (8000b20 <process_pump_commands+0x208>)
 8000950:	2202      	movs	r2, #2
 8000952:	869a      	strh	r2, [r3, #52]	@ 0x34
        last_pump1_init_trigger = 2;
 8000954:	4b76      	ldr	r3, [pc, #472]	@ (8000b30 <process_pump_commands+0x218>)
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e00d      	b.n	8000978 <process_pump_commands+0x60>
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800095c:	4b70      	ldr	r3, [pc, #448]	@ (8000b20 <process_pump_commands+0x208>)
 800095e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000960:	2b01      	cmp	r3, #1
 8000962:	d109      	bne.n	8000978 <process_pump_commands+0x60>
               holding_regs[REG_PUMP1_STATUS] != 0) {
 8000964:	4b6e      	ldr	r3, [pc, #440]	@ (8000b20 <process_pump_commands+0x208>)
 8000966:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000968:	2b00      	cmp	r3, #0
 800096a:	d005      	beq.n	8000978 <process_pump_commands+0x60>
        cdc_debug_print("Pump1 init rejected: status not 0");
 800096c:	4871      	ldr	r0, [pc, #452]	@ (8000b34 <process_pump_commands+0x21c>)
 800096e:	f7ff feb1 	bl	80006d4 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000972:	4b6b      	ldr	r3, [pc, #428]	@ (8000b20 <process_pump_commands+0x208>)
 8000974:	2202      	movs	r2, #2
 8000976:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
    
    // 检查泵1控制触发 (40028) - 只有当状态位(40029)为0时才允许
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000978:	4b69      	ldr	r3, [pc, #420]	@ (8000b20 <process_pump_commands+0x208>)
 800097a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800097c:	2b01      	cmp	r3, #1
 800097e:	d137      	bne.n	80009f0 <process_pump_commands+0xd8>
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 8000980:	4b67      	ldr	r3, [pc, #412]	@ (8000b20 <process_pump_commands+0x208>)
 8000982:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000984:	2b00      	cmp	r3, #0
 8000986:	d133      	bne.n	80009f0 <process_pump_commands+0xd8>
        cdc_debug_print("Pump1 control triggered");
 8000988:	486b      	ldr	r0, [pc, #428]	@ (8000b38 <process_pump_commands+0x220>)
 800098a:	f7ff fea3 	bl	80006d4 <cdc_debug_print>
        
        // 获取目标位置 (40027)
        uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 800098e:	4b64      	ldr	r3, [pc, #400]	@ (8000b20 <process_pump_commands+0x208>)
 8000990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000992:	86fb      	strh	r3, [r7, #54]	@ 0x36
        
        // 验证目标位置范围 (0-6000)
        if (target_position <= 6000) {
 8000994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000996:	f241 7270 	movw	r2, #6000	@ 0x1770
 800099a:	4293      	cmp	r3, r2
 800099c:	d81e      	bhi.n	80009dc <process_pump_commands+0xc4>
            // 发送泵1移动命令
            if (pump_move_absolute_device(1, target_position) == 0) {
 800099e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009a0:	4619      	mov	r1, r3
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 f946 	bl	8000c34 <pump_move_absolute_device>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d112      	bne.n	80009d4 <process_pump_commands+0xbc>
                pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80009ae:	f003 fdf7 	bl	80045a0 <HAL_GetTick>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a61      	ldr	r2, [pc, #388]	@ (8000b3c <process_pump_commands+0x224>)
 80009b6:	6013      	str	r3, [r2, #0]
                // 状态将通过查询错误码来更新，不在这里直接设置
                cdc_debug_print("Pump1 move command sent successfully");
 80009b8:	4861      	ldr	r0, [pc, #388]	@ (8000b40 <process_pump_commands+0x228>)
 80009ba:	f7ff fe8b 	bl	80006d4 <cdc_debug_print>
                
                // 调试信息：显示目标位置
                char pos_msg[50];
                snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 80009be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009c0:	4638      	mov	r0, r7
 80009c2:	4a60      	ldr	r2, [pc, #384]	@ (8000b44 <process_pump_commands+0x22c>)
 80009c4:	2132      	movs	r1, #50	@ 0x32
 80009c6:	f01c fdab 	bl	801d520 <sniprintf>
                cdc_debug_print(pos_msg);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe81 	bl	80006d4 <cdc_debug_print>
 80009d2:	e006      	b.n	80009e2 <process_pump_commands+0xca>
            } else {
                cdc_debug_print("Pump1 move command failed");
 80009d4:	485c      	ldr	r0, [pc, #368]	@ (8000b48 <process_pump_commands+0x230>)
 80009d6:	f7ff fe7d 	bl	80006d4 <cdc_debug_print>
 80009da:	e002      	b.n	80009e2 <process_pump_commands+0xca>
            }
        } else {
            cdc_debug_print("Pump1 target position out of range (0-6000)");
 80009dc:	485b      	ldr	r0, [pc, #364]	@ (8000b4c <process_pump_commands+0x234>)
 80009de:	f7ff fe79 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b20 <process_pump_commands+0x208>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	871a      	strh	r2, [r3, #56]	@ 0x38
        last_pump1_control_trigger = 2;
 80009e8:	4b59      	ldr	r3, [pc, #356]	@ (8000b50 <process_pump_commands+0x238>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 80009ee:	e00d      	b.n	8000a0c <process_pump_commands+0xf4>
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b20 <process_pump_commands+0x208>)
 80009f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d109      	bne.n	8000a0c <process_pump_commands+0xf4>
               holding_regs[REG_PUMP1_STATUS] != 0) {
 80009f8:	4b49      	ldr	r3, [pc, #292]	@ (8000b20 <process_pump_commands+0x208>)
 80009fa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <process_pump_commands+0xf4>
        cdc_debug_print("Pump1 control rejected: status not 0");
 8000a00:	4854      	ldr	r0, [pc, #336]	@ (8000b54 <process_pump_commands+0x23c>)
 8000a02:	f7ff fe67 	bl	80006d4 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a06:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <process_pump_commands+0x208>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40031) - 只有当状态位(40034)为0时才允许
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a0c:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <process_pump_commands+0x208>)
 8000a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11b      	bne.n	8000a4c <process_pump_commands+0x134>
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000a14:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <process_pump_commands+0x208>)
 8000a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d116      	bne.n	8000a4c <process_pump_commands+0x134>
        cdc_debug_print("Pump2 initialization triggered");
 8000a1e:	484e      	ldr	r0, [pc, #312]	@ (8000b58 <process_pump_commands+0x240>)
 8000a20:	f7ff fe58 	bl	80006d4 <cdc_debug_print>
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000a24:	2002      	movs	r0, #2
 8000a26:	f000 f8f7 	bl	8000c18 <pump_init_device>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d103      	bne.n	8000a38 <process_pump_commands+0x120>
            cdc_debug_print("Pump2 init command sent successfully");
 8000a30:	484a      	ldr	r0, [pc, #296]	@ (8000b5c <process_pump_commands+0x244>)
 8000a32:	f7ff fe4f 	bl	80006d4 <cdc_debug_print>
 8000a36:	e002      	b.n	8000a3e <process_pump_commands+0x126>
            // 位置和状态将通过查询来更新，不在这里直接设置
        } else {
            cdc_debug_print("Pump2 init command failed");
 8000a38:	4849      	ldr	r0, [pc, #292]	@ (8000b60 <process_pump_commands+0x248>)
 8000a3a:	f7ff fe4b 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a3e:	4b38      	ldr	r3, [pc, #224]	@ (8000b20 <process_pump_commands+0x208>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        last_pump2_init_trigger = 2;
 8000a44:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <process_pump_commands+0x24c>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e00e      	b.n	8000a6a <process_pump_commands+0x152>
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a4c:	4b34      	ldr	r3, [pc, #208]	@ (8000b20 <process_pump_commands+0x208>)
 8000a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10a      	bne.n	8000a6a <process_pump_commands+0x152>
               holding_regs[REG_PUMP2_STATUS] != 0) {
 8000a54:	4b32      	ldr	r3, [pc, #200]	@ (8000b20 <process_pump_commands+0x208>)
 8000a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <process_pump_commands+0x152>
        cdc_debug_print("Pump2 init rejected: status not 0");
 8000a5e:	4842      	ldr	r0, [pc, #264]	@ (8000b68 <process_pump_commands+0x250>)
 8000a60:	f7ff fe38 	bl	80006d4 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <process_pump_commands+0x208>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    
    // 检查泵2控制触发 (40033) - 只有当状态位(40034)为0时才允许
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <process_pump_commands+0x208>)
 8000a6c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d13a      	bne.n	8000aea <process_pump_commands+0x1d2>
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <process_pump_commands+0x208>)
 8000a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d135      	bne.n	8000aea <process_pump_commands+0x1d2>
            cdc_debug_print("Pump2 control triggered");
 8000a7e:	483b      	ldr	r0, [pc, #236]	@ (8000b6c <process_pump_commands+0x254>)
 8000a80:	f7ff fe28 	bl	80006d4 <cdc_debug_print>
            
            // 获取目标位置 (40032)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000a84:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <process_pump_commands+0x208>)
 8000a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 8000a8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a8e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d81e      	bhi.n	8000ad4 <process_pump_commands+0x1bc>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000a96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 f8ca 	bl	8000c34 <pump_move_absolute_device>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d112      	bne.n	8000acc <process_pump_commands+0x1b4>
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 8000aa6:	f003 fd7b 	bl	80045a0 <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a30      	ldr	r2, [pc, #192]	@ (8000b70 <process_pump_commands+0x258>)
 8000aae:	6013      	str	r3, [r2, #0]
                    // 状态将通过查询错误码来更新，不在这里直接设置
                    cdc_debug_print("Pump2 move command sent successfully");
 8000ab0:	4830      	ldr	r0, [pc, #192]	@ (8000b74 <process_pump_commands+0x25c>)
 8000ab2:	f7ff fe0f 	bl	80006d4 <cdc_debug_print>
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 8000ab6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ab8:	4638      	mov	r0, r7
 8000aba:	4a2f      	ldr	r2, [pc, #188]	@ (8000b78 <process_pump_commands+0x260>)
 8000abc:	2132      	movs	r1, #50	@ 0x32
 8000abe:	f01c fd2f 	bl	801d520 <sniprintf>
                    cdc_debug_print(pos_msg);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe05 	bl	80006d4 <cdc_debug_print>
 8000aca:	e006      	b.n	8000ada <process_pump_commands+0x1c2>
                } else {
                    cdc_debug_print("Pump2 move command failed");
 8000acc:	482b      	ldr	r0, [pc, #172]	@ (8000b7c <process_pump_commands+0x264>)
 8000ace:	f7ff fe01 	bl	80006d4 <cdc_debug_print>
 8000ad2:	e002      	b.n	8000ada <process_pump_commands+0x1c2>
                }
            } else {
                cdc_debug_print("Pump2 target position out of range (0-6000)");
 8000ad4:	482a      	ldr	r0, [pc, #168]	@ (8000b80 <process_pump_commands+0x268>)
 8000ad6:	f7ff fdfd 	bl	80006d4 <cdc_debug_print>
            }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <process_pump_commands+0x208>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        last_pump2_control_trigger = 2;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <process_pump_commands+0x26c>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000ae8:	e010      	b.n	8000b0c <process_pump_commands+0x1f4>
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <process_pump_commands+0x208>)
 8000aec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10b      	bne.n	8000b0c <process_pump_commands+0x1f4>
               holding_regs[REG_PUMP2_STATUS] != 0) {
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <process_pump_commands+0x208>)
 8000af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <process_pump_commands+0x1f4>
        cdc_debug_print("Pump2 control rejected: status not 0");
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <process_pump_commands+0x270>)
 8000b00:	f7ff fde8 	bl	80006d4 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <process_pump_commands+0x208>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 f8a5 	bl	8000c5c <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 f8a2 	bl	8000c5c <pump_update_status>
}
 8000b18:	bf00      	nop
 8000b1a:	3738      	adds	r7, #56	@ 0x38
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000058c 	.word	0x2000058c
 8000b24:	0801e9a8 	.word	0x0801e9a8
 8000b28:	0801e9c8 	.word	0x0801e9c8
 8000b2c:	0801e9f0 	.word	0x0801e9f0
 8000b30:	2000018c 	.word	0x2000018c
 8000b34:	0801ea0c 	.word	0x0801ea0c
 8000b38:	0801ea30 	.word	0x0801ea30
 8000b3c:	20000224 	.word	0x20000224
 8000b40:	0801ea48 	.word	0x0801ea48
 8000b44:	0801ea70 	.word	0x0801ea70
 8000b48:	0801ea90 	.word	0x0801ea90
 8000b4c:	0801eaac 	.word	0x0801eaac
 8000b50:	20000190 	.word	0x20000190
 8000b54:	0801ead8 	.word	0x0801ead8
 8000b58:	0801eb00 	.word	0x0801eb00
 8000b5c:	0801eb20 	.word	0x0801eb20
 8000b60:	0801eb48 	.word	0x0801eb48
 8000b64:	20000194 	.word	0x20000194
 8000b68:	0801eb64 	.word	0x0801eb64
 8000b6c:	0801eb88 	.word	0x0801eb88
 8000b70:	20000228 	.word	0x20000228
 8000b74:	0801eba0 	.word	0x0801eba0
 8000b78:	0801ebc8 	.word	0x0801ebc8
 8000b7c:	0801ebe8 	.word	0x0801ebe8
 8000b80:	0801ec04 	.word	0x0801ec04
 8000b84:	20000198 	.word	0x20000198
 8000b88:	0801ec30 	.word	0x0801ec30

08000b8c <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    // TODO: 在这里添加传感器数据更新业务代码
    
    // 示例1：更新舵机当前角度 (40017-40022，每个角度占用1个寄存器)
    // 注意：舵机位置已在servo_update_status中更新，这里做周期性验证
    static uint32_t servo_read_counter = 0;
    if (servo_read_counter % 10 == 0 && !servo_moving) {  // 每1秒更新一次，且不在移动时
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <update_sensor_data+0x74>)
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <update_sensor_data+0x78>)
 8000b96:	fba3 2301 	umull	r2, r3, r3, r1
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1aca      	subs	r2, r1, r3
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d11d      	bne.n	8000be6 <update_sensor_data+0x5a>
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <update_sensor_data+0x7c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d119      	bne.n	8000be6 <update_sensor_data+0x5a>
        // 周期性读取舵机位置进行验证
        servo_read_all_positions();
 8000bb2:	f000 f9d5 	bl	8000f60 <servo_read_all_positions>
        // 更新当前角度寄存器 (40017-40022)
        holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <update_sensor_data+0x80>)
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <update_sensor_data+0x84>)
 8000bbc:	845a      	strh	r2, [r3, #34]	@ 0x22
        holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <update_sensor_data+0x80>)
 8000bc0:	885a      	ldrh	r2, [r3, #2]
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <update_sensor_data+0x84>)
 8000bc4:	849a      	strh	r2, [r3, #36]	@ 0x24
        holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <update_sensor_data+0x80>)
 8000bc8:	889a      	ldrh	r2, [r3, #4]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <update_sensor_data+0x84>)
 8000bcc:	84da      	strh	r2, [r3, #38]	@ 0x26
        holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <update_sensor_data+0x80>)
 8000bd0:	88da      	ldrh	r2, [r3, #6]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <update_sensor_data+0x84>)
 8000bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <update_sensor_data+0x80>)
 8000bd8:	891a      	ldrh	r2, [r3, #8]
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <update_sensor_data+0x84>)
 8000bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <update_sensor_data+0x80>)
 8000be0:	895a      	ldrh	r2, [r3, #10]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <update_sensor_data+0x84>)
 8000be4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    servo_read_counter++;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <update_sensor_data+0x74>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <update_sensor_data+0x74>)
 8000bee:	6013      	str	r3, [r2, #0]
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <update_sensor_data+0x88>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <update_sensor_data+0x88>)
 8000bf8:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected ? 2 : 1;  // 1=无物体；2=有
    }
    detection_read_counter++;
    */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000240 	.word	0x20000240
 8000c04:	cccccccd 	.word	0xcccccccd
 8000c08:	2000022c 	.word	0x2000022c
 8000c0c:	20000234 	.word	0x20000234
 8000c10:	2000058c 	.word	0x2000058c
 8000c14:	20000244 	.word	0x20000244

08000c18 <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fef9 	bl	8003a1c <pump_init>
 8000c2a:	4603      	mov	r3, r0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fef8 	bl	8003a40 <pump_move_absolute>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <pump_update_status>:
/**
  * @brief  更新泵状态 - 使用实际的DT协议查询
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0d8      	sub	sp, #352	@ 0x160
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4602      	mov	r2, r0
 8000c64:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c68:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000c6c:	701a      	strb	r2, [r3, #0]
    static uint32_t last_update_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000c6e:	f003 fc97 	bl	80045a0 <HAL_GetTick>
 8000c72:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
    
    // 降低查询频率，每1秒查询一次
    if (current_time - last_update_time < 1000) {
 8000c76:	4b88      	ldr	r3, [pc, #544]	@ (8000e98 <pump_update_status+0x23c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c84:	f0c0 8102 	bcc.w	8000e8c <pump_update_status+0x230>
        return;
    }
    last_update_time = current_time;
 8000c88:	4a83      	ldr	r2, [pc, #524]	@ (8000e98 <pump_update_status+0x23c>)
 8000c8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000c8e:	6013      	str	r3, [r2, #0]
    
    char error_response[256];
    int current_position;
    
    if (pump_id == 1) {
 8000c90:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c94:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d176      	bne.n	8000d8c <pump_update_status+0x130>
        // 查询错误码 (/1QR)
        if (pump_query_error(1, error_response) == 0) {
 8000c9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f002 fee5 	bl	8003a74 <pump_query_error>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d13c      	bne.n	8000d2a <pump_update_status+0xce>
            // 从响应中提取错误码数字部分
            char* code_start = strchr(error_response, '`');
 8000cb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb4:	2160      	movs	r1, #96	@ 0x60
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f01c fcec 	bl	801d694 <strchr>
 8000cbc:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
            if (code_start != NULL) {
 8000cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d033      	beq.n	8000d30 <pump_update_status+0xd4>
                code_start++; // 跳过 '`' 字符
 8000cc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
                int error_code = atoi(code_start);
 8000cd2:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cd6:	f01c fa89 	bl	801d1ec <atoi>
 8000cda:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP1_STATUS] = error_code;
 8000cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8000e9c <pump_update_status+0x240>)
 8000ce6:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                // 更新内部忙状态逻辑（用于内部判断）
                if (error_code == 15) {  // 指令溢出 = 忙
 8000ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d103      	bne.n	8000cf8 <pump_update_status+0x9c>
                    pump1_busy = 1;
 8000cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea0 <pump_update_status+0x244>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e00a      	b.n	8000d0e <pump_update_status+0xb2>
                } else if (error_code == 0) {  // 无误 = 不忙
 8000cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <pump_update_status+0xac>
                    pump1_busy = 0;
 8000d00:	4b67      	ldr	r3, [pc, #412]	@ (8000ea0 <pump_update_status+0x244>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <pump_update_status+0xb2>
                } else {
                    pump1_busy = 1;  // 其他错误也认为是忙状态
 8000d08:	4b65      	ldr	r3, [pc, #404]	@ (8000ea0 <pump_update_status+0x244>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
                }
                
                char debug_msg[60];
                snprintf(debug_msg, sizeof(debug_msg), "Pump1 error code: %d", error_code);
 8000d0e:	f107 000c 	add.w	r0, r7, #12
 8000d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000d16:	4a63      	ldr	r2, [pc, #396]	@ (8000ea4 <pump_update_status+0x248>)
 8000d18:	213c      	movs	r1, #60	@ 0x3c
 8000d1a:	f01c fc01 	bl	801d520 <sniprintf>
                cdc_debug_print(debug_msg);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcd6 	bl	80006d4 <cdc_debug_print>
 8000d28:	e002      	b.n	8000d30 <pump_update_status+0xd4>
            }
        } else {
            cdc_debug_print("Pump1 query error failed");
 8000d2a:	485f      	ldr	r0, [pc, #380]	@ (8000ea8 <pump_update_status+0x24c>)
 8000d2c:	f7ff fcd2 	bl	80006d4 <cdc_debug_print>
        }
        
        // 查询当前活塞位置 (/1?4R)
        if (pump_query_position(1, &current_position) == 0) {
 8000d30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d34:	4619      	mov	r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	f002 feb0 	bl	8003a9c <pump_query_position>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d120      	bne.n	8000d84 <pump_update_status+0x128>
            pump1_current_pos = current_position;
 8000d42:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <pump_update_status+0x250>)
 8000d50:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = current_position;
 8000d52:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e9c <pump_update_status+0x240>)
 8000d60:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump1 position: %d", current_position);
 8000d62:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f107 000c 	add.w	r0, r7, #12
 8000d70:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb0 <pump_update_status+0x254>)
 8000d72:	2132      	movs	r1, #50	@ 0x32
 8000d74:	f01c fbd4 	bl	801d520 <sniprintf>
            cdc_debug_print(pos_msg);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fca9 	bl	80006d4 <cdc_debug_print>
 8000d82:	e084      	b.n	8000e8e <pump_update_status+0x232>
        } else {
            cdc_debug_print("Pump1 position query failed");
 8000d84:	484b      	ldr	r0, [pc, #300]	@ (8000eb4 <pump_update_status+0x258>)
 8000d86:	f7ff fca5 	bl	80006d4 <cdc_debug_print>
 8000d8a:	e080      	b.n	8000e8e <pump_update_status+0x232>
        }
        
    } else if (pump_id == 2) {
 8000d8c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d90:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d179      	bne.n	8000e8e <pump_update_status+0x232>
        // 查询错误码 (/2QR)
        if (pump_query_error(2, error_response) == 0) {
 8000d9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fe67 	bl	8003a74 <pump_query_error>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d13d      	bne.n	8000e28 <pump_update_status+0x1cc>
            char* code_start = strchr(error_response, '`');
 8000dac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000db0:	2160      	movs	r1, #96	@ 0x60
 8000db2:	4618      	mov	r0, r3
 8000db4:	f01c fc6e 	bl	801d694 <strchr>
 8000db8:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
            if (code_start != NULL) {
 8000dbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d034      	beq.n	8000e2e <pump_update_status+0x1d2>
                code_start++; // 跳过 '`' 字符
 8000dc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000dc8:	3301      	adds	r3, #1
 8000dca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                int error_code = atoi(code_start);
 8000dce:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8000dd2:	f01c fa0b 	bl	801d1ec <atoi>
 8000dd6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP2_STATUS] = error_code;
 8000dda:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e9c <pump_update_status+0x240>)
 8000de2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
                
                // 更新内部忙状态逻辑（用于内部判断）
                if (error_code == 15) {  // 指令溢出 = 忙
 8000de6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d103      	bne.n	8000df6 <pump_update_status+0x19a>
                    pump2_busy = 1;
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <pump_update_status+0x25c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e00a      	b.n	8000e0c <pump_update_status+0x1b0>
                } else if (error_code == 0) {  // 无误 = 不忙
 8000df6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d103      	bne.n	8000e06 <pump_update_status+0x1aa>
                    pump2_busy = 0;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <pump_update_status+0x25c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e002      	b.n	8000e0c <pump_update_status+0x1b0>
                } else {
                    pump2_busy = 1;  // 其他错误也认为是忙状态
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <pump_update_status+0x25c>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
                }
                
                char debug_msg[60];
                snprintf(debug_msg, sizeof(debug_msg), "Pump2 error code: %d", error_code);
 8000e0c:	f107 000c 	add.w	r0, r7, #12
 8000e10:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000e14:	4a29      	ldr	r2, [pc, #164]	@ (8000ebc <pump_update_status+0x260>)
 8000e16:	213c      	movs	r1, #60	@ 0x3c
 8000e18:	f01c fb82 	bl	801d520 <sniprintf>
                cdc_debug_print(debug_msg);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fc57 	bl	80006d4 <cdc_debug_print>
 8000e26:	e002      	b.n	8000e2e <pump_update_status+0x1d2>
            }
        } else {
            cdc_debug_print("Pump2 UART RX timeout");
 8000e28:	4825      	ldr	r0, [pc, #148]	@ (8000ec0 <pump_update_status+0x264>)
 8000e2a:	f7ff fc53 	bl	80006d4 <cdc_debug_print>
        }
        
        // 查询当前活塞位置 (/2?4R)
        if (pump_query_position(2, &current_position) == 0) {
 8000e2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e32:	4619      	mov	r1, r3
 8000e34:	2002      	movs	r0, #2
 8000e36:	f002 fe31 	bl	8003a9c <pump_query_position>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d121      	bne.n	8000e84 <pump_update_status+0x228>
            pump2_current_pos = current_position;
 8000e40:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <pump_update_status+0x268>)
 8000e4e:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = current_position;
 8000e50:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <pump_update_status+0x240>)
 8000e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump2 position: %d", current_position);
 8000e62:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f107 000c 	add.w	r0, r7, #12
 8000e70:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <pump_update_status+0x26c>)
 8000e72:	2132      	movs	r1, #50	@ 0x32
 8000e74:	f01c fb54 	bl	801d520 <sniprintf>
            cdc_debug_print(pos_msg);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc29 	bl	80006d4 <cdc_debug_print>
 8000e82:	e004      	b.n	8000e8e <pump_update_status+0x232>
        } else {
            cdc_debug_print("Pump2 position query failed");
 8000e84:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <pump_update_status+0x270>)
 8000e86:	f7ff fc25 	bl	80006d4 <cdc_debug_print>
 8000e8a:	e000      	b.n	8000e8e <pump_update_status+0x232>
        return;
 8000e8c:	bf00      	nop
        }
    }
}
 8000e8e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000248 	.word	0x20000248
 8000e9c:	2000058c 	.word	0x2000058c
 8000ea0:	2000021c 	.word	0x2000021c
 8000ea4:	0801ec58 	.word	0x0801ec58
 8000ea8:	0801ec70 	.word	0x0801ec70
 8000eac:	2000021e 	.word	0x2000021e
 8000eb0:	0801ec8c 	.word	0x0801ec8c
 8000eb4:	0801eca0 	.word	0x0801eca0
 8000eb8:	2000021d 	.word	0x2000021d
 8000ebc:	0801ecbc 	.word	0x0801ecbc
 8000ec0:	0801ecd4 	.word	0x0801ecd4
 8000ec4:	20000220 	.word	0x20000220
 8000ec8:	0801ecec 	.word	0x0801ecec
 8000ecc:	0801ed00 	.word	0x0801ed00

08000ed0 <servo_move_all>:
  * @brief  控制所有舵机移动到目标位置
  * @param  target_angles: 6个舵机的目标角度数组
  * @param  move_time: 移动时间(ms)
  * @retval None
  */
static void servo_move_all(uint16_t* target_angles, uint32_t move_time) {
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	b0ab      	sub	sp, #172	@ 0xac
 8000ed4:	af06      	add	r7, sp, #24
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    // 使用多舵机同时移动命令 - 更高效的方式
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000eda:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <servo_move_all+0x88>)
 8000edc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee4:	6018      	str	r0, [r3, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	8019      	strh	r1, [r3, #0]
    BusServo_MultMove(servo_ids, target_angles, 6, (uint16_t)move_time);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	f000 f9c5 	bl	8001284 <BusServo_MultMove>
    
    // 调试信息：显示发送的命令
    char move_msg[128];
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
            target_angles[0], target_angles[1], target_angles[2], 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000efe:	469c      	mov	ip, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f06:	461a      	mov	r2, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f0e:	4619      	mov	r1, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3306      	adds	r3, #6
 8000f14:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f16:	461c      	mov	r4, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f1e:	461d      	mov	r5, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	330a      	adds	r3, #10
 8000f24:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f26:	461e      	mov	r6, r3
 8000f28:	f107 0008 	add.w	r0, r7, #8
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	9604      	str	r6, [sp, #16]
 8000f32:	9503      	str	r5, [sp, #12]
 8000f34:	9402      	str	r4, [sp, #8]
 8000f36:	9101      	str	r1, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <servo_move_all+0x8c>)
 8000f3e:	2180      	movs	r1, #128	@ 0x80
 8000f40:	f01c faee 	bl	801d520 <sniprintf>
    cdc_debug_print(move_msg);
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbc3 	bl	80006d4 <cdc_debug_print>
        snprintf(move_msg, sizeof(move_msg), "Servo%d -> %d (time:%lums) sent", 
                servo_id, target_angles[servo_id-1], move_time);
        cdc_debug_print(move_msg);
    }
    */
}
 8000f4e:	bf00      	nop
 8000f50:	3794      	adds	r7, #148	@ 0x94
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	0801ed4c 	.word	0x0801ed4c
 8000f5c:	0801ed1c 	.word	0x0801ed1c

08000f60 <servo_read_all_positions>:

/**
  * @brief  读取所有舵机的当前位置
  * @retval None
  */
static void servo_read_all_positions(void) {
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b0bd      	sub	sp, #244	@ 0xf4
 8000f64:	af06      	add	r7, sp, #24
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000f66:	4a3b      	ldr	r2, [pc, #236]	@ (8001054 <servo_read_all_positions+0xf4>)
 8000f68:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f70:	6018      	str	r0, [r3, #0]
 8000f72:	3304      	adds	r3, #4
 8000f74:	8019      	strh	r1, [r3, #0]
    uint16_t positions[6];
    
    // 使用多舵机位置读取函数（非阻塞版本）
    BusServo_MultPosRead(servo_ids, 6, positions);
 8000f76:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8000f7a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f7e:	2106      	movs	r1, #6
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fa31 	bl	80013e8 <BusServo_MultPosRead>
    
    // 更新内部状态并记录调试信息
    char pos_debug[128];
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000f86:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000f8a:	461e      	mov	r6, r3
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000f8c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8000f90:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8000f94:	f8b7 10c6 	ldrh.w	r1, [r7, #198]	@ 0xc6
 8000f98:	f8b7 00c8 	ldrh.w	r0, [r7, #200]	@ 0xc8
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000f9c:	4604      	mov	r4, r0
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000f9e:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	@ 0xca
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000fa8:	9504      	str	r5, [sp, #16]
 8000faa:	9403      	str	r4, [sp, #12]
 8000fac:	9102      	str	r1, [sp, #8]
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4633      	mov	r3, r6
 8000fb4:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <servo_read_all_positions+0xf8>)
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	f01c fab2 	bl	801d520 <sniprintf>
    cdc_debug_print(pos_debug);
 8000fbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb87 	bl	80006d4 <cdc_debug_print>
    
    // 更新内部状态
    for (int i = 0; i < 6; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fcc:	e037      	b.n	800103e <servo_read_all_positions+0xde>
        // 只有当读取到的值在合理范围内时才更新，否则保持原值
        if (positions[i] <= 1000) {
 8000fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	33d8      	adds	r3, #216	@ 0xd8
 8000fd6:	443b      	add	r3, r7
 8000fd8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe0:	d80c      	bhi.n	8000ffc <servo_read_all_positions+0x9c>
            servo_current_positions[i] = positions[i];
 8000fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	33d8      	adds	r3, #216	@ 0xd8
 8000fea:	443b      	add	r3, r7
 8000fec:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800105c <servo_read_all_positions+0xfc>)
 8000ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ff6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ffa:	e01b      	b.n	8001034 <servo_read_all_positions+0xd4>
        } else {
            // 如果读取值异常，记录警告但保持原值
            char warning[60];
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8000ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001000:	1c5a      	adds	r2, r3, #1
                    i+1, positions[i], servo_current_positions[i]);
 8001002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	33d8      	adds	r3, #216	@ 0xd8
 800100a:	443b      	add	r3, r7
 800100c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001010:	461c      	mov	r4, r3
                    i+1, positions[i], servo_current_positions[i]);
 8001012:	4912      	ldr	r1, [pc, #72]	@ (800105c <servo_read_all_positions+0xfc>)
 8001014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 800101c:	1d38      	adds	r0, r7, #4
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9400      	str	r4, [sp, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <servo_read_all_positions+0x100>)
 8001026:	213c      	movs	r1, #60	@ 0x3c
 8001028:	f01c fa7a 	bl	801d520 <sniprintf>
            cdc_debug_print(warning);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fb50 	bl	80006d4 <cdc_debug_print>
    for (int i = 0; i < 6; i++) {
 8001034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001038:	3301      	adds	r3, #1
 800103a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800103e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001042:	2b05      	cmp	r3, #5
 8001044:	ddc3      	ble.n	8000fce <servo_read_all_positions+0x6e>
        }
    }
    
    cdc_debug_print("Servo positions read with timeout protection");
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <servo_read_all_positions+0x104>)
 8001048:	f7ff fb44 	bl	80006d4 <cdc_debug_print>
}
 800104c:	bf00      	nop
 800104e:	37dc      	adds	r7, #220	@ 0xdc
 8001050:	46bd      	mov	sp, r7
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001054:	0801ed4c 	.word	0x0801ed4c
 8001058:	0801ed54 	.word	0x0801ed54
 800105c:	20000234 	.word	0x20000234
 8001060:	0801ed7c 	.word	0x0801ed7c
 8001064:	0801eda4 	.word	0x0801eda4

08001068 <servo_update_status>:

/**
  * @brief  更新舵机状态
  * @retval None
  */
static void servo_update_status(void) {
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	b0ab      	sub	sp, #172	@ 0xac
 800106c:	af06      	add	r7, sp, #24
    if (servo_moving) {
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <servo_update_status+0xe8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d068      	beq.n	8001148 <servo_update_status+0xe0>
        uint32_t current_time = HAL_GetTick();
 8001076:	f003 fa93 	bl	80045a0 <HAL_GetTick>
 800107a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        uint32_t elapsed_time = current_time - servo_move_start_time;
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <servo_update_status+0xec>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        
        // 获取当前设置的移动时间
        uint32_t expected_move_time = holding_regs[REG_ROTATION_TIME];
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <servo_update_status+0xf0>)
 800108e:	8a9b      	ldrh	r3, [r3, #20]
 8001090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        
        if (expected_move_time == 0) {
 8001094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <servo_update_status+0x3c>
            expected_move_time = 1000;  // 默认1秒
 800109c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        
        // 添加500ms缓冲时间，确保舵机完全到位
        uint32_t timeout_time = expected_move_time + 500;
 80010a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010a8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80010ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        
        if (elapsed_time >= timeout_time) {
 80010b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d345      	bcc.n	8001148 <servo_update_status+0xe0>
            servo_moving = 0;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <servo_update_status+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
            
            // 读取当前位置并更新寄存器
            servo_read_all_positions();
 80010c2:	f7ff ff4d 	bl	8000f60 <servo_read_all_positions>
            // 更新当前角度寄存器 (40017-40022)
            holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <servo_update_status+0xf4>)
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <servo_update_status+0xf0>)
 80010cc:	845a      	strh	r2, [r3, #34]	@ 0x22
            holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <servo_update_status+0xf4>)
 80010d0:	885a      	ldrh	r2, [r3, #2]
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <servo_update_status+0xf0>)
 80010d4:	849a      	strh	r2, [r3, #36]	@ 0x24
            holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <servo_update_status+0xf4>)
 80010d8:	889a      	ldrh	r2, [r3, #4]
 80010da:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <servo_update_status+0xf0>)
 80010dc:	84da      	strh	r2, [r3, #38]	@ 0x26
            holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <servo_update_status+0xf4>)
 80010e0:	88da      	ldrh	r2, [r3, #6]
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <servo_update_status+0xf0>)
 80010e4:	851a      	strh	r2, [r3, #40]	@ 0x28
            holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <servo_update_status+0xf4>)
 80010e8:	891a      	ldrh	r2, [r3, #8]
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <servo_update_status+0xf0>)
 80010ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
            holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <servo_update_status+0xf4>)
 80010f0:	895a      	ldrh	r2, [r3, #10]
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <servo_update_status+0xf0>)
 80010f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
            
            // 转动时间到达后，置状态为2（完成状态，可以重新写1进行新转动）
            holding_regs[REG_ROTATION_TRIGGER] = 2;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <servo_update_status+0xf0>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
            last_rotation_trigger = 2;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <servo_update_status+0xf8>)
 80010fe:	2202      	movs	r2, #2
 8001100:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo movement completed, status set to 2 (ready for new command)");
 8001102:	4818      	ldr	r0, [pc, #96]	@ (8001164 <servo_update_status+0xfc>)
 8001104:	f7ff fae6 	bl	80006d4 <cdc_debug_print>
            
            // 调试信息：显示最终位置
            char final_pos_msg[128];
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <servo_update_status+0xf4>)
 800110a:	881b      	ldrh	r3, [r3, #0]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800110c:	461e      	mov	r6, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <servo_update_status+0xf4>)
 8001110:	885b      	ldrh	r3, [r3, #2]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001112:	461a      	mov	r2, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <servo_update_status+0xf4>)
 8001116:	889b      	ldrh	r3, [r3, #4]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001118:	4619      	mov	r1, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <servo_update_status+0xf4>)
 800111c:	88db      	ldrh	r3, [r3, #6]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800111e:	461c      	mov	r4, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <servo_update_status+0xf4>)
 8001122:	891b      	ldrh	r3, [r3, #8]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001124:	461d      	mov	r5, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <servo_update_status+0xf4>)
 8001128:	895b      	ldrh	r3, [r3, #10]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800112a:	4638      	mov	r0, r7
 800112c:	9304      	str	r3, [sp, #16]
 800112e:	9503      	str	r5, [sp, #12]
 8001130:	9402      	str	r4, [sp, #8]
 8001132:	9101      	str	r1, [sp, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4633      	mov	r3, r6
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <servo_update_status+0x100>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	f01c f9f0 	bl	801d520 <sniprintf>
            cdc_debug_print(final_pos_msg);
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fac6 	bl	80006d4 <cdc_debug_print>
        }
    }
}
 8001148:	bf00      	nop
 800114a:	3794      	adds	r7, #148	@ 0x94
 800114c:	46bd      	mov	sp, r7
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	2000022c 	.word	0x2000022c
 8001154:	20000230 	.word	0x20000230
 8001158:	2000058c 	.word	0x2000058c
 800115c:	20000234 	.word	0x20000234
 8001160:	20000184 	.word	0x20000184
 8001164:	0801edd4 	.word	0x0801edd4
 8001168:	0801ee18 	.word	0x0801ee18

0800116c <BusServo_SendCmd>:
#include "bus_servo.h"
#include <string.h>

// 发送通用指令
void BusServo_SendCmd(uint8_t cmd, uint8_t *params, uint8_t param_cnt) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b0c4      	sub	sp, #272	@ 0x110
 8001170:	af00      	add	r7, sp, #0
 8001172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001176:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800117a:	6019      	str	r1, [r3, #0]
 800117c:	4611      	mov	r1, r2
 800117e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001182:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001186:	4602      	mov	r2, r0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800118e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001192:	460a      	mov	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
    uint8_t buf[256];  // 缓冲区，足够大
    uint8_t idx = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    buf[idx++] = 0x55;  // 帧头
 800119c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80011a6:	461a      	mov	r2, r3
 80011a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b0:	2155      	movs	r1, #85	@ 0x55
 80011b2:	5499      	strb	r1, [r3, r2]
    buf[idx++] = 0x55;
 80011b4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80011be:	461a      	mov	r2, r3
 80011c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c8:	2155      	movs	r1, #85	@ 0x55
 80011ca:	5499      	strb	r1, [r3, r2]
    buf[idx++] = param_cnt + 2;  // Length = N + 2
 80011cc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80011d6:	461a      	mov	r2, r3
 80011d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011dc:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	3302      	adds	r3, #2
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ee:	5499      	strb	r1, [r3, r2]
    buf[idx++] = cmd;
 80011f0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80011fa:	4619      	mov	r1, r3
 80011fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001204:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001208:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	545a      	strb	r2, [r3, r1]
    if (params && param_cnt > 0) {
 8001210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001214:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d021      	beq.n	8001262 <BusServo_SendCmd+0xf6>
 800121e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001222:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01a      	beq.n	8001262 <BusServo_SendCmd+0xf6>
        memcpy(&buf[idx], params, param_cnt);
 800122c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	f01c fb0a 	bl	801d862 <memcpy>
        idx += param_cnt;
 800124e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001252:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001256:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    }
    HAL_UART_Transmit(&huart6, buf, idx, HAL_MAX_DELAY);  // 发送
 8001262:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001266:	b29a      	uxth	r2, r3
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <BusServo_SendCmd+0x114>)
 8001272:	f007 fc8f 	bl	8008b94 <HAL_UART_Transmit>
}
 8001276:	bf00      	nop
 8001278:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200007fc 	.word	0x200007fc

08001284 <BusServo_MultMove>:
    params[5] = (position >> 8) & 0xFF;  // 高8位
    BusServo_SendCmd(CMD_SERVO_MOVE, params, 6);
}

// 控制多舵机同时转动
void BusServo_MultMove(uint8_t *ids, uint16_t *positions, uint8_t servo_count, uint16_t time) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b0c7      	sub	sp, #284	@ 0x11c
 8001288:	af00      	add	r7, sp, #0
 800128a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800128e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001292:	6020      	str	r0, [r4, #0]
 8001294:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001298:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 800129c:	6001      	str	r1, [r0, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012a4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012b2:	460a      	mov	r2, r1
 80012b4:	801a      	strh	r2, [r3, #0]
    uint8_t params[256];  // 足够大的缓冲区
    uint8_t idx = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    params[idx++] = servo_count;    // 舵机数量
 80012bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80012c6:	4619      	mov	r1, r3
 80012c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012d0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80012d4:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	545a      	strb	r2, [r3, r1]
    params[idx++] = time & 0xFF;    // 时间低8位  
 80012dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80012e6:	461a      	mov	r2, r3
 80012e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b2d9      	uxtb	r1, r3
 80012f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012fc:	5499      	strb	r1, [r3, r2]
    params[idx++] = (time >> 8) & 0xFF;  // 时间高8位
 80012fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001302:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b299      	uxth	r1, r3
 800130c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001316:	461a      	mov	r2, r3
 8001318:	b2c9      	uxtb	r1, r1
 800131a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800131e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001322:	5499      	strb	r1, [r3, r2]
    
    // 添加每个舵机的ID和位置
    for (uint8_t i = 0; i < servo_count; i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800132a:	e046      	b.n	80013ba <BusServo_MultMove+0x136>
        params[idx++] = ids[i];     // 舵机ID
 800132c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001330:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001334:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	441a      	add	r2, r3
 800133c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 8001346:	4619      	mov	r1, r3
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800134e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001352:	545a      	strb	r2, [r3, r1]
        params[idx++] = positions[i] & 0xFF;        // 位置低8位
 8001354:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800135e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4413      	add	r3, r2
 8001366:	8819      	ldrh	r1, [r3, #0]
 8001368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 8001372:	461a      	mov	r2, r3
 8001374:	b2c9      	uxtb	r1, r1
 8001376:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800137a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800137e:	5499      	strb	r1, [r3, r2]
        params[idx++] = (positions[i] >> 8) & 0xFF; // 位置高8位
 8001380:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800138a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4413      	add	r3, r2
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b299      	uxth	r1, r3
 8001398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80013a2:	461a      	mov	r2, r3
 80013a4:	b2c9      	uxtb	r1, r1
 80013a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ae:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < servo_count; i++) {
 80013b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013b4:	3301      	adds	r3, #1
 80013b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80013ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013be:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80013c2:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3af      	bcc.n	800132c <BusServo_MultMove+0xa8>
    }
    
    BusServo_SendCmd(CMD_SERVO_MOVE, params, idx);
 80013cc:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	2003      	movs	r0, #3
 80013d8:	f7ff fec8 	bl	800116c <BusServo_SendCmd>
}
 80013dc:	bf00      	nop
 80013de:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <BusServo_MultPosRead>:
    memcpy(&params[1], ids, id_cnt);
    BusServo_SendCmd(CMD_MULT_SERVO_UNLOAD, params, id_cnt + 1);
}

// 读取多舵机位置（positions数组需预分配空间）
void BusServo_MultPosRead(uint8_t *ids, uint8_t id_cnt, uint16_t *positions) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80013f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80013f8:	6018      	str	r0, [r3, #0]
 80013fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80013fe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001408:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
    uint8_t params[256];
    params[0] = id_cnt;
 8001410:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001418:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800141c:	f2a2 220d 	subw	r2, r2, #525	@ 0x20d
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	701a      	strb	r2, [r3, #0]
    memcpy(&params[1], ids, id_cnt);
 8001424:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001428:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800142c:	7819      	ldrb	r1, [r3, #0]
 800142e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001432:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001436:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143a:	1c50      	adds	r0, r2, #1
 800143c:	460a      	mov	r2, r1
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	f01c fa0f 	bl	801d862 <memcpy>
    BusServo_SendCmd(CMD_MULT_SERVO_POS_READ, params, id_cnt + 1);
 8001444:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001448:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001456:	4619      	mov	r1, r3
 8001458:	2015      	movs	r0, #21
 800145a:	f7ff fe87 	bl	800116c <BusServo_SendCmd>

    // 接收响应：使用较短的超时时间，避免长时间阻塞
    uint8_t rx_len = id_cnt * 3 + 5;  // 总长度：头2 + len1 + cmd1 + data
 800145e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001462:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	0052      	lsls	r2, r2, #1
 800146c:	4413      	add	r3, r2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3305      	adds	r3, #5
 8001472:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t rx_buf[256];
    
    // 初始化位置数组为默认值
    for (uint8_t i = 0; i < id_cnt; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800147c:	e00f      	b.n	800149e <BusServo_MultPosRead+0xb6>
        positions[i] = 3;  // 默认位置3代表读取失败
 800147e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001488:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	2203      	movs	r2, #3
 8001492:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < id_cnt; i++) {
 8001494:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001498:	3301      	adds	r3, #1
 800149a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800149e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014a2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80014a6:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3e6      	bcc.n	800147e <BusServo_MultPosRead+0x96>
    }
    
    // 使用较短超时时间 (200ms) 而不是HAL_MAX_DELAY
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, rx_buf, rx_len, 200);
 80014b0:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f107 0110 	add.w	r1, r7, #16
 80014ba:	23c8      	movs	r3, #200	@ 0xc8
 80014bc:	483c      	ldr	r0, [pc, #240]	@ (80015b0 <BusServo_MultPosRead+0x1c8>)
 80014be:	f007 fbf4 	bl	8008caa <HAL_UART_Receive>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
    
    if (status == HAL_OK) {
 80014c8:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d169      	bne.n	80015a4 <BusServo_MultPosRead+0x1bc>
        // 检查响应帧头和命令码
        if (rx_buf[0] == 0x55 && rx_buf[1] == 0x55 && rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 80014d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014d4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b55      	cmp	r3, #85	@ 0x55
 80014dc:	d162      	bne.n	80015a4 <BusServo_MultPosRead+0x1bc>
 80014de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014e2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	2b55      	cmp	r3, #85	@ 0x55
 80014ea:	d15b      	bne.n	80015a4 <BusServo_MultPosRead+0x1bc>
 80014ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014f0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80014f4:	78db      	ldrb	r3, [r3, #3]
 80014f6:	2b15      	cmp	r3, #21
 80014f8:	d154      	bne.n	80015a4 <BusServo_MultPosRead+0x1bc>
            // 解析实际返回的舵机数量
            uint8_t actual_count = rx_buf[2] / 3;  // 数据长度除以3得到舵机数量
 80014fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014fe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <BusServo_MultPosRead+0x1cc>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
            uint8_t parse_count = (actual_count < id_cnt) ? actual_count : id_cnt;
 8001510:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001514:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800151e:	4293      	cmp	r3, r2
 8001520:	bf28      	it	cs
 8001522:	4613      	movcs	r3, r2
 8001524:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
            
            for (uint8_t i = 0; i < parse_count; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 800152e:	e033      	b.n	8001598 <BusServo_MultPosRead+0x1b0>
                uint8_t offset = 4 + i * 3;  // 数据从rx_buf[4]开始
 8001530:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8001534:	461a      	mov	r2, r3
 8001536:	0052      	lsls	r2, r2, #1
 8001538:	4413      	add	r3, r2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	3304      	adds	r3, #4
 800153e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
                if (offset + 2 < sizeof(rx_buf)) {  // 边界检查
 8001542:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001546:	3302      	adds	r3, #2
 8001548:	2bff      	cmp	r3, #255	@ 0xff
 800154a:	d820      	bhi.n	800158e <BusServo_MultPosRead+0x1a6>
                    positions[i] = (rx_buf[offset + 2] << 8) | rx_buf[offset + 1];
 800154c:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001550:	3302      	adds	r3, #2
 8001552:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001556:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001566:	3301      	adds	r3, #1
 8001568:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800156c:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b219      	sxth	r1, r3
 8001578:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001582:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4413      	add	r3, r2
 800158a:	b28a      	uxth	r2, r1
 800158c:	801a      	strh	r2, [r3, #0]
            for (uint8_t i = 0; i < parse_count; i++) {
 800158e:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8001592:	3301      	adds	r3, #1
 8001594:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8001598:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 800159c:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3c5      	bcc.n	8001530 <BusServo_MultPosRead+0x148>
    } else if (status == HAL_TIMEOUT) {
        // 超时情况下保持默认值，不做额外处理
        // positions数组已经初始化为默认值500
    }
    // 对于其他错误情况，也保持默认值
}
 80015a4:	bf00      	nop
 80015a6:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200007fc 	.word	0x200007fc
 80015b4:	aaaaaaab 	.word	0xaaaaaaab

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2105      	movs	r1, #5
 80015de:	200c      	movs	r0, #12
 80015e0:	f003 f8c6 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015e4:	200c      	movs	r0, #12
 80015e6:	f003 f8df 	bl	80047a8 <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <vApplicationGetIdleTaskMemory+0x2c>)
 8001608:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <vApplicationGetIdleTaskMemory+0x30>)
 800160e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000298 	.word	0x20000298
 8001628:	20000338 	.word	0x20000338

0800162c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <MX_FREERTOS_Init+0x30>)
 8001634:	1d3c      	adds	r4, r7, #4
 8001636:	461d      	mov	r5, r3
 8001638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f00d fa0f 	bl	800ea6c <osThreadCreate>
 800164e:	4603      	mov	r3, r0
 8001650:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <MX_FREERTOS_Init+0x34>)
 8001652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	0801ee4c 	.word	0x0801ee4c
 8001660:	20000294 	.word	0x20000294

08001664 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800166c:	f01b f8a4 	bl	801c7b8 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001670:	f009 ff3a 	bl	800b4e8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 8001674:	f001 fa34 	bl	8002ae0 <modbus_tcp_init>
  app_business_init();
 8001678:	f7fe ff98 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <StartDefaultTask+0x90>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <StartDefaultTask+0x94>)
 8001682:	fba3 1302 	umull	r1, r3, r3, r2
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2164      	movs	r1, #100	@ 0x64
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <StartDefaultTask+0x34>
      app_business_process();
 8001694:	f7ff f812 	bl	80006bc <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次 - 暂时注释掉避免调试信息过载
    
    if (keep_alive_counter % 1000 == 0) {
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <StartDefaultTask+0x98>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <StartDefaultTask+0x9c>)
 800169e:	fba3 1302 	umull	r1, r3, r3, r2
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d111      	bne.n	80016d6 <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <StartDefaultTask+0x98>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <StartDefaultTask+0x9c>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <StartDefaultTask+0xa0>)
 80016c0:	2140      	movs	r1, #64	@ 0x40
 80016c2:	4811      	ldr	r0, [pc, #68]	@ (8001708 <StartDefaultTask+0xa4>)
 80016c4:	f01b ff2c 	bl	801d520 <sniprintf>
 80016c8:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <StartDefaultTask+0xa4>)
 80016d2:	f01b f92f 	bl	801c934 <CDC_Transmit_FS>
    }
    
    
    business_cycle_counter++;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <StartDefaultTask+0x90>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <StartDefaultTask+0x90>)
 80016de:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <StartDefaultTask+0x98>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <StartDefaultTask+0x98>)
 80016e8:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 80016ea:	2001      	movs	r0, #1
 80016ec:	f00d fa0a 	bl	800eb04 <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 80016f0:	e7c4      	b.n	800167c <StartDefaultTask+0x18>
 80016f2:	bf00      	nop
 80016f4:	2000024c 	.word	0x2000024c
 80016f8:	51eb851f 	.word	0x51eb851f
 80016fc:	20000290 	.word	0x20000290
 8001700:	10624dd3 	.word	0x10624dd3
 8001704:	0801ee68 	.word	0x0801ee68
 8001708:	20000250 	.word	0x20000250

0800170c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	615a      	str	r2, [r3, #20]
 8001722:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001726:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800172a:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800172e:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <MX_FSMC_Init+0xb8>)
 8001730:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001734:	2204      	movs	r2, #4
 8001736:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001746:	2210      	movs	r2, #16
 8001748:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001776:	2200      	movs	r2, #0
 8001778:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 800177c:	2200      	movs	r2, #0
 800177e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001786:	230f      	movs	r3, #15
 8001788:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800178a:	230f      	movs	r3, #15
 800178c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800178e:	23ff      	movs	r3, #255	@ 0xff
 8001790:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001792:	230f      	movs	r3, #15
 8001794:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001796:	2310      	movs	r3, #16
 8001798:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800179a:	2311      	movs	r3, #17
 800179c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_FSMC_Init+0xb4>)
 80017aa:	f006 fe4d 	bl	8008448 <HAL_SRAM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80017b4:	f000 f996 	bl	8001ae4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000538 	.word	0x20000538
 80017c4:	a0000104 	.word	0xa0000104

080017c8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80017dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <HAL_FSMC_MspInit+0xc8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d151      	bne.n	8001888 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <HAL_FSMC_MspInit+0xc8>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_FSMC_MspInit+0xcc>)
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f2:	4a28      	ldr	r2, [pc, #160]	@ (8001894 <HAL_FSMC_MspInit+0xcc>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <HAL_FSMC_MspInit+0xcc>)
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001806:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 800180a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001818:	230c      	movs	r3, #12
 800181a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	481d      	ldr	r0, [pc, #116]	@ (8001898 <HAL_FSMC_MspInit+0xd0>)
 8001822:	f004 fd7f 	bl	8006324 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001826:	f240 433f 	movw	r3, #1087	@ 0x43f
 800182a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001838:	230c      	movs	r3, #12
 800183a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4816      	ldr	r0, [pc, #88]	@ (800189c <HAL_FSMC_MspInit+0xd4>)
 8001842:	f004 fd6f 	bl	8006324 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001846:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800184a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001858:	230c      	movs	r3, #12
 800185a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <HAL_FSMC_MspInit+0xd8>)
 8001862:	f004 fd5f 	bl	8006324 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001866:	f64f 7333 	movw	r3, #65331	@ 0xff33
 800186a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001878:	230c      	movs	r3, #12
 800187a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <HAL_FSMC_MspInit+0xdc>)
 8001882:	f004 fd4f 	bl	8006324 <HAL_GPIO_Init>
 8001886:	e000      	b.n	800188a <HAL_FSMC_MspInit+0xc2>
    return;
 8001888:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000588 	.word	0x20000588
 8001894:	40023800 	.word	0x40023800
 8001898:	40021400 	.word	0x40021400
 800189c:	40021800 	.word	0x40021800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018b0:	f7ff ff8a 	bl	80017c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a39      	ldr	r2, [pc, #228]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a32      	ldr	r2, [pc, #200]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b2c      	ldr	r3, [pc, #176]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a2b      	ldr	r2, [pc, #172]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 800193c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_GPIO_Init+0xf4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

}
 80019a2:	bf00      	nop
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f002 fdbc 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019bc:	f000 f816 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f7ff ff7c 	bl	80018bc <MX_GPIO_Init>
  MX_DMA_Init();
 80019c4:	f7ff fdf8 	bl	80015b8 <MX_DMA_Init>
  MX_FSMC_Init();
 80019c8:	f7ff fea0 	bl	800170c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80019cc:	f002 fa42 	bl	8003e54 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80019d0:	f002 fa94 	bl	8003efc <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80019d4:	f002 f9e0 	bl	8003d98 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80019d8:	f002 fa66 	bl	8003ea8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019dc:	f7ff fe26 	bl	800162c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019e0:	f00d f82d 	bl	800ea3e <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80019e4:	2064      	movs	r0, #100	@ 0x64
 80019e6:	f002 fde7 	bl	80045b8 <HAL_Delay>
 80019ea:	e7fb      	b.n	80019e4 <main+0x30>

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	@ 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	@ 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f01b fe33 	bl	801d666 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	@ (8001ab8 <SystemClock_Config+0xcc>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <SystemClock_Config+0xcc>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <SystemClock_Config+0xd0>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <SystemClock_Config+0xd0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 f85e 	bl	8007b34 <HAL_RCC_OscConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a7e:	f000 f831 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a82:	230f      	movs	r3, #15
 8001a84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a86:	2302      	movs	r3, #2
 8001a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 fabf 	bl	8008024 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aac:	f000 f81a 	bl	8001ae4 <Error_Handler>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3750      	adds	r7, #80	@ 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001ad2:	f002 fd51 	bl	8004578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40002000 	.word	0x40002000

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <Error_Handler+0x8>

08001af0 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b0a5      	sub	sp, #148	@ 0x94
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 8001b06:	e00e      	b.n	8001b26 <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8001b08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001b0c:	1c53      	adds	r3, r2, #1
 8001b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	3390      	adds	r3, #144	@ 0x90
 8001b20:	443b      	add	r3, r7
 8001b22:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 8001b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <cdc_debug_log+0x48>
 8001b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b34:	2b13      	cmp	r3, #19
 8001b36:	d9e7      	bls.n	8001b08 <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8001b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b42:	3390      	adds	r3, #144	@ 0x90
 8001b44:	443b      	add	r3, r7
 8001b46:	223a      	movs	r2, #58	@ 0x3a
 8001b48:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 8001b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b56:	3390      	adds	r3, #144	@ 0x90
 8001b58:	443b      	add	r3, r7
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 8001b66:	e00e      	b.n	8001b86 <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 8001b68:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001b6c:	1c53      	adds	r3, r2, #1
 8001b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	3390      	adds	r3, #144	@ 0x90
 8001b80:	443b      	add	r3, r7
 8001b82:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 8001b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <cdc_debug_log+0xa8>
 8001b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b94:	2b77      	cmp	r3, #119	@ 0x77
 8001b96:	d9e7      	bls.n	8001b68 <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 8001b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ba2:	3390      	adds	r3, #144	@ 0x90
 8001ba4:	443b      	add	r3, r7
 8001ba6:	220d      	movs	r2, #13
 8001ba8:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8001bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bb6:	3390      	adds	r3, #144	@ 0x90
 8001bb8:	443b      	add	r3, r7
 8001bba:	220a      	movs	r2, #10
 8001bbc:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    /*if (len < sizeof(debug_buf)) {
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
    }*/
}
 8001bc0:	bf00      	nop
 8001bc2:	3794      	adds	r7, #148	@ 0x94
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b08b      	sub	sp, #44	@ 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da04      	bge.n	8001bf0 <int_to_str+0x24>
        is_negative = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	623b      	str	r3, [r7, #32]
        value = -value;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	425b      	negs	r3, r3
 8001bee:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d12b      	bne.n	8001c4e <int_to_str+0x82>
        str[i++] = '0';
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	2230      	movs	r2, #48	@ 0x30
 8001c04:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
        return;
 8001c10:	e05c      	b.n	8001ccc <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4b30      	ldr	r3, [pc, #192]	@ (8001cd8 <int_to_str+0x10c>)
 8001c16:	fb83 1302 	smull	r1, r3, r3, r2
 8001c1a:	1099      	asrs	r1, r3, #2
 8001c1c:	17d3      	asrs	r3, r2, #31
 8001c1e:	1ac9      	subs	r1, r1, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	1ad1      	subs	r1, r2, r3
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	6279      	str	r1, [r7, #36]	@ 0x24
 8001c32:	4619      	mov	r1, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	440b      	add	r3, r1
 8001c38:	3230      	adds	r2, #48	@ 0x30
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <int_to_str+0x10c>)
 8001c42:	fb82 1203 	smull	r1, r2, r2, r3
 8001c46:	1092      	asrs	r2, r2, #2
 8001c48:	17db      	asrs	r3, r3, #31
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd04      	ble.n	8001c5e <int_to_str+0x92>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b02      	subs	r3, #2
 8001c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbd9      	blt.n	8001c12 <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <int_to_str+0xb2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	da07      	bge.n	8001c7e <int_to_str+0xb2>
        str[i++] = '-';
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	222d      	movs	r2, #45	@ 0x2d
 8001c7c:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001c92:	e017      	b.n	8001cc4 <int_to_str+0xf8>
        char temp = str[start];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	441a      	add	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	440b      	add	r3, r1
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	7dfa      	ldrb	r2, [r7, #23]
 8001cb6:	701a      	strb	r2, [r3, #0]
        start++;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
        end--;
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbe3      	blt.n	8001c94 <int_to_str+0xc8>
    }
}
 8001ccc:	372c      	adds	r7, #44	@ 0x2c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	66666667 	.word	0x66666667

08001cdc <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8001cdc:	b4b0      	push	{r4, r5, r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <hex_to_str+0x54>)
 8001cea:	f107 040c 	add.w	r4, r7, #12
 8001cee:	461d      	mov	r5, r3
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3320      	adds	r3, #32
 8001d00:	443b      	add	r3, r7
 8001d02:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	3220      	adds	r2, #32
 8001d16:	443a      	add	r2, r7
 8001d18:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001d1c:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3302      	adds	r3, #2
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bcb0      	pop	{r4, r5, r7}
 8001d2e:	4770      	bx	lr
 8001d30:	0801ee7c 	.word	0x0801ee7c

08001d34 <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0a8      	sub	sp, #160	@ 0xa0
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <dump_data+0x108>)
 8001d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001d54:	4618      	mov	r0, r3
 8001d56:	f01b fd7c 	bl	801d852 <strcpy>
    dump_len = strlen(prefix);
 8001d5a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001d5e:	f7fe fa37 	bl	80001d0 <strlen>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	bf28      	it	cs
 8001d6e:	2310      	movcs	r3, #16
 8001d70:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001d7a:	e032      	b.n	8001de2 <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 8001d7c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f107 020c 	add.w	r2, r7, #12
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ffa5 	bl	8001cdc <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 8001d92:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001d96:	3303      	adds	r3, #3
 8001d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d9a:	d81d      	bhi.n	8001dd8 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 8001d9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001da6:	7b3a      	ldrb	r2, [r7, #12]
 8001da8:	33a0      	adds	r3, #160	@ 0xa0
 8001daa:	443b      	add	r3, r7
 8001dac:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8001db0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001dba:	7b7a      	ldrb	r2, [r7, #13]
 8001dbc:	33a0      	adds	r3, #160	@ 0xa0
 8001dbe:	443b      	add	r3, r7
 8001dc0:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8001dc4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001dce:	33a0      	adds	r3, #160	@ 0xa0
 8001dd0:	443b      	add	r3, r7
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001dd8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001de2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001de6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d203      	bcs.n	8001df6 <dump_data+0xc2>
 8001dee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001df2:	2b77      	cmp	r3, #119	@ 0x77
 8001df4:	d9c2      	bls.n	8001d7c <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d90e      	bls.n	8001e1a <dump_data+0xe6>
        const char* more = "...";
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <dump_data+0x10c>)
 8001dfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f01b fc33 	bl	801d676 <strcat>
        dump_len += 3;
 8001e10:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001e14:	3303      	adds	r3, #3
 8001e16:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 8001e1a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001e1e:	33a0      	adds	r3, #160	@ 0xa0
 8001e20:	443b      	add	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <dump_data+0x110>)
 8001e30:	f7ff fe5e 	bl	8001af0 <cdc_debug_log>
}
 8001e34:	bf00      	nop
 8001e36:	37a0      	adds	r7, #160	@ 0xa0
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	0801ee90 	.word	0x0801ee90
 8001e40:	0801ee98 	.word	0x0801ee98
 8001e44:	0801ee9c 	.word	0x0801ee9c

08001e48 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e54:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001e58:	6018      	str	r0, [r3, #0]
 8001e5a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e5e:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8001e62:	6019      	str	r1, [r3, #0]
 8001e64:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e68:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e6c:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 8001e6e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e72:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001e7c:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e90:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001e9c:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001ea0:	6809      	ldr	r1, [r1, #0]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8001eb0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001eb4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001ec0:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ed4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3303      	adds	r3, #3
 8001edc:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001ee0:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 8001ef4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ef8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	3304      	adds	r3, #4
 8001f00:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001f04:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f18:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	3305      	adds	r3, #5
 8001f20:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001f24:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001f28:	6809      	ldr	r1, [r1, #0]
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 8001f38:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8001f40:	49d7      	ldr	r1, [pc, #860]	@ (80022a0 <process_modbus_request+0x458>)
 8001f42:	48d8      	ldr	r0, [pc, #864]	@ (80022a4 <process_modbus_request+0x45c>)
 8001f44:	f7ff fdd4 	bl	8001af0 <cdc_debug_log>
        return ERR_VAL;
 8001f48:	f06f 0305 	mvn.w	r3, #5
 8001f4c:	f000 bdb5 	b.w	8002aba <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 8001f50:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d807      	bhi.n	8001f68 <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 8001f58:	49d3      	ldr	r1, [pc, #844]	@ (80022a8 <process_modbus_request+0x460>)
 8001f5a:	48d2      	ldr	r0, [pc, #840]	@ (80022a4 <process_modbus_request+0x45c>)
 8001f5c:	f7ff fdc8 	bl	8001af0 <cdc_debug_log>
        return ERR_VAL;
 8001f60:	f06f 0305 	mvn.w	r3, #5
 8001f64:	f000 bda9 	b.w	8002aba <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 8001f68:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f6c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	3306      	adds	r3, #6
 8001f74:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001f78:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 8001f86:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f8a:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	3307      	adds	r3, #7
 8001f92:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001f96:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 8001fa4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fa8:	4ac0      	ldr	r2, [pc, #768]	@ (80022ac <process_modbus_request+0x464>)
 8001faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8001fb0:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 8001fb4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f909 	bl	80001d0 <strlen>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fc4:	4413      	add	r3, r2
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fdfe 	bl	8001bcc <int_to_str>
    const char* len_prefix = " Len=";
 8001fd0:	4bb7      	ldr	r3, [pc, #732]	@ (80022b0 <process_modbus_request+0x468>)
 8001fd2:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 8001fd6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fda:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f01b fb49 	bl	801d676 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 8001fe4:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 8001fe8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe f8ef 	bl	80001d0 <strlen>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ff8:	4413      	add	r3, r2
 8001ffa:	220a      	movs	r2, #10
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7ff fde4 	bl	8001bcc <int_to_str>
    const char* fc_prefix = " FC=";
 8002004:	4bab      	ldr	r3, [pc, #684]	@ (80022b4 <process_modbus_request+0x46c>)
 8002006:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 800200a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800200e:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 8002012:	4618      	mov	r0, r3
 8002014:	f01b fb2f 	bl	801d676 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8002018:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 800201c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f8d5 	bl	80001d0 <strlen>
 8002026:	4602      	mov	r2, r0
 8002028:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800202c:	4413      	add	r3, r2
 800202e:	220a      	movs	r2, #10
 8002030:	4619      	mov	r1, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff fdca 	bl	8001bcc <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 8002038:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800203c:	4619      	mov	r1, r3
 800203e:	4899      	ldr	r0, [pc, #612]	@ (80022a4 <process_modbus_request+0x45c>)
 8002040:	f7ff fd56 	bl	8001af0 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 8002044:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002048:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002052:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002060:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800206a:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002076:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002084:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002088:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 800208a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800208e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002092:	2200      	movs	r2, #0
 8002094:	709a      	strb	r2, [r3, #2]
 8002096:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800209a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800209e:	2200      	movs	r2, #0
 80020a0:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 80020a2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020a6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020aa:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 80020ae:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 80020b6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	f040 8145 	bne.w	800234a <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 80020c0:	497d      	ldr	r1, [pc, #500]	@ (80022b8 <process_modbus_request+0x470>)
 80020c2:	4878      	ldr	r0, [pc, #480]	@ (80022a4 <process_modbus_request+0x45c>)
 80020c4:	f7ff fd14 	bl	8001af0 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 80020c8:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d817      	bhi.n	8002100 <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 80020d0:	497a      	ldr	r1, [pc, #488]	@ (80022bc <process_modbus_request+0x474>)
 80020d2:	4874      	ldr	r0, [pc, #464]	@ (80022a4 <process_modbus_request+0x45c>)
 80020d4:	f7ff fd0c 	bl	8001af0 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80020d8:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80020dc:	3b80      	subs	r3, #128	@ 0x80
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020e4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020e8:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80020ea:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020ee:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020f2:	2203      	movs	r2, #3
 80020f4:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80020fc:	f000 bc0e 	b.w	800291c <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8002100:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002104:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	3308      	adds	r3, #8
 800210c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002110:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002124:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	3309      	adds	r3, #9
 800212c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002130:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002134:	6809      	ldr	r1, [r1, #0]
 8002136:	440b      	add	r3, r1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 8002144:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002148:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	330a      	adds	r3, #10
 8002150:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002154:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b21b      	sxth	r3, r3
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002168:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	330b      	adds	r3, #11
 8002170:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002174:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002178:	6809      	ldr	r1, [r1, #0]
 800217a:	440b      	add	r3, r1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21b      	sxth	r3, r3
 8002184:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4a4c      	ldr	r2, [pc, #304]	@ (80022c0 <process_modbus_request+0x478>)
 800218e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002190:	c303      	stmia	r3!, {r0, r1}
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	3302      	adds	r3, #2
 8002196:	0c12      	lsrs	r2, r2, #16
 8002198:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 800219a:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f814 	bl	80001d0 <strlen>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4413      	add	r3, r2
 80021b0:	220a      	movs	r2, #10
 80021b2:	4619      	mov	r1, r3
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff fd09 	bl	8001bcc <int_to_str>
            const char* qty_prefix = " qty=";
 80021ba:	4b42      	ldr	r3, [pc, #264]	@ (80022c4 <process_modbus_request+0x47c>)
 80021bc:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f01b fa54 	bl	801d676 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 80021ce:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fd fffa 	bl	80001d0 <strlen>
 80021dc:	4602      	mov	r2, r0
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4413      	add	r3, r2
 80021e4:	220a      	movs	r2, #10
 80021e6:	4619      	mov	r1, r3
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff fcef 	bl	8001bcc <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	482b      	ldr	r0, [pc, #172]	@ (80022a4 <process_modbus_request+0x45c>)
 80021f6:	f7ff fc7b 	bl	8001af0 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 80021fa:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <process_modbus_request+0x3c2>
 8002202:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002206:	2b7d      	cmp	r3, #125	@ 0x7d
 8002208:	d916      	bls.n	8002238 <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 800220a:	492f      	ldr	r1, [pc, #188]	@ (80022c8 <process_modbus_request+0x480>)
 800220c:	4825      	ldr	r0, [pc, #148]	@ (80022a4 <process_modbus_request+0x45c>)
 800220e:	f7ff fc6f 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002212:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002216:	3b80      	subs	r3, #128	@ 0x80
 8002218:	b2da      	uxtb	r2, r3
 800221a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800221e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002222:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002224:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002228:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800222c:	2203      	movs	r2, #3
 800222e:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002230:	2302      	movs	r3, #2
 8002232:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002236:	e371      	b.n	800291c <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 8002238:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 800223c:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002240:	4413      	add	r3, r2
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	dd16      	ble.n	8002274 <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 8002246:	4921      	ldr	r1, [pc, #132]	@ (80022cc <process_modbus_request+0x484>)
 8002248:	4816      	ldr	r0, [pc, #88]	@ (80022a4 <process_modbus_request+0x45c>)
 800224a:	f7ff fc51 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800224e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002252:	3b80      	subs	r3, #128	@ 0x80
 8002254:	b2da      	uxtb	r2, r3
 8002256:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800225a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800225e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002260:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002264:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002268:	2202      	movs	r2, #2
 800226a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 800226c:	2302      	movs	r3, #2
 800226e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002272:	e353      	b.n	800291c <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 8002274:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002278:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800227c:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002280:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 8002282:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002286:	b2db      	uxtb	r3, r3
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002290:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002294:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 800229c:	e043      	b.n	8002326 <process_modbus_request+0x4de>
 800229e:	bf00      	nop
 80022a0:	0801eea8 	.word	0x0801eea8
 80022a4:	0801ee9c 	.word	0x0801ee9c
 80022a8:	0801eebc 	.word	0x0801eebc
 80022ac:	0801eed4 	.word	0x0801eed4
 80022b0:	0801eee0 	.word	0x0801eee0
 80022b4:	0801eee8 	.word	0x0801eee8
 80022b8:	0801eef0 	.word	0x0801eef0
 80022bc:	0801ef08 	.word	0x0801ef08
 80022c0:	0801ef20 	.word	0x0801ef20
 80022c4:	0801ef2c 	.word	0x0801ef2c
 80022c8:	0801ef34 	.word	0x0801ef34
 80022cc:	0801ef48 	.word	0x0801ef48
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 80022d0:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 80022d4:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 80022d8:	4413      	add	r3, r2
 80022da:	4abe      	ldr	r2, [pc, #760]	@ (80025d4 <process_modbus_request+0x78c>)
 80022dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	3309      	adds	r3, #9
 80022ec:	b2d1      	uxtb	r1, r2
 80022ee:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80022f2:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 80022f6:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 80022f8:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 80022fc:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002300:	4413      	add	r3, r2
 8002302:	4ab4      	ldr	r2, [pc, #720]	@ (80025d4 <process_modbus_request+0x78c>)
 8002304:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002308:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800230c:	3305      	adds	r3, #5
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	b2d1      	uxtb	r1, r2
 8002312:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002316:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800231a:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 800231c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002320:	3301      	adds	r3, #1
 8002322:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 8002326:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 800232a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800232e:	429a      	cmp	r2, r3
 8002330:	d3ce      	bcc.n	80022d0 <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 8002332:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002336:	3301      	adds	r3, #1
 8002338:	b29b      	uxth	r3, r3
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 8002340:	49a5      	ldr	r1, [pc, #660]	@ (80025d8 <process_modbus_request+0x790>)
 8002342:	48a6      	ldr	r0, [pc, #664]	@ (80025dc <process_modbus_request+0x794>)
 8002344:	f7ff fbd4 	bl	8001af0 <cdc_debug_log>
 8002348:	e2e8      	b.n	800291c <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 800234a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800234e:	2b06      	cmp	r3, #6
 8002350:	f040 811c 	bne.w	800258c <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 8002354:	49a2      	ldr	r1, [pc, #648]	@ (80025e0 <process_modbus_request+0x798>)
 8002356:	48a1      	ldr	r0, [pc, #644]	@ (80025dc <process_modbus_request+0x794>)
 8002358:	f7ff fbca 	bl	8001af0 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 800235c:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002360:	2b05      	cmp	r3, #5
 8002362:	d816      	bhi.n	8002392 <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 8002364:	499f      	ldr	r1, [pc, #636]	@ (80025e4 <process_modbus_request+0x79c>)
 8002366:	489d      	ldr	r0, [pc, #628]	@ (80025dc <process_modbus_request+0x794>)
 8002368:	f7ff fbc2 	bl	8001af0 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 800236c:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002370:	3b80      	subs	r3, #128	@ 0x80
 8002372:	b2da      	uxtb	r2, r3
 8002374:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002378:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800237c:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 800237e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002382:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002386:	2203      	movs	r2, #3
 8002388:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 800238a:	2302      	movs	r3, #2
 800238c:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002390:	e2c4      	b.n	800291c <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 8002392:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002396:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	3308      	adds	r3, #8
 800239e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80023a2:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023b6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	3309      	adds	r3, #9
 80023be:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80023c2:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80023c6:	6809      	ldr	r1, [r1, #0]
 80023c8:	440b      	add	r3, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 80023d6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023da:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	330a      	adds	r3, #10
 80023e2:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80023e6:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023fa:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	330b      	adds	r3, #11
 8002402:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002406:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800240a:	6809      	ldr	r1, [r1, #0]
 800240c:	440b      	add	r3, r1
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b21b      	sxth	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b21b      	sxth	r3, r3
 8002416:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4a72      	ldr	r2, [pc, #456]	@ (80025e8 <process_modbus_request+0x7a0>)
 8002420:	ca07      	ldmia	r2, {r0, r1, r2}
 8002422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002426:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd fece 	bl	80001d0 <strlen>
 8002434:	4602      	mov	r2, r0
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4413      	add	r3, r2
 800243c:	220a      	movs	r2, #10
 800243e:	4619      	mov	r1, r3
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff fbc3 	bl	8001bcc <int_to_str>
            const char* val_prefix = " val=0x";
 8002446:	4b69      	ldr	r3, [pc, #420]	@ (80025ec <process_modbus_request+0x7a4>)
 8002448:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 8002454:	4618      	mov	r0, r3
 8002456:	f01b f90e 	bl	801d676 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 800245a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800245e:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 8002462:	2200      	movs	r2, #0
 8002464:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 8002466:	2303      	movs	r3, #3
 8002468:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 800246c:	e027      	b.n	80024be <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 800246e:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8002472:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa42 f303 	asr.w	r3, r2, r3
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8002484:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002488:	2b09      	cmp	r3, #9
 800248a:	dc05      	bgt.n	8002498 <process_modbus_request+0x650>
 800248c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3330      	adds	r3, #48	@ 0x30
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e004      	b.n	80024a2 <process_modbus_request+0x65a>
 8002498:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3337      	adds	r3, #55	@ 0x37
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80024a6:	f1c2 0203 	rsb	r2, r2, #3
 80024aa:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80024ae:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 80024b2:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 80024b4:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80024b8:	3b01      	subs	r3, #1
 80024ba:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80024be:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	dad3      	bge.n	800246e <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 80024c6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f01b f8d0 	bl	801d676 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	483f      	ldr	r0, [pc, #252]	@ (80025dc <process_modbus_request+0x794>)
 80024de:	f7ff fb07 	bl	8001af0 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 80024e2:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80024e6:	2b63      	cmp	r3, #99	@ 0x63
 80024e8:	d916      	bls.n	8002518 <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 80024ea:	4941      	ldr	r1, [pc, #260]	@ (80025f0 <process_modbus_request+0x7a8>)
 80024ec:	483b      	ldr	r0, [pc, #236]	@ (80025dc <process_modbus_request+0x794>)
 80024ee:	f7ff faff 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80024f2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80024f6:	3b80      	subs	r3, #128	@ 0x80
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024fe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002502:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002504:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002508:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800250c:	2202      	movs	r2, #2
 800250e:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002510:	2302      	movs	r3, #2
 8002512:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002516:	e201      	b.n	800291c <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8002518:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 800251c:	492d      	ldr	r1, [pc, #180]	@ (80025d4 <process_modbus_request+0x78c>)
 800251e:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8002522:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 8002526:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800252a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800252e:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002532:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 8002534:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	b29b      	uxth	r3, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002542:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002546:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 8002548:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 800254c:	b2da      	uxtb	r2, r3
 800254e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002552:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002556:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 8002558:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b29b      	uxth	r3, r3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002566:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800256a:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 800256c:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002570:	b2da      	uxtb	r2, r3
 8002572:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002576:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800257a:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 800257c:	2305      	movs	r3, #5
 800257e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 8002582:	491c      	ldr	r1, [pc, #112]	@ (80025f4 <process_modbus_request+0x7ac>)
 8002584:	4815      	ldr	r0, [pc, #84]	@ (80025dc <process_modbus_request+0x794>)
 8002586:	f7ff fab3 	bl	8001af0 <cdc_debug_log>
 800258a:	e1c7      	b.n	800291c <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 800258c:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002590:	2b10      	cmp	r3, #16
 8002592:	f040 81ad 	bne.w	80028f0 <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 8002596:	4918      	ldr	r1, [pc, #96]	@ (80025f8 <process_modbus_request+0x7b0>)
 8002598:	4810      	ldr	r0, [pc, #64]	@ (80025dc <process_modbus_request+0x794>)
 800259a:	f7ff faa9 	bl	8001af0 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 800259e:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d82c      	bhi.n	8002600 <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 80025a6:	4915      	ldr	r1, [pc, #84]	@ (80025fc <process_modbus_request+0x7b4>)
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <process_modbus_request+0x794>)
 80025aa:	f7ff faa1 	bl	8001af0 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80025ae:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80025b2:	3b80      	subs	r3, #128	@ 0x80
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025ba:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025be:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80025c0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025c4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025c8:	2203      	movs	r2, #3
 80025ca:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80025d2:	e1a3      	b.n	800291c <process_modbus_request+0xad4>
 80025d4:	2000058c 	.word	0x2000058c
 80025d8:	0801ef60 	.word	0x0801ef60
 80025dc:	0801ee9c 	.word	0x0801ee9c
 80025e0:	0801ef70 	.word	0x0801ef70
 80025e4:	0801ef88 	.word	0x0801ef88
 80025e8:	0801efa8 	.word	0x0801efa8
 80025ec:	0801efb4 	.word	0x0801efb4
 80025f0:	0801efbc 	.word	0x0801efbc
 80025f4:	0801efd8 	.word	0x0801efd8
 80025f8:	0801eff0 	.word	0x0801eff0
 80025fc:	0801f00c 	.word	0x0801f00c
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 8002600:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002604:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	3308      	adds	r3, #8
 800260c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002610:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b21b      	sxth	r3, r3
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002624:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	3309      	adds	r3, #9
 800262c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002630:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002634:	6809      	ldr	r1, [r1, #0]
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b21b      	sxth	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b21b      	sxth	r3, r3
 8002640:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 8002644:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002648:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	330a      	adds	r3, #10
 8002650:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002654:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b21b      	sxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b21a      	sxth	r2, r3
 8002664:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002668:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	330b      	adds	r3, #11
 8002670:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002674:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002678:	6809      	ldr	r1, [r1, #0]
 800267a:	440b      	add	r3, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b21b      	sxth	r3, r3
 8002680:	4313      	orrs	r3, r2
 8002682:	b21b      	sxth	r3, r3
 8002684:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 8002688:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800268c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002698:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4a89      	ldr	r2, [pc, #548]	@ (80028d0 <process_modbus_request+0xa88>)
 80026ac:	461c      	mov	r4, r3
 80026ae:	4615      	mov	r5, r2
 80026b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 80026b8:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fd85 	bl	80001d0 <strlen>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4413      	add	r3, r2
 80026ce:	220a      	movs	r2, #10
 80026d0:	4619      	mov	r1, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fa7a 	bl	8001bcc <int_to_str>
            const char* qty_prefix = " qty=";
 80026d8:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <process_modbus_request+0xa8c>)
 80026da:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 80026e6:	4618      	mov	r0, r3
 80026e8:	f01a ffc5 	bl	801d676 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 80026ec:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fd6b 	bl	80001d0 <strlen>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4413      	add	r3, r2
 8002702:	220a      	movs	r2, #10
 8002704:	4619      	mov	r1, r3
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff fa60 	bl	8001bcc <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4871      	ldr	r0, [pc, #452]	@ (80028d8 <process_modbus_request+0xa90>)
 8002714:	f7ff f9ec 	bl	8001af0 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8002718:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <process_modbus_request+0x8ee>
 8002720:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002724:	2b7b      	cmp	r3, #123	@ 0x7b
 8002726:	d806      	bhi.n	8002736 <process_modbus_request+0x8ee>
 8002728:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 800272c:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	429a      	cmp	r2, r3
 8002734:	d016      	beq.n	8002764 <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 8002736:	4969      	ldr	r1, [pc, #420]	@ (80028dc <process_modbus_request+0xa94>)
 8002738:	4867      	ldr	r0, [pc, #412]	@ (80028d8 <process_modbus_request+0xa90>)
 800273a:	f7ff f9d9 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800273e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002742:	3b80      	subs	r3, #128	@ 0x80
 8002744:	b2da      	uxtb	r2, r3
 8002746:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800274a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800274e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002750:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002754:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002758:	2203      	movs	r2, #3
 800275a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 800275c:	2302      	movs	r3, #2
 800275e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002762:	e0db      	b.n	800291c <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 8002764:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002768:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 800276c:	4413      	add	r3, r2
 800276e:	2b64      	cmp	r3, #100	@ 0x64
 8002770:	dd16      	ble.n	80027a0 <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 8002772:	495b      	ldr	r1, [pc, #364]	@ (80028e0 <process_modbus_request+0xa98>)
 8002774:	4858      	ldr	r0, [pc, #352]	@ (80028d8 <process_modbus_request+0xa90>)
 8002776:	f7ff f9bb 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800277a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800277e:	3b80      	subs	r3, #128	@ 0x80
 8002780:	b2da      	uxtb	r2, r3
 8002782:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002786:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800278a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 800278c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002790:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002794:	2202      	movs	r2, #2
 8002796:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002798:	2302      	movs	r3, #2
 800279a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800279e:	e0bd      	b.n	800291c <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 80027a0:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80027a4:	1d9a      	adds	r2, r3, #6
 80027a6:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80027aa:	429a      	cmp	r2, r3
 80027ac:	db16      	blt.n	80027dc <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 80027ae:	494d      	ldr	r1, [pc, #308]	@ (80028e4 <process_modbus_request+0xa9c>)
 80027b0:	4849      	ldr	r0, [pc, #292]	@ (80028d8 <process_modbus_request+0xa90>)
 80027b2:	f7ff f99d 	bl	8001af0 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80027b6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80027ba:	3b80      	subs	r3, #128	@ 0x80
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027c2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027c6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 80027c8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027cc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027d0:	2203      	movs	r2, #3
 80027d2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80027da:	e09f      	b.n	800291c <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 80027e2:	e03c      	b.n	800285e <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 80027e4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027e8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	f103 020d 	add.w	r2, r3, #13
 80027f2:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	461a      	mov	r2, r3
 80027fc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002800:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b21b      	sxth	r3, r3
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002814:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	f103 010e 	add.w	r1, r3, #14
 800281e:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	4619      	mov	r1, r3
 8002828:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800282c:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	440b      	add	r3, r1
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b21b      	sxth	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b21b      	sxth	r3, r3
 800283c:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 8002840:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002844:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002848:	4413      	add	r3, r2
 800284a:	4927      	ldr	r1, [pc, #156]	@ (80028e8 <process_modbus_request+0xaa0>)
 800284c:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 8002850:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 8002854:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002858:	3301      	adds	r3, #1
 800285a:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 800285e:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 8002862:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002866:	429a      	cmp	r2, r3
 8002868:	d3bc      	bcc.n	80027e4 <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 800286a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800286e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002872:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002876:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 8002878:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b29b      	uxth	r3, r3
 8002880:	b2da      	uxtb	r2, r3
 8002882:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002886:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800288a:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 800288c:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002896:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800289a:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 800289c:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028aa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028ae:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 80028b0:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028ba:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028be:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 80028c0:	2305      	movs	r3, #5
 80028c2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 80028c6:	4909      	ldr	r1, [pc, #36]	@ (80028ec <process_modbus_request+0xaa4>)
 80028c8:	4803      	ldr	r0, [pc, #12]	@ (80028d8 <process_modbus_request+0xa90>)
 80028ca:	f7ff f911 	bl	8001af0 <cdc_debug_log>
 80028ce:	e025      	b.n	800291c <process_modbus_request+0xad4>
 80028d0:	0801f030 	.word	0x0801f030
 80028d4:	0801ef2c 	.word	0x0801ef2c
 80028d8:	0801ee9c 	.word	0x0801ee9c
 80028dc:	0801f044 	.word	0x0801f044
 80028e0:	0801f068 	.word	0x0801f068
 80028e4:	0801f090 	.word	0x0801f090
 80028e8:	2000058c 	.word	0x2000058c
 80028ec:	0801f0b0 	.word	0x0801f0b0
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 80028f0:	4974      	ldr	r1, [pc, #464]	@ (8002ac4 <process_modbus_request+0xc7c>)
 80028f2:	4875      	ldr	r0, [pc, #468]	@ (8002ac8 <process_modbus_request+0xc80>)
 80028f4:	f7ff f8fc 	bl	8001af0 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 80028f8:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028fc:	3b80      	subs	r3, #128	@ 0x80
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002904:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002908:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 800290a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800290e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002912:	2201      	movs	r2, #1
 8002914:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8002916:	2302      	movs	r3, #2
 8002918:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 800291c:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 8002920:	3301      	adds	r3, #1
 8002922:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8002926:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002934:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002938:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 800293a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 800293e:	b2da      	uxtb	r2, r3
 8002940:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002944:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002948:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 800294a:	4960      	ldr	r1, [pc, #384]	@ (8002acc <process_modbus_request+0xc84>)
 800294c:	485e      	ldr	r0, [pc, #376]	@ (8002ac8 <process_modbus_request+0xc80>)
 800294e:	f7ff f8cf 	bl	8001af0 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 8002952:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002956:	3306      	adds	r3, #6
 8002958:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 800295c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002960:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800296a:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 800296e:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 8002972:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8002976:	429a      	cmp	r2, r3
 8002978:	d223      	bcs.n	80029c2 <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4a54      	ldr	r2, [pc, #336]	@ (8002ad0 <process_modbus_request+0xc88>)
 8002980:	461c      	mov	r4, r3
 8002982:	4615      	mov	r5, r2
 8002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800298c:	c403      	stmia	r4!, {r0, r1}
 800298e:	8022      	strh	r2, [r4, #0]
 8002990:	3402      	adds	r4, #2
 8002992:	0c13      	lsrs	r3, r2, #16
 8002994:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8002996:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fc16 	bl	80001d0 <strlen>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4413      	add	r3, r2
 80029ac:	220a      	movs	r2, #10
 80029ae:	4619      	mov	r1, r3
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff f90b 	bl	8001bcc <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4842      	ldr	r0, [pc, #264]	@ (8002ac8 <process_modbus_request+0xc80>)
 80029be:	f7ff f897 	bl	8001af0 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 80029c2:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 80029c6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80029ca:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029ce:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 80029d2:	2301      	movs	r3, #1
 80029d4:	6800      	ldr	r0, [r0, #0]
 80029d6:	f015 fa21 	bl	8017e1c <tcp_write>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 80029e0:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02f      	beq.n	8002a48 <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4a39      	ldr	r2, [pc, #228]	@ (8002ad4 <process_modbus_request+0xc8c>)
 80029ee:	461c      	mov	r4, r3
 80029f0:	4615      	mov	r5, r2
 80029f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029fa:	6020      	str	r0, [r4, #0]
 80029fc:	3404      	adds	r4, #4
 80029fe:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8002a00:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fbe1 	bl	80001d0 <strlen>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4413      	add	r3, r2
 8002a16:	220a      	movs	r2, #10
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f7ff f8d6 	bl	8001bcc <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4828      	ldr	r0, [pc, #160]	@ (8002ac8 <process_modbus_request+0xc80>)
 8002a28:	f7ff f862 	bl	8001af0 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 8002a2c:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d106      	bne.n	8002a44 <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 8002a36:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a3a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	f015 ffd6 	bl	80189f0 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8002a44:	2300      	movs	r3, #0
 8002a46:	e038      	b.n	8002aba <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 8002a48:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a4c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	f015 ffcd 	bl	80189f0 <tcp_output>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 8002a5c:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d025      	beq.n	8002ab0 <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <process_modbus_request+0xc90>)
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	4615      	mov	r5, r2
 8002a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a76:	6020      	str	r0, [r4, #0]
 8002a78:	3404      	adds	r4, #4
 8002a7a:	8021      	strh	r1, [r4, #0]
 8002a7c:	3402      	adds	r4, #2
 8002a7e:	0c0b      	lsrs	r3, r1, #16
 8002a80:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 8002a82:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fba0 	bl	80001d0 <strlen>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4413      	add	r3, r2
 8002a98:	220a      	movs	r2, #10
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7ff f895 	bl	8001bcc <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	@ (8002ac8 <process_modbus_request+0xc80>)
 8002aaa:	f7ff f821 	bl	8001af0 <cdc_debug_log>
 8002aae:	e003      	b.n	8002ab8 <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 8002ab0:	490a      	ldr	r1, [pc, #40]	@ (8002adc <process_modbus_request+0xc94>)
 8002ab2:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <process_modbus_request+0xc80>)
 8002ab4:	f7ff f81c 	bl	8001af0 <cdc_debug_log>
    }
    
    return ERR_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac4:	0801f0c8 	.word	0x0801f0c8
 8002ac8:	0801ee9c 	.word	0x0801ee9c
 8002acc:	0801f0e4 	.word	0x0801f0e4
 8002ad0:	0801f0f4 	.word	0x0801f0f4
 8002ad4:	0801f110 	.word	0x0801f110
 8002ad8:	0801f128 	.word	0x0801f128
 8002adc:	0801f140 	.word	0x0801f140

08002ae0 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b0ac      	sub	sp, #176	@ 0xb0
 8002ae4:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002aec:	e00a      	b.n	8002b04 <modbus_tcp_init+0x24>
        holding_regs[i] = 3;
 8002aee:	4a8f      	ldr	r2, [pc, #572]	@ (8002d2c <modbus_tcp_init+0x24c>)
 8002af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002af4:	2103      	movs	r1, #3
 8002af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002afe:	3301      	adds	r3, #1
 8002b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b08:	2b63      	cmp	r3, #99	@ 0x63
 8002b0a:	ddf0      	ble.n	8002aee <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8002b0c:	4988      	ldr	r1, [pc, #544]	@ (8002d30 <modbus_tcp_init+0x250>)
 8002b0e:	4889      	ldr	r0, [pc, #548]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002b10:	f7fe ffee 	bl	8001af0 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	e09f      	b.n	8002c5c <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8002b1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b20:	4a85      	ldr	r2, [pc, #532]	@ (8002d38 <modbus_tcp_init+0x258>)
 8002b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b26:	6018      	str	r0, [r3, #0]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 8002b2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fb4d 	bl	80001d0 <strlen>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b3c:	4413      	add	r3, r2
 8002b3e:	220a      	movs	r2, #10
 8002b40:	4619      	mov	r1, r3
 8002b42:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002b46:	f7ff f841 	bl	8001bcc <int_to_str>
        strcat(reg_info, "]=0x");
 8002b4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb3e 	bl	80001d0 <strlen>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a77      	ldr	r2, [pc, #476]	@ (8002d3c <modbus_tcp_init+0x25c>)
 8002b60:	6810      	ldr	r0, [r2, #0]
 8002b62:	6018      	str	r0, [r3, #0]
 8002b64:	7912      	ldrb	r2, [r2, #4]
 8002b66:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 8002b68:	4a70      	ldr	r2, [pc, #448]	@ (8002d2c <modbus_tcp_init+0x24c>)
 8002b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b72:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b82:	e026      	b.n	8002bd2 <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 8002b84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002b88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	fa42 f303 	asr.w	r3, r2, r3
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8002b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b9e:	2b09      	cmp	r3, #9
 8002ba0:	dc05      	bgt.n	8002bae <modbus_tcp_init+0xce>
 8002ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3330      	adds	r3, #48	@ 0x30
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e004      	b.n	8002bb8 <modbus_tcp_init+0xd8>
 8002bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3337      	adds	r3, #55	@ 0x37
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002bbc:	f1c2 0203 	rsb	r2, r2, #3
 8002bc0:	32b0      	adds	r2, #176	@ 0xb0
 8002bc2:	443a      	add	r2, r7
 8002bc4:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8002bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	dad4      	bge.n	8002b84 <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 8002bda:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002bde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f01a fd46 	bl	801d676 <strcat>
        strcat(reg_info, " (");
 8002bea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd faee 	bl	80001d0 <strlen>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <modbus_tcp_init+0x260>)
 8002c00:	8811      	ldrh	r1, [r2, #0]
 8002c02:	7892      	ldrb	r2, [r2, #2]
 8002c04:	8019      	strh	r1, [r3, #0]
 8002c06:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8002c08:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8002c0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fadd 	bl	80001d0 <strlen>
 8002c16:	4602      	mov	r2, r0
 8002c18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c1c:	4413      	add	r3, r2
 8002c1e:	220a      	movs	r2, #10
 8002c20:	4619      	mov	r1, r3
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7fe ffd2 	bl	8001bcc <int_to_str>
        strcat(reg_info, ")");
 8002c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd facf 	bl	80001d0 <strlen>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4941      	ldr	r1, [pc, #260]	@ (8002d44 <modbus_tcp_init+0x264>)
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 8002c46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4839      	ldr	r0, [pc, #228]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002c4e:	f7fe ff4f 	bl	8001af0 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 8002c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	f77f af5b 	ble.w	8002b1c <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 8002c66:	4938      	ldr	r1, [pc, #224]	@ (8002d48 <modbus_tcp_init+0x268>)
 8002c68:	4832      	ldr	r0, [pc, #200]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002c6a:	f7fe ff41 	bl	8001af0 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 8002c6e:	f012 f9d3 	bl	8015018 <tcp_new>
 8002c72:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 8002c7e:	4933      	ldr	r1, [pc, #204]	@ (8002d4c <modbus_tcp_init+0x26c>)
 8002c80:	482c      	ldr	r0, [pc, #176]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002c82:	f7fe ff35 	bl	8001af0 <cdc_debug_log>
        return;
 8002c86:	e04e      	b.n	8002d26 <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 8002c88:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8002c8c:	4930      	ldr	r1, [pc, #192]	@ (8002d50 <modbus_tcp_init+0x270>)
 8002c8e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002c92:	f011 f91b 	bl	8013ecc <tcp_bind>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 8002c9c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d027      	beq.n	8002cf4 <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d54 <modbus_tcp_init+0x274>)
 8002ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f01a fdce 	bl	801d852 <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 8002cb6:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 8002cba:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002cbe:	f7fd fa87 	bl	80001d0 <strlen>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	189d      	adds	r5, r3, r2
 8002cc8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002ccc:	f7fd fa80 	bl	80001d0 <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fe ff76 	bl	8001bcc <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4813      	ldr	r0, [pc, #76]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002ce6:	f7fe ff03 	bl	8001af0 <cdc_debug_log>
        tcp_close(tpcb);
 8002cea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002cee:	f010 fff7 	bl	8013ce0 <tcp_close>
 8002cf2:	e018      	b.n	8002d26 <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 8002cf4:	21ff      	movs	r1, #255	@ 0xff
 8002cf6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002cfa:	f011 f99f 	bl	801403c <tcp_listen_with_backlog>
 8002cfe:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 8002d0a:	4913      	ldr	r1, [pc, #76]	@ (8002d58 <modbus_tcp_init+0x278>)
 8002d0c:	4809      	ldr	r0, [pc, #36]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002d0e:	f7fe feef 	bl	8001af0 <cdc_debug_log>
        return;
 8002d12:	e008      	b.n	8002d26 <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 8002d14:	4911      	ldr	r1, [pc, #68]	@ (8002d5c <modbus_tcp_init+0x27c>)
 8002d16:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d1a:	f012 f9eb 	bl	80150f4 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8002d1e:	4910      	ldr	r1, [pc, #64]	@ (8002d60 <modbus_tcp_init+0x280>)
 8002d20:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <modbus_tcp_init+0x254>)
 8002d22:	f7fe fee5 	bl	8001af0 <cdc_debug_log>
}
 8002d26:	37b0      	adds	r7, #176	@ 0xb0
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	2000058c 	.word	0x2000058c
 8002d30:	0801f158 	.word	0x0801f158
 8002d34:	0801ee9c 	.word	0x0801ee9c
 8002d38:	0801f17c 	.word	0x0801f17c
 8002d3c:	0801f184 	.word	0x0801f184
 8002d40:	0801f18c 	.word	0x0801f18c
 8002d44:	0801f190 	.word	0x0801f190
 8002d48:	0801f194 	.word	0x0801f194
 8002d4c:	0801f1b8 	.word	0x0801f1b8
 8002d50:	08022eac 	.word	0x08022eac
 8002d54:	0801f1d4 	.word	0x0801f1d4
 8002d58:	0801f1e8 	.word	0x0801f1e8
 8002d5c:	08002e35 	.word	0x08002e35
 8002d60:	0801f20c 	.word	0x0801f20c

08002d64 <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b08f      	sub	sp, #60	@ 0x3c
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <modbus_tcp_sent+0x70>)
 8002d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d7a:	c303      	stmia	r3!, {r0, r1}
 8002d7c:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 8002d7e:	88fc      	ldrh	r4, [r7, #6]
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fa23 	bl	80001d0 <strlen>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4413      	add	r3, r2
 8002d92:	220a      	movs	r2, #10
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7fe ff18 	bl	8001bcc <int_to_str>
    strcat(sent_msg, " bytes");
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fa15 	bl	80001d0 <strlen>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	4413      	add	r3, r2
 8002db0:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <modbus_tcp_sent+0x74>)
 8002db2:	6810      	ldr	r0, [r2, #0]
 8002db4:	6018      	str	r0, [r3, #0]
 8002db6:	8891      	ldrh	r1, [r2, #4]
 8002db8:	7992      	ldrb	r2, [r2, #6]
 8002dba:	8099      	strh	r1, [r3, #4]
 8002dbc:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	@ (8002ddc <modbus_tcp_sent+0x78>)
 8002dc6:	f7fe fe93 	bl	8001af0 <cdc_debug_log>
    return ERR_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	373c      	adds	r7, #60	@ 0x3c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	0801f22c 	.word	0x0801f22c
 8002dd8:	0801f238 	.word	0x0801f238
 8002ddc:	0801ee9c 	.word	0x0801ee9c

08002de0 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b08d      	sub	sp, #52	@ 0x34
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <modbus_tcp_error+0x4c>)
 8002df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8002df8:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd f9e5 	bl	80001d0 <strlen>
 8002e06:	4602      	mov	r2, r0
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4413      	add	r3, r2
 8002e0e:	220a      	movs	r2, #10
 8002e10:	4619      	mov	r1, r3
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7fe feda 	bl	8001bcc <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <modbus_tcp_error+0x50>)
 8002e20:	f7fe fe66 	bl	8001af0 <cdc_debug_log>
}
 8002e24:	bf00      	nop
 8002e26:	3734      	adds	r7, #52	@ 0x34
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	0801f240 	.word	0x0801f240
 8002e30:	0801ee9c 	.word	0x0801ee9c

08002e34 <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <modbus_tcp_accept+0x1c>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 8002e50:	4911      	ldr	r1, [pc, #68]	@ (8002e98 <modbus_tcp_accept+0x64>)
 8002e52:	4812      	ldr	r0, [pc, #72]	@ (8002e9c <modbus_tcp_accept+0x68>)
 8002e54:	f7fe fe4c 	bl	8001af0 <cdc_debug_log>
        return err;
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	e017      	b.n	8002e8e <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 8002e5e:	4910      	ldr	r1, [pc, #64]	@ (8002ea0 <modbus_tcp_accept+0x6c>)
 8002e60:	480e      	ldr	r0, [pc, #56]	@ (8002e9c <modbus_tcp_accept+0x68>)
 8002e62:	f7fe fe45 	bl	8001af0 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002e66:	2101      	movs	r1, #1
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f011 fee3 	bl	8014c34 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 8002e6e:	490d      	ldr	r1, [pc, #52]	@ (8002ea4 <modbus_tcp_accept+0x70>)
 8002e70:	68b8      	ldr	r0, [r7, #8]
 8002e72:	f012 f8d9 	bl	8015028 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 8002e76:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <modbus_tcp_accept+0x74>)
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f012 f8f7 	bl	801506c <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 8002e7e:	490b      	ldr	r1, [pc, #44]	@ (8002eac <modbus_tcp_accept+0x78>)
 8002e80:	68b8      	ldr	r0, [r7, #8]
 8002e82:	f012 f915 	bl	80150b0 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 8002e86:	68b8      	ldr	r0, [r7, #8]
 8002e88:	f016 fc1a 	bl	80196c0 <tcp_keepalive>
    
    return ERR_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	0801f24c 	.word	0x0801f24c
 8002e9c:	0801ee9c 	.word	0x0801ee9c
 8002ea0:	0801f25c 	.word	0x0801f25c
 8002ea4:	08002eb1 	.word	0x08002eb1
 8002ea8:	08002d65 	.word	0x08002d65
 8002eac:	08002de1 	.word	0x08002de1

08002eb0 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8002ebc:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8002ec0:	6020      	str	r0, [r4, #0]
 8002ec2:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 8002ec6:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 8002eca:	6001      	str	r1, [r0, #0]
 8002ecc:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8002ed0:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8002ed4:	600a      	str	r2, [r1, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002edc:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002ee0:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 8002ee2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002ee6:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002eea:	f993 3000 	ldrsb.w	r3, [r3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 8002ef2:	49bf      	ldr	r1, [pc, #764]	@ (80031f0 <modbus_tcp_recv+0x340>)
 8002ef4:	48bf      	ldr	r0, [pc, #764]	@ (80031f4 <modbus_tcp_recv+0x344>)
 8002ef6:	f7fe fdfb 	bl	8001af0 <cdc_debug_log>
        if (p != NULL) {
 8002efa:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002efe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8002f08:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f0c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f010 fa3b 	bl	801338c <pbuf_free>
        }
        return err;
 8002f16:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f1a:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f22:	e15f      	b.n	80031e4 <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 8002f24:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f28:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 8002f32:	49b1      	ldr	r1, [pc, #708]	@ (80031f8 <modbus_tcp_recv+0x348>)
 8002f34:	48af      	ldr	r0, [pc, #700]	@ (80031f4 <modbus_tcp_recv+0x344>)
 8002f36:	f7fe fddb 	bl	8001af0 <cdc_debug_log>
        tcp_close(tpcb);
 8002f3a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f3e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	f010 fecc 	bl	8013ce0 <tcp_close>
        return ERR_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e14b      	b.n	80031e4 <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 8002f4c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f50:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	891b      	ldrh	r3, [r3, #8]
 8002f58:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 8002f5c:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8002f60:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f64:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002f68:	4611      	mov	r1, r2
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f011 f97c 	bl	8014268 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 8002f70:	4ba2      	ldr	r3, [pc, #648]	@ (80031fc <modbus_tcp_recv+0x34c>)
 8002f72:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 8002f76:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002f7a:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f01a fc67 	bl	801d852 <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 8002f84:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 8002f88:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8002f8c:	f7fd f920 	bl	80001d0 <strlen>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002f96:	189d      	adds	r5, r3, r2
 8002f98:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8002f9c:	f7fd f918 	bl	80001d0 <strlen>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fe fe0e 	bl	8001bcc <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8002fb0:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	488f      	ldr	r0, [pc, #572]	@ (80031f4 <modbus_tcp_recv+0x344>)
 8002fb8:	f7fe fd9a 	bl	8001af0 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8002fbc:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8002fc0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002fc4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002fc8:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6800      	ldr	r0, [r0, #0]
 8002fd0:	f010 fbd2 	bl	8013778 <pbuf_copy_partial>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 8002fda:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002fde:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	f010 f9d2 	bl	801338c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8002fe8:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002fec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fe9e 	bl	8001d34 <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8002ff8:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	d806      	bhi.n	800300e <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8003000:	497f      	ldr	r1, [pc, #508]	@ (8003200 <modbus_tcp_recv+0x350>)
 8003002:	487c      	ldr	r0, [pc, #496]	@ (80031f4 <modbus_tcp_recv+0x344>)
 8003004:	f7fe fd74 	bl	8001af0 <cdc_debug_log>
        return ERR_VAL;
 8003008:	f06f 0305 	mvn.w	r3, #5
 800300c:	e0ea      	b.n	80031e4 <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 800301a:	e092      	b.n	8003142 <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 800301c:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003020:	1d5a      	adds	r2, r3, #5
 8003022:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003026:	429a      	cmp	r2, r3
 8003028:	db04      	blt.n	8003034 <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 800302a:	4976      	ldr	r1, [pc, #472]	@ (8003204 <modbus_tcp_recv+0x354>)
 800302c:	4871      	ldr	r0, [pc, #452]	@ (80031f4 <modbus_tcp_recv+0x344>)
 800302e:	f7fe fd5f 	bl	8001af0 <cdc_debug_log>
            break;
 8003032:	e093      	b.n	800315c <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 8003034:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003038:	3304      	adds	r3, #4
 800303a:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800303e:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	b21b      	sxth	r3, r3
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	b21a      	sxth	r2, r3
 800304a:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 800304e:	3305      	adds	r3, #5
 8003050:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8003054:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	b21b      	sxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b21b      	sxth	r3, r3
 8003060:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 8003064:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8003068:	3306      	adds	r3, #6
 800306a:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 800306e:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003072:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8003076:	441a      	add	r2, r3
 8003078:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800307c:	429a      	cmp	r2, r3
 800307e:	dd21      	ble.n	80030c4 <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4a60      	ldr	r2, [pc, #384]	@ (8003208 <modbus_tcp_recv+0x358>)
 8003086:	461c      	mov	r4, r3
 8003088:	4615      	mov	r5, r2
 800308a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 8003096:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd f896 	bl	80001d0 <strlen>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	4413      	add	r3, r2
 80030ac:	220a      	movs	r2, #10
 80030ae:	4619      	mov	r1, r3
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7fe fd8b 	bl	8001bcc <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 80030b6:	f107 0310 	add.w	r3, r7, #16
 80030ba:	4619      	mov	r1, r3
 80030bc:	484d      	ldr	r0, [pc, #308]	@ (80031f4 <modbus_tcp_recv+0x344>)
 80030be:	f7fe fd17 	bl	8001af0 <cdc_debug_log>
            break;
 80030c2:	e04b      	b.n	800315c <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <modbus_tcp_recv+0x35c>)
 80030ca:	461c      	mov	r4, r3
 80030cc:	4615      	mov	r5, r2
 80030ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d2:	682b      	ldr	r3, [r5, #0]
 80030d4:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 80030d6:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80030da:	1c5c      	adds	r4, r3, #1
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f875 	bl	80001d0 <strlen>
 80030e6:	4602      	mov	r2, r0
 80030e8:	f107 0310 	add.w	r3, r7, #16
 80030ec:	4413      	add	r3, r2
 80030ee:	220a      	movs	r2, #10
 80030f0:	4619      	mov	r1, r3
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7fe fd6a 	bl	8001bcc <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	4619      	mov	r1, r3
 80030fe:	483d      	ldr	r0, [pc, #244]	@ (80031f4 <modbus_tcp_recv+0x344>)
 8003100:	f7fe fcf6 	bl	8001af0 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 8003104:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003108:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800310c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003110:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f7fe fe97 	bl	8001e48 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 800311a:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800311e:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8003122:	4413      	add	r3, r2
 8003124:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 8003128:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800312c:	3301      	adds	r3, #1
 800312e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 8003132:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d103      	bne.n	8003142 <modbus_tcp_recv+0x292>
 800313a:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800313e:	2b01      	cmp	r3, #1
 8003140:	d00b      	beq.n	800315a <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8003142:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003146:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800314a:	429a      	cmp	r2, r3
 800314c:	d206      	bcs.n	800315c <modbus_tcp_recv+0x2ac>
 800314e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003152:	2b09      	cmp	r3, #9
 8003154:	f67f af62 	bls.w	800301c <modbus_tcp_recv+0x16c>
 8003158:	e000      	b.n	800315c <modbus_tcp_recv+0x2ac>
            break;
 800315a:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 800315c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003160:	4a2b      	ldr	r2, [pc, #172]	@ (8003210 <modbus_tcp_recv+0x360>)
 8003162:	ca07      	ldmia	r2, {r0, r1, r2}
 8003164:	c303      	stmia	r3!, {r0, r1}
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	3302      	adds	r3, #2
 800316a:	0c12      	lsrs	r2, r2, #16
 800316c:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 800316e:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 8003172:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f82a 	bl	80001d0 <strlen>
 800317c:	4602      	mov	r2, r0
 800317e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003182:	4413      	add	r3, r2
 8003184:	220a      	movs	r2, #10
 8003186:	4619      	mov	r1, r3
 8003188:	4620      	mov	r0, r4
 800318a:	f7fe fd1f 	bl	8001bcc <int_to_str>
    const char* frames_suffix = " frames from ";
 800318e:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <modbus_tcp_recv+0x364>)
 8003190:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 8003194:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003198:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 800319c:	4618      	mov	r0, r3
 800319e:	f01a fa6a 	bl	801d676 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 80031a2:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80031a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f810 	bl	80001d0 <strlen>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031b6:	4413      	add	r3, r2
 80031b8:	220a      	movs	r2, #10
 80031ba:	4619      	mov	r1, r3
 80031bc:	4620      	mov	r0, r4
 80031be:	f7fe fd05 	bl	8001bcc <int_to_str>
    const char* bytes_suffix = " bytes";
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <modbus_tcp_recv+0x368>)
 80031c4:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 80031c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031cc:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f01a fa50 	bl	801d676 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 80031d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031da:	4619      	mov	r1, r3
 80031dc:	4805      	ldr	r0, [pc, #20]	@ (80031f4 <modbus_tcp_recv+0x344>)
 80031de:	f7fe fc87 	bl	8001af0 <cdc_debug_log>

    return ERR_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bdb0      	pop	{r4, r5, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	0801f270 	.word	0x0801f270
 80031f4:	0801ee9c 	.word	0x0801ee9c
 80031f8:	0801f280 	.word	0x0801f280
 80031fc:	0801f294 	.word	0x0801f294
 8003200:	0801f2a8 	.word	0x0801f2a8
 8003204:	0801f2b8 	.word	0x0801f2b8
 8003208:	0801f2d0 	.word	0x0801f2d0
 800320c:	0801f2ec 	.word	0x0801f2ec
 8003210:	0801f300 	.word	0x0801f300
 8003214:	0801f30c 	.word	0x0801f30c
 8003218:	0801f238 	.word	0x0801f238

0800321c <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b092      	sub	sp, #72	@ 0x48
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a84      	ldr	r2, [pc, #528]	@ (800344c <HAL_ETH_MspInit+0x230>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f040 8101 	bne.w	8003442 <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	@ 0x30
 8003244:	4b82      	ldr	r3, [pc, #520]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4a81      	ldr	r2, [pc, #516]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800324e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003250:	4b7f      	ldr	r3, [pc, #508]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003258:	633b      	str	r3, [r7, #48]	@ 0x30
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003260:	4b7b      	ldr	r3, [pc, #492]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	4a7a      	ldr	r2, [pc, #488]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003266:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800326a:	6313      	str	r3, [r2, #48]	@ 0x30
 800326c:	4b78      	ldr	r3, [pc, #480]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327c:	4b74      	ldr	r3, [pc, #464]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	4a73      	ldr	r2, [pc, #460]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003282:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003286:	6313      	str	r3, [r2, #48]	@ 0x30
 8003288:	4b71      	ldr	r3, [pc, #452]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
 8003298:	4b6d      	ldr	r3, [pc, #436]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	4a6c      	ldr	r2, [pc, #432]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800329e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	4b66      	ldr	r3, [pc, #408]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	4a65      	ldr	r2, [pc, #404]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032be:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c0:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
 80032dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	4a50      	ldr	r2, [pc, #320]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
 8003314:	4b4e      	ldr	r3, [pc, #312]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003330:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	4b43      	ldr	r3, [pc, #268]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	4a42      	ldr	r2, [pc, #264]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800334a:	6313      	str	r3, [r2, #48]	@ 0x30
 800334c:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	4b3c      	ldr	r3, [pc, #240]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	4a3b      	ldr	r2, [pc, #236]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	6313      	str	r3, [r2, #48]	@ 0x30
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_ETH_MspInit+0x234>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003374:	2302      	movs	r3, #2
 8003376:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003384:	230b      	movs	r3, #11
 8003386:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003388:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800338c:	4619      	mov	r1, r3
 800338e:	4831      	ldr	r0, [pc, #196]	@ (8003454 <HAL_ETH_MspInit+0x238>)
 8003390:	f002 ffc8 	bl	8006324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003394:	2386      	movs	r3, #134	@ 0x86
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033a4:	230b      	movs	r3, #11
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ac:	4619      	mov	r1, r3
 80033ae:	482a      	ldr	r0, [pc, #168]	@ (8003458 <HAL_ETH_MspInit+0x23c>)
 80033b0:	f002 ffb8 	bl	8006324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033b4:	2330      	movs	r3, #48	@ 0x30
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033c4:	230b      	movs	r3, #11
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033cc:	4619      	mov	r1, r3
 80033ce:	4821      	ldr	r0, [pc, #132]	@ (8003454 <HAL_ETH_MspInit+0x238>)
 80033d0:	f002 ffa8 	bl	8006324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80033d4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033e6:	230b      	movs	r3, #11
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ee:	4619      	mov	r1, r3
 80033f0:	481a      	ldr	r0, [pc, #104]	@ (800345c <HAL_ETH_MspInit+0x240>)
 80033f2:	f002 ff97 	bl	8006324 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033f6:	2308      	movs	r3, #8
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fe:	2301      	movs	r3, #1
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800340a:	4619      	mov	r1, r3
 800340c:	4814      	ldr	r0, [pc, #80]	@ (8003460 <HAL_ETH_MspInit+0x244>)
 800340e:	f002 ff89 	bl	8006324 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8003412:	2200      	movs	r2, #0
 8003414:	2108      	movs	r1, #8
 8003416:	4812      	ldr	r0, [pc, #72]	@ (8003460 <HAL_ETH_MspInit+0x244>)
 8003418:	f003 f920 	bl	800665c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800341c:	200a      	movs	r0, #10
 800341e:	f001 f8cb 	bl	80045b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8003422:	2201      	movs	r2, #1
 8003424:	2108      	movs	r1, #8
 8003426:	480e      	ldr	r0, [pc, #56]	@ (8003460 <HAL_ETH_MspInit+0x244>)
 8003428:	f003 f918 	bl	800665c <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800342c:	2064      	movs	r0, #100	@ 0x64
 800342e:	f001 f8c3 	bl	80045b8 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2106      	movs	r1, #6
 8003436:	203d      	movs	r0, #61	@ 0x3d
 8003438:	f001 f99a 	bl	8004770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800343c:	203d      	movs	r0, #61	@ 0x3d
 800343e:	f001 f9b3 	bl	80047a8 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 8003442:	bf00      	nop
 8003444:	3748      	adds	r7, #72	@ 0x48
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40028000 	.word	0x40028000
 8003450:	40023800 	.word	0x40023800
 8003454:	40020800 	.word	0x40020800
 8003458:	40020000 	.word	0x40020000
 800345c:	40021800 	.word	0x40021800
 8003460:	40020c00 	.word	0x40020c00

08003464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_MspInit+0x54>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a11      	ldr	r2, [pc, #68]	@ (80034b8 <HAL_MspInit+0x54>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_MspInit+0x54>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_MspInit+0x54>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_MspInit+0x54>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	@ 0x40
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <HAL_MspInit+0x54>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	210f      	movs	r1, #15
 80034a6:	f06f 0001 	mvn.w	r0, #1
 80034aa:	f001 f961 	bl	8004770 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	@ 0x38
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <HAL_InitTick+0xe4>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	4a32      	ldr	r2, [pc, #200]	@ (80035a0 <HAL_InitTick+0xe4>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034da:	6413      	str	r3, [r2, #64]	@ 0x40
 80034dc:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <HAL_InitTick+0xe4>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034e8:	f107 0210 	add.w	r2, r7, #16
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 ff76 	bl	80083e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003502:	f004 ff47 	bl	8008394 <HAL_RCC_GetPCLK1Freq>
 8003506:	6378      	str	r0, [r7, #52]	@ 0x34
 8003508:	e004      	b.n	8003514 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800350a:	f004 ff43 	bl	8008394 <HAL_RCC_GetPCLK1Freq>
 800350e:	4603      	mov	r3, r0
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003516:	4a23      	ldr	r2, [pc, #140]	@ (80035a4 <HAL_InitTick+0xe8>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	0c9b      	lsrs	r3, r3, #18
 800351e:	3b01      	subs	r3, #1
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003522:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_InitTick+0xec>)
 8003524:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <HAL_InitTick+0xf0>)
 8003526:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003528:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <HAL_InitTick+0xec>)
 800352a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800352e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003530:	4a1d      	ldr	r2, [pc, #116]	@ (80035a8 <HAL_InitTick+0xec>)
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003536:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <HAL_InitTick+0xec>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353c:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <HAL_InitTick+0xec>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_InitTick+0xec>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003548:	4817      	ldr	r0, [pc, #92]	@ (80035a8 <HAL_InitTick+0xec>)
 800354a:	f004 ffc5 	bl	80084d8 <HAL_TIM_Base_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003554:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003558:	2b00      	cmp	r3, #0
 800355a:	d11b      	bne.n	8003594 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800355c:	4812      	ldr	r0, [pc, #72]	@ (80035a8 <HAL_InitTick+0xec>)
 800355e:	f005 f80b 	bl	8008578 <HAL_TIM_Base_Start_IT>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800356c:	2b00      	cmp	r3, #0
 800356e:	d111      	bne.n	8003594 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003570:	202d      	movs	r0, #45	@ 0x2d
 8003572:	f001 f919 	bl	80047a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d808      	bhi.n	800358e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	202d      	movs	r0, #45	@ 0x2d
 8003582:	f001 f8f5 	bl	8004770 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <HAL_InitTick+0xf4>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e002      	b.n	8003594 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003598:	4618      	mov	r0, r3
 800359a:	3738      	adds	r7, #56	@ 0x38
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	20000654 	.word	0x20000654
 80035ac:	40002000 	.word	0x40002000
 80035b0:	20000004 	.word	0x20000004

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <NMI_Handler+0x4>

080035bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <HardFault_Handler+0x4>

080035c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <MemManage_Handler+0x4>

080035cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <UsageFault_Handler+0x4>

080035dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035f0:	4802      	ldr	r0, [pc, #8]	@ (80035fc <DMA1_Stream1_IRQHandler+0x10>)
 80035f2:	f001 fa27 	bl	8004a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000844 	.word	0x20000844

08003600 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <USART3_IRQHandler+0x10>)
 8003606:	f005 fbe7 	bl	8008dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200007b4 	.word	0x200007b4

08003614 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800361a:	f005 f81d 	bl	8008658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000654 	.word	0x20000654

08003628 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800362c:	4802      	ldr	r0, [pc, #8]	@ (8003638 <TIM7_IRQHandler+0x10>)
 800362e:	f005 f813 	bl	8008658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000724 	.word	0x20000724

0800363c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
  */
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003640:	4802      	ldr	r0, [pc, #8]	@ (800364c <ETH_IRQHandler+0x10>)
 8003642:	f001 ffc9 	bl	80055d8 <HAL_ETH_IRQHandler>
  /*
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
  */
  /* USER CODE END ETH_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20005408 	.word	0x20005408

08003650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003654:	4802      	ldr	r0, [pc, #8]	@ (8003660 <OTG_FS_IRQHandler+0x10>)
 8003656:	f003 f95e 	bl	8006916 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2000dff8 	.word	0x2000dff8

08003664 <pump_debug_print>:
/**
  * @brief  泵驱动调试输出函数
  * @param  message: 调试信息字符串
  * @retval None
  */
static void pump_debug_print(const char* message) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
    int len = snprintf(pump_debug_buf, sizeof(pump_debug_buf), "[PUMP] %s\r\n", message);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <pump_debug_print+0x38>)
 8003670:	2180      	movs	r1, #128	@ 0x80
 8003672:	480b      	ldr	r0, [pc, #44]	@ (80036a0 <pump_debug_print+0x3c>)
 8003674:	f019 ff54 	bl	801d520 <sniprintf>
 8003678:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(pump_debug_buf)) {
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	dd08      	ble.n	8003692 <pump_debug_print+0x2e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b7f      	cmp	r3, #127	@ 0x7f
 8003684:	d805      	bhi.n	8003692 <pump_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)pump_debug_buf, len);  // 暂时启用调试输出
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	4804      	ldr	r0, [pc, #16]	@ (80036a0 <pump_debug_print+0x3c>)
 800368e:	f019 f951 	bl	801c934 <CDC_Transmit_FS>
    }
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	0801f31c 	.word	0x0801f31c
 80036a0:	2000069c 	.word	0x2000069c

080036a4 <send_command>:

// 发送命令并读取响应 - STM32 USART3版本 - 简化的不定长接收
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 80036aa:	af02      	add	r7, sp, #8
 80036ac:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80036b0:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 80036b4:	6020      	str	r0, [r4, #0]
 80036b6:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80036ba:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80036c4:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 80036c8:	600a      	str	r2, [r1, #0]
 80036ca:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80036ce:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 80036d2:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 80036d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036d8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d103      	bne.n	80036ea <send_command+0x46>
        pump_address = '1';  // 泵1地址为'1'
 80036e2:	2331      	movs	r3, #49	@ 0x31
 80036e4:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 80036e8:	e01d      	b.n	8003726 <send_command+0x82>
    } else if (pump_id == 2) {
 80036ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d103      	bne.n	8003700 <send_command+0x5c>
        pump_address = '2';  // 泵2地址为'2'
 80036f8:	2332      	movs	r3, #50	@ 0x32
 80036fa:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 80036fe:	e012      	b.n	8003726 <send_command+0x82>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d", pump_id);
 8003700:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003704:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003708:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4ab9      	ldr	r2, [pc, #740]	@ (80039f4 <send_command+0x350>)
 8003710:	2180      	movs	r1, #128	@ 0x80
 8003712:	f019 ff05 	bl	801d520 <sniprintf>
        pump_debug_print(debug_msg);
 8003716:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ffa2 	bl	8003664 <pump_debug_print>
        return -1;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e160      	b.n	80039e8 <send_command+0x344>
    }
    
    // 格式化命令: /地址命令CR+LF (根据手册需要CRLF结尾)
    snprintf(buffer, sizeof(buffer), "/%c%s\r\n", pump_address, cmd);
 8003726:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 800372a:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 800372e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003732:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	4aae      	ldr	r2, [pc, #696]	@ (80039f8 <send_command+0x354>)
 800373e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003742:	f019 feed 	bl	801d520 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 8003746:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800374a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800374e:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003752:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8003756:	9200      	str	r2, [sp, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4aa8      	ldr	r2, [pc, #672]	@ (80039fc <send_command+0x358>)
 800375c:	2180      	movs	r1, #128	@ 0x80
 800375e:	f019 fedf 	bl	801d520 <sniprintf>
    pump_debug_print(debug_msg);
 8003762:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff7c 	bl	8003664 <pump_debug_print>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 800376c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc fd2d 	bl	80001d0 <strlen>
 8003776:	4603      	mov	r3, r0
 8003778:	b29a      	uxth	r2, r3
 800377a:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800377e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003782:	489f      	ldr	r0, [pc, #636]	@ (8003a00 <send_command+0x35c>)
 8003784:	f005 fa06 	bl	8008b94 <HAL_UART_Transmit>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
    if (status != HAL_OK) {
 800378e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003792:	2b00      	cmp	r3, #0
 8003794:	d015      	beq.n	80037c2 <send_command+0x11e>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d", pump_id, status);
 8003796:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 800379a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800379e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037a2:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a96      	ldr	r2, [pc, #600]	@ (8003a04 <send_command+0x360>)
 80037ac:	2180      	movs	r1, #128	@ 0x80
 80037ae:	f019 feb7 	bl	801d520 <sniprintf>
        pump_debug_print(debug_msg);
 80037b2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff54 	bl	8003664 <pump_debug_print>
        return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	e112      	b.n	80039e8 <send_command+0x344>
    }
    
    // 读取响应（如果需要）- 使用逐字节接收
    if (response && resp_size > 0) {
 80037c2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037c6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 810a 	beq.w	80039e6 <send_command+0x342>
 80037d2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037d6:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8102 	beq.w	80039e6 <send_command+0x342>
        memset(response, 0, resp_size);
 80037e2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037e6:	f5a3 722e 	sub.w	r2, r3, #696	@ 0x2b8
 80037ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037ee:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	2100      	movs	r1, #0
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	f019 ff35 	bl	801d666 <memset>
        
        uint8_t rx_char;
        size_t received_count = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
        uint32_t start_time = HAL_GetTick();
 8003802:	f000 fecd 	bl	80045a0 <HAL_GetTick>
 8003806:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
        uint32_t timeout_ms = 200;  // 总超时200ms
 800380a:	23c8      	movs	r3, #200	@ 0xc8
 800380c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
        uint32_t char_timeout_ms = 50;  // 单字符超时50ms
 8003810:	2332      	movs	r3, #50	@ 0x32
 8003812:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        
        // 逐字节接收，直到遇到结束符或超时
        while (received_count < (resp_size - 1)) {
 8003816:	e05f      	b.n	80038d8 <send_command+0x234>
            status = HAL_UART_Receive(&huart3, &rx_char, 1, char_timeout_ms);
 8003818:	f207 111b 	addw	r1, r7, #283	@ 0x11b
 800381c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003820:	2201      	movs	r2, #1
 8003822:	4877      	ldr	r0, [pc, #476]	@ (8003a00 <send_command+0x35c>)
 8003824:	f005 fa41 	bl	8008caa <HAL_UART_Receive>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
            
            if (status == HAL_OK) {
 800382e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12e      	bne.n	8003894 <send_command+0x1f0>
                response[received_count] = rx_char;
 8003836:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800383a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003844:	4413      	add	r3, r2
 8003846:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800384a:	f2a2 129d 	subw	r2, r2, #413	@ 0x19d
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	701a      	strb	r2, [r3, #0]
                received_count++;
 8003852:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003856:	3301      	adds	r3, #1
 8003858:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
                
                // 检查是否收到完整的结束符序列 (CRLF)
                // 只有当收到LF并且前一个字符是CR时才结束
                if (received_count >= 2 && 
 800385c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d912      	bls.n	800388a <send_command+0x1e6>
                    rx_char == 0x0A && 
 8003864:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003868:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 800386c:	781b      	ldrb	r3, [r3, #0]
                if (received_count >= 2 && 
 800386e:	2b0a      	cmp	r3, #10
 8003870:	d10b      	bne.n	800388a <send_command+0x1e6>
                    response[received_count-2] == 0x0D) {
 8003872:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003876:	3b02      	subs	r3, #2
 8003878:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800387c:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
                    rx_char == 0x0A && 
 8003886:	2b0d      	cmp	r3, #13
 8003888:	d031      	beq.n	80038ee <send_command+0x24a>
                    break;
                }
                
                // 重置总超时计时器（收到数据说明设备在响应）
                start_time = HAL_GetTick();
 800388a:	f000 fe89 	bl	80045a0 <HAL_GetTick>
 800388e:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
 8003892:	e021      	b.n	80038d8 <send_command+0x234>
            } else if (status == HAL_TIMEOUT) {
 8003894:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003898:	2b03      	cmp	r3, #3
 800389a:	d12a      	bne.n	80038f2 <send_command+0x24e>
                // 单字符超时，检查是否已经接收到数据
                if (received_count > 0) {
 800389c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00f      	beq.n	80038c4 <send_command+0x220>
                    // 已有数据，可能接收完成，等待一下看是否还有数据
                    HAL_Delay(5);  // 减少延时时间
 80038a4:	2005      	movs	r0, #5
 80038a6:	f000 fe87 	bl	80045b8 <HAL_Delay>
                    // 给已收到数据情况下额外3次重试机会
                    static int retry_count = 0;
                    retry_count++;
 80038aa:	4b57      	ldr	r3, [pc, #348]	@ (8003a08 <send_command+0x364>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a55      	ldr	r2, [pc, #340]	@ (8003a08 <send_command+0x364>)
 80038b2:	6013      	str	r3, [r2, #0]
                    if (retry_count > 3) {
 80038b4:	4b54      	ldr	r3, [pc, #336]	@ (8003a08 <send_command+0x364>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	dd03      	ble.n	80038c4 <send_command+0x220>
                        retry_count = 0;
 80038bc:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <send_command+0x364>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
                        break;  // 重试次数用完，退出
 80038c2:	e019      	b.n	80038f8 <send_command+0x254>
                    }
                }
                
                // 检查总超时
                if (HAL_GetTick() - start_time > timeout_ms) {
 80038c4:	f000 fe6c 	bl	80045a0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d30e      	bcc.n	80038f6 <send_command+0x252>
        while (received_count < (resp_size - 1)) {
 80038d8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80038dc:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d395      	bcc.n	8003818 <send_command+0x174>
 80038ec:	e004      	b.n	80038f8 <send_command+0x254>
                    break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <send_command+0x254>
                    break;  // 总超时，退出
                }
            } else {
                // 其他错误，退出
                break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <send_command+0x254>
                    break;  // 总超时，退出
 80038f6:	bf00      	nop
            }
        }
        
        // 确保字符串结束
        response[received_count] = '\0';
 80038f8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80038fc:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003906:	4413      	add	r3, r2
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
        
        if (received_count > 0) {
 800390c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d055      	beq.n	80039c0 <send_command+0x31c>
            // 调试信息：显示响应 (修复格式化问题)
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX (%u bytes): [%s]", pump_id, (unsigned int)received_count, response);
 8003914:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003918:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800391c:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003920:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003924:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	9201      	str	r2, [sp, #4]
 800392c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a35      	ldr	r2, [pc, #212]	@ (8003a0c <send_command+0x368>)
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	f019 fdf2 	bl	801d520 <sniprintf>
            pump_debug_print(debug_msg);
 800393c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe8f 	bl	8003664 <pump_debug_print>
            
            // 添加十六进制显示，帮助调试
            char hex_debug[256];
            snprintf(hex_debug, sizeof(hex_debug), "Pump%d RX_HEX: ", pump_id);
 8003946:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800394a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800394e:	f107 0014 	add.w	r0, r7, #20
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2e      	ldr	r2, [pc, #184]	@ (8003a10 <send_command+0x36c>)
 8003956:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800395a:	f019 fde1 	bl	801d520 <sniprintf>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003964:	e01b      	b.n	800399e <send_command+0x2fa>
                char hex_byte[4];
                snprintf(hex_byte, sizeof(hex_byte), "%02X ", (unsigned char)response[i]);
 8003966:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800396a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800397c:	4a25      	ldr	r2, [pc, #148]	@ (8003a14 <send_command+0x370>)
 800397e:	2104      	movs	r1, #4
 8003980:	f019 fdce 	bl	801d520 <sniprintf>
                strcat(hex_debug, hex_byte);
 8003984:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f019 fe71 	bl	801d676 <strcat>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003994:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003998:	3301      	adds	r3, #1
 800399a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800399e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80039a2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d203      	bcs.n	80039b2 <send_command+0x30e>
 80039aa:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 80039ae:	2b13      	cmp	r3, #19
 80039b0:	d9d9      	bls.n	8003966 <send_command+0x2c2>
            }
            pump_debug_print(hex_debug);
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fe54 	bl	8003664 <pump_debug_print>
            
            return 0;  // 成功
 80039bc:	2300      	movs	r3, #0
 80039be:	e013      	b.n	80039e8 <send_command+0x344>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: No data received", pump_id);
 80039c0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80039c4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80039c8:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <send_command+0x374>)
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	f019 fda5 	bl	801d520 <sniprintf>
            pump_debug_print(debug_msg);
 80039d6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fe42 	bl	8003664 <pump_debug_print>
            return -1;  // 超时无数据
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	e000      	b.n	80039e8 <send_command+0x344>
        }
    }

    return 0;  // 只发送，不接收
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}
 80039f2:	bf00      	nop
 80039f4:	0801f328 	.word	0x0801f328
 80039f8:	0801f33c 	.word	0x0801f33c
 80039fc:	0801f344 	.word	0x0801f344
 8003a00:	200007b4 	.word	0x200007b4
 8003a04:	0801f354 	.word	0x0801f354
 8003a08:	2000071c 	.word	0x2000071c
 8003a0c:	0801f370 	.word	0x0801f370
 8003a10:	0801f38c 	.word	0x0801f38c
 8003a14:	0801f39c 	.word	0x0801f39c
 8003a18:	0801f3a4 	.word	0x0801f3a4

08003a1c <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 8003a24:	2300      	movs	r3, #0
 8003a26:	2200      	movs	r2, #0
 8003a28:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <pump_init+0x20>)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe3a 	bl	80036a4 <send_command>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	0801f3c0 	.word	0x0801f3c0

08003a40 <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 8003a4a:	f107 0008 	add.w	r0, r7, #8
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <pump_move_absolute+0x30>)
 8003a52:	2120      	movs	r1, #32
 8003a54:	f019 fd64 	bl	801d520 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 8003a58:	f107 0108 	add.w	r1, r7, #8
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff fe1f 	bl	80036a4 <send_command>
 8003a66:	4603      	mov	r3, r0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	@ 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	0801f3c4 	.word	0x0801f3c4

08003a74 <pump_query_error>:
int pump_get_status(int pump_id, char* status) {
    return send_command(pump_id, CMD_STATUS, status, 256);
}

// 查询错误码
int pump_query_error(int pump_id, char* error_code) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
    return send_command(pump_id, CMD_ERROR_QUERY, error_code, 256);
 8003a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4904      	ldr	r1, [pc, #16]	@ (8003a98 <pump_query_error+0x24>)
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fe0c 	bl	80036a4 <send_command>
 8003a8c:	4603      	mov	r3, r0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0801f3ec 	.word	0x0801f3ec

08003a9c <pump_query_position>:

// 查询当前活塞位置
int pump_query_position(int pump_id, int* position) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b0e6      	sub	sp, #408	@ 0x198
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003aa6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aaa:	6018      	str	r0, [r3, #0]
 8003aac:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003ab0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ab4:	6019      	str	r1, [r3, #0]
    char response[256];
    char debug_msg[128];
    
    int result = send_command(pump_id, CMD_POSITION_QUERY, response, sizeof(response));
 8003ab6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8003aba:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003abe:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8003ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ac6:	4940      	ldr	r1, [pc, #256]	@ (8003bc8 <pump_query_position+0x12c>)
 8003ac8:	6800      	ldr	r0, [r0, #0]
 8003aca:	f7ff fdeb 	bl	80036a4 <send_command>
 8003ace:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
    
    // 添加详细的调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Position query result: %d", result);
 8003ad2:	f107 0008 	add.w	r0, r7, #8
 8003ad6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ada:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <pump_query_position+0x130>)
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	f019 fd1f 	bl	801d520 <sniprintf>
    pump_debug_print(debug_msg);
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fdbc 	bl	8003664 <pump_debug_print>
    
    if (result == 0 && position != NULL) {
 8003aec:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d14f      	bne.n	8003b94 <pump_query_position+0xf8>
 8003af4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003af8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d048      	beq.n	8003b94 <pump_query_position+0xf8>
        // 解析响应，从类似 "FF /0`3000 03 0D 0A" 格式中提取位置
        snprintf(debug_msg, sizeof(debug_msg), "Parsing response: [%s]", response);
 8003b02:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003b06:	f107 0008 	add.w	r0, r7, #8
 8003b0a:	4a31      	ldr	r2, [pc, #196]	@ (8003bd0 <pump_query_position+0x134>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	f019 fd07 	bl	801d520 <sniprintf>
        pump_debug_print(debug_msg);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fda4 	bl	8003664 <pump_debug_print>
        
        // 寻找 '`' 字符后的数字
        char* pos_start = strchr(response, '`');
 8003b1c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003b20:	2160      	movs	r1, #96	@ 0x60
 8003b22:	4618      	mov	r0, r3
 8003b24:	f019 fdb6 	bl	801d694 <strchr>
 8003b28:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        if (pos_start != NULL) {
 8003b2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d021      	beq.n	8003b78 <pump_query_position+0xdc>
            pos_start++; // 跳过 '`' 字符
 8003b34:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            *position = atoi(pos_start);
 8003b3e:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8003b42:	f019 fb53 	bl	801d1ec <atoi>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b4c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	601a      	str	r2, [r3, #0]
            snprintf(debug_msg, sizeof(debug_msg), "Parsed position: %d", *position);
 8003b54:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b58:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f107 0008 	add.w	r0, r7, #8
 8003b64:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <pump_query_position+0x138>)
 8003b66:	2180      	movs	r1, #128	@ 0x80
 8003b68:	f019 fcda 	bl	801d520 <sniprintf>
            pump_debug_print(debug_msg);
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fd77 	bl	8003664 <pump_debug_print>
    if (result == 0 && position != NULL) {
 8003b76:	e020      	b.n	8003bba <pump_query_position+0x11e>
        } else {
            pump_debug_print("Error: No '`' character found in response");
 8003b78:	4817      	ldr	r0, [pc, #92]	@ (8003bd8 <pump_query_position+0x13c>)
 8003b7a:	f7ff fd73 	bl	8003664 <pump_debug_print>
            *position = -1;  // 解析失败
 8003b7e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b82:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8c:	601a      	str	r2, [r3, #0]
            return -1;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	e014      	b.n	8003bbe <pump_query_position+0x122>
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Position query failed: result=%d, position=%p", 
 8003b94:	f107 0008 	add.w	r0, r7, #8
 8003b98:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b9c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <pump_query_position+0x140>)
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	f019 fcb8 	bl	801d520 <sniprintf>
                result, (void*)position);
        pump_debug_print(debug_msg);
 8003bb0:	f107 0308 	add.w	r3, r7, #8
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fd55 	bl	8003664 <pump_debug_print>
    }
    
    return result;
 8003bba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0801f3f0 	.word	0x0801f3f0
 8003bcc:	0801f3f4 	.word	0x0801f3f4
 8003bd0:	0801f410 	.word	0x0801f410
 8003bd4:	0801f428 	.word	0x0801f428
 8003bd8:	0801f43c 	.word	0x0801f43c
 8003bdc:	0801f468 	.word	0x0801f468

08003be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return 1;
 8003be4:	2301      	movs	r3, #1
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_kill>:

int _kill(int pid, int sig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <_kill+0x20>)
 8003bfc:	2216      	movs	r2, #22
 8003bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	2000e838 	.word	0x2000e838

08003c14 <_exit>:

void _exit (int status)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ffe5 	bl	8003bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c26:	bf00      	nop
 8003c28:	e7fd      	b.n	8003c26 <_exit+0x12>

08003c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e00a      	b.n	8003c52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c3c:	f3af 8000 	nop.w
 8003c40:	4601      	mov	r1, r0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	60ba      	str	r2, [r7, #8]
 8003c48:	b2ca      	uxtb	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	dbf0      	blt.n	8003c3c <_read+0x12>
  }

  return len;
 8003c5a:	687b      	ldr	r3, [r7, #4]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e009      	b.n	8003c8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	60ba      	str	r2, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	dbf1      	blt.n	8003c76 <_write+0x12>
  }
  return len;
 8003c92:	687b      	ldr	r3, [r7, #4]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_close>:

int _close(int file)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cc4:	605a      	str	r2, [r3, #4]
  return 0;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_isatty>:

int _isatty(int file)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cdc:	2301      	movs	r3, #1
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d0c:	4a14      	ldr	r2, [pc, #80]	@ (8003d60 <_sbrk+0x5c>)
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <_sbrk+0x60>)
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <_sbrk+0x64>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d20:	4b11      	ldr	r3, [pc, #68]	@ (8003d68 <_sbrk+0x64>)
 8003d22:	4a12      	ldr	r2, [pc, #72]	@ (8003d6c <_sbrk+0x68>)
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <_sbrk+0x64>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d205      	bcs.n	8003d40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003d34:	4b0e      	ldr	r3, [pc, #56]	@ (8003d70 <_sbrk+0x6c>)
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e009      	b.n	8003d54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <_sbrk+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <_sbrk+0x64>)
 8003d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20020000 	.word	0x20020000
 8003d64:	00000400 	.word	0x00000400
 8003d68:	20000720 	.word	0x20000720
 8003d6c:	2000e860 	.word	0x2000e860
 8003d70:	2000e838 	.word	0x2000e838

08003d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <SystemInit+0x20>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <SystemInit+0x20>)
 8003d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d9e:	463b      	mov	r3, r7
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <MX_TIM7_Init+0x68>)
 8003daa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003dae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003db2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003dba:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003dc8:	480c      	ldr	r0, [pc, #48]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003dca:	f004 fb85 	bl	80084d8 <HAL_TIM_Base_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003dd4:	f7fd fe86 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003de0:	463b      	mov	r3, r7
 8003de2:	4619      	mov	r1, r3
 8003de4:	4805      	ldr	r0, [pc, #20]	@ (8003dfc <MX_TIM7_Init+0x64>)
 8003de6:	f004 fdf5 	bl	80089d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003df0:	f7fd fe78 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000724 	.word	0x20000724
 8003e00:	40001400 	.word	0x40001400

08003e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0e      	ldr	r2, [pc, #56]	@ (8003e4c <HAL_TIM_Base_MspInit+0x48>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d115      	bne.n	8003e42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <HAL_TIM_Base_MspInit+0x4c>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <HAL_TIM_Base_MspInit+0x4c>)
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <HAL_TIM_Base_MspInit+0x4c>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2105      	movs	r1, #5
 8003e36:	2037      	movs	r0, #55	@ 0x37
 8003e38:	f000 fc9a 	bl	8004770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e3c:	2037      	movs	r0, #55	@ 0x37
 8003e3e:	f000 fcb3 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40001400 	.word	0x40001400
 8003e50:	40023800 	.word	0x40023800

08003e54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <MX_USART1_UART_Init+0x50>)
 8003e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e84:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e8a:	4805      	ldr	r0, [pc, #20]	@ (8003ea0 <MX_USART1_UART_Init+0x4c>)
 8003e8c:	f004 fe32 	bl	8008af4 <HAL_UART_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e96:	f7fd fe25 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000076c 	.word	0x2000076c
 8003ea4:	40011000 	.word	0x40011000

08003ea8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003eac:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <MX_USART3_UART_Init+0x50>)
 8003eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003eb4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ece:	220c      	movs	r2, #12
 8003ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed2:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ede:	4805      	ldr	r0, [pc, #20]	@ (8003ef4 <MX_USART3_UART_Init+0x4c>)
 8003ee0:	f004 fe08 	bl	8008af4 <HAL_UART_Init>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003eea:	f7fd fdfb 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200007b4 	.word	0x200007b4
 8003ef8:	40004800 	.word	0x40004800

08003efc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <MX_USART6_UART_Init+0x50>)
 8003f04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003f0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f22:	220c      	movs	r2, #12
 8003f24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f32:	4805      	ldr	r0, [pc, #20]	@ (8003f48 <MX_USART6_UART_Init+0x4c>)
 8003f34:	f004 fdde 	bl	8008af4 <HAL_UART_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003f3e:	f7fd fdd1 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200007fc 	.word	0x200007fc
 8003f4c:	40011400 	.word	0x40011400

08003f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	@ 0x38
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a67      	ldr	r2, [pc, #412]	@ (800410c <HAL_UART_MspInit+0x1bc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12d      	bne.n	8003fce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	4a65      	ldr	r2, [pc, #404]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f82:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	4b5f      	ldr	r3, [pc, #380]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	4a5e      	ldr	r2, [pc, #376]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003faa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4853      	ldr	r0, [pc, #332]	@ (8004114 <HAL_UART_MspInit+0x1c4>)
 8003fc8:	f002 f9ac 	bl	8006324 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003fcc:	e099      	b.n	8004102 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a51      	ldr	r2, [pc, #324]	@ (8004118 <HAL_UART_MspInit+0x1c8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d163      	bne.n	80040a0 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe8:	4b49      	ldr	r3, [pc, #292]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	4b45      	ldr	r3, [pc, #276]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	4a44      	ldr	r2, [pc, #272]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	6313      	str	r3, [r2, #48]	@ 0x30
 8004004:	4b42      	ldr	r3, [pc, #264]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004010:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401e:	2303      	movs	r3, #3
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004022:	2307      	movs	r3, #7
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800402a:	4619      	mov	r1, r3
 800402c:	483b      	ldr	r0, [pc, #236]	@ (800411c <HAL_UART_MspInit+0x1cc>)
 800402e:	f002 f979 	bl	8006324 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004034:	4a3b      	ldr	r2, [pc, #236]	@ (8004124 <HAL_UART_MspInit+0x1d4>)
 8004036:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004038:	4b39      	ldr	r3, [pc, #228]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 800403a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800403e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004040:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004048:	2200      	movs	r2, #0
 800404a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800404c:	4b34      	ldr	r3, [pc, #208]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 800404e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004052:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004056:	2200      	movs	r2, #0
 8004058:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800405a:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004060:	4b2f      	ldr	r3, [pc, #188]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004066:	4b2e      	ldr	r3, [pc, #184]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004068:	2200      	movs	r2, #0
 800406a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800406c:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 800406e:	2200      	movs	r2, #0
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004072:	482b      	ldr	r0, [pc, #172]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004074:	f000 fba6 	bl	80047c4 <HAL_DMA_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800407e:	f7fd fd31 	bl	8001ae4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 8004086:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004088:	4a25      	ldr	r2, [pc, #148]	@ (8004120 <HAL_UART_MspInit+0x1d0>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800408e:	2200      	movs	r2, #0
 8004090:	2105      	movs	r1, #5
 8004092:	2027      	movs	r0, #39	@ 0x27
 8004094:	f000 fb6c 	bl	8004770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004098:	2027      	movs	r0, #39	@ 0x27
 800409a:	f000 fb85 	bl	80047a8 <HAL_NVIC_EnableIRQ>
}
 800409e:	e030      	b.n	8004102 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a20      	ldr	r2, [pc, #128]	@ (8004128 <HAL_UART_MspInit+0x1d8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12b      	bne.n	8004102 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ba:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_UART_MspInit+0x1c0>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040e2:	23c0      	movs	r3, #192	@ 0xc0
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ee:	2303      	movs	r3, #3
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040f2:	2308      	movs	r3, #8
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fa:	4619      	mov	r1, r3
 80040fc:	480b      	ldr	r0, [pc, #44]	@ (800412c <HAL_UART_MspInit+0x1dc>)
 80040fe:	f002 f911 	bl	8006324 <HAL_GPIO_Init>
}
 8004102:	bf00      	nop
 8004104:	3738      	adds	r7, #56	@ 0x38
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40011000 	.word	0x40011000
 8004110:	40023800 	.word	0x40023800
 8004114:	40020000 	.word	0x40020000
 8004118:	40004800 	.word	0x40004800
 800411c:	40020400 	.word	0x40020400
 8004120:	20000844 	.word	0x20000844
 8004124:	40026028 	.word	0x40026028
 8004128:	40011400 	.word	0x40011400
 800412c:	40020800 	.word	0x40020800

08004130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004134:	f7ff fe1e 	bl	8003d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004138:	480c      	ldr	r0, [pc, #48]	@ (800416c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800413a:	490d      	ldr	r1, [pc, #52]	@ (8004170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800413c:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004140:	e002      	b.n	8004148 <LoopCopyDataInit>

08004142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004146:	3304      	adds	r3, #4

08004148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800414a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800414c:	d3f9      	bcc.n	8004142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414e:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004150:	4c0a      	ldr	r4, [pc, #40]	@ (800417c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004154:	e001      	b.n	800415a <LoopFillZerobss>

08004156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004158:	3204      	adds	r2, #4

0800415a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800415a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800415c:	d3fb      	bcc.n	8004156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800415e:	f019 fb51 	bl	801d804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004162:	f7fd fc27 	bl	80019b4 <main>
  bx  lr    
 8004166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800416c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004170:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004174:	080230b8 	.word	0x080230b8
  ldr r2, =_sbss
 8004178:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800417c:	2000e848 	.word	0x2000e848

08004180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004180:	e7fe      	b.n	8004180 <ADC_IRQHandler>

08004182 <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <eth_chip_regster_bus_io+0x28>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <eth_chip_regster_bus_io+0x28>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <eth_chip_regster_bus_io+0x28>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e014      	b.n	80041da <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f107 0208 	add.w	r2, r7, #8
 8004208:	2102      	movs	r1, #2
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	4798      	blx	r3

    switch (regvalue)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b1c      	cmp	r3, #28
 8004212:	d02d      	beq.n	8004270 <eth_chip_init+0x88>
 8004214:	2b1c      	cmp	r3, #28
 8004216:	d847      	bhi.n	80042a8 <eth_chip_init+0xc0>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <eth_chip_init+0x3a>
 800421c:	2b07      	cmp	r3, #7
 800421e:	d036      	beq.n	800428e <eth_chip_init+0xa6>
 8004220:	e042      	b.n	80042a8 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2103      	movs	r1, #3
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	4798      	blx	r3

            if (regvalue == 0x128)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8004236:	d10e      	bne.n	8004256 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 8004238:	4b6a      	ldr	r3, [pc, #424]	@ (80043e4 <eth_chip_init+0x1fc>)
 800423a:	2211      	movs	r2, #17
 800423c:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 800423e:	4b6a      	ldr	r3, [pc, #424]	@ (80043e8 <eth_chip_init+0x200>)
 8004240:	f244 0210 	movw	r2, #16400	@ 0x4010
 8004244:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 8004246:	4b69      	ldr	r3, [pc, #420]	@ (80043ec <eth_chip_init+0x204>)
 8004248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800424c:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 800424e:	4b68      	ldr	r3, [pc, #416]	@ (80043f0 <eth_chip_init+0x208>)
 8004250:	2202      	movs	r2, #2
 8004252:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 8004254:	e028      	b.n	80042a8 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 8004256:	4b63      	ldr	r3, [pc, #396]	@ (80043e4 <eth_chip_init+0x1fc>)
 8004258:	2210      	movs	r2, #16
 800425a:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 800425c:	4b62      	ldr	r3, [pc, #392]	@ (80043e8 <eth_chip_init+0x200>)
 800425e:	2222      	movs	r2, #34	@ 0x22
 8004260:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 8004262:	4b62      	ldr	r3, [pc, #392]	@ (80043ec <eth_chip_init+0x204>)
 8004264:	2204      	movs	r2, #4
 8004266:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 8004268:	4b61      	ldr	r3, [pc, #388]	@ (80043f0 <eth_chip_init+0x208>)
 800426a:	2203      	movs	r2, #3
 800426c:	601a      	str	r2, [r3, #0]
            break;
 800426e:	e01b      	b.n	80042a8 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 8004270:	4b5c      	ldr	r3, [pc, #368]	@ (80043e4 <eth_chip_init+0x1fc>)
 8004272:	2200      	movs	r2, #0
 8004274:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 8004276:	4b5c      	ldr	r3, [pc, #368]	@ (80043e8 <eth_chip_init+0x200>)
 8004278:	f242 0220 	movw	r2, #8224	@ 0x2020
 800427c:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 800427e:	4b5b      	ldr	r3, [pc, #364]	@ (80043ec <eth_chip_init+0x204>)
 8004280:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004284:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 8004286:	4b5a      	ldr	r3, [pc, #360]	@ (80043f0 <eth_chip_init+0x208>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
            break;
 800428c:	e00c      	b.n	80042a8 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 800428e:	4b55      	ldr	r3, [pc, #340]	@ (80043e4 <eth_chip_init+0x1fc>)
 8004290:	221f      	movs	r2, #31
 8004292:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 8004294:	4b54      	ldr	r3, [pc, #336]	@ (80043e8 <eth_chip_init+0x200>)
 8004296:	2204      	movs	r2, #4
 8004298:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 800429a:	4b54      	ldr	r3, [pc, #336]	@ (80043ec <eth_chip_init+0x204>)
 800429c:	2210      	movs	r2, #16
 800429e:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 80042a0:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <eth_chip_init+0x208>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
            break;
 80042a6:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d17e      	bne.n	80043ae <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e01e      	b.n	8004308 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4a45      	ldr	r2, [pc, #276]	@ (80043e4 <eth_chip_init+0x1fc>)
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	4611      	mov	r1, r2
 80042d4:	f107 0208 	add.w	r2, r7, #8
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	4798      	blx	r3
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da03      	bge.n	80042ea <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 80042e2:	f06f 0304 	mvn.w	r3, #4
 80042e6:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 80042e8:	e00b      	b.n	8004302 <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d105      	bne.n	8004302 <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
                break;
 8004300:	e005      	b.n	800430e <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b1f      	cmp	r3, #31
 800430c:	d9dd      	bls.n	80042ca <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b1f      	cmp	r3, #31
 8004314:	d902      	bls.n	800431c <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 8004316:	f06f 0302 	mvn.w	r3, #2
 800431a:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d145      	bne.n	80043ae <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6810      	ldr	r0, [r2, #0]
 800432a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800432e:	2100      	movs	r1, #0
 8004330:	4798      	blx	r3
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	db37      	blt.n	80043a8 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6810      	ldr	r0, [r2, #0]
 8004340:	f107 0208 	add.w	r2, r7, #8
 8004344:	2100      	movs	r1, #0
 8004346:	4798      	blx	r3
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	db28      	blt.n	80043a0 <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	4798      	blx	r3
 8004354:	4603      	mov	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004358:	e01c      	b.n	8004394 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4798      	blx	r3
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800436c:	d80e      	bhi.n	800438c <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6810      	ldr	r0, [r2, #0]
 8004376:	f107 0208 	add.w	r2, r7, #8
 800437a:	2100      	movs	r1, #0
 800437c:	4798      	blx	r3
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	da07      	bge.n	8004394 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 8004384:	f06f 0304 	mvn.w	r3, #4
 8004388:	613b      	str	r3, [r7, #16]
                                break;
 800438a:	e010      	b.n	80043ae <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 800438c:	f06f 0301 	mvn.w	r3, #1
 8004390:	613b      	str	r3, [r7, #16]
                            break;
 8004392:	e00c      	b.n	80043ae <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1dd      	bne.n	800435a <eth_chip_init+0x172>
 800439e:	e006      	b.n	80043ae <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 80043a0:	f06f 0304 	mvn.w	r3, #4
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e002      	b.n	80043ae <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 80043a8:	f06f 0303 	mvn.w	r3, #3
 80043ac:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d112      	bne.n	80043da <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4798      	blx	r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 80043be:	bf00      	nop
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4798      	blx	r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	461a      	mov	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80043d2:	d9f5      	bls.n	80043c0 <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	605a      	str	r2, [r3, #4]
    }

    return status;
 80043da:	693b      	ldr	r3, [r7, #16]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200008a8 	.word	0x200008a8
 80043e8:	200008aa 	.word	0x200008aa
 80043ec:	200008ac 	.word	0x200008ac
 80043f0:	200008a4 	.word	0x200008a4

080043f4 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6810      	ldr	r0, [r2, #0]
 800440c:	f107 0208 	add.w	r2, r7, #8
 8004410:	2100      	movs	r1, #0
 8004412:	4798      	blx	r3
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	db11      	blt.n	800443e <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004420:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6810      	ldr	r0, [r2, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	2100      	movs	r1, #0
 800442e:	4798      	blx	r3
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	da06      	bge.n	8004444 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004436:	f06f 0303 	mvn.w	r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e002      	b.n	8004444 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 800443e:	f06f 0304 	mvn.w	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004444:	68fb      	ldr	r3, [r7, #12]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6810      	ldr	r0, [r2, #0]
 8004466:	f107 0208 	add.w	r2, r7, #8
 800446a:	2100      	movs	r1, #0
 800446c:	4798      	blx	r3
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	db11      	blt.n	8004498 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800447a:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6810      	ldr	r0, [r2, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	2100      	movs	r1, #0
 8004488:	4798      	blx	r3
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	da06      	bge.n	800449e <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004490:	f06f 0303 	mvn.w	r3, #3
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e002      	b.n	800449e <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004498:	f06f 0304 	mvn.w	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
    }

    return status;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6810      	ldr	r0, [r2, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <eth_chip_get_link_state+0x80>)
 80044be:	8812      	ldrh	r2, [r2, #0]
 80044c0:	4611      	mov	r1, r2
 80044c2:	f107 020c 	add.w	r2, r7, #12
 80044c6:	4798      	blx	r3
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da02      	bge.n	80044d4 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 80044ce:	f06f 0304 	mvn.w	r3, #4
 80044d2:	e024      	b.n	800451e <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 80044d4:	4b15      	ldr	r3, [pc, #84]	@ (800452c <eth_chip_get_link_state+0x84>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	4a13      	ldr	r2, [pc, #76]	@ (800452c <eth_chip_get_link_state+0x84>)
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d008      	beq.n	80044f8 <eth_chip_get_link_state+0x50>
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <eth_chip_get_link_state+0x88>)
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 80044f4:	2302      	movs	r3, #2
 80044f6:	e012      	b.n	800451e <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <eth_chip_get_link_state+0x84>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4013      	ands	r3, r2
 8004502:	4a0a      	ldr	r2, [pc, #40]	@ (800452c <eth_chip_get_link_state+0x84>)
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	4293      	cmp	r3, r2
 8004508:	d001      	beq.n	800450e <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 800450a:	2303      	movs	r3, #3
 800450c:	e007      	b.n	800451e <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 8004518:	2304      	movs	r3, #4
 800451a:	e000      	b.n	800451e <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 800451c:	2305      	movs	r3, #5
    }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200008a8 	.word	0x200008a8
 800452c:	200008aa 	.word	0x200008aa
 8004530:	200008ac 	.word	0x200008ac

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0d      	ldr	r2, [pc, #52]	@ (8004574 <HAL_Init+0x40>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_Init+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <HAL_Init+0x40>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800454e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <HAL_Init+0x40>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a07      	ldr	r2, [pc, #28]	@ (8004574 <HAL_Init+0x40>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800455c:	2003      	movs	r0, #3
 800455e:	f000 f8fc 	bl	800475a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004562:	200f      	movs	r0, #15
 8004564:	f7fe ffaa 	bl	80034bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004568:	f7fe ff7c 	bl	8003464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023c00 	.word	0x40023c00

08004578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <HAL_IncTick+0x20>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_IncTick+0x24>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4413      	add	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	@ (800459c <HAL_IncTick+0x24>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000008 	.word	0x20000008
 800459c:	200008b0 	.word	0x200008b0

080045a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return uwTick;
 80045a4:	4b03      	ldr	r3, [pc, #12]	@ (80045b4 <HAL_GetTick+0x14>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	200008b0 	.word	0x200008b0

080045b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7ff ffee 	bl	80045a0 <HAL_GetTick>
 80045c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d005      	beq.n	80045de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_Delay+0x44>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045de:	bf00      	nop
 80045e0:	f7ff ffde 	bl	80045a0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d8f7      	bhi.n	80045e0 <HAL_Delay+0x28>
  {
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000008 	.word	0x20000008

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800462c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	@ (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	@ (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	@ (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	@ 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	@ 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff4c 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004782:	f7ff ff61 	bl	8004648 <__NVIC_GetPriorityGrouping>
 8004786:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7ff ffb1 	bl	80046f4 <NVIC_EncodePriority>
 8004792:	4602      	mov	r2, r0
 8004794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff80 	bl	80046a0 <__NVIC_SetPriority>
}
 80047a0:	bf00      	nop
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff54 	bl	8004664 <__NVIC_EnableIRQ>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7ff fee6 	bl	80045a0 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e099      	b.n	8004914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004800:	e00f      	b.n	8004822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004802:	f7ff fecd 	bl	80045a0 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b05      	cmp	r3, #5
 800480e:	d908      	bls.n	8004822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2203      	movs	r2, #3
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e078      	b.n	8004914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e8      	bne.n	8004802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4b38      	ldr	r3, [pc, #224]	@ (800491c <HAL_DMA_Init+0x158>)
 800483c:	4013      	ands	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	4313      	orrs	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d117      	bne.n	80048e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa7b 	bl	8004dc4 <DMA_CheckFifoParam>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80048e2:	2301      	movs	r3, #1
 80048e4:	e016      	b.n	8004914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa32 	bl	8004d58 <DMA_CalcBaseAndBitshift>
 80048f4:	4603      	mov	r3, r0
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fc:	223f      	movs	r2, #63	@ 0x3f
 80048fe:	409a      	lsls	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	f010803f 	.word	0xf010803f

08004920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800492e:	f7ff fe37 	bl	80045a0 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d008      	beq.n	8004952 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	@ 0x80
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e052      	b.n	80049f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0216 	bic.w	r2, r2, #22
 8004960:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004970:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <HAL_DMA_Abort+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a2:	e013      	b.n	80049cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a4:	f7ff fdfc 	bl	80045a0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d90c      	bls.n	80049cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e015      	b.n	80049f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e4      	bne.n	80049a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	223f      	movs	r2, #63	@ 0x3f
 80049e0:	409a      	lsls	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d004      	beq.n	8004a1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2280      	movs	r2, #128	@ 0x80
 8004a18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00c      	b.n	8004a38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2205      	movs	r2, #5
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a50:	4b8e      	ldr	r3, [pc, #568]	@ (8004c8c <HAL_DMA_IRQHandler+0x248>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8e      	ldr	r2, [pc, #568]	@ (8004c90 <HAL_DMA_IRQHandler+0x24c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a9b      	lsrs	r3, r3, #10
 8004a5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	2208      	movs	r2, #8
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01a      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	2204      	movs	r2, #4
 8004aec:	409a      	lsls	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	2204      	movs	r2, #4
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	2210      	movs	r2, #16
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d043      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03c      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	2210      	movs	r2, #16
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d018      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
 8004b72:	e01f      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01b      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
 8004b84:	e016      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0208 	bic.w	r2, r2, #8
 8004ba2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	2220      	movs	r2, #32
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 808f 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8087 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	2220      	movs	r2, #32
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d136      	bne.n	8004c5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0216 	bic.w	r2, r2, #22
 8004bfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x1da>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0208 	bic.w	r2, r2, #8
 8004c2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	223f      	movs	r2, #63	@ 0x3f
 8004c34:	409a      	lsls	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d07e      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
        }
        return;
 8004c5a:	e079      	b.n	8004d50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	e02c      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e01e      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10f      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0210 	bic.w	r2, r2, #16
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d032      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d307      	bcc.n	8004d2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f2      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x2cc>
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
 8004d4e:	e000      	b.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d50:	bf00      	nop
    }
  }
}
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3b10      	subs	r3, #16
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x64>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d72:	4a13      	ldr	r2, [pc, #76]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d909      	bls.n	8004d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d98:	e007      	b.n	8004daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	aaaaaaab 	.word	0xaaaaaaab
 8004dc0:	08022d88 	.word	0x08022d88

08004dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11f      	bne.n	8004e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d856      	bhi.n	8004e92 <DMA_CheckFifoParam+0xce>
 8004de4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <DMA_CheckFifoParam+0x28>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0f 	.word	0x08004e0f
 8004df4:	08004dfd 	.word	0x08004dfd
 8004df8:	08004e93 	.word	0x08004e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d046      	beq.n	8004e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0c:	e043      	b.n	8004e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e16:	d140      	bne.n	8004e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e03d      	b.n	8004e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e26:	d121      	bne.n	8004e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d837      	bhi.n	8004e9e <DMA_CheckFifoParam+0xda>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <DMA_CheckFifoParam+0x70>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e4b 	.word	0x08004e4b
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004e5d 	.word	0x08004e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      break;
 8004e48:	e030      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d025      	beq.n	8004ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5a:	e022      	b.n	8004ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e64:	d11f      	bne.n	8004ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e6a:	e01c      	b.n	8004ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d903      	bls.n	8004e7a <DMA_CheckFifoParam+0xb6>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d003      	beq.n	8004e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e78:	e018      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7e:	e015      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	e00b      	b.n	8004eaa <DMA_CheckFifoParam+0xe6>
      break;
 8004e92:	bf00      	nop
 8004e94:	e00a      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e96:	bf00      	nop
 8004e98:	e008      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e006      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e004      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e002      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;   
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
      break;
 8004eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e08a      	b.n	8004fe4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fe f99b 	bl	800321c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	4b40      	ldr	r3, [pc, #256]	@ (8004fec <HAL_ETH_Init+0x130>)
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	4a3f      	ldr	r2, [pc, #252]	@ (8004fec <HAL_ETH_Init+0x130>)
 8004ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fec <HAL_ETH_Init+0x130>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004f02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff0 <HAL_ETH_Init+0x134>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4a3a      	ldr	r2, [pc, #232]	@ (8004ff0 <HAL_ETH_Init+0x134>)
 8004f08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f0e:	4b38      	ldr	r3, [pc, #224]	@ (8004ff0 <HAL_ETH_Init+0x134>)
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4936      	ldr	r1, [pc, #216]	@ (8004ff0 <HAL_ETH_Init+0x134>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004f1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ff0 <HAL_ETH_Init+0x134>)
 8004f1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f38:	f7ff fb32 	bl	80045a0 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f3e:	e011      	b.n	8004f64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004f40:	f7ff fb2e 	bl	80045a0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004f4e:	d909      	bls.n	8004f64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	22e0      	movs	r2, #224	@ 0xe0
 8004f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e03f      	b.n	8004fe4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e4      	bne.n	8004f40 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 ff16 	bl	8005da8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 ffc1 	bl	8005f04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f817 	bl	8005fb6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2100      	movs	r1, #0
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 ff7f 	bl	8005e94 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004fba:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004fce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2210      	movs	r2, #16
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40013800 	.word	0x40013800

08004ff4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	2b10      	cmp	r3, #16
 8005004:	d161      	bne.n	80050ca <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2204      	movs	r2, #4
 8005018:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9f4 	bl	8005408 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005028:	2001      	movs	r0, #1
 800502a:	f7ff fac5 	bl	80045b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005048:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800504c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005064:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fd3b 	bl	8005ae2 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0208 	orr.w	r2, r2, #8
 800507a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005084:	2001      	movs	r0, #1
 8005086:	f7ff fa97 	bl	80045b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0204 	orr.w	r2, r2, #4
 80050a0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80050b4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80050b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050bc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2240      	movs	r2, #64	@ 0x40
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d170      	bne.n	80051c8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8005100:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8005104:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005108:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800511c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005120:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	f023 0302 	bic.w	r3, r3, #2
 8005134:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005138:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005152:	2001      	movs	r0, #1
 8005154:	f7ff fa30 	bl	80045b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fcbe 	bl	8005ae2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0208 	bic.w	r2, r2, #8
 8005174:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800517e:	2001      	movs	r0, #1
 8005180:	f7ff fa1a 	bl	80045b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e00e      	b.n	80051b0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	3212      	adds	r2, #18
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3301      	adds	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d9ed      	bls.n	8005192 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2210      	movs	r2, #16
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e045      	b.n	8005282 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d13f      	bne.n	8005280 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8005208:	2201      	movs	r2, #1
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff41 	bl	8006094 <ETH_Prepare_Tx_Descriptors>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d009      	beq.n	800522c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f043 0202 	orr.w	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e02a      	b.n	8005282 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800522c:	f3bf 8f4f 	dsb	sy
}
 8005230:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	2b03      	cmp	r3, #3
 8005242:	d904      	bls.n	800524e <HAL_ETH_Transmit_IT+0x7c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	1f1a      	subs	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005268:	461a      	mov	r2, r3
 800526a:	2304      	movs	r3, #4
 800526c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b088      	sub	sp, #32
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0a4      	b.n	8005400 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052bc:	2b40      	cmp	r3, #64	@ 0x40
 80052be:	d001      	beq.n	80052c4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e09d      	b.n	8005400 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	3212      	adds	r2, #18
 80052d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052da:	f1c3 0304 	rsb	r3, r3, #4
 80052de:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80052e0:	e066      	b.n	80053b0 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <HAL_ETH_ReadData+0x88>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d03c      	beq.n	800538c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005334:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800534a:	2301      	movs	r3, #1
 800534c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f007 fb02 	bl	800c974 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	3301      	adds	r3, #1
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d902      	bls.n	800539e <HAL_ETH_ReadData+0x114>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3b04      	subs	r3, #4
 800539c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	3212      	adds	r2, #18
 80053a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	3301      	adds	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	db06      	blt.n	80053c6 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d202      	bcs.n	80053c6 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d08d      	beq.n	80052e2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f814 	bl	8005408 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005414:	2301      	movs	r3, #1
 8005416:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	3212      	adds	r2, #18
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800542e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005430:	e044      	b.n	80054bc <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d112      	bne.n	8005460 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4618      	mov	r0, r3
 8005440:	f007 fa68 	bl	800c914 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	74fb      	strb	r3, [r7, #19]
 800544e:	e007      	b.n	8005460 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	461a      	mov	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	461a      	mov	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02a      	beq.n	80054bc <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005476:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	6053      	str	r3, [r2, #4]
 800547e:	e005      	b.n	800548c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3301      	adds	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d902      	bls.n	80054aa <ETH_UpdateDescriptor+0xa2>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3b04      	subs	r3, #4
 80054a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	3212      	adds	r2, #18
 80054b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b4:	617b      	str	r3, [r7, #20]
      desccount--;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <ETH_UpdateDescriptor+0xc0>
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1b4      	bne.n	8005432 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d01a      	beq.n	8005508 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3303      	adds	r3, #3
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80054dc:	f3bf 8f5f 	dmb	sy
}
 80054e0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6919      	ldr	r1, [r3, #16]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	18ca      	adds	r2, r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054fa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005508:	bf00      	nop
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3318      	adds	r3, #24
 800551c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800552e:	e047      	b.n	80055c0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3b01      	subs	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3304      	adds	r3, #4
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d902      	bls.n	800555c <HAL_ETH_ReleaseTxPacket+0x4c>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3b04      	subs	r3, #4
 800555a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02c      	beq.n	80055c0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68d9      	ldr	r1, [r3, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	db1f      	blt.n	80055bc <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3304      	adds	r3, #4
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	f007 fa33 	bl	800c9f4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3304      	adds	r3, #4
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3301      	adds	r3, #1
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d902      	bls.n	80055ae <HAL_ETH_ReleaseTxPacket+0x9e>
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	3b04      	subs	r3, #4
 80055ac:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055ba:	e001      	b.n	80055c0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_ETH_ReleaseTxPacket+0xbc>
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1b1      	bne.n	8005530 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8005600:	4b4b      	ldr	r3, [pc, #300]	@ (8005730 <HAL_ETH_IRQHandler+0x158>)
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00e      	beq.n	800562e <HAL_ETH_IRQHandler+0x56>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005622:	461a      	mov	r2, r3
 8005624:	4b43      	ldr	r3, [pc, #268]	@ (8005734 <HAL_ETH_IRQHandler+0x15c>)
 8005626:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f006 fad9 	bl	800bbe0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00f      	beq.n	8005658 <HAL_ETH_IRQHandler+0x80>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800564a:	461a      	mov	r2, r3
 800564c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005650:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f006 fad4 	bl	800bc00 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d042      	beq.n	80056e8 <HAL_ETH_IRQHandler+0x110>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d03d      	beq.n	80056e8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01a      	beq.n	80056bc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	4b29      	ldr	r3, [pc, #164]	@ (8005738 <HAL_ETH_IRQHandler+0x160>)
 8005692:	4013      	ands	r3, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80056ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056b0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22e0      	movs	r2, #224	@ 0xe0
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80056ba:	e012      	b.n	80056e2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056da:	461a      	mov	r2, r3
 80056dc:	f248 6380 	movw	r3, #34432	@ 0x8680
 80056e0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f006 fa9c 	bl	800bc20 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00e      	beq.n	8005710 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f81a 	bl	800573c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_ETH_IRQHandler+0x158>)
 800571c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005720:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f814 	bl	8005750 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40013c00 	.word	0x40013c00
 8005734:	00010040 	.word	0x00010040
 8005738:	007e2000 	.word	0x007e2000

0800573c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 031c 	and.w	r3, r3, #28
 8005780:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	02db      	lsls	r3, r3, #11
 8005786:	b29b      	uxth	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0302 	bic.w	r3, r3, #2
 80057a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80057b4:	f7fe fef4 	bl	80045a0 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057ba:	e00d      	b.n	80057d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80057bc:	f7fe fef0 	bl	80045a0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ca:	d301      	bcc.n	80057d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e010      	b.n	80057f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1ec      	bne.n	80057bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 031c 	and.w	r3, r3, #28
 8005816:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	02db      	lsls	r3, r3, #11
 800581c:	b29b      	uxth	r3, r3
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	019b      	lsls	r3, r3, #6
 8005828:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005854:	f7fe fea4 	bl	80045a0 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800585a:	e00d      	b.n	8005878 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800585c:	f7fe fea0 	bl	80045a0 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586a:	d301      	bcc.n	8005870 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e009      	b.n	8005884 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ec      	bne.n	800585c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0e6      	b.n	8005a6e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	2300      	moveq	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf14      	ite	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	2300      	moveq	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00b      	b.n	8005aa6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d105      	bne.n	8005aa4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f846 	bl	8005b2c <ETH_SetMACConfig>

    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b04:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fe fd50 	bl	80045b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b22:	6193      	str	r3, [r2, #24]
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4b53      	ldr	r3, [pc, #332]	@ (8005c90 <ETH_SetMACConfig+0x164>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	7b9b      	ldrb	r3, [r3, #14]
 8005b4a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	7c12      	ldrb	r2, [r2, #16]
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	d102      	bne.n	8005b5a <ETH_SetMACConfig+0x2e>
 8005b54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b58:	e000      	b.n	8005b5c <ETH_SetMACConfig+0x30>
 8005b5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005b5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	7c52      	ldrb	r2, [r2, #17]
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d102      	bne.n	8005b6c <ETH_SetMACConfig+0x40>
 8005b66:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005b6a:	e000      	b.n	8005b6e <ETH_SetMACConfig+0x42>
 8005b6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	7fdb      	ldrb	r3, [r3, #31]
 8005b7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005b7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	7f92      	ldrb	r2, [r2, #30]
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d102      	bne.n	8005b92 <ETH_SetMACConfig+0x66>
 8005b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b90:	e000      	b.n	8005b94 <ETH_SetMACConfig+0x68>
 8005b92:	2200      	movs	r2, #0
                        macconf->Speed |
 8005b94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	7f1b      	ldrb	r3, [r3, #28]
 8005b9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	d102      	bne.n	8005bbc <ETH_SetMACConfig+0x90>
 8005bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bba:	e000      	b.n	8005bbe <ETH_SetMACConfig+0x92>
 8005bbc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005bbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	7bdb      	ldrb	r3, [r3, #15]
 8005bc4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005bc6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005bcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bd4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f7fe fce2 	bl	80045b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d101      	bne.n	8005c22 <ETH_SetMACConfig+0xf6>
 8005c1e:	2280      	movs	r2, #128	@ 0x80
 8005c20:	e000      	b.n	8005c24 <ETH_SetMACConfig+0xf8>
 8005c22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005c2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005c32:	2a01      	cmp	r2, #1
 8005c34:	d101      	bne.n	8005c3a <ETH_SetMACConfig+0x10e>
 8005c36:	2208      	movs	r2, #8
 8005c38:	e000      	b.n	8005c3c <ETH_SetMACConfig+0x110>
 8005c3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005c3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	d101      	bne.n	8005c4c <ETH_SetMACConfig+0x120>
 8005c48:	2204      	movs	r2, #4
 8005c4a:	e000      	b.n	8005c4e <ETH_SetMACConfig+0x122>
 8005c4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005c4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	d101      	bne.n	8005c5e <ETH_SetMACConfig+0x132>
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	e000      	b.n	8005c60 <ETH_SetMACConfig+0x134>
 8005c5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c60:	4313      	orrs	r3, r2
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c78:	2001      	movs	r0, #1
 8005c7a:	f7fe fc9d 	bl	80045b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	619a      	str	r2, [r3, #24]
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	fd20810f 	.word	0xfd20810f

08005c94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4b3d      	ldr	r3, [pc, #244]	@ (8005da4 <ETH_SetDMAConfig+0x110>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	7b1b      	ldrb	r3, [r3, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <ETH_SetDMAConfig+0x2c>
 8005cba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005cbe:	e000      	b.n	8005cc2 <ETH_SetDMAConfig+0x2e>
 8005cc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	7b5b      	ldrb	r3, [r3, #13]
 8005cc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005cc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	7f52      	ldrb	r2, [r2, #29]
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	d102      	bne.n	8005cd8 <ETH_SetDMAConfig+0x44>
 8005cd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005cd6:	e000      	b.n	8005cda <ETH_SetDMAConfig+0x46>
 8005cd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005cda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	7b9b      	ldrb	r3, [r3, #14]
 8005ce0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005ce2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	7f1b      	ldrb	r3, [r3, #28]
 8005cee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005cf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	7f9b      	ldrb	r3, [r3, #30]
 8005cf6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005cf8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005cfe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f7fe fc44 	bl	80045b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	791b      	ldrb	r3, [r3, #4]
 8005d42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005d4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005d54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005d5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005d66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f7fe fc15 	bl	80045b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6013      	str	r3, [r2, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	f8de3f23 	.word	0xf8de3f23

08005da8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b0a6      	sub	sp, #152	@ 0x98
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005dea:	2300      	movs	r3, #0
 8005dec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005e16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fe7f 	bl	8005b2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005e50:	2300      	movs	r3, #0
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005e62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e68:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e6e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff05 	bl	8005c94 <ETH_SetDMAConfig>
}
 8005e8a:	bf00      	nop
 8005e8c:	3798      	adds	r7, #152	@ 0x98
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3305      	adds	r3, #5
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	3204      	adds	r2, #4
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <ETH_MACAddressConfig+0x68>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	061a      	lsls	r2, r3, #24
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <ETH_MACAddressConfig+0x6c>)
 8005ee6:	4413      	add	r3, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40028040 	.word	0x40028040
 8005f00:	40028044 	.word	0x40028044

08005f04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e03e      	b.n	8005f90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68d9      	ldr	r1, [r3, #12]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	3206      	adds	r2, #6
 8005f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d80c      	bhi.n	8005f74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	440b      	add	r3, r1
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e004      	b.n	8005f7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d9bd      	bls.n	8005f12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa8:	611a      	str	r2, [r3, #16]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e048      	b.n	8006056 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6919      	ldr	r1, [r3, #16]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	440b      	add	r3, r1
 8005fd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006000:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	3212      	adds	r2, #18
 8006022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d80c      	bhi.n	8006046 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6919      	ldr	r1, [r3, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	440b      	add	r3, r1
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	60da      	str	r2, [r3, #12]
 8006044:	e004      	b.n	8006050 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d9b3      	bls.n	8005fc4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006086:	60da      	str	r2, [r3, #12]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8006094:	b480      	push	{r7}
 8006096:	b091      	sub	sp, #68	@ 0x44
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3318      	adds	r3, #24
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060be:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060d6:	d007      	beq.n	80060e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80060d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060dc:	3304      	adds	r3, #4
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80060e8:	2302      	movs	r3, #2
 80060ea:	e115      	b.n	8006318 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	3301      	adds	r3, #1
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006104:	f023 031f 	bic.w	r3, r3, #31
 8006108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610a:	6852      	ldr	r2, [r2, #4]
 800610c:	431a      	orrs	r2, r3
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	431a      	orrs	r2, r3
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	431a      	orrs	r2, r3
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006172:	e084      	b.n	800627e <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e005      	b.n	80061a0 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80061a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a2:	3301      	adds	r3, #1
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d902      	bls.n	80061b2 <ETH_Prepare_Tx_Descriptors+0x11e>
 80061ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ae:	3b04      	subs	r3, #4
 80061b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c8:	d007      	beq.n	80061da <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80061ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ce:	3304      	adds	r3, #4
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d029      	beq.n	800622e <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80061e8:	2300      	movs	r3, #0
 80061ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ec:	e019      	b.n	8006222 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80061ee:	f3bf 8f5f 	dmb	sy
}
 80061f2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80061fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fe:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006202:	3301      	adds	r3, #1
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	2b03      	cmp	r3, #3
 800620a:	d902      	bls.n	8006212 <ETH_Prepare_Tx_Descriptors+0x17e>
 800620c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620e:	3b04      	subs	r3, #4
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	3301      	adds	r3, #1
 8006220:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	429a      	cmp	r2, r3
 8006228:	d3e1      	bcc.n	80061ee <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800622a:	2302      	movs	r3, #2
 800622c:	e074      	b.n	8006318 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623c:	3301      	adds	r3, #1
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006258:	f023 031f 	bic.w	r3, r3, #31
 800625c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800625e:	6852      	ldr	r2, [r2, #4]
 8006260:	431a      	orrs	r2, r3
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	3301      	adds	r3, #1
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800626c:	f3bf 8f5f 	dmb	sy
}
 8006270:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f af76 	bne.w	8006174 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e005      	b.n	80062a8 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80062be:	f3bf 8f5f 	dmb	sy
}
 80062c2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d8:	3304      	adds	r3, #4
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062e4:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062e6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ea:	613b      	str	r3, [r7, #16]
  return(result);
 80062ec:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f383 8810 	msr	PRIMASK, r3
}
 80062fa:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	4413      	add	r3, r2
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	629a      	str	r2, [r3, #40]	@ 0x28
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f383 8810 	msr	PRIMASK, r3
}
 8006314:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3744      	adds	r7, #68	@ 0x44
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006324:	b480      	push	{r7}
 8006326:	b089      	sub	sp, #36	@ 0x24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	e16b      	b.n	8006618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006340:	2201      	movs	r2, #1
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4013      	ands	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	f040 815a 	bne.w	8006612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b01      	cmp	r3, #1
 8006368:	d005      	beq.n	8006376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006372:	2b02      	cmp	r3, #2
 8006374:	d130      	bne.n	80063d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	2203      	movs	r2, #3
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063ac:	2201      	movs	r2, #1
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f003 0201 	and.w	r2, r3, #1
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d017      	beq.n	8006414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	2203      	movs	r2, #3
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4313      	orrs	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d123      	bne.n	8006468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	08da      	lsrs	r2, r3, #3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3208      	adds	r2, #8
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	220f      	movs	r2, #15
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4013      	ands	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	4313      	orrs	r3, r2
 8006458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	08da      	lsrs	r2, r3, #3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3208      	adds	r2, #8
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	2203      	movs	r2, #3
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4013      	ands	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 0203 	and.w	r2, r3, #3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80b4 	beq.w	8006612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	4b60      	ldr	r3, [pc, #384]	@ (8006630 <HAL_GPIO_Init+0x30c>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	4a5f      	ldr	r2, [pc, #380]	@ (8006630 <HAL_GPIO_Init+0x30c>)
 80064b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006630 <HAL_GPIO_Init+0x30c>)
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006634 <HAL_GPIO_Init+0x310>)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	3302      	adds	r3, #2
 80064ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	220f      	movs	r2, #15
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	43db      	mvns	r3, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4013      	ands	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a52      	ldr	r2, [pc, #328]	@ (8006638 <HAL_GPIO_Init+0x314>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d02b      	beq.n	800654a <HAL_GPIO_Init+0x226>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a51      	ldr	r2, [pc, #324]	@ (800663c <HAL_GPIO_Init+0x318>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d025      	beq.n	8006546 <HAL_GPIO_Init+0x222>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a50      	ldr	r2, [pc, #320]	@ (8006640 <HAL_GPIO_Init+0x31c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01f      	beq.n	8006542 <HAL_GPIO_Init+0x21e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a4f      	ldr	r2, [pc, #316]	@ (8006644 <HAL_GPIO_Init+0x320>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d019      	beq.n	800653e <HAL_GPIO_Init+0x21a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4e      	ldr	r2, [pc, #312]	@ (8006648 <HAL_GPIO_Init+0x324>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_GPIO_Init+0x216>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a4d      	ldr	r2, [pc, #308]	@ (800664c <HAL_GPIO_Init+0x328>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00d      	beq.n	8006536 <HAL_GPIO_Init+0x212>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a4c      	ldr	r2, [pc, #304]	@ (8006650 <HAL_GPIO_Init+0x32c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <HAL_GPIO_Init+0x20e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a4b      	ldr	r2, [pc, #300]	@ (8006654 <HAL_GPIO_Init+0x330>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d101      	bne.n	800652e <HAL_GPIO_Init+0x20a>
 800652a:	2307      	movs	r3, #7
 800652c:	e00e      	b.n	800654c <HAL_GPIO_Init+0x228>
 800652e:	2308      	movs	r3, #8
 8006530:	e00c      	b.n	800654c <HAL_GPIO_Init+0x228>
 8006532:	2306      	movs	r3, #6
 8006534:	e00a      	b.n	800654c <HAL_GPIO_Init+0x228>
 8006536:	2305      	movs	r3, #5
 8006538:	e008      	b.n	800654c <HAL_GPIO_Init+0x228>
 800653a:	2304      	movs	r3, #4
 800653c:	e006      	b.n	800654c <HAL_GPIO_Init+0x228>
 800653e:	2303      	movs	r3, #3
 8006540:	e004      	b.n	800654c <HAL_GPIO_Init+0x228>
 8006542:	2302      	movs	r3, #2
 8006544:	e002      	b.n	800654c <HAL_GPIO_Init+0x228>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <HAL_GPIO_Init+0x228>
 800654a:	2300      	movs	r3, #0
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	f002 0203 	and.w	r2, r2, #3
 8006552:	0092      	lsls	r2, r2, #2
 8006554:	4093      	lsls	r3, r2
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4313      	orrs	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800655c:	4935      	ldr	r1, [pc, #212]	@ (8006634 <HAL_GPIO_Init+0x310>)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	3302      	adds	r3, #2
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <HAL_GPIO_Init+0x334>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800658e:	4a32      	ldr	r2, [pc, #200]	@ (8006658 <HAL_GPIO_Init+0x334>)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006594:	4b30      	ldr	r3, [pc, #192]	@ (8006658 <HAL_GPIO_Init+0x334>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	43db      	mvns	r3, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4013      	ands	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065b8:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <HAL_GPIO_Init+0x334>)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065be:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <HAL_GPIO_Init+0x334>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	43db      	mvns	r3, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4013      	ands	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006658 <HAL_GPIO_Init+0x334>)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_GPIO_Init+0x334>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4013      	ands	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800660c:	4a12      	ldr	r2, [pc, #72]	@ (8006658 <HAL_GPIO_Init+0x334>)
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	3301      	adds	r3, #1
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	f67f ae90 	bls.w	8006340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3724      	adds	r7, #36	@ 0x24
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	40013800 	.word	0x40013800
 8006638:	40020000 	.word	0x40020000
 800663c:	40020400 	.word	0x40020400
 8006640:	40020800 	.word	0x40020800
 8006644:	40020c00 	.word	0x40020c00
 8006648:	40021000 	.word	0x40021000
 800664c:	40021400 	.word	0x40021400
 8006650:	40021800 	.word	0x40021800
 8006654:	40021c00 	.word	0x40021c00
 8006658:	40013c00 	.word	0x40013c00

0800665c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	807b      	strh	r3, [r7, #2]
 8006668:	4613      	mov	r3, r2
 800666a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800666c:	787b      	ldrb	r3, [r7, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006678:	e003      	b.n	8006682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800667a:	887b      	ldrh	r3, [r7, #2]
 800667c:	041a      	lsls	r2, r3, #16
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	619a      	str	r2, [r3, #24]
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af02      	add	r7, sp, #8
 8006694:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e101      	b.n	80068a4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f016 fa82 	bl	801cbc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2203      	movs	r2, #3
 80066c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066ce:	d102      	bne.n	80066d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f003 fc9f 	bl	800a01e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7c1a      	ldrb	r2, [r3, #16]
 80066e8:	f88d 2000 	strb.w	r2, [sp]
 80066ec:	3304      	adds	r3, #4
 80066ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066f0:	f003 fb7e 	bl	8009df0 <USB_CoreInit>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e0ce      	b.n	80068a4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f003 fc97 	bl	800a040 <USB_SetCurrentMode>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0bf      	b.n	80068a4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	e04a      	b.n	80067c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800672a:	7bfa      	ldrb	r2, [r7, #15]
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3315      	adds	r3, #21
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800673e:	7bfa      	ldrb	r2, [r7, #15]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	3314      	adds	r3, #20
 800674e:	7bfa      	ldrb	r2, [r7, #15]
 8006750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006752:	7bfa      	ldrb	r2, [r7, #15]
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	b298      	uxth	r0, r3
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	332e      	adds	r3, #46	@ 0x2e
 8006766:	4602      	mov	r2, r0
 8006768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800676a:	7bfa      	ldrb	r2, [r7, #15]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3318      	adds	r3, #24
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	331c      	adds	r3, #28
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006792:	7bfa      	ldrb	r2, [r7, #15]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3320      	adds	r3, #32
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067a6:	7bfa      	ldrb	r2, [r7, #15]
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3324      	adds	r3, #36	@ 0x24
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	3301      	adds	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	791b      	ldrb	r3, [r3, #4]
 80067c4:	7bfa      	ldrb	r2, [r7, #15]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3af      	bcc.n	800672a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	e044      	b.n	800685a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067d0:	7bfa      	ldrb	r2, [r7, #15]
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067e6:	7bfa      	ldrb	r2, [r7, #15]
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80067f8:	7bfa      	ldrb	r2, [r7, #15]
 80067fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	3301      	adds	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	791b      	ldrb	r3, [r3, #4]
 800685e:	7bfa      	ldrb	r2, [r7, #15]
 8006860:	429a      	cmp	r2, r3
 8006862:	d3b5      	bcc.n	80067d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7c1a      	ldrb	r2, [r3, #16]
 800686c:	f88d 2000 	strb.w	r2, [sp]
 8006870:	3304      	adds	r3, #4
 8006872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006874:	f003 fc30 	bl	800a0d8 <USB_DevInit>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e00c      	b.n	80068a4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f004 fc7a 	bl	800b196 <USB_DevDisconnect>

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_PCD_Start+0x1c>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e022      	b.n	800690e <HAL_PCD_Start+0x62>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f003 fb81 	bl	8009ffc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f004 fc28 	bl	800b154 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006916:	b590      	push	{r4, r7, lr}
 8006918:	b08d      	sub	sp, #52	@ 0x34
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f004 fce6 	bl	800b2fe <USB_GetMode>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 848c 	bne.w	8007252 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f004 fc4a 	bl	800b1d8 <USB_ReadInterrupts>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8482 	beq.w	8007250 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	0a1b      	lsrs	r3, r3, #8
 8006956:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f004 fc37 	bl	800b1d8 <USB_ReadInterrupts>
 800696a:	4603      	mov	r3, r0
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d107      	bne.n	8006984 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695a      	ldr	r2, [r3, #20]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f002 0202 	and.w	r2, r2, #2
 8006982:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f004 fc25 	bl	800b1d8 <USB_ReadInterrupts>
 800698e:	4603      	mov	r3, r0
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d161      	bne.n	8006a5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0210 	bic.w	r2, r2, #16
 80069a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80069ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069d2:	d124      	bne.n	8006a1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d035      	beq.n	8006a4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80069ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6a38      	ldr	r0, [r7, #32]
 80069f4:	f004 fa5c 	bl	800aeb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a04:	441a      	add	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a16:	441a      	add	r2, r3
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	615a      	str	r2, [r3, #20]
 8006a1c:	e016      	b.n	8006a4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a28:	d110      	bne.n	8006a4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a30:	2208      	movs	r2, #8
 8006a32:	4619      	mov	r1, r3
 8006a34:	6a38      	ldr	r0, [r7, #32]
 8006a36:	f004 fa3b 	bl	800aeb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	091b      	lsrs	r3, r3, #4
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	441a      	add	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0210 	orr.w	r2, r2, #16
 8006a5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f004 fbb9 	bl	800b1d8 <USB_ReadInterrupts>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a70:	f040 80a7 	bne.w	8006bc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f004 fbbe 	bl	800b1fe <USB_ReadDevAllOutEpInterrupt>
 8006a82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006a84:	e099      	b.n	8006bba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 808e 	beq.w	8006bae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f004 fbe2 	bl	800b266 <USB_ReadDevOutEPInterrupt>
 8006aa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aba:	461a      	mov	r2, r3
 8006abc:	2301      	movs	r3, #1
 8006abe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fea4 	bl	8007810 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 ff7a 	bl	80079e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d008      	beq.n	8006b08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	461a      	mov	r2, r3
 8006b04:	2310      	movs	r3, #16
 8006b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d030      	beq.n	8006b74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1a:	2b80      	cmp	r3, #128	@ 0x80
 8006b1c:	d109      	bne.n	8006b32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4413      	add	r3, r2
 8006b44:	3304      	adds	r3, #4
 8006b46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	78db      	ldrb	r3, [r3, #3]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d108      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f016 f937 	bl	801cdd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2302      	movs	r3, #2
 8006b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f af62 	bne.w	8006a86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f004 fb06 	bl	800b1d8 <USB_ReadInterrupts>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bd6:	f040 80db 	bne.w	8006d90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f004 fb27 	bl	800b232 <USB_ReadDevAllInEpInterrupt>
 8006be4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006bea:	e0cd      	b.n	8006d88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80c2 	beq.w	8006d7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f004 fb4d 	bl	800b2a2 <USB_ReadDevInEPInterrupt>
 8006c08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d057      	beq.n	8006cc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69f9      	ldr	r1, [r7, #28]
 8006c30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c34:	4013      	ands	r3, r2
 8006c36:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c44:	461a      	mov	r2, r3
 8006c46:	2301      	movs	r3, #1
 8006c48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	799b      	ldrb	r3, [r3, #6]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d132      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3320      	adds	r3, #32
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4403      	add	r3, r0
 8006c72:	331c      	adds	r3, #28
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4419      	add	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4403      	add	r3, r0
 8006c86:	3320      	adds	r3, #32
 8006c88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d113      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x3a2>
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3324      	adds	r3, #36	@ 0x24
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d108      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	f004 fb54 	bl	800b360 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f016 f801 	bl	801ccc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2308      	movs	r3, #8
 8006cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	2340      	movs	r3, #64	@ 0x40
 8006d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d023      	beq.n	8006d6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d24:	6a38      	ldr	r0, [r7, #32]
 8006d26:	f003 fb3b 	bl	800a3a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	3310      	adds	r3, #16
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	78db      	ldrb	r3, [r3, #3]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d108      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f016 f84e 	bl	801cdf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	2302      	movs	r3, #2
 8006d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fcbd 	bl	80076f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	3301      	adds	r3, #1
 8006d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f47f af2e 	bne.w	8006bec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f004 fa1f 	bl	800b1d8 <USB_ReadInterrupts>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006da4:	d122      	bne.n	8006dec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d108      	bne.n	8006dd6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006dcc:	2100      	movs	r1, #0
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fea4 	bl	8007b1c <HAL_PCDEx_LPM_Callback>
 8006dd4:	e002      	b.n	8006ddc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f015 ffec 	bl	801cdb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f004 f9f1 	bl	800b1d8 <USB_ReadInterrupts>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e00:	d112      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f015 ffa8 	bl	801cd68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006e26:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f004 f9d3 	bl	800b1d8 <USB_ReadInterrupts>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3c:	f040 80b7 	bne.w	8006fae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2110      	movs	r1, #16
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f003 faa0 	bl	800a3a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e64:	e046      	b.n	8006ef4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	461a      	mov	r2, r3
 8006e74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006eac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ec8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	791b      	ldrb	r3, [r3, #4]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d3b2      	bcc.n	8006e66 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006f12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7bdb      	ldrb	r3, [r3, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d016      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f2c:	f043 030b 	orr.w	r3, r3, #11
 8006f30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f42:	f043 030b 	orr.w	r3, r3, #11
 8006f46:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f48:	e015      	b.n	8006f76 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006f60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f70:	f043 030b 	orr.w	r3, r3, #11
 8006f74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006f88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f004 f9e1 	bl	800b360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f004 f910 	bl	800b1d8 <USB_ReadInterrupts>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc2:	d123      	bne.n	800700c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 f9a6 	bl	800b31a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f003 fa5d 	bl	800a492 <USB_GetDevSpeed>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	f001 f9ca 	bl	800837c <HAL_RCC_GetHCLKFreq>
 8006fe8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f002 ff61 	bl	8009eb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f015 fe8d 	bl	801cd16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800700a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f004 f8e1 	bl	800b1d8 <USB_ReadInterrupts>
 8007016:	4603      	mov	r3, r0
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b08      	cmp	r3, #8
 800701e:	d10a      	bne.n	8007036 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f015 fe6a 	bl	801ccfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f002 0208 	and.w	r2, r2, #8
 8007034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f004 f8cc 	bl	800b1d8 <USB_ReadInterrupts>
 8007040:	4603      	mov	r3, r0
 8007042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d123      	bne.n	8007092 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007056:	2301      	movs	r3, #1
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
 800705a:	e014      	b.n	8007086 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	4613      	mov	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d105      	bne.n	8007080 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fb0a 	bl	8007694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	3301      	adds	r3, #1
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	461a      	mov	r2, r3
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	4293      	cmp	r3, r2
 8007090:	d3e4      	bcc.n	800705c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f004 f89e 	bl	800b1d8 <USB_ReadInterrupts>
 800709c:	4603      	mov	r3, r0
 800709e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a6:	d13c      	bne.n	8007122 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070a8:	2301      	movs	r3, #1
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ac:	e02b      	b.n	8007106 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c2:	4613      	mov	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3318      	adds	r3, #24
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d115      	bne.n	8007100 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80070d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da12      	bge.n	8007100 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3317      	adds	r3, #23
 80070ea:	2201      	movs	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 faca 	bl	8007694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	3301      	adds	r3, #1
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	791b      	ldrb	r3, [r3, #4]
 800710a:	461a      	mov	r2, r3
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	4293      	cmp	r3, r2
 8007110:	d3cd      	bcc.n	80070ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f004 f856 	bl	800b1d8 <USB_ReadInterrupts>
 800712c:	4603      	mov	r3, r0
 800712e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007136:	d156      	bne.n	80071e6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007138:	2301      	movs	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
 800713c:	e045      	b.n	80071ca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007152:	4613      	mov	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d12e      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007166:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007168:	2b00      	cmp	r3, #0
 800716a:	da2b      	bge.n	80071c4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	0c1a      	lsrs	r2, r3, #16
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007176:	4053      	eors	r3, r2
 8007178:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800717c:	2b00      	cmp	r3, #0
 800717e:	d121      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007192:	2201      	movs	r2, #1
 8007194:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071c0:	6053      	str	r3, [r2, #4]
            break;
 80071c2:	e008      	b.n	80071d6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	3301      	adds	r3, #1
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	791b      	ldrb	r3, [r3, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d3b3      	bcc.n	800713e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80071e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f003 fff4 	bl	800b1d8 <USB_ReadInterrupts>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fa:	d10a      	bne.n	8007212 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f015 fe0b 	bl	801ce18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695a      	ldr	r2, [r3, #20]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f003 ffde 	bl	800b1d8 <USB_ReadInterrupts>
 800721c:	4603      	mov	r3, r0
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b04      	cmp	r3, #4
 8007224:	d115      	bne.n	8007252 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f015 fdfb 	bl	801ce34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6859      	ldr	r1, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e000      	b.n	8007252 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007250:	bf00      	nop
    }
  }
}
 8007252:	3734      	adds	r7, #52	@ 0x34
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_PCD_SetAddress+0x1a>
 800726e:	2302      	movs	r3, #2
 8007270:	e012      	b.n	8007298 <HAL_PCD_SetAddress+0x40>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f003 ff3d 	bl	800b108 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	70fb      	strb	r3, [r7, #3]
 80072b2:	460b      	mov	r3, r1
 80072b4:	803b      	strh	r3, [r7, #0]
 80072b6:	4613      	mov	r3, r2
 80072b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da0f      	bge.n	80072e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	3310      	adds	r3, #16
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	3304      	adds	r3, #4
 80072dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	705a      	strb	r2, [r3, #1]
 80072e4:	e00f      	b.n	8007306 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	3304      	adds	r3, #4
 80072fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007312:	883b      	ldrh	r3, [r7, #0]
 8007314:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	78ba      	ldrb	r2, [r7, #2]
 8007320:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007334:	78bb      	ldrb	r3, [r7, #2]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d102      	bne.n	8007340 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_PCD_EP_Open+0xae>
 800734a:	2302      	movs	r3, #2
 800734c:	e00e      	b.n	800736c <HAL_PCD_EP_Open+0xcc>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	4618      	mov	r0, r3
 800735e:	f003 f8bd 	bl	800a4dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800736a:	7afb      	ldrb	r3, [r7, #11]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	da0f      	bge.n	80073a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	4613      	mov	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	3310      	adds	r3, #16
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	3304      	adds	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	705a      	strb	r2, [r3, #1]
 80073a6:	e00f      	b.n	80073c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_PCD_EP_Close+0x6e>
 80073de:	2302      	movs	r3, #2
 80073e0:	e00e      	b.n	8007400 <HAL_PCD_EP_Close+0x8c>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f003 f8fb 	bl	800a5ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	460b      	mov	r3, r1
 8007416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	3304      	adds	r3, #4
 8007430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2200      	movs	r2, #0
 8007442:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2200      	movs	r2, #0
 8007448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	799b      	ldrb	r3, [r3, #6]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d102      	bne.n	8007464 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	799b      	ldrb	r3, [r3, #6]
 800746c:	461a      	mov	r2, r3
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	f003 f998 	bl	800a7a4 <USB_EPStartXfer>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	f003 020f 	and.w	r2, r3, #15
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80074a0:	681b      	ldr	r3, [r3, #0]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	460b      	mov	r3, r1
 80074bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	3310      	adds	r3, #16
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	3304      	adds	r3, #4
 80074d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2200      	movs	r2, #0
 80074e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2201      	movs	r2, #1
 80074ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	799b      	ldrb	r3, [r3, #6]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d102      	bne.n	8007508 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	799b      	ldrb	r3, [r3, #6]
 8007510:	461a      	mov	r2, r3
 8007512:	6979      	ldr	r1, [r7, #20]
 8007514:	f003 f946 	bl	800a7a4 <USB_EPStartXfer>

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7912      	ldrb	r2, [r2, #4]
 8007538:	4293      	cmp	r3, r2
 800753a:	d901      	bls.n	8007540 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e04f      	b.n	80075e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da0f      	bge.n	8007568 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	3310      	adds	r3, #16
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	705a      	strb	r2, [r3, #1]
 8007566:	e00d      	b.n	8007584 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007568:	78fa      	ldrb	r2, [r7, #3]
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	b2da      	uxtb	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_PCD_EP_SetStall+0x82>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e01d      	b.n	80075e0 <HAL_PCD_EP_SetStall+0xbe>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68f9      	ldr	r1, [r7, #12]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f003 fcd4 	bl	800af60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	7999      	ldrb	r1, [r3, #6]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075d0:	461a      	mov	r2, r3
 80075d2:	f003 fec5 	bl	800b360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	7912      	ldrb	r2, [r2, #4]
 80075fe:	4293      	cmp	r3, r2
 8007600:	d901      	bls.n	8007606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e042      	b.n	800768c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da0f      	bge.n	800762e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	3310      	adds	r3, #16
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	3304      	adds	r3, #4
 8007624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	705a      	strb	r2, [r3, #1]
 800762c:	e00f      	b.n	800764e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	b2da      	uxtb	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_PCD_EP_ClrStall+0x86>
 800766a:	2302      	movs	r3, #2
 800766c:	e00e      	b.n	800768c <HAL_PCD_EP_ClrStall+0xa4>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	4618      	mov	r0, r3
 800767e:	f003 fcdd 	bl	800b03c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80076a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da0c      	bge.n	80076c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 020f 	and.w	r2, r3, #15
 80076ae:	4613      	mov	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	3310      	adds	r3, #16
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e00c      	b.n	80076dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3304      	adds	r3, #4
 80076da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68f9      	ldr	r1, [r7, #12]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f003 fafc 	bl	800ace0 <USB_EPStopXfer>
 80076e8:	4603      	mov	r3, r0
 80076ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b08a      	sub	sp, #40	@ 0x28
 80076fa:	af02      	add	r7, sp, #8
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	3310      	adds	r3, #16
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	3304      	adds	r3, #4
 800771c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	d901      	bls.n	800772e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e06b      	b.n	8007806 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	429a      	cmp	r2, r3
 8007742:	d902      	bls.n	800774a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3303      	adds	r3, #3
 800774e:	089b      	lsrs	r3, r3, #2
 8007750:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007752:	e02a      	b.n	80077aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	429a      	cmp	r2, r3
 8007768:	d902      	bls.n	8007770 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3303      	adds	r3, #3
 8007774:	089b      	lsrs	r3, r3, #2
 8007776:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68d9      	ldr	r1, [r3, #12]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	4603      	mov	r3, r0
 800778c:	6978      	ldr	r0, [r7, #20]
 800778e:	f003 fb51 	bl	800ae34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	441a      	add	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d809      	bhi.n	80077d4 <PCD_WriteEmptyTxFifo+0xde>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d203      	bcs.n	80077d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1bf      	bne.n	8007754 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d811      	bhi.n	8007804 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	2201      	movs	r2, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	6939      	ldr	r1, [r7, #16]
 80077fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007800:	4013      	ands	r3, r2
 8007802:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	333c      	adds	r3, #60	@ 0x3c
 8007828:	3304      	adds	r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	799b      	ldrb	r3, [r3, #6]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d17b      	bne.n	800793e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d015      	beq.n	800787c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4a61      	ldr	r2, [pc, #388]	@ (80079d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	f240 80b9 	bls.w	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80b3 	beq.w	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007872:	461a      	mov	r2, r3
 8007874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007878:	6093      	str	r3, [r2, #8]
 800787a:	e0a7      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	461a      	mov	r2, r3
 8007894:	2320      	movs	r3, #32
 8007896:	6093      	str	r3, [r2, #8]
 8007898:	e098      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8093 	bne.w	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4a4b      	ldr	r2, [pc, #300]	@ (80079d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d90f      	bls.n	80078ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c4:	461a      	mov	r2, r3
 80078c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ca:	6093      	str	r3, [r2, #8]
 80078cc:	e07e      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	0159      	lsls	r1, r3, #5
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d114      	bne.n	8007930 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007918:	461a      	mov	r2, r3
 800791a:	2101      	movs	r1, #1
 800791c:	f003 fd20 	bl	800b360 <USB_EP0_OutStart>
 8007920:	e006      	b.n	8007930 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	441a      	add	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f015 f9aa 	bl	801cc90 <HAL_PCD_DataOutStageCallback>
 800793c:	e046      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4a26      	ldr	r2, [pc, #152]	@ (80079dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d124      	bne.n	8007990 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795c:	461a      	mov	r2, r3
 800795e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007962:	6093      	str	r3, [r2, #8]
 8007964:	e032      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d008      	beq.n	8007982 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	461a      	mov	r2, r3
 800797e:	2320      	movs	r3, #32
 8007980:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f015 f981 	bl	801cc90 <HAL_PCD_DataOutStageCallback>
 800798e:	e01d      	b.n	80079cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d114      	bne.n	80079c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079b8:	461a      	mov	r2, r3
 80079ba:	2100      	movs	r1, #0
 80079bc:	f003 fcd0 	bl	800b360 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f015 f962 	bl	801cc90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	4f54300a 	.word	0x4f54300a
 80079dc:	4f54310a 	.word	0x4f54310a

080079e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	333c      	adds	r3, #60	@ 0x3c
 80079f8:	3304      	adds	r3, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a15      	ldr	r2, [pc, #84]	@ (8007a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d90e      	bls.n	8007a34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d009      	beq.n	8007a34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f015 f919 	bl	801cc6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d90c      	bls.n	8007a5c <PCD_EP_OutSetupPacket_int+0x7c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	799b      	ldrb	r3, [r3, #6]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d108      	bne.n	8007a5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a54:	461a      	mov	r2, r3
 8007a56:	2101      	movs	r1, #1
 8007a58:	f003 fc82 	bl	800b360 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	4f54300a 	.word	0x4f54300a

08007a6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a8a:	883b      	ldrh	r3, [r7, #0]
 8007a8c:	0419      	lsls	r1, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a98:	e028      	b.n	8007aec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa0:	0c1b      	lsrs	r3, r3, #16
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	e00d      	b.n	8007aca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3340      	adds	r3, #64	@ 0x40
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	0c1b      	lsrs	r3, r3, #16
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
 8007aca:	7bfa      	ldrb	r2, [r7, #15]
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d3ec      	bcc.n	8007aae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ad4:	883b      	ldrh	r3, [r7, #0]
 8007ad6:	0418      	lsls	r0, r3, #16
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	4302      	orrs	r2, r0
 8007ae4:	3340      	adds	r3, #64	@ 0x40
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	887a      	ldrh	r2, [r7, #2]
 8007b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e267      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d075      	beq.n	8007c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b52:	4b88      	ldr	r3, [pc, #544]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 030c 	and.w	r3, r3, #12
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d00c      	beq.n	8007b78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b5e:	4b85      	ldr	r3, [pc, #532]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d112      	bne.n	8007b90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b6a:	4b82      	ldr	r3, [pc, #520]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b76:	d10b      	bne.n	8007b90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b78:	4b7e      	ldr	r3, [pc, #504]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d05b      	beq.n	8007c3c <HAL_RCC_OscConfig+0x108>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d157      	bne.n	8007c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e242      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b98:	d106      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x74>
 8007b9a:	4b76      	ldr	r3, [pc, #472]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a75      	ldr	r2, [pc, #468]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	e01d      	b.n	8007be4 <HAL_RCC_OscConfig+0xb0>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bb0:	d10c      	bne.n	8007bcc <HAL_RCC_OscConfig+0x98>
 8007bb2:	4b70      	ldr	r3, [pc, #448]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	e00b      	b.n	8007be4 <HAL_RCC_OscConfig+0xb0>
 8007bcc:	4b69      	ldr	r3, [pc, #420]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a68      	ldr	r2, [pc, #416]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	4b66      	ldr	r3, [pc, #408]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a65      	ldr	r2, [pc, #404]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d013      	beq.n	8007c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fc fcd8 	bl	80045a0 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bf4:	f7fc fcd4 	bl	80045a0 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b64      	cmp	r3, #100	@ 0x64
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e207      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c06:	4b5b      	ldr	r3, [pc, #364]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f0      	beq.n	8007bf4 <HAL_RCC_OscConfig+0xc0>
 8007c12:	e014      	b.n	8007c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c14:	f7fc fcc4 	bl	80045a0 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c1c:	f7fc fcc0 	bl	80045a0 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b64      	cmp	r3, #100	@ 0x64
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1f3      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c2e:	4b51      	ldr	r3, [pc, #324]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f0      	bne.n	8007c1c <HAL_RCC_OscConfig+0xe8>
 8007c3a:	e000      	b.n	8007c3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d063      	beq.n	8007d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 030c 	and.w	r3, r3, #12
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c56:	4b47      	ldr	r3, [pc, #284]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d11c      	bne.n	8007c9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c62:	4b44      	ldr	r3, [pc, #272]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d116      	bne.n	8007c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c6e:	4b41      	ldr	r3, [pc, #260]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_RCC_OscConfig+0x152>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d001      	beq.n	8007c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e1c7      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c86:	4b3b      	ldr	r3, [pc, #236]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4937      	ldr	r1, [pc, #220]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c9a:	e03a      	b.n	8007d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d020      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ca4:	4b34      	ldr	r3, [pc, #208]	@ (8007d78 <HAL_RCC_OscConfig+0x244>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007caa:	f7fc fc79 	bl	80045a0 <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb0:	e008      	b.n	8007cc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cb2:	f7fc fc75 	bl	80045a0 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e1a8      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd0:	4b28      	ldr	r3, [pc, #160]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4925      	ldr	r1, [pc, #148]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	600b      	str	r3, [r1, #0]
 8007ce4:	e015      	b.n	8007d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce6:	4b24      	ldr	r3, [pc, #144]	@ (8007d78 <HAL_RCC_OscConfig+0x244>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fc fc58 	bl	80045a0 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf4:	f7fc fc54 	bl	80045a0 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e187      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d06:	4b1b      	ldr	r3, [pc, #108]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d036      	beq.n	8007d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d016      	beq.n	8007d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d26:	4b15      	ldr	r3, [pc, #84]	@ (8007d7c <HAL_RCC_OscConfig+0x248>)
 8007d28:	2201      	movs	r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2c:	f7fc fc38 	bl	80045a0 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d34:	f7fc fc34 	bl	80045a0 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e167      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d46:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <HAL_RCC_OscConfig+0x240>)
 8007d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <HAL_RCC_OscConfig+0x200>
 8007d52:	e01b      	b.n	8007d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d54:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <HAL_RCC_OscConfig+0x248>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d5a:	f7fc fc21 	bl	80045a0 <HAL_GetTick>
 8007d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d60:	e00e      	b.n	8007d80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d62:	f7fc fc1d 	bl	80045a0 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d907      	bls.n	8007d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e150      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
 8007d74:	40023800 	.word	0x40023800
 8007d78:	42470000 	.word	0x42470000
 8007d7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d80:	4b88      	ldr	r3, [pc, #544]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1ea      	bne.n	8007d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8097 	beq.w	8007ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d9e:	4b81      	ldr	r3, [pc, #516]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10f      	bne.n	8007dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	4a7c      	ldr	r2, [pc, #496]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dba:	4b7a      	ldr	r3, [pc, #488]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dca:	4b77      	ldr	r3, [pc, #476]	@ (8007fa8 <HAL_RCC_OscConfig+0x474>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d118      	bne.n	8007e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dd6:	4b74      	ldr	r3, [pc, #464]	@ (8007fa8 <HAL_RCC_OscConfig+0x474>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a73      	ldr	r2, [pc, #460]	@ (8007fa8 <HAL_RCC_OscConfig+0x474>)
 8007ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007de2:	f7fc fbdd 	bl	80045a0 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dea:	f7fc fbd9 	bl	80045a0 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e10c      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa8 <HAL_RCC_OscConfig+0x474>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCC_OscConfig+0x2ea>
 8007e10:	4b64      	ldr	r3, [pc, #400]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e14:	4a63      	ldr	r2, [pc, #396]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e1c:	e01c      	b.n	8007e58 <HAL_RCC_OscConfig+0x324>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCC_OscConfig+0x30c>
 8007e26:	4b5f      	ldr	r3, [pc, #380]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e2c:	f043 0304 	orr.w	r3, r3, #4
 8007e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e32:	4b5c      	ldr	r3, [pc, #368]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e36:	4a5b      	ldr	r2, [pc, #364]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e3e:	e00b      	b.n	8007e58 <HAL_RCC_OscConfig+0x324>
 8007e40:	4b58      	ldr	r3, [pc, #352]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e44:	4a57      	ldr	r2, [pc, #348]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e4c:	4b55      	ldr	r3, [pc, #340]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e50:	4a54      	ldr	r2, [pc, #336]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e52:	f023 0304 	bic.w	r3, r3, #4
 8007e56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d015      	beq.n	8007e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e60:	f7fc fb9e 	bl	80045a0 <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e66:	e00a      	b.n	8007e7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e68:	f7fc fb9a 	bl	80045a0 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e0cb      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e7e:	4b49      	ldr	r3, [pc, #292]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0ee      	beq.n	8007e68 <HAL_RCC_OscConfig+0x334>
 8007e8a:	e014      	b.n	8007eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e8c:	f7fc fb88 	bl	80045a0 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e92:	e00a      	b.n	8007eaa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e94:	f7fc fb84 	bl	80045a0 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e0b5      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1ee      	bne.n	8007e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d105      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ebc:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec0:	4a38      	ldr	r2, [pc, #224]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ec6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80a1 	beq.w	8008014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ed2:	4b34      	ldr	r3, [pc, #208]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 030c 	and.w	r3, r3, #12
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d05c      	beq.n	8007f98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d141      	bne.n	8007f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ee6:	4b31      	ldr	r3, [pc, #196]	@ (8007fac <HAL_RCC_OscConfig+0x478>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eec:	f7fc fb58 	bl	80045a0 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fc fb54 	bl	80045a0 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e087      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f06:	4b27      	ldr	r3, [pc, #156]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69da      	ldr	r2, [r3, #28]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	019b      	lsls	r3, r3, #6
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	491b      	ldr	r1, [pc, #108]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fac <HAL_RCC_OscConfig+0x478>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f42:	f7fc fb2d 	bl	80045a0 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f4a:	f7fc fb29 	bl	80045a0 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e05c      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f5c:	4b11      	ldr	r3, [pc, #68]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x416>
 8007f68:	e054      	b.n	8008014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f6a:	4b10      	ldr	r3, [pc, #64]	@ (8007fac <HAL_RCC_OscConfig+0x478>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f70:	f7fc fb16 	bl	80045a0 <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f78:	f7fc fb12 	bl	80045a0 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e045      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f8a:	4b06      	ldr	r3, [pc, #24]	@ (8007fa4 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f0      	bne.n	8007f78 <HAL_RCC_OscConfig+0x444>
 8007f96:	e03d      	b.n	8008014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d107      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e038      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <HAL_RCC_OscConfig+0x4ec>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d028      	beq.n	8008010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d121      	bne.n	8008010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d11a      	bne.n	8008010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d111      	bne.n	8008010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d107      	bne.n	8008010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800800c:	429a      	cmp	r2, r3
 800800e:	d001      	beq.n	8008014 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800

08008024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0cc      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008038:	4b68      	ldr	r3, [pc, #416]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d90c      	bls.n	8008060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008046:	4b65      	ldr	r3, [pc, #404]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800804e:	4b63      	ldr	r3, [pc, #396]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d001      	beq.n	8008060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0b8      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d020      	beq.n	80080ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008078:	4b59      	ldr	r3, [pc, #356]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	4a58      	ldr	r2, [pc, #352]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008082:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008090:	4b53      	ldr	r3, [pc, #332]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	4a52      	ldr	r2, [pc, #328]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800809a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800809c:	4b50      	ldr	r3, [pc, #320]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	494d      	ldr	r1, [pc, #308]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d044      	beq.n	8008144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d107      	bne.n	80080d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080c2:	4b47      	ldr	r3, [pc, #284]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d119      	bne.n	8008102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e07f      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d003      	beq.n	80080e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d107      	bne.n	80080f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e2:	4b3f      	ldr	r3, [pc, #252]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e06f      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f2:	4b3b      	ldr	r3, [pc, #236]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e067      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008102:	4b37      	ldr	r3, [pc, #220]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 0203 	bic.w	r2, r3, #3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	4934      	ldr	r1, [pc, #208]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008110:	4313      	orrs	r3, r2
 8008112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008114:	f7fc fa44 	bl	80045a0 <HAL_GetTick>
 8008118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800811a:	e00a      	b.n	8008132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800811c:	f7fc fa40 	bl	80045a0 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e04f      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008132:	4b2b      	ldr	r3, [pc, #172]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 020c 	and.w	r2, r3, #12
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	429a      	cmp	r2, r3
 8008142:	d1eb      	bne.n	800811c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008144:	4b25      	ldr	r3, [pc, #148]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d20c      	bcs.n	800816c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008152:	4b22      	ldr	r3, [pc, #136]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800815a:	4b20      	ldr	r3, [pc, #128]	@ (80081dc <HAL_RCC_ClockConfig+0x1b8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e032      	b.n	80081d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4916      	ldr	r1, [pc, #88]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008196:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	490e      	ldr	r1, [pc, #56]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081aa:	f000 f821 	bl	80081f0 <HAL_RCC_GetSysClockFreq>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <HAL_RCC_ClockConfig+0x1bc>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	490a      	ldr	r1, [pc, #40]	@ (80081e4 <HAL_RCC_ClockConfig+0x1c0>)
 80081bc:	5ccb      	ldrb	r3, [r1, r3]
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	4a09      	ldr	r2, [pc, #36]	@ (80081e8 <HAL_RCC_ClockConfig+0x1c4>)
 80081c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081c6:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <HAL_RCC_ClockConfig+0x1c8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fb f976 	bl	80034bc <HAL_InitTick>

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023c00 	.word	0x40023c00
 80081e0:	40023800 	.word	0x40023800
 80081e4:	08022d70 	.word	0x08022d70
 80081e8:	20000000 	.word	0x20000000
 80081ec:	20000004 	.word	0x20000004

080081f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081f4:	b090      	sub	sp, #64	@ 0x40
 80081f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008208:	4b59      	ldr	r3, [pc, #356]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 030c 	and.w	r3, r3, #12
 8008210:	2b08      	cmp	r3, #8
 8008212:	d00d      	beq.n	8008230 <HAL_RCC_GetSysClockFreq+0x40>
 8008214:	2b08      	cmp	r3, #8
 8008216:	f200 80a1 	bhi.w	800835c <HAL_RCC_GetSysClockFreq+0x16c>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HAL_RCC_GetSysClockFreq+0x34>
 800821e:	2b04      	cmp	r3, #4
 8008220:	d003      	beq.n	800822a <HAL_RCC_GetSysClockFreq+0x3a>
 8008222:	e09b      	b.n	800835c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008224:	4b53      	ldr	r3, [pc, #332]	@ (8008374 <HAL_RCC_GetSysClockFreq+0x184>)
 8008226:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008228:	e09b      	b.n	8008362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800822a:	4b53      	ldr	r3, [pc, #332]	@ (8008378 <HAL_RCC_GetSysClockFreq+0x188>)
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800822e:	e098      	b.n	8008362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008230:	4b4f      	ldr	r3, [pc, #316]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800823a:	4b4d      	ldr	r3, [pc, #308]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d028      	beq.n	8008298 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008246:	4b4a      	ldr	r3, [pc, #296]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	099b      	lsrs	r3, r3, #6
 800824c:	2200      	movs	r2, #0
 800824e:	623b      	str	r3, [r7, #32]
 8008250:	627a      	str	r2, [r7, #36]	@ 0x24
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008258:	2100      	movs	r1, #0
 800825a:	4b47      	ldr	r3, [pc, #284]	@ (8008378 <HAL_RCC_GetSysClockFreq+0x188>)
 800825c:	fb03 f201 	mul.w	r2, r3, r1
 8008260:	2300      	movs	r3, #0
 8008262:	fb00 f303 	mul.w	r3, r0, r3
 8008266:	4413      	add	r3, r2
 8008268:	4a43      	ldr	r2, [pc, #268]	@ (8008378 <HAL_RCC_GetSysClockFreq+0x188>)
 800826a:	fba0 1202 	umull	r1, r2, r0, r2
 800826e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008270:	460a      	mov	r2, r1
 8008272:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008276:	4413      	add	r3, r2
 8008278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800827a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827c:	2200      	movs	r2, #0
 800827e:	61bb      	str	r3, [r7, #24]
 8008280:	61fa      	str	r2, [r7, #28]
 8008282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800828a:	f7f7 fff9 	bl	8000280 <__aeabi_uldivmod>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4613      	mov	r3, r2
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008296:	e053      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008298:	4b35      	ldr	r3, [pc, #212]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	099b      	lsrs	r3, r3, #6
 800829e:	2200      	movs	r2, #0
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	617a      	str	r2, [r7, #20]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80082aa:	f04f 0b00 	mov.w	fp, #0
 80082ae:	4652      	mov	r2, sl
 80082b0:	465b      	mov	r3, fp
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f04f 0100 	mov.w	r1, #0
 80082ba:	0159      	lsls	r1, r3, #5
 80082bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082c0:	0150      	lsls	r0, r2, #5
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	ebb2 080a 	subs.w	r8, r2, sl
 80082ca:	eb63 090b 	sbc.w	r9, r3, fp
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80082da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80082de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80082e2:	ebb2 0408 	subs.w	r4, r2, r8
 80082e6:	eb63 0509 	sbc.w	r5, r3, r9
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	00eb      	lsls	r3, r5, #3
 80082f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082f8:	00e2      	lsls	r2, r4, #3
 80082fa:	4614      	mov	r4, r2
 80082fc:	461d      	mov	r5, r3
 80082fe:	eb14 030a 	adds.w	r3, r4, sl
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	eb45 030b 	adc.w	r3, r5, fp
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008316:	4629      	mov	r1, r5
 8008318:	028b      	lsls	r3, r1, #10
 800831a:	4621      	mov	r1, r4
 800831c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008320:	4621      	mov	r1, r4
 8008322:	028a      	lsls	r2, r1, #10
 8008324:	4610      	mov	r0, r2
 8008326:	4619      	mov	r1, r3
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	2200      	movs	r2, #0
 800832c:	60bb      	str	r3, [r7, #8]
 800832e:	60fa      	str	r2, [r7, #12]
 8008330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008334:	f7f7 ffa4 	bl	8000280 <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4613      	mov	r3, r2
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008340:	4b0b      	ldr	r3, [pc, #44]	@ (8008370 <HAL_RCC_GetSysClockFreq+0x180>)
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	3301      	adds	r3, #1
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800835a:	e002      	b.n	8008362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <HAL_RCC_GetSysClockFreq+0x184>)
 800835e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008364:	4618      	mov	r0, r3
 8008366:	3740      	adds	r7, #64	@ 0x40
 8008368:	46bd      	mov	sp, r7
 800836a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800836e:	bf00      	nop
 8008370:	40023800 	.word	0x40023800
 8008374:	00f42400 	.word	0x00f42400
 8008378:	017d7840 	.word	0x017d7840

0800837c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008380:	4b03      	ldr	r3, [pc, #12]	@ (8008390 <HAL_RCC_GetHCLKFreq+0x14>)
 8008382:	681b      	ldr	r3, [r3, #0]
}
 8008384:	4618      	mov	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20000000 	.word	0x20000000

08008394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008398:	f7ff fff0 	bl	800837c <HAL_RCC_GetHCLKFreq>
 800839c:	4602      	mov	r2, r0
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	0a9b      	lsrs	r3, r3, #10
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	4903      	ldr	r1, [pc, #12]	@ (80083b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083aa:	5ccb      	ldrb	r3, [r1, r3]
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40023800 	.word	0x40023800
 80083b8:	08022d80 	.word	0x08022d80

080083bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083c0:	f7ff ffdc 	bl	800837c <HAL_RCC_GetHCLKFreq>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	0b5b      	lsrs	r3, r3, #13
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	4903      	ldr	r1, [pc, #12]	@ (80083e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083d2:	5ccb      	ldrb	r3, [r1, r3]
 80083d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40023800 	.word	0x40023800
 80083e0:	08022d80 	.word	0x08022d80

080083e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220f      	movs	r2, #15
 80083f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 0203 	and.w	r2, r3, #3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008400:	4b0f      	ldr	r3, [pc, #60]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008418:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008426:	4b07      	ldr	r3, [pc, #28]	@ (8008444 <HAL_RCC_GetClockConfig+0x60>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0207 	and.w	r2, r3, #7
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	601a      	str	r2, [r3, #0]
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800
 8008444:	40023c00 	.word	0x40023c00

08008448 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e038      	b.n	80084d0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7f9 fa18 	bl	80018a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3308      	adds	r3, #8
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f001 fbe4 	bl	8009c50 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	461a      	mov	r2, r3
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	f001 fc46 	bl	8009d24 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6858      	ldr	r0, [r3, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	f001 fc6b 	bl	8009d80 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	6892      	ldr	r2, [r2, #8]
 80084b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6892      	ldr	r2, [r2, #8]
 80084be:	f041 0101 	orr.w	r1, r1, #1
 80084c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e041      	b.n	800856e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fb fc80 	bl	8003e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f000 f9b6 	bl	8008888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e04e      	b.n	800862e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a23      	ldr	r2, [pc, #140]	@ (800863c <HAL_TIM_Base_Start_IT+0xc4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d022      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ba:	d01d      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008640 <HAL_TIM_Base_Start_IT+0xc8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d018      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008644 <HAL_TIM_Base_Start_IT+0xcc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008648 <HAL_TIM_Base_Start_IT+0xd0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00e      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1b      	ldr	r2, [pc, #108]	@ (800864c <HAL_TIM_Base_Start_IT+0xd4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d009      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a19      	ldr	r2, [pc, #100]	@ (8008650 <HAL_TIM_Base_Start_IT+0xd8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0x80>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <HAL_TIM_Base_Start_IT+0xdc>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d111      	bne.n	800861c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b06      	cmp	r3, #6
 8008608:	d010      	beq.n	800862c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0201 	orr.w	r2, r2, #1
 8008618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861a:	e007      	b.n	800862c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40010000 	.word	0x40010000
 8008640:	40000400 	.word	0x40000400
 8008644:	40000800 	.word	0x40000800
 8008648:	40000c00 	.word	0x40000c00
 800864c:	40010400 	.word	0x40010400
 8008650:	40014000 	.word	0x40014000
 8008654:	40001800 	.word	0x40001800

08008658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d020      	beq.n	80086bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01b      	beq.n	80086bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0202 	mvn.w	r2, #2
 800868c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f8d2 	bl	800884c <HAL_TIM_IC_CaptureCallback>
 80086a8:	e005      	b.n	80086b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8c4 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8d5 	bl	8008860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d020      	beq.n	8008708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01b      	beq.n	8008708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0204 	mvn.w	r2, #4
 80086d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f8ac 	bl	800884c <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f89e 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8af 	bl	8008860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d020      	beq.n	8008754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01b      	beq.n	8008754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0208 	mvn.w	r2, #8
 8008724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2204      	movs	r2, #4
 800872a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f886 	bl	800884c <HAL_TIM_IC_CaptureCallback>
 8008740:	e005      	b.n	800874e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f878 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f889 	bl	8008860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f003 0310 	and.w	r3, r3, #16
 800875a:	2b00      	cmp	r3, #0
 800875c:	d020      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01b      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f06f 0210 	mvn.w	r2, #16
 8008770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2208      	movs	r2, #8
 8008776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f860 	bl	800884c <HAL_TIM_IC_CaptureCallback>
 800878c:	e005      	b.n	800879a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f852 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f863 	bl	8008860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d007      	beq.n	80087c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0201 	mvn.w	r2, #1
 80087bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7f9 f97e 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00c      	beq.n	80087e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d007      	beq.n	80087e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80087e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f97c 	bl	8008ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f834 	bl	8008874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0220 	mvn.w	r2, #32
 8008828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f94e 	bl	8008acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a43      	ldr	r2, [pc, #268]	@ (80089a8 <TIM_Base_SetConfig+0x120>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a6:	d00f      	beq.n	80088c8 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a40      	ldr	r2, [pc, #256]	@ (80089ac <TIM_Base_SetConfig+0x124>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00b      	beq.n	80088c8 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3f      	ldr	r2, [pc, #252]	@ (80089b0 <TIM_Base_SetConfig+0x128>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d007      	beq.n	80088c8 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a3e      	ldr	r2, [pc, #248]	@ (80089b4 <TIM_Base_SetConfig+0x12c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_Base_SetConfig+0x40>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a3d      	ldr	r2, [pc, #244]	@ (80089b8 <TIM_Base_SetConfig+0x130>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d108      	bne.n	80088da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a32      	ldr	r2, [pc, #200]	@ (80089a8 <TIM_Base_SetConfig+0x120>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d02b      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e8:	d027      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2f      	ldr	r2, [pc, #188]	@ (80089ac <TIM_Base_SetConfig+0x124>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d023      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2e      	ldr	r2, [pc, #184]	@ (80089b0 <TIM_Base_SetConfig+0x128>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01f      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2d      	ldr	r2, [pc, #180]	@ (80089b4 <TIM_Base_SetConfig+0x12c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d01b      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2c      	ldr	r2, [pc, #176]	@ (80089b8 <TIM_Base_SetConfig+0x130>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d017      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2b      	ldr	r2, [pc, #172]	@ (80089bc <TIM_Base_SetConfig+0x134>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d013      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2a      	ldr	r2, [pc, #168]	@ (80089c0 <TIM_Base_SetConfig+0x138>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00f      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a29      	ldr	r2, [pc, #164]	@ (80089c4 <TIM_Base_SetConfig+0x13c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00b      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a28      	ldr	r2, [pc, #160]	@ (80089c8 <TIM_Base_SetConfig+0x140>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d007      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a27      	ldr	r2, [pc, #156]	@ (80089cc <TIM_Base_SetConfig+0x144>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a26      	ldr	r2, [pc, #152]	@ (80089d0 <TIM_Base_SetConfig+0x148>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d108      	bne.n	800894c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a0e      	ldr	r2, [pc, #56]	@ (80089a8 <TIM_Base_SetConfig+0x120>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <TIM_Base_SetConfig+0xf2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a10      	ldr	r2, [pc, #64]	@ (80089b8 <TIM_Base_SetConfig+0x130>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d103      	bne.n	8008982 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f043 0204 	orr.w	r2, r3, #4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	601a      	str	r2, [r3, #0]
}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40000400 	.word	0x40000400
 80089b0:	40000800 	.word	0x40000800
 80089b4:	40000c00 	.word	0x40000c00
 80089b8:	40010400 	.word	0x40010400
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40014400 	.word	0x40014400
 80089c4:	40014800 	.word	0x40014800
 80089c8:	40001800 	.word	0x40001800
 80089cc:	40001c00 	.word	0x40001c00
 80089d0:	40002000 	.word	0x40002000

080089d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e05a      	b.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a21      	ldr	r2, [pc, #132]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d022      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a38:	d01d      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d018      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00e      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a15      	ldr	r2, [pc, #84]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10c      	bne.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40010400 	.word	0x40010400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40001800 	.word	0x40001800

08008acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e042      	b.n	8008b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fb fa18 	bl	8003f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	@ 0x24
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fe15 	bl	8009768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	@ 0x28
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d175      	bne.n	8008ca0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_UART_Transmit+0x2c>
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e06e      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2221      	movs	r2, #33	@ 0x21
 8008bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bd2:	f7fb fce5 	bl	80045a0 <HAL_GetTick>
 8008bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bec:	d108      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e003      	b.n	8008c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c08:	e02e      	b.n	8008c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2180      	movs	r1, #128	@ 0x80
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fbb3 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e03a      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3302      	adds	r3, #2
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e007      	b.n	8008c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1cb      	bne.n	8008c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2140      	movs	r1, #64	@ 0x40
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fb7f 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e006      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b08a      	sub	sp, #40	@ 0x28
 8008cae:	af02      	add	r7, sp, #8
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	f040 8081 	bne.w	8008dce <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_UART_Receive+0x2e>
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e079      	b.n	8008dd0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2222      	movs	r2, #34	@ 0x22
 8008ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cf0:	f7fb fc56 	bl	80045a0 <HAL_GetTick>
 8008cf4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	88fa      	ldrh	r2, [r7, #6]
 8008cfa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d0a:	d108      	bne.n	8008d1e <HAL_UART_Receive+0x74>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	e003      	b.n	8008d26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008d26:	e047      	b.n	8008db8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2120      	movs	r1, #32
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 fb24 	bl	8009380 <UART_WaitOnFlagUntilTimeout>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e042      	b.n	8008dd0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10c      	bne.n	8008d6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	3302      	adds	r3, #2
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	e01f      	b.n	8008daa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d72:	d007      	beq.n	8008d84 <HAL_UART_Receive+0xda>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_UART_Receive+0xe8>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d106      	bne.n	8008d92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e008      	b.n	8008da4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3301      	adds	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1b2      	bne.n	8008d28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e000      	b.n	8008dd0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008dce:	2302      	movs	r3, #2
  }
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3720      	adds	r7, #32
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b0ba      	sub	sp, #232	@ 0xe8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10f      	bne.n	8008e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <HAL_UART_IRQHandler+0x66>
 8008e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fbd7 	bl	80095ea <UART_Receive_IT>
      return;
 8008e3c:	e273      	b.n	8009326 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80de 	beq.w	8009004 <HAL_UART_IRQHandler+0x22c>
 8008e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80d1 	beq.w	8009004 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <HAL_UART_IRQHandler+0xae>
 8008e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7e:	f043 0201 	orr.w	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e8a:	f003 0304 	and.w	r3, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <HAL_UART_IRQHandler+0xd2>
 8008e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea2:	f043 0202 	orr.w	r2, r3, #2
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <HAL_UART_IRQHandler+0xf6>
 8008eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec6:	f043 0204 	orr.w	r2, r3, #4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d011      	beq.n	8008efe <HAL_UART_IRQHandler+0x126>
 8008eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef6:	f043 0208 	orr.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 820a 	beq.w	800931c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_UART_IRQHandler+0x14e>
 8008f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fb62 	bl	80095ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f30:	2b40      	cmp	r3, #64	@ 0x40
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d103      	bne.n	8008f52 <HAL_UART_IRQHandler+0x17a>
 8008f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d04f      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa6d 	bl	8009432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f62:	2b40      	cmp	r3, #64	@ 0x40
 8008f64:	d141      	bne.n	8008fea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3314      	adds	r3, #20
 8008f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1d9      	bne.n	8008f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fbe:	4a8a      	ldr	r2, [pc, #552]	@ (80091e8 <HAL_UART_IRQHandler+0x410>)
 8008fc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fb fd1a 	bl	8004a00 <HAL_DMA_Abort_IT>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d016      	beq.n	8009000 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe0:	e00e      	b.n	8009000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f9b6 	bl	8009354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	e00a      	b.n	8009000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9b2 	bl	8009354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	e006      	b.n	8009000 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9ae 	bl	8009354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008ffe:	e18d      	b.n	800931c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009000:	bf00      	nop
    return;
 8009002:	e18b      	b.n	800931c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009008:	2b01      	cmp	r3, #1
 800900a:	f040 8167 	bne.w	80092dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800900e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 8160 	beq.w	80092dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800901c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8159 	beq.w	80092dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800902a:	2300      	movs	r3, #0
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904a:	2b40      	cmp	r3, #64	@ 0x40
 800904c:	f040 80ce 	bne.w	80091ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800905c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80a9 	beq.w	80091b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800906a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800906e:	429a      	cmp	r2, r3
 8009070:	f080 80a2 	bcs.w	80091b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800907a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009086:	f000 8088 	beq.w	800919a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	330c      	adds	r3, #12
 8009090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1d9      	bne.n	800908a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3314      	adds	r3, #20
 80090dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800910c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e1      	bne.n	80090d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3314      	adds	r3, #20
 8009118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3314      	adds	r3, #20
 8009132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800913c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e3      	bne.n	8009112 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	330c      	adds	r3, #12
 8009178:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800917c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800917e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800918a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e3      	bne.n	8009158 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	4618      	mov	r0, r3
 8009196:	f7fb fbc3 	bl	8004920 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f8d9 	bl	8009368 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80091b6:	e0b3      	b.n	8009320 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091c0:	429a      	cmp	r2, r3
 80091c2:	f040 80ad 	bne.w	8009320 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091d0:	f040 80a6 	bne.w	8009320 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8c1 	bl	8009368 <HAL_UARTEx_RxEventCallback>
      return;
 80091e6:	e09b      	b.n	8009320 <HAL_UART_IRQHandler+0x548>
 80091e8:	080094f9 	.word	0x080094f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 808e 	beq.w	8009324 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 8089 	beq.w	8009324 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	330c      	adds	r3, #12
 8009218:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009228:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	330c      	adds	r3, #12
 8009232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009236:	647a      	str	r2, [r7, #68]	@ 0x44
 8009238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800923c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e3      	bne.n	8009212 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3314      	adds	r3, #20
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	623b      	str	r3, [r7, #32]
   return(result);
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3314      	adds	r3, #20
 800926a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800926e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0310 	bic.w	r3, r3, #16
 80092a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	330c      	adds	r3, #12
 80092b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092b4:	61fa      	str	r2, [r7, #28]
 80092b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	617b      	str	r3, [r7, #20]
   return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e3      	bne.n	8009290 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f847 	bl	8009368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092da:	e023      	b.n	8009324 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d009      	beq.n	80092fc <HAL_UART_IRQHandler+0x524>
 80092e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f910 	bl	800951a <UART_Transmit_IT>
    return;
 80092fa:	e014      	b.n	8009326 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <HAL_UART_IRQHandler+0x54e>
 8009308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800930c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f950 	bl	80095ba <UART_EndTransmit_IT>
    return;
 800931a:	e004      	b.n	8009326 <HAL_UART_IRQHandler+0x54e>
    return;
 800931c:	bf00      	nop
 800931e:	e002      	b.n	8009326 <HAL_UART_IRQHandler+0x54e>
      return;
 8009320:	bf00      	nop
 8009322:	e000      	b.n	8009326 <HAL_UART_IRQHandler+0x54e>
      return;
 8009324:	bf00      	nop
  }
}
 8009326:	37e8      	adds	r7, #232	@ 0xe8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	4613      	mov	r3, r2
 800938e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009390:	e03b      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d037      	beq.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800939a:	f7fb f901 	bl	80045a0 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6a3a      	ldr	r2, [r7, #32]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d302      	bcc.n	80093b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e03a      	b.n	800942a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d023      	beq.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b80      	cmp	r3, #128	@ 0x80
 80093c6:	d020      	beq.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b40      	cmp	r3, #64	@ 0x40
 80093cc:	d01d      	beq.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0308 	and.w	r3, r3, #8
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d116      	bne.n	800940a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 f81d 	bl	8009432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2208      	movs	r2, #8
 80093fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e00f      	b.n	800942a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4013      	ands	r3, r2
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	429a      	cmp	r2, r3
 8009418:	bf0c      	ite	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	2300      	movne	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	429a      	cmp	r2, r3
 8009426:	d0b4      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b095      	sub	sp, #84	@ 0x54
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	330c      	adds	r3, #12
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800945a:	643a      	str	r2, [r7, #64]	@ 0x40
 800945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	61fb      	str	r3, [r7, #28]
   return(result);
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800948e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d119      	bne.n	80094de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ca:	61ba      	str	r2, [r7, #24]
 80094cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	613b      	str	r3, [r7, #16]
   return(result);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e5      	bne.n	80094aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094ec:	bf00      	nop
 80094ee:	3754      	adds	r7, #84	@ 0x54
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff ff21 	bl	8009354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b21      	cmp	r3, #33	@ 0x21
 800952c:	d13e      	bne.n	80095ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009536:	d114      	bne.n	8009562 <UART_Transmit_IT+0x48>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d110      	bne.n	8009562 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009554:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	1c9a      	adds	r2, r3, #2
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	621a      	str	r2, [r3, #32]
 8009560:	e008      	b.n	8009574 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	1c59      	adds	r1, r3, #1
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6211      	str	r1, [r2, #32]
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4619      	mov	r1, r3
 8009582:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10f      	bne.n	80095a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009596:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e000      	b.n	80095ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095ac:	2302      	movs	r3, #2
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fea6 	bl	800932c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08c      	sub	sp, #48	@ 0x30
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b22      	cmp	r3, #34	@ 0x22
 8009604:	f040 80aa 	bne.w	800975c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009610:	d115      	bne.n	800963e <UART_Receive_IT+0x54>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d111      	bne.n	800963e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	b29b      	uxth	r3, r3
 8009628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962c:	b29a      	uxth	r2, r3
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009636:	1c9a      	adds	r2, r3, #2
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	629a      	str	r2, [r3, #40]	@ 0x28
 800963c:	e024      	b.n	8009688 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009642:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964c:	d007      	beq.n	800965e <UART_Receive_IT+0x74>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <UART_Receive_IT+0x82>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e008      	b.n	800967e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009678:	b2da      	uxtb	r2, r3
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b01      	subs	r3, #1
 8009690:	b29b      	uxth	r3, r3
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4619      	mov	r1, r3
 8009696:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009698:	2b00      	cmp	r3, #0
 800969a:	d15d      	bne.n	8009758 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0220 	bic.w	r2, r2, #32
 80096aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695a      	ldr	r2, [r3, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d135      	bne.n	800974e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	330c      	adds	r3, #12
 80096ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	613b      	str	r3, [r7, #16]
   return(result);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009708:	623a      	str	r2, [r7, #32]
 800970a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	69f9      	ldr	r1, [r7, #28]
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	61bb      	str	r3, [r7, #24]
   return(result);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e5      	bne.n	80096e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b10      	cmp	r3, #16
 8009728:	d10a      	bne.n	8009740 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fe0e 	bl	8009368 <HAL_UARTEx_RxEventCallback>
 800974c:	e002      	b.n	8009754 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fdf6 	bl	8009340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e002      	b.n	800975e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	e000      	b.n	800975e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800975c:	2302      	movs	r3, #2
  }
}
 800975e:	4618      	mov	r0, r3
 8009760:	3730      	adds	r7, #48	@ 0x30
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800976c:	b0c0      	sub	sp, #256	@ 0x100
 800976e:	af00      	add	r7, sp, #0
 8009770:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009784:	68d9      	ldr	r1, [r3, #12]
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	ea40 0301 	orr.w	r3, r0, r1
 8009790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	431a      	orrs	r2, r3
 80097a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097c0:	f021 010c 	bic.w	r1, r1, #12
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097ce:	430b      	orrs	r3, r1
 80097d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	6999      	ldr	r1, [r3, #24]
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	ea40 0301 	orr.w	r3, r0, r1
 80097ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009a34 <UART_SetConfig+0x2cc>)
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d005      	beq.n	8009808 <UART_SetConfig+0xa0>
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b8d      	ldr	r3, [pc, #564]	@ (8009a38 <UART_SetConfig+0x2d0>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d104      	bne.n	8009812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009808:	f7fe fdd8 	bl	80083bc <HAL_RCC_GetPCLK2Freq>
 800980c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009810:	e003      	b.n	800981a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009812:	f7fe fdbf 	bl	8008394 <HAL_RCC_GetPCLK1Freq>
 8009816:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009824:	f040 810c 	bne.w	8009a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800982c:	2200      	movs	r2, #0
 800982e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009832:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	1891      	adds	r1, r2, r2
 8009840:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009842:	415b      	adcs	r3, r3
 8009844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800984a:	4621      	mov	r1, r4
 800984c:	eb12 0801 	adds.w	r8, r2, r1
 8009850:	4629      	mov	r1, r5
 8009852:	eb43 0901 	adc.w	r9, r3, r1
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800986a:	4690      	mov	r8, r2
 800986c:	4699      	mov	r9, r3
 800986e:	4623      	mov	r3, r4
 8009870:	eb18 0303 	adds.w	r3, r8, r3
 8009874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009878:	462b      	mov	r3, r5
 800987a:	eb49 0303 	adc.w	r3, r9, r3
 800987e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800988e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009896:	460b      	mov	r3, r1
 8009898:	18db      	adds	r3, r3, r3
 800989a:	653b      	str	r3, [r7, #80]	@ 0x50
 800989c:	4613      	mov	r3, r2
 800989e:	eb42 0303 	adc.w	r3, r2, r3
 80098a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80098a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80098ac:	f7f6 fce8 	bl	8000280 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4b61      	ldr	r3, [pc, #388]	@ (8009a3c <UART_SetConfig+0x2d4>)
 80098b6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	011c      	lsls	r4, r3, #4
 80098be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	1891      	adds	r1, r2, r2
 80098d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098d8:	415b      	adcs	r3, r3
 80098da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098e0:	4641      	mov	r1, r8
 80098e2:	eb12 0a01 	adds.w	sl, r2, r1
 80098e6:	4649      	mov	r1, r9
 80098e8:	eb43 0b01 	adc.w	fp, r3, r1
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009900:	4692      	mov	sl, r2
 8009902:	469b      	mov	fp, r3
 8009904:	4643      	mov	r3, r8
 8009906:	eb1a 0303 	adds.w	r3, sl, r3
 800990a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800990e:	464b      	mov	r3, r9
 8009910:	eb4b 0303 	adc.w	r3, fp, r3
 8009914:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009924:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800992c:	460b      	mov	r3, r1
 800992e:	18db      	adds	r3, r3, r3
 8009930:	643b      	str	r3, [r7, #64]	@ 0x40
 8009932:	4613      	mov	r3, r2
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	647b      	str	r3, [r7, #68]	@ 0x44
 800993a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800993e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009942:	f7f6 fc9d 	bl	8000280 <__aeabi_uldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4611      	mov	r1, r2
 800994c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a3c <UART_SetConfig+0x2d4>)
 800994e:	fba3 2301 	umull	r2, r3, r3, r1
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	2264      	movs	r2, #100	@ 0x64
 8009956:	fb02 f303 	mul.w	r3, r2, r3
 800995a:	1acb      	subs	r3, r1, r3
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009962:	4b36      	ldr	r3, [pc, #216]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009964:	fba3 2302 	umull	r2, r3, r3, r2
 8009968:	095b      	lsrs	r3, r3, #5
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009970:	441c      	add	r4, r3
 8009972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009976:	2200      	movs	r2, #0
 8009978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800997c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	1891      	adds	r1, r2, r2
 800998a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800998c:	415b      	adcs	r3, r3
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009994:	4641      	mov	r1, r8
 8009996:	1851      	adds	r1, r2, r1
 8009998:	6339      	str	r1, [r7, #48]	@ 0x30
 800999a:	4649      	mov	r1, r9
 800999c:	414b      	adcs	r3, r1
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80099ac:	4659      	mov	r1, fp
 80099ae:	00cb      	lsls	r3, r1, #3
 80099b0:	4651      	mov	r1, sl
 80099b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099b6:	4651      	mov	r1, sl
 80099b8:	00ca      	lsls	r2, r1, #3
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	4642      	mov	r2, r8
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099c8:	464b      	mov	r3, r9
 80099ca:	460a      	mov	r2, r1
 80099cc:	eb42 0303 	adc.w	r3, r2, r3
 80099d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099e8:	460b      	mov	r3, r1
 80099ea:	18db      	adds	r3, r3, r3
 80099ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099ee:	4613      	mov	r3, r2
 80099f0:	eb42 0303 	adc.w	r3, r2, r3
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099fe:	f7f6 fc3f 	bl	8000280 <__aeabi_uldivmod>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a08:	fba3 1302 	umull	r1, r3, r3, r2
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	2164      	movs	r1, #100	@ 0x64
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	3332      	adds	r3, #50	@ 0x32
 8009a1a:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f003 0207 	and.w	r2, r3, #7
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4422      	add	r2, r4
 8009a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a30:	e106      	b.n	8009c40 <UART_SetConfig+0x4d8>
 8009a32:	bf00      	nop
 8009a34:	40011000 	.word	0x40011000
 8009a38:	40011400 	.word	0x40011400
 8009a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	1891      	adds	r1, r2, r2
 8009a58:	6239      	str	r1, [r7, #32]
 8009a5a:	415b      	adcs	r3, r3
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a62:	4641      	mov	r1, r8
 8009a64:	1854      	adds	r4, r2, r1
 8009a66:	4649      	mov	r1, r9
 8009a68:	eb43 0501 	adc.w	r5, r3, r1
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	00eb      	lsls	r3, r5, #3
 8009a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a7a:	00e2      	lsls	r2, r4, #3
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	461d      	mov	r5, r3
 8009a80:	4643      	mov	r3, r8
 8009a82:	18e3      	adds	r3, r4, r3
 8009a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a88:	464b      	mov	r3, r9
 8009a8a:	eb45 0303 	adc.w	r3, r5, r3
 8009a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009aae:	4629      	mov	r1, r5
 8009ab0:	008b      	lsls	r3, r1, #2
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ab8:	4621      	mov	r1, r4
 8009aba:	008a      	lsls	r2, r1, #2
 8009abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ac0:	f7f6 fbde 	bl	8000280 <__aeabi_uldivmod>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4b60      	ldr	r3, [pc, #384]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009aca:	fba3 2302 	umull	r2, r3, r3, r2
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	011c      	lsls	r4, r3, #4
 8009ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009adc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	1891      	adds	r1, r2, r2
 8009aea:	61b9      	str	r1, [r7, #24]
 8009aec:	415b      	adcs	r3, r3
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009af4:	4641      	mov	r1, r8
 8009af6:	1851      	adds	r1, r2, r1
 8009af8:	6139      	str	r1, [r7, #16]
 8009afa:	4649      	mov	r1, r9
 8009afc:	414b      	adcs	r3, r1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	f04f 0300 	mov.w	r3, #0
 8009b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	00cb      	lsls	r3, r1, #3
 8009b10:	4651      	mov	r1, sl
 8009b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b16:	4651      	mov	r1, sl
 8009b18:	00ca      	lsls	r2, r1, #3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4642      	mov	r2, r8
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b28:	464b      	mov	r3, r9
 8009b2a:	460a      	mov	r2, r1
 8009b2c:	eb42 0303 	adc.w	r3, r2, r3
 8009b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	008b      	lsls	r3, r1, #2
 8009b50:	4641      	mov	r1, r8
 8009b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b56:	4641      	mov	r1, r8
 8009b58:	008a      	lsls	r2, r1, #2
 8009b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b5e:	f7f6 fb8f 	bl	8000280 <__aeabi_uldivmod>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	4b38      	ldr	r3, [pc, #224]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	2264      	movs	r2, #100	@ 0x64
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	1acb      	subs	r3, r1, r3
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	3332      	adds	r3, #50	@ 0x32
 8009b7c:	4a33      	ldr	r2, [pc, #204]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b88:	441c      	add	r4, r3
 8009b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b8e:	2200      	movs	r2, #0
 8009b90:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b92:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	1891      	adds	r1, r2, r2
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	415b      	adcs	r3, r3
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ba8:	4641      	mov	r1, r8
 8009baa:	1851      	adds	r1, r2, r1
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	4649      	mov	r1, r9
 8009bb0:	414b      	adcs	r3, r1
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	00cb      	lsls	r3, r1, #3
 8009bc4:	4651      	mov	r1, sl
 8009bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bca:	4651      	mov	r1, sl
 8009bcc:	00ca      	lsls	r2, r1, #3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	189b      	adds	r3, r3, r2
 8009bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bda:	464b      	mov	r3, r9
 8009bdc:	460a      	mov	r2, r1
 8009bde:	eb42 0303 	adc.w	r3, r2, r3
 8009be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bee:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	008b      	lsls	r3, r1, #2
 8009c00:	4641      	mov	r1, r8
 8009c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c06:	4641      	mov	r1, r8
 8009c08:	008a      	lsls	r2, r1, #2
 8009c0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c0e:	f7f6 fb37 	bl	8000280 <__aeabi_uldivmod>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4b0d      	ldr	r3, [pc, #52]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c18:	fba3 1302 	umull	r1, r3, r3, r2
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2164      	movs	r1, #100	@ 0x64
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	3332      	adds	r3, #50	@ 0x32
 8009c2a:	4a08      	ldr	r2, [pc, #32]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	f003 020f 	and.w	r2, r3, #15
 8009c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4422      	add	r2, r4
 8009c3e:	609a      	str	r2, [r3, #8]
}
 8009c40:	bf00      	nop
 8009c42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c46:	46bd      	mov	sp, r7
 8009c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c4c:	51eb851f 	.word	0x51eb851f

08009c50 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	f023 0101 	bic.w	r1, r3, #1
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d102      	bne.n	8009c80 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009c7a:	2340      	movs	r3, #64	@ 0x40
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e001      	b.n	8009c84 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009c90:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009c96:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009c9c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009ca2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009ca8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009cae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8009cb4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8009cba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8009cc0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009cde:	4b10      	ldr	r3, [pc, #64]	@ (8009d20 <FSMC_NORSRAM_Init+0xd0>)
 8009ce0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ce8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009cf0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	43db      	mvns	r3, r3
 8009d00:	ea02 0103 	and.w	r1, r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4319      	orrs	r1, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	0008fb7f 	.word	0x0008fb7f

08009d24 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8009d3a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8009d42:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009d4a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009d54:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	3b02      	subs	r3, #2
 8009d5c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8009d5e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009d6a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d94:	d11d      	bne.n	8009dd2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d9e:	4b13      	ldr	r3, [pc, #76]	@ (8009dec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	6852      	ldr	r2, [r2, #4]
 8009daa:	0112      	lsls	r2, r2, #4
 8009dac:	4311      	orrs	r1, r2
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	6892      	ldr	r2, [r2, #8]
 8009db2:	0212      	lsls	r2, r2, #8
 8009db4:	4311      	orrs	r1, r2
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	6992      	ldr	r2, [r2, #24]
 8009dba:	4311      	orrs	r1, r2
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	68d2      	ldr	r2, [r2, #12]
 8009dc0:	0412      	lsls	r2, r2, #16
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	ea43 0102 	orr.w	r1, r3, r2
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009dd0:	e005      	b.n	8009dde <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	cff00000 	.word	0xcff00000

08009df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009df0:	b084      	sub	sp, #16
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	f107 001c 	add.w	r0, r7, #28
 8009dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d123      	bne.n	8009e52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d105      	bne.n	8009e46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fae8 	bl	800b41c <USB_CoreReset>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]
 8009e50:	e01b      	b.n	8009e8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 fadc 	bl	800b41c <USB_CoreReset>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e7c:	e005      	b.n	8009e8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e8a:	7fbb      	ldrb	r3, [r7, #30]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d10b      	bne.n	8009ea8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f043 0206 	orr.w	r2, r3, #6
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f043 0220 	orr.w	r2, r3, #32
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009eb4:	b004      	add	sp, #16
 8009eb6:	4770      	bx	lr

08009eb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d165      	bne.n	8009f98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4a41      	ldr	r2, [pc, #260]	@ (8009fd4 <USB_SetTurnaroundTime+0x11c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d906      	bls.n	8009ee2 <USB_SetTurnaroundTime+0x2a>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4a40      	ldr	r2, [pc, #256]	@ (8009fd8 <USB_SetTurnaroundTime+0x120>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d202      	bcs.n	8009ee2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009edc:	230f      	movs	r3, #15
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e062      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd8 <USB_SetTurnaroundTime+0x120>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d306      	bcc.n	8009ef8 <USB_SetTurnaroundTime+0x40>
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	4a3b      	ldr	r2, [pc, #236]	@ (8009fdc <USB_SetTurnaroundTime+0x124>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d202      	bcs.n	8009ef8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ef2:	230e      	movs	r3, #14
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e057      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	4a38      	ldr	r2, [pc, #224]	@ (8009fdc <USB_SetTurnaroundTime+0x124>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d306      	bcc.n	8009f0e <USB_SetTurnaroundTime+0x56>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4a37      	ldr	r2, [pc, #220]	@ (8009fe0 <USB_SetTurnaroundTime+0x128>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d202      	bcs.n	8009f0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009f08:	230d      	movs	r3, #13
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e04c      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	4a33      	ldr	r2, [pc, #204]	@ (8009fe0 <USB_SetTurnaroundTime+0x128>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d306      	bcc.n	8009f24 <USB_SetTurnaroundTime+0x6c>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4a32      	ldr	r2, [pc, #200]	@ (8009fe4 <USB_SetTurnaroundTime+0x12c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d802      	bhi.n	8009f24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009f1e:	230c      	movs	r3, #12
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e041      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	4a2f      	ldr	r2, [pc, #188]	@ (8009fe4 <USB_SetTurnaroundTime+0x12c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d906      	bls.n	8009f3a <USB_SetTurnaroundTime+0x82>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8009fe8 <USB_SetTurnaroundTime+0x130>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d802      	bhi.n	8009f3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009f34:	230b      	movs	r3, #11
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e036      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8009fe8 <USB_SetTurnaroundTime+0x130>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d906      	bls.n	8009f50 <USB_SetTurnaroundTime+0x98>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	4a29      	ldr	r2, [pc, #164]	@ (8009fec <USB_SetTurnaroundTime+0x134>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d802      	bhi.n	8009f50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	e02b      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	4a26      	ldr	r2, [pc, #152]	@ (8009fec <USB_SetTurnaroundTime+0x134>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d906      	bls.n	8009f66 <USB_SetTurnaroundTime+0xae>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4a25      	ldr	r2, [pc, #148]	@ (8009ff0 <USB_SetTurnaroundTime+0x138>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d202      	bcs.n	8009f66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f60:	2309      	movs	r3, #9
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e020      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4a21      	ldr	r2, [pc, #132]	@ (8009ff0 <USB_SetTurnaroundTime+0x138>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d306      	bcc.n	8009f7c <USB_SetTurnaroundTime+0xc4>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4a20      	ldr	r2, [pc, #128]	@ (8009ff4 <USB_SetTurnaroundTime+0x13c>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d802      	bhi.n	8009f7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f76:	2308      	movs	r3, #8
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e015      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <USB_SetTurnaroundTime+0x13c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d906      	bls.n	8009f92 <USB_SetTurnaroundTime+0xda>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff8 <USB_SetTurnaroundTime+0x140>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d202      	bcs.n	8009f92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f8c:	2307      	movs	r3, #7
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e00a      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f92:	2306      	movs	r3, #6
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e007      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f9e:	2309      	movs	r3, #9
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	e001      	b.n	8009fa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009fa4:	2309      	movs	r3, #9
 8009fa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	029b      	lsls	r3, r3, #10
 8009fbc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	00d8acbf 	.word	0x00d8acbf
 8009fd8:	00e4e1c0 	.word	0x00e4e1c0
 8009fdc:	00f42400 	.word	0x00f42400
 8009fe0:	01067380 	.word	0x01067380
 8009fe4:	011a499f 	.word	0x011a499f
 8009fe8:	01312cff 	.word	0x01312cff
 8009fec:	014ca43f 	.word	0x014ca43f
 8009ff0:	016e3600 	.word	0x016e3600
 8009ff4:	01a6ab1f 	.word	0x01a6ab1f
 8009ff8:	01e84800 	.word	0x01e84800

08009ffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f043 0201 	orr.w	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d115      	bne.n	800a08e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a06e:	200a      	movs	r0, #10
 800a070:	f7fa faa2 	bl	80045b8 <HAL_Delay>
      ms += 10U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	330a      	adds	r3, #10
 800a078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 f93f 	bl	800b2fe <USB_GetMode>
 800a080:	4603      	mov	r3, r0
 800a082:	2b01      	cmp	r3, #1
 800a084:	d01e      	beq.n	800a0c4 <USB_SetCurrentMode+0x84>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2bc7      	cmp	r3, #199	@ 0xc7
 800a08a:	d9f0      	bls.n	800a06e <USB_SetCurrentMode+0x2e>
 800a08c:	e01a      	b.n	800a0c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d115      	bne.n	800a0c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a0a0:	200a      	movs	r0, #10
 800a0a2:	f7fa fa89 	bl	80045b8 <HAL_Delay>
      ms += 10U;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	330a      	adds	r3, #10
 800a0aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f926 	bl	800b2fe <USB_GetMode>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <USB_SetCurrentMode+0x84>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2bc7      	cmp	r3, #199	@ 0xc7
 800a0bc:	d9f0      	bls.n	800a0a0 <USB_SetCurrentMode+0x60>
 800a0be:	e001      	b.n	800a0c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e005      	b.n	800a0d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a0c8:	d101      	bne.n	800a0ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0d8:	b084      	sub	sp, #16
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a0e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]
 800a0f6:	e009      	b.n	800a10c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3340      	adds	r3, #64	@ 0x40
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	2200      	movs	r2, #0
 800a104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	3301      	adds	r3, #1
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b0e      	cmp	r3, #14
 800a110:	d9f2      	bls.n	800a0f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a112:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a116:	2b00      	cmp	r3, #0
 800a118:	d11c      	bne.n	800a154 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a132:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	639a      	str	r2, [r3, #56]	@ 0x38
 800a152:	e00b      	b.n	800a16c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a158:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a164:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a172:	461a      	mov	r2, r3
 800a174:	2300      	movs	r3, #0
 800a176:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a178:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10d      	bne.n	800a19c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a184:	2b00      	cmp	r3, #0
 800a186:	d104      	bne.n	800a192 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a188:	2100      	movs	r1, #0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f968 	bl	800a460 <USB_SetDevSpeed>
 800a190:	e008      	b.n	800a1a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a192:	2101      	movs	r1, #1
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f963 	bl	800a460 <USB_SetDevSpeed>
 800a19a:	e003      	b.n	800a1a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a19c:	2103      	movs	r1, #3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f95e 	bl	800a460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1a4:	2110      	movs	r1, #16
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f8fa 	bl	800a3a0 <USB_FlushTxFifo>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f924 	bl	800a404 <USB_FlushRxFifo>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	613b      	str	r3, [r7, #16]
 800a1ee:	e043      	b.n	800a278 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a206:	d118      	bne.n	800a23a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a21a:	461a      	mov	r2, r3
 800a21c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	e013      	b.n	800a24c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	461a      	mov	r2, r3
 800a232:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e008      	b.n	800a24c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a246:	461a      	mov	r2, r3
 800a248:	2300      	movs	r3, #0
 800a24a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	015a      	lsls	r2, r3, #5
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a258:	461a      	mov	r2, r3
 800a25a:	2300      	movs	r3, #0
 800a25c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26a:	461a      	mov	r2, r3
 800a26c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	3301      	adds	r3, #1
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a27c:	461a      	mov	r2, r3
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	4293      	cmp	r3, r2
 800a282:	d3b5      	bcc.n	800a1f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a284:	2300      	movs	r3, #0
 800a286:	613b      	str	r3, [r7, #16]
 800a288:	e043      	b.n	800a312 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a29c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2a0:	d118      	bne.n	800a2d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	e013      	b.n	800a2e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	e008      	b.n	800a2e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a304:	461a      	mov	r2, r3
 800a306:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a30a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	3301      	adds	r3, #1
 800a310:	613b      	str	r3, [r7, #16]
 800a312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a316:	461a      	mov	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d3b5      	bcc.n	800a28a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a32c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a330:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a33e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a344:	2b00      	cmp	r3, #0
 800a346:	d105      	bne.n	800a354 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	f043 0210 	orr.w	r2, r3, #16
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	4b10      	ldr	r3, [pc, #64]	@ (800a39c <USB_DevInit+0x2c4>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a360:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f043 0208 	orr.w	r2, r3, #8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a374:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d107      	bne.n	800a38c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a384:	f043 0304 	orr.w	r3, r3, #4
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a398:	b004      	add	sp, #16
 800a39a:	4770      	bx	lr
 800a39c:	803c3800 	.word	0x803c3800

0800a3a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3ba:	d901      	bls.n	800a3c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e01b      	b.n	800a3f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	daf2      	bge.n	800a3ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	019b      	lsls	r3, r3, #6
 800a3d0:	f043 0220 	orr.w	r2, r3, #32
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3e4:	d901      	bls.n	800a3ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e006      	b.n	800a3f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	d0f0      	beq.n	800a3d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a41c:	d901      	bls.n	800a422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e018      	b.n	800a454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	daf2      	bge.n	800a410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2210      	movs	r2, #16
 800a432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3301      	adds	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a440:	d901      	bls.n	800a446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e006      	b.n	800a454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	f003 0310 	and.w	r3, r3, #16
 800a44e:	2b10      	cmp	r3, #16
 800a450:	d0f0      	beq.n	800a434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a480:	4313      	orrs	r3, r2
 800a482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a492:	b480      	push	{r7}
 800a494:	b087      	sub	sp, #28
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0306 	and.w	r3, r3, #6
 800a4aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]
 800a4b6:	e00a      	b.n	800a4ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d002      	beq.n	800a4c4 <USB_GetDevSpeed+0x32>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b06      	cmp	r3, #6
 800a4c2:	d102      	bne.n	800a4ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	75fb      	strb	r3, [r7, #23]
 800a4c8:	e001      	b.n	800a4ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a4ca:	230f      	movs	r3, #15
 800a4cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	785b      	ldrb	r3, [r3, #1]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d13a      	bne.n	800a56e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4fe:	69da      	ldr	r2, [r3, #28]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f003 030f 	and.w	r3, r3, #15
 800a508:	2101      	movs	r1, #1
 800a50a:	fa01 f303 	lsl.w	r3, r1, r3
 800a50e:	b29b      	uxth	r3, r3
 800a510:	68f9      	ldr	r1, [r7, #12]
 800a512:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a516:	4313      	orrs	r3, r2
 800a518:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d155      	bne.n	800a5dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	791b      	ldrb	r3, [r3, #4]
 800a54a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a54c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	059b      	lsls	r3, r3, #22
 800a552:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a554:	4313      	orrs	r3, r2
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	0151      	lsls	r1, r2, #5
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	440a      	add	r2, r1
 800a55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a56a:	6013      	str	r3, [r2, #0]
 800a56c:	e036      	b.n	800a5dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a574:	69da      	ldr	r2, [r3, #28]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	2101      	movs	r1, #1
 800a580:	fa01 f303 	lsl.w	r3, r1, r3
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	68f9      	ldr	r1, [r7, #12]
 800a588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a58c:	4313      	orrs	r3, r2
 800a58e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d11a      	bne.n	800a5dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	791b      	ldrb	r3, [r3, #4]
 800a5c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	0151      	lsls	r1, r2, #5
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d161      	bne.n	800a6cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a61a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a61e:	d11f      	bne.n	800a660 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	440a      	add	r2, r1
 800a636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a63a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a63e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a65a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a65e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	2101      	movs	r1, #1
 800a672:	fa01 f303 	lsl.w	r3, r1, r3
 800a676:	b29b      	uxth	r3, r3
 800a678:	43db      	mvns	r3, r3
 800a67a:	68f9      	ldr	r1, [r7, #12]
 800a67c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a680:	4013      	ands	r3, r2
 800a682:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a68a:	69da      	ldr	r2, [r3, #28]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	2101      	movs	r1, #1
 800a696:	fa01 f303 	lsl.w	r3, r1, r3
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	43db      	mvns	r3, r3
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	0159      	lsls	r1, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	440b      	add	r3, r1
 800a6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4b35      	ldr	r3, [pc, #212]	@ (800a79c <USB_DeactivateEndpoint+0x1b0>)
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	600b      	str	r3, [r1, #0]
 800a6ca:	e060      	b.n	800a78e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6e2:	d11f      	bne.n	800a724 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	0151      	lsls	r1, r2, #5
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	440a      	add	r2, r1
 800a6fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a702:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	0151      	lsls	r1, r2, #5
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	440a      	add	r2, r1
 800a71a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a71e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a722:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a72a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 030f 	and.w	r3, r3, #15
 800a734:	2101      	movs	r1, #1
 800a736:	fa01 f303 	lsl.w	r3, r1, r3
 800a73a:	041b      	lsls	r3, r3, #16
 800a73c:	43db      	mvns	r3, r3
 800a73e:	68f9      	ldr	r1, [r7, #12]
 800a740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a744:	4013      	ands	r3, r2
 800a746:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a74e:	69da      	ldr	r2, [r3, #28]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	2101      	movs	r1, #1
 800a75a:	fa01 f303 	lsl.w	r3, r1, r3
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	43db      	mvns	r3, r3
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a768:	4013      	ands	r3, r2
 800a76a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	0159      	lsls	r1, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	440b      	add	r3, r1
 800a782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a786:	4619      	mov	r1, r3
 800a788:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <USB_DeactivateEndpoint+0x1b4>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	ec337800 	.word	0xec337800
 800a7a0:	eff37800 	.word	0xeff37800

0800a7a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08a      	sub	sp, #40	@ 0x28
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	f040 817f 	bne.w	800aac4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d132      	bne.n	800a834 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	0151      	lsls	r1, r2, #5
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	440a      	add	r2, r1
 800a7e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	69fa      	ldr	r2, [r7, #28]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a80c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	0151      	lsls	r1, r2, #5
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	440a      	add	r2, r1
 800a828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a82c:	0cdb      	lsrs	r3, r3, #19
 800a82e:	04db      	lsls	r3, r3, #19
 800a830:	6113      	str	r3, [r2, #16]
 800a832:	e097      	b.n	800a964 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	0151      	lsls	r1, r2, #5
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	440a      	add	r2, r1
 800a84a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a84e:	0cdb      	lsrs	r3, r3, #19
 800a850:	04db      	lsls	r3, r3, #19
 800a852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	0151      	lsls	r1, r2, #5
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	440a      	add	r2, r1
 800a86a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a86e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a872:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a876:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d11a      	bne.n	800a8b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	429a      	cmp	r2, r3
 800a888:	d903      	bls.n	800a892 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	0151      	lsls	r1, r2, #5
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	440a      	add	r2, r1
 800a8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8b0:	6113      	str	r3, [r2, #16]
 800a8b2:	e044      	b.n	800a93e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691a      	ldr	r2, [r3, #16]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	8afb      	ldrh	r3, [r7, #22]
 800a8da:	04d9      	lsls	r1, r3, #19
 800a8dc:	4ba4      	ldr	r3, [pc, #656]	@ (800ab70 <USB_EPStartXfer+0x3cc>)
 800a8de:	400b      	ands	r3, r1
 800a8e0:	69b9      	ldr	r1, [r7, #24]
 800a8e2:	0148      	lsls	r0, r1, #5
 800a8e4:	69f9      	ldr	r1, [r7, #28]
 800a8e6:	4401      	add	r1, r0
 800a8e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	791b      	ldrb	r3, [r3, #4]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d122      	bne.n	800a93e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	0151      	lsls	r1, r2, #5
 800a90a:	69fa      	ldr	r2, [r7, #28]
 800a90c:	440a      	add	r2, r1
 800a90e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a912:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a916:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a924:	691a      	ldr	r2, [r3, #16]
 800a926:	8afb      	ldrh	r3, [r7, #22]
 800a928:	075b      	lsls	r3, r3, #29
 800a92a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a92e:	69b9      	ldr	r1, [r7, #24]
 800a930:	0148      	lsls	r0, r1, #5
 800a932:	69f9      	ldr	r1, [r7, #28]
 800a934:	4401      	add	r1, r0
 800a936:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a93a:	4313      	orrs	r3, r2
 800a93c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a94a:	691a      	ldr	r2, [r3, #16]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a954:	69b9      	ldr	r1, [r7, #24]
 800a956:	0148      	lsls	r0, r1, #5
 800a958:	69f9      	ldr	r1, [r7, #28]
 800a95a:	4401      	add	r1, r0
 800a95c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a960:	4313      	orrs	r3, r2
 800a962:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d14b      	bne.n	800aa02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a97e:	461a      	mov	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d128      	bne.n	800a9e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d110      	bne.n	800a9c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	e00f      	b.n	800a9e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	0151      	lsls	r1, r2, #5
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	440a      	add	r2, r1
 800a9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	69fa      	ldr	r2, [r7, #28]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e166      	b.n	800acd0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	69fa      	ldr	r2, [r7, #28]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	791b      	ldrb	r3, [r3, #4]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d015      	beq.n	800aa56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 814e 	beq.w	800acd0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	2101      	movs	r1, #1
 800aa46:	fa01 f303 	lsl.w	r3, r1, r3
 800aa4a:	69f9      	ldr	r1, [r7, #28]
 800aa4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa50:	4313      	orrs	r3, r2
 800aa52:	634b      	str	r3, [r1, #52]	@ 0x34
 800aa54:	e13c      	b.n	800acd0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d110      	bne.n	800aa88 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	0151      	lsls	r1, r2, #5
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	e00f      	b.n	800aaa8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	69fa      	ldr	r2, [r7, #28]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaa6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	68d9      	ldr	r1, [r3, #12]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	b298      	uxth	r0, r3
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	4603      	mov	r3, r0
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f9b9 	bl	800ae34 <USB_WritePacket>
 800aac2:	e105      	b.n	800acd0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aade:	0cdb      	lsrs	r3, r3, #19
 800aae0:	04db      	lsls	r3, r3, #19
 800aae2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	0151      	lsls	r1, r2, #5
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	440a      	add	r2, r1
 800aafa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aafe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab06:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d132      	bne.n	800ab74 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab3c:	69b9      	ldr	r1, [r7, #24]
 800ab3e:	0148      	lsls	r0, r1, #5
 800ab40:	69f9      	ldr	r1, [r7, #28]
 800ab42:	4401      	add	r1, r0
 800ab44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	0151      	lsls	r1, r2, #5
 800ab5e:	69fa      	ldr	r2, [r7, #28]
 800ab60:	440a      	add	r2, r1
 800ab62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab6a:	6113      	str	r3, [r2, #16]
 800ab6c:	e062      	b.n	800ac34 <USB_EPStartXfer+0x490>
 800ab6e:	bf00      	nop
 800ab70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d123      	bne.n	800abc4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	691a      	ldr	r2, [r3, #16]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab92:	69b9      	ldr	r1, [r7, #24]
 800ab94:	0148      	lsls	r0, r1, #5
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	4401      	add	r1, r0
 800ab9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	0151      	lsls	r1, r2, #5
 800abb4:	69fa      	ldr	r2, [r7, #28]
 800abb6:	440a      	add	r2, r1
 800abb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abc0:	6113      	str	r3, [r2, #16]
 800abc2:	e037      	b.n	800ac34 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	1e5a      	subs	r2, r3, #1
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	8afa      	ldrh	r2, [r7, #22]
 800abe0:	fb03 f202 	mul.w	r2, r3, r2
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	8afb      	ldrh	r3, [r7, #22]
 800abf8:	04d9      	lsls	r1, r3, #19
 800abfa:	4b38      	ldr	r3, [pc, #224]	@ (800acdc <USB_EPStartXfer+0x538>)
 800abfc:	400b      	ands	r3, r1
 800abfe:	69b9      	ldr	r1, [r7, #24]
 800ac00:	0148      	lsls	r0, r1, #5
 800ac02:	69f9      	ldr	r1, [r7, #28]
 800ac04:	4401      	add	r1, r0
 800ac06:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac1a:	691a      	ldr	r2, [r3, #16]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac24:	69b9      	ldr	r1, [r7, #24]
 800ac26:	0148      	lsls	r0, r1, #5
 800ac28:	69f9      	ldr	r1, [r7, #28]
 800ac2a:	4401      	add	r1, r0
 800ac2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac30:	4313      	orrs	r3, r2
 800ac32:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d10d      	bne.n	800ac56 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	68d9      	ldr	r1, [r3, #12]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac52:	460a      	mov	r2, r1
 800ac54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	791b      	ldrb	r3, [r3, #4]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d128      	bne.n	800acb0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d110      	bne.n	800ac90 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	0151      	lsls	r1, r2, #5
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	440a      	add	r2, r1
 800ac84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	e00f      	b.n	800acb0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	0151      	lsls	r1, r2, #5
 800acc2:	69fa      	ldr	r2, [r7, #28]
 800acc4:	440a      	add	r2, r1
 800acc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800acce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	1ff80000 	.word	0x1ff80000

0800ace0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	785b      	ldrb	r3, [r3, #1]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d14a      	bne.n	800ad94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad16:	f040 8086 	bne.w	800ae26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	0151      	lsls	r1, r2, #5
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	440a      	add	r2, r1
 800ad34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	0151      	lsls	r1, r2, #5
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	440a      	add	r2, r1
 800ad58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d902      	bls.n	800ad78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	75fb      	strb	r3, [r7, #23]
          break;
 800ad76:	e056      	b.n	800ae26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad90:	d0e7      	beq.n	800ad62 <USB_EPStopXfer+0x82>
 800ad92:	e048      	b.n	800ae26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ada8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adac:	d13b      	bne.n	800ae26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	0151      	lsls	r1, r2, #5
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	440a      	add	r2, r1
 800adc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800add0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d902      	bls.n	800ae0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	75fb      	strb	r3, [r7, #23]
          break;
 800ae0a:	e00c      	b.n	800ae26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae24:	d0e7      	beq.n	800adf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	371c      	adds	r7, #28
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b089      	sub	sp, #36	@ 0x24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	461a      	mov	r2, r3
 800ae42:	460b      	mov	r3, r1
 800ae44:	71fb      	strb	r3, [r7, #7]
 800ae46:	4613      	mov	r3, r2
 800ae48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ae52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d123      	bne.n	800aea2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae5a:	88bb      	ldrh	r3, [r7, #4]
 800ae5c:	3303      	adds	r3, #3
 800ae5e:	089b      	lsrs	r3, r3, #2
 800ae60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae62:	2300      	movs	r3, #0
 800ae64:	61bb      	str	r3, [r7, #24]
 800ae66:	e018      	b.n	800ae9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	031a      	lsls	r2, r3, #12
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae74:	461a      	mov	r2, r3
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	3301      	adds	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	3301      	adds	r3, #1
 800ae92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	3301      	adds	r3, #1
 800ae98:	61bb      	str	r3, [r7, #24]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d3e2      	bcc.n	800ae68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3724      	adds	r7, #36	@ 0x24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b08b      	sub	sp, #44	@ 0x2c
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	089b      	lsrs	r3, r3, #2
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	f003 0303 	and.w	r3, r3, #3
 800aed4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	623b      	str	r3, [r7, #32]
 800aeda:	e014      	b.n	800af06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	601a      	str	r2, [r3, #0]
    pDest++;
 800aee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeea:	3301      	adds	r3, #1
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef0:	3301      	adds	r3, #1
 800aef2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	3301      	adds	r3, #1
 800aef8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefc:	3301      	adds	r3, #1
 800aefe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	3301      	adds	r3, #1
 800af04:	623b      	str	r3, [r7, #32]
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d3e6      	bcc.n	800aedc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af0e:	8bfb      	ldrh	r3, [r7, #30]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01e      	beq.n	800af52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af1e:	461a      	mov	r2, r3
 800af20:	f107 0310 	add.w	r3, r7, #16
 800af24:	6812      	ldr	r2, [r2, #0]
 800af26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
 800af34:	b2da      	uxtb	r2, r3
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	701a      	strb	r2, [r3, #0]
      i++;
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	3301      	adds	r3, #1
 800af3e:	623b      	str	r3, [r7, #32]
      pDest++;
 800af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af42:	3301      	adds	r3, #1
 800af44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800af46:	8bfb      	ldrh	r3, [r7, #30]
 800af48:	3b01      	subs	r3, #1
 800af4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af4c:	8bfb      	ldrh	r3, [r7, #30]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1ea      	bne.n	800af28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af54:	4618      	mov	r0, r3
 800af56:	372c      	adds	r7, #44	@ 0x2c
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d12c      	bne.n	800afd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	db12      	blt.n	800afb4 <USB_EPSetStall+0x54>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00f      	beq.n	800afb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	0151      	lsls	r1, r2, #5
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	440a      	add	r2, r1
 800afca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	e02b      	b.n	800b02e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	db12      	blt.n	800b00e <USB_EPSetStall+0xae>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00f      	beq.n	800b00e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b008:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b00c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	0151      	lsls	r1, r2, #5
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	440a      	add	r2, r1
 800b024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b028:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b02c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d128      	bne.n	800b0aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	0151      	lsls	r1, r2, #5
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	440a      	add	r2, r1
 800b06e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b072:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b076:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	791b      	ldrb	r3, [r3, #4]
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d003      	beq.n	800b088 <USB_EPClearStall+0x4c>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	791b      	ldrb	r3, [r3, #4]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d138      	bne.n	800b0fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	e027      	b.n	800b0fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b0c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d003      	beq.n	800b0da <USB_EPClearStall+0x9e>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	791b      	ldrb	r3, [r3, #4]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d10f      	bne.n	800b0fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b126:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b12a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b142:	4313      	orrs	r3, r2
 800b144:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b182:	f023 0302 	bic.w	r3, r3, #2
 800b186:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1b0:	f023 0303 	bic.w	r3, r3, #3
 800b1b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1c4:	f043 0302 	orr.w	r3, r3, #2
 800b1c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3714      	adds	r7, #20
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b085      	sub	sp, #20
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	4013      	ands	r3, r2
 800b220:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	0c1b      	lsrs	r3, r3, #16
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4013      	ands	r3, r2
 800b254:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	b29b      	uxth	r3, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	4013      	ands	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b294:	68bb      	ldr	r3, [r7, #8]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b087      	sub	sp, #28
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	f003 030f 	and.w	r3, r3, #15
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d2:	01db      	lsls	r3, r3, #7
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0301 	and.w	r3, r3, #1
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b334:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b338:	f023 0307 	bic.w	r3, r3, #7
 800b33c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b34c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b350:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	460b      	mov	r3, r1
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	333c      	adds	r3, #60	@ 0x3c
 800b376:	3304      	adds	r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	4a26      	ldr	r2, [pc, #152]	@ (800b418 <USB_EP0_OutStart+0xb8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d90a      	bls.n	800b39a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b394:	d101      	bne.n	800b39a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	e037      	b.n	800b40a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3c8:	f043 0318 	orr.w	r3, r3, #24
 800b3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b3e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d10f      	bne.n	800b408 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b402:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	4f54300a 	.word	0x4f54300a

0800b41c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3301      	adds	r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b434:	d901      	bls.n	800b43a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e022      	b.n	800b480 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	daf2      	bge.n	800b428 <USB_CoreReset+0xc>

  count = 10U;
 800b442:	230a      	movs	r3, #10
 800b444:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b446:	e002      	b.n	800b44e <USB_CoreReset+0x32>
  {
    count--;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1f9      	bne.n	800b448 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	f043 0201 	orr.w	r2, r3, #1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b46c:	d901      	bls.n	800b472 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e006      	b.n	800b480 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d0f0      	beq.n	800b460 <USB_CoreReset+0x44>

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7f4 fe9b 	bl	80001d0 <strlen>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b0a6      	sub	sp, #152	@ 0x98
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800b4b2:	f7f9 f875 	bl	80045a0 <HAL_GetTick>
 800b4b6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800b4ba:	f107 000c 	add.w	r0, r7, #12
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4ca:	4a06      	ldr	r2, [pc, #24]	@ (800b4e4 <lwip_cdc_debug_log+0x3c>)
 800b4cc:	2180      	movs	r1, #128	@ 0x80
 800b4ce:	f012 f827 	bl	801d520 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff ffd8 	bl	800b48c <lwip_cdc_debug_printf>
}
 800b4dc:	bf00      	nop
 800b4de:	3790      	adds	r7, #144	@ 0x90
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	0801f498 	.word	0x0801f498

0800b4e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b4e8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ea:	b0ac      	sub	sp, #176	@ 0xb0
 800b4ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b4ee:	4bac      	ldr	r3, [pc, #688]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b4f0:	22c0      	movs	r2, #192	@ 0xc0
 800b4f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b4f4:	4baa      	ldr	r3, [pc, #680]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b4f6:	22a8      	movs	r2, #168	@ 0xa8
 800b4f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800b4fa:	4ba9      	ldr	r3, [pc, #676]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 800b500:	4ba7      	ldr	r3, [pc, #668]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b502:	2258      	movs	r2, #88	@ 0x58
 800b504:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b506:	4ba7      	ldr	r3, [pc, #668]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b508:	22ff      	movs	r2, #255	@ 0xff
 800b50a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b50c:	4ba5      	ldr	r3, [pc, #660]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b50e:	22ff      	movs	r2, #255	@ 0xff
 800b510:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b512:	4ba4      	ldr	r3, [pc, #656]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b514:	22ff      	movs	r2, #255	@ 0xff
 800b516:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b518:	4ba2      	ldr	r3, [pc, #648]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800b51e:	4ba2      	ldr	r3, [pc, #648]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b520:	2200      	movs	r2, #0
 800b522:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b524:	4ba0      	ldr	r3, [pc, #640]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b526:	2200      	movs	r2, #0
 800b528:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b52a:	4b9f      	ldr	r3, [pc, #636]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b530:	4b9d      	ldr	r3, [pc, #628]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b532:	2200      	movs	r2, #0
 800b534:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b536:	4b9a      	ldr	r3, [pc, #616]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	461c      	mov	r4, r3
 800b53c:	4b98      	ldr	r3, [pc, #608]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	461a      	mov	r2, r3
 800b542:	4b97      	ldr	r3, [pc, #604]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b544:	789b      	ldrb	r3, [r3, #2]
 800b546:	4619      	mov	r1, r3
 800b548:	4b95      	ldr	r3, [pc, #596]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b54a:	78db      	ldrb	r3, [r3, #3]
 800b54c:	f107 0020 	add.w	r0, r7, #32
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	9101      	str	r1, [sp, #4]
 800b554:	9200      	str	r2, [sp, #0]
 800b556:	4623      	mov	r3, r4
 800b558:	4a94      	ldr	r2, [pc, #592]	@ (800b7ac <MX_LWIP_Init+0x2c4>)
 800b55a:	2180      	movs	r1, #128	@ 0x80
 800b55c:	f011 ffe0 	bl	801d520 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b560:	f107 0320 	add.w	r3, r7, #32
 800b564:	4619      	mov	r1, r3
 800b566:	4892      	ldr	r0, [pc, #584]	@ (800b7b0 <MX_LWIP_Init+0x2c8>)
 800b568:	f7ff ff9e 	bl	800b4a8 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b56c:	4b8d      	ldr	r3, [pc, #564]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	461c      	mov	r4, r3
 800b572:	4b8c      	ldr	r3, [pc, #560]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b574:	785b      	ldrb	r3, [r3, #1]
 800b576:	461a      	mov	r2, r3
 800b578:	4b8a      	ldr	r3, [pc, #552]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	4619      	mov	r1, r3
 800b57e:	4b89      	ldr	r3, [pc, #548]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b580:	78db      	ldrb	r3, [r3, #3]
 800b582:	f107 0020 	add.w	r0, r7, #32
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	9101      	str	r1, [sp, #4]
 800b58a:	9200      	str	r2, [sp, #0]
 800b58c:	4623      	mov	r3, r4
 800b58e:	4a89      	ldr	r2, [pc, #548]	@ (800b7b4 <MX_LWIP_Init+0x2cc>)
 800b590:	2180      	movs	r1, #128	@ 0x80
 800b592:	f011 ffc5 	bl	801d520 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b596:	f107 0320 	add.w	r3, r7, #32
 800b59a:	4619      	mov	r1, r3
 800b59c:	4884      	ldr	r0, [pc, #528]	@ (800b7b0 <MX_LWIP_Init+0x2c8>)
 800b59e:	f7ff ff83 	bl	800b4a8 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b5a2:	4b81      	ldr	r3, [pc, #516]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	4b7f      	ldr	r3, [pc, #508]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4b7e      	ldr	r3, [pc, #504]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b5b0:	789b      	ldrb	r3, [r3, #2]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4b7c      	ldr	r3, [pc, #496]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b5b6:	78db      	ldrb	r3, [r3, #3]
 800b5b8:	f107 0020 	add.w	r0, r7, #32
 800b5bc:	9302      	str	r3, [sp, #8]
 800b5be:	9101      	str	r1, [sp, #4]
 800b5c0:	9200      	str	r2, [sp, #0]
 800b5c2:	4623      	mov	r3, r4
 800b5c4:	4a7c      	ldr	r2, [pc, #496]	@ (800b7b8 <MX_LWIP_Init+0x2d0>)
 800b5c6:	2180      	movs	r1, #128	@ 0x80
 800b5c8:	f011 ffaa 	bl	801d520 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b5cc:	f107 0320 	add.w	r3, r7, #32
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4877      	ldr	r0, [pc, #476]	@ (800b7b0 <MX_LWIP_Init+0x2c8>)
 800b5d4:	f7ff ff68 	bl	800b4a8 <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b5d8:	2100      	movs	r1, #0
 800b5da:	2000      	movs	r0, #0
 800b5dc:	f006 facc 	bl	8011b78 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b5e0:	4b6f      	ldr	r3, [pc, #444]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	061a      	lsls	r2, r3, #24
 800b5e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	041b      	lsls	r3, r3, #16
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	4b6c      	ldr	r3, [pc, #432]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b5f0:	789b      	ldrb	r3, [r3, #2]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	4a6a      	ldr	r2, [pc, #424]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b5f8:	78d2      	ldrb	r2, [r2, #3]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	061a      	lsls	r2, r3, #24
 800b5fe:	4b68      	ldr	r3, [pc, #416]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	0619      	lsls	r1, r3, #24
 800b604:	4b66      	ldr	r3, [pc, #408]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	041b      	lsls	r3, r3, #16
 800b60a:	4319      	orrs	r1, r3
 800b60c:	4b64      	ldr	r3, [pc, #400]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b60e:	789b      	ldrb	r3, [r3, #2]
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	430b      	orrs	r3, r1
 800b614:	4962      	ldr	r1, [pc, #392]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b616:	78c9      	ldrb	r1, [r1, #3]
 800b618:	430b      	orrs	r3, r1
 800b61a:	021b      	lsls	r3, r3, #8
 800b61c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b620:	431a      	orrs	r2, r3
 800b622:	4b5f      	ldr	r3, [pc, #380]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	0619      	lsls	r1, r3, #24
 800b628:	4b5d      	ldr	r3, [pc, #372]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b62a:	785b      	ldrb	r3, [r3, #1]
 800b62c:	041b      	lsls	r3, r3, #16
 800b62e:	4319      	orrs	r1, r3
 800b630:	4b5b      	ldr	r3, [pc, #364]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b632:	789b      	ldrb	r3, [r3, #2]
 800b634:	021b      	lsls	r3, r3, #8
 800b636:	430b      	orrs	r3, r1
 800b638:	4959      	ldr	r1, [pc, #356]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b63a:	78c9      	ldrb	r1, [r1, #3]
 800b63c:	430b      	orrs	r3, r1
 800b63e:	0a1b      	lsrs	r3, r3, #8
 800b640:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b644:	431a      	orrs	r2, r3
 800b646:	4b56      	ldr	r3, [pc, #344]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	0619      	lsls	r1, r3, #24
 800b64c:	4b54      	ldr	r3, [pc, #336]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b64e:	785b      	ldrb	r3, [r3, #1]
 800b650:	041b      	lsls	r3, r3, #16
 800b652:	4319      	orrs	r1, r3
 800b654:	4b52      	ldr	r3, [pc, #328]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b656:	789b      	ldrb	r3, [r3, #2]
 800b658:	021b      	lsls	r3, r3, #8
 800b65a:	430b      	orrs	r3, r1
 800b65c:	4950      	ldr	r1, [pc, #320]	@ (800b7a0 <MX_LWIP_Init+0x2b8>)
 800b65e:	78c9      	ldrb	r1, [r1, #3]
 800b660:	430b      	orrs	r3, r1
 800b662:	0e1b      	lsrs	r3, r3, #24
 800b664:	4313      	orrs	r3, r2
 800b666:	4a55      	ldr	r2, [pc, #340]	@ (800b7bc <MX_LWIP_Init+0x2d4>)
 800b668:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b66a:	4b4e      	ldr	r3, [pc, #312]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	061a      	lsls	r2, r3, #24
 800b670:	4b4c      	ldr	r3, [pc, #304]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b672:	785b      	ldrb	r3, [r3, #1]
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	431a      	orrs	r2, r3
 800b678:	4b4a      	ldr	r3, [pc, #296]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b67a:	789b      	ldrb	r3, [r3, #2]
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	4313      	orrs	r3, r2
 800b680:	4a48      	ldr	r2, [pc, #288]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b682:	78d2      	ldrb	r2, [r2, #3]
 800b684:	4313      	orrs	r3, r2
 800b686:	061a      	lsls	r2, r3, #24
 800b688:	4b46      	ldr	r3, [pc, #280]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	0619      	lsls	r1, r3, #24
 800b68e:	4b45      	ldr	r3, [pc, #276]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	4319      	orrs	r1, r3
 800b696:	4b43      	ldr	r3, [pc, #268]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b698:	789b      	ldrb	r3, [r3, #2]
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	430b      	orrs	r3, r1
 800b69e:	4941      	ldr	r1, [pc, #260]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6a0:	78c9      	ldrb	r1, [r1, #3]
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	4b3d      	ldr	r3, [pc, #244]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	0619      	lsls	r1, r3, #24
 800b6b2:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	041b      	lsls	r3, r3, #16
 800b6b8:	4319      	orrs	r1, r3
 800b6ba:	4b3a      	ldr	r3, [pc, #232]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6bc:	789b      	ldrb	r3, [r3, #2]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	4938      	ldr	r1, [pc, #224]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6c4:	78c9      	ldrb	r1, [r1, #3]
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	0a1b      	lsrs	r3, r3, #8
 800b6ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	4b34      	ldr	r3, [pc, #208]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	0619      	lsls	r1, r3, #24
 800b6d6:	4b33      	ldr	r3, [pc, #204]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6d8:	785b      	ldrb	r3, [r3, #1]
 800b6da:	041b      	lsls	r3, r3, #16
 800b6dc:	4319      	orrs	r1, r3
 800b6de:	4b31      	ldr	r3, [pc, #196]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6e0:	789b      	ldrb	r3, [r3, #2]
 800b6e2:	021b      	lsls	r3, r3, #8
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	492f      	ldr	r1, [pc, #188]	@ (800b7a4 <MX_LWIP_Init+0x2bc>)
 800b6e8:	78c9      	ldrb	r1, [r1, #3]
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	0e1b      	lsrs	r3, r3, #24
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	4a33      	ldr	r2, [pc, #204]	@ (800b7c0 <MX_LWIP_Init+0x2d8>)
 800b6f2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b6f4:	4b2c      	ldr	r3, [pc, #176]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	061a      	lsls	r2, r3, #24
 800b6fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	041b      	lsls	r3, r3, #16
 800b700:	431a      	orrs	r2, r3
 800b702:	4b29      	ldr	r3, [pc, #164]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b704:	789b      	ldrb	r3, [r3, #2]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	4313      	orrs	r3, r2
 800b70a:	4a27      	ldr	r2, [pc, #156]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b70c:	78d2      	ldrb	r2, [r2, #3]
 800b70e:	4313      	orrs	r3, r2
 800b710:	061a      	lsls	r2, r3, #24
 800b712:	4b25      	ldr	r3, [pc, #148]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	0619      	lsls	r1, r3, #24
 800b718:	4b23      	ldr	r3, [pc, #140]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	041b      	lsls	r3, r3, #16
 800b71e:	4319      	orrs	r1, r3
 800b720:	4b21      	ldr	r3, [pc, #132]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b722:	789b      	ldrb	r3, [r3, #2]
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	430b      	orrs	r3, r1
 800b728:	491f      	ldr	r1, [pc, #124]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b72a:	78c9      	ldrb	r1, [r1, #3]
 800b72c:	430b      	orrs	r3, r1
 800b72e:	021b      	lsls	r3, r3, #8
 800b730:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b734:	431a      	orrs	r2, r3
 800b736:	4b1c      	ldr	r3, [pc, #112]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	0619      	lsls	r1, r3, #24
 800b73c:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	041b      	lsls	r3, r3, #16
 800b742:	4319      	orrs	r1, r3
 800b744:	4b18      	ldr	r3, [pc, #96]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b746:	789b      	ldrb	r3, [r3, #2]
 800b748:	021b      	lsls	r3, r3, #8
 800b74a:	430b      	orrs	r3, r1
 800b74c:	4916      	ldr	r1, [pc, #88]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b74e:	78c9      	ldrb	r1, [r1, #3]
 800b750:	430b      	orrs	r3, r1
 800b752:	0a1b      	lsrs	r3, r3, #8
 800b754:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b758:	431a      	orrs	r2, r3
 800b75a:	4b13      	ldr	r3, [pc, #76]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	0619      	lsls	r1, r3, #24
 800b760:	4b11      	ldr	r3, [pc, #68]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	041b      	lsls	r3, r3, #16
 800b766:	4319      	orrs	r1, r3
 800b768:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b76a:	789b      	ldrb	r3, [r3, #2]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	430b      	orrs	r3, r1
 800b770:	490d      	ldr	r1, [pc, #52]	@ (800b7a8 <MX_LWIP_Init+0x2c0>)
 800b772:	78c9      	ldrb	r1, [r1, #3]
 800b774:	430b      	orrs	r3, r1
 800b776:	0e1b      	lsrs	r3, r3, #24
 800b778:	4313      	orrs	r3, r2
 800b77a:	4a12      	ldr	r2, [pc, #72]	@ (800b7c4 <MX_LWIP_Init+0x2dc>)
 800b77c:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b77e:	4b12      	ldr	r3, [pc, #72]	@ (800b7c8 <MX_LWIP_Init+0x2e0>)
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	4b12      	ldr	r3, [pc, #72]	@ (800b7cc <MX_LWIP_Init+0x2e4>)
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	2300      	movs	r3, #0
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <MX_LWIP_Init+0x2dc>)
 800b78c:	4a0c      	ldr	r2, [pc, #48]	@ (800b7c0 <MX_LWIP_Init+0x2d8>)
 800b78e:	490b      	ldr	r1, [pc, #44]	@ (800b7bc <MX_LWIP_Init+0x2d4>)
 800b790:	480f      	ldr	r0, [pc, #60]	@ (800b7d0 <MX_LWIP_Init+0x2e8>)
 800b792:	f006 ffbb 	bl	801270c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b796:	480e      	ldr	r0, [pc, #56]	@ (800b7d0 <MX_LWIP_Init+0x2e8>)
 800b798:	f007 f96a 	bl	8012a70 <netif_set_default>
 800b79c:	e01a      	b.n	800b7d4 <MX_LWIP_Init+0x2ec>
 800b79e:	bf00      	nop
 800b7a0:	200008f4 	.word	0x200008f4
 800b7a4:	200008f8 	.word	0x200008f8
 800b7a8:	200008fc 	.word	0x200008fc
 800b7ac:	0801f6c0 	.word	0x0801f6c0
 800b7b0:	0801f6d0 	.word	0x0801f6d0
 800b7b4:	0801f6dc 	.word	0x0801f6dc
 800b7b8:	0801f6f4 	.word	0x0801f6f4
 800b7bc:	200008e8 	.word	0x200008e8
 800b7c0:	200008ec 	.word	0x200008ec
 800b7c4:	200008f0 	.word	0x200008f0
 800b7c8:	08011ab5 	.word	0x08011ab5
 800b7cc:	0800c2fd 	.word	0x0800c2fd
 800b7d0:	200008b4 	.word	0x200008b4

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b7d4:	4812      	ldr	r0, [pc, #72]	@ (800b820 <MX_LWIP_Init+0x338>)
 800b7d6:	f007 f95b 	bl	8012a90 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b7da:	4912      	ldr	r1, [pc, #72]	@ (800b824 <MX_LWIP_Init+0x33c>)
 800b7dc:	4810      	ldr	r0, [pc, #64]	@ (800b820 <MX_LWIP_Init+0x338>)
 800b7de:	f007 fa27 	bl	8012c30 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800b7e2:	4911      	ldr	r1, [pc, #68]	@ (800b828 <MX_LWIP_Init+0x340>)
 800b7e4:	4811      	ldr	r0, [pc, #68]	@ (800b82c <MX_LWIP_Init+0x344>)
 800b7e6:	f7ff fe5f 	bl	800b4a8 <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800b7ea:	4b11      	ldr	r3, [pc, #68]	@ (800b830 <MX_LWIP_Init+0x348>)
 800b7ec:	1d3c      	adds	r4, r7, #4
 800b7ee:	461d      	mov	r5, r3
 800b7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b7f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800b7fc:	1d3b      	adds	r3, r7, #4
 800b7fe:	4908      	ldr	r1, [pc, #32]	@ (800b820 <MX_LWIP_Init+0x338>)
 800b800:	4618      	mov	r0, r3
 800b802:	f003 f933 	bl	800ea6c <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800b806:	490b      	ldr	r1, [pc, #44]	@ (800b834 <MX_LWIP_Init+0x34c>)
 800b808:	4808      	ldr	r0, [pc, #32]	@ (800b82c <MX_LWIP_Init+0x344>)
 800b80a:	f7ff fe4d 	bl	800b4a8 <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 800b80e:	490a      	ldr	r1, [pc, #40]	@ (800b838 <MX_LWIP_Init+0x350>)
 800b810:	4806      	ldr	r0, [pc, #24]	@ (800b82c <MX_LWIP_Init+0x344>)
 800b812:	f7ff fe49 	bl	800b4a8 <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800b816:	bf00      	nop
 800b818:	37a0      	adds	r7, #160	@ 0xa0
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bdb0      	pop	{r4, r5, r7, pc}
 800b81e:	bf00      	nop
 800b820:	200008b4 	.word	0x200008b4
 800b824:	0800b83d 	.word	0x0800b83d
 800b828:	0801f70c 	.word	0x0801f70c
 800b82c:	0801f6d0 	.word	0x0801f6d0
 800b830:	0801f790 	.word	0x0801f790
 800b834:	0801f734 	.word	0x0801f734
 800b838:	0801f75c 	.word	0x0801f75c

0800b83c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b0a2      	sub	sp, #136	@ 0x88
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d016      	beq.n	800b882 <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 800b854:	490f      	ldr	r1, [pc, #60]	@ (800b894 <ethernet_link_status_updated+0x58>)
 800b856:	4810      	ldr	r0, [pc, #64]	@ (800b898 <ethernet_link_status_updated+0x5c>)
 800b858:	f7ff fe26 	bl	800b4a8 <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f00f feef 	bl	801b644 <ip4addr_ntoa>
 800b866:	4603      	mov	r3, r0
 800b868:	f107 0008 	add.w	r0, r7, #8
 800b86c:	4a0b      	ldr	r2, [pc, #44]	@ (800b89c <ethernet_link_status_updated+0x60>)
 800b86e:	2180      	movs	r1, #128	@ 0x80
 800b870:	f011 fe56 	bl	801d520 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 800b874:	f107 0308 	add.w	r3, r7, #8
 800b878:	4619      	mov	r1, r3
 800b87a:	4807      	ldr	r0, [pc, #28]	@ (800b898 <ethernet_link_status_updated+0x5c>)
 800b87c:	f7ff fe14 	bl	800b4a8 <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 800b880:	e003      	b.n	800b88a <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800b882:	4907      	ldr	r1, [pc, #28]	@ (800b8a0 <ethernet_link_status_updated+0x64>)
 800b884:	4804      	ldr	r0, [pc, #16]	@ (800b898 <ethernet_link_status_updated+0x5c>)
 800b886:	f7ff fe0f 	bl	800b4a8 <lwip_cdc_debug_log>
}
 800b88a:	bf00      	nop
 800b88c:	3788      	adds	r7, #136	@ 0x88
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	0801f7ac 	.word	0x0801f7ac
 800b898:	0801f7c4 	.word	0x0801f7c4
 800b89c:	0801f7d0 	.word	0x0801f7d0
 800b8a0:	0801f7e8 	.word	0x0801f7e8

0800b8a4 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7f4 fc8f 	bl	80001d0 <strlen>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b0a6      	sub	sp, #152	@ 0x98
 800b8c4:	af02      	add	r7, sp, #8
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800b8ca:	f7f8 fe69 	bl	80045a0 <HAL_GetTick>
 800b8ce:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800b8d2:	f107 000c 	add.w	r0, r7, #12
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8e2:	4a06      	ldr	r2, [pc, #24]	@ (800b8fc <cdc_debug_log+0x3c>)
 800b8e4:	2180      	movs	r1, #128	@ 0x80
 800b8e6:	f011 fe1b 	bl	801d520 <sniprintf>
  cdc_debug_printf(debug_buf);
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff ffd8 	bl	800b8a4 <cdc_debug_printf>
}
 800b8f4:	bf00      	nop
 800b8f6:	3790      	adds	r7, #144	@ 0x90
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	0801f804 	.word	0x0801f804

0800b900 <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	b0cf      	sub	sp, #316	@ 0x13c
 800b904:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 800b906:	495d      	ldr	r1, [pc, #372]	@ (800ba7c <debug_eth_dma_descriptors+0x17c>)
 800b908:	485d      	ldr	r0, [pc, #372]	@ (800ba80 <debug_eth_dma_descriptors+0x180>)
 800b90a:	f7ff ffd9 	bl	800b8c0 <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800b914:	e048      	b.n	800b9a8 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 800b916:	495b      	ldr	r1, [pc, #364]	@ (800ba84 <debug_eth_dma_descriptors+0x184>)
 800b918:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	440b      	add	r3, r1
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 800b92c:	4955      	ldr	r1, [pc, #340]	@ (800ba84 <debug_eth_dma_descriptors+0x184>)
 800b92e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	440b      	add	r3, r1
 800b93c:	3308      	adds	r3, #8
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800b944:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b948:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800b94a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800b94e:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800b950:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 800b954:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800b958:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 800b95a:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800b95e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800b962:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 800b964:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 800b968:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800b96c:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800b96e:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800b972:	1d3e      	adds	r6, r7, #4
 800b974:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 800b978:	9505      	str	r5, [sp, #20]
 800b97a:	9404      	str	r4, [sp, #16]
 800b97c:	9003      	str	r0, [sp, #12]
 800b97e:	9102      	str	r1, [sp, #8]
 800b980:	9201      	str	r2, [sp, #4]
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b988:	4a3f      	ldr	r2, [pc, #252]	@ (800ba88 <debug_eth_dma_descriptors+0x188>)
 800b98a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b98e:	4630      	mov	r0, r6
 800b990:	f011 fdc6 	bl	801d520 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800b994:	1d3b      	adds	r3, r7, #4
 800b996:	4619      	mov	r1, r3
 800b998:	4839      	ldr	r0, [pc, #228]	@ (800ba80 <debug_eth_dma_descriptors+0x180>)
 800b99a:	f7ff ff91 	bl	800b8c0 <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800b99e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800b9a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d9b2      	bls.n	800b916 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 800b9b0:	4936      	ldr	r1, [pc, #216]	@ (800ba8c <debug_eth_dma_descriptors+0x18c>)
 800b9b2:	4833      	ldr	r0, [pc, #204]	@ (800ba80 <debug_eth_dma_descriptors+0x180>)
 800b9b4:	f7ff ff84 	bl	800b8c0 <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b9be:	e053      	b.n	800ba68 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 800b9c0:	4933      	ldr	r1, [pc, #204]	@ (800ba90 <debug_eth_dma_descriptors+0x190>)
 800b9c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 800b9d6:	492e      	ldr	r1, [pc, #184]	@ (800ba90 <debug_eth_dma_descriptors+0x190>)
 800b9d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	440b      	add	r3, r1
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 800b9ee:	4928      	ldr	r1, [pc, #160]	@ (800ba90 <debug_eth_dma_descriptors+0x190>)
 800b9f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	440b      	add	r3, r1
 800b9fe:	3308      	adds	r3, #8
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba0a:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800ba0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800ba10:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800ba12:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 800ba16:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800ba1a:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 800ba1c:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800ba20:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800ba24:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 800ba26:	f000 0001 	and.w	r0, r0, #1
 800ba2a:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800ba2e:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800ba32:	1d3e      	adds	r6, r7, #4
 800ba34:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 800ba38:	9505      	str	r5, [sp, #20]
 800ba3a:	9404      	str	r4, [sp, #16]
 800ba3c:	9003      	str	r0, [sp, #12]
 800ba3e:	9102      	str	r1, [sp, #8]
 800ba40:	9201      	str	r2, [sp, #4]
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ba48:	4a12      	ldr	r2, [pc, #72]	@ (800ba94 <debug_eth_dma_descriptors+0x194>)
 800ba4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f011 fd66 	bl	801d520 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800ba54:	1d3b      	adds	r3, r7, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	4809      	ldr	r0, [pc, #36]	@ (800ba80 <debug_eth_dma_descriptors+0x180>)
 800ba5a:	f7ff ff31 	bl	800b8c0 <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800ba5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ba62:	3301      	adds	r3, #1
 800ba64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800ba68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d9a7      	bls.n	800b9c0 <debug_eth_dma_descriptors+0xc0>
  }
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7c:	0801f8e4 	.word	0x0801f8e4
 800ba80:	0801f904 	.word	0x0801f904
 800ba84:	2000528c 	.word	0x2000528c
 800ba88:	0801f910 	.word	0x0801f910
 800ba8c:	0801f94c 	.word	0x0801f94c
 800ba90:	2000532c 	.word	0x2000532c
 800ba94:	0801f96c 	.word	0x0801f96c

0800ba98 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b0a0      	sub	sp, #128	@ 0x80
 800ba9c:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800ba9e:	4b25      	ldr	r3, [pc, #148]	@ (800bb34 <debug_eth_dma_registers+0x9c>)
 800baa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4638      	mov	r0, r7
 800baa8:	4a23      	ldr	r2, [pc, #140]	@ (800bb38 <debug_eth_dma_registers+0xa0>)
 800baaa:	2180      	movs	r1, #128	@ 0x80
 800baac:	f011 fd38 	bl	801d520 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bab0:	463b      	mov	r3, r7
 800bab2:	4619      	mov	r1, r3
 800bab4:	4821      	ldr	r0, [pc, #132]	@ (800bb3c <debug_eth_dma_registers+0xa4>)
 800bab6:	f7ff ff03 	bl	800b8c0 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 800baba:	4b1e      	ldr	r3, [pc, #120]	@ (800bb34 <debug_eth_dma_registers+0x9c>)
 800babc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	4638      	mov	r0, r7
 800bac4:	4a1e      	ldr	r2, [pc, #120]	@ (800bb40 <debug_eth_dma_registers+0xa8>)
 800bac6:	2180      	movs	r1, #128	@ 0x80
 800bac8:	f011 fd2a 	bl	801d520 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bacc:	463b      	mov	r3, r7
 800bace:	4619      	mov	r1, r3
 800bad0:	481a      	ldr	r0, [pc, #104]	@ (800bb3c <debug_eth_dma_registers+0xa4>)
 800bad2:	f7ff fef5 	bl	800b8c0 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 800bad6:	4b17      	ldr	r3, [pc, #92]	@ (800bb34 <debug_eth_dma_registers+0x9c>)
 800bad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	4638      	mov	r0, r7
 800bae0:	4a18      	ldr	r2, [pc, #96]	@ (800bb44 <debug_eth_dma_registers+0xac>)
 800bae2:	2180      	movs	r1, #128	@ 0x80
 800bae4:	f011 fd1c 	bl	801d520 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bae8:	463b      	mov	r3, r7
 800baea:	4619      	mov	r1, r3
 800baec:	4813      	ldr	r0, [pc, #76]	@ (800bb3c <debug_eth_dma_registers+0xa4>)
 800baee:	f7ff fee7 	bl	800b8c0 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 800baf2:	4b10      	ldr	r3, [pc, #64]	@ (800bb34 <debug_eth_dma_registers+0x9c>)
 800baf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	4638      	mov	r0, r7
 800bafc:	4a12      	ldr	r2, [pc, #72]	@ (800bb48 <debug_eth_dma_registers+0xb0>)
 800bafe:	2180      	movs	r1, #128	@ 0x80
 800bb00:	f011 fd0e 	bl	801d520 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bb04:	463b      	mov	r3, r7
 800bb06:	4619      	mov	r1, r3
 800bb08:	480c      	ldr	r0, [pc, #48]	@ (800bb3c <debug_eth_dma_registers+0xa4>)
 800bb0a:	f7ff fed9 	bl	800b8c0 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800bb0e:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <debug_eth_dma_registers+0x9c>)
 800bb10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	4638      	mov	r0, r7
 800bb18:	4a0c      	ldr	r2, [pc, #48]	@ (800bb4c <debug_eth_dma_registers+0xb4>)
 800bb1a:	2180      	movs	r1, #128	@ 0x80
 800bb1c:	f011 fd00 	bl	801d520 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bb20:	463b      	mov	r3, r7
 800bb22:	4619      	mov	r1, r3
 800bb24:	4805      	ldr	r0, [pc, #20]	@ (800bb3c <debug_eth_dma_registers+0xa4>)
 800bb26:	f7ff fecb 	bl	800b8c0 <cdc_debug_log>
}
 800bb2a:	bf00      	nop
 800bb2c:	3780      	adds	r7, #128	@ 0x80
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	40028000 	.word	0x40028000
 800bb38:	0801f9a8 	.word	0x0801f9a8
 800bb3c:	0801f9b8 	.word	0x0801f9b8
 800bb40:	0801f9c0 	.word	0x0801f9c0
 800bb44:	0801f9d0 	.word	0x0801f9d0
 800bb48:	0801f9e0 	.word	0x0801f9e0
 800bb4c:	0801f9f4 	.word	0x0801f9f4

0800bb50 <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b0a2      	sub	sp, #136	@ 0x88
 800bb54:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800bb56:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc8 <debug_eth_config+0x78>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bbcc <debug_eth_config+0x7c>)
 800bb5e:	2180      	movs	r1, #128	@ 0x80
 800bb60:	f011 fcde 	bl	801d520 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bb64:	463b      	mov	r3, r7
 800bb66:	4619      	mov	r1, r3
 800bb68:	4819      	ldr	r0, [pc, #100]	@ (800bbd0 <debug_eth_config+0x80>)
 800bb6a:	f7ff fea9 	bl	800b8c0 <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800bb6e:	4b16      	ldr	r3, [pc, #88]	@ (800bbc8 <debug_eth_config+0x78>)
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	4638      	mov	r0, r7
 800bb74:	4a17      	ldr	r2, [pc, #92]	@ (800bbd4 <debug_eth_config+0x84>)
 800bb76:	2180      	movs	r1, #128	@ 0x80
 800bb78:	f011 fcd2 	bl	801d520 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4813      	ldr	r0, [pc, #76]	@ (800bbd0 <debug_eth_config+0x80>)
 800bb82:	f7ff fe9d 	bl	800b8c0 <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800bb86:	4b10      	ldr	r3, [pc, #64]	@ (800bbc8 <debug_eth_config+0x78>)
 800bb88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	4638      	mov	r0, r7
 800bb90:	4a11      	ldr	r2, [pc, #68]	@ (800bbd8 <debug_eth_config+0x88>)
 800bb92:	2180      	movs	r1, #128	@ 0x80
 800bb94:	f011 fcc4 	bl	801d520 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bb98:	463b      	mov	r3, r7
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	480c      	ldr	r0, [pc, #48]	@ (800bbd0 <debug_eth_config+0x80>)
 800bb9e:	f7ff fe8f 	bl	800b8c0 <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800bba2:	4638      	mov	r0, r7
 800bba4:	230c      	movs	r3, #12
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	2304      	movs	r3, #4
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2304      	movs	r3, #4
 800bbae:	4a0b      	ldr	r2, [pc, #44]	@ (800bbdc <debug_eth_config+0x8c>)
 800bbb0:	2180      	movs	r1, #128	@ 0x80
 800bbb2:	f011 fcb5 	bl	801d520 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4805      	ldr	r0, [pc, #20]	@ (800bbd0 <debug_eth_config+0x80>)
 800bbbc:	f7ff fe80 	bl	800b8c0 <cdc_debug_log>
}
 800bbc0:	bf00      	nop
 800bbc2:	3780      	adds	r7, #128	@ 0x80
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	40028000 	.word	0x40028000
 800bbcc:	0801fa08 	.word	0x0801fa08
 800bbd0:	0801fa18 	.word	0x0801fa18
 800bbd4:	0801fa20 	.word	0x0801fa20
 800bbd8:	0801fa30 	.word	0x0801fa30
 800bbdc:	0801fa40 	.word	0x0801fa40

0800bbe0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bbe8:	4b04      	ldr	r3, [pc, #16]	@ (800bbfc <HAL_ETH_RxCpltCallback+0x1c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f003 f8b9 	bl	800ed64 <osSemaphoreRelease>
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20005400 	.word	0x20005400

0800bc00 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bc08:	4b04      	ldr	r3, [pc, #16]	@ (800bc1c <HAL_ETH_TxCpltCallback+0x1c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f003 f8a9 	bl	800ed64 <osSemaphoreRelease>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20005404 	.word	0x20005404

0800bc20 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7f9 ff4d 	bl	8005ac8 <HAL_ETH_GetDMAError>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc34:	2b80      	cmp	r3, #128	@ 0x80
 800bc36:	d104      	bne.n	800bc42 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bc38:	4b04      	ldr	r3, [pc, #16]	@ (800bc4c <HAL_ETH_ErrorCallback+0x2c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f003 f891 	bl	800ed64 <osSemaphoreRelease>
  }
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20005400 	.word	0x20005400

0800bc50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bc50:	b5b0      	push	{r4, r5, r7, lr}
 800bc52:	b0ce      	sub	sp, #312	@ 0x138
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bc5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bc5e:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc66:	4bba      	ldr	r3, [pc, #744]	@ (800bf50 <low_level_init+0x300>)
 800bc68:	4aba      	ldr	r2, [pc, #744]	@ (800bf54 <low_level_init+0x304>)
 800bc6a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800bc72:	2380      	movs	r3, #128	@ 0x80
 800bc74:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800bc78:	23e1      	movs	r3, #225	@ 0xe1
 800bc7a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800bc84:	2300      	movs	r3, #0
 800bc86:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800bc90:	4aaf      	ldr	r2, [pc, #700]	@ (800bf50 <low_level_init+0x300>)
 800bc92:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800bc96:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bc98:	4bad      	ldr	r3, [pc, #692]	@ (800bf50 <low_level_init+0x300>)
 800bc9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bc9e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bca0:	4bab      	ldr	r3, [pc, #684]	@ (800bf50 <low_level_init+0x300>)
 800bca2:	4aad      	ldr	r2, [pc, #692]	@ (800bf58 <low_level_init+0x308>)
 800bca4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bca6:	4baa      	ldr	r3, [pc, #680]	@ (800bf50 <low_level_init+0x300>)
 800bca8:	4aac      	ldr	r2, [pc, #688]	@ (800bf5c <low_level_init+0x30c>)
 800bcaa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bcac:	4ba8      	ldr	r3, [pc, #672]	@ (800bf50 <low_level_init+0x300>)
 800bcae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bcb2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bcb4:	48a6      	ldr	r0, [pc, #664]	@ (800bf50 <low_level_init+0x300>)
 800bcb6:	f7f9 f901 	bl	8004ebc <HAL_ETH_Init>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bcc0:	2238      	movs	r2, #56	@ 0x38
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	48a6      	ldr	r0, [pc, #664]	@ (800bf60 <low_level_init+0x310>)
 800bcc6:	f011 fcce 	bl	801d666 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bcca:	4ba5      	ldr	r3, [pc, #660]	@ (800bf60 <low_level_init+0x310>)
 800bccc:	2221      	movs	r2, #33	@ 0x21
 800bcce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bcd0:	4ba3      	ldr	r3, [pc, #652]	@ (800bf60 <low_level_init+0x310>)
 800bcd2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bcd6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bcd8:	4ba1      	ldr	r3, [pc, #644]	@ (800bf60 <low_level_init+0x310>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bcde:	48a1      	ldr	r0, [pc, #644]	@ (800bf64 <low_level_init+0x314>)
 800bce0:	f006 fbce 	bl	8012480 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bce8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2206      	movs	r2, #6
 800bcf0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bcf4:	4b96      	ldr	r3, [pc, #600]	@ (800bf50 <low_level_init+0x300>)
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	781a      	ldrb	r2, [r3, #0]
 800bcfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bd08:	4b91      	ldr	r3, [pc, #580]	@ (800bf50 <low_level_init+0x300>)
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	785a      	ldrb	r2, [r3, #1]
 800bd0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bd1c:	4b8c      	ldr	r3, [pc, #560]	@ (800bf50 <low_level_init+0x300>)
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	789a      	ldrb	r2, [r3, #2]
 800bd22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bd30:	4b87      	ldr	r3, [pc, #540]	@ (800bf50 <low_level_init+0x300>)
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	78da      	ldrb	r2, [r3, #3]
 800bd36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bd44:	4b82      	ldr	r3, [pc, #520]	@ (800bf50 <low_level_init+0x300>)
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	791a      	ldrb	r2, [r3, #4]
 800bd4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd58:	4b7d      	ldr	r3, [pc, #500]	@ (800bf50 <low_level_init+0x300>)
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	795a      	ldrb	r2, [r3, #5]
 800bd5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bd6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bd7a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd8a:	f043 030a 	orr.w	r3, r3, #10
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bda4:	2300      	movs	r3, #0
 800bda6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800bdaa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bdae:	2101      	movs	r1, #1
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f002 ff57 	bl	800ec64 <osSemaphoreCreate>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4a6b      	ldr	r2, [pc, #428]	@ (800bf68 <low_level_init+0x318>)
 800bdba:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800bdc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdcc:	2101      	movs	r1, #1
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f002 ff48 	bl	800ec64 <osSemaphoreCreate>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	4a65      	ldr	r2, [pc, #404]	@ (800bf6c <low_level_init+0x31c>)
 800bdd8:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800bdda:	4b63      	ldr	r3, [pc, #396]	@ (800bf68 <low_level_init+0x318>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2100      	movs	r1, #0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f002 ff71 	bl	800ecc8 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800bde6:	4b61      	ldr	r3, [pc, #388]	@ (800bf6c <low_level_init+0x31c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2100      	movs	r1, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f002 ff6b 	bl	800ecc8 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bdf2:	4b5f      	ldr	r3, [pc, #380]	@ (800bf70 <low_level_init+0x320>)
 800bdf4:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800bdf8:	461d      	mov	r5, r3
 800bdfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800be06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800be0e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800be12:	6819      	ldr	r1, [r3, #0]
 800be14:	4610      	mov	r0, r2
 800be16:	f002 fe29 	bl	800ea6c <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800be1a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f040 8158 	bne.w	800c0d4 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800be24:	4953      	ldr	r1, [pc, #332]	@ (800bf74 <low_level_init+0x324>)
 800be26:	4854      	ldr	r0, [pc, #336]	@ (800bf78 <low_level_init+0x328>)
 800be28:	f7ff fd4a 	bl	800b8c0 <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800be2c:	4b53      	ldr	r3, [pc, #332]	@ (800bf7c <low_level_init+0x32c>)
 800be2e:	4a54      	ldr	r2, [pc, #336]	@ (800bf80 <low_level_init+0x330>)
 800be30:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800be32:	4b52      	ldr	r3, [pc, #328]	@ (800bf7c <low_level_init+0x32c>)
 800be34:	4a53      	ldr	r2, [pc, #332]	@ (800bf84 <low_level_init+0x334>)
 800be36:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800be38:	4b50      	ldr	r3, [pc, #320]	@ (800bf7c <low_level_init+0x32c>)
 800be3a:	4a53      	ldr	r2, [pc, #332]	@ (800bf88 <low_level_init+0x338>)
 800be3c:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800be3e:	4b4f      	ldr	r3, [pc, #316]	@ (800bf7c <low_level_init+0x32c>)
 800be40:	4a52      	ldr	r2, [pc, #328]	@ (800bf8c <low_level_init+0x33c>)
 800be42:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800be44:	4b4d      	ldr	r3, [pc, #308]	@ (800bf7c <low_level_init+0x32c>)
 800be46:	4a52      	ldr	r2, [pc, #328]	@ (800bf90 <low_level_init+0x340>)
 800be48:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800be4a:	494c      	ldr	r1, [pc, #304]	@ (800bf7c <low_level_init+0x32c>)
 800be4c:	4851      	ldr	r0, [pc, #324]	@ (800bf94 <low_level_init+0x344>)
 800be4e:	f7f8 f998 	bl	8004182 <eth_chip_regster_bus_io>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d005      	beq.n	800be64 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800be58:	494f      	ldr	r1, [pc, #316]	@ (800bf98 <low_level_init+0x348>)
 800be5a:	4847      	ldr	r0, [pc, #284]	@ (800bf78 <low_level_init+0x328>)
 800be5c:	f7ff fd30 	bl	800b8c0 <cdc_debug_log>
      Error_Handler();
 800be60:	f7f5 fe40 	bl	8001ae4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800be64:	494d      	ldr	r1, [pc, #308]	@ (800bf9c <low_level_init+0x34c>)
 800be66:	4844      	ldr	r0, [pc, #272]	@ (800bf78 <low_level_init+0x328>)
 800be68:	f7ff fd2a 	bl	800b8c0 <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800be6c:	4849      	ldr	r0, [pc, #292]	@ (800bf94 <low_level_init+0x344>)
 800be6e:	f7f8 f9bb 	bl	80041e8 <eth_chip_init>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800be78:	4949      	ldr	r1, [pc, #292]	@ (800bfa0 <low_level_init+0x350>)
 800be7a:	483f      	ldr	r0, [pc, #252]	@ (800bf78 <low_level_init+0x328>)
 800be7c:	f7ff fd20 	bl	800b8c0 <cdc_debug_log>
      Error_Handler();
 800be80:	f7f5 fe30 	bl	8001ae4 <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800be84:	4b43      	ldr	r3, [pc, #268]	@ (800bf94 <low_level_init+0x344>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f107 0008 	add.w	r0, r7, #8
 800be8c:	4a45      	ldr	r2, [pc, #276]	@ (800bfa4 <low_level_init+0x354>)
 800be8e:	2140      	movs	r1, #64	@ 0x40
 800be90:	f011 fb46 	bl	801d520 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	4619      	mov	r1, r3
 800be9a:	4837      	ldr	r0, [pc, #220]	@ (800bf78 <low_level_init+0x328>)
 800be9c:	f7ff fd10 	bl	800b8c0 <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800bea0:	483c      	ldr	r0, [pc, #240]	@ (800bf94 <low_level_init+0x344>)
 800bea2:	f7f8 faa7 	bl	80043f4 <eth_chip_disable_power_down_mode>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d005      	beq.n	800beb8 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800beac:	493e      	ldr	r1, [pc, #248]	@ (800bfa8 <low_level_init+0x358>)
 800beae:	4832      	ldr	r0, [pc, #200]	@ (800bf78 <low_level_init+0x328>)
 800beb0:	f7ff fd06 	bl	800b8c0 <cdc_debug_log>
      Error_Handler();
 800beb4:	f7f5 fe16 	bl	8001ae4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800beb8:	493c      	ldr	r1, [pc, #240]	@ (800bfac <low_level_init+0x35c>)
 800beba:	482f      	ldr	r0, [pc, #188]	@ (800bf78 <low_level_init+0x328>)
 800bebc:	f7ff fd00 	bl	800b8c0 <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800bec0:	4834      	ldr	r0, [pc, #208]	@ (800bf94 <low_level_init+0x344>)
 800bec2:	f7f8 fac4 	bl	800444e <eth_chip_start_auto_nego>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d005      	beq.n	800bed8 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800becc:	4938      	ldr	r1, [pc, #224]	@ (800bfb0 <low_level_init+0x360>)
 800bece:	482a      	ldr	r0, [pc, #168]	@ (800bf78 <low_level_init+0x328>)
 800bed0:	f7ff fcf6 	bl	800b8c0 <cdc_debug_log>
      Error_Handler();
 800bed4:	f7f5 fe06 	bl	8001ae4 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800bed8:	4936      	ldr	r1, [pc, #216]	@ (800bfb4 <low_level_init+0x364>)
 800beda:	4827      	ldr	r0, [pc, #156]	@ (800bf78 <low_level_init+0x328>)
 800bedc:	f7ff fcf0 	bl	800b8c0 <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800bee6:	2064      	movs	r0, #100	@ 0x64
 800bee8:	f7f8 fb66 	bl	80045b8 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800beec:	4829      	ldr	r0, [pc, #164]	@ (800bf94 <low_level_init+0x344>)
 800beee:	f7f8 fadb 	bl	80044a8 <eth_chip_get_link_state>
 800bef2:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800bef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800befa:	3301      	adds	r3, #1
 800befc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800bf00:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800bf04:	4b2c      	ldr	r3, [pc, #176]	@ (800bfb8 <low_level_init+0x368>)
 800bf06:	fba3 2301 	umull	r2, r3, r3, r1
 800bf0a:	08da      	lsrs	r2, r3, #3
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	1aca      	subs	r2, r1, r3
 800bf16:	2a00      	cmp	r2, #0
 800bf18:	d110      	bne.n	800bf3c <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800bf1a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800bf1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf28:	4a24      	ldr	r2, [pc, #144]	@ (800bfbc <low_level_init+0x36c>)
 800bf2a:	2140      	movs	r1, #64	@ 0x40
 800bf2c:	f011 faf8 	bl	801d520 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800bf30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800bf34:	4619      	mov	r1, r3
 800bf36:	4810      	ldr	r0, [pc, #64]	@ (800bf78 <low_level_init+0x328>)
 800bf38:	f7ff fcc2 	bl	800b8c0 <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800bf3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf40:	2b32      	cmp	r3, #50	@ 0x32
 800bf42:	d93f      	bls.n	800bfc4 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800bf44:	491e      	ldr	r1, [pc, #120]	@ (800bfc0 <low_level_init+0x370>)
 800bf46:	480c      	ldr	r0, [pc, #48]	@ (800bf78 <low_level_init+0x328>)
 800bf48:	f7ff fcba 	bl	800b8c0 <cdc_debug_log>
        break;
 800bf4c:	e043      	b.n	800bfd6 <low_level_init+0x386>
 800bf4e:	bf00      	nop
 800bf50:	20005408 	.word	0x20005408
 800bf54:	40028000 	.word	0x40028000
 800bf58:	2000532c 	.word	0x2000532c
 800bf5c:	2000528c 	.word	0x2000528c
 800bf60:	200054b8 	.word	0x200054b8
 800bf64:	08022d90 	.word	0x08022d90
 800bf68:	20005400 	.word	0x20005400
 800bf6c:	20005404 	.word	0x20005404
 800bf70:	0801fd70 	.word	0x0801fd70
 800bf74:	0801fa70 	.word	0x0801fa70
 800bf78:	0801fa94 	.word	0x0801fa94
 800bf7c:	200053ec 	.word	0x200053ec
 800bf80:	0800c3a9 	.word	0x0800c3a9
 800bf84:	0800c3d5 	.word	0x0800c3d5
 800bf88:	0800c3fd 	.word	0x0800c3fd
 800bf8c:	0800c455 	.word	0x0800c455
 800bf90:	0800c4b1 	.word	0x0800c4b1
 800bf94:	200053cc 	.word	0x200053cc
 800bf98:	0801faa0 	.word	0x0801faa0
 800bf9c:	0801fac4 	.word	0x0801fac4
 800bfa0:	0801faf0 	.word	0x0801faf0
 800bfa4:	0801fb10 	.word	0x0801fb10
 800bfa8:	0801fb34 	.word	0x0801fb34
 800bfac:	0801fb5c 	.word	0x0801fb5c
 800bfb0:	0801fb7c 	.word	0x0801fb7c
 800bfb4:	0801fba0 	.word	0x0801fba0
 800bfb8:	cccccccd 	.word	0xcccccccd
 800bfbc:	0801fbc8 	.word	0x0801fbc8
 800bfc0:	0801fbec 	.word	0x0801fbec
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800bfc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800bfc8:	2b06      	cmp	r3, #6
 800bfca:	d08c      	beq.n	800bee6 <low_level_init+0x296>
 800bfcc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800bfd0:	f113 0f05 	cmn.w	r3, #5
 800bfd4:	d087      	beq.n	800bee6 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800bfd6:	4843      	ldr	r0, [pc, #268]	@ (800c0e4 <low_level_init+0x494>)
 800bfd8:	f7f8 fa66 	bl	80044a8 <eth_chip_get_link_state>
 800bfdc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800bfe0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800bfe4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bfe8:	4a3f      	ldr	r2, [pc, #252]	@ (800c0e8 <low_level_init+0x498>)
 800bfea:	2140      	movs	r1, #64	@ 0x40
 800bfec:	f011 fa98 	bl	801d520 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800bff0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800bff4:	4619      	mov	r1, r3
 800bff6:	483d      	ldr	r0, [pc, #244]	@ (800c0ec <low_level_init+0x49c>)
 800bff8:	f7ff fc62 	bl	800b8c0 <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800bffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c000:	f113 0f05 	cmn.w	r3, #5
 800c004:	d053      	beq.n	800c0ae <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800c006:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800c00a:	4619      	mov	r1, r3
 800c00c:	4838      	ldr	r0, [pc, #224]	@ (800c0f0 <low_level_init+0x4a0>)
 800c00e:	f7f9 fc3d 	bl	800588c <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800c012:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c016:	3b02      	subs	r3, #2
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d83b      	bhi.n	800c094 <low_level_init+0x444>
 800c01c:	a201      	add	r2, pc, #4	@ (adr r2, 800c024 <low_level_init+0x3d4>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c035 	.word	0x0800c035
 800c028:	0800c04f 	.word	0x0800c04f
 800c02c:	0800c067 	.word	0x0800c067
 800c030:	0800c07f 	.word	0x0800c07f
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c034:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c03c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800c044:	492b      	ldr	r1, [pc, #172]	@ (800c0f4 <low_level_init+0x4a4>)
 800c046:	4829      	ldr	r0, [pc, #164]	@ (800c0ec <low_level_init+0x49c>)
 800c048:	f7ff fc3a 	bl	800b8c0 <cdc_debug_log>
          break;
 800c04c:	e02f      	b.n	800c0ae <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c04e:	2300      	movs	r3, #0
 800c050:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c054:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800c05c:	4926      	ldr	r1, [pc, #152]	@ (800c0f8 <low_level_init+0x4a8>)
 800c05e:	4823      	ldr	r0, [pc, #140]	@ (800c0ec <low_level_init+0x49c>)
 800c060:	f7ff fc2e 	bl	800b8c0 <cdc_debug_log>
          break;
 800c064:	e023      	b.n	800c0ae <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c066:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c06a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800c06e:	2300      	movs	r3, #0
 800c070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800c074:	4921      	ldr	r1, [pc, #132]	@ (800c0fc <low_level_init+0x4ac>)
 800c076:	481d      	ldr	r0, [pc, #116]	@ (800c0ec <low_level_init+0x49c>)
 800c078:	f7ff fc22 	bl	800b8c0 <cdc_debug_log>
          break;
 800c07c:	e017      	b.n	800c0ae <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c07e:	2300      	movs	r3, #0
 800c080:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800c084:	2300      	movs	r3, #0
 800c086:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800c08a:	491d      	ldr	r1, [pc, #116]	@ (800c100 <low_level_init+0x4b0>)
 800c08c:	4817      	ldr	r0, [pc, #92]	@ (800c0ec <low_level_init+0x49c>)
 800c08e:	f7ff fc17 	bl	800b8c0 <cdc_debug_log>
          break;
 800c092:	e00c      	b.n	800c0ae <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c094:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c09c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c0a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800c0a4:	4917      	ldr	r1, [pc, #92]	@ (800c104 <low_level_init+0x4b4>)
 800c0a6:	4811      	ldr	r0, [pc, #68]	@ (800c0ec <low_level_init+0x49c>)
 800c0a8:	f7ff fc0a 	bl	800b8c0 <cdc_debug_log>
          break;
 800c0ac:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800c0ae:	4916      	ldr	r1, [pc, #88]	@ (800c108 <low_level_init+0x4b8>)
 800c0b0:	480e      	ldr	r0, [pc, #56]	@ (800c0ec <low_level_init+0x49c>)
 800c0b2:	f7ff fc05 	bl	800b8c0 <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800c0b6:	4915      	ldr	r1, [pc, #84]	@ (800c10c <low_level_init+0x4bc>)
 800c0b8:	4815      	ldr	r0, [pc, #84]	@ (800c110 <low_level_init+0x4c0>)
 800c0ba:	f7ff fc01 	bl	800b8c0 <cdc_debug_log>
    debug_eth_config();
 800c0be:	f7ff fd47 	bl	800bb50 <debug_eth_config>
    debug_eth_dma_registers();
 800c0c2:	f7ff fce9 	bl	800ba98 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800c0c6:	f7ff fc1b 	bl	800b900 <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800c0ca:	4912      	ldr	r1, [pc, #72]	@ (800c114 <low_level_init+0x4c4>)
 800c0cc:	4810      	ldr	r0, [pc, #64]	@ (800c110 <low_level_init+0x4c0>)
 800c0ce:	f7ff fbf7 	bl	800b8c0 <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c0d2:	e001      	b.n	800c0d8 <low_level_init+0x488>
    Error_Handler();
 800c0d4:	f7f5 fd06 	bl	8001ae4 <Error_Handler>
}
 800c0d8:	bf00      	nop
 800c0da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	200053cc 	.word	0x200053cc
 800c0e8:	0801fc1c 	.word	0x0801fc1c
 800c0ec:	0801fa94 	.word	0x0801fa94
 800c0f0:	20005408 	.word	0x20005408
 800c0f4:	0801fc38 	.word	0x0801fc38
 800c0f8:	0801fc58 	.word	0x0801fc58
 800c0fc:	0801fc78 	.word	0x0801fc78
 800c100:	0801fc94 	.word	0x0801fc94
 800c104:	0801fcb0 	.word	0x0801fcb0
 800c108:	0801fccc 	.word	0x0801fccc
 800c10c:	0801fd1c 	.word	0x0801fd1c
 800c110:	0801fd40 	.word	0x0801fd40
 800c114:	0801fd4c 	.word	0x0801fd4c

0800c118 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b092      	sub	sp, #72	@ 0x48
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c122:	2300      	movs	r3, #0
 800c124:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c130:	f107 030c 	add.w	r3, r7, #12
 800c134:	2230      	movs	r2, #48	@ 0x30
 800c136:	2100      	movs	r1, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	f011 fa94 	bl	801d666 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c13e:	f107 030c 	add.w	r3, r7, #12
 800c142:	2230      	movs	r2, #48	@ 0x30
 800c144:	2100      	movs	r1, #0
 800c146:	4618      	mov	r0, r3
 800c148:	f011 fa8d 	bl	801d666 <memset>

  for(q = p; q != NULL; q = q->next)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c150:	e045      	b.n	800c1de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c154:	2b03      	cmp	r3, #3
 800c156:	d902      	bls.n	800c15e <low_level_output+0x46>
      return ERR_IF;
 800c158:	f06f 030b 	mvn.w	r3, #11
 800c15c:	e07f      	b.n	800c25e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c15e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c160:	6859      	ldr	r1, [r3, #4]
 800c162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c164:	4613      	mov	r3, r2
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	3348      	adds	r3, #72	@ 0x48
 800c16e:	443b      	add	r3, r7
 800c170:	3b3c      	subs	r3, #60	@ 0x3c
 800c172:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c176:	895b      	ldrh	r3, [r3, #10]
 800c178:	4619      	mov	r1, r3
 800c17a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c17c:	4613      	mov	r3, r2
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	3348      	adds	r3, #72	@ 0x48
 800c186:	443b      	add	r3, r7
 800c188:	3b38      	subs	r3, #56	@ 0x38
 800c18a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d011      	beq.n	800c1b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c194:	1e5a      	subs	r2, r3, #1
 800c196:	f107 000c 	add.w	r0, r7, #12
 800c19a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c19c:	460b      	mov	r3, r1
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	440b      	add	r3, r1
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	18c1      	adds	r1, r0, r3
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	3348      	adds	r3, #72	@ 0x48
 800c1b0:	443b      	add	r3, r7
 800c1b2:	3b34      	subs	r3, #52	@ 0x34
 800c1b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c1be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	3348      	adds	r3, #72	@ 0x48
 800c1ca:	443b      	add	r3, r7
 800c1cc:	3b34      	subs	r3, #52	@ 0x34
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1b6      	bne.n	800c152 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	891b      	ldrh	r3, [r3, #8]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c268 <low_level_output+0x150>)
 800c1ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c268 <low_level_output+0x150>)
 800c1f0:	f107 030c 	add.w	r3, r7, #12
 800c1f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c1f6:	4a1c      	ldr	r2, [pc, #112]	@ (800c268 <low_level_output+0x150>)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c1fc:	6838      	ldr	r0, [r7, #0]
 800c1fe:	f007 f96b 	bl	80134d8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c202:	4919      	ldr	r1, [pc, #100]	@ (800c268 <low_level_output+0x150>)
 800c204:	4819      	ldr	r0, [pc, #100]	@ (800c26c <low_level_output+0x154>)
 800c206:	f7f8 ffe4 	bl	80051d2 <HAL_ETH_Transmit_IT>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c216:	e01b      	b.n	800c250 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c218:	4814      	ldr	r0, [pc, #80]	@ (800c26c <low_level_output+0x154>)
 800c21a:	f7f9 fc48 	bl	8005aae <HAL_ETH_GetError>
 800c21e:	4603      	mov	r3, r0
 800c220:	f003 0302 	and.w	r3, r3, #2
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00d      	beq.n	800c244 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c228:	4b11      	ldr	r3, [pc, #68]	@ (800c270 <low_level_output+0x158>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c230:	4618      	mov	r0, r3
 800c232:	f002 fd49 	bl	800ecc8 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c236:	480d      	ldr	r0, [pc, #52]	@ (800c26c <low_level_output+0x154>)
 800c238:	f7f9 f96a 	bl	8005510 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c23c:	23fe      	movs	r3, #254	@ 0xfe
 800c23e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c242:	e005      	b.n	800c250 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c244:	6838      	ldr	r0, [r7, #0]
 800c246:	f007 f8a1 	bl	801338c <pbuf_free>
        errval =  ERR_IF;
 800c24a:	23f4      	movs	r3, #244	@ 0xf4
 800c24c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c250:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c254:	f113 0f02 	cmn.w	r3, #2
 800c258:	d0d3      	beq.n	800c202 <low_level_output+0xea>

  return errval;
 800c25a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3748      	adds	r7, #72	@ 0x48
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	200054b8 	.word	0x200054b8
 800c26c:	20005408 	.word	0x20005408
 800c270:	20005404 	.word	0x20005404

0800c274 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c27c:	2300      	movs	r3, #0
 800c27e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c280:	4b07      	ldr	r3, [pc, #28]	@ (800c2a0 <low_level_input+0x2c>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d105      	bne.n	800c294 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c288:	f107 030c 	add.w	r3, r7, #12
 800c28c:	4619      	mov	r1, r3
 800c28e:	4805      	ldr	r0, [pc, #20]	@ (800c2a4 <low_level_input+0x30>)
 800c290:	f7f8 fffb 	bl	800528a <HAL_ETH_ReadData>
  }

  return p;
 800c294:	68fb      	ldr	r3, [r7, #12]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	20005288 	.word	0x20005288
 800c2a4:	20005408 	.word	0x20005408

0800c2a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f8 <ethernetif_input+0x50>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f04f 31ff 	mov.w	r1, #4294967295
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f002 fd01 	bl	800ecc8 <osSemaphoreWait>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1f5      	bne.n	800c2b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c2cc:	68b8      	ldr	r0, [r7, #8]
 800c2ce:	f7ff ffd1 	bl	800c274 <low_level_input>
 800c2d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	4798      	blx	r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f007 f84e 	bl	801338c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1ea      	bne.n	800c2cc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c2f6:	e7df      	b.n	800c2b8 <ethernetif_input+0x10>
 800c2f8:	20005400 	.word	0x20005400

0800c2fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <ethernetif_init+0x1c>
 800c30a:	4b0e      	ldr	r3, [pc, #56]	@ (800c344 <ethernetif_init+0x48>)
 800c30c:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800c310:	490d      	ldr	r1, [pc, #52]	@ (800c348 <ethernetif_init+0x4c>)
 800c312:	480e      	ldr	r0, [pc, #56]	@ (800c34c <ethernetif_init+0x50>)
 800c314:	f011 f8f2 	bl	801d4fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2273      	movs	r2, #115	@ 0x73
 800c31c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2274      	movs	r2, #116	@ 0x74
 800c324:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a09      	ldr	r2, [pc, #36]	@ (800c350 <ethernetif_init+0x54>)
 800c32c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a08      	ldr	r2, [pc, #32]	@ (800c354 <ethernetif_init+0x58>)
 800c332:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff fc8b 	bl	800bc50 <low_level_init>

  return ERR_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	0801fd8c 	.word	0x0801fd8c
 800c348:	0801fda8 	.word	0x0801fda8
 800c34c:	0801fdb8 	.word	0x0801fdb8
 800c350:	0801a77d 	.word	0x0801a77d
 800c354:	0800c119 	.word	0x0800c119

0800c358 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	4809      	ldr	r0, [pc, #36]	@ (800c38c <pbuf_free_custom+0x34>)
 800c368:	f006 f97a 	bl	8012660 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c36c:	4b08      	ldr	r3, [pc, #32]	@ (800c390 <pbuf_free_custom+0x38>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d107      	bne.n	800c384 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c374:	4b06      	ldr	r3, [pc, #24]	@ (800c390 <pbuf_free_custom+0x38>)
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c37a:	4b06      	ldr	r3, [pc, #24]	@ (800c394 <pbuf_free_custom+0x3c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	f002 fcf0 	bl	800ed64 <osSemaphoreRelease>
  }
}
 800c384:	bf00      	nop
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	08022d90 	.word	0x08022d90
 800c390:	20005288 	.word	0x20005288
 800c394:	20005400 	.word	0x20005400

0800c398 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c39c:	f7f8 f900 	bl	80045a0 <HAL_GetTick>
 800c3a0:	4603      	mov	r3, r0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800c3ac:	4906      	ldr	r1, [pc, #24]	@ (800c3c8 <PHY_IO_Init+0x20>)
 800c3ae:	4807      	ldr	r0, [pc, #28]	@ (800c3cc <PHY_IO_Init+0x24>)
 800c3b0:	f7ff fa86 	bl	800b8c0 <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800c3b4:	200a      	movs	r0, #10
 800c3b6:	f7f8 f8ff 	bl	80045b8 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800c3ba:	4905      	ldr	r1, [pc, #20]	@ (800c3d0 <PHY_IO_Init+0x28>)
 800c3bc:	4803      	ldr	r0, [pc, #12]	@ (800c3cc <PHY_IO_Init+0x24>)
 800c3be:	f7ff fa7f 	bl	800b8c0 <cdc_debug_log>
  return 0;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	0801fde0 	.word	0x0801fde0
 800c3cc:	0801fe1c 	.word	0x0801fe1c
 800c3d0:	0801fe24 	.word	0x0801fe24

0800c3d4 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800c3d8:	4905      	ldr	r1, [pc, #20]	@ (800c3f0 <PHY_IO_DeInit+0x1c>)
 800c3da:	4806      	ldr	r0, [pc, #24]	@ (800c3f4 <PHY_IO_DeInit+0x20>)
 800c3dc:	f7ff fa70 	bl	800b8c0 <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800c3e0:	4905      	ldr	r1, [pc, #20]	@ (800c3f8 <PHY_IO_DeInit+0x24>)
 800c3e2:	4804      	ldr	r0, [pc, #16]	@ (800c3f4 <PHY_IO_DeInit+0x20>)
 800c3e4:	f7ff fa6c 	bl	800b8c0 <cdc_debug_log>
  return 0;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	0801fe48 	.word	0x0801fe48
 800c3f4:	0801fe1c 	.word	0x0801fe1c
 800c3f8:	0801fe80 	.word	0x0801fe80

0800c3fc <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b096      	sub	sp, #88	@ 0x58
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	68f9      	ldr	r1, [r7, #12]
 800c40e:	480e      	ldr	r0, [pc, #56]	@ (800c448 <PHY_IO_ReadReg+0x4c>)
 800c410:	f7f9 f9a8 	bl	8005764 <HAL_ETH_ReadPHYRegister>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d011      	beq.n	800c43e <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800c41a:	f107 0010 	add.w	r0, r7, #16
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	4a09      	ldr	r2, [pc, #36]	@ (800c44c <PHY_IO_ReadReg+0x50>)
 800c426:	2140      	movs	r1, #64	@ 0x40
 800c428:	f011 f87a 	bl	801d520 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800c42c:	f107 0310 	add.w	r3, r7, #16
 800c430:	4619      	mov	r1, r3
 800c432:	4807      	ldr	r0, [pc, #28]	@ (800c450 <PHY_IO_ReadReg+0x54>)
 800c434:	f7ff fa44 	bl	800b8c0 <cdc_debug_log>
    return -1;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	e000      	b.n	800c440 <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3750      	adds	r7, #80	@ 0x50
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20005408 	.word	0x20005408
 800c44c:	0801fe98 	.word	0x0801fe98
 800c450:	0801fe1c 	.word	0x0801fe1c

0800c454 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b096      	sub	sp, #88	@ 0x58
 800c458:	af02      	add	r7, sp, #8
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	68f9      	ldr	r1, [r7, #12]
 800c466:	480f      	ldr	r0, [pc, #60]	@ (800c4a4 <PHY_IO_WriteReg+0x50>)
 800c468:	f7f9 f9c7 	bl	80057fa <HAL_ETH_WritePHYRegister>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d013      	beq.n	800c49a <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800c472:	f107 0010 	add.w	r0, r7, #16
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4a09      	ldr	r2, [pc, #36]	@ (800c4a8 <PHY_IO_WriteReg+0x54>)
 800c482:	2140      	movs	r1, #64	@ 0x40
 800c484:	f011 f84c 	bl	801d520 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800c488:	f107 0310 	add.w	r3, r7, #16
 800c48c:	4619      	mov	r1, r3
 800c48e:	4807      	ldr	r0, [pc, #28]	@ (800c4ac <PHY_IO_WriteReg+0x58>)
 800c490:	f7ff fa16 	bl	800b8c0 <cdc_debug_log>
    return -1;
 800c494:	f04f 33ff 	mov.w	r3, #4294967295
 800c498:	e000      	b.n	800c49c <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3750      	adds	r7, #80	@ 0x50
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20005408 	.word	0x20005408
 800c4a8:	0801fec0 	.word	0x0801fec0
 800c4ac:	0801fe1c 	.word	0x0801fe1c

0800c4b0 <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c4b4:	f7f8 f874 	bl	80045a0 <HAL_GetTick>
 800c4b8:	4603      	mov	r3, r0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b0b0      	sub	sp, #192	@ 0xc0
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800c4e0:	49be      	ldr	r1, [pc, #760]	@ (800c7dc <ethernet_link_thread+0x31c>)
 800c4e2:	48bf      	ldr	r0, [pc, #764]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c4e4:	f7ff f9ec 	bl	800b8c0 <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800c4e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800c4f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c4f6:	4bbb      	ldr	r3, [pc, #748]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c4f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c4fc:	091b      	lsrs	r3, r3, #4
 800c4fe:	2132      	movs	r1, #50	@ 0x32
 800c500:	fb01 f303 	mul.w	r3, r1, r3
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10d      	bne.n	800c526 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800c50a:	f107 0008 	add.w	r0, r7, #8
 800c50e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c512:	4ab5      	ldr	r2, [pc, #724]	@ (800c7e8 <ethernet_link_thread+0x328>)
 800c514:	2120      	movs	r1, #32
 800c516:	f011 f803 	bl	801d520 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800c51a:	f107 0308 	add.w	r3, r7, #8
 800c51e:	4619      	mov	r1, r3
 800c520:	48af      	ldr	r0, [pc, #700]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c522:	f7ff f9cd 	bl	800b8c0 <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800c526:	48b1      	ldr	r0, [pc, #708]	@ (800c7ec <ethernet_link_thread+0x32c>)
 800c528:	f7f7 ffbe 	bl	80044a8 <eth_chip_get_link_state>
 800c52c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800c530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c534:	f113 0f05 	cmn.w	r3, #5
 800c538:	f000 8111 	beq.w	800c75e <ethernet_link_thread+0x29e>
 800c53c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c540:	2b01      	cmp	r3, #1
 800c542:	f000 810c 	beq.w	800c75e <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800c546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c54a:	3b02      	subs	r3, #2
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	d874      	bhi.n	800c63a <ethernet_link_thread+0x17a>
 800c550:	a201      	add	r2, pc, #4	@ (adr r2, 800c558 <ethernet_link_thread+0x98>)
 800c552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c556:	bf00      	nop
 800c558:	0800c56d 	.word	0x0800c56d
 800c55c:	0800c595 	.word	0x0800c595
 800c560:	0800c5bd 	.word	0x0800c5bd
 800c564:	0800c5e5 	.word	0x0800c5e5
 800c568:	0800c60d 	.word	0x0800c60d
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800c56c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c570:	4b9c      	ldr	r3, [pc, #624]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c572:	fba3 1302 	umull	r1, r3, r3, r2
 800c576:	091b      	lsrs	r3, r3, #4
 800c578:	2132      	movs	r1, #50	@ 0x32
 800c57a:	fb01 f303 	mul.w	r3, r1, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d103      	bne.n	800c58c <ethernet_link_thread+0xcc>
 800c584:	499a      	ldr	r1, [pc, #616]	@ (800c7f0 <ethernet_link_thread+0x330>)
 800c586:	4896      	ldr	r0, [pc, #600]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c588:	f7ff f99a 	bl	800b8c0 <cdc_debug_log>
          linkup = 1;
 800c58c:	2301      	movs	r3, #1
 800c58e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c592:	e066      	b.n	800c662 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800c594:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c598:	4b92      	ldr	r3, [pc, #584]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c59a:	fba3 1302 	umull	r1, r3, r3, r2
 800c59e:	091b      	lsrs	r3, r3, #4
 800c5a0:	2132      	movs	r1, #50	@ 0x32
 800c5a2:	fb01 f303 	mul.w	r3, r1, r3
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <ethernet_link_thread+0xf4>
 800c5ac:	4991      	ldr	r1, [pc, #580]	@ (800c7f4 <ethernet_link_thread+0x334>)
 800c5ae:	488c      	ldr	r0, [pc, #560]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c5b0:	f7ff f986 	bl	800b8c0 <cdc_debug_log>
          linkup = 1;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c5ba:	e052      	b.n	800c662 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800c5bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5c0:	4b88      	ldr	r3, [pc, #544]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c5c2:	fba3 1302 	umull	r1, r3, r3, r2
 800c5c6:	091b      	lsrs	r3, r3, #4
 800c5c8:	2132      	movs	r1, #50	@ 0x32
 800c5ca:	fb01 f303 	mul.w	r3, r1, r3
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d103      	bne.n	800c5dc <ethernet_link_thread+0x11c>
 800c5d4:	4988      	ldr	r1, [pc, #544]	@ (800c7f8 <ethernet_link_thread+0x338>)
 800c5d6:	4882      	ldr	r0, [pc, #520]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c5d8:	f7ff f972 	bl	800b8c0 <cdc_debug_log>
          linkup = 1;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c5e2:	e03e      	b.n	800c662 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800c5e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5e8:	4b7e      	ldr	r3, [pc, #504]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c5ea:	fba3 1302 	umull	r1, r3, r3, r2
 800c5ee:	091b      	lsrs	r3, r3, #4
 800c5f0:	2132      	movs	r1, #50	@ 0x32
 800c5f2:	fb01 f303 	mul.w	r3, r1, r3
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d103      	bne.n	800c604 <ethernet_link_thread+0x144>
 800c5fc:	497f      	ldr	r1, [pc, #508]	@ (800c7fc <ethernet_link_thread+0x33c>)
 800c5fe:	4878      	ldr	r0, [pc, #480]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c600:	f7ff f95e 	bl	800b8c0 <cdc_debug_log>
          linkup = 1;
 800c604:	2301      	movs	r3, #1
 800c606:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c60a:	e02a      	b.n	800c662 <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800c60c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c610:	4b74      	ldr	r3, [pc, #464]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c612:	fba3 1302 	umull	r1, r3, r3, r2
 800c616:	091b      	lsrs	r3, r3, #4
 800c618:	2132      	movs	r1, #50	@ 0x32
 800c61a:	fb01 f303 	mul.w	r3, r1, r3
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800c624:	4976      	ldr	r1, [pc, #472]	@ (800c800 <ethernet_link_thread+0x340>)
 800c626:	486e      	ldr	r0, [pc, #440]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c628:	f7ff f94a 	bl	800b8c0 <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800c62c:	486f      	ldr	r0, [pc, #444]	@ (800c7ec <ethernet_link_thread+0x32c>)
 800c62e:	f7f7 ff0e 	bl	800444e <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c638:	e013      	b.n	800c662 <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800c63a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c63e:	4b69      	ldr	r3, [pc, #420]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c640:	fba3 1302 	umull	r1, r3, r3, r2
 800c644:	091b      	lsrs	r3, r3, #4
 800c646:	2132      	movs	r1, #50	@ 0x32
 800c648:	fb01 f303 	mul.w	r3, r1, r3
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <ethernet_link_thread+0x19a>
 800c652:	496c      	ldr	r1, [pc, #432]	@ (800c804 <ethernet_link_thread+0x344>)
 800c654:	4862      	ldr	r0, [pc, #392]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c656:	f7ff f933 	bl	800b8c0 <cdc_debug_log>
          linkup = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c660:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800c662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 8113 	beq.w	800c892 <ethernet_link_thread+0x3d2>
 800c66c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c670:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f040 810a 	bne.w	800c892 <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800c67e:	4962      	ldr	r1, [pc, #392]	@ (800c808 <ethernet_link_thread+0x348>)
 800c680:	4857      	ldr	r0, [pc, #348]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c682:	f7ff f91d 	bl	800b8c0 <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800c686:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c68a:	4619      	mov	r1, r3
 800c68c:	485f      	ldr	r0, [pc, #380]	@ (800c80c <ethernet_link_thread+0x34c>)
 800c68e:	f7f9 f8fd 	bl	800588c <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800c692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c696:	3b02      	subs	r3, #2
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d833      	bhi.n	800c704 <ethernet_link_thread+0x244>
 800c69c:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a4 <ethernet_link_thread+0x1e4>)
 800c69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a2:	bf00      	nop
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6cb 	.word	0x0800c6cb
 800c6ac:	0800c6df 	.word	0x0800c6df
 800c6b0:	0800c6f3 	.word	0x0800c6f3
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c6b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6b8:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800c6ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c6be:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800c6c0:	4953      	ldr	r1, [pc, #332]	@ (800c810 <ethernet_link_thread+0x350>)
 800c6c2:	4847      	ldr	r0, [pc, #284]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c6c4:	f7ff f8fc 	bl	800b8c0 <cdc_debug_log>
            break;
 800c6c8:	e01c      	b.n	800c704 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800c6ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c6d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800c6d4:	494f      	ldr	r1, [pc, #316]	@ (800c814 <ethernet_link_thread+0x354>)
 800c6d6:	4842      	ldr	r0, [pc, #264]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c6d8:	f7ff f8f2 	bl	800b8c0 <cdc_debug_log>
            break;
 800c6dc:	e012      	b.n	800c704 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c6de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6e2:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800c6e8:	494b      	ldr	r1, [pc, #300]	@ (800c818 <ethernet_link_thread+0x358>)
 800c6ea:	483d      	ldr	r0, [pc, #244]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c6ec:	f7ff f8e8 	bl	800b8c0 <cdc_debug_log>
            break;
 800c6f0:	e008      	b.n	800c704 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800c6fa:	4948      	ldr	r1, [pc, #288]	@ (800c81c <ethernet_link_thread+0x35c>)
 800c6fc:	4838      	ldr	r0, [pc, #224]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c6fe:	f7ff f8df 	bl	800b8c0 <cdc_debug_log>
            break;
 800c702:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800c704:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c708:	4619      	mov	r1, r3
 800c70a:	4840      	ldr	r0, [pc, #256]	@ (800c80c <ethernet_link_thread+0x34c>)
 800c70c:	f7f9 f9b5 	bl	8005a7a <HAL_ETH_SetMACConfig>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d004      	beq.n	800c720 <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800c716:	4942      	ldr	r1, [pc, #264]	@ (800c820 <ethernet_link_thread+0x360>)
 800c718:	4831      	ldr	r0, [pc, #196]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c71a:	f7ff f8d1 	bl	800b8c0 <cdc_debug_log>
 800c71e:	e003      	b.n	800c728 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800c720:	4940      	ldr	r1, [pc, #256]	@ (800c824 <ethernet_link_thread+0x364>)
 800c722:	482f      	ldr	r0, [pc, #188]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c724:	f7ff f8cc 	bl	800b8c0 <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800c728:	4838      	ldr	r0, [pc, #224]	@ (800c80c <ethernet_link_thread+0x34c>)
 800c72a:	f7f8 fc63 	bl	8004ff4 <HAL_ETH_Start_IT>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800c734:	493c      	ldr	r1, [pc, #240]	@ (800c828 <ethernet_link_thread+0x368>)
 800c736:	482a      	ldr	r0, [pc, #168]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c738:	f7ff f8c2 	bl	800b8c0 <cdc_debug_log>
 800c73c:	e003      	b.n	800c746 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800c73e:	493b      	ldr	r1, [pc, #236]	@ (800c82c <ethernet_link_thread+0x36c>)
 800c740:	4827      	ldr	r0, [pc, #156]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c742:	f7ff f8bd 	bl	800b8c0 <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800c746:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800c74a:	f006 fa0d 	bl	8012b68 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800c74e:	4938      	ldr	r1, [pc, #224]	@ (800c830 <ethernet_link_thread+0x370>)
 800c750:	4823      	ldr	r0, [pc, #140]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c752:	f7ff f8b5 	bl	800b8c0 <cdc_debug_log>
        linkchanged = 1;
 800c756:	2301      	movs	r3, #1
 800c758:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800c75c:	e099      	b.n	800c892 <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800c75e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c762:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c766:	089b      	lsrs	r3, r3, #2
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d01e      	beq.n	800c7b0 <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800c772:	4930      	ldr	r1, [pc, #192]	@ (800c834 <ethernet_link_thread+0x374>)
 800c774:	481a      	ldr	r0, [pc, #104]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c776:	f7ff f8a3 	bl	800b8c0 <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800c77a:	4824      	ldr	r0, [pc, #144]	@ (800c80c <ethernet_link_thread+0x34c>)
 800c77c:	f7f8 fcaa 	bl	80050d4 <HAL_ETH_Stop_IT>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d004      	beq.n	800c790 <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800c786:	492c      	ldr	r1, [pc, #176]	@ (800c838 <ethernet_link_thread+0x378>)
 800c788:	4815      	ldr	r0, [pc, #84]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c78a:	f7ff f899 	bl	800b8c0 <cdc_debug_log>
 800c78e:	e003      	b.n	800c798 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800c790:	492a      	ldr	r1, [pc, #168]	@ (800c83c <ethernet_link_thread+0x37c>)
 800c792:	4813      	ldr	r0, [pc, #76]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c794:	f7ff f894 	bl	800b8c0 <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800c798:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800c79c:	f006 fa18 	bl	8012bd0 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800c7a0:	4927      	ldr	r1, [pc, #156]	@ (800c840 <ethernet_link_thread+0x380>)
 800c7a2:	480f      	ldr	r0, [pc, #60]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c7a4:	f7ff f88c 	bl	800b8c0 <cdc_debug_log>
        linkchanged = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c7ae:	e06c      	b.n	800c88a <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800c7b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e4 <ethernet_link_thread+0x324>)
 800c7b6:	fba3 1302 	umull	r1, r3, r3, r2
 800c7ba:	091b      	lsrs	r3, r3, #4
 800c7bc:	2132      	movs	r1, #50	@ 0x32
 800c7be:	fb01 f303 	mul.w	r3, r1, r3
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d160      	bne.n	800c88a <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800c7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7cc:	f113 0f05 	cmn.w	r3, #5
 800c7d0:	d13a      	bne.n	800c848 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800c7d2:	491c      	ldr	r1, [pc, #112]	@ (800c844 <ethernet_link_thread+0x384>)
 800c7d4:	4802      	ldr	r0, [pc, #8]	@ (800c7e0 <ethernet_link_thread+0x320>)
 800c7d6:	f7ff f873 	bl	800b8c0 <cdc_debug_log>
 800c7da:	e056      	b.n	800c88a <ethernet_link_thread+0x3ca>
 800c7dc:	0801fef4 	.word	0x0801fef4
 800c7e0:	0801ff18 	.word	0x0801ff18
 800c7e4:	51eb851f 	.word	0x51eb851f
 800c7e8:	0801ff24 	.word	0x0801ff24
 800c7ec:	200053cc 	.word	0x200053cc
 800c7f0:	0801ff34 	.word	0x0801ff34
 800c7f4:	0801ff4c 	.word	0x0801ff4c
 800c7f8:	0801ff64 	.word	0x0801ff64
 800c7fc:	0801ff7c 	.word	0x0801ff7c
 800c800:	0801ff94 	.word	0x0801ff94
 800c804:	0801ffc0 	.word	0x0801ffc0
 800c808:	0801ffd4 	.word	0x0801ffd4
 800c80c:	20005408 	.word	0x20005408
 800c810:	08020000 	.word	0x08020000
 800c814:	08020020 	.word	0x08020020
 800c818:	08020040 	.word	0x08020040
 800c81c:	08020060 	.word	0x08020060
 800c820:	08020080 	.word	0x08020080
 800c824:	080200a0 	.word	0x080200a0
 800c828:	080200c8 	.word	0x080200c8
 800c82c:	080200dc 	.word	0x080200dc
 800c830:	080200f8 	.word	0x080200f8
 800c834:	0802011c 	.word	0x0802011c
 800c838:	08020144 	.word	0x08020144
 800c83c:	08020158 	.word	0x08020158
 800c840:	08020174 	.word	0x08020174
 800c844:	08020198 	.word	0x08020198
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800c848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10e      	bne.n	800c86e <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800c850:	4926      	ldr	r1, [pc, #152]	@ (800c8ec <ethernet_link_thread+0x42c>)
 800c852:	4827      	ldr	r0, [pc, #156]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c854:	f7ff f834 	bl	800b8c0 <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800c858:	4826      	ldr	r0, [pc, #152]	@ (800c8f4 <ethernet_link_thread+0x434>)
 800c85a:	f7f7 fdf8 	bl	800444e <eth_chip_start_auto_nego>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d112      	bne.n	800c88a <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800c864:	4924      	ldr	r1, [pc, #144]	@ (800c8f8 <ethernet_link_thread+0x438>)
 800c866:	4822      	ldr	r0, [pc, #136]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c868:	f7ff f82a 	bl	800b8c0 <cdc_debug_log>
 800c86c:	e00d      	b.n	800c88a <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800c86e:	f107 0008 	add.w	r0, r7, #8
 800c872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c876:	4a21      	ldr	r2, [pc, #132]	@ (800c8fc <ethernet_link_thread+0x43c>)
 800c878:	2140      	movs	r1, #64	@ 0x40
 800c87a:	f010 fe51 	bl	801d520 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4619      	mov	r1, r3
 800c884:	481a      	ldr	r0, [pc, #104]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c886:	f7ff f81b 	bl	800b8c0 <cdc_debug_log>
        }
      }
      linkup = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c890:	e000      	b.n	800c894 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800c892:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800c894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00c      	beq.n	800c8b6 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800c8a2:	4917      	ldr	r1, [pc, #92]	@ (800c900 <ethernet_link_thread+0x440>)
 800c8a4:	4812      	ldr	r0, [pc, #72]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c8a6:	f7ff f80b 	bl	800b8c0 <cdc_debug_log>
      debug_eth_dma_registers();
 800c8aa:	f7ff f8f5 	bl	800ba98 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800c8ae:	4915      	ldr	r1, [pc, #84]	@ (800c904 <ethernet_link_thread+0x444>)
 800c8b0:	480f      	ldr	r0, [pc, #60]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c8b2:	f7ff f805 	bl	800b8c0 <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800c8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8ba:	4b13      	ldr	r3, [pc, #76]	@ (800c908 <ethernet_link_thread+0x448>)
 800c8bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c8c0:	095b      	lsrs	r3, r3, #5
 800c8c2:	2164      	movs	r1, #100	@ 0x64
 800c8c4:	fb01 f303 	mul.w	r3, r1, r3
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d109      	bne.n	800c8e2 <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800c8ce:	490f      	ldr	r1, [pc, #60]	@ (800c90c <ethernet_link_thread+0x44c>)
 800c8d0:	4807      	ldr	r0, [pc, #28]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c8d2:	f7fe fff5 	bl	800b8c0 <cdc_debug_log>
      debug_eth_dma_registers();
 800c8d6:	f7ff f8df 	bl	800ba98 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800c8da:	490d      	ldr	r1, [pc, #52]	@ (800c910 <ethernet_link_thread+0x450>)
 800c8dc:	4804      	ldr	r0, [pc, #16]	@ (800c8f0 <ethernet_link_thread+0x430>)
 800c8de:	f7fe ffef 	bl	800b8c0 <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c8e2:	2064      	movs	r0, #100	@ 0x64
 800c8e4:	f002 f90e 	bl	800eb04 <osDelay>
    link_check_counter++;
 800c8e8:	e5fe      	b.n	800c4e8 <ethernet_link_thread+0x28>
 800c8ea:	bf00      	nop
 800c8ec:	080201b0 	.word	0x080201b0
 800c8f0:	0801ff18 	.word	0x0801ff18
 800c8f4:	200053cc 	.word	0x200053cc
 800c8f8:	080201dc 	.word	0x080201dc
 800c8fc:	080201f8 	.word	0x080201f8
 800c900:	08020210 	.word	0x08020210
 800c904:	08020238 	.word	0x08020238
 800c908:	51eb851f 	.word	0x51eb851f
 800c90c:	08020254 	.word	0x08020254
 800c910:	08020278 	.word	0x08020278

0800c914 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af02      	add	r7, sp, #8
 800c91a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c91c:	4812      	ldr	r0, [pc, #72]	@ (800c968 <HAL_ETH_RxAllocateCallback+0x54>)
 800c91e:	f005 fe2b 	bl	8012578 <memp_malloc_pool>
 800c922:	60f8      	str	r0, [r7, #12]
  if (p)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d014      	beq.n	800c954 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f103 0220 	add.w	r2, r3, #32
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4a0d      	ldr	r2, [pc, #52]	@ (800c96c <HAL_ETH_RxAllocateCallback+0x58>)
 800c938:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c942:	9201      	str	r2, [sp, #4]
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2241      	movs	r2, #65	@ 0x41
 800c94a:	2100      	movs	r1, #0
 800c94c:	2000      	movs	r0, #0
 800c94e:	f006 fb63 	bl	8013018 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c952:	e005      	b.n	800c960 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c954:	4b06      	ldr	r3, [pc, #24]	@ (800c970 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c956:	2201      	movs	r2, #1
 800c958:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]
}
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	08022d90 	.word	0x08022d90
 800c96c:	0800c359 	.word	0x0800c359
 800c970:	20005288 	.word	0x20005288

0800c974 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c974:	b480      	push	{r7}
 800c976:	b089      	sub	sp, #36	@ 0x24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3b20      	subs	r3, #32
 800c992:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	2200      	movs	r2, #0
 800c99e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	887a      	ldrh	r2, [r7, #2]
 800c9a4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d103      	bne.n	800c9b6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	69fa      	ldr	r2, [r7, #28]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e003      	b.n	800c9be <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	69fa      	ldr	r2, [r7, #28]
 800c9c2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	61fb      	str	r3, [r7, #28]
 800c9ca:	e009      	b.n	800c9e0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	891a      	ldrh	r2, [r3, #8]
 800c9d0:	887b      	ldrh	r3, [r7, #2]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	61fb      	str	r3, [r7, #28]
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1f2      	bne.n	800c9cc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c9e6:	bf00      	nop
 800c9e8:	bf00      	nop
 800c9ea:	3724      	adds	r7, #36	@ 0x24
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f006 fcc5 	bl	801338c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ca1c:	f010 fba2 	bl	801d164 <USBD_static_malloc>
 800ca20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d109      	bne.n	800ca3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	32b0      	adds	r2, #176	@ 0xb0
 800ca32:	2100      	movs	r1, #0
 800ca34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca38:	2302      	movs	r3, #2
 800ca3a:	e0d4      	b.n	800cbe6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca3c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ca40:	2100      	movs	r1, #0
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f010 fe0f 	bl	801d666 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	32b0      	adds	r2, #176	@ 0xb0
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	32b0      	adds	r2, #176	@ 0xb0
 800ca62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7c1b      	ldrb	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d138      	bne.n	800cae6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca74:	4b5e      	ldr	r3, [pc, #376]	@ (800cbf0 <USBD_CDC_Init+0x1e4>)
 800ca76:	7819      	ldrb	r1, [r3, #0]
 800ca78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f010 fa4d 	bl	801cf1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca84:	4b5a      	ldr	r3, [pc, #360]	@ (800cbf0 <USBD_CDC_Init+0x1e4>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	f003 020f 	and.w	r2, r3, #15
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	440b      	add	r3, r1
 800ca98:	3323      	adds	r3, #35	@ 0x23
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca9e:	4b55      	ldr	r3, [pc, #340]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800caa0:	7819      	ldrb	r1, [r3, #0]
 800caa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800caa6:	2202      	movs	r2, #2
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f010 fa38 	bl	801cf1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800caae:	4b51      	ldr	r3, [pc, #324]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	f003 020f 	and.w	r2, r3, #15
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	4613      	mov	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	440b      	add	r3, r1
 800cac2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cac6:	2201      	movs	r2, #1
 800cac8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800caca:	4b4b      	ldr	r3, [pc, #300]	@ (800cbf8 <USBD_CDC_Init+0x1ec>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	f003 020f 	and.w	r2, r3, #15
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	440b      	add	r3, r1
 800cade:	331c      	adds	r3, #28
 800cae0:	2210      	movs	r2, #16
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	e035      	b.n	800cb52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cae6:	4b42      	ldr	r3, [pc, #264]	@ (800cbf0 <USBD_CDC_Init+0x1e4>)
 800cae8:	7819      	ldrb	r1, [r3, #0]
 800caea:	2340      	movs	r3, #64	@ 0x40
 800caec:	2202      	movs	r2, #2
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f010 fa15 	bl	801cf1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800caf4:	4b3e      	ldr	r3, [pc, #248]	@ (800cbf0 <USBD_CDC_Init+0x1e4>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 020f 	and.w	r2, r3, #15
 800cafc:	6879      	ldr	r1, [r7, #4]
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	440b      	add	r3, r1
 800cb08:	3323      	adds	r3, #35	@ 0x23
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb0e:	4b39      	ldr	r3, [pc, #228]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800cb10:	7819      	ldrb	r1, [r3, #0]
 800cb12:	2340      	movs	r3, #64	@ 0x40
 800cb14:	2202      	movs	r2, #2
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f010 fa01 	bl	801cf1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb1c:	4b35      	ldr	r3, [pc, #212]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 020f 	and.w	r2, r3, #15
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	440b      	add	r3, r1
 800cb30:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cb34:	2201      	movs	r2, #1
 800cb36:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb38:	4b2f      	ldr	r3, [pc, #188]	@ (800cbf8 <USBD_CDC_Init+0x1ec>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f003 020f 	and.w	r2, r3, #15
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	4613      	mov	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	440b      	add	r3, r1
 800cb4c:	331c      	adds	r3, #28
 800cb4e:	2210      	movs	r2, #16
 800cb50:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb52:	4b29      	ldr	r3, [pc, #164]	@ (800cbf8 <USBD_CDC_Init+0x1ec>)
 800cb54:	7819      	ldrb	r1, [r3, #0]
 800cb56:	2308      	movs	r3, #8
 800cb58:	2203      	movs	r2, #3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f010 f9df 	bl	801cf1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb60:	4b25      	ldr	r3, [pc, #148]	@ (800cbf8 <USBD_CDC_Init+0x1ec>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	f003 020f 	and.w	r2, r3, #15
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	3323      	adds	r3, #35	@ 0x23
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	33b0      	adds	r3, #176	@ 0xb0
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e018      	b.n	800cbe6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7c1b      	ldrb	r3, [r3, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800cbbe:	7819      	ldrb	r1, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cbc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f010 fa96 	bl	801d0fc <USBD_LL_PrepareReceive>
 800cbd0:	e008      	b.n	800cbe4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbd2:	4b08      	ldr	r3, [pc, #32]	@ (800cbf4 <USBD_CDC_Init+0x1e8>)
 800cbd4:	7819      	ldrb	r1, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cbdc:	2340      	movs	r3, #64	@ 0x40
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f010 fa8c 	bl	801d0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000093 	.word	0x20000093
 800cbf4:	20000094 	.word	0x20000094
 800cbf8:	20000095 	.word	0x20000095

0800cbfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cc08:	4b3a      	ldr	r3, [pc, #232]	@ (800ccf4 <USBD_CDC_DeInit+0xf8>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f010 f9ab 	bl	801cf6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc14:	4b37      	ldr	r3, [pc, #220]	@ (800ccf4 <USBD_CDC_DeInit+0xf8>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 020f 	and.w	r2, r3, #15
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	4413      	add	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	440b      	add	r3, r1
 800cc28:	3323      	adds	r3, #35	@ 0x23
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc2e:	4b32      	ldr	r3, [pc, #200]	@ (800ccf8 <USBD_CDC_DeInit+0xfc>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f010 f998 	bl	801cf6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800ccf8 <USBD_CDC_DeInit+0xfc>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	f003 020f 	and.w	r2, r3, #15
 800cc42:	6879      	ldr	r1, [r7, #4]
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	440b      	add	r3, r1
 800cc4e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc56:	4b29      	ldr	r3, [pc, #164]	@ (800ccfc <USBD_CDC_DeInit+0x100>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f010 f984 	bl	801cf6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc62:	4b26      	ldr	r3, [pc, #152]	@ (800ccfc <USBD_CDC_DeInit+0x100>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f003 020f 	and.w	r2, r3, #15
 800cc6a:	6879      	ldr	r1, [r7, #4]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	440b      	add	r3, r1
 800cc76:	3323      	adds	r3, #35	@ 0x23
 800cc78:	2200      	movs	r2, #0
 800cc7a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc7c:	4b1f      	ldr	r3, [pc, #124]	@ (800ccfc <USBD_CDC_DeInit+0x100>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 020f 	and.w	r2, r3, #15
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	4613      	mov	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	440b      	add	r3, r1
 800cc90:	331c      	adds	r3, #28
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	32b0      	adds	r2, #176	@ 0xb0
 800cca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d01f      	beq.n	800cce8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	33b0      	adds	r3, #176	@ 0xb0
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	32b0      	adds	r2, #176	@ 0xb0
 800ccc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f010 fa58 	bl	801d180 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	32b0      	adds	r2, #176	@ 0xb0
 800ccda:	2100      	movs	r1, #0
 800ccdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20000093 	.word	0x20000093
 800ccf8:	20000094 	.word	0x20000094
 800ccfc:	20000095 	.word	0x20000095

0800cd00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	32b0      	adds	r2, #176	@ 0xb0
 800cd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e0bf      	b.n	800ceb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d050      	beq.n	800cdde <USBD_CDC_Setup+0xde>
 800cd3c:	2b20      	cmp	r3, #32
 800cd3e:	f040 80af 	bne.w	800cea0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	88db      	ldrh	r3, [r3, #6]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d03a      	beq.n	800cdc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	b25b      	sxtb	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	da1b      	bge.n	800cd8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	33b0      	adds	r3, #176	@ 0xb0
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	88d2      	ldrh	r2, [r2, #6]
 800cd70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	88db      	ldrh	r3, [r3, #6]
 800cd76:	2b07      	cmp	r3, #7
 800cd78:	bf28      	it	cs
 800cd7a:	2307      	movcs	r3, #7
 800cd7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	89fa      	ldrh	r2, [r7, #14]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f001 fda9 	bl	800e8dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd8a:	e090      	b.n	800ceae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	785a      	ldrb	r2, [r3, #1]
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	88db      	ldrh	r3, [r3, #6]
 800cd9a:	2b3f      	cmp	r3, #63	@ 0x3f
 800cd9c:	d803      	bhi.n	800cda6 <USBD_CDC_Setup+0xa6>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	88db      	ldrh	r3, [r3, #6]
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	e000      	b.n	800cda8 <USBD_CDC_Setup+0xa8>
 800cda6:	2240      	movs	r2, #64	@ 0x40
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cdae:	6939      	ldr	r1, [r7, #16]
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f001 fdbe 	bl	800e93a <USBD_CtlPrepareRx>
      break;
 800cdbe:	e076      	b.n	800ceae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	33b0      	adds	r3, #176	@ 0xb0
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	7850      	ldrb	r0, [r2, #1]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	4798      	blx	r3
      break;
 800cddc:	e067      	b.n	800ceae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	785b      	ldrb	r3, [r3, #1]
 800cde2:	2b0b      	cmp	r3, #11
 800cde4:	d851      	bhi.n	800ce8a <USBD_CDC_Setup+0x18a>
 800cde6:	a201      	add	r2, pc, #4	@ (adr r2, 800cdec <USBD_CDC_Setup+0xec>)
 800cde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdec:	0800ce1d 	.word	0x0800ce1d
 800cdf0:	0800ce99 	.word	0x0800ce99
 800cdf4:	0800ce8b 	.word	0x0800ce8b
 800cdf8:	0800ce8b 	.word	0x0800ce8b
 800cdfc:	0800ce8b 	.word	0x0800ce8b
 800ce00:	0800ce8b 	.word	0x0800ce8b
 800ce04:	0800ce8b 	.word	0x0800ce8b
 800ce08:	0800ce8b 	.word	0x0800ce8b
 800ce0c:	0800ce8b 	.word	0x0800ce8b
 800ce10:	0800ce8b 	.word	0x0800ce8b
 800ce14:	0800ce47 	.word	0x0800ce47
 800ce18:	0800ce71 	.word	0x0800ce71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d107      	bne.n	800ce38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce28:	f107 030a 	add.w	r3, r7, #10
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 fd53 	bl	800e8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce36:	e032      	b.n	800ce9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 fcd1 	bl	800e7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce40:	2303      	movs	r3, #3
 800ce42:	75fb      	strb	r3, [r7, #23]
          break;
 800ce44:	e02b      	b.n	800ce9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d107      	bne.n	800ce62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce52:	f107 030d 	add.w	r3, r7, #13
 800ce56:	2201      	movs	r2, #1
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 fd3e 	bl	800e8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce60:	e01d      	b.n	800ce9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 fcbc 	bl	800e7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ce6e:	e016      	b.n	800ce9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d00f      	beq.n	800ce9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fcaf 	bl	800e7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce88:	e008      	b.n	800ce9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fca8 	bl	800e7e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	75fb      	strb	r3, [r7, #23]
          break;
 800ce96:	e002      	b.n	800ce9e <USBD_CDC_Setup+0x19e>
          break;
 800ce98:	bf00      	nop
 800ce9a:	e008      	b.n	800ceae <USBD_CDC_Setup+0x1ae>
          break;
 800ce9c:	bf00      	nop
      }
      break;
 800ce9e:	e006      	b.n	800ceae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f001 fc9d 	bl	800e7e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	75fb      	strb	r3, [r7, #23]
      break;
 800ceac:	bf00      	nop
  }

  return (uint8_t)ret;
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	32b0      	adds	r2, #176	@ 0xb0
 800ced6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cede:	2303      	movs	r3, #3
 800cee0:	e065      	b.n	800cfae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	32b0      	adds	r2, #176	@ 0xb0
 800ceec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cef2:	78fb      	ldrb	r3, [r7, #3]
 800cef4:	f003 020f 	and.w	r2, r3, #15
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	440b      	add	r3, r1
 800cf04:	3314      	adds	r3, #20
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d02f      	beq.n	800cf6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	f003 020f 	and.w	r2, r3, #15
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	4613      	mov	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	440b      	add	r3, r1
 800cf1e:	3314      	adds	r3, #20
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	f003 010f 	and.w	r1, r3, #15
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	440b      	add	r3, r1
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4403      	add	r3, r0
 800cf34:	331c      	adds	r3, #28
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf3c:	fb01 f303 	mul.w	r3, r1, r3
 800cf40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d112      	bne.n	800cf6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	f003 020f 	and.w	r2, r3, #15
 800cf4c:	6879      	ldr	r1, [r7, #4]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	440b      	add	r3, r1
 800cf58:	3314      	adds	r3, #20
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf5e:	78f9      	ldrb	r1, [r7, #3]
 800cf60:	2300      	movs	r3, #0
 800cf62:	2200      	movs	r2, #0
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f010 f8a8 	bl	801d0ba <USBD_LL_Transmit>
 800cf6a:	e01f      	b.n	800cfac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	33b0      	adds	r3, #176	@ 0xb0
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d010      	beq.n	800cfac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	33b0      	adds	r3, #176	@ 0xb0
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cfa8:	78fa      	ldrb	r2, [r7, #3]
 800cfaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	32b0      	adds	r2, #176	@ 0xb0
 800cfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	32b0      	adds	r2, #176	@ 0xb0
 800cfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e01a      	b.n	800d01e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f010 f8a6 	bl	801d13e <USBD_LL_GetRxDataSize>
 800cff2:	4602      	mov	r2, r0
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	33b0      	adds	r3, #176	@ 0xb0
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d018:	4611      	mov	r1, r2
 800d01a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	32b0      	adds	r2, #176	@ 0xb0
 800d038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d03c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d044:	2303      	movs	r3, #3
 800d046:	e024      	b.n	800d092 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	33b0      	adds	r3, #176	@ 0xb0
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d019      	beq.n	800d090 <USBD_CDC_EP0_RxReady+0x6a>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d062:	2bff      	cmp	r3, #255	@ 0xff
 800d064:	d014      	beq.n	800d090 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	33b0      	adds	r3, #176	@ 0xb0
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d07e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d086:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	22ff      	movs	r2, #255	@ 0xff
 800d08c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0a4:	2182      	movs	r1, #130	@ 0x82
 800d0a6:	4818      	ldr	r0, [pc, #96]	@ (800d108 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0a8:	f000 fd62 	bl	800db70 <USBD_GetEpDesc>
 800d0ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	4815      	ldr	r0, [pc, #84]	@ (800d108 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0b2:	f000 fd5d 	bl	800db70 <USBD_GetEpDesc>
 800d0b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0b8:	2181      	movs	r1, #129	@ 0x81
 800d0ba:	4813      	ldr	r0, [pc, #76]	@ (800d108 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0bc:	f000 fd58 	bl	800db70 <USBD_GetEpDesc>
 800d0c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2210      	movs	r2, #16
 800d0cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0dc:	711a      	strb	r2, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d006      	beq.n	800d0f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0f0:	711a      	strb	r2, [r3, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2243      	movs	r2, #67	@ 0x43
 800d0fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0fc:	4b02      	ldr	r3, [pc, #8]	@ (800d108 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20000050 	.word	0x20000050

0800d10c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d114:	2182      	movs	r1, #130	@ 0x82
 800d116:	4818      	ldr	r0, [pc, #96]	@ (800d178 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d118:	f000 fd2a 	bl	800db70 <USBD_GetEpDesc>
 800d11c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d11e:	2101      	movs	r1, #1
 800d120:	4815      	ldr	r0, [pc, #84]	@ (800d178 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d122:	f000 fd25 	bl	800db70 <USBD_GetEpDesc>
 800d126:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d128:	2181      	movs	r1, #129	@ 0x81
 800d12a:	4813      	ldr	r0, [pc, #76]	@ (800d178 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d12c:	f000 fd20 	bl	800db70 <USBD_GetEpDesc>
 800d130:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2210      	movs	r2, #16
 800d13c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2200      	movs	r2, #0
 800d148:	711a      	strb	r2, [r3, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f042 0202 	orr.w	r2, r2, #2
 800d150:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d006      	beq.n	800d166 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	711a      	strb	r2, [r3, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f042 0202 	orr.w	r2, r2, #2
 800d164:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2243      	movs	r2, #67	@ 0x43
 800d16a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d16c:	4b02      	ldr	r3, [pc, #8]	@ (800d178 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20000050 	.word	0x20000050

0800d17c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d184:	2182      	movs	r1, #130	@ 0x82
 800d186:	4818      	ldr	r0, [pc, #96]	@ (800d1e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d188:	f000 fcf2 	bl	800db70 <USBD_GetEpDesc>
 800d18c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d18e:	2101      	movs	r1, #1
 800d190:	4815      	ldr	r0, [pc, #84]	@ (800d1e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d192:	f000 fced 	bl	800db70 <USBD_GetEpDesc>
 800d196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d198:	2181      	movs	r1, #129	@ 0x81
 800d19a:	4813      	ldr	r0, [pc, #76]	@ (800d1e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d19c:	f000 fce8 	bl	800db70 <USBD_GetEpDesc>
 800d1a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2210      	movs	r2, #16
 800d1ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1bc:	711a      	strb	r2, [r3, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1d0:	711a      	strb	r2, [r3, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2243      	movs	r2, #67	@ 0x43
 800d1da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1dc:	4b02      	ldr	r3, [pc, #8]	@ (800d1e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000050 	.word	0x20000050

0800d1ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	220a      	movs	r2, #10
 800d1f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d1fa:	4b03      	ldr	r3, [pc, #12]	@ (800d208 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	2000000c 	.word	0x2000000c

0800d20c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e009      	b.n	800d234 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	33b0      	adds	r3, #176	@ 0xb0
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	32b0      	adds	r2, #176	@ 0xb0
 800d256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d262:	2303      	movs	r3, #3
 800d264:	e008      	b.n	800d278 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	371c      	adds	r7, #28
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	32b0      	adds	r2, #176	@ 0xb0
 800d298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d29c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e004      	b.n	800d2b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
	...

0800d2c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	32b0      	adds	r2, #176	@ 0xb0
 800d2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e025      	b.n	800d332 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d11f      	bne.n	800d330 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d2f8:	4b10      	ldr	r3, [pc, #64]	@ (800d33c <USBD_CDC_TransmitPacket+0x7c>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f003 020f 	and.w	r2, r3, #15
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	4613      	mov	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4403      	add	r3, r0
 800d312:	3314      	adds	r3, #20
 800d314:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d316:	4b09      	ldr	r3, [pc, #36]	@ (800d33c <USBD_CDC_TransmitPacket+0x7c>)
 800d318:	7819      	ldrb	r1, [r3, #0]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f00f fec7 	bl	801d0ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d330:	7bfb      	ldrb	r3, [r7, #15]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20000093 	.word	0x20000093

0800d340 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	32b0      	adds	r2, #176	@ 0xb0
 800d352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d356:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	32b0      	adds	r2, #176	@ 0xb0
 800d362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e018      	b.n	800d3a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	7c1b      	ldrb	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d376:	4b0c      	ldr	r3, [pc, #48]	@ (800d3a8 <USBD_CDC_ReceivePacket+0x68>)
 800d378:	7819      	ldrb	r1, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f00f feb9 	bl	801d0fc <USBD_LL_PrepareReceive>
 800d38a:	e008      	b.n	800d39e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d38c:	4b06      	ldr	r3, [pc, #24]	@ (800d3a8 <USBD_CDC_ReceivePacket+0x68>)
 800d38e:	7819      	ldrb	r1, [r3, #0]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d396:	2340      	movs	r3, #64	@ 0x40
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f00f feaf 	bl	801d0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	20000094 	.word	0x20000094

0800d3ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e01f      	b.n	800d404 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	79fa      	ldrb	r2, [r7, #7]
 800d3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f00f fd29 	bl	801ce50 <USBD_LL_Init>
 800d3fe:	4603      	mov	r3, r0
 800d400:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d402:	7dfb      	ldrb	r3, [r7, #23]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d101      	bne.n	800d424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d420:	2303      	movs	r3, #3
 800d422:	e025      	b.n	800d470 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	32ae      	adds	r2, #174	@ 0xae
 800d436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00f      	beq.n	800d460 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	32ae      	adds	r2, #174	@ 0xae
 800d44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	f107 020e 	add.w	r2, r7, #14
 800d454:	4610      	mov	r0, r2
 800d456:	4798      	blx	r3
 800d458:	4602      	mov	r2, r0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d466:	1c5a      	adds	r2, r3, #1
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f00f fd31 	bl	801cee8 <USBD_LL_Start>
 800d486:	4603      	mov	r3, r0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d498:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d009      	beq.n	800d4d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	78fa      	ldrb	r2, [r7, #3]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	4798      	blx	r3
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	78fa      	ldrb	r2, [r7, #3]
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	4798      	blx	r3
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d504:	2303      	movs	r3, #3
 800d506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d508:	7bfb      	ldrb	r3, [r7, #15]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	4618      	mov	r0, r3
 800d526:	f001 f922 	bl	800e76e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d538:	461a      	mov	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d546:	f003 031f 	and.w	r3, r3, #31
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d01a      	beq.n	800d584 <USBD_LL_SetupStage+0x72>
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d822      	bhi.n	800d598 <USBD_LL_SetupStage+0x86>
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <USBD_LL_SetupStage+0x4a>
 800d556:	2b01      	cmp	r3, #1
 800d558:	d00a      	beq.n	800d570 <USBD_LL_SetupStage+0x5e>
 800d55a:	e01d      	b.n	800d598 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fb77 	bl	800dc58 <USBD_StdDevReq>
 800d56a:	4603      	mov	r3, r0
 800d56c:	73fb      	strb	r3, [r7, #15]
      break;
 800d56e:	e020      	b.n	800d5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fbdf 	bl	800dd3c <USBD_StdItfReq>
 800d57e:	4603      	mov	r3, r0
 800d580:	73fb      	strb	r3, [r7, #15]
      break;
 800d582:	e016      	b.n	800d5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fc41 	bl	800de14 <USBD_StdEPReq>
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
      break;
 800d596:	e00c      	b.n	800d5b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d59e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f00f fcfe 	bl	801cfa8 <USBD_LL_StallEP>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d5b0:	bf00      	nop
  }

  return ret;
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d177      	bne.n	800d6c4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d5da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	f040 80a1 	bne.w	800d72a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	8992      	ldrh	r2, [r2, #12]
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d91c      	bls.n	800d62e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	8992      	ldrh	r2, [r2, #12]
 800d5fc:	1a9a      	subs	r2, r3, r2
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	8992      	ldrh	r2, [r2, #12]
 800d60a:	441a      	add	r2, r3
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	6919      	ldr	r1, [r3, #16]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	899b      	ldrh	r3, [r3, #12]
 800d618:	461a      	mov	r2, r3
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	4293      	cmp	r3, r2
 800d620:	bf38      	it	cc
 800d622:	4613      	movcc	r3, r2
 800d624:	461a      	mov	r2, r3
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f001 f9a8 	bl	800e97c <USBD_CtlContinueRx>
 800d62c:	e07d      	b.n	800d72a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d634:	f003 031f 	and.w	r3, r3, #31
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d014      	beq.n	800d666 <USBD_LL_DataOutStage+0xaa>
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d81d      	bhi.n	800d67c <USBD_LL_DataOutStage+0xc0>
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <USBD_LL_DataOutStage+0x8e>
 800d644:	2b01      	cmp	r3, #1
 800d646:	d003      	beq.n	800d650 <USBD_LL_DataOutStage+0x94>
 800d648:	e018      	b.n	800d67c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	75bb      	strb	r3, [r7, #22]
            break;
 800d64e:	e018      	b.n	800d682 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d656:	b2db      	uxtb	r3, r3
 800d658:	4619      	mov	r1, r3
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 fa6e 	bl	800db3c <USBD_CoreFindIF>
 800d660:	4603      	mov	r3, r0
 800d662:	75bb      	strb	r3, [r7, #22]
            break;
 800d664:	e00d      	b.n	800d682 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	4619      	mov	r1, r3
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 fa70 	bl	800db56 <USBD_CoreFindEP>
 800d676:	4603      	mov	r3, r0
 800d678:	75bb      	strb	r3, [r7, #22]
            break;
 800d67a:	e002      	b.n	800d682 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75bb      	strb	r3, [r7, #22]
            break;
 800d680:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d682:	7dbb      	ldrb	r3, [r7, #22]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d119      	bne.n	800d6bc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b03      	cmp	r3, #3
 800d692:	d113      	bne.n	800d6bc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d694:	7dba      	ldrb	r2, [r7, #22]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	32ae      	adds	r2, #174	@ 0xae
 800d69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d6a4:	7dba      	ldrb	r2, [r7, #22]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d6ac:	7dba      	ldrb	r2, [r7, #22]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	32ae      	adds	r2, #174	@ 0xae
 800d6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f001 f96e 	bl	800e99e <USBD_CtlSendStatus>
 800d6c2:	e032      	b.n	800d72a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 fa41 	bl	800db56 <USBD_CoreFindEP>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6d8:	7dbb      	ldrb	r3, [r7, #22]
 800d6da:	2bff      	cmp	r3, #255	@ 0xff
 800d6dc:	d025      	beq.n	800d72a <USBD_LL_DataOutStage+0x16e>
 800d6de:	7dbb      	ldrb	r3, [r7, #22]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d122      	bne.n	800d72a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d117      	bne.n	800d720 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d6f0:	7dba      	ldrb	r2, [r7, #22]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	32ae      	adds	r2, #174	@ 0xae
 800d6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00f      	beq.n	800d720 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d700:	7dba      	ldrb	r2, [r7, #22]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d708:	7dba      	ldrb	r2, [r7, #22]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	32ae      	adds	r2, #174	@ 0xae
 800d70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	7afa      	ldrb	r2, [r7, #11]
 800d716:	4611      	mov	r1, r2
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	4798      	blx	r3
 800d71c:	4603      	mov	r3, r0
 800d71e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d001      	beq.n	800d72a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d726:	7dfb      	ldrb	r3, [r7, #23]
 800d728:	e000      	b.n	800d72c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	460b      	mov	r3, r1
 800d73e:	607a      	str	r2, [r7, #4]
 800d740:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d742:	7afb      	ldrb	r3, [r7, #11]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d178      	bne.n	800d83a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	3314      	adds	r3, #20
 800d74c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d754:	2b02      	cmp	r3, #2
 800d756:	d163      	bne.n	800d820 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	8992      	ldrh	r2, [r2, #12]
 800d760:	4293      	cmp	r3, r2
 800d762:	d91c      	bls.n	800d79e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	693a      	ldr	r2, [r7, #16]
 800d76a:	8992      	ldrh	r2, [r2, #12]
 800d76c:	1a9a      	subs	r2, r3, r2
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	8992      	ldrh	r2, [r2, #12]
 800d77a:	441a      	add	r2, r3
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	6919      	ldr	r1, [r3, #16]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	461a      	mov	r2, r3
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f001 f8c4 	bl	800e918 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d790:	2300      	movs	r3, #0
 800d792:	2200      	movs	r2, #0
 800d794:	2100      	movs	r1, #0
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f00f fcb0 	bl	801d0fc <USBD_LL_PrepareReceive>
 800d79c:	e040      	b.n	800d820 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	899b      	ldrh	r3, [r3, #12]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d11c      	bne.n	800d7e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d316      	bcc.n	800d7e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d20f      	bcs.n	800d7e6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f001 f8a4 	bl	800e918 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2100      	movs	r1, #0
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f00f fc8c 	bl	801d0fc <USBD_LL_PrepareReceive>
 800d7e4:	e01c      	b.n	800d820 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d10f      	bne.n	800d812 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d009      	beq.n	800d812 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d812:	2180      	movs	r1, #128	@ 0x80
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f00f fbc7 	bl	801cfa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f001 f8d2 	bl	800e9c4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d03a      	beq.n	800d8a0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f7ff fe30 	bl	800d490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d838:	e032      	b.n	800d8a0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d83a:	7afb      	ldrb	r3, [r7, #11]
 800d83c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d840:	b2db      	uxtb	r3, r3
 800d842:	4619      	mov	r1, r3
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 f986 	bl	800db56 <USBD_CoreFindEP>
 800d84a:	4603      	mov	r3, r0
 800d84c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
 800d850:	2bff      	cmp	r3, #255	@ 0xff
 800d852:	d025      	beq.n	800d8a0 <USBD_LL_DataInStage+0x16c>
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d122      	bne.n	800d8a0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b03      	cmp	r3, #3
 800d864:	d11c      	bne.n	800d8a0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d866:	7dfa      	ldrb	r2, [r7, #23]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	32ae      	adds	r2, #174	@ 0xae
 800d86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d014      	beq.n	800d8a0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800d876:	7dfa      	ldrb	r2, [r7, #23]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d87e:	7dfa      	ldrb	r2, [r7, #23]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	32ae      	adds	r2, #174	@ 0xae
 800d884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	7afa      	ldrb	r2, [r7, #11]
 800d88c:	4611      	mov	r1, r2
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	4798      	blx	r3
 800d892:	4603      	mov	r3, r0
 800d894:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d896:	7dbb      	ldrb	r3, [r7, #22]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800d89c:	7dbb      	ldrb	r3, [r7, #22]
 800d89e:	e000      	b.n	800d8a2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d014      	beq.n	800d910 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00e      	beq.n	800d910 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	6852      	ldr	r2, [r2, #4]
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	4611      	mov	r1, r2
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	4798      	blx	r3
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d90c:	2303      	movs	r3, #3
 800d90e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d910:	2340      	movs	r3, #64	@ 0x40
 800d912:	2200      	movs	r2, #0
 800d914:	2100      	movs	r1, #0
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f00f fb01 	bl	801cf1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2240      	movs	r2, #64	@ 0x40
 800d928:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d92c:	2340      	movs	r3, #64	@ 0x40
 800d92e:	2200      	movs	r2, #0
 800d930:	2180      	movs	r1, #128	@ 0x80
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f00f faf3 	bl	801cf1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2240      	movs	r2, #64	@ 0x40
 800d944:	841a      	strh	r2, [r3, #32]

  return ret;
 800d946:	7bfb      	ldrb	r3, [r7, #15]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	78fa      	ldrb	r2, [r7, #3]
 800d960:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b04      	cmp	r3, #4
 800d982:	d006      	beq.n	800d992 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2204      	movs	r2, #4
 800d996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b04      	cmp	r3, #4
 800d9ba:	d106      	bne.n	800d9ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d110      	bne.n	800da0e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00b      	beq.n	800da0e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d005      	beq.n	800da0e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da08:	69db      	ldr	r3, [r3, #28]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	32ae      	adds	r2, #174	@ 0xae
 800da2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800da36:	2303      	movs	r3, #3
 800da38:	e01c      	b.n	800da74 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b03      	cmp	r3, #3
 800da44:	d115      	bne.n	800da72 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	32ae      	adds	r2, #174	@ 0xae
 800da50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	32ae      	adds	r2, #174	@ 0xae
 800da64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	78fa      	ldrb	r2, [r7, #3]
 800da6c:	4611      	mov	r1, r2
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	32ae      	adds	r2, #174	@ 0xae
 800da92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e01c      	b.n	800dad8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	d115      	bne.n	800dad6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	32ae      	adds	r2, #174	@ 0xae
 800dab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	32ae      	adds	r2, #174	@ 0xae
 800dac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	4611      	mov	r1, r2
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00e      	beq.n	800db32 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6852      	ldr	r2, [r2, #4]
 800db20:	b2d2      	uxtb	r2, r2
 800db22:	4611      	mov	r1, r2
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	4798      	blx	r3
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db32:	7bfb      	ldrb	r3, [r7, #15]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	460b      	mov	r3, r1
 800db60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db64:	4618      	mov	r0, r3
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db84:	2300      	movs	r3, #0
 800db86:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	885b      	ldrh	r3, [r3, #2]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	7812      	ldrb	r2, [r2, #0]
 800db92:	4293      	cmp	r3, r2
 800db94:	d91f      	bls.n	800dbd6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db9c:	e013      	b.n	800dbc6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db9e:	f107 030a 	add.w	r3, r7, #10
 800dba2:	4619      	mov	r1, r3
 800dba4:	6978      	ldr	r0, [r7, #20]
 800dba6:	f000 f81b 	bl	800dbe0 <USBD_GetNextDesc>
 800dbaa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	785b      	ldrb	r3, [r3, #1]
 800dbb0:	2b05      	cmp	r3, #5
 800dbb2:	d108      	bne.n	800dbc6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	789b      	ldrb	r3, [r3, #2]
 800dbbc:	78fa      	ldrb	r2, [r7, #3]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d008      	beq.n	800dbd4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	885b      	ldrh	r3, [r3, #2]
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	897b      	ldrh	r3, [r7, #10]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d8e5      	bhi.n	800db9e <USBD_GetEpDesc+0x2e>
 800dbd2:	e000      	b.n	800dbd6 <USBD_GetEpDesc+0x66>
          break;
 800dbd4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dbd6:	693b      	ldr	r3, [r7, #16]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	7812      	ldrb	r2, [r2, #0]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4413      	add	r3, r2
 800dc08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	b21a      	sxth	r2, r3
 800dc3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	b21b      	sxth	r3, r3
 800dc46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc48:	89fb      	ldrh	r3, [r7, #14]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	371c      	adds	r7, #28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
	...

0800dc58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc6e:	2b40      	cmp	r3, #64	@ 0x40
 800dc70:	d005      	beq.n	800dc7e <USBD_StdDevReq+0x26>
 800dc72:	2b40      	cmp	r3, #64	@ 0x40
 800dc74:	d857      	bhi.n	800dd26 <USBD_StdDevReq+0xce>
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00f      	beq.n	800dc9a <USBD_StdDevReq+0x42>
 800dc7a:	2b20      	cmp	r3, #32
 800dc7c:	d153      	bne.n	800dd26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	32ae      	adds	r2, #174	@ 0xae
 800dc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	4798      	blx	r3
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]
      break;
 800dc98:	e04a      	b.n	800dd30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	785b      	ldrb	r3, [r3, #1]
 800dc9e:	2b09      	cmp	r3, #9
 800dca0:	d83b      	bhi.n	800dd1a <USBD_StdDevReq+0xc2>
 800dca2:	a201      	add	r2, pc, #4	@ (adr r2, 800dca8 <USBD_StdDevReq+0x50>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dcfd 	.word	0x0800dcfd
 800dcac:	0800dd11 	.word	0x0800dd11
 800dcb0:	0800dd1b 	.word	0x0800dd1b
 800dcb4:	0800dd07 	.word	0x0800dd07
 800dcb8:	0800dd1b 	.word	0x0800dd1b
 800dcbc:	0800dcdb 	.word	0x0800dcdb
 800dcc0:	0800dcd1 	.word	0x0800dcd1
 800dcc4:	0800dd1b 	.word	0x0800dd1b
 800dcc8:	0800dcf3 	.word	0x0800dcf3
 800dccc:	0800dce5 	.word	0x0800dce5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fa3e 	bl	800e154 <USBD_GetDescriptor>
          break;
 800dcd8:	e024      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fba3 	bl	800e428 <USBD_SetAddress>
          break;
 800dce2:	e01f      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dce4:	6839      	ldr	r1, [r7, #0]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 fbe2 	bl	800e4b0 <USBD_SetConfig>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
          break;
 800dcf0:	e018      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fc85 	bl	800e604 <USBD_GetConfig>
          break;
 800dcfa:	e013      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcfc:	6839      	ldr	r1, [r7, #0]
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fcb6 	bl	800e670 <USBD_GetStatus>
          break;
 800dd04:	e00e      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fce5 	bl	800e6d8 <USBD_SetFeature>
          break;
 800dd0e:	e009      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fd09 	bl	800e72a <USBD_ClrFeature>
          break;
 800dd18:	e004      	b.n	800dd24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dd1a:	6839      	ldr	r1, [r7, #0]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 fd60 	bl	800e7e2 <USBD_CtlError>
          break;
 800dd22:	bf00      	nop
      }
      break;
 800dd24:	e004      	b.n	800dd30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 fd5a 	bl	800e7e2 <USBD_CtlError>
      break;
 800dd2e:	bf00      	nop
  }

  return ret;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop

0800dd3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd46:	2300      	movs	r3, #0
 800dd48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd52:	2b40      	cmp	r3, #64	@ 0x40
 800dd54:	d005      	beq.n	800dd62 <USBD_StdItfReq+0x26>
 800dd56:	2b40      	cmp	r3, #64	@ 0x40
 800dd58:	d852      	bhi.n	800de00 <USBD_StdItfReq+0xc4>
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <USBD_StdItfReq+0x26>
 800dd5e:	2b20      	cmp	r3, #32
 800dd60:	d14e      	bne.n	800de00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d840      	bhi.n	800ddf2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	889b      	ldrh	r3, [r3, #4]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d836      	bhi.n	800dde8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	889b      	ldrh	r3, [r3, #4]
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff feda 	bl	800db3c <USBD_CoreFindIF>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	2bff      	cmp	r3, #255	@ 0xff
 800dd90:	d01d      	beq.n	800ddce <USBD_StdItfReq+0x92>
 800dd92:	7bbb      	ldrb	r3, [r7, #14]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d11a      	bne.n	800ddce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd98:	7bba      	ldrb	r2, [r7, #14]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	32ae      	adds	r2, #174	@ 0xae
 800dd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00f      	beq.n	800ddc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dda8:	7bba      	ldrb	r2, [r7, #14]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ddb0:	7bba      	ldrb	r2, [r7, #14]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	32ae      	adds	r2, #174	@ 0xae
 800ddb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	4798      	blx	r3
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddc6:	e004      	b.n	800ddd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddcc:	e001      	b.n	800ddd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	88db      	ldrh	r3, [r3, #6]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d110      	bne.n	800ddfc <USBD_StdItfReq+0xc0>
 800ddda:	7bfb      	ldrb	r3, [r7, #15]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10d      	bne.n	800ddfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fddc 	bl	800e99e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dde6:	e009      	b.n	800ddfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fcf9 	bl	800e7e2 <USBD_CtlError>
          break;
 800ddf0:	e004      	b.n	800ddfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fcf4 	bl	800e7e2 <USBD_CtlError>
          break;
 800ddfa:	e000      	b.n	800ddfe <USBD_StdItfReq+0xc2>
          break;
 800ddfc:	bf00      	nop
      }
      break;
 800ddfe:	e004      	b.n	800de0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fced 	bl	800e7e2 <USBD_CtlError>
      break;
 800de08:	bf00      	nop
  }

  return ret;
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	889b      	ldrh	r3, [r3, #4]
 800de26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de30:	2b40      	cmp	r3, #64	@ 0x40
 800de32:	d007      	beq.n	800de44 <USBD_StdEPReq+0x30>
 800de34:	2b40      	cmp	r3, #64	@ 0x40
 800de36:	f200 8181 	bhi.w	800e13c <USBD_StdEPReq+0x328>
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d02a      	beq.n	800de94 <USBD_StdEPReq+0x80>
 800de3e:	2b20      	cmp	r3, #32
 800de40:	f040 817c 	bne.w	800e13c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de44:	7bbb      	ldrb	r3, [r7, #14]
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff fe84 	bl	800db56 <USBD_CoreFindEP>
 800de4e:	4603      	mov	r3, r0
 800de50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de52:	7b7b      	ldrb	r3, [r7, #13]
 800de54:	2bff      	cmp	r3, #255	@ 0xff
 800de56:	f000 8176 	beq.w	800e146 <USBD_StdEPReq+0x332>
 800de5a:	7b7b      	ldrb	r3, [r7, #13]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f040 8172 	bne.w	800e146 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800de62:	7b7a      	ldrb	r2, [r7, #13]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de6a:	7b7a      	ldrb	r2, [r7, #13]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	32ae      	adds	r2, #174	@ 0xae
 800de70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8165 	beq.w	800e146 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de7c:	7b7a      	ldrb	r2, [r7, #13]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	32ae      	adds	r2, #174	@ 0xae
 800de82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	6839      	ldr	r1, [r7, #0]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	4798      	blx	r3
 800de8e:	4603      	mov	r3, r0
 800de90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de92:	e158      	b.n	800e146 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	785b      	ldrb	r3, [r3, #1]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d008      	beq.n	800deae <USBD_StdEPReq+0x9a>
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	f300 8147 	bgt.w	800e130 <USBD_StdEPReq+0x31c>
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f000 809b 	beq.w	800dfde <USBD_StdEPReq+0x1ca>
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d03c      	beq.n	800df26 <USBD_StdEPReq+0x112>
 800deac:	e140      	b.n	800e130 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d002      	beq.n	800dec0 <USBD_StdEPReq+0xac>
 800deba:	2b03      	cmp	r3, #3
 800debc:	d016      	beq.n	800deec <USBD_StdEPReq+0xd8>
 800debe:	e02c      	b.n	800df1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00d      	beq.n	800dee2 <USBD_StdEPReq+0xce>
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	2b80      	cmp	r3, #128	@ 0x80
 800deca:	d00a      	beq.n	800dee2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800decc:	7bbb      	ldrb	r3, [r7, #14]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f00f f869 	bl	801cfa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	2180      	movs	r1, #128	@ 0x80
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f00f f865 	bl	801cfa8 <USBD_LL_StallEP>
 800dede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee0:	e020      	b.n	800df24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fc7c 	bl	800e7e2 <USBD_CtlError>
              break;
 800deea:	e01b      	b.n	800df24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	885b      	ldrh	r3, [r3, #2]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10e      	bne.n	800df12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00b      	beq.n	800df12 <USBD_StdEPReq+0xfe>
 800defa:	7bbb      	ldrb	r3, [r7, #14]
 800defc:	2b80      	cmp	r3, #128	@ 0x80
 800defe:	d008      	beq.n	800df12 <USBD_StdEPReq+0xfe>
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	88db      	ldrh	r3, [r3, #6]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d104      	bne.n	800df12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f00f f84b 	bl	801cfa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fd43 	bl	800e99e <USBD_CtlSendStatus>

              break;
 800df18:	e004      	b.n	800df24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fc60 	bl	800e7e2 <USBD_CtlError>
              break;
 800df22:	bf00      	nop
          }
          break;
 800df24:	e109      	b.n	800e13a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d002      	beq.n	800df38 <USBD_StdEPReq+0x124>
 800df32:	2b03      	cmp	r3, #3
 800df34:	d016      	beq.n	800df64 <USBD_StdEPReq+0x150>
 800df36:	e04b      	b.n	800dfd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00d      	beq.n	800df5a <USBD_StdEPReq+0x146>
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b80      	cmp	r3, #128	@ 0x80
 800df42:	d00a      	beq.n	800df5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df44:	7bbb      	ldrb	r3, [r7, #14]
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f00f f82d 	bl	801cfa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df4e:	2180      	movs	r1, #128	@ 0x80
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f00f f829 	bl	801cfa8 <USBD_LL_StallEP>
 800df56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df58:	e040      	b.n	800dfdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fc40 	bl	800e7e2 <USBD_CtlError>
              break;
 800df62:	e03b      	b.n	800dfdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	885b      	ldrh	r3, [r3, #2]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d136      	bne.n	800dfda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df6c:	7bbb      	ldrb	r3, [r7, #14]
 800df6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df72:	2b00      	cmp	r3, #0
 800df74:	d004      	beq.n	800df80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df76:	7bbb      	ldrb	r3, [r7, #14]
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f00f f833 	bl	801cfe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fd0c 	bl	800e99e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df86:	7bbb      	ldrb	r3, [r7, #14]
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff fde3 	bl	800db56 <USBD_CoreFindEP>
 800df90:	4603      	mov	r3, r0
 800df92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df94:	7b7b      	ldrb	r3, [r7, #13]
 800df96:	2bff      	cmp	r3, #255	@ 0xff
 800df98:	d01f      	beq.n	800dfda <USBD_StdEPReq+0x1c6>
 800df9a:	7b7b      	ldrb	r3, [r7, #13]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d11c      	bne.n	800dfda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dfa0:	7b7a      	ldrb	r2, [r7, #13]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dfa8:	7b7a      	ldrb	r2, [r7, #13]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	32ae      	adds	r2, #174	@ 0xae
 800dfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d010      	beq.n	800dfda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dfb8:	7b7a      	ldrb	r2, [r7, #13]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	32ae      	adds	r2, #174	@ 0xae
 800dfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	4798      	blx	r3
 800dfca:	4603      	mov	r3, r0
 800dfcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dfce:	e004      	b.n	800dfda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fc05 	bl	800e7e2 <USBD_CtlError>
              break;
 800dfd8:	e000      	b.n	800dfdc <USBD_StdEPReq+0x1c8>
              break;
 800dfda:	bf00      	nop
          }
          break;
 800dfdc:	e0ad      	b.n	800e13a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b02      	cmp	r3, #2
 800dfe8:	d002      	beq.n	800dff0 <USBD_StdEPReq+0x1dc>
 800dfea:	2b03      	cmp	r3, #3
 800dfec:	d033      	beq.n	800e056 <USBD_StdEPReq+0x242>
 800dfee:	e099      	b.n	800e124 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dff0:	7bbb      	ldrb	r3, [r7, #14]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d007      	beq.n	800e006 <USBD_StdEPReq+0x1f2>
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
 800dff8:	2b80      	cmp	r3, #128	@ 0x80
 800dffa:	d004      	beq.n	800e006 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fbef 	bl	800e7e2 <USBD_CtlError>
                break;
 800e004:	e093      	b.n	800e12e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	da0b      	bge.n	800e026 <USBD_StdEPReq+0x212>
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
 800e010:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e014:	4613      	mov	r3, r2
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	3310      	adds	r3, #16
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	4413      	add	r3, r2
 800e022:	3304      	adds	r3, #4
 800e024:	e00b      	b.n	800e03e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e026:	7bbb      	ldrb	r3, [r7, #14]
 800e028:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e02c:	4613      	mov	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4413      	add	r3, r2
 800e03c:	3304      	adds	r3, #4
 800e03e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2200      	movs	r2, #0
 800e044:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	330e      	adds	r3, #14
 800e04a:	2202      	movs	r2, #2
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fc44 	bl	800e8dc <USBD_CtlSendData>
              break;
 800e054:	e06b      	b.n	800e12e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	da11      	bge.n	800e082 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e05e:	7bbb      	ldrb	r3, [r7, #14]
 800e060:	f003 020f 	and.w	r2, r3, #15
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	440b      	add	r3, r1
 800e070:	3323      	adds	r3, #35	@ 0x23
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d117      	bne.n	800e0a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fbb1 	bl	800e7e2 <USBD_CtlError>
                  break;
 800e080:	e055      	b.n	800e12e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e082:	7bbb      	ldrb	r3, [r7, #14]
 800e084:	f003 020f 	and.w	r2, r3, #15
 800e088:	6879      	ldr	r1, [r7, #4]
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	440b      	add	r3, r1
 800e094:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d104      	bne.n	800e0a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fb9e 	bl	800e7e2 <USBD_CtlError>
                  break;
 800e0a6:	e042      	b.n	800e12e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da0b      	bge.n	800e0c8 <USBD_StdEPReq+0x2b4>
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	3310      	adds	r3, #16
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	e00b      	b.n	800e0e0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	4413      	add	r3, r2
 800e0de:	3304      	adds	r3, #4
 800e0e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0e2:	7bbb      	ldrb	r3, [r7, #14]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <USBD_StdEPReq+0x2da>
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ea:	2b80      	cmp	r3, #128	@ 0x80
 800e0ec:	d103      	bne.n	800e0f6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	739a      	strb	r2, [r3, #14]
 800e0f4:	e00e      	b.n	800e114 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f00e ff92 	bl	801d024 <USBD_LL_IsStallEP>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d003      	beq.n	800e10e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2201      	movs	r2, #1
 800e10a:	739a      	strb	r2, [r3, #14]
 800e10c:	e002      	b.n	800e114 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	2200      	movs	r2, #0
 800e112:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	330e      	adds	r3, #14
 800e118:	2202      	movs	r2, #2
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fbdd 	bl	800e8dc <USBD_CtlSendData>
              break;
 800e122:	e004      	b.n	800e12e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fb5b 	bl	800e7e2 <USBD_CtlError>
              break;
 800e12c:	bf00      	nop
          }
          break;
 800e12e:	e004      	b.n	800e13a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fb55 	bl	800e7e2 <USBD_CtlError>
          break;
 800e138:	bf00      	nop
      }
      break;
 800e13a:	e005      	b.n	800e148 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fb4f 	bl	800e7e2 <USBD_CtlError>
      break;
 800e144:	e000      	b.n	800e148 <USBD_StdEPReq+0x334>
      break;
 800e146:	bf00      	nop
  }

  return ret;
 800e148:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	2b06      	cmp	r3, #6
 800e176:	f200 8128 	bhi.w	800e3ca <USBD_GetDescriptor+0x276>
 800e17a:	a201      	add	r2, pc, #4	@ (adr r2, 800e180 <USBD_GetDescriptor+0x2c>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e19d 	.word	0x0800e19d
 800e184:	0800e1b5 	.word	0x0800e1b5
 800e188:	0800e1f5 	.word	0x0800e1f5
 800e18c:	0800e3cb 	.word	0x0800e3cb
 800e190:	0800e3cb 	.word	0x0800e3cb
 800e194:	0800e36b 	.word	0x0800e36b
 800e198:	0800e397 	.word	0x0800e397
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	7c12      	ldrb	r2, [r2, #16]
 800e1a8:	f107 0108 	add.w	r1, r7, #8
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	4798      	blx	r3
 800e1b0:	60f8      	str	r0, [r7, #12]
      break;
 800e1b2:	e112      	b.n	800e3da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7c1b      	ldrb	r3, [r3, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10d      	bne.n	800e1d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c4:	f107 0208 	add.w	r2, r7, #8
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	4798      	blx	r3
 800e1cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e1d6:	e100      	b.n	800e3da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e0:	f107 0208 	add.w	r2, r7, #8
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
 800e1e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	701a      	strb	r2, [r3, #0]
      break;
 800e1f2:	e0f2      	b.n	800e3da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	885b      	ldrh	r3, [r3, #2]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b05      	cmp	r3, #5
 800e1fc:	f200 80ac 	bhi.w	800e358 <USBD_GetDescriptor+0x204>
 800e200:	a201      	add	r2, pc, #4	@ (adr r2, 800e208 <USBD_GetDescriptor+0xb4>)
 800e202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e206:	bf00      	nop
 800e208:	0800e221 	.word	0x0800e221
 800e20c:	0800e255 	.word	0x0800e255
 800e210:	0800e289 	.word	0x0800e289
 800e214:	0800e2bd 	.word	0x0800e2bd
 800e218:	0800e2f1 	.word	0x0800e2f1
 800e21c:	0800e325 	.word	0x0800e325
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	7c12      	ldrb	r2, [r2, #16]
 800e238:	f107 0108 	add.w	r1, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e242:	e091      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 facb 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	3301      	adds	r3, #1
 800e250:	72fb      	strb	r3, [r7, #11]
          break;
 800e252:	e089      	b.n	800e368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00b      	beq.n	800e278 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	7c12      	ldrb	r2, [r2, #16]
 800e26c:	f107 0108 	add.w	r1, r7, #8
 800e270:	4610      	mov	r0, r2
 800e272:	4798      	blx	r3
 800e274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e276:	e077      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fab1 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e280:	7afb      	ldrb	r3, [r7, #11]
 800e282:	3301      	adds	r3, #1
 800e284:	72fb      	strb	r3, [r7, #11]
          break;
 800e286:	e06f      	b.n	800e368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00b      	beq.n	800e2ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	7c12      	ldrb	r2, [r2, #16]
 800e2a0:	f107 0108 	add.w	r1, r7, #8
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	4798      	blx	r3
 800e2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2aa:	e05d      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fa97 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e2b4:	7afb      	ldrb	r3, [r7, #11]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ba:	e055      	b.n	800e368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00b      	beq.n	800e2e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	7c12      	ldrb	r2, [r2, #16]
 800e2d4:	f107 0108 	add.w	r1, r7, #8
 800e2d8:	4610      	mov	r0, r2
 800e2da:	4798      	blx	r3
 800e2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2de:	e043      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fa7d 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e2e8:	7afb      	ldrb	r3, [r7, #11]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ee:	e03b      	b.n	800e368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00b      	beq.n	800e314 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	7c12      	ldrb	r2, [r2, #16]
 800e308:	f107 0108 	add.w	r1, r7, #8
 800e30c:	4610      	mov	r0, r2
 800e30e:	4798      	blx	r3
 800e310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e312:	e029      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fa63 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e31c:	7afb      	ldrb	r3, [r7, #11]
 800e31e:	3301      	adds	r3, #1
 800e320:	72fb      	strb	r3, [r7, #11]
          break;
 800e322:	e021      	b.n	800e368 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00b      	beq.n	800e348 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	7c12      	ldrb	r2, [r2, #16]
 800e33c:	f107 0108 	add.w	r1, r7, #8
 800e340:	4610      	mov	r0, r2
 800e342:	4798      	blx	r3
 800e344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e346:	e00f      	b.n	800e368 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa49 	bl	800e7e2 <USBD_CtlError>
            err++;
 800e350:	7afb      	ldrb	r3, [r7, #11]
 800e352:	3301      	adds	r3, #1
 800e354:	72fb      	strb	r3, [r7, #11]
          break;
 800e356:	e007      	b.n	800e368 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fa41 	bl	800e7e2 <USBD_CtlError>
          err++;
 800e360:	7afb      	ldrb	r3, [r7, #11]
 800e362:	3301      	adds	r3, #1
 800e364:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e366:	bf00      	nop
      }
      break;
 800e368:	e037      	b.n	800e3da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7c1b      	ldrb	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d109      	bne.n	800e386 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e37a:	f107 0208 	add.w	r2, r7, #8
 800e37e:	4610      	mov	r0, r2
 800e380:	4798      	blx	r3
 800e382:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e384:	e029      	b.n	800e3da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fa2a 	bl	800e7e2 <USBD_CtlError>
        err++;
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	3301      	adds	r3, #1
 800e392:	72fb      	strb	r3, [r7, #11]
      break;
 800e394:	e021      	b.n	800e3da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	7c1b      	ldrb	r3, [r3, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10d      	bne.n	800e3ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3a6:	f107 0208 	add.w	r2, r7, #8
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	4798      	blx	r3
 800e3ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	2207      	movs	r2, #7
 800e3b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3b8:	e00f      	b.n	800e3da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fa10 	bl	800e7e2 <USBD_CtlError>
        err++;
 800e3c2:	7afb      	ldrb	r3, [r7, #11]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3c8:	e007      	b.n	800e3da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fa08 	bl	800e7e2 <USBD_CtlError>
      err++;
 800e3d2:	7afb      	ldrb	r3, [r7, #11]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3d8:	bf00      	nop
  }

  if (err != 0U)
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d11e      	bne.n	800e41e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	88db      	ldrh	r3, [r3, #6]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d016      	beq.n	800e416 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e3e8:	893b      	ldrh	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00e      	beq.n	800e40c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	88da      	ldrh	r2, [r3, #6]
 800e3f2:	893b      	ldrh	r3, [r7, #8]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bf28      	it	cs
 800e3f8:	4613      	movcs	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3fe:	893b      	ldrh	r3, [r7, #8]
 800e400:	461a      	mov	r2, r3
 800e402:	68f9      	ldr	r1, [r7, #12]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fa69 	bl	800e8dc <USBD_CtlSendData>
 800e40a:	e009      	b.n	800e420 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f9e7 	bl	800e7e2 <USBD_CtlError>
 800e414:	e004      	b.n	800e420 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fac1 	bl	800e99e <USBD_CtlSendStatus>
 800e41c:	e000      	b.n	800e420 <USBD_GetDescriptor+0x2cc>
    return;
 800e41e:	bf00      	nop
  }
}
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop

0800e428 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	889b      	ldrh	r3, [r3, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d131      	bne.n	800e49e <USBD_SetAddress+0x76>
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	88db      	ldrh	r3, [r3, #6]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d12d      	bne.n	800e49e <USBD_SetAddress+0x76>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	885b      	ldrh	r3, [r3, #2]
 800e446:	2b7f      	cmp	r3, #127	@ 0x7f
 800e448:	d829      	bhi.n	800e49e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	885b      	ldrh	r3, [r3, #2]
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d104      	bne.n	800e46c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f9bc 	bl	800e7e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e46a:	e01d      	b.n	800e4a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7bfa      	ldrb	r2, [r7, #15]
 800e470:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e474:	7bfb      	ldrb	r3, [r7, #15]
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f00e fdff 	bl	801d07c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fa8d 	bl	800e99e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d004      	beq.n	800e494 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2202      	movs	r2, #2
 800e48e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e492:	e009      	b.n	800e4a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e49c:	e004      	b.n	800e4a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f99e 	bl	800e7e2 <USBD_CtlError>
  }
}
 800e4a6:	bf00      	nop
 800e4a8:	bf00      	nop
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	885b      	ldrh	r3, [r3, #2]
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	4b4e      	ldr	r3, [pc, #312]	@ (800e600 <USBD_SetConfig+0x150>)
 800e4c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4c8:	4b4d      	ldr	r3, [pc, #308]	@ (800e600 <USBD_SetConfig+0x150>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d905      	bls.n	800e4dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f985 	bl	800e7e2 <USBD_CtlError>
    return USBD_FAIL;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e08c      	b.n	800e5f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d002      	beq.n	800e4ee <USBD_SetConfig+0x3e>
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d029      	beq.n	800e540 <USBD_SetConfig+0x90>
 800e4ec:	e075      	b.n	800e5da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4ee:	4b44      	ldr	r3, [pc, #272]	@ (800e600 <USBD_SetConfig+0x150>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d020      	beq.n	800e538 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4f6:	4b42      	ldr	r3, [pc, #264]	@ (800e600 <USBD_SetConfig+0x150>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e500:	4b3f      	ldr	r3, [pc, #252]	@ (800e600 <USBD_SetConfig+0x150>)
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	4619      	mov	r1, r3
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7fe ffcd 	bl	800d4a6 <USBD_SetClassConfig>
 800e50c:	4603      	mov	r3, r0
 800e50e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e510:	7bfb      	ldrb	r3, [r7, #15]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d008      	beq.n	800e528 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f962 	bl	800e7e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2202      	movs	r2, #2
 800e522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e526:	e065      	b.n	800e5f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fa38 	bl	800e99e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2203      	movs	r2, #3
 800e532:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e536:	e05d      	b.n	800e5f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 fa30 	bl	800e99e <USBD_CtlSendStatus>
      break;
 800e53e:	e059      	b.n	800e5f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e540:	4b2f      	ldr	r3, [pc, #188]	@ (800e600 <USBD_SetConfig+0x150>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d112      	bne.n	800e56e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2202      	movs	r2, #2
 800e54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e550:	4b2b      	ldr	r3, [pc, #172]	@ (800e600 <USBD_SetConfig+0x150>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	461a      	mov	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e55a:	4b29      	ldr	r3, [pc, #164]	@ (800e600 <USBD_SetConfig+0x150>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7fe ffbc 	bl	800d4de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fa19 	bl	800e99e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e56c:	e042      	b.n	800e5f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e56e:	4b24      	ldr	r3, [pc, #144]	@ (800e600 <USBD_SetConfig+0x150>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d02a      	beq.n	800e5d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	4619      	mov	r1, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fe ffaa 	bl	800d4de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e58a:	4b1d      	ldr	r3, [pc, #116]	@ (800e600 <USBD_SetConfig+0x150>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	461a      	mov	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e594:	4b1a      	ldr	r3, [pc, #104]	@ (800e600 <USBD_SetConfig+0x150>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7fe ff83 	bl	800d4a6 <USBD_SetClassConfig>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00f      	beq.n	800e5ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f918 	bl	800e7e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7fe ff8f 	bl	800d4de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e5c8:	e014      	b.n	800e5f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 f9e7 	bl	800e99e <USBD_CtlSendStatus>
      break;
 800e5d0:	e010      	b.n	800e5f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f9e3 	bl	800e99e <USBD_CtlSendStatus>
      break;
 800e5d8:	e00c      	b.n	800e5f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f900 	bl	800e7e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5e2:	4b07      	ldr	r3, [pc, #28]	@ (800e600 <USBD_SetConfig+0x150>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7fe ff78 	bl	800d4de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f2:	bf00      	nop
  }

  return ret;
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	200054f0 	.word	0x200054f0

0800e604 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	88db      	ldrh	r3, [r3, #6]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d004      	beq.n	800e620 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f8e2 	bl	800e7e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e61e:	e023      	b.n	800e668 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b02      	cmp	r3, #2
 800e62a:	dc02      	bgt.n	800e632 <USBD_GetConfig+0x2e>
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dc03      	bgt.n	800e638 <USBD_GetConfig+0x34>
 800e630:	e015      	b.n	800e65e <USBD_GetConfig+0x5a>
 800e632:	2b03      	cmp	r3, #3
 800e634:	d00b      	beq.n	800e64e <USBD_GetConfig+0x4a>
 800e636:	e012      	b.n	800e65e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	3308      	adds	r3, #8
 800e642:	2201      	movs	r2, #1
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f948 	bl	800e8dc <USBD_CtlSendData>
        break;
 800e64c:	e00c      	b.n	800e668 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3304      	adds	r3, #4
 800e652:	2201      	movs	r2, #1
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f940 	bl	800e8dc <USBD_CtlSendData>
        break;
 800e65c:	e004      	b.n	800e668 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f8be 	bl	800e7e2 <USBD_CtlError>
        break;
 800e666:	bf00      	nop
}
 800e668:	bf00      	nop
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e680:	b2db      	uxtb	r3, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	2b02      	cmp	r3, #2
 800e686:	d81e      	bhi.n	800e6c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	88db      	ldrh	r3, [r3, #6]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d004      	beq.n	800e69a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f8a5 	bl	800e7e2 <USBD_CtlError>
        break;
 800e698:	e01a      	b.n	800e6d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2201      	movs	r2, #1
 800e69e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d005      	beq.n	800e6b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	f043 0202 	orr.w	r2, r3, #2
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	330c      	adds	r3, #12
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f90c 	bl	800e8dc <USBD_CtlSendData>
      break;
 800e6c4:	e004      	b.n	800e6d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f88a 	bl	800e7e2 <USBD_CtlError>
      break;
 800e6ce:	bf00      	nop
  }
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	885b      	ldrh	r3, [r3, #2]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d107      	bne.n	800e6fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f953 	bl	800e99e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6f8:	e013      	b.n	800e722 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	885b      	ldrh	r3, [r3, #2]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d10b      	bne.n	800e71a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	889b      	ldrh	r3, [r3, #4]
 800e706:	0a1b      	lsrs	r3, r3, #8
 800e708:	b29b      	uxth	r3, r3
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f943 	bl	800e99e <USBD_CtlSendStatus>
}
 800e718:	e003      	b.n	800e722 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f860 	bl	800e7e2 <USBD_CtlError>
}
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b082      	sub	sp, #8
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	3b01      	subs	r3, #1
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d80b      	bhi.n	800e75a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	885b      	ldrh	r3, [r3, #2]
 800e746:	2b01      	cmp	r3, #1
 800e748:	d10c      	bne.n	800e764 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f923 	bl	800e99e <USBD_CtlSendStatus>
      }
      break;
 800e758:	e004      	b.n	800e764 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 f840 	bl	800e7e2 <USBD_CtlError>
      break;
 800e762:	e000      	b.n	800e766 <USBD_ClrFeature+0x3c>
      break;
 800e764:	bf00      	nop
  }
}
 800e766:	bf00      	nop
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	781a      	ldrb	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	781a      	ldrb	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3301      	adds	r3, #1
 800e796:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f7ff fa3d 	bl	800dc18 <SWAPBYTE>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f7ff fa30 	bl	800dc18 <SWAPBYTE>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f7ff fa23 	bl	800dc18 <SWAPBYTE>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	80da      	strh	r2, [r3, #6]
}
 800e7da:	bf00      	nop
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b082      	sub	sp, #8
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ec:	2180      	movs	r1, #128	@ 0x80
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f00e fbda 	bl	801cfa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f00e fbd6 	bl	801cfa8 <USBD_LL_StallEP>
}
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e810:	2300      	movs	r3, #0
 800e812:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d042      	beq.n	800e8a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e81e:	6938      	ldr	r0, [r7, #16]
 800e820:	f000 f842 	bl	800e8a8 <USBD_GetLen>
 800e824:	4603      	mov	r3, r0
 800e826:	3301      	adds	r3, #1
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e82e:	d808      	bhi.n	800e842 <USBD_GetString+0x3e>
 800e830:	6938      	ldr	r0, [r7, #16]
 800e832:	f000 f839 	bl	800e8a8 <USBD_GetLen>
 800e836:	4603      	mov	r3, r0
 800e838:	3301      	adds	r3, #1
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	b29a      	uxth	r2, r3
 800e840:	e001      	b.n	800e846 <USBD_GetString+0x42>
 800e842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e84a:	7dfb      	ldrb	r3, [r7, #23]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	4413      	add	r3, r2
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	7812      	ldrb	r2, [r2, #0]
 800e854:	701a      	strb	r2, [r3, #0]
  idx++;
 800e856:	7dfb      	ldrb	r3, [r7, #23]
 800e858:	3301      	adds	r3, #1
 800e85a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e85c:	7dfb      	ldrb	r3, [r7, #23]
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	4413      	add	r3, r2
 800e862:	2203      	movs	r2, #3
 800e864:	701a      	strb	r2, [r3, #0]
  idx++;
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	3301      	adds	r3, #1
 800e86a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e86c:	e013      	b.n	800e896 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	4413      	add	r3, r2
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	7812      	ldrb	r2, [r2, #0]
 800e878:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	3301      	adds	r3, #1
 800e87e:	613b      	str	r3, [r7, #16]
    idx++;
 800e880:	7dfb      	ldrb	r3, [r7, #23]
 800e882:	3301      	adds	r3, #1
 800e884:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e886:	7dfb      	ldrb	r3, [r7, #23]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	4413      	add	r3, r2
 800e88c:	2200      	movs	r2, #0
 800e88e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e890:	7dfb      	ldrb	r3, [r7, #23]
 800e892:	3301      	adds	r3, #1
 800e894:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1e7      	bne.n	800e86e <USBD_GetString+0x6a>
 800e89e:	e000      	b.n	800e8a2 <USBD_GetString+0x9e>
    return;
 800e8a0:	bf00      	nop
  }
}
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8b8:	e005      	b.n	800e8c6 <USBD_GetLen+0x1e>
  {
    len++;
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1f5      	bne.n	800e8ba <USBD_GetLen+0x12>
  }

  return len;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	2100      	movs	r1, #0
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f00e fbd6 	bl	801d0ba <USBD_LL_Transmit>

  return USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	2100      	movs	r1, #0
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f00e fbc5 	bl	801d0ba <USBD_LL_Transmit>

  return USBD_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	60b9      	str	r1, [r7, #8]
 800e944:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2203      	movs	r2, #3
 800e94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	2100      	movs	r1, #0
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f00e fbc5 	bl	801d0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	2100      	movs	r1, #0
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f00e fbb4 	bl	801d0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2204      	movs	r2, #4
 800e9aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f00e fb80 	bl	801d0ba <USBD_LL_Transmit>

  return USBD_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2205      	movs	r2, #5
 800e9d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2100      	movs	r1, #0
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f00e fb8e 	bl	801d0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e9f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9fc:	2b84      	cmp	r3, #132	@ 0x84
 800e9fe:	d005      	beq.n	800ea0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4413      	add	r3, r2
 800ea08:	3303      	adds	r3, #3
 800ea0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea20:	f3ef 8305 	mrs	r3, IPSR
 800ea24:	607b      	str	r3, [r7, #4]
  return(result);
 800ea26:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	bf14      	ite	ne
 800ea2c:	2301      	movne	r3, #1
 800ea2e:	2300      	moveq	r3, #0
 800ea30:	b2db      	uxtb	r3, r3
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ea42:	f001 fc95 	bl	8010370 <vTaskStartScheduler>
  
  return osOK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ea50:	f7ff ffe3 	bl	800ea1a <inHandlerMode>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d003      	beq.n	800ea62 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ea5a:	f001 fdaf 	bl	80105bc <xTaskGetTickCountFromISR>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	e002      	b.n	800ea68 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ea62:	f001 fd9b 	bl	801059c <xTaskGetTickCount>
 800ea66:	4603      	mov	r3, r0
  }
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ea6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea6e:	b089      	sub	sp, #36	@ 0x24
 800ea70:	af04      	add	r7, sp, #16
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	695b      	ldr	r3, [r3, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d020      	beq.n	800eac0 <osThreadCreate+0x54>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01c      	beq.n	800eac0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685c      	ldr	r4, [r3, #4]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691e      	ldr	r6, [r3, #16]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff ffa6 	bl	800e9ea <makeFreeRtosPriority>
 800ea9e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eaa8:	9202      	str	r2, [sp, #8]
 800eaaa:	9301      	str	r3, [sp, #4]
 800eaac:	9100      	str	r1, [sp, #0]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	4632      	mov	r2, r6
 800eab2:	4629      	mov	r1, r5
 800eab4:	4620      	mov	r0, r4
 800eab6:	f001 fa75 	bl	800ffa4 <xTaskCreateStatic>
 800eaba:	4603      	mov	r3, r0
 800eabc:	60fb      	str	r3, [r7, #12]
 800eabe:	e01c      	b.n	800eafa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685c      	ldr	r4, [r3, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eacc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff ff88 	bl	800e9ea <makeFreeRtosPriority>
 800eada:	4602      	mov	r2, r0
 800eadc:	f107 030c 	add.w	r3, r7, #12
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	9200      	str	r2, [sp, #0]
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	4632      	mov	r2, r6
 800eae8:	4629      	mov	r1, r5
 800eaea:	4620      	mov	r0, r4
 800eaec:	f001 faba 	bl	8010064 <xTaskCreate>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d001      	beq.n	800eafa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e000      	b.n	800eafc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eafa:	68fb      	ldr	r3, [r7, #12]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <osDelay+0x16>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	e000      	b.n	800eb1c <osDelay+0x18>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f001 fbf1 	bl	8010304 <vTaskDelay>
  
  return osOK;
 800eb22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d007      	beq.n	800eb4c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	4619      	mov	r1, r3
 800eb42:	2001      	movs	r0, #1
 800eb44:	f000 fc47 	bl	800f3d6 <xQueueCreateMutexStatic>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	e003      	b.n	800eb54 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	f000 fc2a 	bl	800f3a6 <xQueueCreateMutex>
 800eb52:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eb66:	2300      	movs	r3, #0
 800eb68:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <osMutexWait+0x18>
    return osErrorParameter;
 800eb70:	2380      	movs	r3, #128	@ 0x80
 800eb72:	e03a      	b.n	800ebea <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7e:	d103      	bne.n	800eb88 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	e009      	b.n	800eb9c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d006      	beq.n	800eb9c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <osMutexWait+0x40>
      ticks = 1;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800eb9c:	f7ff ff3d 	bl	800ea1a <inHandlerMode>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d017      	beq.n	800ebd6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800eba6:	f107 0308 	add.w	r3, r7, #8
 800ebaa:	461a      	mov	r2, r3
 800ebac:	2100      	movs	r1, #0
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f001 f84e 	bl	800fc50 <xQueueReceiveFromISR>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d001      	beq.n	800ebbe <osMutexWait+0x62>
      return osErrorOS;
 800ebba:	23ff      	movs	r3, #255	@ 0xff
 800ebbc:	e015      	b.n	800ebea <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d011      	beq.n	800ebe8 <osMutexWait+0x8c>
 800ebc4:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf4 <osMutexWait+0x98>)
 800ebc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebca:	601a      	str	r2, [r3, #0]
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	e008      	b.n	800ebe8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ebd6:	68f9      	ldr	r1, [r7, #12]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 ff29 	bl	800fa30 <xQueueSemaphoreTake>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d001      	beq.n	800ebe8 <osMutexWait+0x8c>
    return osErrorOS;
 800ebe4:	23ff      	movs	r3, #255	@ 0xff
 800ebe6:	e000      	b.n	800ebea <osMutexWait+0x8e>
  }
  
  return osOK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	e000ed04 	.word	0xe000ed04

0800ebf8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ec04:	2300      	movs	r3, #0
 800ec06:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ec08:	f7ff ff07 	bl	800ea1a <inHandlerMode>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d016      	beq.n	800ec40 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ec12:	f107 0308 	add.w	r3, r7, #8
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fd97 	bl	800f74c <xQueueGiveFromISR>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d001      	beq.n	800ec28 <osMutexRelease+0x30>
      return osErrorOS;
 800ec24:	23ff      	movs	r3, #255	@ 0xff
 800ec26:	e017      	b.n	800ec58 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d013      	beq.n	800ec56 <osMutexRelease+0x5e>
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec60 <osMutexRelease+0x68>)
 800ec30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	e00a      	b.n	800ec56 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ec40:	2300      	movs	r3, #0
 800ec42:	2200      	movs	r2, #0
 800ec44:	2100      	movs	r1, #0
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fbe0 	bl	800f40c <xQueueGenericSend>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d001      	beq.n	800ec56 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ec52:	23ff      	movs	r3, #255	@ 0xff
 800ec54:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ec56:	68fb      	ldr	r3, [r7, #12]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	e000ed04 	.word	0xe000ed04

0800ec64 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af02      	add	r7, sp, #8
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00f      	beq.n	800ec96 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d10a      	bne.n	800ec92 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	2203      	movs	r2, #3
 800ec82:	9200      	str	r2, [sp, #0]
 800ec84:	2200      	movs	r2, #0
 800ec86:	2100      	movs	r1, #0
 800ec88:	2001      	movs	r0, #1
 800ec8a:	f000 fa9b 	bl	800f1c4 <xQueueGenericCreateStatic>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	e016      	b.n	800ecc0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	e014      	b.n	800ecc0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d110      	bne.n	800ecbe <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ec9c:	2203      	movs	r2, #3
 800ec9e:	2100      	movs	r1, #0
 800eca0:	2001      	movs	r0, #1
 800eca2:	f000 fb0c 	bl	800f2be <xQueueGenericCreate>
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d005      	beq.n	800ecba <osSemaphoreCreate+0x56>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f000 fba9 	bl	800f40c <xQueueGenericSend>
      return sema;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	e000      	b.n	800ecc0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ecbe:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d101      	bne.n	800ece0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ecdc:	2380      	movs	r3, #128	@ 0x80
 800ecde:	e03a      	b.n	800ed56 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecea:	d103      	bne.n	800ecf4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ecec:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf0:	60fb      	str	r3, [r7, #12]
 800ecf2:	e009      	b.n	800ed08 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d006      	beq.n	800ed08 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d101      	bne.n	800ed08 <osSemaphoreWait+0x40>
      ticks = 1;
 800ed04:	2301      	movs	r3, #1
 800ed06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ed08:	f7ff fe87 	bl	800ea1a <inHandlerMode>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d017      	beq.n	800ed42 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ed12:	f107 0308 	add.w	r3, r7, #8
 800ed16:	461a      	mov	r2, r3
 800ed18:	2100      	movs	r1, #0
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 ff98 	bl	800fc50 <xQueueReceiveFromISR>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d001      	beq.n	800ed2a <osSemaphoreWait+0x62>
      return osErrorOS;
 800ed26:	23ff      	movs	r3, #255	@ 0xff
 800ed28:	e015      	b.n	800ed56 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d011      	beq.n	800ed54 <osSemaphoreWait+0x8c>
 800ed30:	4b0b      	ldr	r3, [pc, #44]	@ (800ed60 <osSemaphoreWait+0x98>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	e008      	b.n	800ed54 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fe73 	bl	800fa30 <xQueueSemaphoreTake>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d001      	beq.n	800ed54 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ed50:	23ff      	movs	r3, #255	@ 0xff
 800ed52:	e000      	b.n	800ed56 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	e000ed04 	.word	0xe000ed04

0800ed64 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ed70:	2300      	movs	r3, #0
 800ed72:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ed74:	f7ff fe51 	bl	800ea1a <inHandlerMode>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d016      	beq.n	800edac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ed7e:	f107 0308 	add.w	r3, r7, #8
 800ed82:	4619      	mov	r1, r3
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fce1 	bl	800f74c <xQueueGiveFromISR>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d001      	beq.n	800ed94 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ed90:	23ff      	movs	r3, #255	@ 0xff
 800ed92:	e017      	b.n	800edc4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d013      	beq.n	800edc2 <osSemaphoreRelease+0x5e>
 800ed9a:	4b0c      	ldr	r3, [pc, #48]	@ (800edcc <osSemaphoreRelease+0x68>)
 800ed9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eda0:	601a      	str	r2, [r3, #0]
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	e00a      	b.n	800edc2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800edac:	2300      	movs	r3, #0
 800edae:	2200      	movs	r2, #0
 800edb0:	2100      	movs	r1, #0
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fb2a 	bl	800f40c <xQueueGenericSend>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d001      	beq.n	800edc2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800edbe:	23ff      	movs	r3, #255	@ 0xff
 800edc0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800edc2:	68fb      	ldr	r3, [r7, #12]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	e000ed04 	.word	0xe000ed04

0800edd0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800edd0:	b590      	push	{r4, r7, lr}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d011      	beq.n	800ee06 <osMessageCreate+0x36>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00d      	beq.n	800ee06 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6818      	ldr	r0, [r3, #0]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6859      	ldr	r1, [r3, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	689a      	ldr	r2, [r3, #8]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	2400      	movs	r4, #0
 800edfc:	9400      	str	r4, [sp, #0]
 800edfe:	f000 f9e1 	bl	800f1c4 <xQueueGenericCreateStatic>
 800ee02:	4603      	mov	r3, r0
 800ee04:	e008      	b.n	800ee18 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6818      	ldr	r0, [r3, #0]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	4619      	mov	r1, r3
 800ee12:	f000 fa54 	bl	800f2be <xQueueGenericCreate>
 800ee16:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd90      	pop	{r4, r7, pc}

0800ee20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <osMessagePut+0x1e>
    ticks = 1;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ee3e:	f7ff fdec 	bl	800ea1a <inHandlerMode>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d018      	beq.n	800ee7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ee48:	f107 0210 	add.w	r2, r7, #16
 800ee4c:	f107 0108 	add.w	r1, r7, #8
 800ee50:	2300      	movs	r3, #0
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 fbdc 	bl	800f610 <xQueueGenericSendFromISR>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d001      	beq.n	800ee62 <osMessagePut+0x42>
      return osErrorOS;
 800ee5e:	23ff      	movs	r3, #255	@ 0xff
 800ee60:	e018      	b.n	800ee94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d014      	beq.n	800ee92 <osMessagePut+0x72>
 800ee68:	4b0c      	ldr	r3, [pc, #48]	@ (800ee9c <osMessagePut+0x7c>)
 800ee6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee6e:	601a      	str	r2, [r3, #0]
 800ee70:	f3bf 8f4f 	dsb	sy
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	e00b      	b.n	800ee92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ee7a:	f107 0108 	add.w	r1, r7, #8
 800ee7e:	2300      	movs	r3, #0
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f000 fac2 	bl	800f40c <xQueueGenericSend>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d001      	beq.n	800ee92 <osMessagePut+0x72>
      return osErrorOS;
 800ee8e:	23ff      	movs	r3, #255	@ 0xff
 800ee90:	e000      	b.n	800ee94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3718      	adds	r7, #24
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	e000ed04 	.word	0xe000ed04

0800eea0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800eea0:	b590      	push	{r4, r7, lr}
 800eea2:	b08b      	sub	sp, #44	@ 0x2c
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10a      	bne.n	800eed0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800eeba:	2380      	movs	r3, #128	@ 0x80
 800eebc:	617b      	str	r3, [r7, #20]
    return event;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	461c      	mov	r4, r3
 800eec2:	f107 0314 	add.w	r3, r7, #20
 800eec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eeca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eece:	e054      	b.n	800ef7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800eed0:	2300      	movs	r3, #0
 800eed2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d103      	bne.n	800eee8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800eee0:	f04f 33ff 	mov.w	r3, #4294967295
 800eee4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eee6:	e009      	b.n	800eefc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d006      	beq.n	800eefc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800eef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d101      	bne.n	800eefc <osMessageGet+0x5c>
      ticks = 1;
 800eef8:	2301      	movs	r3, #1
 800eefa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800eefc:	f7ff fd8d 	bl	800ea1a <inHandlerMode>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d01c      	beq.n	800ef40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ef06:	f107 0220 	add.w	r2, r7, #32
 800ef0a:	f107 0314 	add.w	r3, r7, #20
 800ef0e:	3304      	adds	r3, #4
 800ef10:	4619      	mov	r1, r3
 800ef12:	68b8      	ldr	r0, [r7, #8]
 800ef14:	f000 fe9c 	bl	800fc50 <xQueueReceiveFromISR>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d102      	bne.n	800ef24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ef1e:	2310      	movs	r3, #16
 800ef20:	617b      	str	r3, [r7, #20]
 800ef22:	e001      	b.n	800ef28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d01d      	beq.n	800ef6a <osMessageGet+0xca>
 800ef2e:	4b15      	ldr	r3, [pc, #84]	@ (800ef84 <osMessageGet+0xe4>)
 800ef30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	e014      	b.n	800ef6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ef40:	f107 0314 	add.w	r3, r7, #20
 800ef44:	3304      	adds	r3, #4
 800ef46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef48:	4619      	mov	r1, r3
 800ef4a:	68b8      	ldr	r0, [r7, #8]
 800ef4c:	f000 fc8e 	bl	800f86c <xQueueReceive>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d102      	bne.n	800ef5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ef56:	2310      	movs	r3, #16
 800ef58:	617b      	str	r3, [r7, #20]
 800ef5a:	e006      	b.n	800ef6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <osMessageGet+0xc6>
 800ef62:	2300      	movs	r3, #0
 800ef64:	e000      	b.n	800ef68 <osMessageGet+0xc8>
 800ef66:	2340      	movs	r3, #64	@ 0x40
 800ef68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	461c      	mov	r4, r3
 800ef6e:	f107 0314 	add.w	r3, r7, #20
 800ef72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	372c      	adds	r7, #44	@ 0x2c
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd90      	pop	{r4, r7, pc}
 800ef82:	bf00      	nop
 800ef84:	e000ed04 	.word	0xe000ed04

0800ef88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f103 0208 	add.w	r2, r3, #8
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f04f 32ff 	mov.w	r2, #4294967295
 800efa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f103 0208 	add.w	r2, r3, #8
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f103 0208 	add.w	r2, r3, #8
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800efe2:	b480      	push	{r7}
 800efe4:	b085      	sub	sp, #20
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	601a      	str	r2, [r3, #0]
}
 800f01e:	bf00      	nop
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f02a:	b480      	push	{r7}
 800f02c:	b085      	sub	sp, #20
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f040:	d103      	bne.n	800f04a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	e00c      	b.n	800f064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	3308      	adds	r3, #8
 800f04e:	60fb      	str	r3, [r7, #12]
 800f050:	e002      	b.n	800f058 <vListInsert+0x2e>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	429a      	cmp	r2, r3
 800f062:	d2f6      	bcs.n	800f052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	685a      	ldr	r2, [r3, #4]
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	601a      	str	r2, [r3, #0]
}
 800f090:	bf00      	nop
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6892      	ldr	r2, [r2, #8]
 800f0b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	6852      	ldr	r2, [r2, #4]
 800f0bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d103      	bne.n	800f0d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	689a      	ldr	r2, [r3, #8]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	1e5a      	subs	r2, r3, #1
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d10b      	bne.n	800f11c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f116:	bf00      	nop
 800f118:	bf00      	nop
 800f11a:	e7fd      	b.n	800f118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f11c:	f002 f8c4 	bl	80112a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f128:	68f9      	ldr	r1, [r7, #12]
 800f12a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f12c:	fb01 f303 	mul.w	r3, r1, r3
 800f130:	441a      	add	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f14c:	3b01      	subs	r3, #1
 800f14e:	68f9      	ldr	r1, [r7, #12]
 800f150:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f152:	fb01 f303 	mul.w	r3, r1, r3
 800f156:	441a      	add	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	22ff      	movs	r2, #255	@ 0xff
 800f160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	22ff      	movs	r2, #255	@ 0xff
 800f168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d114      	bne.n	800f19c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01a      	beq.n	800f1b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3310      	adds	r3, #16
 800f17e:	4618      	mov	r0, r3
 800f180:	f001 fb72 	bl	8010868 <xTaskRemoveFromEventList>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d012      	beq.n	800f1b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f18a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c0 <xQueueGenericReset+0xd0>)
 800f18c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	e009      	b.n	800f1b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	3310      	adds	r3, #16
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7ff fef1 	bl	800ef88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3324      	adds	r3, #36	@ 0x24
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff feec 	bl	800ef88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f1b0:	f002 f8ac 	bl	801130c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f1b4:	2301      	movs	r3, #1
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	e000ed04 	.word	0xe000ed04

0800f1c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08e      	sub	sp, #56	@ 0x38
 800f1c8:	af02      	add	r7, sp, #8
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10b      	bne.n	800f1f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f1ea:	bf00      	nop
 800f1ec:	bf00      	nop
 800f1ee:	e7fd      	b.n	800f1ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10b      	bne.n	800f20e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f208:	bf00      	nop
 800f20a:	bf00      	nop
 800f20c:	e7fd      	b.n	800f20a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d002      	beq.n	800f21a <xQueueGenericCreateStatic+0x56>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <xQueueGenericCreateStatic+0x5a>
 800f21a:	2301      	movs	r3, #1
 800f21c:	e000      	b.n	800f220 <xQueueGenericCreateStatic+0x5c>
 800f21e:	2300      	movs	r3, #0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10b      	bne.n	800f23c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	623b      	str	r3, [r7, #32]
}
 800f236:	bf00      	nop
 800f238:	bf00      	nop
 800f23a:	e7fd      	b.n	800f238 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <xQueueGenericCreateStatic+0x84>
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d101      	bne.n	800f24c <xQueueGenericCreateStatic+0x88>
 800f248:	2301      	movs	r3, #1
 800f24a:	e000      	b.n	800f24e <xQueueGenericCreateStatic+0x8a>
 800f24c:	2300      	movs	r3, #0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10b      	bne.n	800f26a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f256:	f383 8811 	msr	BASEPRI, r3
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	f3bf 8f4f 	dsb	sy
 800f262:	61fb      	str	r3, [r7, #28]
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop
 800f268:	e7fd      	b.n	800f266 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f26a:	2348      	movs	r3, #72	@ 0x48
 800f26c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b48      	cmp	r3, #72	@ 0x48
 800f272:	d00b      	beq.n	800f28c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	61bb      	str	r3, [r7, #24]
}
 800f286:	bf00      	nop
 800f288:	bf00      	nop
 800f28a:	e7fd      	b.n	800f288 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f28c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00d      	beq.n	800f2b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	68b9      	ldr	r1, [r7, #8]
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f000 f840 	bl	800f334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3730      	adds	r7, #48	@ 0x30
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b08a      	sub	sp, #40	@ 0x28
 800f2c2:	af02      	add	r7, sp, #8
 800f2c4:	60f8      	str	r0, [r7, #12]
 800f2c6:	60b9      	str	r1, [r7, #8]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10b      	bne.n	800f2ea <xQueueGenericCreate+0x2c>
	__asm volatile
 800f2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	613b      	str	r3, [r7, #16]
}
 800f2e4:	bf00      	nop
 800f2e6:	bf00      	nop
 800f2e8:	e7fd      	b.n	800f2e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	fb02 f303 	mul.w	r3, r2, r3
 800f2f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	3348      	adds	r3, #72	@ 0x48
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f002 f8f7 	bl	80114ec <pvPortMalloc>
 800f2fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d011      	beq.n	800f32a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	3348      	adds	r3, #72	@ 0x48
 800f30e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f318:	79fa      	ldrb	r2, [r7, #7]
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	4613      	mov	r3, r2
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	68b9      	ldr	r1, [r7, #8]
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 f805 	bl	800f334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f32a:	69bb      	ldr	r3, [r7, #24]
	}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d103      	bne.n	800f350 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	69ba      	ldr	r2, [r7, #24]
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	e002      	b.n	800f356 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f362:	2101      	movs	r1, #1
 800f364:	69b8      	ldr	r0, [r7, #24]
 800f366:	f7ff fec3 	bl	800f0f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f36a:	bf00      	nop
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f372:	b580      	push	{r7, lr}
 800f374:	b082      	sub	sp, #8
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00e      	beq.n	800f39e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f392:	2300      	movs	r3, #0
 800f394:	2200      	movs	r2, #0
 800f396:	2100      	movs	r1, #0
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f837 	bl	800f40c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f39e:	bf00      	nop
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b086      	sub	sp, #24
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	617b      	str	r3, [r7, #20]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	6939      	ldr	r1, [r7, #16]
 800f3be:	6978      	ldr	r0, [r7, #20]
 800f3c0:	f7ff ff7d 	bl	800f2be <xQueueGenericCreate>
 800f3c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f7ff ffd3 	bl	800f372 <prvInitialiseMutex>

		return xNewQueue;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
	}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b088      	sub	sp, #32
 800f3da:	af02      	add	r7, sp, #8
 800f3dc:	4603      	mov	r3, r0
 800f3de:	6039      	str	r1, [r7, #0]
 800f3e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	6939      	ldr	r1, [r7, #16]
 800f3f4:	6978      	ldr	r0, [r7, #20]
 800f3f6:	f7ff fee5 	bl	800f1c4 <xQueueGenericCreateStatic>
 800f3fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff ffb8 	bl	800f372 <prvInitialiseMutex>

		return xNewQueue;
 800f402:	68fb      	ldr	r3, [r7, #12]
	}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b08e      	sub	sp, #56	@ 0x38
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f41a:	2300      	movs	r3, #0
 800f41c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f424:	2b00      	cmp	r3, #0
 800f426:	d10b      	bne.n	800f440 <xQueueGenericSend+0x34>
	__asm volatile
 800f428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f43a:	bf00      	nop
 800f43c:	bf00      	nop
 800f43e:	e7fd      	b.n	800f43c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d103      	bne.n	800f44e <xQueueGenericSend+0x42>
 800f446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d101      	bne.n	800f452 <xQueueGenericSend+0x46>
 800f44e:	2301      	movs	r3, #1
 800f450:	e000      	b.n	800f454 <xQueueGenericSend+0x48>
 800f452:	2300      	movs	r3, #0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10b      	bne.n	800f470 <xQueueGenericSend+0x64>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f46a:	bf00      	nop
 800f46c:	bf00      	nop
 800f46e:	e7fd      	b.n	800f46c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	2b02      	cmp	r3, #2
 800f474:	d103      	bne.n	800f47e <xQueueGenericSend+0x72>
 800f476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d101      	bne.n	800f482 <xQueueGenericSend+0x76>
 800f47e:	2301      	movs	r3, #1
 800f480:	e000      	b.n	800f484 <xQueueGenericSend+0x78>
 800f482:	2300      	movs	r3, #0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10b      	bne.n	800f4a0 <xQueueGenericSend+0x94>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	623b      	str	r3, [r7, #32]
}
 800f49a:	bf00      	nop
 800f49c:	bf00      	nop
 800f49e:	e7fd      	b.n	800f49c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4a0:	f001 fba8 	bl	8010bf4 <xTaskGetSchedulerState>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <xQueueGenericSend+0xa4>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <xQueueGenericSend+0xa8>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e000      	b.n	800f4b6 <xQueueGenericSend+0xaa>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10b      	bne.n	800f4d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	61fb      	str	r3, [r7, #28]
}
 800f4cc:	bf00      	nop
 800f4ce:	bf00      	nop
 800f4d0:	e7fd      	b.n	800f4ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4d2:	f001 fee9 	bl	80112a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d302      	bcc.n	800f4e8 <xQueueGenericSend+0xdc>
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d129      	bne.n	800f53c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4ee:	f000 fc49 	bl	800fd84 <prvCopyDataToQueue>
 800f4f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d010      	beq.n	800f51e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fe:	3324      	adds	r3, #36	@ 0x24
 800f500:	4618      	mov	r0, r3
 800f502:	f001 f9b1 	bl	8010868 <xTaskRemoveFromEventList>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d013      	beq.n	800f534 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f50c:	4b3f      	ldr	r3, [pc, #252]	@ (800f60c <xQueueGenericSend+0x200>)
 800f50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	e00a      	b.n	800f534 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d007      	beq.n	800f534 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f524:	4b39      	ldr	r3, [pc, #228]	@ (800f60c <xQueueGenericSend+0x200>)
 800f526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f534:	f001 feea 	bl	801130c <vPortExitCritical>
				return pdPASS;
 800f538:	2301      	movs	r3, #1
 800f53a:	e063      	b.n	800f604 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d103      	bne.n	800f54a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f542:	f001 fee3 	bl	801130c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f546:	2300      	movs	r3, #0
 800f548:	e05c      	b.n	800f604 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d106      	bne.n	800f55e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f550:	f107 0314 	add.w	r3, r7, #20
 800f554:	4618      	mov	r0, r3
 800f556:	f001 f9eb 	bl	8010930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f55a:	2301      	movs	r3, #1
 800f55c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f55e:	f001 fed5 	bl	801130c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f562:	f000 ff6f 	bl	8010444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f566:	f001 fe9f 	bl	80112a8 <vPortEnterCritical>
 800f56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f56c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f570:	b25b      	sxtb	r3, r3
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d103      	bne.n	800f580 <xQueueGenericSend+0x174>
 800f578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f582:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f586:	b25b      	sxtb	r3, r3
 800f588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58c:	d103      	bne.n	800f596 <xQueueGenericSend+0x18a>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	2200      	movs	r2, #0
 800f592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f596:	f001 feb9 	bl	801130c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f59a:	1d3a      	adds	r2, r7, #4
 800f59c:	f107 0314 	add.w	r3, r7, #20
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f001 f9da 	bl	801095c <xTaskCheckForTimeOut>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d124      	bne.n	800f5f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f5ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5b0:	f000 fce0 	bl	800ff74 <prvIsQueueFull>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d018      	beq.n	800f5ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5bc:	3310      	adds	r3, #16
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f001 f92a 	bl	801081c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f5c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5ca:	f000 fc6b 	bl	800fea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f5ce:	f000 ff47 	bl	8010460 <xTaskResumeAll>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f47f af7c 	bne.w	800f4d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f5da:	4b0c      	ldr	r3, [pc, #48]	@ (800f60c <xQueueGenericSend+0x200>)
 800f5dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	e772      	b.n	800f4d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5ee:	f000 fc59 	bl	800fea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5f2:	f000 ff35 	bl	8010460 <xTaskResumeAll>
 800f5f6:	e76c      	b.n	800f4d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5fa:	f000 fc53 	bl	800fea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5fe:	f000 ff2f 	bl	8010460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f604:	4618      	mov	r0, r3
 800f606:	3738      	adds	r7, #56	@ 0x38
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	e000ed04 	.word	0xe000ed04

0800f610 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b090      	sub	sp, #64	@ 0x40
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10b      	bne.n	800f640 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f63a:	bf00      	nop
 800f63c:	bf00      	nop
 800f63e:	e7fd      	b.n	800f63c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d103      	bne.n	800f64e <xQueueGenericSendFromISR+0x3e>
 800f646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <xQueueGenericSendFromISR+0x42>
 800f64e:	2301      	movs	r3, #1
 800f650:	e000      	b.n	800f654 <xQueueGenericSendFromISR+0x44>
 800f652:	2300      	movs	r3, #0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d10b      	bne.n	800f670 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f66a:	bf00      	nop
 800f66c:	bf00      	nop
 800f66e:	e7fd      	b.n	800f66c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	2b02      	cmp	r3, #2
 800f674:	d103      	bne.n	800f67e <xQueueGenericSendFromISR+0x6e>
 800f676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d101      	bne.n	800f682 <xQueueGenericSendFromISR+0x72>
 800f67e:	2301      	movs	r3, #1
 800f680:	e000      	b.n	800f684 <xQueueGenericSendFromISR+0x74>
 800f682:	2300      	movs	r3, #0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d10b      	bne.n	800f6a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f68c:	f383 8811 	msr	BASEPRI, r3
 800f690:	f3bf 8f6f 	isb	sy
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	623b      	str	r3, [r7, #32]
}
 800f69a:	bf00      	nop
 800f69c:	bf00      	nop
 800f69e:	e7fd      	b.n	800f69c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6a0:	f001 fee2 	bl	8011468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f6a4:	f3ef 8211 	mrs	r2, BASEPRI
 800f6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	61fa      	str	r2, [r7, #28]
 800f6ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d302      	bcc.n	800f6d2 <xQueueGenericSendFromISR+0xc2>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d12f      	bne.n	800f732 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f6e8:	f000 fb4c 	bl	800fd84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f4:	d112      	bne.n	800f71c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d016      	beq.n	800f72c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f700:	3324      	adds	r3, #36	@ 0x24
 800f702:	4618      	mov	r0, r3
 800f704:	f001 f8b0 	bl	8010868 <xTaskRemoveFromEventList>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00e      	beq.n	800f72c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00b      	beq.n	800f72c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	601a      	str	r2, [r3, #0]
 800f71a:	e007      	b.n	800f72c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f71c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f720:	3301      	adds	r3, #1
 800f722:	b2db      	uxtb	r3, r3
 800f724:	b25a      	sxtb	r2, r3
 800f726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f72c:	2301      	movs	r3, #1
 800f72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f730:	e001      	b.n	800f736 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f732:	2300      	movs	r3, #0
 800f734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f738:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f740:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f744:	4618      	mov	r0, r3
 800f746:	3740      	adds	r7, #64	@ 0x40
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08e      	sub	sp, #56	@ 0x38
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10b      	bne.n	800f778 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f764:	f383 8811 	msr	BASEPRI, r3
 800f768:	f3bf 8f6f 	isb	sy
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	623b      	str	r3, [r7, #32]
}
 800f772:	bf00      	nop
 800f774:	bf00      	nop
 800f776:	e7fd      	b.n	800f774 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	61fb      	str	r3, [r7, #28]
}
 800f792:	bf00      	nop
 800f794:	bf00      	nop
 800f796:	e7fd      	b.n	800f794 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d103      	bne.n	800f7a8 <xQueueGiveFromISR+0x5c>
 800f7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <xQueueGiveFromISR+0x60>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e000      	b.n	800f7ae <xQueueGiveFromISR+0x62>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d10b      	bne.n	800f7ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	61bb      	str	r3, [r7, #24]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7ca:	f001 fe4d 	bl	8011468 <vPortValidateInterruptPriority>
	__asm volatile
 800f7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800f7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	617a      	str	r2, [r7, #20]
 800f7e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f7e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d22b      	bcs.n	800f852 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f80c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f814:	d112      	bne.n	800f83c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d016      	beq.n	800f84c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	3324      	adds	r3, #36	@ 0x24
 800f822:	4618      	mov	r0, r3
 800f824:	f001 f820 	bl	8010868 <xTaskRemoveFromEventList>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00e      	beq.n	800f84c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00b      	beq.n	800f84c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2201      	movs	r2, #1
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	e007      	b.n	800f84c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f840:	3301      	adds	r3, #1
 800f842:	b2db      	uxtb	r3, r3
 800f844:	b25a      	sxtb	r2, r3
 800f846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f84c:	2301      	movs	r3, #1
 800f84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f850:	e001      	b.n	800f856 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f852:	2300      	movs	r3, #0
 800f854:	637b      	str	r3, [r7, #52]	@ 0x34
 800f856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f858:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f383 8811 	msr	BASEPRI, r3
}
 800f860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f864:	4618      	mov	r0, r3
 800f866:	3738      	adds	r7, #56	@ 0x38
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08c      	sub	sp, #48	@ 0x30
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f878:	2300      	movs	r3, #0
 800f87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10b      	bne.n	800f89e <xQueueReceive+0x32>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	623b      	str	r3, [r7, #32]
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	e7fd      	b.n	800f89a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <xQueueReceive+0x40>
 800f8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <xQueueReceive+0x44>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e000      	b.n	800f8b2 <xQueueReceive+0x46>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10b      	bne.n	800f8ce <xQueueReceive+0x62>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	61fb      	str	r3, [r7, #28]
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	e7fd      	b.n	800f8ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8ce:	f001 f991 	bl	8010bf4 <xTaskGetSchedulerState>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d102      	bne.n	800f8de <xQueueReceive+0x72>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d101      	bne.n	800f8e2 <xQueueReceive+0x76>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e000      	b.n	800f8e4 <xQueueReceive+0x78>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10b      	bne.n	800f900 <xQueueReceive+0x94>
	__asm volatile
 800f8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	61bb      	str	r3, [r7, #24]
}
 800f8fa:	bf00      	nop
 800f8fc:	bf00      	nop
 800f8fe:	e7fd      	b.n	800f8fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f900:	f001 fcd2 	bl	80112a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f908:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d01f      	beq.n	800f950 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f910:	68b9      	ldr	r1, [r7, #8]
 800f912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f914:	f000 faa0 	bl	800fe58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91a:	1e5a      	subs	r2, r3, #1
 800f91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f922:	691b      	ldr	r3, [r3, #16]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00f      	beq.n	800f948 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92a:	3310      	adds	r3, #16
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 ff9b 	bl	8010868 <xTaskRemoveFromEventList>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d007      	beq.n	800f948 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f938:	4b3c      	ldr	r3, [pc, #240]	@ (800fa2c <xQueueReceive+0x1c0>)
 800f93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f948:	f001 fce0 	bl	801130c <vPortExitCritical>
				return pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e069      	b.n	800fa24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f956:	f001 fcd9 	bl	801130c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e062      	b.n	800fa24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f960:	2b00      	cmp	r3, #0
 800f962:	d106      	bne.n	800f972 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f964:	f107 0310 	add.w	r3, r7, #16
 800f968:	4618      	mov	r0, r3
 800f96a:	f000 ffe1 	bl	8010930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f96e:	2301      	movs	r3, #1
 800f970:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f972:	f001 fccb 	bl	801130c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f976:	f000 fd65 	bl	8010444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f97a:	f001 fc95 	bl	80112a8 <vPortEnterCritical>
 800f97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f984:	b25b      	sxtb	r3, r3
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98a:	d103      	bne.n	800f994 <xQueueReceive+0x128>
 800f98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a0:	d103      	bne.n	800f9aa <xQueueReceive+0x13e>
 800f9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9aa:	f001 fcaf 	bl	801130c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9ae:	1d3a      	adds	r2, r7, #4
 800f9b0:	f107 0310 	add.w	r3, r7, #16
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f000 ffd0 	bl	801095c <xTaskCheckForTimeOut>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d123      	bne.n	800fa0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9c4:	f000 fac0 	bl	800ff48 <prvIsQueueEmpty>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d017      	beq.n	800f9fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d0:	3324      	adds	r3, #36	@ 0x24
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 ff20 	bl	801081c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9de:	f000 fa61 	bl	800fea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9e2:	f000 fd3d 	bl	8010460 <xTaskResumeAll>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d189      	bne.n	800f900 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800fa2c <xQueueReceive+0x1c0>)
 800f9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	f3bf 8f6f 	isb	sy
 800f9fc:	e780      	b.n	800f900 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa00:	f000 fa50 	bl	800fea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa04:	f000 fd2c 	bl	8010460 <xTaskResumeAll>
 800fa08:	e77a      	b.n	800f900 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa0c:	f000 fa4a 	bl	800fea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa10:	f000 fd26 	bl	8010460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa16:	f000 fa97 	bl	800ff48 <prvIsQueueEmpty>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f43f af6f 	beq.w	800f900 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3730      	adds	r7, #48	@ 0x30
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	e000ed04 	.word	0xe000ed04

0800fa30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b08e      	sub	sp, #56	@ 0x38
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa42:	2300      	movs	r3, #0
 800fa44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10b      	bne.n	800fa64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	623b      	str	r3, [r7, #32]
}
 800fa5e:	bf00      	nop
 800fa60:	bf00      	nop
 800fa62:	e7fd      	b.n	800fa60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00b      	beq.n	800fa84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	61fb      	str	r3, [r7, #28]
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	e7fd      	b.n	800fa80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa84:	f001 f8b6 	bl	8010bf4 <xTaskGetSchedulerState>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d102      	bne.n	800fa94 <xQueueSemaphoreTake+0x64>
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d101      	bne.n	800fa98 <xQueueSemaphoreTake+0x68>
 800fa94:	2301      	movs	r3, #1
 800fa96:	e000      	b.n	800fa9a <xQueueSemaphoreTake+0x6a>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10b      	bne.n	800fab6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	61bb      	str	r3, [r7, #24]
}
 800fab0:	bf00      	nop
 800fab2:	bf00      	nop
 800fab4:	e7fd      	b.n	800fab2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fab6:	f001 fbf7 	bl	80112a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800faba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fabe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d024      	beq.n	800fb10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac8:	1e5a      	subs	r2, r3, #1
 800faca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800facc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800face:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d104      	bne.n	800fae0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fad6:	f001 fa39 	bl	8010f4c <pvTaskIncrementMutexHeldCount>
 800fada:	4602      	mov	r2, r0
 800fadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fade:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00f      	beq.n	800fb08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faea:	3310      	adds	r3, #16
 800faec:	4618      	mov	r0, r3
 800faee:	f000 febb 	bl	8010868 <xTaskRemoveFromEventList>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d007      	beq.n	800fb08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800faf8:	4b54      	ldr	r3, [pc, #336]	@ (800fc4c <xQueueSemaphoreTake+0x21c>)
 800fafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fafe:	601a      	str	r2, [r3, #0]
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb08:	f001 fc00 	bl	801130c <vPortExitCritical>
				return pdPASS;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	e098      	b.n	800fc42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d112      	bne.n	800fb3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00b      	beq.n	800fb34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	617b      	str	r3, [r7, #20]
}
 800fb2e:	bf00      	nop
 800fb30:	bf00      	nop
 800fb32:	e7fd      	b.n	800fb30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb34:	f001 fbea 	bl	801130c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e082      	b.n	800fc42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb42:	f107 030c 	add.w	r3, r7, #12
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 fef2 	bl	8010930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb50:	f001 fbdc 	bl	801130c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb54:	f000 fc76 	bl	8010444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb58:	f001 fba6 	bl	80112a8 <vPortEnterCritical>
 800fb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb62:	b25b      	sxtb	r3, r3
 800fb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb68:	d103      	bne.n	800fb72 <xQueueSemaphoreTake+0x142>
 800fb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7e:	d103      	bne.n	800fb88 <xQueueSemaphoreTake+0x158>
 800fb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb88:	f001 fbc0 	bl	801130c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb8c:	463a      	mov	r2, r7
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 fee1 	bl	801095c <xTaskCheckForTimeOut>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d132      	bne.n	800fc06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fba2:	f000 f9d1 	bl	800ff48 <prvIsQueueEmpty>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d026      	beq.n	800fbfa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d109      	bne.n	800fbc8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fbb4:	f001 fb78 	bl	80112a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f001 f837 	bl	8010c30 <xTaskPriorityInherit>
 800fbc2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fbc4:	f001 fba2 	bl	801130c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbca:	3324      	adds	r3, #36	@ 0x24
 800fbcc:	683a      	ldr	r2, [r7, #0]
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 fe23 	bl	801081c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbd8:	f000 f964 	bl	800fea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbdc:	f000 fc40 	bl	8010460 <xTaskResumeAll>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f47f af67 	bne.w	800fab6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fbe8:	4b18      	ldr	r3, [pc, #96]	@ (800fc4c <xQueueSemaphoreTake+0x21c>)
 800fbea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	e75d      	b.n	800fab6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fbfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbfc:	f000 f952 	bl	800fea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc00:	f000 fc2e 	bl	8010460 <xTaskResumeAll>
 800fc04:	e757      	b.n	800fab6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc08:	f000 f94c 	bl	800fea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc0c:	f000 fc28 	bl	8010460 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc12:	f000 f999 	bl	800ff48 <prvIsQueueEmpty>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f43f af4c 	beq.w	800fab6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d00d      	beq.n	800fc40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fc24:	f001 fb40 	bl	80112a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc2a:	f000 f893 	bl	800fd54 <prvGetDisinheritPriorityAfterTimeout>
 800fc2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc36:	4618      	mov	r0, r3
 800fc38:	f001 f8f8 	bl	8010e2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc3c:	f001 fb66 	bl	801130c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3738      	adds	r7, #56	@ 0x38
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	e000ed04 	.word	0xe000ed04

0800fc50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b08e      	sub	sp, #56	@ 0x38
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d10b      	bne.n	800fc7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc6a:	f383 8811 	msr	BASEPRI, r3
 800fc6e:	f3bf 8f6f 	isb	sy
 800fc72:	f3bf 8f4f 	dsb	sy
 800fc76:	623b      	str	r3, [r7, #32]
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	e7fd      	b.n	800fc7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <xQueueReceiveFromISR+0x3c>
 800fc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <xQueueReceiveFromISR+0x40>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <xQueueReceiveFromISR+0x42>
 800fc90:	2300      	movs	r3, #0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10b      	bne.n	800fcae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	61fb      	str	r3, [r7, #28]
}
 800fca8:	bf00      	nop
 800fcaa:	bf00      	nop
 800fcac:	e7fd      	b.n	800fcaa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcae:	f001 fbdb 	bl	8011468 <vPortValidateInterruptPriority>
	__asm volatile
 800fcb2:	f3ef 8211 	mrs	r2, BASEPRI
 800fcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	61ba      	str	r2, [r7, #24]
 800fcc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fcca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d02f      	beq.n	800fd3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fce4:	68b9      	ldr	r1, [r7, #8]
 800fce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fce8:	f000 f8b6 	bl	800fe58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcee:	1e5a      	subs	r2, r3, #1
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fcf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcfc:	d112      	bne.n	800fd24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d016      	beq.n	800fd34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	3310      	adds	r3, #16
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fdac 	bl	8010868 <xTaskRemoveFromEventList>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00e      	beq.n	800fd34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00b      	beq.n	800fd34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	e007      	b.n	800fd34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd28:	3301      	adds	r3, #1
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	b25a      	sxtb	r2, r3
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fd34:	2301      	movs	r3, #1
 800fd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd38:	e001      	b.n	800fd3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	f383 8811 	msr	BASEPRI, r3
}
 800fd48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3738      	adds	r7, #56	@ 0x38
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d006      	beq.n	800fd72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f1c3 0307 	rsb	r3, r3, #7
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	e001      	b.n	800fd76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd72:	2300      	movs	r3, #0
 800fd74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd76:	68fb      	ldr	r3, [r7, #12]
	}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3714      	adds	r7, #20
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b086      	sub	sp, #24
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fd90:	2300      	movs	r3, #0
 800fd92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10d      	bne.n	800fdbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d14d      	bne.n	800fe46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f000 ffb4 	bl	8010d1c <xTaskPriorityDisinherit>
 800fdb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	609a      	str	r2, [r3, #8]
 800fdbc:	e043      	b.n	800fe46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d119      	bne.n	800fdf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6858      	ldr	r0, [r3, #4]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdcc:	461a      	mov	r2, r3
 800fdce:	68b9      	ldr	r1, [r7, #8]
 800fdd0:	f00d fd47 	bl	801d862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fddc:	441a      	add	r2, r3
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	685a      	ldr	r2, [r3, #4]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d32b      	bcc.n	800fe46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	605a      	str	r2, [r3, #4]
 800fdf6:	e026      	b.n	800fe46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	68d8      	ldr	r0, [r3, #12]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe00:	461a      	mov	r2, r3
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	f00d fd2d 	bl	801d862 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	68da      	ldr	r2, [r3, #12]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe10:	425b      	negs	r3, r3
 800fe12:	441a      	add	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68da      	ldr	r2, [r3, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d207      	bcs.n	800fe34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe2c:	425b      	negs	r3, r3
 800fe2e:	441a      	add	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d105      	bne.n	800fe46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	3b01      	subs	r3, #1
 800fe44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fe4e:	697b      	ldr	r3, [r7, #20]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d018      	beq.n	800fe9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68da      	ldr	r2, [r3, #12]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe72:	441a      	add	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	68da      	ldr	r2, [r3, #12]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d303      	bcc.n	800fe8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	68d9      	ldr	r1, [r3, #12]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe94:	461a      	mov	r2, r3
 800fe96:	6838      	ldr	r0, [r7, #0]
 800fe98:	f00d fce3 	bl	801d862 <memcpy>
	}
}
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800feac:	f001 f9fc 	bl	80112a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800feb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800feb8:	e011      	b.n	800fede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d012      	beq.n	800fee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3324      	adds	r3, #36	@ 0x24
 800fec6:	4618      	mov	r0, r3
 800fec8:	f000 fcce 	bl	8010868 <xTaskRemoveFromEventList>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fed2:	f000 fda7 	bl	8010a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fed6:	7bfb      	ldrb	r3, [r7, #15]
 800fed8:	3b01      	subs	r3, #1
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	dce9      	bgt.n	800feba <prvUnlockQueue+0x16>
 800fee6:	e000      	b.n	800feea <prvUnlockQueue+0x46>
					break;
 800fee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	22ff      	movs	r2, #255	@ 0xff
 800feee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fef2:	f001 fa0b 	bl	801130c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fef6:	f001 f9d7 	bl	80112a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff02:	e011      	b.n	800ff28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d012      	beq.n	800ff32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3310      	adds	r3, #16
 800ff10:	4618      	mov	r0, r3
 800ff12:	f000 fca9 	bl	8010868 <xTaskRemoveFromEventList>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff1c:	f000 fd82 	bl	8010a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff20:	7bbb      	ldrb	r3, [r7, #14]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dce9      	bgt.n	800ff04 <prvUnlockQueue+0x60>
 800ff30:	e000      	b.n	800ff34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	22ff      	movs	r2, #255	@ 0xff
 800ff38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ff3c:	f001 f9e6 	bl	801130c <vPortExitCritical>
}
 800ff40:	bf00      	nop
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff50:	f001 f9aa 	bl	80112a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	60fb      	str	r3, [r7, #12]
 800ff60:	e001      	b.n	800ff66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff66:	f001 f9d1 	bl	801130c <vPortExitCritical>

	return xReturn;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff7c:	f001 f994 	bl	80112a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d102      	bne.n	800ff92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	60fb      	str	r3, [r7, #12]
 800ff90:	e001      	b.n	800ff96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ff92:	2300      	movs	r3, #0
 800ff94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff96:	f001 f9b9 	bl	801130c <vPortExitCritical>

	return xReturn;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08e      	sub	sp, #56	@ 0x38
 800ffa8:	af04      	add	r7, sp, #16
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ffb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10b      	bne.n	800ffd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	623b      	str	r3, [r7, #32]
}
 800ffca:	bf00      	nop
 800ffcc:	bf00      	nop
 800ffce:	e7fd      	b.n	800ffcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d10b      	bne.n	800ffee <xTaskCreateStatic+0x4a>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	61fb      	str	r3, [r7, #28]
}
 800ffe8:	bf00      	nop
 800ffea:	bf00      	nop
 800ffec:	e7fd      	b.n	800ffea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ffee:	23a0      	movs	r3, #160	@ 0xa0
 800fff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2ba0      	cmp	r3, #160	@ 0xa0
 800fff6:	d00b      	beq.n	8010010 <xTaskCreateStatic+0x6c>
	__asm volatile
 800fff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	61bb      	str	r3, [r7, #24]
}
 801000a:	bf00      	nop
 801000c:	bf00      	nop
 801000e:	e7fd      	b.n	801000c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010010:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010014:	2b00      	cmp	r3, #0
 8010016:	d01e      	beq.n	8010056 <xTaskCreateStatic+0xb2>
 8010018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801001a:	2b00      	cmp	r3, #0
 801001c:	d01b      	beq.n	8010056 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801001e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010020:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010026:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002a:	2202      	movs	r2, #2
 801002c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010030:	2300      	movs	r3, #0
 8010032:	9303      	str	r3, [sp, #12]
 8010034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010036:	9302      	str	r3, [sp, #8]
 8010038:	f107 0314 	add.w	r3, r7, #20
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 f851 	bl	80100f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801004e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010050:	f000 f8ee 	bl	8010230 <prvAddNewTaskToReadyList>
 8010054:	e001      	b.n	801005a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010056:	2300      	movs	r3, #0
 8010058:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801005a:	697b      	ldr	r3, [r7, #20]
	}
 801005c:	4618      	mov	r0, r3
 801005e:	3728      	adds	r7, #40	@ 0x28
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08c      	sub	sp, #48	@ 0x30
 8010068:	af04      	add	r7, sp, #16
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	4613      	mov	r3, r2
 8010072:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010074:	88fb      	ldrh	r3, [r7, #6]
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	4618      	mov	r0, r3
 801007a:	f001 fa37 	bl	80114ec <pvPortMalloc>
 801007e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00e      	beq.n	80100a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010086:	20a0      	movs	r0, #160	@ 0xa0
 8010088:	f001 fa30 	bl	80114ec <pvPortMalloc>
 801008c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d003      	beq.n	801009c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	697a      	ldr	r2, [r7, #20]
 8010098:	631a      	str	r2, [r3, #48]	@ 0x30
 801009a:	e005      	b.n	80100a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801009c:	6978      	ldr	r0, [r7, #20]
 801009e:	f001 faf3 	bl	8011688 <vPortFree>
 80100a2:	e001      	b.n	80100a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80100a4:	2300      	movs	r3, #0
 80100a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d017      	beq.n	80100de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80100b6:	88fa      	ldrh	r2, [r7, #6]
 80100b8:	2300      	movs	r3, #0
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	9302      	str	r3, [sp, #8]
 80100c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	68b9      	ldr	r1, [r7, #8]
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f000 f80f 	bl	80100f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80100d2:	69f8      	ldr	r0, [r7, #28]
 80100d4:	f000 f8ac 	bl	8010230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80100d8:	2301      	movs	r3, #1
 80100da:	61bb      	str	r3, [r7, #24]
 80100dc:	e002      	b.n	80100e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80100de:	f04f 33ff 	mov.w	r3, #4294967295
 80100e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80100e4:	69bb      	ldr	r3, [r7, #24]
	}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3720      	adds	r7, #32
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
	...

080100f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b088      	sub	sp, #32
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80100fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010108:	3b01      	subs	r3, #1
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	4413      	add	r3, r2
 801010e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	f023 0307 	bic.w	r3, r3, #7
 8010116:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	f003 0307 	and.w	r3, r3, #7
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00b      	beq.n	801013a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	617b      	str	r3, [r7, #20]
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	e7fd      	b.n	8010136 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01f      	beq.n	8010180 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010140:	2300      	movs	r3, #0
 8010142:	61fb      	str	r3, [r7, #28]
 8010144:	e012      	b.n	801016c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	4413      	add	r3, r2
 801014c:	7819      	ldrb	r1, [r3, #0]
 801014e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	4413      	add	r3, r2
 8010154:	3334      	adds	r3, #52	@ 0x34
 8010156:	460a      	mov	r2, r1
 8010158:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	4413      	add	r3, r2
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d006      	beq.n	8010174 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	3301      	adds	r3, #1
 801016a:	61fb      	str	r3, [r7, #28]
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	2b0f      	cmp	r3, #15
 8010170:	d9e9      	bls.n	8010146 <prvInitialiseNewTask+0x56>
 8010172:	e000      	b.n	8010176 <prvInitialiseNewTask+0x86>
			{
				break;
 8010174:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010178:	2200      	movs	r2, #0
 801017a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801017e:	e003      	b.n	8010188 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018a:	2b06      	cmp	r3, #6
 801018c:	d901      	bls.n	8010192 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801018e:	2306      	movs	r3, #6
 8010190:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010196:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801019a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801019c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801019e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a0:	2200      	movs	r2, #0
 80101a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80101a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a6:	3304      	adds	r3, #4
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe ff0d 	bl	800efc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80101ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b0:	3318      	adds	r3, #24
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fe ff08 	bl	800efc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80101b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c0:	f1c3 0207 	rsb	r2, r3, #7
 80101c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80101c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80101ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d0:	2200      	movs	r2, #0
 80101d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80101d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80101de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e0:	334c      	adds	r3, #76	@ 0x4c
 80101e2:	224c      	movs	r2, #76	@ 0x4c
 80101e4:	2100      	movs	r1, #0
 80101e6:	4618      	mov	r0, r3
 80101e8:	f00d fa3d 	bl	801d666 <memset>
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	4a0d      	ldr	r2, [pc, #52]	@ (8010224 <prvInitialiseNewTask+0x134>)
 80101f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80101f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f4:	4a0c      	ldr	r2, [pc, #48]	@ (8010228 <prvInitialiseNewTask+0x138>)
 80101f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80101f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101fa:	4a0c      	ldr	r2, [pc, #48]	@ (801022c <prvInitialiseNewTask+0x13c>)
 80101fc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	68f9      	ldr	r1, [r7, #12]
 8010202:	69b8      	ldr	r0, [r7, #24]
 8010204:	f000 ff1c 	bl	8011040 <pxPortInitialiseStack>
 8010208:	4602      	mov	r2, r0
 801020a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801020e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010210:	2b00      	cmp	r3, #0
 8010212:	d002      	beq.n	801021a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801021a:	bf00      	nop
 801021c:	3720      	adds	r7, #32
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	2000e6fc 	.word	0x2000e6fc
 8010228:	2000e764 	.word	0x2000e764
 801022c:	2000e7cc 	.word	0x2000e7cc

08010230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010238:	f001 f836 	bl	80112a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801023c:	4b2a      	ldr	r3, [pc, #168]	@ (80102e8 <prvAddNewTaskToReadyList+0xb8>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	3301      	adds	r3, #1
 8010242:	4a29      	ldr	r2, [pc, #164]	@ (80102e8 <prvAddNewTaskToReadyList+0xb8>)
 8010244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010246:	4b29      	ldr	r3, [pc, #164]	@ (80102ec <prvAddNewTaskToReadyList+0xbc>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d109      	bne.n	8010262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801024e:	4a27      	ldr	r2, [pc, #156]	@ (80102ec <prvAddNewTaskToReadyList+0xbc>)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010254:	4b24      	ldr	r3, [pc, #144]	@ (80102e8 <prvAddNewTaskToReadyList+0xb8>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2b01      	cmp	r3, #1
 801025a:	d110      	bne.n	801027e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801025c:	f000 fc06 	bl	8010a6c <prvInitialiseTaskLists>
 8010260:	e00d      	b.n	801027e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010262:	4b23      	ldr	r3, [pc, #140]	@ (80102f0 <prvAddNewTaskToReadyList+0xc0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d109      	bne.n	801027e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801026a:	4b20      	ldr	r3, [pc, #128]	@ (80102ec <prvAddNewTaskToReadyList+0xbc>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010274:	429a      	cmp	r2, r3
 8010276:	d802      	bhi.n	801027e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010278:	4a1c      	ldr	r2, [pc, #112]	@ (80102ec <prvAddNewTaskToReadyList+0xbc>)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801027e:	4b1d      	ldr	r3, [pc, #116]	@ (80102f4 <prvAddNewTaskToReadyList+0xc4>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3301      	adds	r3, #1
 8010284:	4a1b      	ldr	r2, [pc, #108]	@ (80102f4 <prvAddNewTaskToReadyList+0xc4>)
 8010286:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801028c:	2201      	movs	r2, #1
 801028e:	409a      	lsls	r2, r3
 8010290:	4b19      	ldr	r3, [pc, #100]	@ (80102f8 <prvAddNewTaskToReadyList+0xc8>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4313      	orrs	r3, r2
 8010296:	4a18      	ldr	r2, [pc, #96]	@ (80102f8 <prvAddNewTaskToReadyList+0xc8>)
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801029e:	4613      	mov	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4a15      	ldr	r2, [pc, #84]	@ (80102fc <prvAddNewTaskToReadyList+0xcc>)
 80102a8:	441a      	add	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	3304      	adds	r3, #4
 80102ae:	4619      	mov	r1, r3
 80102b0:	4610      	mov	r0, r2
 80102b2:	f7fe fe96 	bl	800efe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80102b6:	f001 f829 	bl	801130c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80102ba:	4b0d      	ldr	r3, [pc, #52]	@ (80102f0 <prvAddNewTaskToReadyList+0xc0>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00e      	beq.n	80102e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80102c2:	4b0a      	ldr	r3, [pc, #40]	@ (80102ec <prvAddNewTaskToReadyList+0xbc>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d207      	bcs.n	80102e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80102d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010300 <prvAddNewTaskToReadyList+0xd0>)
 80102d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102d6:	601a      	str	r2, [r3, #0]
 80102d8:	f3bf 8f4f 	dsb	sy
 80102dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102e0:	bf00      	nop
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	200055f4 	.word	0x200055f4
 80102ec:	200054f4 	.word	0x200054f4
 80102f0:	20005600 	.word	0x20005600
 80102f4:	20005610 	.word	0x20005610
 80102f8:	200055fc 	.word	0x200055fc
 80102fc:	200054f8 	.word	0x200054f8
 8010300:	e000ed04 	.word	0xe000ed04

08010304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801030c:	2300      	movs	r3, #0
 801030e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d018      	beq.n	8010348 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010316:	4b14      	ldr	r3, [pc, #80]	@ (8010368 <vTaskDelay+0x64>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00b      	beq.n	8010336 <vTaskDelay+0x32>
	__asm volatile
 801031e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010322:	f383 8811 	msr	BASEPRI, r3
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	60bb      	str	r3, [r7, #8]
}
 8010330:	bf00      	nop
 8010332:	bf00      	nop
 8010334:	e7fd      	b.n	8010332 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010336:	f000 f885 	bl	8010444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801033a:	2100      	movs	r1, #0
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 fe19 	bl	8010f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010342:	f000 f88d 	bl	8010460 <xTaskResumeAll>
 8010346:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d107      	bne.n	801035e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801034e:	4b07      	ldr	r3, [pc, #28]	@ (801036c <vTaskDelay+0x68>)
 8010350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010354:	601a      	str	r2, [r3, #0]
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801035e:	bf00      	nop
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	2000561c 	.word	0x2000561c
 801036c:	e000ed04 	.word	0xe000ed04

08010370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801037e:	463a      	mov	r2, r7
 8010380:	1d39      	adds	r1, r7, #4
 8010382:	f107 0308 	add.w	r3, r7, #8
 8010386:	4618      	mov	r0, r3
 8010388:	f7f1 f936 	bl	80015f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	9202      	str	r2, [sp, #8]
 8010394:	9301      	str	r3, [sp, #4]
 8010396:	2300      	movs	r3, #0
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	2300      	movs	r3, #0
 801039c:	460a      	mov	r2, r1
 801039e:	4921      	ldr	r1, [pc, #132]	@ (8010424 <vTaskStartScheduler+0xb4>)
 80103a0:	4821      	ldr	r0, [pc, #132]	@ (8010428 <vTaskStartScheduler+0xb8>)
 80103a2:	f7ff fdff 	bl	800ffa4 <xTaskCreateStatic>
 80103a6:	4603      	mov	r3, r0
 80103a8:	4a20      	ldr	r2, [pc, #128]	@ (801042c <vTaskStartScheduler+0xbc>)
 80103aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80103ac:	4b1f      	ldr	r3, [pc, #124]	@ (801042c <vTaskStartScheduler+0xbc>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80103b4:	2301      	movs	r3, #1
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	e001      	b.n	80103be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d11b      	bne.n	80103fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80103c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	613b      	str	r3, [r7, #16]
}
 80103d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80103d8:	4b15      	ldr	r3, [pc, #84]	@ (8010430 <vTaskStartScheduler+0xc0>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	334c      	adds	r3, #76	@ 0x4c
 80103de:	4a15      	ldr	r2, [pc, #84]	@ (8010434 <vTaskStartScheduler+0xc4>)
 80103e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80103e2:	4b15      	ldr	r3, [pc, #84]	@ (8010438 <vTaskStartScheduler+0xc8>)
 80103e4:	f04f 32ff 	mov.w	r2, #4294967295
 80103e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80103ea:	4b14      	ldr	r3, [pc, #80]	@ (801043c <vTaskStartScheduler+0xcc>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80103f0:	4b13      	ldr	r3, [pc, #76]	@ (8010440 <vTaskStartScheduler+0xd0>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80103f6:	f000 feb3 	bl	8011160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80103fa:	e00f      	b.n	801041c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010402:	d10b      	bne.n	801041c <vTaskStartScheduler+0xac>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	60fb      	str	r3, [r7, #12]
}
 8010416:	bf00      	nop
 8010418:	bf00      	nop
 801041a:	e7fd      	b.n	8010418 <vTaskStartScheduler+0xa8>
}
 801041c:	bf00      	nop
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	08020298 	.word	0x08020298
 8010428:	08010a3d 	.word	0x08010a3d
 801042c:	20005618 	.word	0x20005618
 8010430:	200054f4 	.word	0x200054f4
 8010434:	20000118 	.word	0x20000118
 8010438:	20005614 	.word	0x20005614
 801043c:	20005600 	.word	0x20005600
 8010440:	200055f8 	.word	0x200055f8

08010444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010444:	b480      	push	{r7}
 8010446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <vTaskSuspendAll+0x18>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3301      	adds	r3, #1
 801044e:	4a03      	ldr	r2, [pc, #12]	@ (801045c <vTaskSuspendAll+0x18>)
 8010450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010452:	bf00      	nop
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr
 801045c:	2000561c 	.word	0x2000561c

08010460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801046a:	2300      	movs	r3, #0
 801046c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801046e:	4b42      	ldr	r3, [pc, #264]	@ (8010578 <xTaskResumeAll+0x118>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d10b      	bne.n	801048e <xTaskResumeAll+0x2e>
	__asm volatile
 8010476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801047a:	f383 8811 	msr	BASEPRI, r3
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	603b      	str	r3, [r7, #0]
}
 8010488:	bf00      	nop
 801048a:	bf00      	nop
 801048c:	e7fd      	b.n	801048a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801048e:	f000 ff0b 	bl	80112a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010492:	4b39      	ldr	r3, [pc, #228]	@ (8010578 <xTaskResumeAll+0x118>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3b01      	subs	r3, #1
 8010498:	4a37      	ldr	r2, [pc, #220]	@ (8010578 <xTaskResumeAll+0x118>)
 801049a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801049c:	4b36      	ldr	r3, [pc, #216]	@ (8010578 <xTaskResumeAll+0x118>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d161      	bne.n	8010568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80104a4:	4b35      	ldr	r3, [pc, #212]	@ (801057c <xTaskResumeAll+0x11c>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d05d      	beq.n	8010568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104ac:	e02e      	b.n	801050c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104ae:	4b34      	ldr	r3, [pc, #208]	@ (8010580 <xTaskResumeAll+0x120>)
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	3318      	adds	r3, #24
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fe fdee 	bl	800f09c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3304      	adds	r3, #4
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fe fde9 	bl	800f09c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ce:	2201      	movs	r2, #1
 80104d0:	409a      	lsls	r2, r3
 80104d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010584 <xTaskResumeAll+0x124>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	4a2a      	ldr	r2, [pc, #168]	@ (8010584 <xTaskResumeAll+0x124>)
 80104da:	6013      	str	r3, [r2, #0]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104e0:	4613      	mov	r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4a27      	ldr	r2, [pc, #156]	@ (8010588 <xTaskResumeAll+0x128>)
 80104ea:	441a      	add	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3304      	adds	r3, #4
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fe fd75 	bl	800efe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104fc:	4b23      	ldr	r3, [pc, #140]	@ (801058c <xTaskResumeAll+0x12c>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010502:	429a      	cmp	r2, r3
 8010504:	d302      	bcc.n	801050c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010506:	4b22      	ldr	r3, [pc, #136]	@ (8010590 <xTaskResumeAll+0x130>)
 8010508:	2201      	movs	r2, #1
 801050a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801050c:	4b1c      	ldr	r3, [pc, #112]	@ (8010580 <xTaskResumeAll+0x120>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1cc      	bne.n	80104ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801051a:	f000 fb4b 	bl	8010bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801051e:	4b1d      	ldr	r3, [pc, #116]	@ (8010594 <xTaskResumeAll+0x134>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d010      	beq.n	801054c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801052a:	f000 f859 	bl	80105e0 <xTaskIncrementTick>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010534:	4b16      	ldr	r3, [pc, #88]	@ (8010590 <xTaskResumeAll+0x130>)
 8010536:	2201      	movs	r2, #1
 8010538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	3b01      	subs	r3, #1
 801053e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1f1      	bne.n	801052a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010546:	4b13      	ldr	r3, [pc, #76]	@ (8010594 <xTaskResumeAll+0x134>)
 8010548:	2200      	movs	r2, #0
 801054a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801054c:	4b10      	ldr	r3, [pc, #64]	@ (8010590 <xTaskResumeAll+0x130>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d009      	beq.n	8010568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010554:	2301      	movs	r3, #1
 8010556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010558:	4b0f      	ldr	r3, [pc, #60]	@ (8010598 <xTaskResumeAll+0x138>)
 801055a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801055e:	601a      	str	r2, [r3, #0]
 8010560:	f3bf 8f4f 	dsb	sy
 8010564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010568:	f000 fed0 	bl	801130c <vPortExitCritical>

	return xAlreadyYielded;
 801056c:	68bb      	ldr	r3, [r7, #8]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	2000561c 	.word	0x2000561c
 801057c:	200055f4 	.word	0x200055f4
 8010580:	200055b4 	.word	0x200055b4
 8010584:	200055fc 	.word	0x200055fc
 8010588:	200054f8 	.word	0x200054f8
 801058c:	200054f4 	.word	0x200054f4
 8010590:	20005608 	.word	0x20005608
 8010594:	20005604 	.word	0x20005604
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80105a2:	4b05      	ldr	r3, [pc, #20]	@ (80105b8 <xTaskGetTickCount+0x1c>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80105a8:	687b      	ldr	r3, [r7, #4]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	200055f8 	.word	0x200055f8

080105bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105c2:	f000 ff51 	bl	8011468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80105c6:	2300      	movs	r3, #0
 80105c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80105ca:	4b04      	ldr	r3, [pc, #16]	@ (80105dc <xTaskGetTickCountFromISR+0x20>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105d0:	683b      	ldr	r3, [r7, #0]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	200055f8 	.word	0x200055f8

080105e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105ea:	4b4f      	ldr	r3, [pc, #316]	@ (8010728 <xTaskIncrementTick+0x148>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f040 808f 	bne.w	8010712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80105f4:	4b4d      	ldr	r3, [pc, #308]	@ (801072c <xTaskIncrementTick+0x14c>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3301      	adds	r3, #1
 80105fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80105fc:	4a4b      	ldr	r2, [pc, #300]	@ (801072c <xTaskIncrementTick+0x14c>)
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d121      	bne.n	801064c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010608:	4b49      	ldr	r3, [pc, #292]	@ (8010730 <xTaskIncrementTick+0x150>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00b      	beq.n	801062a <xTaskIncrementTick+0x4a>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	603b      	str	r3, [r7, #0]
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop
 8010628:	e7fd      	b.n	8010626 <xTaskIncrementTick+0x46>
 801062a:	4b41      	ldr	r3, [pc, #260]	@ (8010730 <xTaskIncrementTick+0x150>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	60fb      	str	r3, [r7, #12]
 8010630:	4b40      	ldr	r3, [pc, #256]	@ (8010734 <xTaskIncrementTick+0x154>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a3e      	ldr	r2, [pc, #248]	@ (8010730 <xTaskIncrementTick+0x150>)
 8010636:	6013      	str	r3, [r2, #0]
 8010638:	4a3e      	ldr	r2, [pc, #248]	@ (8010734 <xTaskIncrementTick+0x154>)
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6013      	str	r3, [r2, #0]
 801063e:	4b3e      	ldr	r3, [pc, #248]	@ (8010738 <xTaskIncrementTick+0x158>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3301      	adds	r3, #1
 8010644:	4a3c      	ldr	r2, [pc, #240]	@ (8010738 <xTaskIncrementTick+0x158>)
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	f000 fab4 	bl	8010bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801064c:	4b3b      	ldr	r3, [pc, #236]	@ (801073c <xTaskIncrementTick+0x15c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	693a      	ldr	r2, [r7, #16]
 8010652:	429a      	cmp	r2, r3
 8010654:	d348      	bcc.n	80106e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010656:	4b36      	ldr	r3, [pc, #216]	@ (8010730 <xTaskIncrementTick+0x150>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d104      	bne.n	801066a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010660:	4b36      	ldr	r3, [pc, #216]	@ (801073c <xTaskIncrementTick+0x15c>)
 8010662:	f04f 32ff 	mov.w	r2, #4294967295
 8010666:	601a      	str	r2, [r3, #0]
					break;
 8010668:	e03e      	b.n	80106e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801066a:	4b31      	ldr	r3, [pc, #196]	@ (8010730 <xTaskIncrementTick+0x150>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801067a:	693a      	ldr	r2, [r7, #16]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	429a      	cmp	r2, r3
 8010680:	d203      	bcs.n	801068a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010682:	4a2e      	ldr	r2, [pc, #184]	@ (801073c <xTaskIncrementTick+0x15c>)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010688:	e02e      	b.n	80106e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	3304      	adds	r3, #4
 801068e:	4618      	mov	r0, r3
 8010690:	f7fe fd04 	bl	800f09c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010698:	2b00      	cmp	r3, #0
 801069a:	d004      	beq.n	80106a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	3318      	adds	r3, #24
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fe fcfb 	bl	800f09c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106aa:	2201      	movs	r2, #1
 80106ac:	409a      	lsls	r2, r3
 80106ae:	4b24      	ldr	r3, [pc, #144]	@ (8010740 <xTaskIncrementTick+0x160>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4313      	orrs	r3, r2
 80106b4:	4a22      	ldr	r2, [pc, #136]	@ (8010740 <xTaskIncrementTick+0x160>)
 80106b6:	6013      	str	r3, [r2, #0]
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106bc:	4613      	mov	r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	4413      	add	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4a1f      	ldr	r2, [pc, #124]	@ (8010744 <xTaskIncrementTick+0x164>)
 80106c6:	441a      	add	r2, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	3304      	adds	r3, #4
 80106cc:	4619      	mov	r1, r3
 80106ce:	4610      	mov	r0, r2
 80106d0:	f7fe fc87 	bl	800efe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106d8:	4b1b      	ldr	r3, [pc, #108]	@ (8010748 <xTaskIncrementTick+0x168>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106de:	429a      	cmp	r2, r3
 80106e0:	d3b9      	bcc.n	8010656 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80106e2:	2301      	movs	r3, #1
 80106e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106e6:	e7b6      	b.n	8010656 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80106e8:	4b17      	ldr	r3, [pc, #92]	@ (8010748 <xTaskIncrementTick+0x168>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106ee:	4915      	ldr	r1, [pc, #84]	@ (8010744 <xTaskIncrementTick+0x164>)
 80106f0:	4613      	mov	r3, r2
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4413      	add	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	440b      	add	r3, r1
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d901      	bls.n	8010704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010700:	2301      	movs	r3, #1
 8010702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010704:	4b11      	ldr	r3, [pc, #68]	@ (801074c <xTaskIncrementTick+0x16c>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d007      	beq.n	801071c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801070c:	2301      	movs	r3, #1
 801070e:	617b      	str	r3, [r7, #20]
 8010710:	e004      	b.n	801071c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010712:	4b0f      	ldr	r3, [pc, #60]	@ (8010750 <xTaskIncrementTick+0x170>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3301      	adds	r3, #1
 8010718:	4a0d      	ldr	r2, [pc, #52]	@ (8010750 <xTaskIncrementTick+0x170>)
 801071a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801071c:	697b      	ldr	r3, [r7, #20]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	2000561c 	.word	0x2000561c
 801072c:	200055f8 	.word	0x200055f8
 8010730:	200055ac 	.word	0x200055ac
 8010734:	200055b0 	.word	0x200055b0
 8010738:	2000560c 	.word	0x2000560c
 801073c:	20005614 	.word	0x20005614
 8010740:	200055fc 	.word	0x200055fc
 8010744:	200054f8 	.word	0x200054f8
 8010748:	200054f4 	.word	0x200054f4
 801074c:	20005608 	.word	0x20005608
 8010750:	20005604 	.word	0x20005604

08010754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010754:	b480      	push	{r7}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801075a:	4b2a      	ldr	r3, [pc, #168]	@ (8010804 <vTaskSwitchContext+0xb0>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010762:	4b29      	ldr	r3, [pc, #164]	@ (8010808 <vTaskSwitchContext+0xb4>)
 8010764:	2201      	movs	r2, #1
 8010766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010768:	e045      	b.n	80107f6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 801076a:	4b27      	ldr	r3, [pc, #156]	@ (8010808 <vTaskSwitchContext+0xb4>)
 801076c:	2200      	movs	r2, #0
 801076e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010770:	4b26      	ldr	r3, [pc, #152]	@ (801080c <vTaskSwitchContext+0xb8>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	fab3 f383 	clz	r3, r3
 801077c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801077e:	7afb      	ldrb	r3, [r7, #11]
 8010780:	f1c3 031f 	rsb	r3, r3, #31
 8010784:	617b      	str	r3, [r7, #20]
 8010786:	4922      	ldr	r1, [pc, #136]	@ (8010810 <vTaskSwitchContext+0xbc>)
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	4613      	mov	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	4413      	add	r3, r2
 8010790:	009b      	lsls	r3, r3, #2
 8010792:	440b      	add	r3, r1
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10b      	bne.n	80107b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 801079a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	607b      	str	r3, [r7, #4]
}
 80107ac:	bf00      	nop
 80107ae:	bf00      	nop
 80107b0:	e7fd      	b.n	80107ae <vTaskSwitchContext+0x5a>
 80107b2:	697a      	ldr	r2, [r7, #20]
 80107b4:	4613      	mov	r3, r2
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4a14      	ldr	r2, [pc, #80]	@ (8010810 <vTaskSwitchContext+0xbc>)
 80107be:	4413      	add	r3, r2
 80107c0:	613b      	str	r3, [r7, #16]
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	685a      	ldr	r2, [r3, #4]
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	605a      	str	r2, [r3, #4]
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	685a      	ldr	r2, [r3, #4]
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	3308      	adds	r3, #8
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d104      	bne.n	80107e2 <vTaskSwitchContext+0x8e>
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	685a      	ldr	r2, [r3, #4]
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	605a      	str	r2, [r3, #4]
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	4a0a      	ldr	r2, [pc, #40]	@ (8010814 <vTaskSwitchContext+0xc0>)
 80107ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107ec:	4b09      	ldr	r3, [pc, #36]	@ (8010814 <vTaskSwitchContext+0xc0>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	334c      	adds	r3, #76	@ 0x4c
 80107f2:	4a09      	ldr	r2, [pc, #36]	@ (8010818 <vTaskSwitchContext+0xc4>)
 80107f4:	6013      	str	r3, [r2, #0]
}
 80107f6:	bf00      	nop
 80107f8:	371c      	adds	r7, #28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	2000561c 	.word	0x2000561c
 8010808:	20005608 	.word	0x20005608
 801080c:	200055fc 	.word	0x200055fc
 8010810:	200054f8 	.word	0x200054f8
 8010814:	200054f4 	.word	0x200054f4
 8010818:	20000118 	.word	0x20000118

0801081c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d10b      	bne.n	8010844 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010830:	f383 8811 	msr	BASEPRI, r3
 8010834:	f3bf 8f6f 	isb	sy
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	60fb      	str	r3, [r7, #12]
}
 801083e:	bf00      	nop
 8010840:	bf00      	nop
 8010842:	e7fd      	b.n	8010840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010844:	4b07      	ldr	r3, [pc, #28]	@ (8010864 <vTaskPlaceOnEventList+0x48>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3318      	adds	r3, #24
 801084a:	4619      	mov	r1, r3
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7fe fbec 	bl	800f02a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010852:	2101      	movs	r1, #1
 8010854:	6838      	ldr	r0, [r7, #0]
 8010856:	f000 fb8d 	bl	8010f74 <prvAddCurrentTaskToDelayedList>
}
 801085a:	bf00      	nop
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	200054f4 	.word	0x200054f4

08010868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10b      	bne.n	8010896 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801087e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010882:	f383 8811 	msr	BASEPRI, r3
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	60fb      	str	r3, [r7, #12]
}
 8010890:	bf00      	nop
 8010892:	bf00      	nop
 8010894:	e7fd      	b.n	8010892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	3318      	adds	r3, #24
 801089a:	4618      	mov	r0, r3
 801089c:	f7fe fbfe 	bl	800f09c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010918 <xTaskRemoveFromEventList+0xb0>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d11c      	bne.n	80108e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	3304      	adds	r3, #4
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fe fbf5 	bl	800f09c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b6:	2201      	movs	r2, #1
 80108b8:	409a      	lsls	r2, r3
 80108ba:	4b18      	ldr	r3, [pc, #96]	@ (801091c <xTaskRemoveFromEventList+0xb4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4313      	orrs	r3, r2
 80108c0:	4a16      	ldr	r2, [pc, #88]	@ (801091c <xTaskRemoveFromEventList+0xb4>)
 80108c2:	6013      	str	r3, [r2, #0]
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c8:	4613      	mov	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4413      	add	r3, r2
 80108ce:	009b      	lsls	r3, r3, #2
 80108d0:	4a13      	ldr	r2, [pc, #76]	@ (8010920 <xTaskRemoveFromEventList+0xb8>)
 80108d2:	441a      	add	r2, r3
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	3304      	adds	r3, #4
 80108d8:	4619      	mov	r1, r3
 80108da:	4610      	mov	r0, r2
 80108dc:	f7fe fb81 	bl	800efe2 <vListInsertEnd>
 80108e0:	e005      	b.n	80108ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	3318      	adds	r3, #24
 80108e6:	4619      	mov	r1, r3
 80108e8:	480e      	ldr	r0, [pc, #56]	@ (8010924 <xTaskRemoveFromEventList+0xbc>)
 80108ea:	f7fe fb7a 	bl	800efe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010928 <xTaskRemoveFromEventList+0xc0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d905      	bls.n	8010908 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80108fc:	2301      	movs	r3, #1
 80108fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010900:	4b0a      	ldr	r3, [pc, #40]	@ (801092c <xTaskRemoveFromEventList+0xc4>)
 8010902:	2201      	movs	r2, #1
 8010904:	601a      	str	r2, [r3, #0]
 8010906:	e001      	b.n	801090c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010908:	2300      	movs	r3, #0
 801090a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801090c:	697b      	ldr	r3, [r7, #20]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	2000561c 	.word	0x2000561c
 801091c:	200055fc 	.word	0x200055fc
 8010920:	200054f8 	.word	0x200054f8
 8010924:	200055b4 	.word	0x200055b4
 8010928:	200054f4 	.word	0x200054f4
 801092c:	20005608 	.word	0x20005608

08010930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010938:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <vTaskInternalSetTimeOutState+0x24>)
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010940:	4b05      	ldr	r3, [pc, #20]	@ (8010958 <vTaskInternalSetTimeOutState+0x28>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	605a      	str	r2, [r3, #4]
}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr
 8010954:	2000560c 	.word	0x2000560c
 8010958:	200055f8 	.word	0x200055f8

0801095c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10b      	bne.n	8010984 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801096c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010970:	f383 8811 	msr	BASEPRI, r3
 8010974:	f3bf 8f6f 	isb	sy
 8010978:	f3bf 8f4f 	dsb	sy
 801097c:	613b      	str	r3, [r7, #16]
}
 801097e:	bf00      	nop
 8010980:	bf00      	nop
 8010982:	e7fd      	b.n	8010980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d10b      	bne.n	80109a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801098a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	60fb      	str	r3, [r7, #12]
}
 801099c:	bf00      	nop
 801099e:	bf00      	nop
 80109a0:	e7fd      	b.n	801099e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80109a2:	f000 fc81 	bl	80112a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80109a6:	4b1d      	ldr	r3, [pc, #116]	@ (8010a1c <xTaskCheckForTimeOut+0xc0>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	69ba      	ldr	r2, [r7, #24]
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109be:	d102      	bne.n	80109c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80109c0:	2300      	movs	r3, #0
 80109c2:	61fb      	str	r3, [r7, #28]
 80109c4:	e023      	b.n	8010a0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	4b15      	ldr	r3, [pc, #84]	@ (8010a20 <xTaskCheckForTimeOut+0xc4>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d007      	beq.n	80109e2 <xTaskCheckForTimeOut+0x86>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	69ba      	ldr	r2, [r7, #24]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d302      	bcc.n	80109e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80109dc:	2301      	movs	r3, #1
 80109de:	61fb      	str	r3, [r7, #28]
 80109e0:	e015      	b.n	8010a0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d20b      	bcs.n	8010a04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	1ad2      	subs	r2, r2, r3
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ff99 	bl	8010930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80109fe:	2300      	movs	r3, #0
 8010a00:	61fb      	str	r3, [r7, #28]
 8010a02:	e004      	b.n	8010a0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2200      	movs	r2, #0
 8010a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010a0e:	f000 fc7d 	bl	801130c <vPortExitCritical>

	return xReturn;
 8010a12:	69fb      	ldr	r3, [r7, #28]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	200055f8 	.word	0x200055f8
 8010a20:	2000560c 	.word	0x2000560c

08010a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010a28:	4b03      	ldr	r3, [pc, #12]	@ (8010a38 <vTaskMissedYield+0x14>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]
}
 8010a2e:	bf00      	nop
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	20005608 	.word	0x20005608

08010a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010a44:	f000 f852 	bl	8010aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010a48:	4b06      	ldr	r3, [pc, #24]	@ (8010a64 <prvIdleTask+0x28>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d9f9      	bls.n	8010a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010a50:	4b05      	ldr	r3, [pc, #20]	@ (8010a68 <prvIdleTask+0x2c>)
 8010a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a56:	601a      	str	r2, [r3, #0]
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010a60:	e7f0      	b.n	8010a44 <prvIdleTask+0x8>
 8010a62:	bf00      	nop
 8010a64:	200054f8 	.word	0x200054f8
 8010a68:	e000ed04 	.word	0xe000ed04

08010a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a72:	2300      	movs	r3, #0
 8010a74:	607b      	str	r3, [r7, #4]
 8010a76:	e00c      	b.n	8010a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4413      	add	r3, r2
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4a12      	ldr	r2, [pc, #72]	@ (8010acc <prvInitialiseTaskLists+0x60>)
 8010a84:	4413      	add	r3, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fe fa7e 	bl	800ef88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b06      	cmp	r3, #6
 8010a96:	d9ef      	bls.n	8010a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010a98:	480d      	ldr	r0, [pc, #52]	@ (8010ad0 <prvInitialiseTaskLists+0x64>)
 8010a9a:	f7fe fa75 	bl	800ef88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a9e:	480d      	ldr	r0, [pc, #52]	@ (8010ad4 <prvInitialiseTaskLists+0x68>)
 8010aa0:	f7fe fa72 	bl	800ef88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010aa4:	480c      	ldr	r0, [pc, #48]	@ (8010ad8 <prvInitialiseTaskLists+0x6c>)
 8010aa6:	f7fe fa6f 	bl	800ef88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010aaa:	480c      	ldr	r0, [pc, #48]	@ (8010adc <prvInitialiseTaskLists+0x70>)
 8010aac:	f7fe fa6c 	bl	800ef88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ab0:	480b      	ldr	r0, [pc, #44]	@ (8010ae0 <prvInitialiseTaskLists+0x74>)
 8010ab2:	f7fe fa69 	bl	800ef88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae4 <prvInitialiseTaskLists+0x78>)
 8010ab8:	4a05      	ldr	r2, [pc, #20]	@ (8010ad0 <prvInitialiseTaskLists+0x64>)
 8010aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010abc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae8 <prvInitialiseTaskLists+0x7c>)
 8010abe:	4a05      	ldr	r2, [pc, #20]	@ (8010ad4 <prvInitialiseTaskLists+0x68>)
 8010ac0:	601a      	str	r2, [r3, #0]
}
 8010ac2:	bf00      	nop
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	200054f8 	.word	0x200054f8
 8010ad0:	20005584 	.word	0x20005584
 8010ad4:	20005598 	.word	0x20005598
 8010ad8:	200055b4 	.word	0x200055b4
 8010adc:	200055c8 	.word	0x200055c8
 8010ae0:	200055e0 	.word	0x200055e0
 8010ae4:	200055ac 	.word	0x200055ac
 8010ae8:	200055b0 	.word	0x200055b0

08010aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010af2:	e019      	b.n	8010b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010af4:	f000 fbd8 	bl	80112a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010af8:	4b10      	ldr	r3, [pc, #64]	@ (8010b3c <prvCheckTasksWaitingTermination+0x50>)
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	3304      	adds	r3, #4
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fe fac9 	bl	800f09c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b40 <prvCheckTasksWaitingTermination+0x54>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	4a0b      	ldr	r2, [pc, #44]	@ (8010b40 <prvCheckTasksWaitingTermination+0x54>)
 8010b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010b14:	4b0b      	ldr	r3, [pc, #44]	@ (8010b44 <prvCheckTasksWaitingTermination+0x58>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8010b44 <prvCheckTasksWaitingTermination+0x58>)
 8010b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010b1e:	f000 fbf5 	bl	801130c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f810 	bl	8010b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b28:	4b06      	ldr	r3, [pc, #24]	@ (8010b44 <prvCheckTasksWaitingTermination+0x58>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1e1      	bne.n	8010af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010b30:	bf00      	nop
 8010b32:	bf00      	nop
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	200055c8 	.word	0x200055c8
 8010b40:	200055f4 	.word	0x200055f4
 8010b44:	200055dc 	.word	0x200055dc

08010b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	334c      	adds	r3, #76	@ 0x4c
 8010b54:	4618      	mov	r0, r3
 8010b56:	f00c fdbb 	bl	801d6d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d108      	bne.n	8010b76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fd8d 	bl	8011688 <vPortFree>
				vPortFree( pxTCB );
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 fd8a 	bl	8011688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010b74:	e019      	b.n	8010baa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d103      	bne.n	8010b88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 fd81 	bl	8011688 <vPortFree>
	}
 8010b86:	e010      	b.n	8010baa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d00b      	beq.n	8010baa <prvDeleteTCB+0x62>
	__asm volatile
 8010b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	60fb      	str	r3, [r7, #12]
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	e7fd      	b.n	8010ba6 <prvDeleteTCB+0x5e>
	}
 8010baa:	bf00      	nop
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bba:	4b0c      	ldr	r3, [pc, #48]	@ (8010bec <prvResetNextTaskUnblockTime+0x38>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d104      	bne.n	8010bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8010bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8010bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010bcc:	e008      	b.n	8010be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bce:	4b07      	ldr	r3, [pc, #28]	@ (8010bec <prvResetNextTaskUnblockTime+0x38>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	4a04      	ldr	r2, [pc, #16]	@ (8010bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8010bde:	6013      	str	r3, [r2, #0]
}
 8010be0:	bf00      	nop
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	200055ac 	.word	0x200055ac
 8010bf0:	20005614 	.word	0x20005614

08010bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8010c28 <xTaskGetSchedulerState+0x34>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d102      	bne.n	8010c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010c02:	2301      	movs	r3, #1
 8010c04:	607b      	str	r3, [r7, #4]
 8010c06:	e008      	b.n	8010c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c08:	4b08      	ldr	r3, [pc, #32]	@ (8010c2c <xTaskGetSchedulerState+0x38>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d102      	bne.n	8010c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010c10:	2302      	movs	r3, #2
 8010c12:	607b      	str	r3, [r7, #4]
 8010c14:	e001      	b.n	8010c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010c16:	2300      	movs	r3, #0
 8010c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010c1a:	687b      	ldr	r3, [r7, #4]
	}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr
 8010c28:	20005600 	.word	0x20005600
 8010c2c:	2000561c 	.word	0x2000561c

08010c30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d05e      	beq.n	8010d04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c4a:	4b31      	ldr	r3, [pc, #196]	@ (8010d10 <xTaskPriorityInherit+0xe0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d24e      	bcs.n	8010cf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	699b      	ldr	r3, [r3, #24]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	db06      	blt.n	8010c6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8010d10 <xTaskPriorityInherit+0xe0>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c62:	f1c3 0207 	rsb	r2, r3, #7
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	6959      	ldr	r1, [r3, #20]
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c72:	4613      	mov	r3, r2
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	4a26      	ldr	r2, [pc, #152]	@ (8010d14 <xTaskPriorityInherit+0xe4>)
 8010c7c:	4413      	add	r3, r2
 8010c7e:	4299      	cmp	r1, r3
 8010c80:	d12f      	bne.n	8010ce2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	3304      	adds	r3, #4
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe fa08 	bl	800f09c <uxListRemove>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d10a      	bne.n	8010ca8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c96:	2201      	movs	r2, #1
 8010c98:	fa02 f303 	lsl.w	r3, r2, r3
 8010c9c:	43da      	mvns	r2, r3
 8010c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8010d18 <xTaskPriorityInherit+0xe8>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8010d18 <xTaskPriorityInherit+0xe8>)
 8010ca6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ca8:	4b19      	ldr	r3, [pc, #100]	@ (8010d10 <xTaskPriorityInherit+0xe0>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	409a      	lsls	r2, r3
 8010cba:	4b17      	ldr	r3, [pc, #92]	@ (8010d18 <xTaskPriorityInherit+0xe8>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	4a15      	ldr	r2, [pc, #84]	@ (8010d18 <xTaskPriorityInherit+0xe8>)
 8010cc2:	6013      	str	r3, [r2, #0]
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cc8:	4613      	mov	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	4a10      	ldr	r2, [pc, #64]	@ (8010d14 <xTaskPriorityInherit+0xe4>)
 8010cd2:	441a      	add	r2, r3
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	3304      	adds	r3, #4
 8010cd8:	4619      	mov	r1, r3
 8010cda:	4610      	mov	r0, r2
 8010cdc:	f7fe f981 	bl	800efe2 <vListInsertEnd>
 8010ce0:	e004      	b.n	8010cec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8010d10 <xTaskPriorityInherit+0xe0>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010cec:	2301      	movs	r3, #1
 8010cee:	60fb      	str	r3, [r7, #12]
 8010cf0:	e008      	b.n	8010d04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <xTaskPriorityInherit+0xe0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d201      	bcs.n	8010d04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010d00:	2301      	movs	r3, #1
 8010d02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d04:	68fb      	ldr	r3, [r7, #12]
	}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	200054f4 	.word	0x200054f4
 8010d14:	200054f8 	.word	0x200054f8
 8010d18:	200055fc 	.word	0x200055fc

08010d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b086      	sub	sp, #24
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d070      	beq.n	8010e14 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010d32:	4b3b      	ldr	r3, [pc, #236]	@ (8010e20 <xTaskPriorityDisinherit+0x104>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d00b      	beq.n	8010d54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d40:	f383 8811 	msr	BASEPRI, r3
 8010d44:	f3bf 8f6f 	isb	sy
 8010d48:	f3bf 8f4f 	dsb	sy
 8010d4c:	60fb      	str	r3, [r7, #12]
}
 8010d4e:	bf00      	nop
 8010d50:	bf00      	nop
 8010d52:	e7fd      	b.n	8010d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10b      	bne.n	8010d74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d60:	f383 8811 	msr	BASEPRI, r3
 8010d64:	f3bf 8f6f 	isb	sy
 8010d68:	f3bf 8f4f 	dsb	sy
 8010d6c:	60bb      	str	r3, [r7, #8]
}
 8010d6e:	bf00      	nop
 8010d70:	bf00      	nop
 8010d72:	e7fd      	b.n	8010d70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d78:	1e5a      	subs	r2, r3, #1
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d044      	beq.n	8010e14 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d140      	bne.n	8010e14 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	3304      	adds	r3, #4
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fe f980 	bl	800f09c <uxListRemove>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d115      	bne.n	8010dce <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010da6:	491f      	ldr	r1, [pc, #124]	@ (8010e24 <xTaskPriorityDisinherit+0x108>)
 8010da8:	4613      	mov	r3, r2
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	440b      	add	r3, r1
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d10a      	bne.n	8010dce <xTaskPriorityDisinherit+0xb2>
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8010dc2:	43da      	mvns	r2, r3
 8010dc4:	4b18      	ldr	r3, [pc, #96]	@ (8010e28 <xTaskPriorityDisinherit+0x10c>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4013      	ands	r3, r2
 8010dca:	4a17      	ldr	r2, [pc, #92]	@ (8010e28 <xTaskPriorityDisinherit+0x10c>)
 8010dcc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dda:	f1c3 0207 	rsb	r2, r3, #7
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010de6:	2201      	movs	r2, #1
 8010de8:	409a      	lsls	r2, r3
 8010dea:	4b0f      	ldr	r3, [pc, #60]	@ (8010e28 <xTaskPriorityDisinherit+0x10c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	4a0d      	ldr	r2, [pc, #52]	@ (8010e28 <xTaskPriorityDisinherit+0x10c>)
 8010df2:	6013      	str	r3, [r2, #0]
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010df8:	4613      	mov	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	4413      	add	r3, r2
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4a08      	ldr	r2, [pc, #32]	@ (8010e24 <xTaskPriorityDisinherit+0x108>)
 8010e02:	441a      	add	r2, r3
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	3304      	adds	r3, #4
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	f7fe f8e9 	bl	800efe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010e10:	2301      	movs	r3, #1
 8010e12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e14:	697b      	ldr	r3, [r7, #20]
	}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3718      	adds	r7, #24
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	200054f4 	.word	0x200054f4
 8010e24:	200054f8 	.word	0x200054f8
 8010e28:	200055fc 	.word	0x200055fc

08010e2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b088      	sub	sp, #32
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d079      	beq.n	8010f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10b      	bne.n	8010e64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	60fb      	str	r3, [r7, #12]
}
 8010e5e:	bf00      	nop
 8010e60:	bf00      	nop
 8010e62:	e7fd      	b.n	8010e60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d902      	bls.n	8010e74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	61fb      	str	r3, [r7, #28]
 8010e72:	e002      	b.n	8010e7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e7e:	69fa      	ldr	r2, [r7, #28]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d059      	beq.n	8010f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e88:	697a      	ldr	r2, [r7, #20]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d154      	bne.n	8010f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8010f40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	69ba      	ldr	r2, [r7, #24]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d10b      	bne.n	8010eb0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	60bb      	str	r3, [r7, #8]
}
 8010eaa:	bf00      	nop
 8010eac:	bf00      	nop
 8010eae:	e7fd      	b.n	8010eac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	69fa      	ldr	r2, [r7, #28]
 8010eba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	699b      	ldr	r3, [r3, #24]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	db04      	blt.n	8010ece <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	f1c3 0207 	rsb	r2, r3, #7
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	6959      	ldr	r1, [r3, #20]
 8010ed2:	693a      	ldr	r2, [r7, #16]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	4a19      	ldr	r2, [pc, #100]	@ (8010f44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010ede:	4413      	add	r3, r2
 8010ee0:	4299      	cmp	r1, r3
 8010ee2:	d129      	bne.n	8010f38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fe f8d7 	bl	800f09c <uxListRemove>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10a      	bne.n	8010f0a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef8:	2201      	movs	r2, #1
 8010efa:	fa02 f303 	lsl.w	r3, r2, r3
 8010efe:	43da      	mvns	r2, r3
 8010f00:	4b11      	ldr	r3, [pc, #68]	@ (8010f48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4013      	ands	r3, r2
 8010f06:	4a10      	ldr	r2, [pc, #64]	@ (8010f48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010f08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f0e:	2201      	movs	r2, #1
 8010f10:	409a      	lsls	r2, r3
 8010f12:	4b0d      	ldr	r3, [pc, #52]	@ (8010f48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	4a0b      	ldr	r2, [pc, #44]	@ (8010f48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010f1a:	6013      	str	r3, [r2, #0]
 8010f1c:	69bb      	ldr	r3, [r7, #24]
 8010f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f20:	4613      	mov	r3, r2
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4a06      	ldr	r2, [pc, #24]	@ (8010f44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010f2a:	441a      	add	r2, r3
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7fe f855 	bl	800efe2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010f38:	bf00      	nop
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	200054f4 	.word	0x200054f4
 8010f44:	200054f8 	.word	0x200054f8
 8010f48:	200055fc 	.word	0x200055fc

08010f4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010f4c:	b480      	push	{r7}
 8010f4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010f50:	4b07      	ldr	r3, [pc, #28]	@ (8010f70 <pvTaskIncrementMutexHeldCount+0x24>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d004      	beq.n	8010f62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010f58:	4b05      	ldr	r3, [pc, #20]	@ (8010f70 <pvTaskIncrementMutexHeldCount+0x24>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f5e:	3201      	adds	r2, #1
 8010f60:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8010f62:	4b03      	ldr	r3, [pc, #12]	@ (8010f70 <pvTaskIncrementMutexHeldCount+0x24>)
 8010f64:	681b      	ldr	r3, [r3, #0]
	}
 8010f66:	4618      	mov	r0, r3
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr
 8010f70:	200054f4 	.word	0x200054f4

08010f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f7e:	4b29      	ldr	r3, [pc, #164]	@ (8011024 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f84:	4b28      	ldr	r3, [pc, #160]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe f886 	bl	800f09c <uxListRemove>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10b      	bne.n	8010fae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010f96:	4b24      	ldr	r3, [pc, #144]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa2:	43da      	mvns	r2, r3
 8010fa4:	4b21      	ldr	r3, [pc, #132]	@ (801102c <prvAddCurrentTaskToDelayedList+0xb8>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4013      	ands	r3, r2
 8010faa:	4a20      	ldr	r2, [pc, #128]	@ (801102c <prvAddCurrentTaskToDelayedList+0xb8>)
 8010fac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb4:	d10a      	bne.n	8010fcc <prvAddCurrentTaskToDelayedList+0x58>
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d007      	beq.n	8010fcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	481a      	ldr	r0, [pc, #104]	@ (8011030 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010fc6:	f7fe f80c 	bl	800efe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010fca:	e026      	b.n	801101a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010fd4:	4b14      	ldr	r3, [pc, #80]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010fdc:	68ba      	ldr	r2, [r7, #8]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d209      	bcs.n	8010ff8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fe4:	4b13      	ldr	r3, [pc, #76]	@ (8011034 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	3304      	adds	r3, #4
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	f7fe f81a 	bl	800f02a <vListInsert>
}
 8010ff6:	e010      	b.n	801101a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8011038 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8011028 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	3304      	adds	r3, #4
 8011002:	4619      	mov	r1, r3
 8011004:	4610      	mov	r0, r2
 8011006:	f7fe f810 	bl	800f02a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801100a:	4b0c      	ldr	r3, [pc, #48]	@ (801103c <prvAddCurrentTaskToDelayedList+0xc8>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	429a      	cmp	r2, r3
 8011012:	d202      	bcs.n	801101a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011014:	4a09      	ldr	r2, [pc, #36]	@ (801103c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	6013      	str	r3, [r2, #0]
}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	200055f8 	.word	0x200055f8
 8011028:	200054f4 	.word	0x200054f4
 801102c:	200055fc 	.word	0x200055fc
 8011030:	200055e0 	.word	0x200055e0
 8011034:	200055b0 	.word	0x200055b0
 8011038:	200055ac 	.word	0x200055ac
 801103c:	20005614 	.word	0x20005614

08011040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	3b04      	subs	r3, #4
 8011050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	3b04      	subs	r3, #4
 801105e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	f023 0201 	bic.w	r2, r3, #1
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3b04      	subs	r3, #4
 801106e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011070:	4a0c      	ldr	r2, [pc, #48]	@ (80110a4 <pxPortInitialiseStack+0x64>)
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	3b14      	subs	r3, #20
 801107a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3b04      	subs	r3, #4
 8011086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f06f 0202 	mvn.w	r2, #2
 801108e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	3b20      	subs	r3, #32
 8011094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011096:	68fb      	ldr	r3, [r7, #12]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3714      	adds	r7, #20
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr
 80110a4:	080110a9 	.word	0x080110a9

080110a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110b2:	4b13      	ldr	r3, [pc, #76]	@ (8011100 <prvTaskExitError+0x58>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ba:	d00b      	beq.n	80110d4 <prvTaskExitError+0x2c>
	__asm volatile
 80110bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c0:	f383 8811 	msr	BASEPRI, r3
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	60fb      	str	r3, [r7, #12]
}
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
 80110d2:	e7fd      	b.n	80110d0 <prvTaskExitError+0x28>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	60bb      	str	r3, [r7, #8]
}
 80110e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80110e8:	bf00      	nop
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d0fc      	beq.n	80110ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110f0:	bf00      	nop
 80110f2:	bf00      	nop
 80110f4:	3714      	adds	r7, #20
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	20000098 	.word	0x20000098
	...

08011110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011110:	4b07      	ldr	r3, [pc, #28]	@ (8011130 <pxCurrentTCBConst2>)
 8011112:	6819      	ldr	r1, [r3, #0]
 8011114:	6808      	ldr	r0, [r1, #0]
 8011116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111a:	f380 8809 	msr	PSP, r0
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f04f 0000 	mov.w	r0, #0
 8011126:	f380 8811 	msr	BASEPRI, r0
 801112a:	4770      	bx	lr
 801112c:	f3af 8000 	nop.w

08011130 <pxCurrentTCBConst2>:
 8011130:	200054f4 	.word	0x200054f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop

08011138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011138:	4808      	ldr	r0, [pc, #32]	@ (801115c <prvPortStartFirstTask+0x24>)
 801113a:	6800      	ldr	r0, [r0, #0]
 801113c:	6800      	ldr	r0, [r0, #0]
 801113e:	f380 8808 	msr	MSP, r0
 8011142:	f04f 0000 	mov.w	r0, #0
 8011146:	f380 8814 	msr	CONTROL, r0
 801114a:	b662      	cpsie	i
 801114c:	b661      	cpsie	f
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	f3bf 8f6f 	isb	sy
 8011156:	df00      	svc	0
 8011158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801115a:	bf00      	nop
 801115c:	e000ed08 	.word	0xe000ed08

08011160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011166:	4b47      	ldr	r3, [pc, #284]	@ (8011284 <xPortStartScheduler+0x124>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4a47      	ldr	r2, [pc, #284]	@ (8011288 <xPortStartScheduler+0x128>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d10b      	bne.n	8011188 <xPortStartScheduler+0x28>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	60fb      	str	r3, [r7, #12]
}
 8011182:	bf00      	nop
 8011184:	bf00      	nop
 8011186:	e7fd      	b.n	8011184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011188:	4b3e      	ldr	r3, [pc, #248]	@ (8011284 <xPortStartScheduler+0x124>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a3f      	ldr	r2, [pc, #252]	@ (801128c <xPortStartScheduler+0x12c>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d10b      	bne.n	80111aa <xPortStartScheduler+0x4a>
	__asm volatile
 8011192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	613b      	str	r3, [r7, #16]
}
 80111a4:	bf00      	nop
 80111a6:	bf00      	nop
 80111a8:	e7fd      	b.n	80111a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80111aa:	4b39      	ldr	r3, [pc, #228]	@ (8011290 <xPortStartScheduler+0x130>)
 80111ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	22ff      	movs	r2, #255	@ 0xff
 80111ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80111c4:	78fb      	ldrb	r3, [r7, #3]
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	4b31      	ldr	r3, [pc, #196]	@ (8011294 <xPortStartScheduler+0x134>)
 80111d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80111d2:	4b31      	ldr	r3, [pc, #196]	@ (8011298 <xPortStartScheduler+0x138>)
 80111d4:	2207      	movs	r2, #7
 80111d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80111d8:	e009      	b.n	80111ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80111da:	4b2f      	ldr	r3, [pc, #188]	@ (8011298 <xPortStartScheduler+0x138>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	3b01      	subs	r3, #1
 80111e0:	4a2d      	ldr	r2, [pc, #180]	@ (8011298 <xPortStartScheduler+0x138>)
 80111e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80111e4:	78fb      	ldrb	r3, [r7, #3]
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80111ee:	78fb      	ldrb	r3, [r7, #3]
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111f6:	2b80      	cmp	r3, #128	@ 0x80
 80111f8:	d0ef      	beq.n	80111da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80111fa:	4b27      	ldr	r3, [pc, #156]	@ (8011298 <xPortStartScheduler+0x138>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f1c3 0307 	rsb	r3, r3, #7
 8011202:	2b04      	cmp	r3, #4
 8011204:	d00b      	beq.n	801121e <xPortStartScheduler+0xbe>
	__asm volatile
 8011206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801120a:	f383 8811 	msr	BASEPRI, r3
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	60bb      	str	r3, [r7, #8]
}
 8011218:	bf00      	nop
 801121a:	bf00      	nop
 801121c:	e7fd      	b.n	801121a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801121e:	4b1e      	ldr	r3, [pc, #120]	@ (8011298 <xPortStartScheduler+0x138>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	021b      	lsls	r3, r3, #8
 8011224:	4a1c      	ldr	r2, [pc, #112]	@ (8011298 <xPortStartScheduler+0x138>)
 8011226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011228:	4b1b      	ldr	r3, [pc, #108]	@ (8011298 <xPortStartScheduler+0x138>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011230:	4a19      	ldr	r2, [pc, #100]	@ (8011298 <xPortStartScheduler+0x138>)
 8011232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	b2da      	uxtb	r2, r3
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801123c:	4b17      	ldr	r3, [pc, #92]	@ (801129c <xPortStartScheduler+0x13c>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4a16      	ldr	r2, [pc, #88]	@ (801129c <xPortStartScheduler+0x13c>)
 8011242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011248:	4b14      	ldr	r3, [pc, #80]	@ (801129c <xPortStartScheduler+0x13c>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a13      	ldr	r2, [pc, #76]	@ (801129c <xPortStartScheduler+0x13c>)
 801124e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011254:	f000 f8da 	bl	801140c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011258:	4b11      	ldr	r3, [pc, #68]	@ (80112a0 <xPortStartScheduler+0x140>)
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801125e:	f000 f8f9 	bl	8011454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011262:	4b10      	ldr	r3, [pc, #64]	@ (80112a4 <xPortStartScheduler+0x144>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a0f      	ldr	r2, [pc, #60]	@ (80112a4 <xPortStartScheduler+0x144>)
 8011268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801126c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801126e:	f7ff ff63 	bl	8011138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011272:	f7ff fa6f 	bl	8010754 <vTaskSwitchContext>
	prvTaskExitError();
 8011276:	f7ff ff17 	bl	80110a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801127a:	2300      	movs	r3, #0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	e000ed00 	.word	0xe000ed00
 8011288:	410fc271 	.word	0x410fc271
 801128c:	410fc270 	.word	0x410fc270
 8011290:	e000e400 	.word	0xe000e400
 8011294:	20005620 	.word	0x20005620
 8011298:	20005624 	.word	0x20005624
 801129c:	e000ed20 	.word	0xe000ed20
 80112a0:	20000098 	.word	0x20000098
 80112a4:	e000ef34 	.word	0xe000ef34

080112a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
	__asm volatile
 80112ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	607b      	str	r3, [r7, #4]
}
 80112c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80112c2:	4b10      	ldr	r3, [pc, #64]	@ (8011304 <vPortEnterCritical+0x5c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3301      	adds	r3, #1
 80112c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011304 <vPortEnterCritical+0x5c>)
 80112ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80112cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011304 <vPortEnterCritical+0x5c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d110      	bne.n	80112f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80112d4:	4b0c      	ldr	r3, [pc, #48]	@ (8011308 <vPortEnterCritical+0x60>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00b      	beq.n	80112f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	603b      	str	r3, [r7, #0]
}
 80112f0:	bf00      	nop
 80112f2:	bf00      	nop
 80112f4:	e7fd      	b.n	80112f2 <vPortEnterCritical+0x4a>
	}
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	20000098 	.word	0x20000098
 8011308:	e000ed04 	.word	0xe000ed04

0801130c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011312:	4b12      	ldr	r3, [pc, #72]	@ (801135c <vPortExitCritical+0x50>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d10b      	bne.n	8011332 <vPortExitCritical+0x26>
	__asm volatile
 801131a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	607b      	str	r3, [r7, #4]
}
 801132c:	bf00      	nop
 801132e:	bf00      	nop
 8011330:	e7fd      	b.n	801132e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011332:	4b0a      	ldr	r3, [pc, #40]	@ (801135c <vPortExitCritical+0x50>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	3b01      	subs	r3, #1
 8011338:	4a08      	ldr	r2, [pc, #32]	@ (801135c <vPortExitCritical+0x50>)
 801133a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801133c:	4b07      	ldr	r3, [pc, #28]	@ (801135c <vPortExitCritical+0x50>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d105      	bne.n	8011350 <vPortExitCritical+0x44>
 8011344:	2300      	movs	r3, #0
 8011346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	f383 8811 	msr	BASEPRI, r3
}
 801134e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011350:	bf00      	nop
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr
 801135c:	20000098 	.word	0x20000098

08011360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011360:	f3ef 8009 	mrs	r0, PSP
 8011364:	f3bf 8f6f 	isb	sy
 8011368:	4b15      	ldr	r3, [pc, #84]	@ (80113c0 <pxCurrentTCBConst>)
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	f01e 0f10 	tst.w	lr, #16
 8011370:	bf08      	it	eq
 8011372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137a:	6010      	str	r0, [r2, #0]
 801137c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011384:	f380 8811 	msr	BASEPRI, r0
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f7ff f9e0 	bl	8010754 <vTaskSwitchContext>
 8011394:	f04f 0000 	mov.w	r0, #0
 8011398:	f380 8811 	msr	BASEPRI, r0
 801139c:	bc09      	pop	{r0, r3}
 801139e:	6819      	ldr	r1, [r3, #0]
 80113a0:	6808      	ldr	r0, [r1, #0]
 80113a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a6:	f01e 0f10 	tst.w	lr, #16
 80113aa:	bf08      	it	eq
 80113ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80113b0:	f380 8809 	msr	PSP, r0
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	f3af 8000 	nop.w

080113c0 <pxCurrentTCBConst>:
 80113c0:	200054f4 	.word	0x200054f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80113c4:	bf00      	nop
 80113c6:	bf00      	nop

080113c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	607b      	str	r3, [r7, #4]
}
 80113e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80113e2:	f7ff f8fd 	bl	80105e0 <xTaskIncrementTick>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d003      	beq.n	80113f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80113ec:	4b06      	ldr	r3, [pc, #24]	@ (8011408 <SysTick_Handler+0x40>)
 80113ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	2300      	movs	r3, #0
 80113f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	f383 8811 	msr	BASEPRI, r3
}
 80113fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011400:	bf00      	nop
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	e000ed04 	.word	0xe000ed04

0801140c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801140c:	b480      	push	{r7}
 801140e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011410:	4b0b      	ldr	r3, [pc, #44]	@ (8011440 <vPortSetupTimerInterrupt+0x34>)
 8011412:	2200      	movs	r2, #0
 8011414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011416:	4b0b      	ldr	r3, [pc, #44]	@ (8011444 <vPortSetupTimerInterrupt+0x38>)
 8011418:	2200      	movs	r2, #0
 801141a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801141c:	4b0a      	ldr	r3, [pc, #40]	@ (8011448 <vPortSetupTimerInterrupt+0x3c>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a0a      	ldr	r2, [pc, #40]	@ (801144c <vPortSetupTimerInterrupt+0x40>)
 8011422:	fba2 2303 	umull	r2, r3, r2, r3
 8011426:	099b      	lsrs	r3, r3, #6
 8011428:	4a09      	ldr	r2, [pc, #36]	@ (8011450 <vPortSetupTimerInterrupt+0x44>)
 801142a:	3b01      	subs	r3, #1
 801142c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801142e:	4b04      	ldr	r3, [pc, #16]	@ (8011440 <vPortSetupTimerInterrupt+0x34>)
 8011430:	2207      	movs	r2, #7
 8011432:	601a      	str	r2, [r3, #0]
}
 8011434:	bf00      	nop
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	e000e010 	.word	0xe000e010
 8011444:	e000e018 	.word	0xe000e018
 8011448:	20000000 	.word	0x20000000
 801144c:	10624dd3 	.word	0x10624dd3
 8011450:	e000e014 	.word	0xe000e014

08011454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011464 <vPortEnableVFP+0x10>
 8011458:	6801      	ldr	r1, [r0, #0]
 801145a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801145e:	6001      	str	r1, [r0, #0]
 8011460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011462:	bf00      	nop
 8011464:	e000ed88 	.word	0xe000ed88

08011468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801146e:	f3ef 8305 	mrs	r3, IPSR
 8011472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b0f      	cmp	r3, #15
 8011478:	d915      	bls.n	80114a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801147a:	4a18      	ldr	r2, [pc, #96]	@ (80114dc <vPortValidateInterruptPriority+0x74>)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	4413      	add	r3, r2
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011484:	4b16      	ldr	r3, [pc, #88]	@ (80114e0 <vPortValidateInterruptPriority+0x78>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	7afa      	ldrb	r2, [r7, #11]
 801148a:	429a      	cmp	r2, r3
 801148c:	d20b      	bcs.n	80114a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801148e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	607b      	str	r3, [r7, #4]
}
 80114a0:	bf00      	nop
 80114a2:	bf00      	nop
 80114a4:	e7fd      	b.n	80114a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80114a6:	4b0f      	ldr	r3, [pc, #60]	@ (80114e4 <vPortValidateInterruptPriority+0x7c>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80114ae:	4b0e      	ldr	r3, [pc, #56]	@ (80114e8 <vPortValidateInterruptPriority+0x80>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d90b      	bls.n	80114ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80114b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ba:	f383 8811 	msr	BASEPRI, r3
 80114be:	f3bf 8f6f 	isb	sy
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	603b      	str	r3, [r7, #0]
}
 80114c8:	bf00      	nop
 80114ca:	bf00      	nop
 80114cc:	e7fd      	b.n	80114ca <vPortValidateInterruptPriority+0x62>
	}
 80114ce:	bf00      	nop
 80114d0:	3714      	adds	r7, #20
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	e000e3f0 	.word	0xe000e3f0
 80114e0:	20005620 	.word	0x20005620
 80114e4:	e000ed0c 	.word	0xe000ed0c
 80114e8:	20005624 	.word	0x20005624

080114ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b08a      	sub	sp, #40	@ 0x28
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80114f4:	2300      	movs	r3, #0
 80114f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80114f8:	f7fe ffa4 	bl	8010444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80114fc:	4b5c      	ldr	r3, [pc, #368]	@ (8011670 <pvPortMalloc+0x184>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d101      	bne.n	8011508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011504:	f000 f924 	bl	8011750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011508:	4b5a      	ldr	r3, [pc, #360]	@ (8011674 <pvPortMalloc+0x188>)
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4013      	ands	r3, r2
 8011510:	2b00      	cmp	r3, #0
 8011512:	f040 8095 	bne.w	8011640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d01e      	beq.n	801155a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801151c:	2208      	movs	r2, #8
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4413      	add	r3, r2
 8011522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f003 0307 	and.w	r3, r3, #7
 801152a:	2b00      	cmp	r3, #0
 801152c:	d015      	beq.n	801155a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f023 0307 	bic.w	r3, r3, #7
 8011534:	3308      	adds	r3, #8
 8011536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f003 0307 	and.w	r3, r3, #7
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00b      	beq.n	801155a <pvPortMalloc+0x6e>
	__asm volatile
 8011542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011546:	f383 8811 	msr	BASEPRI, r3
 801154a:	f3bf 8f6f 	isb	sy
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	617b      	str	r3, [r7, #20]
}
 8011554:	bf00      	nop
 8011556:	bf00      	nop
 8011558:	e7fd      	b.n	8011556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d06f      	beq.n	8011640 <pvPortMalloc+0x154>
 8011560:	4b45      	ldr	r3, [pc, #276]	@ (8011678 <pvPortMalloc+0x18c>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	429a      	cmp	r2, r3
 8011568:	d86a      	bhi.n	8011640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801156a:	4b44      	ldr	r3, [pc, #272]	@ (801167c <pvPortMalloc+0x190>)
 801156c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801156e:	4b43      	ldr	r3, [pc, #268]	@ (801167c <pvPortMalloc+0x190>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011574:	e004      	b.n	8011580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	429a      	cmp	r2, r3
 8011588:	d903      	bls.n	8011592 <pvPortMalloc+0xa6>
 801158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f1      	bne.n	8011576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011592:	4b37      	ldr	r3, [pc, #220]	@ (8011670 <pvPortMalloc+0x184>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011598:	429a      	cmp	r2, r3
 801159a:	d051      	beq.n	8011640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801159c:	6a3b      	ldr	r3, [r7, #32]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2208      	movs	r2, #8
 80115a2:	4413      	add	r3, r2
 80115a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	6a3b      	ldr	r3, [r7, #32]
 80115ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	685a      	ldr	r2, [r3, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	1ad2      	subs	r2, r2, r3
 80115b6:	2308      	movs	r3, #8
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d920      	bls.n	8011600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80115be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4413      	add	r3, r2
 80115c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	f003 0307 	and.w	r3, r3, #7
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d00b      	beq.n	80115e8 <pvPortMalloc+0xfc>
	__asm volatile
 80115d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d4:	f383 8811 	msr	BASEPRI, r3
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	613b      	str	r3, [r7, #16]
}
 80115e2:	bf00      	nop
 80115e4:	bf00      	nop
 80115e6:	e7fd      	b.n	80115e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80115e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	1ad2      	subs	r2, r2, r3
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80115fa:	69b8      	ldr	r0, [r7, #24]
 80115fc:	f000 f90a 	bl	8011814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011600:	4b1d      	ldr	r3, [pc, #116]	@ (8011678 <pvPortMalloc+0x18c>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	4a1b      	ldr	r2, [pc, #108]	@ (8011678 <pvPortMalloc+0x18c>)
 801160c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801160e:	4b1a      	ldr	r3, [pc, #104]	@ (8011678 <pvPortMalloc+0x18c>)
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	4b1b      	ldr	r3, [pc, #108]	@ (8011680 <pvPortMalloc+0x194>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	429a      	cmp	r2, r3
 8011618:	d203      	bcs.n	8011622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801161a:	4b17      	ldr	r3, [pc, #92]	@ (8011678 <pvPortMalloc+0x18c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4a18      	ldr	r2, [pc, #96]	@ (8011680 <pvPortMalloc+0x194>)
 8011620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	4b13      	ldr	r3, [pc, #76]	@ (8011674 <pvPortMalloc+0x188>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	431a      	orrs	r2, r3
 801162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011632:	2200      	movs	r2, #0
 8011634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011636:	4b13      	ldr	r3, [pc, #76]	@ (8011684 <pvPortMalloc+0x198>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	3301      	adds	r3, #1
 801163c:	4a11      	ldr	r2, [pc, #68]	@ (8011684 <pvPortMalloc+0x198>)
 801163e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011640:	f7fe ff0e 	bl	8010460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	f003 0307 	and.w	r3, r3, #7
 801164a:	2b00      	cmp	r3, #0
 801164c:	d00b      	beq.n	8011666 <pvPortMalloc+0x17a>
	__asm volatile
 801164e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011652:	f383 8811 	msr	BASEPRI, r3
 8011656:	f3bf 8f6f 	isb	sy
 801165a:	f3bf 8f4f 	dsb	sy
 801165e:	60fb      	str	r3, [r7, #12]
}
 8011660:	bf00      	nop
 8011662:	bf00      	nop
 8011664:	e7fd      	b.n	8011662 <pvPortMalloc+0x176>
	return pvReturn;
 8011666:	69fb      	ldr	r3, [r7, #28]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3728      	adds	r7, #40	@ 0x28
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	20009230 	.word	0x20009230
 8011674:	20009244 	.word	0x20009244
 8011678:	20009234 	.word	0x20009234
 801167c:	20009228 	.word	0x20009228
 8011680:	20009238 	.word	0x20009238
 8011684:	2000923c 	.word	0x2000923c

08011688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d04f      	beq.n	801173a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801169a:	2308      	movs	r3, #8
 801169c:	425b      	negs	r3, r3
 801169e:	697a      	ldr	r2, [r7, #20]
 80116a0:	4413      	add	r3, r2
 80116a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	4b25      	ldr	r3, [pc, #148]	@ (8011744 <vPortFree+0xbc>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4013      	ands	r3, r2
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10b      	bne.n	80116ce <vPortFree+0x46>
	__asm volatile
 80116b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	60fb      	str	r3, [r7, #12]
}
 80116c8:	bf00      	nop
 80116ca:	bf00      	nop
 80116cc:	e7fd      	b.n	80116ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00b      	beq.n	80116ee <vPortFree+0x66>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	60bb      	str	r3, [r7, #8]
}
 80116e8:	bf00      	nop
 80116ea:	bf00      	nop
 80116ec:	e7fd      	b.n	80116ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	4b14      	ldr	r3, [pc, #80]	@ (8011744 <vPortFree+0xbc>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4013      	ands	r3, r2
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d01e      	beq.n	801173a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d11a      	bne.n	801173a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	685a      	ldr	r2, [r3, #4]
 8011708:	4b0e      	ldr	r3, [pc, #56]	@ (8011744 <vPortFree+0xbc>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	43db      	mvns	r3, r3
 801170e:	401a      	ands	r2, r3
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011714:	f7fe fe96 	bl	8010444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	685a      	ldr	r2, [r3, #4]
 801171c:	4b0a      	ldr	r3, [pc, #40]	@ (8011748 <vPortFree+0xc0>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4413      	add	r3, r2
 8011722:	4a09      	ldr	r2, [pc, #36]	@ (8011748 <vPortFree+0xc0>)
 8011724:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011726:	6938      	ldr	r0, [r7, #16]
 8011728:	f000 f874 	bl	8011814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801172c:	4b07      	ldr	r3, [pc, #28]	@ (801174c <vPortFree+0xc4>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	3301      	adds	r3, #1
 8011732:	4a06      	ldr	r2, [pc, #24]	@ (801174c <vPortFree+0xc4>)
 8011734:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011736:	f7fe fe93 	bl	8010460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801173a:	bf00      	nop
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	20009244 	.word	0x20009244
 8011748:	20009234 	.word	0x20009234
 801174c:	20009240 	.word	0x20009240

08011750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011750:	b480      	push	{r7}
 8011752:	b085      	sub	sp, #20
 8011754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011756:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801175a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801175c:	4b27      	ldr	r3, [pc, #156]	@ (80117fc <prvHeapInit+0xac>)
 801175e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f003 0307 	and.w	r3, r3, #7
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00c      	beq.n	8011784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	3307      	adds	r3, #7
 801176e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f023 0307 	bic.w	r3, r3, #7
 8011776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	4a1f      	ldr	r2, [pc, #124]	@ (80117fc <prvHeapInit+0xac>)
 8011780:	4413      	add	r3, r2
 8011782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011788:	4a1d      	ldr	r2, [pc, #116]	@ (8011800 <prvHeapInit+0xb0>)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801178e:	4b1c      	ldr	r3, [pc, #112]	@ (8011800 <prvHeapInit+0xb0>)
 8011790:	2200      	movs	r2, #0
 8011792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	4413      	add	r3, r2
 801179a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801179c:	2208      	movs	r2, #8
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	1a9b      	subs	r3, r3, r2
 80117a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0307 	bic.w	r3, r3, #7
 80117aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4a15      	ldr	r2, [pc, #84]	@ (8011804 <prvHeapInit+0xb4>)
 80117b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80117b2:	4b14      	ldr	r3, [pc, #80]	@ (8011804 <prvHeapInit+0xb4>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2200      	movs	r2, #0
 80117b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117ba:	4b12      	ldr	r3, [pc, #72]	@ (8011804 <prvHeapInit+0xb4>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2200      	movs	r2, #0
 80117c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	1ad2      	subs	r2, r2, r3
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80117d0:	4b0c      	ldr	r3, [pc, #48]	@ (8011804 <prvHeapInit+0xb4>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011808 <prvHeapInit+0xb8>)
 80117de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	4a09      	ldr	r2, [pc, #36]	@ (801180c <prvHeapInit+0xbc>)
 80117e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80117e8:	4b09      	ldr	r3, [pc, #36]	@ (8011810 <prvHeapInit+0xc0>)
 80117ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80117ee:	601a      	str	r2, [r3, #0]
}
 80117f0:	bf00      	nop
 80117f2:	3714      	adds	r7, #20
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr
 80117fc:	20005628 	.word	0x20005628
 8011800:	20009228 	.word	0x20009228
 8011804:	20009230 	.word	0x20009230
 8011808:	20009238 	.word	0x20009238
 801180c:	20009234 	.word	0x20009234
 8011810:	20009244 	.word	0x20009244

08011814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801181c:	4b28      	ldr	r3, [pc, #160]	@ (80118c0 <prvInsertBlockIntoFreeList+0xac>)
 801181e:	60fb      	str	r3, [r7, #12]
 8011820:	e002      	b.n	8011828 <prvInsertBlockIntoFreeList+0x14>
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	60fb      	str	r3, [r7, #12]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	429a      	cmp	r2, r3
 8011830:	d8f7      	bhi.n	8011822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	68ba      	ldr	r2, [r7, #8]
 801183c:	4413      	add	r3, r2
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	429a      	cmp	r2, r3
 8011842:	d108      	bne.n	8011856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	441a      	add	r2, r3
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	441a      	add	r2, r3
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	429a      	cmp	r2, r3
 8011868:	d118      	bne.n	801189c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	4b15      	ldr	r3, [pc, #84]	@ (80118c4 <prvInsertBlockIntoFreeList+0xb0>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	429a      	cmp	r2, r3
 8011874:	d00d      	beq.n	8011892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685a      	ldr	r2, [r3, #4]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	441a      	add	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	601a      	str	r2, [r3, #0]
 8011890:	e008      	b.n	80118a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011892:	4b0c      	ldr	r3, [pc, #48]	@ (80118c4 <prvInsertBlockIntoFreeList+0xb0>)
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	e003      	b.n	80118a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d002      	beq.n	80118b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118b2:	bf00      	nop
 80118b4:	3714      	adds	r7, #20
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	20009228 	.word	0x20009228
 80118c4:	20009230 	.word	0x20009230

080118c8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80118d2:	f008 f945 	bl	8019b60 <sys_timeouts_sleeptime>
 80118d6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118de:	d10b      	bne.n	80118f8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80118e0:	4813      	ldr	r0, [pc, #76]	@ (8011930 <tcpip_timeouts_mbox_fetch+0x68>)
 80118e2:	f00a ff18 	bl	801c716 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80118e6:	2200      	movs	r2, #0
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f00a fe8a 	bl	801c604 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80118f0:	480f      	ldr	r0, [pc, #60]	@ (8011930 <tcpip_timeouts_mbox_fetch+0x68>)
 80118f2:	f00a ff01 	bl	801c6f8 <sys_mutex_lock>
    return;
 80118f6:	e018      	b.n	801192a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d102      	bne.n	8011904 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80118fe:	f008 f8f5 	bl	8019aec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011902:	e7e6      	b.n	80118d2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011904:	480a      	ldr	r0, [pc, #40]	@ (8011930 <tcpip_timeouts_mbox_fetch+0x68>)
 8011906:	f00a ff06 	bl	801c716 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	6839      	ldr	r1, [r7, #0]
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f00a fe78 	bl	801c604 <sys_arch_mbox_fetch>
 8011914:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011916:	4806      	ldr	r0, [pc, #24]	@ (8011930 <tcpip_timeouts_mbox_fetch+0x68>)
 8011918:	f00a feee 	bl	801c6f8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011922:	d102      	bne.n	801192a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011924:	f008 f8e2 	bl	8019aec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011928:	e7d3      	b.n	80118d2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	20009254 	.word	0x20009254

08011934 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801193c:	4810      	ldr	r0, [pc, #64]	@ (8011980 <tcpip_thread+0x4c>)
 801193e:	f00a fedb 	bl	801c6f8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011942:	4b10      	ldr	r3, [pc, #64]	@ (8011984 <tcpip_thread+0x50>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d005      	beq.n	8011956 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801194a:	4b0e      	ldr	r3, [pc, #56]	@ (8011984 <tcpip_thread+0x50>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	4a0e      	ldr	r2, [pc, #56]	@ (8011988 <tcpip_thread+0x54>)
 8011950:	6812      	ldr	r2, [r2, #0]
 8011952:	4610      	mov	r0, r2
 8011954:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011956:	f107 030c 	add.w	r3, r7, #12
 801195a:	4619      	mov	r1, r3
 801195c:	480b      	ldr	r0, [pc, #44]	@ (801198c <tcpip_thread+0x58>)
 801195e:	f7ff ffb3 	bl	80118c8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d106      	bne.n	8011976 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011968:	4b09      	ldr	r3, [pc, #36]	@ (8011990 <tcpip_thread+0x5c>)
 801196a:	2291      	movs	r2, #145	@ 0x91
 801196c:	4909      	ldr	r1, [pc, #36]	@ (8011994 <tcpip_thread+0x60>)
 801196e:	480a      	ldr	r0, [pc, #40]	@ (8011998 <tcpip_thread+0x64>)
 8011970:	f00b fdc4 	bl	801d4fc <iprintf>
      continue;
 8011974:	e003      	b.n	801197e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	4618      	mov	r0, r3
 801197a:	f000 f80f 	bl	801199c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801197e:	e7ea      	b.n	8011956 <tcpip_thread+0x22>
 8011980:	20009254 	.word	0x20009254
 8011984:	20009248 	.word	0x20009248
 8011988:	2000924c 	.word	0x2000924c
 801198c:	20009250 	.word	0x20009250
 8011990:	080202a0 	.word	0x080202a0
 8011994:	080202d0 	.word	0x080202d0
 8011998:	080202f0 	.word	0x080202f0

0801199c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d026      	beq.n	80119fa <tcpip_thread_handle_msg+0x5e>
 80119ac:	2b02      	cmp	r3, #2
 80119ae:	dc2b      	bgt.n	8011a08 <tcpip_thread_handle_msg+0x6c>
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <tcpip_thread_handle_msg+0x1e>
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d015      	beq.n	80119e4 <tcpip_thread_handle_msg+0x48>
 80119b8:	e026      	b.n	8011a08 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	6850      	ldr	r0, [r2, #4]
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	6892      	ldr	r2, [r2, #8]
 80119c6:	4611      	mov	r1, r2
 80119c8:	4798      	blx	r3
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d004      	beq.n	80119da <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f001 fcd9 	bl	801338c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80119da:	6879      	ldr	r1, [r7, #4]
 80119dc:	2009      	movs	r0, #9
 80119de:	f000 fe63 	bl	80126a8 <memp_free>
      break;
 80119e2:	e018      	b.n	8011a16 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	6892      	ldr	r2, [r2, #8]
 80119ec:	4610      	mov	r0, r2
 80119ee:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80119f0:	6879      	ldr	r1, [r7, #4]
 80119f2:	2008      	movs	r0, #8
 80119f4:	f000 fe58 	bl	80126a8 <memp_free>
      break;
 80119f8:	e00d      	b.n	8011a16 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	6892      	ldr	r2, [r2, #8]
 8011a02:	4610      	mov	r0, r2
 8011a04:	4798      	blx	r3
      break;
 8011a06:	e006      	b.n	8011a16 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011a08:	4b05      	ldr	r3, [pc, #20]	@ (8011a20 <tcpip_thread_handle_msg+0x84>)
 8011a0a:	22cf      	movs	r2, #207	@ 0xcf
 8011a0c:	4905      	ldr	r1, [pc, #20]	@ (8011a24 <tcpip_thread_handle_msg+0x88>)
 8011a0e:	4806      	ldr	r0, [pc, #24]	@ (8011a28 <tcpip_thread_handle_msg+0x8c>)
 8011a10:	f00b fd74 	bl	801d4fc <iprintf>
      break;
 8011a14:	bf00      	nop
  }
}
 8011a16:	bf00      	nop
 8011a18:	3708      	adds	r7, #8
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	080202a0 	.word	0x080202a0
 8011a24:	080202d0 	.word	0x080202d0
 8011a28:	080202f0 	.word	0x080202f0

08011a2c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011a38:	481a      	ldr	r0, [pc, #104]	@ (8011aa4 <tcpip_inpkt+0x78>)
 8011a3a:	f00a fe22 	bl	801c682 <sys_mbox_valid>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d105      	bne.n	8011a50 <tcpip_inpkt+0x24>
 8011a44:	4b18      	ldr	r3, [pc, #96]	@ (8011aa8 <tcpip_inpkt+0x7c>)
 8011a46:	22fc      	movs	r2, #252	@ 0xfc
 8011a48:	4918      	ldr	r1, [pc, #96]	@ (8011aac <tcpip_inpkt+0x80>)
 8011a4a:	4819      	ldr	r0, [pc, #100]	@ (8011ab0 <tcpip_inpkt+0x84>)
 8011a4c:	f00b fd56 	bl	801d4fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011a50:	2009      	movs	r0, #9
 8011a52:	f000 fdb3 	bl	80125bc <memp_malloc>
 8011a56:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d102      	bne.n	8011a64 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a62:	e01a      	b.n	8011a9a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	2200      	movs	r2, #0
 8011a68:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011a7c:	6979      	ldr	r1, [r7, #20]
 8011a7e:	4809      	ldr	r0, [pc, #36]	@ (8011aa4 <tcpip_inpkt+0x78>)
 8011a80:	f00a fda6 	bl	801c5d0 <sys_mbox_trypost>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d006      	beq.n	8011a98 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011a8a:	6979      	ldr	r1, [r7, #20]
 8011a8c:	2009      	movs	r0, #9
 8011a8e:	f000 fe0b 	bl	80126a8 <memp_free>
    return ERR_MEM;
 8011a92:	f04f 33ff 	mov.w	r3, #4294967295
 8011a96:	e000      	b.n	8011a9a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011a98:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	20009250 	.word	0x20009250
 8011aa8:	080202a0 	.word	0x080202a0
 8011aac:	08020318 	.word	0x08020318
 8011ab0:	080202f0 	.word	0x080202f0

08011ab4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ac4:	f003 0318 	and.w	r3, r3, #24
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d006      	beq.n	8011ada <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011acc:	4a08      	ldr	r2, [pc, #32]	@ (8011af0 <tcpip_input+0x3c>)
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff ffab 	bl	8011a2c <tcpip_inpkt>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	e005      	b.n	8011ae6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011ada:	4a06      	ldr	r2, [pc, #24]	@ (8011af4 <tcpip_input+0x40>)
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f7ff ffa4 	bl	8011a2c <tcpip_inpkt>
 8011ae4:	4603      	mov	r3, r0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3708      	adds	r7, #8
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	0801c3e1 	.word	0x0801c3e1
 8011af4:	0801b1c9 	.word	0x0801b1c9

08011af8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011b02:	4819      	ldr	r0, [pc, #100]	@ (8011b68 <tcpip_try_callback+0x70>)
 8011b04:	f00a fdbd 	bl	801c682 <sys_mbox_valid>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d106      	bne.n	8011b1c <tcpip_try_callback+0x24>
 8011b0e:	4b17      	ldr	r3, [pc, #92]	@ (8011b6c <tcpip_try_callback+0x74>)
 8011b10:	f240 125d 	movw	r2, #349	@ 0x15d
 8011b14:	4916      	ldr	r1, [pc, #88]	@ (8011b70 <tcpip_try_callback+0x78>)
 8011b16:	4817      	ldr	r0, [pc, #92]	@ (8011b74 <tcpip_try_callback+0x7c>)
 8011b18:	f00b fcf0 	bl	801d4fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011b1c:	2008      	movs	r0, #8
 8011b1e:	f000 fd4d 	bl	80125bc <memp_malloc>
 8011b22:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d102      	bne.n	8011b30 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b2e:	e017      	b.n	8011b60 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2201      	movs	r2, #1
 8011b34:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011b42:	68f9      	ldr	r1, [r7, #12]
 8011b44:	4808      	ldr	r0, [pc, #32]	@ (8011b68 <tcpip_try_callback+0x70>)
 8011b46:	f00a fd43 	bl	801c5d0 <sys_mbox_trypost>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d006      	beq.n	8011b5e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011b50:	68f9      	ldr	r1, [r7, #12]
 8011b52:	2008      	movs	r0, #8
 8011b54:	f000 fda8 	bl	80126a8 <memp_free>
    return ERR_MEM;
 8011b58:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5c:	e000      	b.n	8011b60 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	20009250 	.word	0x20009250
 8011b6c:	080202a0 	.word	0x080202a0
 8011b70:	08020318 	.word	0x08020318
 8011b74:	080202f0 	.word	0x080202f0

08011b78 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af02      	add	r7, sp, #8
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011b82:	f000 f872 	bl	8011c6a <lwip_init>

  tcpip_init_done = initfunc;
 8011b86:	4a17      	ldr	r2, [pc, #92]	@ (8011be4 <tcpip_init+0x6c>)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011b8c:	4a16      	ldr	r2, [pc, #88]	@ (8011be8 <tcpip_init+0x70>)
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011b92:	2106      	movs	r1, #6
 8011b94:	4815      	ldr	r0, [pc, #84]	@ (8011bec <tcpip_init+0x74>)
 8011b96:	f00a fcf9 	bl	801c58c <sys_mbox_new>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d006      	beq.n	8011bae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011ba0:	4b13      	ldr	r3, [pc, #76]	@ (8011bf0 <tcpip_init+0x78>)
 8011ba2:	f240 2261 	movw	r2, #609	@ 0x261
 8011ba6:	4913      	ldr	r1, [pc, #76]	@ (8011bf4 <tcpip_init+0x7c>)
 8011ba8:	4813      	ldr	r0, [pc, #76]	@ (8011bf8 <tcpip_init+0x80>)
 8011baa:	f00b fca7 	bl	801d4fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011bae:	4813      	ldr	r0, [pc, #76]	@ (8011bfc <tcpip_init+0x84>)
 8011bb0:	f00a fd86 	bl	801c6c0 <sys_mutex_new>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d006      	beq.n	8011bc8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011bba:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf0 <tcpip_init+0x78>)
 8011bbc:	f240 2265 	movw	r2, #613	@ 0x265
 8011bc0:	490f      	ldr	r1, [pc, #60]	@ (8011c00 <tcpip_init+0x88>)
 8011bc2:	480d      	ldr	r0, [pc, #52]	@ (8011bf8 <tcpip_init+0x80>)
 8011bc4:	f00b fc9a 	bl	801d4fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011bc8:	2300      	movs	r3, #0
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	490c      	ldr	r1, [pc, #48]	@ (8011c04 <tcpip_init+0x8c>)
 8011bd4:	480c      	ldr	r0, [pc, #48]	@ (8011c08 <tcpip_init+0x90>)
 8011bd6:	f00a fdab 	bl	801c730 <sys_thread_new>
}
 8011bda:	bf00      	nop
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	20009248 	.word	0x20009248
 8011be8:	2000924c 	.word	0x2000924c
 8011bec:	20009250 	.word	0x20009250
 8011bf0:	080202a0 	.word	0x080202a0
 8011bf4:	08020328 	.word	0x08020328
 8011bf8:	080202f0 	.word	0x080202f0
 8011bfc:	20009254 	.word	0x20009254
 8011c00:	0802034c 	.word	0x0802034c
 8011c04:	08011935 	.word	0x08011935
 8011c08:	08020370 	.word	0x08020370

08011c0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b083      	sub	sp, #12
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	4603      	mov	r3, r0
 8011c14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c1a:	021b      	lsls	r3, r3, #8
 8011c1c:	b21a      	sxth	r2, r3
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	0a1b      	lsrs	r3, r3, #8
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	b21b      	sxth	r3, r3
 8011c26:	4313      	orrs	r3, r2
 8011c28:	b21b      	sxth	r3, r3
 8011c2a:	b29b      	uxth	r3, r3
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	061a      	lsls	r2, r3, #24
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	021b      	lsls	r3, r3, #8
 8011c48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011c4c:	431a      	orrs	r2, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	0a1b      	lsrs	r3, r3, #8
 8011c52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011c56:	431a      	orrs	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	0e1b      	lsrs	r3, r3, #24
 8011c5c:	4313      	orrs	r3, r2
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b082      	sub	sp, #8
 8011c6e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011c70:	2300      	movs	r3, #0
 8011c72:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011c74:	f00a fd16 	bl	801c6a4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011c78:	f000 f8d4 	bl	8011e24 <mem_init>
  memp_init();
 8011c7c:	f000 fc30 	bl	80124e0 <memp_init>
  pbuf_init();
  netif_init();
 8011c80:	f000 fd3c 	bl	80126fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011c84:	f007 ffa4 	bl	8019bd0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011c88:	f001 fe1a 	bl	80138c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011c8c:	f007 fee6 	bl	8019a5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011ca2:	4b05      	ldr	r3, [pc, #20]	@ (8011cb8 <ptr_to_mem+0x20>)
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	88fb      	ldrh	r3, [r7, #6]
 8011ca8:	4413      	add	r3, r2
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	370c      	adds	r7, #12
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	200098c4 	.word	0x200098c4

08011cbc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011cc4:	4b05      	ldr	r3, [pc, #20]	@ (8011cdc <mem_to_ptr+0x20>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	b29b      	uxth	r3, r3
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	200098c4 	.word	0x200098c4

08011ce0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011ce0:	b590      	push	{r4, r7, lr}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011ce8:	4b45      	ldr	r3, [pc, #276]	@ (8011e00 <plug_holes+0x120>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d206      	bcs.n	8011d00 <plug_holes+0x20>
 8011cf2:	4b44      	ldr	r3, [pc, #272]	@ (8011e04 <plug_holes+0x124>)
 8011cf4:	f240 12df 	movw	r2, #479	@ 0x1df
 8011cf8:	4943      	ldr	r1, [pc, #268]	@ (8011e08 <plug_holes+0x128>)
 8011cfa:	4844      	ldr	r0, [pc, #272]	@ (8011e0c <plug_holes+0x12c>)
 8011cfc:	f00b fbfe 	bl	801d4fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011d00:	4b43      	ldr	r3, [pc, #268]	@ (8011e10 <plug_holes+0x130>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d306      	bcc.n	8011d18 <plug_holes+0x38>
 8011d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e04 <plug_holes+0x124>)
 8011d0c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011d10:	4940      	ldr	r1, [pc, #256]	@ (8011e14 <plug_holes+0x134>)
 8011d12:	483e      	ldr	r0, [pc, #248]	@ (8011e0c <plug_holes+0x12c>)
 8011d14:	f00b fbf2 	bl	801d4fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	791b      	ldrb	r3, [r3, #4]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d006      	beq.n	8011d2e <plug_holes+0x4e>
 8011d20:	4b38      	ldr	r3, [pc, #224]	@ (8011e04 <plug_holes+0x124>)
 8011d22:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8011d26:	493c      	ldr	r1, [pc, #240]	@ (8011e18 <plug_holes+0x138>)
 8011d28:	4838      	ldr	r0, [pc, #224]	@ (8011e0c <plug_holes+0x12c>)
 8011d2a:	f00b fbe7 	bl	801d4fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	881b      	ldrh	r3, [r3, #0]
 8011d32:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011d36:	d906      	bls.n	8011d46 <plug_holes+0x66>
 8011d38:	4b32      	ldr	r3, [pc, #200]	@ (8011e04 <plug_holes+0x124>)
 8011d3a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011d3e:	4937      	ldr	r1, [pc, #220]	@ (8011e1c <plug_holes+0x13c>)
 8011d40:	4832      	ldr	r0, [pc, #200]	@ (8011e0c <plug_holes+0x12c>)
 8011d42:	f00b fbdb 	bl	801d4fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff ffa4 	bl	8011c98 <ptr_to_mem>
 8011d50:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d024      	beq.n	8011da4 <plug_holes+0xc4>
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	791b      	ldrb	r3, [r3, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d120      	bne.n	8011da4 <plug_holes+0xc4>
 8011d62:	4b2b      	ldr	r3, [pc, #172]	@ (8011e10 <plug_holes+0x130>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d01b      	beq.n	8011da4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8011e20 <plug_holes+0x140>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d102      	bne.n	8011d7c <plug_holes+0x9c>
      lfree = mem;
 8011d76:	4a2a      	ldr	r2, [pc, #168]	@ (8011e20 <plug_holes+0x140>)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	881a      	ldrh	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	881b      	ldrh	r3, [r3, #0]
 8011d88:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011d8c:	d00a      	beq.n	8011da4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7ff ff80 	bl	8011c98 <ptr_to_mem>
 8011d98:	4604      	mov	r4, r0
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff ff8e 	bl	8011cbc <mem_to_ptr>
 8011da0:	4603      	mov	r3, r0
 8011da2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	885b      	ldrh	r3, [r3, #2]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7ff ff75 	bl	8011c98 <ptr_to_mem>
 8011dae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011db0:	68ba      	ldr	r2, [r7, #8]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d01f      	beq.n	8011df8 <plug_holes+0x118>
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	791b      	ldrb	r3, [r3, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d11b      	bne.n	8011df8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011dc0:	4b17      	ldr	r3, [pc, #92]	@ (8011e20 <plug_holes+0x140>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d102      	bne.n	8011dd0 <plug_holes+0xf0>
      lfree = pmem;
 8011dca:	4a15      	ldr	r2, [pc, #84]	@ (8011e20 <plug_holes+0x140>)
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	881a      	ldrh	r2, [r3, #0]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011de0:	d00a      	beq.n	8011df8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff ff56 	bl	8011c98 <ptr_to_mem>
 8011dec:	4604      	mov	r4, r0
 8011dee:	68b8      	ldr	r0, [r7, #8]
 8011df0:	f7ff ff64 	bl	8011cbc <mem_to_ptr>
 8011df4:	4603      	mov	r3, r0
 8011df6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011df8:	bf00      	nop
 8011dfa:	3714      	adds	r7, #20
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd90      	pop	{r4, r7, pc}
 8011e00:	200098c4 	.word	0x200098c4
 8011e04:	08020380 	.word	0x08020380
 8011e08:	080203b0 	.word	0x080203b0
 8011e0c:	080203c8 	.word	0x080203c8
 8011e10:	200098c8 	.word	0x200098c8
 8011e14:	080203f0 	.word	0x080203f0
 8011e18:	0802040c 	.word	0x0802040c
 8011e1c:	08020428 	.word	0x08020428
 8011e20:	200098d0 	.word	0x200098d0

08011e24 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8011ea8 <mem_init+0x84>)
 8011e2c:	3303      	adds	r3, #3
 8011e2e:	f023 0303 	bic.w	r3, r3, #3
 8011e32:	461a      	mov	r2, r3
 8011e34:	4b1d      	ldr	r3, [pc, #116]	@ (8011eac <mem_init+0x88>)
 8011e36:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011e38:	4b1c      	ldr	r3, [pc, #112]	@ (8011eac <mem_init+0x88>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011e44:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011e52:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8011e56:	f7ff ff1f 	bl	8011c98 <ptr_to_mem>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	4a14      	ldr	r2, [pc, #80]	@ (8011eb0 <mem_init+0x8c>)
 8011e5e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011e60:	4b13      	ldr	r3, [pc, #76]	@ (8011eb0 <mem_init+0x8c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2201      	movs	r2, #1
 8011e66:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011e68:	4b11      	ldr	r3, [pc, #68]	@ (8011eb0 <mem_init+0x8c>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011e70:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011e72:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb0 <mem_init+0x8c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011e7a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8011eac <mem_init+0x88>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4a0c      	ldr	r2, [pc, #48]	@ (8011eb4 <mem_init+0x90>)
 8011e82:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011e84:	480c      	ldr	r0, [pc, #48]	@ (8011eb8 <mem_init+0x94>)
 8011e86:	f00a fc1b 	bl	801c6c0 <sys_mutex_new>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d006      	beq.n	8011e9e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011e90:	4b0a      	ldr	r3, [pc, #40]	@ (8011ebc <mem_init+0x98>)
 8011e92:	f240 221f 	movw	r2, #543	@ 0x21f
 8011e96:	490a      	ldr	r1, [pc, #40]	@ (8011ec0 <mem_init+0x9c>)
 8011e98:	480a      	ldr	r0, [pc, #40]	@ (8011ec4 <mem_init+0xa0>)
 8011e9a:	f00b fb2f 	bl	801d4fc <iprintf>
  }
}
 8011e9e:	bf00      	nop
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	20009270 	.word	0x20009270
 8011eac:	200098c4 	.word	0x200098c4
 8011eb0:	200098c8 	.word	0x200098c8
 8011eb4:	200098d0 	.word	0x200098d0
 8011eb8:	200098cc 	.word	0x200098cc
 8011ebc:	08020380 	.word	0x08020380
 8011ec0:	08020454 	.word	0x08020454
 8011ec4:	080203c8 	.word	0x080203c8

08011ec8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b086      	sub	sp, #24
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff fef3 	bl	8011cbc <mem_to_ptr>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7ff feda 	bl	8011c98 <ptr_to_mem>
 8011ee4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	885b      	ldrh	r3, [r3, #2]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7ff fed4 	bl	8011c98 <ptr_to_mem>
 8011ef0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	881b      	ldrh	r3, [r3, #0]
 8011ef6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011efa:	d818      	bhi.n	8011f2e <mem_link_valid+0x66>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	885b      	ldrh	r3, [r3, #2]
 8011f00:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011f04:	d813      	bhi.n	8011f2e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011f0a:	8afa      	ldrh	r2, [r7, #22]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d004      	beq.n	8011f1a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	8afa      	ldrh	r2, [r7, #22]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d109      	bne.n	8011f2e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011f1a:	4b08      	ldr	r3, [pc, #32]	@ (8011f3c <mem_link_valid+0x74>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011f1e:	693a      	ldr	r2, [r7, #16]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d006      	beq.n	8011f32 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	885b      	ldrh	r3, [r3, #2]
 8011f28:	8afa      	ldrh	r2, [r7, #22]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d001      	beq.n	8011f32 <mem_link_valid+0x6a>
    return 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	e000      	b.n	8011f34 <mem_link_valid+0x6c>
  }
  return 1;
 8011f32:	2301      	movs	r3, #1
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	200098c8 	.word	0x200098c8

08011f40 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d070      	beq.n	8012030 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f003 0303 	and.w	r3, r3, #3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d00d      	beq.n	8011f74 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011f58:	4b37      	ldr	r3, [pc, #220]	@ (8012038 <mem_free+0xf8>)
 8011f5a:	f240 2273 	movw	r2, #627	@ 0x273
 8011f5e:	4937      	ldr	r1, [pc, #220]	@ (801203c <mem_free+0xfc>)
 8011f60:	4837      	ldr	r0, [pc, #220]	@ (8012040 <mem_free+0x100>)
 8011f62:	f00b facb 	bl	801d4fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011f66:	f00a fc09 	bl	801c77c <sys_arch_protect>
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	f00a fc13 	bl	801c798 <sys_arch_unprotect>
    return;
 8011f72:	e05e      	b.n	8012032 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	3b08      	subs	r3, #8
 8011f78:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011f7a:	4b32      	ldr	r3, [pc, #200]	@ (8012044 <mem_free+0x104>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	69fa      	ldr	r2, [r7, #28]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d306      	bcc.n	8011f92 <mem_free+0x52>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f103 020c 	add.w	r2, r3, #12
 8011f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8012048 <mem_free+0x108>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d90d      	bls.n	8011fae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011f92:	4b29      	ldr	r3, [pc, #164]	@ (8012038 <mem_free+0xf8>)
 8011f94:	f240 227f 	movw	r2, #639	@ 0x27f
 8011f98:	492c      	ldr	r1, [pc, #176]	@ (801204c <mem_free+0x10c>)
 8011f9a:	4829      	ldr	r0, [pc, #164]	@ (8012040 <mem_free+0x100>)
 8011f9c:	f00b faae 	bl	801d4fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011fa0:	f00a fbec 	bl	801c77c <sys_arch_protect>
 8011fa4:	6138      	str	r0, [r7, #16]
 8011fa6:	6938      	ldr	r0, [r7, #16]
 8011fa8:	f00a fbf6 	bl	801c798 <sys_arch_unprotect>
    return;
 8011fac:	e041      	b.n	8012032 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011fae:	4828      	ldr	r0, [pc, #160]	@ (8012050 <mem_free+0x110>)
 8011fb0:	f00a fba2 	bl	801c6f8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	791b      	ldrb	r3, [r3, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d110      	bne.n	8011fde <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8012038 <mem_free+0xf8>)
 8011fbe:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8011fc2:	4924      	ldr	r1, [pc, #144]	@ (8012054 <mem_free+0x114>)
 8011fc4:	481e      	ldr	r0, [pc, #120]	@ (8012040 <mem_free+0x100>)
 8011fc6:	f00b fa99 	bl	801d4fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011fca:	4821      	ldr	r0, [pc, #132]	@ (8012050 <mem_free+0x110>)
 8011fcc:	f00a fba3 	bl	801c716 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011fd0:	f00a fbd4 	bl	801c77c <sys_arch_protect>
 8011fd4:	6178      	str	r0, [r7, #20]
 8011fd6:	6978      	ldr	r0, [r7, #20]
 8011fd8:	f00a fbde 	bl	801c798 <sys_arch_unprotect>
    return;
 8011fdc:	e029      	b.n	8012032 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011fde:	69f8      	ldr	r0, [r7, #28]
 8011fe0:	f7ff ff72 	bl	8011ec8 <mem_link_valid>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d110      	bne.n	801200c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011fea:	4b13      	ldr	r3, [pc, #76]	@ (8012038 <mem_free+0xf8>)
 8011fec:	f240 2295 	movw	r2, #661	@ 0x295
 8011ff0:	4919      	ldr	r1, [pc, #100]	@ (8012058 <mem_free+0x118>)
 8011ff2:	4813      	ldr	r0, [pc, #76]	@ (8012040 <mem_free+0x100>)
 8011ff4:	f00b fa82 	bl	801d4fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011ff8:	4815      	ldr	r0, [pc, #84]	@ (8012050 <mem_free+0x110>)
 8011ffa:	f00a fb8c 	bl	801c716 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ffe:	f00a fbbd 	bl	801c77c <sys_arch_protect>
 8012002:	61b8      	str	r0, [r7, #24]
 8012004:	69b8      	ldr	r0, [r7, #24]
 8012006:	f00a fbc7 	bl	801c798 <sys_arch_unprotect>
    return;
 801200a:	e012      	b.n	8012032 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	2200      	movs	r2, #0
 8012010:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012012:	4b12      	ldr	r3, [pc, #72]	@ (801205c <mem_free+0x11c>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	69fa      	ldr	r2, [r7, #28]
 8012018:	429a      	cmp	r2, r3
 801201a:	d202      	bcs.n	8012022 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801201c:	4a0f      	ldr	r2, [pc, #60]	@ (801205c <mem_free+0x11c>)
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012022:	69f8      	ldr	r0, [r7, #28]
 8012024:	f7ff fe5c 	bl	8011ce0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012028:	4809      	ldr	r0, [pc, #36]	@ (8012050 <mem_free+0x110>)
 801202a:	f00a fb74 	bl	801c716 <sys_mutex_unlock>
 801202e:	e000      	b.n	8012032 <mem_free+0xf2>
    return;
 8012030:	bf00      	nop
}
 8012032:	3720      	adds	r7, #32
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	08020380 	.word	0x08020380
 801203c:	08020470 	.word	0x08020470
 8012040:	080203c8 	.word	0x080203c8
 8012044:	200098c4 	.word	0x200098c4
 8012048:	200098c8 	.word	0x200098c8
 801204c:	08020494 	.word	0x08020494
 8012050:	200098cc 	.word	0x200098cc
 8012054:	080204b0 	.word	0x080204b0
 8012058:	080204d8 	.word	0x080204d8
 801205c:	200098d0 	.word	0x200098d0

08012060 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801206c:	887b      	ldrh	r3, [r7, #2]
 801206e:	3303      	adds	r3, #3
 8012070:	b29b      	uxth	r3, r3
 8012072:	f023 0303 	bic.w	r3, r3, #3
 8012076:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012078:	8bfb      	ldrh	r3, [r7, #30]
 801207a:	2b0b      	cmp	r3, #11
 801207c:	d801      	bhi.n	8012082 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801207e:	230c      	movs	r3, #12
 8012080:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012082:	8bfb      	ldrh	r3, [r7, #30]
 8012084:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012088:	d803      	bhi.n	8012092 <mem_trim+0x32>
 801208a:	8bfa      	ldrh	r2, [r7, #30]
 801208c:	887b      	ldrh	r3, [r7, #2]
 801208e:	429a      	cmp	r2, r3
 8012090:	d201      	bcs.n	8012096 <mem_trim+0x36>
    return NULL;
 8012092:	2300      	movs	r3, #0
 8012094:	e0d8      	b.n	8012248 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012096:	4b6e      	ldr	r3, [pc, #440]	@ (8012250 <mem_trim+0x1f0>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	429a      	cmp	r2, r3
 801209e:	d304      	bcc.n	80120aa <mem_trim+0x4a>
 80120a0:	4b6c      	ldr	r3, [pc, #432]	@ (8012254 <mem_trim+0x1f4>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d306      	bcc.n	80120b8 <mem_trim+0x58>
 80120aa:	4b6b      	ldr	r3, [pc, #428]	@ (8012258 <mem_trim+0x1f8>)
 80120ac:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80120b0:	496a      	ldr	r1, [pc, #424]	@ (801225c <mem_trim+0x1fc>)
 80120b2:	486b      	ldr	r0, [pc, #428]	@ (8012260 <mem_trim+0x200>)
 80120b4:	f00b fa22 	bl	801d4fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80120b8:	4b65      	ldr	r3, [pc, #404]	@ (8012250 <mem_trim+0x1f0>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d304      	bcc.n	80120cc <mem_trim+0x6c>
 80120c2:	4b64      	ldr	r3, [pc, #400]	@ (8012254 <mem_trim+0x1f4>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d307      	bcc.n	80120dc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120cc:	f00a fb56 	bl	801c77c <sys_arch_protect>
 80120d0:	60b8      	str	r0, [r7, #8]
 80120d2:	68b8      	ldr	r0, [r7, #8]
 80120d4:	f00a fb60 	bl	801c798 <sys_arch_unprotect>
    return rmem;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	e0b5      	b.n	8012248 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3b08      	subs	r3, #8
 80120e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80120e2:	69b8      	ldr	r0, [r7, #24]
 80120e4:	f7ff fdea 	bl	8011cbc <mem_to_ptr>
 80120e8:	4603      	mov	r3, r0
 80120ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	881a      	ldrh	r2, [r3, #0]
 80120f0:	8afb      	ldrh	r3, [r7, #22]
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	3b08      	subs	r3, #8
 80120f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80120fa:	8bfa      	ldrh	r2, [r7, #30]
 80120fc:	8abb      	ldrh	r3, [r7, #20]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d906      	bls.n	8012110 <mem_trim+0xb0>
 8012102:	4b55      	ldr	r3, [pc, #340]	@ (8012258 <mem_trim+0x1f8>)
 8012104:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012108:	4956      	ldr	r1, [pc, #344]	@ (8012264 <mem_trim+0x204>)
 801210a:	4855      	ldr	r0, [pc, #340]	@ (8012260 <mem_trim+0x200>)
 801210c:	f00b f9f6 	bl	801d4fc <iprintf>
  if (newsize > size) {
 8012110:	8bfa      	ldrh	r2, [r7, #30]
 8012112:	8abb      	ldrh	r3, [r7, #20]
 8012114:	429a      	cmp	r2, r3
 8012116:	d901      	bls.n	801211c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012118:	2300      	movs	r3, #0
 801211a:	e095      	b.n	8012248 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801211c:	8bfa      	ldrh	r2, [r7, #30]
 801211e:	8abb      	ldrh	r3, [r7, #20]
 8012120:	429a      	cmp	r2, r3
 8012122:	d101      	bne.n	8012128 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	e08f      	b.n	8012248 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012128:	484f      	ldr	r0, [pc, #316]	@ (8012268 <mem_trim+0x208>)
 801212a:	f00a fae5 	bl	801c6f8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff fdb0 	bl	8011c98 <ptr_to_mem>
 8012138:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	791b      	ldrb	r3, [r3, #4]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d13f      	bne.n	80121c2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801214a:	d106      	bne.n	801215a <mem_trim+0xfa>
 801214c:	4b42      	ldr	r3, [pc, #264]	@ (8012258 <mem_trim+0x1f8>)
 801214e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012152:	4946      	ldr	r1, [pc, #280]	@ (801226c <mem_trim+0x20c>)
 8012154:	4842      	ldr	r0, [pc, #264]	@ (8012260 <mem_trim+0x200>)
 8012156:	f00b f9d1 	bl	801d4fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	881b      	ldrh	r3, [r3, #0]
 801215e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012160:	8afa      	ldrh	r2, [r7, #22]
 8012162:	8bfb      	ldrh	r3, [r7, #30]
 8012164:	4413      	add	r3, r2
 8012166:	b29b      	uxth	r3, r3
 8012168:	3308      	adds	r3, #8
 801216a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801216c:	4b40      	ldr	r3, [pc, #256]	@ (8012270 <mem_trim+0x210>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	693a      	ldr	r2, [r7, #16]
 8012172:	429a      	cmp	r2, r3
 8012174:	d106      	bne.n	8012184 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012176:	89fb      	ldrh	r3, [r7, #14]
 8012178:	4618      	mov	r0, r3
 801217a:	f7ff fd8d 	bl	8011c98 <ptr_to_mem>
 801217e:	4603      	mov	r3, r0
 8012180:	4a3b      	ldr	r2, [pc, #236]	@ (8012270 <mem_trim+0x210>)
 8012182:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012184:	89fb      	ldrh	r3, [r7, #14]
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff fd86 	bl	8011c98 <ptr_to_mem>
 801218c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2200      	movs	r2, #0
 8012192:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	89ba      	ldrh	r2, [r7, #12]
 8012198:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	8afa      	ldrh	r2, [r7, #22]
 801219e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	89fa      	ldrh	r2, [r7, #14]
 80121a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80121ae:	d047      	beq.n	8012240 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff fd6f 	bl	8011c98 <ptr_to_mem>
 80121ba:	4602      	mov	r2, r0
 80121bc:	89fb      	ldrh	r3, [r7, #14]
 80121be:	8053      	strh	r3, [r2, #2]
 80121c0:	e03e      	b.n	8012240 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80121c2:	8bfb      	ldrh	r3, [r7, #30]
 80121c4:	f103 0214 	add.w	r2, r3, #20
 80121c8:	8abb      	ldrh	r3, [r7, #20]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d838      	bhi.n	8012240 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80121ce:	8afa      	ldrh	r2, [r7, #22]
 80121d0:	8bfb      	ldrh	r3, [r7, #30]
 80121d2:	4413      	add	r3, r2
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	3308      	adds	r3, #8
 80121d8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80121e2:	d106      	bne.n	80121f2 <mem_trim+0x192>
 80121e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012258 <mem_trim+0x1f8>)
 80121e6:	f240 3216 	movw	r2, #790	@ 0x316
 80121ea:	4920      	ldr	r1, [pc, #128]	@ (801226c <mem_trim+0x20c>)
 80121ec:	481c      	ldr	r0, [pc, #112]	@ (8012260 <mem_trim+0x200>)
 80121ee:	f00b f985 	bl	801d4fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80121f2:	89fb      	ldrh	r3, [r7, #14]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7ff fd4f 	bl	8011c98 <ptr_to_mem>
 80121fa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80121fc:	4b1c      	ldr	r3, [pc, #112]	@ (8012270 <mem_trim+0x210>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	693a      	ldr	r2, [r7, #16]
 8012202:	429a      	cmp	r2, r3
 8012204:	d202      	bcs.n	801220c <mem_trim+0x1ac>
      lfree = mem2;
 8012206:	4a1a      	ldr	r2, [pc, #104]	@ (8012270 <mem_trim+0x210>)
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	2200      	movs	r2, #0
 8012210:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	881a      	ldrh	r2, [r3, #0]
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	8afa      	ldrh	r2, [r7, #22]
 801221e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	89fa      	ldrh	r2, [r7, #14]
 8012224:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801222e:	d007      	beq.n	8012240 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff fd2f 	bl	8011c98 <ptr_to_mem>
 801223a:	4602      	mov	r2, r0
 801223c:	89fb      	ldrh	r3, [r7, #14]
 801223e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012240:	4809      	ldr	r0, [pc, #36]	@ (8012268 <mem_trim+0x208>)
 8012242:	f00a fa68 	bl	801c716 <sys_mutex_unlock>
  return rmem;
 8012246:	687b      	ldr	r3, [r7, #4]
}
 8012248:	4618      	mov	r0, r3
 801224a:	3720      	adds	r7, #32
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	200098c4 	.word	0x200098c4
 8012254:	200098c8 	.word	0x200098c8
 8012258:	08020380 	.word	0x08020380
 801225c:	0802050c 	.word	0x0802050c
 8012260:	080203c8 	.word	0x080203c8
 8012264:	08020524 	.word	0x08020524
 8012268:	200098cc 	.word	0x200098cc
 801226c:	08020544 	.word	0x08020544
 8012270:	200098d0 	.word	0x200098d0

08012274 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801227e:	88fb      	ldrh	r3, [r7, #6]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <mem_malloc+0x14>
    return NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	e0e2      	b.n	801244e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012288:	88fb      	ldrh	r3, [r7, #6]
 801228a:	3303      	adds	r3, #3
 801228c:	b29b      	uxth	r3, r3
 801228e:	f023 0303 	bic.w	r3, r3, #3
 8012292:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012294:	8bbb      	ldrh	r3, [r7, #28]
 8012296:	2b0b      	cmp	r3, #11
 8012298:	d801      	bhi.n	801229e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801229a:	230c      	movs	r3, #12
 801229c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801229e:	8bbb      	ldrh	r3, [r7, #28]
 80122a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80122a4:	d803      	bhi.n	80122ae <mem_malloc+0x3a>
 80122a6:	8bba      	ldrh	r2, [r7, #28]
 80122a8:	88fb      	ldrh	r3, [r7, #6]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d201      	bcs.n	80122b2 <mem_malloc+0x3e>
    return NULL;
 80122ae:	2300      	movs	r3, #0
 80122b0:	e0cd      	b.n	801244e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80122b2:	4869      	ldr	r0, [pc, #420]	@ (8012458 <mem_malloc+0x1e4>)
 80122b4:	f00a fa20 	bl	801c6f8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80122b8:	4b68      	ldr	r3, [pc, #416]	@ (801245c <mem_malloc+0x1e8>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7ff fcfd 	bl	8011cbc <mem_to_ptr>
 80122c2:	4603      	mov	r3, r0
 80122c4:	83fb      	strh	r3, [r7, #30]
 80122c6:	e0b7      	b.n	8012438 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80122c8:	8bfb      	ldrh	r3, [r7, #30]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7ff fce4 	bl	8011c98 <ptr_to_mem>
 80122d0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	791b      	ldrb	r3, [r3, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f040 80a7 	bne.w	801242a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	461a      	mov	r2, r3
 80122e2:	8bfb      	ldrh	r3, [r7, #30]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	f1a3 0208 	sub.w	r2, r3, #8
 80122ea:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80122ec:	429a      	cmp	r2, r3
 80122ee:	f0c0 809c 	bcc.w	801242a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	8bfb      	ldrh	r3, [r7, #30]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	f1a3 0208 	sub.w	r2, r3, #8
 8012300:	8bbb      	ldrh	r3, [r7, #28]
 8012302:	3314      	adds	r3, #20
 8012304:	429a      	cmp	r2, r3
 8012306:	d333      	bcc.n	8012370 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012308:	8bfa      	ldrh	r2, [r7, #30]
 801230a:	8bbb      	ldrh	r3, [r7, #28]
 801230c:	4413      	add	r3, r2
 801230e:	b29b      	uxth	r3, r3
 8012310:	3308      	adds	r3, #8
 8012312:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012314:	8a7b      	ldrh	r3, [r7, #18]
 8012316:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801231a:	d106      	bne.n	801232a <mem_malloc+0xb6>
 801231c:	4b50      	ldr	r3, [pc, #320]	@ (8012460 <mem_malloc+0x1ec>)
 801231e:	f240 3287 	movw	r2, #903	@ 0x387
 8012322:	4950      	ldr	r1, [pc, #320]	@ (8012464 <mem_malloc+0x1f0>)
 8012324:	4850      	ldr	r0, [pc, #320]	@ (8012468 <mem_malloc+0x1f4>)
 8012326:	f00b f8e9 	bl	801d4fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801232a:	8a7b      	ldrh	r3, [r7, #18]
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff fcb3 	bl	8011c98 <ptr_to_mem>
 8012332:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	881a      	ldrh	r2, [r3, #0]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	8bfa      	ldrh	r2, [r7, #30]
 8012346:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	8a7a      	ldrh	r2, [r7, #18]
 801234c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	2201      	movs	r2, #1
 8012352:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801235c:	d00b      	beq.n	8012376 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	4618      	mov	r0, r3
 8012364:	f7ff fc98 	bl	8011c98 <ptr_to_mem>
 8012368:	4602      	mov	r2, r0
 801236a:	8a7b      	ldrh	r3, [r7, #18]
 801236c:	8053      	strh	r3, [r2, #2]
 801236e:	e002      	b.n	8012376 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	2201      	movs	r2, #1
 8012374:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012376:	4b39      	ldr	r3, [pc, #228]	@ (801245c <mem_malloc+0x1e8>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	697a      	ldr	r2, [r7, #20]
 801237c:	429a      	cmp	r2, r3
 801237e:	d127      	bne.n	80123d0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012380:	4b36      	ldr	r3, [pc, #216]	@ (801245c <mem_malloc+0x1e8>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012386:	e005      	b.n	8012394 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	4618      	mov	r0, r3
 801238e:	f7ff fc83 	bl	8011c98 <ptr_to_mem>
 8012392:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	791b      	ldrb	r3, [r3, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d004      	beq.n	80123a6 <mem_malloc+0x132>
 801239c:	4b33      	ldr	r3, [pc, #204]	@ (801246c <mem_malloc+0x1f8>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	69ba      	ldr	r2, [r7, #24]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d1f0      	bne.n	8012388 <mem_malloc+0x114>
          }
          lfree = cur;
 80123a6:	4a2d      	ldr	r2, [pc, #180]	@ (801245c <mem_malloc+0x1e8>)
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80123ac:	4b2b      	ldr	r3, [pc, #172]	@ (801245c <mem_malloc+0x1e8>)
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	4b2e      	ldr	r3, [pc, #184]	@ (801246c <mem_malloc+0x1f8>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d00b      	beq.n	80123d0 <mem_malloc+0x15c>
 80123b8:	4b28      	ldr	r3, [pc, #160]	@ (801245c <mem_malloc+0x1e8>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	791b      	ldrb	r3, [r3, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d006      	beq.n	80123d0 <mem_malloc+0x15c>
 80123c2:	4b27      	ldr	r3, [pc, #156]	@ (8012460 <mem_malloc+0x1ec>)
 80123c4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80123c8:	4929      	ldr	r1, [pc, #164]	@ (8012470 <mem_malloc+0x1fc>)
 80123ca:	4827      	ldr	r0, [pc, #156]	@ (8012468 <mem_malloc+0x1f4>)
 80123cc:	f00b f896 	bl	801d4fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80123d0:	4821      	ldr	r0, [pc, #132]	@ (8012458 <mem_malloc+0x1e4>)
 80123d2:	f00a f9a0 	bl	801c716 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80123d6:	8bba      	ldrh	r2, [r7, #28]
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	4413      	add	r3, r2
 80123dc:	3308      	adds	r3, #8
 80123de:	4a23      	ldr	r2, [pc, #140]	@ (801246c <mem_malloc+0x1f8>)
 80123e0:	6812      	ldr	r2, [r2, #0]
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d906      	bls.n	80123f4 <mem_malloc+0x180>
 80123e6:	4b1e      	ldr	r3, [pc, #120]	@ (8012460 <mem_malloc+0x1ec>)
 80123e8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80123ec:	4921      	ldr	r1, [pc, #132]	@ (8012474 <mem_malloc+0x200>)
 80123ee:	481e      	ldr	r0, [pc, #120]	@ (8012468 <mem_malloc+0x1f4>)
 80123f0:	f00b f884 	bl	801d4fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	f003 0303 	and.w	r3, r3, #3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d006      	beq.n	801240c <mem_malloc+0x198>
 80123fe:	4b18      	ldr	r3, [pc, #96]	@ (8012460 <mem_malloc+0x1ec>)
 8012400:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012404:	491c      	ldr	r1, [pc, #112]	@ (8012478 <mem_malloc+0x204>)
 8012406:	4818      	ldr	r0, [pc, #96]	@ (8012468 <mem_malloc+0x1f4>)
 8012408:	f00b f878 	bl	801d4fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	f003 0303 	and.w	r3, r3, #3
 8012412:	2b00      	cmp	r3, #0
 8012414:	d006      	beq.n	8012424 <mem_malloc+0x1b0>
 8012416:	4b12      	ldr	r3, [pc, #72]	@ (8012460 <mem_malloc+0x1ec>)
 8012418:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801241c:	4917      	ldr	r1, [pc, #92]	@ (801247c <mem_malloc+0x208>)
 801241e:	4812      	ldr	r0, [pc, #72]	@ (8012468 <mem_malloc+0x1f4>)
 8012420:	f00b f86c 	bl	801d4fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	3308      	adds	r3, #8
 8012428:	e011      	b.n	801244e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801242a:	8bfb      	ldrh	r3, [r7, #30]
 801242c:	4618      	mov	r0, r3
 801242e:	f7ff fc33 	bl	8011c98 <ptr_to_mem>
 8012432:	4603      	mov	r3, r0
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012438:	8bfa      	ldrh	r2, [r7, #30]
 801243a:	8bbb      	ldrh	r3, [r7, #28]
 801243c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8012440:	429a      	cmp	r2, r3
 8012442:	f4ff af41 	bcc.w	80122c8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012446:	4804      	ldr	r0, [pc, #16]	@ (8012458 <mem_malloc+0x1e4>)
 8012448:	f00a f965 	bl	801c716 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3720      	adds	r7, #32
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	200098cc 	.word	0x200098cc
 801245c:	200098d0 	.word	0x200098d0
 8012460:	08020380 	.word	0x08020380
 8012464:	08020544 	.word	0x08020544
 8012468:	080203c8 	.word	0x080203c8
 801246c:	200098c8 	.word	0x200098c8
 8012470:	08020558 	.word	0x08020558
 8012474:	08020574 	.word	0x08020574
 8012478:	080205a4 	.word	0x080205a4
 801247c:	080205d4 	.word	0x080205d4

08012480 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	2200      	movs	r2, #0
 801248e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	3303      	adds	r3, #3
 8012496:	f023 0303 	bic.w	r3, r3, #3
 801249a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801249c:	2300      	movs	r3, #0
 801249e:	60fb      	str	r3, [r7, #12]
 80124a0:	e011      	b.n	80124c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	689b      	ldr	r3, [r3, #8]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	68ba      	ldr	r2, [r7, #8]
 80124b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	461a      	mov	r2, r3
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4413      	add	r3, r2
 80124be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	3301      	adds	r3, #1
 80124c4:	60fb      	str	r3, [r7, #12]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	885b      	ldrh	r3, [r3, #2]
 80124ca:	461a      	mov	r2, r3
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	4293      	cmp	r3, r2
 80124d0:	dbe7      	blt.n	80124a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80124d2:	bf00      	nop
 80124d4:	bf00      	nop
 80124d6:	3714      	adds	r7, #20
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80124e6:	2300      	movs	r3, #0
 80124e8:	80fb      	strh	r3, [r7, #6]
 80124ea:	e009      	b.n	8012500 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80124ec:	88fb      	ldrh	r3, [r7, #6]
 80124ee:	4a08      	ldr	r2, [pc, #32]	@ (8012510 <memp_init+0x30>)
 80124f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7ff ffc3 	bl	8012480 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80124fa:	88fb      	ldrh	r3, [r7, #6]
 80124fc:	3301      	adds	r3, #1
 80124fe:	80fb      	strh	r3, [r7, #6]
 8012500:	88fb      	ldrh	r3, [r7, #6]
 8012502:	2b0c      	cmp	r3, #12
 8012504:	d9f2      	bls.n	80124ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012506:	bf00      	nop
 8012508:	bf00      	nop
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	08022e38 	.word	0x08022e38

08012514 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801251c:	f00a f92e 	bl	801c77c <sys_arch_protect>
 8012520:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	689b      	ldr	r3, [r3, #8]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d015      	beq.n	801255c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	689b      	ldr	r3, [r3, #8]
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	6812      	ldr	r2, [r2, #0]
 8012538:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	f003 0303 	and.w	r3, r3, #3
 8012540:	2b00      	cmp	r3, #0
 8012542:	d006      	beq.n	8012552 <do_memp_malloc_pool+0x3e>
 8012544:	4b09      	ldr	r3, [pc, #36]	@ (801256c <do_memp_malloc_pool+0x58>)
 8012546:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801254a:	4909      	ldr	r1, [pc, #36]	@ (8012570 <do_memp_malloc_pool+0x5c>)
 801254c:	4809      	ldr	r0, [pc, #36]	@ (8012574 <do_memp_malloc_pool+0x60>)
 801254e:	f00a ffd5 	bl	801d4fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f00a f920 	bl	801c798 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	e003      	b.n	8012564 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801255c:	68f8      	ldr	r0, [r7, #12]
 801255e:	f00a f91b 	bl	801c798 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	080205f8 	.word	0x080205f8
 8012570:	08020628 	.word	0x08020628
 8012574:	0802064c 	.word	0x0802064c

08012578 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d106      	bne.n	8012594 <memp_malloc_pool+0x1c>
 8012586:	4b0a      	ldr	r3, [pc, #40]	@ (80125b0 <memp_malloc_pool+0x38>)
 8012588:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801258c:	4909      	ldr	r1, [pc, #36]	@ (80125b4 <memp_malloc_pool+0x3c>)
 801258e:	480a      	ldr	r0, [pc, #40]	@ (80125b8 <memp_malloc_pool+0x40>)
 8012590:	f00a ffb4 	bl	801d4fc <iprintf>
  if (desc == NULL) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d101      	bne.n	801259e <memp_malloc_pool+0x26>
    return NULL;
 801259a:	2300      	movs	r3, #0
 801259c:	e003      	b.n	80125a6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ff ffb8 	bl	8012514 <do_memp_malloc_pool>
 80125a4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	080205f8 	.word	0x080205f8
 80125b4:	08020674 	.word	0x08020674
 80125b8:	0802064c 	.word	0x0802064c

080125bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	4603      	mov	r3, r0
 80125c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80125c6:	79fb      	ldrb	r3, [r7, #7]
 80125c8:	2b0c      	cmp	r3, #12
 80125ca:	d908      	bls.n	80125de <memp_malloc+0x22>
 80125cc:	4b0a      	ldr	r3, [pc, #40]	@ (80125f8 <memp_malloc+0x3c>)
 80125ce:	f240 1257 	movw	r2, #343	@ 0x157
 80125d2:	490a      	ldr	r1, [pc, #40]	@ (80125fc <memp_malloc+0x40>)
 80125d4:	480a      	ldr	r0, [pc, #40]	@ (8012600 <memp_malloc+0x44>)
 80125d6:	f00a ff91 	bl	801d4fc <iprintf>
 80125da:	2300      	movs	r3, #0
 80125dc:	e008      	b.n	80125f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80125de:	79fb      	ldrb	r3, [r7, #7]
 80125e0:	4a08      	ldr	r2, [pc, #32]	@ (8012604 <memp_malloc+0x48>)
 80125e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7ff ff94 	bl	8012514 <do_memp_malloc_pool>
 80125ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80125ee:	68fb      	ldr	r3, [r7, #12]
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	080205f8 	.word	0x080205f8
 80125fc:	08020688 	.word	0x08020688
 8012600:	0802064c 	.word	0x0802064c
 8012604:	08022e38 	.word	0x08022e38

08012608 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	f003 0303 	and.w	r3, r3, #3
 8012618:	2b00      	cmp	r3, #0
 801261a:	d006      	beq.n	801262a <do_memp_free_pool+0x22>
 801261c:	4b0d      	ldr	r3, [pc, #52]	@ (8012654 <do_memp_free_pool+0x4c>)
 801261e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012622:	490d      	ldr	r1, [pc, #52]	@ (8012658 <do_memp_free_pool+0x50>)
 8012624:	480d      	ldr	r0, [pc, #52]	@ (801265c <do_memp_free_pool+0x54>)
 8012626:	f00a ff69 	bl	801d4fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801262e:	f00a f8a5 	bl	801c77c <sys_arch_protect>
 8012632:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012646:	68b8      	ldr	r0, [r7, #8]
 8012648:	f00a f8a6 	bl	801c798 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801264c:	bf00      	nop
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	080205f8 	.word	0x080205f8
 8012658:	080206a8 	.word	0x080206a8
 801265c:	0802064c 	.word	0x0802064c

08012660 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d106      	bne.n	801267e <memp_free_pool+0x1e>
 8012670:	4b0a      	ldr	r3, [pc, #40]	@ (801269c <memp_free_pool+0x3c>)
 8012672:	f240 1295 	movw	r2, #405	@ 0x195
 8012676:	490a      	ldr	r1, [pc, #40]	@ (80126a0 <memp_free_pool+0x40>)
 8012678:	480a      	ldr	r0, [pc, #40]	@ (80126a4 <memp_free_pool+0x44>)
 801267a:	f00a ff3f 	bl	801d4fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d007      	beq.n	8012694 <memp_free_pool+0x34>
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d004      	beq.n	8012694 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801268a:	6839      	ldr	r1, [r7, #0]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff ffbb 	bl	8012608 <do_memp_free_pool>
 8012692:	e000      	b.n	8012696 <memp_free_pool+0x36>
    return;
 8012694:	bf00      	nop
}
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	080205f8 	.word	0x080205f8
 80126a0:	08020674 	.word	0x08020674
 80126a4:	0802064c 	.word	0x0802064c

080126a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	4603      	mov	r3, r0
 80126b0:	6039      	str	r1, [r7, #0]
 80126b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80126b4:	79fb      	ldrb	r3, [r7, #7]
 80126b6:	2b0c      	cmp	r3, #12
 80126b8:	d907      	bls.n	80126ca <memp_free+0x22>
 80126ba:	4b0c      	ldr	r3, [pc, #48]	@ (80126ec <memp_free+0x44>)
 80126bc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80126c0:	490b      	ldr	r1, [pc, #44]	@ (80126f0 <memp_free+0x48>)
 80126c2:	480c      	ldr	r0, [pc, #48]	@ (80126f4 <memp_free+0x4c>)
 80126c4:	f00a ff1a 	bl	801d4fc <iprintf>
 80126c8:	e00c      	b.n	80126e4 <memp_free+0x3c>

  if (mem == NULL) {
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d008      	beq.n	80126e2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80126d0:	79fb      	ldrb	r3, [r7, #7]
 80126d2:	4a09      	ldr	r2, [pc, #36]	@ (80126f8 <memp_free+0x50>)
 80126d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7ff ff94 	bl	8012608 <do_memp_free_pool>
 80126e0:	e000      	b.n	80126e4 <memp_free+0x3c>
    return;
 80126e2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	080205f8 	.word	0x080205f8
 80126f0:	080206c8 	.word	0x080206c8
 80126f4:	0802064c 	.word	0x0802064c
 80126f8:	08022e38 	.word	0x08022e38

080126fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80126fc:	b480      	push	{r7}
 80126fe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012700:	bf00      	nop
 8012702:	46bd      	mov	sp, r7
 8012704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012708:	4770      	bx	lr
	...

0801270c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
 8012718:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d108      	bne.n	8012732 <netif_add+0x26>
 8012720:	4b57      	ldr	r3, [pc, #348]	@ (8012880 <netif_add+0x174>)
 8012722:	f240 1227 	movw	r2, #295	@ 0x127
 8012726:	4957      	ldr	r1, [pc, #348]	@ (8012884 <netif_add+0x178>)
 8012728:	4857      	ldr	r0, [pc, #348]	@ (8012888 <netif_add+0x17c>)
 801272a:	f00a fee7 	bl	801d4fc <iprintf>
 801272e:	2300      	movs	r3, #0
 8012730:	e0a2      	b.n	8012878 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012734:	2b00      	cmp	r3, #0
 8012736:	d108      	bne.n	801274a <netif_add+0x3e>
 8012738:	4b51      	ldr	r3, [pc, #324]	@ (8012880 <netif_add+0x174>)
 801273a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801273e:	4953      	ldr	r1, [pc, #332]	@ (801288c <netif_add+0x180>)
 8012740:	4851      	ldr	r0, [pc, #324]	@ (8012888 <netif_add+0x17c>)
 8012742:	f00a fedb 	bl	801d4fc <iprintf>
 8012746:	2300      	movs	r3, #0
 8012748:	e096      	b.n	8012878 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012750:	4b4f      	ldr	r3, [pc, #316]	@ (8012890 <netif_add+0x184>)
 8012752:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d101      	bne.n	801275e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801275a:	4b4d      	ldr	r3, [pc, #308]	@ (8012890 <netif_add+0x184>)
 801275c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d101      	bne.n	8012768 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012764:	4b4a      	ldr	r3, [pc, #296]	@ (8012890 <netif_add+0x184>)
 8012766:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2200      	movs	r2, #0
 801276c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2200      	movs	r2, #0
 8012772:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2200      	movs	r2, #0
 8012778:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	4a45      	ldr	r2, [pc, #276]	@ (8012894 <netif_add+0x188>)
 801277e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2200      	movs	r2, #0
 8012784:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2200      	movs	r2, #0
 801278a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6a3a      	ldr	r2, [r7, #32]
 8012798:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801279a:	4b3f      	ldr	r3, [pc, #252]	@ (8012898 <netif_add+0x18c>)
 801279c:	781a      	ldrb	r2, [r3, #0]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127a8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	68b9      	ldr	r1, [r7, #8]
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f000 f913 	bl	80129dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	4798      	blx	r3
 80127bc:	4603      	mov	r3, r0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d001      	beq.n	80127c6 <netif_add+0xba>
    return NULL;
 80127c2:	2300      	movs	r3, #0
 80127c4:	e058      	b.n	8012878 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80127cc:	2bff      	cmp	r3, #255	@ 0xff
 80127ce:	d103      	bne.n	80127d8 <netif_add+0xcc>
        netif->num = 0;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80127d8:	2300      	movs	r3, #0
 80127da:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80127dc:	4b2f      	ldr	r3, [pc, #188]	@ (801289c <netif_add+0x190>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	617b      	str	r3, [r7, #20]
 80127e2:	e02b      	b.n	801283c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80127e4:	697a      	ldr	r2, [r7, #20]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d106      	bne.n	80127fa <netif_add+0xee>
 80127ec:	4b24      	ldr	r3, [pc, #144]	@ (8012880 <netif_add+0x174>)
 80127ee:	f240 128b 	movw	r2, #395	@ 0x18b
 80127f2:	492b      	ldr	r1, [pc, #172]	@ (80128a0 <netif_add+0x194>)
 80127f4:	4824      	ldr	r0, [pc, #144]	@ (8012888 <netif_add+0x17c>)
 80127f6:	f00a fe81 	bl	801d4fc <iprintf>
        num_netifs++;
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	3301      	adds	r3, #1
 80127fe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	2bff      	cmp	r3, #255	@ 0xff
 8012804:	dd06      	ble.n	8012814 <netif_add+0x108>
 8012806:	4b1e      	ldr	r3, [pc, #120]	@ (8012880 <netif_add+0x174>)
 8012808:	f240 128d 	movw	r2, #397	@ 0x18d
 801280c:	4925      	ldr	r1, [pc, #148]	@ (80128a4 <netif_add+0x198>)
 801280e:	481e      	ldr	r0, [pc, #120]	@ (8012888 <netif_add+0x17c>)
 8012810:	f00a fe74 	bl	801d4fc <iprintf>
        if (netif2->num == netif->num) {
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012820:	429a      	cmp	r2, r3
 8012822:	d108      	bne.n	8012836 <netif_add+0x12a>
          netif->num++;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801282a:	3301      	adds	r3, #1
 801282c:	b2da      	uxtb	r2, r3
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8012834:	e005      	b.n	8012842 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	617b      	str	r3, [r7, #20]
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1d0      	bne.n	80127e4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d1be      	bne.n	80127c6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801284e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012850:	d103      	bne.n	801285a <netif_add+0x14e>
    netif_num = 0;
 8012852:	4b11      	ldr	r3, [pc, #68]	@ (8012898 <netif_add+0x18c>)
 8012854:	2200      	movs	r2, #0
 8012856:	701a      	strb	r2, [r3, #0]
 8012858:	e006      	b.n	8012868 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012860:	3301      	adds	r3, #1
 8012862:	b2da      	uxtb	r2, r3
 8012864:	4b0c      	ldr	r3, [pc, #48]	@ (8012898 <netif_add+0x18c>)
 8012866:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012868:	4b0c      	ldr	r3, [pc, #48]	@ (801289c <netif_add+0x190>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012870:	4a0a      	ldr	r2, [pc, #40]	@ (801289c <netif_add+0x190>)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012876:	68fb      	ldr	r3, [r7, #12]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3718      	adds	r7, #24
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	080206e4 	.word	0x080206e4
 8012884:	08020778 	.word	0x08020778
 8012888:	08020734 	.word	0x08020734
 801288c:	08020794 	.word	0x08020794
 8012890:	08022eac 	.word	0x08022eac
 8012894:	08012c53 	.word	0x08012c53
 8012898:	2000c9a8 	.word	0x2000c9a8
 801289c:	2000c9a0 	.word	0x2000c9a0
 80128a0:	080207b8 	.word	0x080207b8
 80128a4:	080207cc 	.word	0x080207cc

080128a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80128b2:	6839      	ldr	r1, [r7, #0]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f002 fdab 	bl	8015410 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80128ba:	6839      	ldr	r1, [r7, #0]
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f007 fb11 	bl	8019ee4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80128c2:	bf00      	nop
 80128c4:	3708      	adds	r7, #8
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
	...

080128cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d106      	bne.n	80128ec <netif_do_set_ipaddr+0x20>
 80128de:	4b1d      	ldr	r3, [pc, #116]	@ (8012954 <netif_do_set_ipaddr+0x88>)
 80128e0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80128e4:	491c      	ldr	r1, [pc, #112]	@ (8012958 <netif_do_set_ipaddr+0x8c>)
 80128e6:	481d      	ldr	r0, [pc, #116]	@ (801295c <netif_do_set_ipaddr+0x90>)
 80128e8:	f00a fe08 	bl	801d4fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <netif_do_set_ipaddr+0x34>
 80128f2:	4b18      	ldr	r3, [pc, #96]	@ (8012954 <netif_do_set_ipaddr+0x88>)
 80128f4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80128f8:	4917      	ldr	r1, [pc, #92]	@ (8012958 <netif_do_set_ipaddr+0x8c>)
 80128fa:	4818      	ldr	r0, [pc, #96]	@ (801295c <netif_do_set_ipaddr+0x90>)
 80128fc:	f00a fdfe 	bl	801d4fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	681a      	ldr	r2, [r3, #0]
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	3304      	adds	r3, #4
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	429a      	cmp	r2, r3
 801290c:	d01c      	beq.n	8012948 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	3304      	adds	r3, #4
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801291e:	f107 0314 	add.w	r3, r7, #20
 8012922:	4619      	mov	r1, r3
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7ff ffbf 	bl	80128a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <netif_do_set_ipaddr+0x6a>
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	e000      	b.n	8012938 <netif_do_set_ipaddr+0x6c>
 8012936:	2300      	movs	r3, #0
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801293c:	2101      	movs	r1, #1
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f000 f8d2 	bl	8012ae8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012944:	2301      	movs	r3, #1
 8012946:	e000      	b.n	801294a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	3718      	adds	r7, #24
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	080206e4 	.word	0x080206e4
 8012958:	080207fc 	.word	0x080207fc
 801295c:	08020734 	.word	0x08020734

08012960 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012960:	b480      	push	{r7}
 8012962:	b085      	sub	sp, #20
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	681a      	ldr	r2, [r3, #0]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	3308      	adds	r3, #8
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	429a      	cmp	r2, r3
 8012978:	d00a      	beq.n	8012990 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d002      	beq.n	8012986 <netif_do_set_netmask+0x26>
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	e000      	b.n	8012988 <netif_do_set_netmask+0x28>
 8012986:	2300      	movs	r3, #0
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801298c:	2301      	movs	r3, #1
 801298e:	e000      	b.n	8012992 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3714      	adds	r7, #20
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801299e:	b480      	push	{r7}
 80129a0:	b085      	sub	sp, #20
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	60f8      	str	r0, [r7, #12]
 80129a6:	60b9      	str	r1, [r7, #8]
 80129a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	330c      	adds	r3, #12
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d00a      	beq.n	80129ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <netif_do_set_gw+0x26>
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	e000      	b.n	80129c6 <netif_do_set_gw+0x28>
 80129c4:	2300      	movs	r3, #0
 80129c6:	68fa      	ldr	r2, [r7, #12]
 80129c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80129ca:	2301      	movs	r3, #1
 80129cc:	e000      	b.n	80129d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3714      	adds	r7, #20
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b088      	sub	sp, #32
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
 80129e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80129ea:	2300      	movs	r3, #0
 80129ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80129f8:	4b1c      	ldr	r3, [pc, #112]	@ (8012a6c <netif_set_addr+0x90>)
 80129fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d101      	bne.n	8012a06 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012a02:	4b1a      	ldr	r3, [pc, #104]	@ (8012a6c <netif_set_addr+0x90>)
 8012a04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d101      	bne.n	8012a10 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012a0c:	4b17      	ldr	r3, [pc, #92]	@ (8012a6c <netif_set_addr+0x90>)
 8012a0e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d003      	beq.n	8012a1e <netif_set_addr+0x42>
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <netif_set_addr+0x46>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e000      	b.n	8012a24 <netif_set_addr+0x48>
 8012a22:	2300      	movs	r3, #0
 8012a24:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d006      	beq.n	8012a3a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012a2c:	f107 0310 	add.w	r3, r7, #16
 8012a30:	461a      	mov	r2, r3
 8012a32:	68b9      	ldr	r1, [r7, #8]
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f7ff ff49 	bl	80128cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012a3a:	69fa      	ldr	r2, [r7, #28]
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	68f8      	ldr	r0, [r7, #12]
 8012a40:	f7ff ff8e 	bl	8012960 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012a44:	69ba      	ldr	r2, [r7, #24]
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	68f8      	ldr	r0, [r7, #12]
 8012a4a:	f7ff ffa8 	bl	801299e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d106      	bne.n	8012a62 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012a54:	f107 0310 	add.w	r3, r7, #16
 8012a58:	461a      	mov	r2, r3
 8012a5a:	68b9      	ldr	r1, [r7, #8]
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f7ff ff35 	bl	80128cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012a62:	bf00      	nop
 8012a64:	3720      	adds	r7, #32
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	08022eac 	.word	0x08022eac

08012a70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012a78:	4a04      	ldr	r2, [pc, #16]	@ (8012a8c <netif_set_default+0x1c>)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012a7e:	bf00      	nop
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop
 8012a8c:	2000c9a4 	.word	0x2000c9a4

08012a90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d107      	bne.n	8012aae <netif_set_up+0x1e>
 8012a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8012adc <netif_set_up+0x4c>)
 8012aa0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8012aa4:	490e      	ldr	r1, [pc, #56]	@ (8012ae0 <netif_set_up+0x50>)
 8012aa6:	480f      	ldr	r0, [pc, #60]	@ (8012ae4 <netif_set_up+0x54>)
 8012aa8:	f00a fd28 	bl	801d4fc <iprintf>
 8012aac:	e013      	b.n	8012ad6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10c      	bne.n	8012ad6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ac2:	f043 0301 	orr.w	r3, r3, #1
 8012ac6:	b2da      	uxtb	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012ace:	2103      	movs	r1, #3
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 f809 	bl	8012ae8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	080206e4 	.word	0x080206e4
 8012ae0:	0802086c 	.word	0x0802086c
 8012ae4:	08020734 	.word	0x08020734

08012ae8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <netif_issue_reports+0x20>
 8012afa:	4b18      	ldr	r3, [pc, #96]	@ (8012b5c <netif_issue_reports+0x74>)
 8012afc:	f240 326d 	movw	r2, #877	@ 0x36d
 8012b00:	4917      	ldr	r1, [pc, #92]	@ (8012b60 <netif_issue_reports+0x78>)
 8012b02:	4818      	ldr	r0, [pc, #96]	@ (8012b64 <netif_issue_reports+0x7c>)
 8012b04:	f00a fcfa 	bl	801d4fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b0e:	f003 0304 	and.w	r3, r3, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d01e      	beq.n	8012b54 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b1c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d017      	beq.n	8012b54 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012b24:	78fb      	ldrb	r3, [r7, #3]
 8012b26:	f003 0301 	and.w	r3, r3, #1
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d013      	beq.n	8012b56 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	3304      	adds	r3, #4
 8012b32:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00e      	beq.n	8012b56 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b3e:	f003 0308 	and.w	r3, r3, #8
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d007      	beq.n	8012b56 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	3304      	adds	r3, #4
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f008 f903 	bl	801ad58 <etharp_request>
 8012b52:	e000      	b.n	8012b56 <netif_issue_reports+0x6e>
    return;
 8012b54:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	080206e4 	.word	0x080206e4
 8012b60:	08020888 	.word	0x08020888
 8012b64:	08020734 	.word	0x08020734

08012b68 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d107      	bne.n	8012b86 <netif_set_link_up+0x1e>
 8012b76:	4b13      	ldr	r3, [pc, #76]	@ (8012bc4 <netif_set_link_up+0x5c>)
 8012b78:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012b7c:	4912      	ldr	r1, [pc, #72]	@ (8012bc8 <netif_set_link_up+0x60>)
 8012b7e:	4813      	ldr	r0, [pc, #76]	@ (8012bcc <netif_set_link_up+0x64>)
 8012b80:	f00a fcbc 	bl	801d4fc <iprintf>
 8012b84:	e01b      	b.n	8012bbe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b8c:	f003 0304 	and.w	r3, r3, #4
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d114      	bne.n	8012bbe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b9a:	f043 0304 	orr.w	r3, r3, #4
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012ba6:	2103      	movs	r1, #3
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f7ff ff9d 	bl	8012ae8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	69db      	ldr	r3, [r3, #28]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d003      	beq.n	8012bbe <netif_set_link_up+0x56>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	69db      	ldr	r3, [r3, #28]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012bbe:	3708      	adds	r7, #8
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	080206e4 	.word	0x080206e4
 8012bc8:	080208cc 	.word	0x080208cc
 8012bcc:	08020734 	.word	0x08020734

08012bd0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d107      	bne.n	8012bee <netif_set_link_down+0x1e>
 8012bde:	4b11      	ldr	r3, [pc, #68]	@ (8012c24 <netif_set_link_down+0x54>)
 8012be0:	f240 4206 	movw	r2, #1030	@ 0x406
 8012be4:	4910      	ldr	r1, [pc, #64]	@ (8012c28 <netif_set_link_down+0x58>)
 8012be6:	4811      	ldr	r0, [pc, #68]	@ (8012c2c <netif_set_link_down+0x5c>)
 8012be8:	f00a fc88 	bl	801d4fc <iprintf>
 8012bec:	e017      	b.n	8012c1e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bf4:	f003 0304 	and.w	r3, r3, #4
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d010      	beq.n	8012c1e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c02:	f023 0304 	bic.w	r3, r3, #4
 8012c06:	b2da      	uxtb	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	69db      	ldr	r3, [r3, #28]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d003      	beq.n	8012c1e <netif_set_link_down+0x4e>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	69db      	ldr	r3, [r3, #28]
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	080206e4 	.word	0x080206e4
 8012c28:	080208f0 	.word	0x080208f0
 8012c2c:	08020734 	.word	0x08020734

08012c30 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	683a      	ldr	r2, [r7, #0]
 8012c44:	61da      	str	r2, [r3, #28]
  }
}
 8012c46:	bf00      	nop
 8012c48:	370c      	adds	r7, #12
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr

08012c52 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012c52:	b480      	push	{r7}
 8012c54:	b085      	sub	sp, #20
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	60f8      	str	r0, [r7, #12]
 8012c5a:	60b9      	str	r1, [r7, #8]
 8012c5c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012c5e:	f06f 030b 	mvn.w	r3, #11
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3714      	adds	r7, #20
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr
	...

08012c70 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	4603      	mov	r3, r0
 8012c78:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d013      	beq.n	8012ca8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012c80:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb8 <netif_get_by_index+0x48>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	60fb      	str	r3, [r7, #12]
 8012c86:	e00c      	b.n	8012ca2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012c8e:	3301      	adds	r3, #1
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	79fa      	ldrb	r2, [r7, #7]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d101      	bne.n	8012c9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	e006      	b.n	8012caa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	60fb      	str	r3, [r7, #12]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1ef      	bne.n	8012c88 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3714      	adds	r7, #20
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop
 8012cb8:	2000c9a0 	.word	0x2000c9a0

08012cbc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012cc2:	f009 fd5b 	bl	801c77c <sys_arch_protect>
 8012cc6:	6038      	str	r0, [r7, #0]
 8012cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8012d00 <pbuf_free_ooseq+0x44>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	6838      	ldr	r0, [r7, #0]
 8012cd0:	f009 fd62 	bl	801c798 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8012d04 <pbuf_free_ooseq+0x48>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	607b      	str	r3, [r7, #4]
 8012cda:	e00a      	b.n	8012cf2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d003      	beq.n	8012cec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f002 fbd1 	bl	801548c <tcp_free_ooseq>
      return;
 8012cea:	e005      	b.n	8012cf8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	607b      	str	r3, [r7, #4]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1f1      	bne.n	8012cdc <pbuf_free_ooseq+0x20>
    }
  }
}
 8012cf8:	3708      	adds	r7, #8
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	2000c9a9 	.word	0x2000c9a9
 8012d04:	2000c9b8 	.word	0x2000c9b8

08012d08 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012d10:	f7ff ffd4 	bl	8012cbc <pbuf_free_ooseq>
}
 8012d14:	bf00      	nop
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012d22:	f009 fd2b 	bl	801c77c <sys_arch_protect>
 8012d26:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012d28:	4b0f      	ldr	r3, [pc, #60]	@ (8012d68 <pbuf_pool_is_empty+0x4c>)
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8012d68 <pbuf_pool_is_empty+0x4c>)
 8012d30:	2201      	movs	r2, #1
 8012d32:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f009 fd2f 	bl	801c798 <sys_arch_unprotect>

  if (!queued) {
 8012d3a:	78fb      	ldrb	r3, [r7, #3]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d10f      	bne.n	8012d60 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012d40:	2100      	movs	r1, #0
 8012d42:	480a      	ldr	r0, [pc, #40]	@ (8012d6c <pbuf_pool_is_empty+0x50>)
 8012d44:	f7fe fed8 	bl	8011af8 <tcpip_try_callback>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d008      	beq.n	8012d60 <pbuf_pool_is_empty+0x44>
 8012d4e:	f009 fd15 	bl	801c77c <sys_arch_protect>
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	4b04      	ldr	r3, [pc, #16]	@ (8012d68 <pbuf_pool_is_empty+0x4c>)
 8012d56:	2200      	movs	r2, #0
 8012d58:	701a      	strb	r2, [r3, #0]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f009 fd1c 	bl	801c798 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012d60:	bf00      	nop
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	2000c9a9 	.word	0x2000c9a9
 8012d6c:	08012d09 	.word	0x08012d09

08012d70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b085      	sub	sp, #20
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	4611      	mov	r1, r2
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	460b      	mov	r3, r1
 8012d80:	80fb      	strh	r3, [r7, #6]
 8012d82:	4613      	mov	r3, r2
 8012d84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	88fa      	ldrh	r2, [r7, #6]
 8012d96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	88ba      	ldrh	r2, [r7, #4]
 8012d9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012d9e:	8b3b      	ldrh	r3, [r7, #24]
 8012da0:	b2da      	uxtb	r2, r3
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	7f3a      	ldrb	r2, [r7, #28]
 8012daa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2201      	movs	r2, #1
 8012db0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2200      	movs	r2, #0
 8012db6:	73da      	strb	r2, [r3, #15]
}
 8012db8:	bf00      	nop
 8012dba:	3714      	adds	r7, #20
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b08c      	sub	sp, #48	@ 0x30
 8012dc8:	af02      	add	r7, sp, #8
 8012dca:	4603      	mov	r3, r0
 8012dcc:	71fb      	strb	r3, [r7, #7]
 8012dce:	460b      	mov	r3, r1
 8012dd0:	80bb      	strh	r3, [r7, #4]
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012dd6:	79fb      	ldrb	r3, [r7, #7]
 8012dd8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012dda:	887b      	ldrh	r3, [r7, #2]
 8012ddc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012de0:	d07f      	beq.n	8012ee2 <pbuf_alloc+0x11e>
 8012de2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012de6:	f300 80c8 	bgt.w	8012f7a <pbuf_alloc+0x1b6>
 8012dea:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012dee:	d010      	beq.n	8012e12 <pbuf_alloc+0x4e>
 8012df0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012df4:	f300 80c1 	bgt.w	8012f7a <pbuf_alloc+0x1b6>
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d002      	beq.n	8012e02 <pbuf_alloc+0x3e>
 8012dfc:	2b41      	cmp	r3, #65	@ 0x41
 8012dfe:	f040 80bc 	bne.w	8012f7a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012e02:	887a      	ldrh	r2, [r7, #2]
 8012e04:	88bb      	ldrh	r3, [r7, #4]
 8012e06:	4619      	mov	r1, r3
 8012e08:	2000      	movs	r0, #0
 8012e0a:	f000 f8d1 	bl	8012fb0 <pbuf_alloc_reference>
 8012e0e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8012e10:	e0bd      	b.n	8012f8e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012e12:	2300      	movs	r3, #0
 8012e14:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012e16:	2300      	movs	r3, #0
 8012e18:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012e1a:	88bb      	ldrh	r3, [r7, #4]
 8012e1c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012e1e:	200c      	movs	r0, #12
 8012e20:	f7ff fbcc 	bl	80125bc <memp_malloc>
 8012e24:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d109      	bne.n	8012e40 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012e2c:	f7ff ff76 	bl	8012d1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d002      	beq.n	8012e3c <pbuf_alloc+0x78>
            pbuf_free(p);
 8012e36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e38:	f000 faa8 	bl	801338c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	e0a7      	b.n	8012f90 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012e40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e42:	3303      	adds	r3, #3
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	f023 0303 	bic.w	r3, r3, #3
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	8b7a      	ldrh	r2, [r7, #26]
 8012e54:	4293      	cmp	r3, r2
 8012e56:	bf28      	it	cs
 8012e58:	4613      	movcs	r3, r2
 8012e5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012e5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e5e:	3310      	adds	r3, #16
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	4413      	add	r3, r2
 8012e64:	3303      	adds	r3, #3
 8012e66:	f023 0303 	bic.w	r3, r3, #3
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	89f9      	ldrh	r1, [r7, #14]
 8012e6e:	8b7a      	ldrh	r2, [r7, #26]
 8012e70:	2300      	movs	r3, #0
 8012e72:	9301      	str	r3, [sp, #4]
 8012e74:	887b      	ldrh	r3, [r7, #2]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4601      	mov	r1, r0
 8012e7c:	6938      	ldr	r0, [r7, #16]
 8012e7e:	f7ff ff77 	bl	8012d70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	f003 0303 	and.w	r3, r3, #3
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d006      	beq.n	8012e9c <pbuf_alloc+0xd8>
 8012e8e:	4b42      	ldr	r3, [pc, #264]	@ (8012f98 <pbuf_alloc+0x1d4>)
 8012e90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012e94:	4941      	ldr	r1, [pc, #260]	@ (8012f9c <pbuf_alloc+0x1d8>)
 8012e96:	4842      	ldr	r0, [pc, #264]	@ (8012fa0 <pbuf_alloc+0x1dc>)
 8012e98:	f00a fb30 	bl	801d4fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012e9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e9e:	3303      	adds	r3, #3
 8012ea0:	f023 0303 	bic.w	r3, r3, #3
 8012ea4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012ea8:	d106      	bne.n	8012eb8 <pbuf_alloc+0xf4>
 8012eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8012f98 <pbuf_alloc+0x1d4>)
 8012eac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012eb0:	493c      	ldr	r1, [pc, #240]	@ (8012fa4 <pbuf_alloc+0x1e0>)
 8012eb2:	483b      	ldr	r0, [pc, #236]	@ (8012fa0 <pbuf_alloc+0x1dc>)
 8012eb4:	f00a fb22 	bl	801d4fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d102      	bne.n	8012ec4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ec2:	e002      	b.n	8012eca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	693a      	ldr	r2, [r7, #16]
 8012ec8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012ece:	8b7a      	ldrh	r2, [r7, #26]
 8012ed0:	89fb      	ldrh	r3, [r7, #14]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012eda:	8b7b      	ldrh	r3, [r7, #26]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d19e      	bne.n	8012e1e <pbuf_alloc+0x5a>
      break;
 8012ee0:	e055      	b.n	8012f8e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012ee2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ee4:	3303      	adds	r3, #3
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	f023 0303 	bic.w	r3, r3, #3
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	88bb      	ldrh	r3, [r7, #4]
 8012ef0:	3303      	adds	r3, #3
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	f023 0303 	bic.w	r3, r3, #3
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	4413      	add	r3, r2
 8012efc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012efe:	8b3b      	ldrh	r3, [r7, #24]
 8012f00:	3310      	adds	r3, #16
 8012f02:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012f04:	8b3a      	ldrh	r2, [r7, #24]
 8012f06:	88bb      	ldrh	r3, [r7, #4]
 8012f08:	3303      	adds	r3, #3
 8012f0a:	f023 0303 	bic.w	r3, r3, #3
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d306      	bcc.n	8012f20 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012f12:	8afa      	ldrh	r2, [r7, #22]
 8012f14:	88bb      	ldrh	r3, [r7, #4]
 8012f16:	3303      	adds	r3, #3
 8012f18:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d201      	bcs.n	8012f24 <pbuf_alloc+0x160>
        return NULL;
 8012f20:	2300      	movs	r3, #0
 8012f22:	e035      	b.n	8012f90 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012f24:	8afb      	ldrh	r3, [r7, #22]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7ff f9a4 	bl	8012274 <mem_malloc>
 8012f2c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <pbuf_alloc+0x174>
        return NULL;
 8012f34:	2300      	movs	r3, #0
 8012f36:	e02b      	b.n	8012f90 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f3a:	3310      	adds	r3, #16
 8012f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f3e:	4413      	add	r3, r2
 8012f40:	3303      	adds	r3, #3
 8012f42:	f023 0303 	bic.w	r3, r3, #3
 8012f46:	4618      	mov	r0, r3
 8012f48:	88b9      	ldrh	r1, [r7, #4]
 8012f4a:	88ba      	ldrh	r2, [r7, #4]
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	9301      	str	r3, [sp, #4]
 8012f50:	887b      	ldrh	r3, [r7, #2]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	460b      	mov	r3, r1
 8012f56:	4601      	mov	r1, r0
 8012f58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f5a:	f7ff ff09 	bl	8012d70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	f003 0303 	and.w	r3, r3, #3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d010      	beq.n	8012f8c <pbuf_alloc+0x1c8>
 8012f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8012f98 <pbuf_alloc+0x1d4>)
 8012f6c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012f70:	490d      	ldr	r1, [pc, #52]	@ (8012fa8 <pbuf_alloc+0x1e4>)
 8012f72:	480b      	ldr	r0, [pc, #44]	@ (8012fa0 <pbuf_alloc+0x1dc>)
 8012f74:	f00a fac2 	bl	801d4fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012f78:	e008      	b.n	8012f8c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012f7a:	4b07      	ldr	r3, [pc, #28]	@ (8012f98 <pbuf_alloc+0x1d4>)
 8012f7c:	f240 1227 	movw	r2, #295	@ 0x127
 8012f80:	490a      	ldr	r1, [pc, #40]	@ (8012fac <pbuf_alloc+0x1e8>)
 8012f82:	4807      	ldr	r0, [pc, #28]	@ (8012fa0 <pbuf_alloc+0x1dc>)
 8012f84:	f00a faba 	bl	801d4fc <iprintf>
      return NULL;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e001      	b.n	8012f90 <pbuf_alloc+0x1cc>
      break;
 8012f8c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3728      	adds	r7, #40	@ 0x28
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	08020914 	.word	0x08020914
 8012f9c:	08020944 	.word	0x08020944
 8012fa0:	08020974 	.word	0x08020974
 8012fa4:	0802099c 	.word	0x0802099c
 8012fa8:	080209d0 	.word	0x080209d0
 8012fac:	080209fc 	.word	0x080209fc

08012fb0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af02      	add	r7, sp, #8
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	807b      	strh	r3, [r7, #2]
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012fc0:	883b      	ldrh	r3, [r7, #0]
 8012fc2:	2b41      	cmp	r3, #65	@ 0x41
 8012fc4:	d009      	beq.n	8012fda <pbuf_alloc_reference+0x2a>
 8012fc6:	883b      	ldrh	r3, [r7, #0]
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d006      	beq.n	8012fda <pbuf_alloc_reference+0x2a>
 8012fcc:	4b0f      	ldr	r3, [pc, #60]	@ (801300c <pbuf_alloc_reference+0x5c>)
 8012fce:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012fd2:	490f      	ldr	r1, [pc, #60]	@ (8013010 <pbuf_alloc_reference+0x60>)
 8012fd4:	480f      	ldr	r0, [pc, #60]	@ (8013014 <pbuf_alloc_reference+0x64>)
 8012fd6:	f00a fa91 	bl	801d4fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012fda:	200b      	movs	r0, #11
 8012fdc:	f7ff faee 	bl	80125bc <memp_malloc>
 8012fe0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d101      	bne.n	8012fec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	e00b      	b.n	8013004 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012fec:	8879      	ldrh	r1, [r7, #2]
 8012fee:	887a      	ldrh	r2, [r7, #2]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	883b      	ldrh	r3, [r7, #0]
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	68f8      	ldr	r0, [r7, #12]
 8012ffe:	f7ff feb7 	bl	8012d70 <pbuf_init_alloced_pbuf>
  return p;
 8013002:	68fb      	ldr	r3, [r7, #12]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	08020914 	.word	0x08020914
 8013010:	08020a18 	.word	0x08020a18
 8013014:	08020974 	.word	0x08020974

08013018 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b088      	sub	sp, #32
 801301c:	af02      	add	r7, sp, #8
 801301e:	607b      	str	r3, [r7, #4]
 8013020:	4603      	mov	r3, r0
 8013022:	73fb      	strb	r3, [r7, #15]
 8013024:	460b      	mov	r3, r1
 8013026:	81bb      	strh	r3, [r7, #12]
 8013028:	4613      	mov	r3, r2
 801302a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801302c:	7bfb      	ldrb	r3, [r7, #15]
 801302e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013030:	8a7b      	ldrh	r3, [r7, #18]
 8013032:	3303      	adds	r3, #3
 8013034:	f023 0203 	bic.w	r2, r3, #3
 8013038:	89bb      	ldrh	r3, [r7, #12]
 801303a:	441a      	add	r2, r3
 801303c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801303e:	429a      	cmp	r2, r3
 8013040:	d901      	bls.n	8013046 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013042:	2300      	movs	r3, #0
 8013044:	e018      	b.n	8013078 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013046:	6a3b      	ldr	r3, [r7, #32]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d007      	beq.n	801305c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801304c:	8a7b      	ldrh	r3, [r7, #18]
 801304e:	3303      	adds	r3, #3
 8013050:	f023 0303 	bic.w	r3, r3, #3
 8013054:	6a3a      	ldr	r2, [r7, #32]
 8013056:	4413      	add	r3, r2
 8013058:	617b      	str	r3, [r7, #20]
 801305a:	e001      	b.n	8013060 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801305c:	2300      	movs	r3, #0
 801305e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	89b9      	ldrh	r1, [r7, #12]
 8013064:	89ba      	ldrh	r2, [r7, #12]
 8013066:	2302      	movs	r3, #2
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	897b      	ldrh	r3, [r7, #10]
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	460b      	mov	r3, r1
 8013070:	6979      	ldr	r1, [r7, #20]
 8013072:	f7ff fe7d 	bl	8012d70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013076:	687b      	ldr	r3, [r7, #4]
}
 8013078:	4618      	mov	r0, r3
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	460b      	mov	r3, r1
 801308a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d106      	bne.n	80130a0 <pbuf_realloc+0x20>
 8013092:	4b3a      	ldr	r3, [pc, #232]	@ (801317c <pbuf_realloc+0xfc>)
 8013094:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013098:	4939      	ldr	r1, [pc, #228]	@ (8013180 <pbuf_realloc+0x100>)
 801309a:	483a      	ldr	r0, [pc, #232]	@ (8013184 <pbuf_realloc+0x104>)
 801309c:	f00a fa2e 	bl	801d4fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	891b      	ldrh	r3, [r3, #8]
 80130a4:	887a      	ldrh	r2, [r7, #2]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d263      	bcs.n	8013172 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	891a      	ldrh	r2, [r3, #8]
 80130ae:	887b      	ldrh	r3, [r7, #2]
 80130b0:	1ad3      	subs	r3, r2, r3
 80130b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80130b4:	887b      	ldrh	r3, [r7, #2]
 80130b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80130bc:	e018      	b.n	80130f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	895b      	ldrh	r3, [r3, #10]
 80130c2:	897a      	ldrh	r2, [r7, #10]
 80130c4:	1ad3      	subs	r3, r2, r3
 80130c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	891a      	ldrh	r2, [r3, #8]
 80130cc:	893b      	ldrh	r3, [r7, #8]
 80130ce:	1ad3      	subs	r3, r2, r3
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <pbuf_realloc+0x70>
 80130e2:	4b26      	ldr	r3, [pc, #152]	@ (801317c <pbuf_realloc+0xfc>)
 80130e4:	f240 12af 	movw	r2, #431	@ 0x1af
 80130e8:	4927      	ldr	r1, [pc, #156]	@ (8013188 <pbuf_realloc+0x108>)
 80130ea:	4826      	ldr	r0, [pc, #152]	@ (8013184 <pbuf_realloc+0x104>)
 80130ec:	f00a fa06 	bl	801d4fc <iprintf>
  while (rem_len > q->len) {
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	895b      	ldrh	r3, [r3, #10]
 80130f4:	897a      	ldrh	r2, [r7, #10]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d8e1      	bhi.n	80130be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	7b1b      	ldrb	r3, [r3, #12]
 80130fe:	f003 030f 	and.w	r3, r3, #15
 8013102:	2b00      	cmp	r3, #0
 8013104:	d121      	bne.n	801314a <pbuf_realloc+0xca>
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	895b      	ldrh	r3, [r3, #10]
 801310a:	897a      	ldrh	r2, [r7, #10]
 801310c:	429a      	cmp	r2, r3
 801310e:	d01c      	beq.n	801314a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	7b5b      	ldrb	r3, [r3, #13]
 8013114:	f003 0302 	and.w	r3, r3, #2
 8013118:	2b00      	cmp	r3, #0
 801311a:	d116      	bne.n	801314a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	685a      	ldr	r2, [r3, #4]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	1ad3      	subs	r3, r2, r3
 8013124:	b29a      	uxth	r2, r3
 8013126:	897b      	ldrh	r3, [r7, #10]
 8013128:	4413      	add	r3, r2
 801312a:	b29b      	uxth	r3, r3
 801312c:	4619      	mov	r1, r3
 801312e:	68f8      	ldr	r0, [r7, #12]
 8013130:	f7fe ff96 	bl	8012060 <mem_trim>
 8013134:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <pbuf_realloc+0xca>
 801313c:	4b0f      	ldr	r3, [pc, #60]	@ (801317c <pbuf_realloc+0xfc>)
 801313e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013142:	4912      	ldr	r1, [pc, #72]	@ (801318c <pbuf_realloc+0x10c>)
 8013144:	480f      	ldr	r0, [pc, #60]	@ (8013184 <pbuf_realloc+0x104>)
 8013146:	f00a f9d9 	bl	801d4fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	897a      	ldrh	r2, [r7, #10]
 801314e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	895a      	ldrh	r2, [r3, #10]
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d004      	beq.n	801316a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4618      	mov	r0, r3
 8013166:	f000 f911 	bl	801338c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2200      	movs	r2, #0
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	e000      	b.n	8013174 <pbuf_realloc+0xf4>
    return;
 8013172:	bf00      	nop

}
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	08020914 	.word	0x08020914
 8013180:	08020a2c 	.word	0x08020a2c
 8013184:	08020974 	.word	0x08020974
 8013188:	08020a44 	.word	0x08020a44
 801318c:	08020a5c 	.word	0x08020a5c

08013190 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	4613      	mov	r3, r2
 801319c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d106      	bne.n	80131b2 <pbuf_add_header_impl+0x22>
 80131a4:	4b2b      	ldr	r3, [pc, #172]	@ (8013254 <pbuf_add_header_impl+0xc4>)
 80131a6:	f240 12df 	movw	r2, #479	@ 0x1df
 80131aa:	492b      	ldr	r1, [pc, #172]	@ (8013258 <pbuf_add_header_impl+0xc8>)
 80131ac:	482b      	ldr	r0, [pc, #172]	@ (801325c <pbuf_add_header_impl+0xcc>)
 80131ae:	f00a f9a5 	bl	801d4fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d003      	beq.n	80131c0 <pbuf_add_header_impl+0x30>
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131be:	d301      	bcc.n	80131c4 <pbuf_add_header_impl+0x34>
    return 1;
 80131c0:	2301      	movs	r3, #1
 80131c2:	e043      	b.n	801324c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d101      	bne.n	80131ce <pbuf_add_header_impl+0x3e>
    return 0;
 80131ca:	2300      	movs	r3, #0
 80131cc:	e03e      	b.n	801324c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	891a      	ldrh	r2, [r3, #8]
 80131d6:	8a7b      	ldrh	r3, [r7, #18]
 80131d8:	4413      	add	r3, r2
 80131da:	b29b      	uxth	r3, r3
 80131dc:	8a7a      	ldrh	r2, [r7, #18]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d901      	bls.n	80131e6 <pbuf_add_header_impl+0x56>
    return 1;
 80131e2:	2301      	movs	r3, #1
 80131e4:	e032      	b.n	801324c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	7b1b      	ldrb	r3, [r3, #12]
 80131ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80131ec:	8a3b      	ldrh	r3, [r7, #16]
 80131ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00c      	beq.n	8013210 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	685a      	ldr	r2, [r3, #4]
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	425b      	negs	r3, r3
 80131fe:	4413      	add	r3, r2
 8013200:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	3310      	adds	r3, #16
 8013206:	697a      	ldr	r2, [r7, #20]
 8013208:	429a      	cmp	r2, r3
 801320a:	d20d      	bcs.n	8013228 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801320c:	2301      	movs	r3, #1
 801320e:	e01d      	b.n	801324c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013210:	79fb      	ldrb	r3, [r7, #7]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d006      	beq.n	8013224 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	685a      	ldr	r2, [r3, #4]
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	425b      	negs	r3, r3
 801321e:	4413      	add	r3, r2
 8013220:	617b      	str	r3, [r7, #20]
 8013222:	e001      	b.n	8013228 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013224:	2301      	movs	r3, #1
 8013226:	e011      	b.n	801324c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	697a      	ldr	r2, [r7, #20]
 801322c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	895a      	ldrh	r2, [r3, #10]
 8013232:	8a7b      	ldrh	r3, [r7, #18]
 8013234:	4413      	add	r3, r2
 8013236:	b29a      	uxth	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	891a      	ldrh	r2, [r3, #8]
 8013240:	8a7b      	ldrh	r3, [r7, #18]
 8013242:	4413      	add	r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	811a      	strh	r2, [r3, #8]


  return 0;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	08020914 	.word	0x08020914
 8013258:	08020a78 	.word	0x08020a78
 801325c:	08020974 	.word	0x08020974

08013260 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801326a:	2200      	movs	r2, #0
 801326c:	6839      	ldr	r1, [r7, #0]
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7ff ff8e 	bl	8013190 <pbuf_add_header_impl>
 8013274:	4603      	mov	r3, r0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
	...

08013280 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d106      	bne.n	801329e <pbuf_remove_header+0x1e>
 8013290:	4b20      	ldr	r3, [pc, #128]	@ (8013314 <pbuf_remove_header+0x94>)
 8013292:	f240 224b 	movw	r2, #587	@ 0x24b
 8013296:	4920      	ldr	r1, [pc, #128]	@ (8013318 <pbuf_remove_header+0x98>)
 8013298:	4820      	ldr	r0, [pc, #128]	@ (801331c <pbuf_remove_header+0x9c>)
 801329a:	f00a f92f 	bl	801d4fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d003      	beq.n	80132ac <pbuf_remove_header+0x2c>
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132aa:	d301      	bcc.n	80132b0 <pbuf_remove_header+0x30>
    return 1;
 80132ac:	2301      	movs	r3, #1
 80132ae:	e02c      	b.n	801330a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d101      	bne.n	80132ba <pbuf_remove_header+0x3a>
    return 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e027      	b.n	801330a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	895b      	ldrh	r3, [r3, #10]
 80132c2:	89fa      	ldrh	r2, [r7, #14]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d908      	bls.n	80132da <pbuf_remove_header+0x5a>
 80132c8:	4b12      	ldr	r3, [pc, #72]	@ (8013314 <pbuf_remove_header+0x94>)
 80132ca:	f240 2255 	movw	r2, #597	@ 0x255
 80132ce:	4914      	ldr	r1, [pc, #80]	@ (8013320 <pbuf_remove_header+0xa0>)
 80132d0:	4812      	ldr	r0, [pc, #72]	@ (801331c <pbuf_remove_header+0x9c>)
 80132d2:	f00a f913 	bl	801d4fc <iprintf>
 80132d6:	2301      	movs	r3, #1
 80132d8:	e017      	b.n	801330a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	685a      	ldr	r2, [r3, #4]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	441a      	add	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	895a      	ldrh	r2, [r3, #10]
 80132f0:	89fb      	ldrh	r3, [r7, #14]
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	891a      	ldrh	r2, [r3, #8]
 80132fe:	89fb      	ldrh	r3, [r7, #14]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	b29a      	uxth	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013308:	2300      	movs	r3, #0
}
 801330a:	4618      	mov	r0, r3
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	08020914 	.word	0x08020914
 8013318:	08020a78 	.word	0x08020a78
 801331c:	08020974 	.word	0x08020974
 8013320:	08020a84 	.word	0x08020a84

08013324 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	460b      	mov	r3, r1
 801332e:	807b      	strh	r3, [r7, #2]
 8013330:	4613      	mov	r3, r2
 8013332:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013338:	2b00      	cmp	r3, #0
 801333a:	da08      	bge.n	801334e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801333c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013340:	425b      	negs	r3, r3
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff ff9b 	bl	8013280 <pbuf_remove_header>
 801334a:	4603      	mov	r3, r0
 801334c:	e007      	b.n	801335e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801334e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013352:	787a      	ldrb	r2, [r7, #1]
 8013354:	4619      	mov	r1, r3
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff ff1a 	bl	8013190 <pbuf_add_header_impl>
 801335c:	4603      	mov	r3, r0
  }
}
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b082      	sub	sp, #8
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
 801336e:	460b      	mov	r3, r1
 8013370:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013372:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013376:	2201      	movs	r2, #1
 8013378:	4619      	mov	r1, r3
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff ffd2 	bl	8013324 <pbuf_header_impl>
 8013380:	4603      	mov	r3, r0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b088      	sub	sp, #32
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d10b      	bne.n	80133b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d106      	bne.n	80133ae <pbuf_free+0x22>
 80133a0:	4b3b      	ldr	r3, [pc, #236]	@ (8013490 <pbuf_free+0x104>)
 80133a2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80133a6:	493b      	ldr	r1, [pc, #236]	@ (8013494 <pbuf_free+0x108>)
 80133a8:	483b      	ldr	r0, [pc, #236]	@ (8013498 <pbuf_free+0x10c>)
 80133aa:	f00a f8a7 	bl	801d4fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80133ae:	2300      	movs	r3, #0
 80133b0:	e069      	b.n	8013486 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80133b6:	e062      	b.n	801347e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80133b8:	f009 f9e0 	bl	801c77c <sys_arch_protect>
 80133bc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	7b9b      	ldrb	r3, [r3, #14]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d106      	bne.n	80133d4 <pbuf_free+0x48>
 80133c6:	4b32      	ldr	r3, [pc, #200]	@ (8013490 <pbuf_free+0x104>)
 80133c8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80133cc:	4933      	ldr	r1, [pc, #204]	@ (801349c <pbuf_free+0x110>)
 80133ce:	4832      	ldr	r0, [pc, #200]	@ (8013498 <pbuf_free+0x10c>)
 80133d0:	f00a f894 	bl	801d4fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7b9b      	ldrb	r3, [r3, #14]
 80133d8:	3b01      	subs	r3, #1
 80133da:	b2da      	uxtb	r2, r3
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	739a      	strb	r2, [r3, #14]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	7b9b      	ldrb	r3, [r3, #14]
 80133e4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80133e6:	69b8      	ldr	r0, [r7, #24]
 80133e8:	f009 f9d6 	bl	801c798 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80133ec:	7dfb      	ldrb	r3, [r7, #23]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d143      	bne.n	801347a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7b1b      	ldrb	r3, [r3, #12]
 80133fc:	f003 030f 	and.w	r3, r3, #15
 8013400:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	7b5b      	ldrb	r3, [r3, #13]
 8013406:	f003 0302 	and.w	r3, r3, #2
 801340a:	2b00      	cmp	r3, #0
 801340c:	d011      	beq.n	8013432 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	691b      	ldr	r3, [r3, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d106      	bne.n	8013428 <pbuf_free+0x9c>
 801341a:	4b1d      	ldr	r3, [pc, #116]	@ (8013490 <pbuf_free+0x104>)
 801341c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013420:	491f      	ldr	r1, [pc, #124]	@ (80134a0 <pbuf_free+0x114>)
 8013422:	481d      	ldr	r0, [pc, #116]	@ (8013498 <pbuf_free+0x10c>)
 8013424:	f00a f86a 	bl	801d4fc <iprintf>
        pc->custom_free_function(p);
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	691b      	ldr	r3, [r3, #16]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	4798      	blx	r3
 8013430:	e01d      	b.n	801346e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013432:	7bfb      	ldrb	r3, [r7, #15]
 8013434:	2b02      	cmp	r3, #2
 8013436:	d104      	bne.n	8013442 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013438:	6879      	ldr	r1, [r7, #4]
 801343a:	200c      	movs	r0, #12
 801343c:	f7ff f934 	bl	80126a8 <memp_free>
 8013440:	e015      	b.n	801346e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013442:	7bfb      	ldrb	r3, [r7, #15]
 8013444:	2b01      	cmp	r3, #1
 8013446:	d104      	bne.n	8013452 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013448:	6879      	ldr	r1, [r7, #4]
 801344a:	200b      	movs	r0, #11
 801344c:	f7ff f92c 	bl	80126a8 <memp_free>
 8013450:	e00d      	b.n	801346e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013452:	7bfb      	ldrb	r3, [r7, #15]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d103      	bne.n	8013460 <pbuf_free+0xd4>
          mem_free(p);
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7fe fd71 	bl	8011f40 <mem_free>
 801345e:	e006      	b.n	801346e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013460:	4b0b      	ldr	r3, [pc, #44]	@ (8013490 <pbuf_free+0x104>)
 8013462:	f240 320f 	movw	r2, #783	@ 0x30f
 8013466:	490f      	ldr	r1, [pc, #60]	@ (80134a4 <pbuf_free+0x118>)
 8013468:	480b      	ldr	r0, [pc, #44]	@ (8013498 <pbuf_free+0x10c>)
 801346a:	f00a f847 	bl	801d4fc <iprintf>
        }
      }
      count++;
 801346e:	7ffb      	ldrb	r3, [r7, #31]
 8013470:	3301      	adds	r3, #1
 8013472:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	607b      	str	r3, [r7, #4]
 8013478:	e001      	b.n	801347e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801347a:	2300      	movs	r3, #0
 801347c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d199      	bne.n	80133b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013484:	7ffb      	ldrb	r3, [r7, #31]
}
 8013486:	4618      	mov	r0, r3
 8013488:	3720      	adds	r7, #32
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	08020914 	.word	0x08020914
 8013494:	08020a78 	.word	0x08020a78
 8013498:	08020974 	.word	0x08020974
 801349c:	08020aa4 	.word	0x08020aa4
 80134a0:	08020abc 	.word	0x08020abc
 80134a4:	08020ae0 	.word	0x08020ae0

080134a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80134b4:	e005      	b.n	80134c2 <pbuf_clen+0x1a>
    ++len;
 80134b6:	89fb      	ldrh	r3, [r7, #14]
 80134b8:	3301      	adds	r3, #1
 80134ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d1f6      	bne.n	80134b6 <pbuf_clen+0xe>
  }
  return len;
 80134c8:	89fb      	ldrh	r3, [r7, #14]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
	...

080134d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d016      	beq.n	8013514 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80134e6:	f009 f949 	bl	801c77c <sys_arch_protect>
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7b9b      	ldrb	r3, [r3, #14]
 80134f0:	3301      	adds	r3, #1
 80134f2:	b2da      	uxtb	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	739a      	strb	r2, [r3, #14]
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f009 f94d 	bl	801c798 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	7b9b      	ldrb	r3, [r3, #14]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <pbuf_ref+0x3c>
 8013506:	4b05      	ldr	r3, [pc, #20]	@ (801351c <pbuf_ref+0x44>)
 8013508:	f240 3242 	movw	r2, #834	@ 0x342
 801350c:	4904      	ldr	r1, [pc, #16]	@ (8013520 <pbuf_ref+0x48>)
 801350e:	4805      	ldr	r0, [pc, #20]	@ (8013524 <pbuf_ref+0x4c>)
 8013510:	f009 fff4 	bl	801d4fc <iprintf>
  }
}
 8013514:	bf00      	nop
 8013516:	3710      	adds	r7, #16
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	08020914 	.word	0x08020914
 8013520:	08020af4 	.word	0x08020af4
 8013524:	08020974 	.word	0x08020974

08013528 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <pbuf_cat+0x16>
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d107      	bne.n	801354e <pbuf_cat+0x26>
 801353e:	4b20      	ldr	r3, [pc, #128]	@ (80135c0 <pbuf_cat+0x98>)
 8013540:	f240 3259 	movw	r2, #857	@ 0x359
 8013544:	491f      	ldr	r1, [pc, #124]	@ (80135c4 <pbuf_cat+0x9c>)
 8013546:	4820      	ldr	r0, [pc, #128]	@ (80135c8 <pbuf_cat+0xa0>)
 8013548:	f009 ffd8 	bl	801d4fc <iprintf>
 801354c:	e034      	b.n	80135b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	60fb      	str	r3, [r7, #12]
 8013552:	e00a      	b.n	801356a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	891a      	ldrh	r2, [r3, #8]
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	891b      	ldrh	r3, [r3, #8]
 801355c:	4413      	add	r3, r2
 801355e:	b29a      	uxth	r2, r3
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	60fb      	str	r3, [r7, #12]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1f0      	bne.n	8013554 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	891a      	ldrh	r2, [r3, #8]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	895b      	ldrh	r3, [r3, #10]
 801357a:	429a      	cmp	r2, r3
 801357c:	d006      	beq.n	801358c <pbuf_cat+0x64>
 801357e:	4b10      	ldr	r3, [pc, #64]	@ (80135c0 <pbuf_cat+0x98>)
 8013580:	f240 3262 	movw	r2, #866	@ 0x362
 8013584:	4911      	ldr	r1, [pc, #68]	@ (80135cc <pbuf_cat+0xa4>)
 8013586:	4810      	ldr	r0, [pc, #64]	@ (80135c8 <pbuf_cat+0xa0>)
 8013588:	f009 ffb8 	bl	801d4fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d006      	beq.n	80135a2 <pbuf_cat+0x7a>
 8013594:	4b0a      	ldr	r3, [pc, #40]	@ (80135c0 <pbuf_cat+0x98>)
 8013596:	f240 3263 	movw	r2, #867	@ 0x363
 801359a:	490d      	ldr	r1, [pc, #52]	@ (80135d0 <pbuf_cat+0xa8>)
 801359c:	480a      	ldr	r0, [pc, #40]	@ (80135c8 <pbuf_cat+0xa0>)
 801359e:	f009 ffad 	bl	801d4fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	891a      	ldrh	r2, [r3, #8]
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	891b      	ldrh	r3, [r3, #8]
 80135aa:	4413      	add	r3, r2
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	683a      	ldr	r2, [r7, #0]
 80135b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	08020914 	.word	0x08020914
 80135c4:	08020b08 	.word	0x08020b08
 80135c8:	08020974 	.word	0x08020974
 80135cc:	08020b40 	.word	0x08020b40
 80135d0:	08020b70 	.word	0x08020b70

080135d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80135de:	2300      	movs	r3, #0
 80135e0:	617b      	str	r3, [r7, #20]
 80135e2:	2300      	movs	r3, #0
 80135e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d008      	beq.n	80135fe <pbuf_copy+0x2a>
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d005      	beq.n	80135fe <pbuf_copy+0x2a>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	891a      	ldrh	r2, [r3, #8]
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	891b      	ldrh	r3, [r3, #8]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d209      	bcs.n	8013612 <pbuf_copy+0x3e>
 80135fe:	4b57      	ldr	r3, [pc, #348]	@ (801375c <pbuf_copy+0x188>)
 8013600:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013604:	4956      	ldr	r1, [pc, #344]	@ (8013760 <pbuf_copy+0x18c>)
 8013606:	4857      	ldr	r0, [pc, #348]	@ (8013764 <pbuf_copy+0x190>)
 8013608:	f009 ff78 	bl	801d4fc <iprintf>
 801360c:	f06f 030f 	mvn.w	r3, #15
 8013610:	e09f      	b.n	8013752 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	895b      	ldrh	r3, [r3, #10]
 8013616:	461a      	mov	r2, r3
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	1ad2      	subs	r2, r2, r3
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	895b      	ldrh	r3, [r3, #10]
 8013620:	4619      	mov	r1, r3
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	1acb      	subs	r3, r1, r3
 8013626:	429a      	cmp	r2, r3
 8013628:	d306      	bcc.n	8013638 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	895b      	ldrh	r3, [r3, #10]
 801362e:	461a      	mov	r2, r3
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	60fb      	str	r3, [r7, #12]
 8013636:	e005      	b.n	8013644 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	895b      	ldrh	r3, [r3, #10]
 801363c:	461a      	mov	r2, r3
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	1ad3      	subs	r3, r2, r3
 8013642:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	685a      	ldr	r2, [r3, #4]
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	18d0      	adds	r0, r2, r3
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	685a      	ldr	r2, [r3, #4]
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	4413      	add	r3, r2
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	4619      	mov	r1, r3
 8013658:	f00a f903 	bl	801d862 <memcpy>
    offset_to += len;
 801365c:	697a      	ldr	r2, [r7, #20]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	4413      	add	r3, r2
 8013662:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013664:	693a      	ldr	r2, [r7, #16]
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	4413      	add	r3, r2
 801366a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	895b      	ldrh	r3, [r3, #10]
 8013670:	461a      	mov	r2, r3
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	4293      	cmp	r3, r2
 8013676:	d906      	bls.n	8013686 <pbuf_copy+0xb2>
 8013678:	4b38      	ldr	r3, [pc, #224]	@ (801375c <pbuf_copy+0x188>)
 801367a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801367e:	493a      	ldr	r1, [pc, #232]	@ (8013768 <pbuf_copy+0x194>)
 8013680:	4838      	ldr	r0, [pc, #224]	@ (8013764 <pbuf_copy+0x190>)
 8013682:	f009 ff3b 	bl	801d4fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	895b      	ldrh	r3, [r3, #10]
 801368a:	461a      	mov	r2, r3
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	4293      	cmp	r3, r2
 8013690:	d906      	bls.n	80136a0 <pbuf_copy+0xcc>
 8013692:	4b32      	ldr	r3, [pc, #200]	@ (801375c <pbuf_copy+0x188>)
 8013694:	f240 32da 	movw	r2, #986	@ 0x3da
 8013698:	4934      	ldr	r1, [pc, #208]	@ (801376c <pbuf_copy+0x198>)
 801369a:	4832      	ldr	r0, [pc, #200]	@ (8013764 <pbuf_copy+0x190>)
 801369c:	f009 ff2e 	bl	801d4fc <iprintf>
    if (offset_from >= p_from->len) {
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	895b      	ldrh	r3, [r3, #10]
 80136a4:	461a      	mov	r2, r3
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d304      	bcc.n	80136b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	895b      	ldrh	r3, [r3, #10]
 80136ba:	461a      	mov	r2, r3
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	4293      	cmp	r3, r2
 80136c0:	d114      	bne.n	80136ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80136c2:	2300      	movs	r3, #0
 80136c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10c      	bne.n	80136ec <pbuf_copy+0x118>
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d009      	beq.n	80136ec <pbuf_copy+0x118>
 80136d8:	4b20      	ldr	r3, [pc, #128]	@ (801375c <pbuf_copy+0x188>)
 80136da:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80136de:	4924      	ldr	r1, [pc, #144]	@ (8013770 <pbuf_copy+0x19c>)
 80136e0:	4820      	ldr	r0, [pc, #128]	@ (8013764 <pbuf_copy+0x190>)
 80136e2:	f009 ff0b 	bl	801d4fc <iprintf>
 80136e6:	f06f 030f 	mvn.w	r3, #15
 80136ea:	e032      	b.n	8013752 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d013      	beq.n	801371a <pbuf_copy+0x146>
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	895a      	ldrh	r2, [r3, #10]
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	891b      	ldrh	r3, [r3, #8]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d10d      	bne.n	801371a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d009      	beq.n	801371a <pbuf_copy+0x146>
 8013706:	4b15      	ldr	r3, [pc, #84]	@ (801375c <pbuf_copy+0x188>)
 8013708:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801370c:	4919      	ldr	r1, [pc, #100]	@ (8013774 <pbuf_copy+0x1a0>)
 801370e:	4815      	ldr	r0, [pc, #84]	@ (8013764 <pbuf_copy+0x190>)
 8013710:	f009 fef4 	bl	801d4fc <iprintf>
 8013714:	f06f 0305 	mvn.w	r3, #5
 8013718:	e01b      	b.n	8013752 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d013      	beq.n	8013748 <pbuf_copy+0x174>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	895a      	ldrh	r2, [r3, #10]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	891b      	ldrh	r3, [r3, #8]
 8013728:	429a      	cmp	r2, r3
 801372a:	d10d      	bne.n	8013748 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d009      	beq.n	8013748 <pbuf_copy+0x174>
 8013734:	4b09      	ldr	r3, [pc, #36]	@ (801375c <pbuf_copy+0x188>)
 8013736:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801373a:	490e      	ldr	r1, [pc, #56]	@ (8013774 <pbuf_copy+0x1a0>)
 801373c:	4809      	ldr	r0, [pc, #36]	@ (8013764 <pbuf_copy+0x190>)
 801373e:	f009 fedd 	bl	801d4fc <iprintf>
 8013742:	f06f 0305 	mvn.w	r3, #5
 8013746:	e004      	b.n	8013752 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	f47f af61 	bne.w	8013612 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	3718      	adds	r7, #24
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	08020914 	.word	0x08020914
 8013760:	08020bbc 	.word	0x08020bbc
 8013764:	08020974 	.word	0x08020974
 8013768:	08020bec 	.word	0x08020bec
 801376c:	08020c04 	.word	0x08020c04
 8013770:	08020c20 	.word	0x08020c20
 8013774:	08020c30 	.word	0x08020c30

08013778 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b088      	sub	sp, #32
 801377c:	af00      	add	r7, sp, #0
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	60b9      	str	r1, [r7, #8]
 8013782:	4611      	mov	r1, r2
 8013784:	461a      	mov	r2, r3
 8013786:	460b      	mov	r3, r1
 8013788:	80fb      	strh	r3, [r7, #6]
 801378a:	4613      	mov	r3, r2
 801378c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801378e:	2300      	movs	r3, #0
 8013790:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013792:	2300      	movs	r3, #0
 8013794:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d108      	bne.n	80137ae <pbuf_copy_partial+0x36>
 801379c:	4b2b      	ldr	r3, [pc, #172]	@ (801384c <pbuf_copy_partial+0xd4>)
 801379e:	f240 420a 	movw	r2, #1034	@ 0x40a
 80137a2:	492b      	ldr	r1, [pc, #172]	@ (8013850 <pbuf_copy_partial+0xd8>)
 80137a4:	482b      	ldr	r0, [pc, #172]	@ (8013854 <pbuf_copy_partial+0xdc>)
 80137a6:	f009 fea9 	bl	801d4fc <iprintf>
 80137aa:	2300      	movs	r3, #0
 80137ac:	e04a      	b.n	8013844 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d108      	bne.n	80137c6 <pbuf_copy_partial+0x4e>
 80137b4:	4b25      	ldr	r3, [pc, #148]	@ (801384c <pbuf_copy_partial+0xd4>)
 80137b6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80137ba:	4927      	ldr	r1, [pc, #156]	@ (8013858 <pbuf_copy_partial+0xe0>)
 80137bc:	4825      	ldr	r0, [pc, #148]	@ (8013854 <pbuf_copy_partial+0xdc>)
 80137be:	f009 fe9d 	bl	801d4fc <iprintf>
 80137c2:	2300      	movs	r3, #0
 80137c4:	e03e      	b.n	8013844 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	61fb      	str	r3, [r7, #28]
 80137ca:	e034      	b.n	8013836 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80137cc:	88bb      	ldrh	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d00a      	beq.n	80137e8 <pbuf_copy_partial+0x70>
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	895b      	ldrh	r3, [r3, #10]
 80137d6:	88ba      	ldrh	r2, [r7, #4]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d305      	bcc.n	80137e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	895b      	ldrh	r3, [r3, #10]
 80137e0:	88ba      	ldrh	r2, [r7, #4]
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	80bb      	strh	r3, [r7, #4]
 80137e6:	e023      	b.n	8013830 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	895a      	ldrh	r2, [r3, #10]
 80137ec:	88bb      	ldrh	r3, [r7, #4]
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80137f2:	8b3a      	ldrh	r2, [r7, #24]
 80137f4:	88fb      	ldrh	r3, [r7, #6]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d901      	bls.n	80137fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80137fa:	88fb      	ldrh	r3, [r7, #6]
 80137fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80137fe:	8b7b      	ldrh	r3, [r7, #26]
 8013800:	68ba      	ldr	r2, [r7, #8]
 8013802:	18d0      	adds	r0, r2, r3
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	685a      	ldr	r2, [r3, #4]
 8013808:	88bb      	ldrh	r3, [r7, #4]
 801380a:	4413      	add	r3, r2
 801380c:	8b3a      	ldrh	r2, [r7, #24]
 801380e:	4619      	mov	r1, r3
 8013810:	f00a f827 	bl	801d862 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013814:	8afa      	ldrh	r2, [r7, #22]
 8013816:	8b3b      	ldrh	r3, [r7, #24]
 8013818:	4413      	add	r3, r2
 801381a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801381c:	8b7a      	ldrh	r2, [r7, #26]
 801381e:	8b3b      	ldrh	r3, [r7, #24]
 8013820:	4413      	add	r3, r2
 8013822:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013824:	88fa      	ldrh	r2, [r7, #6]
 8013826:	8b3b      	ldrh	r3, [r7, #24]
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801382c:	2300      	movs	r3, #0
 801382e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	61fb      	str	r3, [r7, #28]
 8013836:	88fb      	ldrh	r3, [r7, #6]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d002      	beq.n	8013842 <pbuf_copy_partial+0xca>
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d1c4      	bne.n	80137cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013842:	8afb      	ldrh	r3, [r7, #22]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3720      	adds	r7, #32
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	08020914 	.word	0x08020914
 8013850:	08020c5c 	.word	0x08020c5c
 8013854:	08020974 	.word	0x08020974
 8013858:	08020c7c 	.word	0x08020c7c

0801385c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	4603      	mov	r3, r0
 8013864:	603a      	str	r2, [r7, #0]
 8013866:	71fb      	strb	r3, [r7, #7]
 8013868:	460b      	mov	r3, r1
 801386a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	8919      	ldrh	r1, [r3, #8]
 8013870:	88ba      	ldrh	r2, [r7, #4]
 8013872:	79fb      	ldrb	r3, [r7, #7]
 8013874:	4618      	mov	r0, r3
 8013876:	f7ff faa5 	bl	8012dc4 <pbuf_alloc>
 801387a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d101      	bne.n	8013886 <pbuf_clone+0x2a>
    return NULL;
 8013882:	2300      	movs	r3, #0
 8013884:	e011      	b.n	80138aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013886:	6839      	ldr	r1, [r7, #0]
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f7ff fea3 	bl	80135d4 <pbuf_copy>
 801388e:	4603      	mov	r3, r0
 8013890:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013892:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d006      	beq.n	80138a8 <pbuf_clone+0x4c>
 801389a:	4b06      	ldr	r3, [pc, #24]	@ (80138b4 <pbuf_clone+0x58>)
 801389c:	f240 5224 	movw	r2, #1316	@ 0x524
 80138a0:	4905      	ldr	r1, [pc, #20]	@ (80138b8 <pbuf_clone+0x5c>)
 80138a2:	4806      	ldr	r0, [pc, #24]	@ (80138bc <pbuf_clone+0x60>)
 80138a4:	f009 fe2a 	bl	801d4fc <iprintf>
  return q;
 80138a8:	68fb      	ldr	r3, [r7, #12]
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	08020914 	.word	0x08020914
 80138b8:	08020d88 	.word	0x08020d88
 80138bc:	08020974 	.word	0x08020974

080138c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80138c4:	f009 fc96 	bl	801d1f4 <rand>
 80138c8:	4603      	mov	r3, r0
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	4b01      	ldr	r3, [pc, #4]	@ (80138e0 <tcp_init+0x20>)
 80138da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80138dc:	bf00      	nop
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	2000009c 	.word	0x2000009c

080138e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	7d1b      	ldrb	r3, [r3, #20]
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d105      	bne.n	8013900 <tcp_free+0x1c>
 80138f4:	4b06      	ldr	r3, [pc, #24]	@ (8013910 <tcp_free+0x2c>)
 80138f6:	22d4      	movs	r2, #212	@ 0xd4
 80138f8:	4906      	ldr	r1, [pc, #24]	@ (8013914 <tcp_free+0x30>)
 80138fa:	4807      	ldr	r0, [pc, #28]	@ (8013918 <tcp_free+0x34>)
 80138fc:	f009 fdfe 	bl	801d4fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013900:	6879      	ldr	r1, [r7, #4]
 8013902:	2001      	movs	r0, #1
 8013904:	f7fe fed0 	bl	80126a8 <memp_free>
}
 8013908:	bf00      	nop
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	08020e14 	.word	0x08020e14
 8013914:	08020e44 	.word	0x08020e44
 8013918:	08020e58 	.word	0x08020e58

0801391c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	7d1b      	ldrb	r3, [r3, #20]
 8013928:	2b01      	cmp	r3, #1
 801392a:	d105      	bne.n	8013938 <tcp_free_listen+0x1c>
 801392c:	4b06      	ldr	r3, [pc, #24]	@ (8013948 <tcp_free_listen+0x2c>)
 801392e:	22df      	movs	r2, #223	@ 0xdf
 8013930:	4906      	ldr	r1, [pc, #24]	@ (801394c <tcp_free_listen+0x30>)
 8013932:	4807      	ldr	r0, [pc, #28]	@ (8013950 <tcp_free_listen+0x34>)
 8013934:	f009 fde2 	bl	801d4fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013938:	6879      	ldr	r1, [r7, #4]
 801393a:	2002      	movs	r0, #2
 801393c:	f7fe feb4 	bl	80126a8 <memp_free>
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	08020e14 	.word	0x08020e14
 801394c:	08020e80 	.word	0x08020e80
 8013950:	08020e58 	.word	0x08020e58

08013954 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013958:	f001 f85e 	bl	8014a18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801395c:	4b07      	ldr	r3, [pc, #28]	@ (801397c <tcp_tmr+0x28>)
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	3301      	adds	r3, #1
 8013962:	b2da      	uxtb	r2, r3
 8013964:	4b05      	ldr	r3, [pc, #20]	@ (801397c <tcp_tmr+0x28>)
 8013966:	701a      	strb	r2, [r3, #0]
 8013968:	4b04      	ldr	r3, [pc, #16]	@ (801397c <tcp_tmr+0x28>)
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013974:	f000 fd0e 	bl	8014394 <tcp_slowtmr>
  }
}
 8013978:	bf00      	nop
 801397a:	bd80      	pop	{r7, pc}
 801397c:	2000c9c1 	.word	0x2000c9c1

08013980 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d105      	bne.n	801399c <tcp_remove_listener+0x1c>
 8013990:	4b0d      	ldr	r3, [pc, #52]	@ (80139c8 <tcp_remove_listener+0x48>)
 8013992:	22ff      	movs	r2, #255	@ 0xff
 8013994:	490d      	ldr	r1, [pc, #52]	@ (80139cc <tcp_remove_listener+0x4c>)
 8013996:	480e      	ldr	r0, [pc, #56]	@ (80139d0 <tcp_remove_listener+0x50>)
 8013998:	f009 fdb0 	bl	801d4fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	60fb      	str	r3, [r7, #12]
 80139a0:	e00a      	b.n	80139b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80139a6:	683a      	ldr	r2, [r7, #0]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d102      	bne.n	80139b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2200      	movs	r2, #0
 80139b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	60fb      	str	r3, [r7, #12]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1f1      	bne.n	80139a2 <tcp_remove_listener+0x22>
    }
  }
}
 80139be:	bf00      	nop
 80139c0:	bf00      	nop
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	08020e14 	.word	0x08020e14
 80139cc:	08020e9c 	.word	0x08020e9c
 80139d0:	08020e58 	.word	0x08020e58

080139d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d106      	bne.n	80139f0 <tcp_listen_closed+0x1c>
 80139e2:	4b14      	ldr	r3, [pc, #80]	@ (8013a34 <tcp_listen_closed+0x60>)
 80139e4:	f240 1211 	movw	r2, #273	@ 0x111
 80139e8:	4913      	ldr	r1, [pc, #76]	@ (8013a38 <tcp_listen_closed+0x64>)
 80139ea:	4814      	ldr	r0, [pc, #80]	@ (8013a3c <tcp_listen_closed+0x68>)
 80139ec:	f009 fd86 	bl	801d4fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	7d1b      	ldrb	r3, [r3, #20]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d006      	beq.n	8013a06 <tcp_listen_closed+0x32>
 80139f8:	4b0e      	ldr	r3, [pc, #56]	@ (8013a34 <tcp_listen_closed+0x60>)
 80139fa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80139fe:	4910      	ldr	r1, [pc, #64]	@ (8013a40 <tcp_listen_closed+0x6c>)
 8013a00:	480e      	ldr	r0, [pc, #56]	@ (8013a3c <tcp_listen_closed+0x68>)
 8013a02:	f009 fd7b 	bl	801d4fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013a06:	2301      	movs	r3, #1
 8013a08:	60fb      	str	r3, [r7, #12]
 8013a0a:	e00b      	b.n	8013a24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8013a44 <tcp_listen_closed+0x70>)
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	6879      	ldr	r1, [r7, #4]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff ffb1 	bl	8013980 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	3301      	adds	r3, #1
 8013a22:	60fb      	str	r3, [r7, #12]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b03      	cmp	r3, #3
 8013a28:	d9f0      	bls.n	8013a0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013a2a:	bf00      	nop
 8013a2c:	bf00      	nop
 8013a2e:	3710      	adds	r7, #16
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	08020e14 	.word	0x08020e14
 8013a38:	08020ec4 	.word	0x08020ec4
 8013a3c:	08020e58 	.word	0x08020e58
 8013a40:	08020ed0 	.word	0x08020ed0
 8013a44:	08022e84 	.word	0x08022e84

08013a48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013a48:	b5b0      	push	{r4, r5, r7, lr}
 8013a4a:	b088      	sub	sp, #32
 8013a4c:	af04      	add	r7, sp, #16
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d106      	bne.n	8013a68 <tcp_close_shutdown+0x20>
 8013a5a:	4b63      	ldr	r3, [pc, #396]	@ (8013be8 <tcp_close_shutdown+0x1a0>)
 8013a5c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8013a60:	4962      	ldr	r1, [pc, #392]	@ (8013bec <tcp_close_shutdown+0x1a4>)
 8013a62:	4863      	ldr	r0, [pc, #396]	@ (8013bf0 <tcp_close_shutdown+0x1a8>)
 8013a64:	f009 fd4a 	bl	801d4fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013a68:	78fb      	ldrb	r3, [r7, #3]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d066      	beq.n	8013b3c <tcp_close_shutdown+0xf4>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	7d1b      	ldrb	r3, [r3, #20]
 8013a72:	2b04      	cmp	r3, #4
 8013a74:	d003      	beq.n	8013a7e <tcp_close_shutdown+0x36>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	7d1b      	ldrb	r3, [r3, #20]
 8013a7a:	2b07      	cmp	r3, #7
 8013a7c:	d15e      	bne.n	8013b3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d104      	bne.n	8013a90 <tcp_close_shutdown+0x48>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a8a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013a8e:	d055      	beq.n	8013b3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	8b5b      	ldrh	r3, [r3, #26]
 8013a94:	f003 0310 	and.w	r3, r3, #16
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d106      	bne.n	8013aaa <tcp_close_shutdown+0x62>
 8013a9c:	4b52      	ldr	r3, [pc, #328]	@ (8013be8 <tcp_close_shutdown+0x1a0>)
 8013a9e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8013aa2:	4954      	ldr	r1, [pc, #336]	@ (8013bf4 <tcp_close_shutdown+0x1ac>)
 8013aa4:	4852      	ldr	r0, [pc, #328]	@ (8013bf0 <tcp_close_shutdown+0x1a8>)
 8013aa6:	f009 fd29 	bl	801d4fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013ab2:	687d      	ldr	r5, [r7, #4]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	3304      	adds	r3, #4
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	8ad2      	ldrh	r2, [r2, #22]
 8013abc:	6879      	ldr	r1, [r7, #4]
 8013abe:	8b09      	ldrh	r1, [r1, #24]
 8013ac0:	9102      	str	r1, [sp, #8]
 8013ac2:	9201      	str	r2, [sp, #4]
 8013ac4:	9300      	str	r3, [sp, #0]
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	4622      	mov	r2, r4
 8013aca:	4601      	mov	r1, r0
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f005 fd43 	bl	8019558 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f001 fb26 	bl	8015124 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013ad8:	4b47      	ldr	r3, [pc, #284]	@ (8013bf8 <tcp_close_shutdown+0x1b0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d105      	bne.n	8013aee <tcp_close_shutdown+0xa6>
 8013ae2:	4b45      	ldr	r3, [pc, #276]	@ (8013bf8 <tcp_close_shutdown+0x1b0>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	4a43      	ldr	r2, [pc, #268]	@ (8013bf8 <tcp_close_shutdown+0x1b0>)
 8013aea:	6013      	str	r3, [r2, #0]
 8013aec:	e013      	b.n	8013b16 <tcp_close_shutdown+0xce>
 8013aee:	4b42      	ldr	r3, [pc, #264]	@ (8013bf8 <tcp_close_shutdown+0x1b0>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	60fb      	str	r3, [r7, #12]
 8013af4:	e00c      	b.n	8013b10 <tcp_close_shutdown+0xc8>
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d104      	bne.n	8013b0a <tcp_close_shutdown+0xc2>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	68da      	ldr	r2, [r3, #12]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	60da      	str	r2, [r3, #12]
 8013b08:	e005      	b.n	8013b16 <tcp_close_shutdown+0xce>
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	68db      	ldr	r3, [r3, #12]
 8013b0e:	60fb      	str	r3, [r7, #12]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d1ef      	bne.n	8013af6 <tcp_close_shutdown+0xae>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	60da      	str	r2, [r3, #12]
 8013b1c:	4b37      	ldr	r3, [pc, #220]	@ (8013bfc <tcp_close_shutdown+0x1b4>)
 8013b1e:	2201      	movs	r2, #1
 8013b20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013b22:	4b37      	ldr	r3, [pc, #220]	@ (8013c00 <tcp_close_shutdown+0x1b8>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d102      	bne.n	8013b32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013b2c:	f003 ffba 	bl	8017aa4 <tcp_trigger_input_pcb_close>
 8013b30:	e002      	b.n	8013b38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff fed6 	bl	80138e4 <tcp_free>
      }
      return ERR_OK;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	e050      	b.n	8013bde <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	7d1b      	ldrb	r3, [r3, #20]
 8013b40:	2b02      	cmp	r3, #2
 8013b42:	d03b      	beq.n	8013bbc <tcp_close_shutdown+0x174>
 8013b44:	2b02      	cmp	r3, #2
 8013b46:	dc44      	bgt.n	8013bd2 <tcp_close_shutdown+0x18a>
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <tcp_close_shutdown+0x10a>
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d02a      	beq.n	8013ba6 <tcp_close_shutdown+0x15e>
 8013b50:	e03f      	b.n	8013bd2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8adb      	ldrh	r3, [r3, #22]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d021      	beq.n	8013b9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8013c04 <tcp_close_shutdown+0x1bc>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d105      	bne.n	8013b70 <tcp_close_shutdown+0x128>
 8013b64:	4b27      	ldr	r3, [pc, #156]	@ (8013c04 <tcp_close_shutdown+0x1bc>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	4a26      	ldr	r2, [pc, #152]	@ (8013c04 <tcp_close_shutdown+0x1bc>)
 8013b6c:	6013      	str	r3, [r2, #0]
 8013b6e:	e013      	b.n	8013b98 <tcp_close_shutdown+0x150>
 8013b70:	4b24      	ldr	r3, [pc, #144]	@ (8013c04 <tcp_close_shutdown+0x1bc>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	60bb      	str	r3, [r7, #8]
 8013b76:	e00c      	b.n	8013b92 <tcp_close_shutdown+0x14a>
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d104      	bne.n	8013b8c <tcp_close_shutdown+0x144>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	68da      	ldr	r2, [r3, #12]
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	60da      	str	r2, [r3, #12]
 8013b8a:	e005      	b.n	8013b98 <tcp_close_shutdown+0x150>
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	60bb      	str	r3, [r7, #8]
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1ef      	bne.n	8013b78 <tcp_close_shutdown+0x130>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7ff fea0 	bl	80138e4 <tcp_free>
      break;
 8013ba4:	e01a      	b.n	8013bdc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff ff14 	bl	80139d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013bac:	6879      	ldr	r1, [r7, #4]
 8013bae:	4816      	ldr	r0, [pc, #88]	@ (8013c08 <tcp_close_shutdown+0x1c0>)
 8013bb0:	f001 fb08 	bl	80151c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7ff feb1 	bl	801391c <tcp_free_listen>
      break;
 8013bba:	e00f      	b.n	8013bdc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013bbc:	6879      	ldr	r1, [r7, #4]
 8013bbe:	480e      	ldr	r0, [pc, #56]	@ (8013bf8 <tcp_close_shutdown+0x1b0>)
 8013bc0:	f001 fb00 	bl	80151c4 <tcp_pcb_remove>
 8013bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8013bfc <tcp_close_shutdown+0x1b4>)
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7ff fe8a 	bl	80138e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013bd0:	e004      	b.n	8013bdc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f81a 	bl	8013c0c <tcp_close_shutdown_fin>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	e000      	b.n	8013bde <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3710      	adds	r7, #16
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bdb0      	pop	{r4, r5, r7, pc}
 8013be6:	bf00      	nop
 8013be8:	08020e14 	.word	0x08020e14
 8013bec:	08020ee8 	.word	0x08020ee8
 8013bf0:	08020e58 	.word	0x08020e58
 8013bf4:	08020f08 	.word	0x08020f08
 8013bf8:	2000c9b8 	.word	0x2000c9b8
 8013bfc:	2000c9c0 	.word	0x2000c9c0
 8013c00:	2000c9f8 	.word	0x2000c9f8
 8013c04:	2000c9b0 	.word	0x2000c9b0
 8013c08:	2000c9b4 	.word	0x2000c9b4

08013c0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <tcp_close_shutdown_fin+0x1c>
 8013c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8013cd4 <tcp_close_shutdown_fin+0xc8>)
 8013c1c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8013c20:	492d      	ldr	r1, [pc, #180]	@ (8013cd8 <tcp_close_shutdown_fin+0xcc>)
 8013c22:	482e      	ldr	r0, [pc, #184]	@ (8013cdc <tcp_close_shutdown_fin+0xd0>)
 8013c24:	f009 fc6a 	bl	801d4fc <iprintf>

  switch (pcb->state) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	7d1b      	ldrb	r3, [r3, #20]
 8013c2c:	2b07      	cmp	r3, #7
 8013c2e:	d020      	beq.n	8013c72 <tcp_close_shutdown_fin+0x66>
 8013c30:	2b07      	cmp	r3, #7
 8013c32:	dc2b      	bgt.n	8013c8c <tcp_close_shutdown_fin+0x80>
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d002      	beq.n	8013c3e <tcp_close_shutdown_fin+0x32>
 8013c38:	2b04      	cmp	r3, #4
 8013c3a:	d00d      	beq.n	8013c58 <tcp_close_shutdown_fin+0x4c>
 8013c3c:	e026      	b.n	8013c8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f004 fd98 	bl	8018774 <tcp_send_fin>
 8013c44:	4603      	mov	r3, r0
 8013c46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d11f      	bne.n	8013c90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2205      	movs	r2, #5
 8013c54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013c56:	e01b      	b.n	8013c90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f004 fd8b 	bl	8018774 <tcp_send_fin>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d114      	bne.n	8013c94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2205      	movs	r2, #5
 8013c6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013c70:	e010      	b.n	8013c94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f004 fd7e 	bl	8018774 <tcp_send_fin>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d109      	bne.n	8013c98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2209      	movs	r2, #9
 8013c88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013c8a:	e005      	b.n	8013c98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	e01c      	b.n	8013cca <tcp_close_shutdown_fin+0xbe>
      break;
 8013c90:	bf00      	nop
 8013c92:	e002      	b.n	8013c9a <tcp_close_shutdown_fin+0x8e>
      break;
 8013c94:	bf00      	nop
 8013c96:	e000      	b.n	8013c9a <tcp_close_shutdown_fin+0x8e>
      break;
 8013c98:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d103      	bne.n	8013caa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f004 fea4 	bl	80189f0 <tcp_output>
 8013ca8:	e00d      	b.n	8013cc6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb2:	d108      	bne.n	8013cc6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	8b5b      	ldrh	r3, [r3, #26]
 8013cb8:	f043 0308 	orr.w	r3, r3, #8
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	e001      	b.n	8013cca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	08020e14 	.word	0x08020e14
 8013cd8:	08020ec4 	.word	0x08020ec4
 8013cdc:	08020e58 	.word	0x08020e58

08013ce0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d109      	bne.n	8013d02 <tcp_close+0x22>
 8013cee:	4b0f      	ldr	r3, [pc, #60]	@ (8013d2c <tcp_close+0x4c>)
 8013cf0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013cf4:	490e      	ldr	r1, [pc, #56]	@ (8013d30 <tcp_close+0x50>)
 8013cf6:	480f      	ldr	r0, [pc, #60]	@ (8013d34 <tcp_close+0x54>)
 8013cf8:	f009 fc00 	bl	801d4fc <iprintf>
 8013cfc:	f06f 030f 	mvn.w	r3, #15
 8013d00:	e00f      	b.n	8013d22 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	7d1b      	ldrb	r3, [r3, #20]
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d006      	beq.n	8013d18 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8b5b      	ldrh	r3, [r3, #26]
 8013d0e:	f043 0310 	orr.w	r3, r3, #16
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013d18:	2101      	movs	r1, #1
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff fe94 	bl	8013a48 <tcp_close_shutdown>
 8013d20:	4603      	mov	r3, r0
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3708      	adds	r7, #8
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	08020e14 	.word	0x08020e14
 8013d30:	08020f24 	.word	0x08020f24
 8013d34:	08020e58 	.word	0x08020e58

08013d38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b08e      	sub	sp, #56	@ 0x38
 8013d3c:	af04      	add	r7, sp, #16
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d107      	bne.n	8013d58 <tcp_abandon+0x20>
 8013d48:	4b52      	ldr	r3, [pc, #328]	@ (8013e94 <tcp_abandon+0x15c>)
 8013d4a:	f240 223d 	movw	r2, #573	@ 0x23d
 8013d4e:	4952      	ldr	r1, [pc, #328]	@ (8013e98 <tcp_abandon+0x160>)
 8013d50:	4852      	ldr	r0, [pc, #328]	@ (8013e9c <tcp_abandon+0x164>)
 8013d52:	f009 fbd3 	bl	801d4fc <iprintf>
 8013d56:	e099      	b.n	8013e8c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	7d1b      	ldrb	r3, [r3, #20]
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d106      	bne.n	8013d6e <tcp_abandon+0x36>
 8013d60:	4b4c      	ldr	r3, [pc, #304]	@ (8013e94 <tcp_abandon+0x15c>)
 8013d62:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013d66:	494e      	ldr	r1, [pc, #312]	@ (8013ea0 <tcp_abandon+0x168>)
 8013d68:	484c      	ldr	r0, [pc, #304]	@ (8013e9c <tcp_abandon+0x164>)
 8013d6a:	f009 fbc7 	bl	801d4fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	7d1b      	ldrb	r3, [r3, #20]
 8013d72:	2b0a      	cmp	r3, #10
 8013d74:	d107      	bne.n	8013d86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013d76:	6879      	ldr	r1, [r7, #4]
 8013d78:	484a      	ldr	r0, [pc, #296]	@ (8013ea4 <tcp_abandon+0x16c>)
 8013d7a:	f001 fa23 	bl	80151c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff fdb0 	bl	80138e4 <tcp_free>
 8013d84:	e082      	b.n	8013e8c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013da0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	7d1b      	ldrb	r3, [r3, #20]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d126      	bne.n	8013dfe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	8adb      	ldrh	r3, [r3, #22]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d02e      	beq.n	8013e16 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013db8:	4b3b      	ldr	r3, [pc, #236]	@ (8013ea8 <tcp_abandon+0x170>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d105      	bne.n	8013dce <tcp_abandon+0x96>
 8013dc2:	4b39      	ldr	r3, [pc, #228]	@ (8013ea8 <tcp_abandon+0x170>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	4a37      	ldr	r2, [pc, #220]	@ (8013ea8 <tcp_abandon+0x170>)
 8013dca:	6013      	str	r3, [r2, #0]
 8013dcc:	e013      	b.n	8013df6 <tcp_abandon+0xbe>
 8013dce:	4b36      	ldr	r3, [pc, #216]	@ (8013ea8 <tcp_abandon+0x170>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	61fb      	str	r3, [r7, #28]
 8013dd4:	e00c      	b.n	8013df0 <tcp_abandon+0xb8>
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d104      	bne.n	8013dea <tcp_abandon+0xb2>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	68da      	ldr	r2, [r3, #12]
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	60da      	str	r2, [r3, #12]
 8013de8:	e005      	b.n	8013df6 <tcp_abandon+0xbe>
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	61fb      	str	r3, [r7, #28]
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1ef      	bne.n	8013dd6 <tcp_abandon+0x9e>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	60da      	str	r2, [r3, #12]
 8013dfc:	e00b      	b.n	8013e16 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	8adb      	ldrh	r3, [r3, #22]
 8013e06:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013e08:	6879      	ldr	r1, [r7, #4]
 8013e0a:	4828      	ldr	r0, [pc, #160]	@ (8013eac <tcp_abandon+0x174>)
 8013e0c:	f001 f9da 	bl	80151c4 <tcp_pcb_remove>
 8013e10:	4b27      	ldr	r3, [pc, #156]	@ (8013eb0 <tcp_abandon+0x178>)
 8013e12:	2201      	movs	r2, #1
 8013e14:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d004      	beq.n	8013e28 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e22:	4618      	mov	r0, r3
 8013e24:	f000 fed8 	bl	8014bd8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d004      	beq.n	8013e3a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e34:	4618      	mov	r0, r3
 8013e36:	f000 fecf 	bl	8014bd8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d004      	beq.n	8013e4c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e46:	4618      	mov	r0, r3
 8013e48:	f000 fec6 	bl	8014bd8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d00e      	beq.n	8013e70 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013e52:	6879      	ldr	r1, [r7, #4]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	3304      	adds	r3, #4
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	8b12      	ldrh	r2, [r2, #24]
 8013e5c:	9202      	str	r2, [sp, #8]
 8013e5e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013e60:	9201      	str	r2, [sp, #4]
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	460b      	mov	r3, r1
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	69b9      	ldr	r1, [r7, #24]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f005 fb74 	bl	8019558 <tcp_rst>
    }
    last_state = pcb->state;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	7d1b      	ldrb	r3, [r3, #20]
 8013e74:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f7ff fd34 	bl	80138e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d004      	beq.n	8013e8c <tcp_abandon+0x154>
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	f06f 010c 	mvn.w	r1, #12
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	4798      	blx	r3
  }
}
 8013e8c:	3728      	adds	r7, #40	@ 0x28
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	08020e14 	.word	0x08020e14
 8013e98:	08020f58 	.word	0x08020f58
 8013e9c:	08020e58 	.word	0x08020e58
 8013ea0:	08020f74 	.word	0x08020f74
 8013ea4:	2000c9bc 	.word	0x2000c9bc
 8013ea8:	2000c9b0 	.word	0x2000c9b0
 8013eac:	2000c9b8 	.word	0x2000c9b8
 8013eb0:	2000c9c0 	.word	0x2000c9c0

08013eb4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7ff ff3a 	bl	8013d38 <tcp_abandon>
}
 8013ec4:	bf00      	nop
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b088      	sub	sp, #32
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013eda:	2304      	movs	r3, #4
 8013edc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d101      	bne.n	8013ee8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8013fe0 <tcp_bind+0x114>)
 8013ee6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d109      	bne.n	8013f02 <tcp_bind+0x36>
 8013eee:	4b3d      	ldr	r3, [pc, #244]	@ (8013fe4 <tcp_bind+0x118>)
 8013ef0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8013ef4:	493c      	ldr	r1, [pc, #240]	@ (8013fe8 <tcp_bind+0x11c>)
 8013ef6:	483d      	ldr	r0, [pc, #244]	@ (8013fec <tcp_bind+0x120>)
 8013ef8:	f009 fb00 	bl	801d4fc <iprintf>
 8013efc:	f06f 030f 	mvn.w	r3, #15
 8013f00:	e06a      	b.n	8013fd8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	7d1b      	ldrb	r3, [r3, #20]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d009      	beq.n	8013f1e <tcp_bind+0x52>
 8013f0a:	4b36      	ldr	r3, [pc, #216]	@ (8013fe4 <tcp_bind+0x118>)
 8013f0c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013f10:	4937      	ldr	r1, [pc, #220]	@ (8013ff0 <tcp_bind+0x124>)
 8013f12:	4836      	ldr	r0, [pc, #216]	@ (8013fec <tcp_bind+0x120>)
 8013f14:	f009 faf2 	bl	801d4fc <iprintf>
 8013f18:	f06f 0305 	mvn.w	r3, #5
 8013f1c:	e05c      	b.n	8013fd8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013f1e:	88fb      	ldrh	r3, [r7, #6]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d109      	bne.n	8013f38 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013f24:	f000 f9f0 	bl	8014308 <tcp_new_port>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013f2c:	88fb      	ldrh	r3, [r7, #6]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d135      	bne.n	8013f9e <tcp_bind+0xd2>
      return ERR_BUF;
 8013f32:	f06f 0301 	mvn.w	r3, #1
 8013f36:	e04f      	b.n	8013fd8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013f38:	2300      	movs	r3, #0
 8013f3a:	61fb      	str	r3, [r7, #28]
 8013f3c:	e02b      	b.n	8013f96 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8013ff4 <tcp_bind+0x128>)
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	61bb      	str	r3, [r7, #24]
 8013f4a:	e01e      	b.n	8013f8a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	8adb      	ldrh	r3, [r3, #22]
 8013f50:	88fa      	ldrh	r2, [r7, #6]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d116      	bne.n	8013f84 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013f56:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d010      	beq.n	8013f7e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00c      	beq.n	8013f7e <tcp_bind+0xb2>
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d009      	beq.n	8013f7e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d005      	beq.n	8013f7e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d102      	bne.n	8013f84 <tcp_bind+0xb8>
              return ERR_USE;
 8013f7e:	f06f 0307 	mvn.w	r3, #7
 8013f82:	e029      	b.n	8013fd8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	61bb      	str	r3, [r7, #24]
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d1dd      	bne.n	8013f4c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013f90:	69fb      	ldr	r3, [r7, #28]
 8013f92:	3301      	adds	r3, #1
 8013f94:	61fb      	str	r3, [r7, #28]
 8013f96:	69fa      	ldr	r2, [r7, #28]
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	dbcf      	blt.n	8013f3e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00c      	beq.n	8013fbe <tcp_bind+0xf2>
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d008      	beq.n	8013fbe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d002      	beq.n	8013fb8 <tcp_bind+0xec>
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	e000      	b.n	8013fba <tcp_bind+0xee>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	88fa      	ldrh	r2, [r7, #6]
 8013fc2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ff8 <tcp_bind+0x12c>)
 8013fc6:	681a      	ldr	r2, [r3, #0]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	60da      	str	r2, [r3, #12]
 8013fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8013ff8 <tcp_bind+0x12c>)
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	6013      	str	r3, [r2, #0]
 8013fd2:	f005 fc83 	bl	80198dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013fd6:	2300      	movs	r3, #0
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3720      	adds	r7, #32
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	08022eac 	.word	0x08022eac
 8013fe4:	08020e14 	.word	0x08020e14
 8013fe8:	08020fa8 	.word	0x08020fa8
 8013fec:	08020e58 	.word	0x08020e58
 8013ff0:	08020fc0 	.word	0x08020fc0
 8013ff4:	08022e84 	.word	0x08022e84
 8013ff8:	2000c9b0 	.word	0x2000c9b0

08013ffc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b084      	sub	sp, #16
 8014000:	af00      	add	r7, sp, #0
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	4613      	mov	r3, r2
 8014008:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d106      	bne.n	801401e <tcp_accept_null+0x22>
 8014010:	4b07      	ldr	r3, [pc, #28]	@ (8014030 <tcp_accept_null+0x34>)
 8014012:	f240 320f 	movw	r2, #783	@ 0x30f
 8014016:	4907      	ldr	r1, [pc, #28]	@ (8014034 <tcp_accept_null+0x38>)
 8014018:	4807      	ldr	r0, [pc, #28]	@ (8014038 <tcp_accept_null+0x3c>)
 801401a:	f009 fa6f 	bl	801d4fc <iprintf>

  tcp_abort(pcb);
 801401e:	68b8      	ldr	r0, [r7, #8]
 8014020:	f7ff ff48 	bl	8013eb4 <tcp_abort>

  return ERR_ABRT;
 8014024:	f06f 030c 	mvn.w	r3, #12
}
 8014028:	4618      	mov	r0, r3
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	08020e14 	.word	0x08020e14
 8014034:	08020fe8 	.word	0x08020fe8
 8014038:	08020e58 	.word	0x08020e58

0801403c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	460b      	mov	r3, r1
 8014046:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8014048:	78fb      	ldrb	r3, [r7, #3]
 801404a:	2200      	movs	r2, #0
 801404c:	4619      	mov	r1, r3
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 f806 	bl	8014060 <tcp_listen_with_backlog_and_err>
 8014054:	4603      	mov	r3, r0
}
 8014056:	4618      	mov	r0, r3
 8014058:	3708      	adds	r7, #8
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}
	...

08014060 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b088      	sub	sp, #32
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	460b      	mov	r3, r1
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801406e:	2300      	movs	r3, #0
 8014070:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d109      	bne.n	801408c <tcp_listen_with_backlog_and_err+0x2c>
 8014078:	4b47      	ldr	r3, [pc, #284]	@ (8014198 <tcp_listen_with_backlog_and_err+0x138>)
 801407a:	f240 3259 	movw	r2, #857	@ 0x359
 801407e:	4947      	ldr	r1, [pc, #284]	@ (801419c <tcp_listen_with_backlog_and_err+0x13c>)
 8014080:	4847      	ldr	r0, [pc, #284]	@ (80141a0 <tcp_listen_with_backlog_and_err+0x140>)
 8014082:	f009 fa3b 	bl	801d4fc <iprintf>
 8014086:	23f0      	movs	r3, #240	@ 0xf0
 8014088:	76fb      	strb	r3, [r7, #27]
 801408a:	e079      	b.n	8014180 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	7d1b      	ldrb	r3, [r3, #20]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d009      	beq.n	80140a8 <tcp_listen_with_backlog_and_err+0x48>
 8014094:	4b40      	ldr	r3, [pc, #256]	@ (8014198 <tcp_listen_with_backlog_and_err+0x138>)
 8014096:	f240 325a 	movw	r2, #858	@ 0x35a
 801409a:	4942      	ldr	r1, [pc, #264]	@ (80141a4 <tcp_listen_with_backlog_and_err+0x144>)
 801409c:	4840      	ldr	r0, [pc, #256]	@ (80141a0 <tcp_listen_with_backlog_and_err+0x140>)
 801409e:	f009 fa2d 	bl	801d4fc <iprintf>
 80140a2:	23f1      	movs	r3, #241	@ 0xf1
 80140a4:	76fb      	strb	r3, [r7, #27]
 80140a6:	e06b      	b.n	8014180 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	7d1b      	ldrb	r3, [r3, #20]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d104      	bne.n	80140ba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80140b4:	23f7      	movs	r3, #247	@ 0xf7
 80140b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80140b8:	e062      	b.n	8014180 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80140ba:	2002      	movs	r0, #2
 80140bc:	f7fe fa7e 	bl	80125bc <memp_malloc>
 80140c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d102      	bne.n	80140ce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80140c8:	23ff      	movs	r3, #255	@ 0xff
 80140ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80140cc:	e058      	b.n	8014180 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	691a      	ldr	r2, [r3, #16]
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	8ada      	ldrh	r2, [r3, #22]
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	2201      	movs	r2, #1
 80140e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	7d5a      	ldrb	r2, [r3, #21]
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	7a5a      	ldrb	r2, [r3, #9]
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	2200      	movs	r2, #0
 80140f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	7ada      	ldrb	r2, [r3, #11]
 80140fe:	69fb      	ldr	r3, [r7, #28]
 8014100:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	7a9a      	ldrb	r2, [r3, #10]
 8014106:	69fb      	ldr	r3, [r7, #28]
 8014108:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	681a      	ldr	r2, [r3, #0]
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	8adb      	ldrh	r3, [r3, #22]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d021      	beq.n	801415e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801411a:	4b23      	ldr	r3, [pc, #140]	@ (80141a8 <tcp_listen_with_backlog_and_err+0x148>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	68fa      	ldr	r2, [r7, #12]
 8014120:	429a      	cmp	r2, r3
 8014122:	d105      	bne.n	8014130 <tcp_listen_with_backlog_and_err+0xd0>
 8014124:	4b20      	ldr	r3, [pc, #128]	@ (80141a8 <tcp_listen_with_backlog_and_err+0x148>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	4a1f      	ldr	r2, [pc, #124]	@ (80141a8 <tcp_listen_with_backlog_and_err+0x148>)
 801412c:	6013      	str	r3, [r2, #0]
 801412e:	e013      	b.n	8014158 <tcp_listen_with_backlog_and_err+0xf8>
 8014130:	4b1d      	ldr	r3, [pc, #116]	@ (80141a8 <tcp_listen_with_backlog_and_err+0x148>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	617b      	str	r3, [r7, #20]
 8014136:	e00c      	b.n	8014152 <tcp_listen_with_backlog_and_err+0xf2>
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	429a      	cmp	r2, r3
 8014140:	d104      	bne.n	801414c <tcp_listen_with_backlog_and_err+0xec>
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	60da      	str	r2, [r3, #12]
 801414a:	e005      	b.n	8014158 <tcp_listen_with_backlog_and_err+0xf8>
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	68db      	ldr	r3, [r3, #12]
 8014150:	617b      	str	r3, [r7, #20]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1ef      	bne.n	8014138 <tcp_listen_with_backlog_and_err+0xd8>
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2200      	movs	r2, #0
 801415c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f7ff fbc0 	bl	80138e4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	4a11      	ldr	r2, [pc, #68]	@ (80141ac <tcp_listen_with_backlog_and_err+0x14c>)
 8014168:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801416a:	4b11      	ldr	r3, [pc, #68]	@ (80141b0 <tcp_listen_with_backlog_and_err+0x150>)
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	60da      	str	r2, [r3, #12]
 8014172:	4a0f      	ldr	r2, [pc, #60]	@ (80141b0 <tcp_listen_with_backlog_and_err+0x150>)
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	6013      	str	r3, [r2, #0]
 8014178:	f005 fbb0 	bl	80198dc <tcp_timer_needed>
  res = ERR_OK;
 801417c:	2300      	movs	r3, #0
 801417e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d002      	beq.n	801418c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	7efa      	ldrb	r2, [r7, #27]
 801418a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801418c:	69fb      	ldr	r3, [r7, #28]
}
 801418e:	4618      	mov	r0, r3
 8014190:	3720      	adds	r7, #32
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	08020e14 	.word	0x08020e14
 801419c:	08021008 	.word	0x08021008
 80141a0:	08020e58 	.word	0x08020e58
 80141a4:	08021038 	.word	0x08021038
 80141a8:	2000c9b0 	.word	0x2000c9b0
 80141ac:	08013ffd 	.word	0x08013ffd
 80141b0:	2000c9b4 	.word	0x2000c9b4

080141b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d106      	bne.n	80141d0 <tcp_update_rcv_ann_wnd+0x1c>
 80141c2:	4b25      	ldr	r3, [pc, #148]	@ (8014258 <tcp_update_rcv_ann_wnd+0xa4>)
 80141c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80141c8:	4924      	ldr	r1, [pc, #144]	@ (801425c <tcp_update_rcv_ann_wnd+0xa8>)
 80141ca:	4825      	ldr	r0, [pc, #148]	@ (8014260 <tcp_update_rcv_ann_wnd+0xac>)
 80141cc:	f009 f996 	bl	801d4fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80141d8:	4413      	add	r3, r2
 80141da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80141e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80141e8:	bf28      	it	cs
 80141ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80141ee:	b292      	uxth	r2, r2
 80141f0:	4413      	add	r3, r2
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	db08      	blt.n	801420c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	1ad3      	subs	r3, r2, r3
 801420a:	e020      	b.n	801424e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014214:	1ad3      	subs	r3, r2, r3
 8014216:	2b00      	cmp	r3, #0
 8014218:	dd03      	ble.n	8014222 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2200      	movs	r2, #0
 801421e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014220:	e014      	b.n	801424c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801422a:	1ad3      	subs	r3, r2, r3
 801422c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014234:	d306      	bcc.n	8014244 <tcp_update_rcv_ann_wnd+0x90>
 8014236:	4b08      	ldr	r3, [pc, #32]	@ (8014258 <tcp_update_rcv_ann_wnd+0xa4>)
 8014238:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801423c:	4909      	ldr	r1, [pc, #36]	@ (8014264 <tcp_update_rcv_ann_wnd+0xb0>)
 801423e:	4808      	ldr	r0, [pc, #32]	@ (8014260 <tcp_update_rcv_ann_wnd+0xac>)
 8014240:	f009 f95c 	bl	801d4fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801424c:	2300      	movs	r3, #0
  }
}
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	08020e14 	.word	0x08020e14
 801425c:	08021070 	.word	0x08021070
 8014260:	08020e58 	.word	0x08020e58
 8014264:	08021094 	.word	0x08021094

08014268 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	460b      	mov	r3, r1
 8014272:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d107      	bne.n	801428a <tcp_recved+0x22>
 801427a:	4b1f      	ldr	r3, [pc, #124]	@ (80142f8 <tcp_recved+0x90>)
 801427c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014280:	491e      	ldr	r1, [pc, #120]	@ (80142fc <tcp_recved+0x94>)
 8014282:	481f      	ldr	r0, [pc, #124]	@ (8014300 <tcp_recved+0x98>)
 8014284:	f009 f93a 	bl	801d4fc <iprintf>
 8014288:	e032      	b.n	80142f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	7d1b      	ldrb	r3, [r3, #20]
 801428e:	2b01      	cmp	r3, #1
 8014290:	d106      	bne.n	80142a0 <tcp_recved+0x38>
 8014292:	4b19      	ldr	r3, [pc, #100]	@ (80142f8 <tcp_recved+0x90>)
 8014294:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014298:	491a      	ldr	r1, [pc, #104]	@ (8014304 <tcp_recved+0x9c>)
 801429a:	4819      	ldr	r0, [pc, #100]	@ (8014300 <tcp_recved+0x98>)
 801429c:	f009 f92e 	bl	801d4fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80142a4:	887b      	ldrh	r3, [r7, #2]
 80142a6:	4413      	add	r3, r2
 80142a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80142aa:	89fb      	ldrh	r3, [r7, #14]
 80142ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80142b0:	d804      	bhi.n	80142bc <tcp_recved+0x54>
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142b6:	89fa      	ldrh	r2, [r7, #14]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d204      	bcs.n	80142c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80142c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80142c4:	e002      	b.n	80142cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	89fa      	ldrh	r2, [r7, #14]
 80142ca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f7ff ff71 	bl	80141b4 <tcp_update_rcv_ann_wnd>
 80142d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80142da:	d309      	bcc.n	80142f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	8b5b      	ldrh	r3, [r3, #26]
 80142e0:	f043 0302 	orr.w	r3, r3, #2
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f004 fb80 	bl	80189f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80142f0:	3710      	adds	r7, #16
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	08020e14 	.word	0x08020e14
 80142fc:	080210b0 	.word	0x080210b0
 8014300:	08020e58 	.word	0x08020e58
 8014304:	080210c8 	.word	0x080210c8

08014308 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801430e:	2300      	movs	r3, #0
 8014310:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014312:	4b1e      	ldr	r3, [pc, #120]	@ (801438c <tcp_new_port+0x84>)
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	3301      	adds	r3, #1
 8014318:	b29a      	uxth	r2, r3
 801431a:	4b1c      	ldr	r3, [pc, #112]	@ (801438c <tcp_new_port+0x84>)
 801431c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801431e:	4b1b      	ldr	r3, [pc, #108]	@ (801438c <tcp_new_port+0x84>)
 8014320:	881b      	ldrh	r3, [r3, #0]
 8014322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014326:	4293      	cmp	r3, r2
 8014328:	d103      	bne.n	8014332 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801432a:	4b18      	ldr	r3, [pc, #96]	@ (801438c <tcp_new_port+0x84>)
 801432c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014330:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014332:	2300      	movs	r3, #0
 8014334:	71fb      	strb	r3, [r7, #7]
 8014336:	e01e      	b.n	8014376 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014338:	79fb      	ldrb	r3, [r7, #7]
 801433a:	4a15      	ldr	r2, [pc, #84]	@ (8014390 <tcp_new_port+0x88>)
 801433c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	e011      	b.n	801436a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	8ada      	ldrh	r2, [r3, #22]
 801434a:	4b10      	ldr	r3, [pc, #64]	@ (801438c <tcp_new_port+0x84>)
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	429a      	cmp	r2, r3
 8014350:	d108      	bne.n	8014364 <tcp_new_port+0x5c>
        n++;
 8014352:	88bb      	ldrh	r3, [r7, #4]
 8014354:	3301      	adds	r3, #1
 8014356:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014358:	88bb      	ldrh	r3, [r7, #4]
 801435a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801435e:	d3d8      	bcc.n	8014312 <tcp_new_port+0xa>
          return 0;
 8014360:	2300      	movs	r3, #0
 8014362:	e00d      	b.n	8014380 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	603b      	str	r3, [r7, #0]
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d1ea      	bne.n	8014346 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014370:	79fb      	ldrb	r3, [r7, #7]
 8014372:	3301      	adds	r3, #1
 8014374:	71fb      	strb	r3, [r7, #7]
 8014376:	79fb      	ldrb	r3, [r7, #7]
 8014378:	2b03      	cmp	r3, #3
 801437a:	d9dd      	bls.n	8014338 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801437c:	4b03      	ldr	r3, [pc, #12]	@ (801438c <tcp_new_port+0x84>)
 801437e:	881b      	ldrh	r3, [r3, #0]
}
 8014380:	4618      	mov	r0, r3
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	2000009c 	.word	0x2000009c
 8014390:	08022e84 	.word	0x08022e84

08014394 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014394:	b5b0      	push	{r4, r5, r7, lr}
 8014396:	b090      	sub	sp, #64	@ 0x40
 8014398:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801439a:	2300      	movs	r3, #0
 801439c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80143a0:	4b95      	ldr	r3, [pc, #596]	@ (80145f8 <tcp_slowtmr+0x264>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	3301      	adds	r3, #1
 80143a6:	4a94      	ldr	r2, [pc, #592]	@ (80145f8 <tcp_slowtmr+0x264>)
 80143a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80143aa:	4b94      	ldr	r3, [pc, #592]	@ (80145fc <tcp_slowtmr+0x268>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	3301      	adds	r3, #1
 80143b0:	b2da      	uxtb	r2, r3
 80143b2:	4b92      	ldr	r3, [pc, #584]	@ (80145fc <tcp_slowtmr+0x268>)
 80143b4:	701a      	strb	r2, [r3, #0]
 80143b6:	e000      	b.n	80143ba <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80143b8:	bf00      	nop
  prev = NULL;
 80143ba:	2300      	movs	r3, #0
 80143bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80143be:	4b90      	ldr	r3, [pc, #576]	@ (8014600 <tcp_slowtmr+0x26c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80143c4:	e29f      	b.n	8014906 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80143c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c8:	7d1b      	ldrb	r3, [r3, #20]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d106      	bne.n	80143dc <tcp_slowtmr+0x48>
 80143ce:	4b8d      	ldr	r3, [pc, #564]	@ (8014604 <tcp_slowtmr+0x270>)
 80143d0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80143d4:	498c      	ldr	r1, [pc, #560]	@ (8014608 <tcp_slowtmr+0x274>)
 80143d6:	488d      	ldr	r0, [pc, #564]	@ (801460c <tcp_slowtmr+0x278>)
 80143d8:	f009 f890 	bl	801d4fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80143dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143de:	7d1b      	ldrb	r3, [r3, #20]
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	d106      	bne.n	80143f2 <tcp_slowtmr+0x5e>
 80143e4:	4b87      	ldr	r3, [pc, #540]	@ (8014604 <tcp_slowtmr+0x270>)
 80143e6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80143ea:	4989      	ldr	r1, [pc, #548]	@ (8014610 <tcp_slowtmr+0x27c>)
 80143ec:	4887      	ldr	r0, [pc, #540]	@ (801460c <tcp_slowtmr+0x278>)
 80143ee:	f009 f885 	bl	801d4fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80143f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143f4:	7d1b      	ldrb	r3, [r3, #20]
 80143f6:	2b0a      	cmp	r3, #10
 80143f8:	d106      	bne.n	8014408 <tcp_slowtmr+0x74>
 80143fa:	4b82      	ldr	r3, [pc, #520]	@ (8014604 <tcp_slowtmr+0x270>)
 80143fc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014400:	4984      	ldr	r1, [pc, #528]	@ (8014614 <tcp_slowtmr+0x280>)
 8014402:	4882      	ldr	r0, [pc, #520]	@ (801460c <tcp_slowtmr+0x278>)
 8014404:	f009 f87a 	bl	801d4fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801440a:	7f9a      	ldrb	r2, [r3, #30]
 801440c:	4b7b      	ldr	r3, [pc, #492]	@ (80145fc <tcp_slowtmr+0x268>)
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	429a      	cmp	r2, r3
 8014412:	d105      	bne.n	8014420 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014416:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	68db      	ldr	r3, [r3, #12]
 801441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801441e:	e272      	b.n	8014906 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8014420:	4b76      	ldr	r3, [pc, #472]	@ (80145fc <tcp_slowtmr+0x268>)
 8014422:	781a      	ldrb	r2, [r3, #0]
 8014424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014426:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014428:	2300      	movs	r3, #0
 801442a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014436:	7d1b      	ldrb	r3, [r3, #20]
 8014438:	2b02      	cmp	r3, #2
 801443a:	d10a      	bne.n	8014452 <tcp_slowtmr+0xbe>
 801443c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014442:	2b05      	cmp	r3, #5
 8014444:	d905      	bls.n	8014452 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801444a:	3301      	adds	r3, #1
 801444c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014450:	e11e      	b.n	8014690 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014458:	2b0b      	cmp	r3, #11
 801445a:	d905      	bls.n	8014468 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801445c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014460:	3301      	adds	r3, #1
 8014462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014466:	e113      	b.n	8014690 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801446e:	2b00      	cmp	r3, #0
 8014470:	d075      	beq.n	801455e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014476:	2b00      	cmp	r3, #0
 8014478:	d006      	beq.n	8014488 <tcp_slowtmr+0xf4>
 801447a:	4b62      	ldr	r3, [pc, #392]	@ (8014604 <tcp_slowtmr+0x270>)
 801447c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014480:	4965      	ldr	r1, [pc, #404]	@ (8014618 <tcp_slowtmr+0x284>)
 8014482:	4862      	ldr	r0, [pc, #392]	@ (801460c <tcp_slowtmr+0x278>)
 8014484:	f009 f83a 	bl	801d4fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801448a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801448c:	2b00      	cmp	r3, #0
 801448e:	d106      	bne.n	801449e <tcp_slowtmr+0x10a>
 8014490:	4b5c      	ldr	r3, [pc, #368]	@ (8014604 <tcp_slowtmr+0x270>)
 8014492:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014496:	4961      	ldr	r1, [pc, #388]	@ (801461c <tcp_slowtmr+0x288>)
 8014498:	485c      	ldr	r0, [pc, #368]	@ (801460c <tcp_slowtmr+0x278>)
 801449a:	f009 f82f 	bl	801d4fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80144a4:	2b0b      	cmp	r3, #11
 80144a6:	d905      	bls.n	80144b4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80144a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144ac:	3301      	adds	r3, #1
 80144ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80144b2:	e0ed      	b.n	8014690 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80144b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80144ba:	3b01      	subs	r3, #1
 80144bc:	4a58      	ldr	r2, [pc, #352]	@ (8014620 <tcp_slowtmr+0x28c>)
 80144be:	5cd3      	ldrb	r3, [r2, r3]
 80144c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80144c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80144c8:	7c7a      	ldrb	r2, [r7, #17]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d907      	bls.n	80144de <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80144ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80144d4:	3301      	adds	r3, #1
 80144d6:	b2da      	uxtb	r2, r3
 80144d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80144de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80144e4:	7c7a      	ldrb	r2, [r7, #17]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	f200 80d2 	bhi.w	8014690 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80144ec:	2301      	movs	r3, #1
 80144ee:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80144f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d108      	bne.n	801450c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80144fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80144fc:	f005 f920 	bl	8019740 <tcp_zero_window_probe>
 8014500:	4603      	mov	r3, r0
 8014502:	2b00      	cmp	r3, #0
 8014504:	d014      	beq.n	8014530 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014506:	2300      	movs	r3, #0
 8014508:	623b      	str	r3, [r7, #32]
 801450a:	e011      	b.n	8014530 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014512:	4619      	mov	r1, r3
 8014514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014516:	f003 ffe5 	bl	80184e4 <tcp_split_unsent_seg>
 801451a:	4603      	mov	r3, r0
 801451c:	2b00      	cmp	r3, #0
 801451e:	d107      	bne.n	8014530 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014522:	f004 fa65 	bl	80189f0 <tcp_output>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d101      	bne.n	8014530 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801452c:	2300      	movs	r3, #0
 801452e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014530:	6a3b      	ldr	r3, [r7, #32]
 8014532:	2b00      	cmp	r3, #0
 8014534:	f000 80ac 	beq.w	8014690 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801453a:	2200      	movs	r2, #0
 801453c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014542:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014546:	2b06      	cmp	r3, #6
 8014548:	f200 80a2 	bhi.w	8014690 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801454e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014552:	3301      	adds	r3, #1
 8014554:	b2da      	uxtb	r2, r3
 8014556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014558:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801455c:	e098      	b.n	8014690 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014560:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014564:	2b00      	cmp	r3, #0
 8014566:	db0f      	blt.n	8014588 <tcp_slowtmr+0x1f4>
 8014568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801456a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801456e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014572:	4293      	cmp	r3, r2
 8014574:	d008      	beq.n	8014588 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801457c:	b29b      	uxth	r3, r3
 801457e:	3301      	adds	r3, #1
 8014580:	b29b      	uxth	r3, r3
 8014582:	b21a      	sxth	r2, r3
 8014584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014586:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801458a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014590:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014594:	429a      	cmp	r2, r3
 8014596:	db7b      	blt.n	8014690 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801459a:	f004 fd1d 	bl	8018fd8 <tcp_rexmit_rto_prepare>
 801459e:	4603      	mov	r3, r0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d007      	beq.n	80145b4 <tcp_slowtmr+0x220>
 80145a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d171      	bne.n	8014690 <tcp_slowtmr+0x2fc>
 80145ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d06d      	beq.n	8014690 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80145b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145b6:	7d1b      	ldrb	r3, [r3, #20]
 80145b8:	2b02      	cmp	r3, #2
 80145ba:	d03a      	beq.n	8014632 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80145bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80145c2:	2b0c      	cmp	r3, #12
 80145c4:	bf28      	it	cs
 80145c6:	230c      	movcs	r3, #12
 80145c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80145ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80145d0:	10db      	asrs	r3, r3, #3
 80145d2:	b21b      	sxth	r3, r3
 80145d4:	461a      	mov	r2, r3
 80145d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80145dc:	4413      	add	r3, r2
 80145de:	7efa      	ldrb	r2, [r7, #27]
 80145e0:	4910      	ldr	r1, [pc, #64]	@ (8014624 <tcp_slowtmr+0x290>)
 80145e2:	5c8a      	ldrb	r2, [r1, r2]
 80145e4:	4093      	lsls	r3, r2
 80145e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80145ee:	4293      	cmp	r3, r2
 80145f0:	dc1a      	bgt.n	8014628 <tcp_slowtmr+0x294>
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	b21a      	sxth	r2, r3
 80145f6:	e019      	b.n	801462c <tcp_slowtmr+0x298>
 80145f8:	2000c9ac 	.word	0x2000c9ac
 80145fc:	2000c9c2 	.word	0x2000c9c2
 8014600:	2000c9b8 	.word	0x2000c9b8
 8014604:	08020e14 	.word	0x08020e14
 8014608:	08021158 	.word	0x08021158
 801460c:	08020e58 	.word	0x08020e58
 8014610:	08021184 	.word	0x08021184
 8014614:	080211b0 	.word	0x080211b0
 8014618:	080211e0 	.word	0x080211e0
 801461c:	08021214 	.word	0x08021214
 8014620:	08022e7c 	.word	0x08022e7c
 8014624:	08022e6c 	.word	0x08022e6c
 8014628:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801462e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014634:	2200      	movs	r2, #0
 8014636:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801463a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014640:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014644:	4293      	cmp	r3, r2
 8014646:	bf28      	it	cs
 8014648:	4613      	movcs	r3, r2
 801464a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801464c:	8a7b      	ldrh	r3, [r7, #18]
 801464e:	085b      	lsrs	r3, r3, #1
 8014650:	b29a      	uxth	r2, r3
 8014652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014654:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014660:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014662:	005b      	lsls	r3, r3, #1
 8014664:	b29b      	uxth	r3, r3
 8014666:	429a      	cmp	r2, r3
 8014668:	d206      	bcs.n	8014678 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801466c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	b29a      	uxth	r2, r3
 8014672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014674:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801467a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801467e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014684:	2200      	movs	r2, #0
 8014686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801468a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801468c:	f004 fd14 	bl	80190b8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014692:	7d1b      	ldrb	r3, [r3, #20]
 8014694:	2b06      	cmp	r3, #6
 8014696:	d111      	bne.n	80146bc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801469a:	8b5b      	ldrh	r3, [r3, #26]
 801469c:	f003 0310 	and.w	r3, r3, #16
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d00b      	beq.n	80146bc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80146a4:	4b9d      	ldr	r3, [pc, #628]	@ (801491c <tcp_slowtmr+0x588>)
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146aa:	6a1b      	ldr	r3, [r3, #32]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	2b28      	cmp	r3, #40	@ 0x28
 80146b0:	d904      	bls.n	80146bc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80146b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146b6:	3301      	adds	r3, #1
 80146b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80146bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146be:	7a5b      	ldrb	r3, [r3, #9]
 80146c0:	f003 0308 	and.w	r3, r3, #8
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d04c      	beq.n	8014762 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80146c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d003      	beq.n	80146d8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80146d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80146d4:	2b07      	cmp	r3, #7
 80146d6:	d144      	bne.n	8014762 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80146d8:	4b90      	ldr	r3, [pc, #576]	@ (801491c <tcp_slowtmr+0x588>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146de:	6a1b      	ldr	r3, [r3, #32]
 80146e0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80146e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80146e8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80146ec:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80146f0:	498b      	ldr	r1, [pc, #556]	@ (8014920 <tcp_slowtmr+0x58c>)
 80146f2:	fba1 1303 	umull	r1, r3, r1, r3
 80146f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d90a      	bls.n	8014712 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80146fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014700:	3301      	adds	r3, #1
 8014702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801470a:	3301      	adds	r3, #1
 801470c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014710:	e027      	b.n	8014762 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014712:	4b82      	ldr	r3, [pc, #520]	@ (801491c <tcp_slowtmr+0x588>)
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014718:	6a1b      	ldr	r3, [r3, #32]
 801471a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801471e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014724:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014728:	4618      	mov	r0, r3
 801472a:	4b7e      	ldr	r3, [pc, #504]	@ (8014924 <tcp_slowtmr+0x590>)
 801472c:	fb00 f303 	mul.w	r3, r0, r3
 8014730:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014732:	497b      	ldr	r1, [pc, #492]	@ (8014920 <tcp_slowtmr+0x58c>)
 8014734:	fba1 1303 	umull	r1, r3, r1, r3
 8014738:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801473a:	429a      	cmp	r2, r3
 801473c:	d911      	bls.n	8014762 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801473e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014740:	f004 ffbe 	bl	80196c0 <tcp_keepalive>
 8014744:	4603      	mov	r3, r0
 8014746:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801474a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801474e:	2b00      	cmp	r3, #0
 8014750:	d107      	bne.n	8014762 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8014752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014754:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014758:	3301      	adds	r3, #1
 801475a:	b2da      	uxtb	r2, r3
 801475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801475e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014766:	2b00      	cmp	r3, #0
 8014768:	d011      	beq.n	801478e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801476a:	4b6c      	ldr	r3, [pc, #432]	@ (801491c <tcp_slowtmr+0x588>)
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014770:	6a1b      	ldr	r3, [r3, #32]
 8014772:	1ad2      	subs	r2, r2, r3
 8014774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014776:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801477a:	4619      	mov	r1, r3
 801477c:	460b      	mov	r3, r1
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	440b      	add	r3, r1
 8014782:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014784:	429a      	cmp	r2, r3
 8014786:	d302      	bcc.n	801478e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8014788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801478a:	f000 fe7f 	bl	801548c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014790:	7d1b      	ldrb	r3, [r3, #20]
 8014792:	2b03      	cmp	r3, #3
 8014794:	d10b      	bne.n	80147ae <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014796:	4b61      	ldr	r3, [pc, #388]	@ (801491c <tcp_slowtmr+0x588>)
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801479c:	6a1b      	ldr	r3, [r3, #32]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	2b28      	cmp	r3, #40	@ 0x28
 80147a2:	d904      	bls.n	80147ae <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80147a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147a8:	3301      	adds	r3, #1
 80147aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80147ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147b0:	7d1b      	ldrb	r3, [r3, #20]
 80147b2:	2b09      	cmp	r3, #9
 80147b4:	d10b      	bne.n	80147ce <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80147b6:	4b59      	ldr	r3, [pc, #356]	@ (801491c <tcp_slowtmr+0x588>)
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147bc:	6a1b      	ldr	r3, [r3, #32]
 80147be:	1ad3      	subs	r3, r2, r3
 80147c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80147c2:	d904      	bls.n	80147ce <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80147c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147c8:	3301      	adds	r3, #1
 80147ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80147ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d060      	beq.n	8014898 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80147d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80147dc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80147de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147e0:	f000 fca0 	bl	8015124 <tcp_pcb_purge>
      if (prev != NULL) {
 80147e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d010      	beq.n	801480c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80147ea:	4b4f      	ldr	r3, [pc, #316]	@ (8014928 <tcp_slowtmr+0x594>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d106      	bne.n	8014802 <tcp_slowtmr+0x46e>
 80147f4:	4b4d      	ldr	r3, [pc, #308]	@ (801492c <tcp_slowtmr+0x598>)
 80147f6:	f240 526d 	movw	r2, #1389	@ 0x56d
 80147fa:	494d      	ldr	r1, [pc, #308]	@ (8014930 <tcp_slowtmr+0x59c>)
 80147fc:	484d      	ldr	r0, [pc, #308]	@ (8014934 <tcp_slowtmr+0x5a0>)
 80147fe:	f008 fe7d 	bl	801d4fc <iprintf>
        prev->next = pcb->next;
 8014802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014804:	68da      	ldr	r2, [r3, #12]
 8014806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014808:	60da      	str	r2, [r3, #12]
 801480a:	e00f      	b.n	801482c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801480c:	4b46      	ldr	r3, [pc, #280]	@ (8014928 <tcp_slowtmr+0x594>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014812:	429a      	cmp	r2, r3
 8014814:	d006      	beq.n	8014824 <tcp_slowtmr+0x490>
 8014816:	4b45      	ldr	r3, [pc, #276]	@ (801492c <tcp_slowtmr+0x598>)
 8014818:	f240 5271 	movw	r2, #1393	@ 0x571
 801481c:	4946      	ldr	r1, [pc, #280]	@ (8014938 <tcp_slowtmr+0x5a4>)
 801481e:	4845      	ldr	r0, [pc, #276]	@ (8014934 <tcp_slowtmr+0x5a0>)
 8014820:	f008 fe6c 	bl	801d4fc <iprintf>
        tcp_active_pcbs = pcb->next;
 8014824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	4a3f      	ldr	r2, [pc, #252]	@ (8014928 <tcp_slowtmr+0x594>)
 801482a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801482c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014830:	2b00      	cmp	r3, #0
 8014832:	d013      	beq.n	801485c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014836:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801483a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801483c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801483e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014840:	3304      	adds	r3, #4
 8014842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014844:	8ad2      	ldrh	r2, [r2, #22]
 8014846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014848:	8b09      	ldrh	r1, [r1, #24]
 801484a:	9102      	str	r1, [sp, #8]
 801484c:	9201      	str	r2, [sp, #4]
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	462b      	mov	r3, r5
 8014852:	4622      	mov	r2, r4
 8014854:	4601      	mov	r1, r0
 8014856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014858:	f004 fe7e 	bl	8019558 <tcp_rst>
      err_arg = pcb->callback_arg;
 801485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801485e:	691b      	ldr	r3, [r3, #16]
 8014860:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014864:	7d1b      	ldrb	r3, [r3, #20]
 8014866:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014872:	6838      	ldr	r0, [r7, #0]
 8014874:	f7ff f836 	bl	80138e4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014878:	4b30      	ldr	r3, [pc, #192]	@ (801493c <tcp_slowtmr+0x5a8>)
 801487a:	2200      	movs	r2, #0
 801487c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d004      	beq.n	801488e <tcp_slowtmr+0x4fa>
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f06f 010c 	mvn.w	r1, #12
 801488a:	68b8      	ldr	r0, [r7, #8]
 801488c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801488e:	4b2b      	ldr	r3, [pc, #172]	@ (801493c <tcp_slowtmr+0x5a8>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d037      	beq.n	8014906 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8014896:	e590      	b.n	80143ba <tcp_slowtmr+0x26>
      prev = pcb;
 8014898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80148a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148a4:	7f1b      	ldrb	r3, [r3, #28]
 80148a6:	3301      	adds	r3, #1
 80148a8:	b2da      	uxtb	r2, r3
 80148aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80148ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148b0:	7f1a      	ldrb	r2, [r3, #28]
 80148b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148b4:	7f5b      	ldrb	r3, [r3, #29]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d325      	bcc.n	8014906 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80148ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148bc:	2200      	movs	r2, #0
 80148be:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80148c0:	4b1e      	ldr	r3, [pc, #120]	@ (801493c <tcp_slowtmr+0x5a8>)
 80148c2:	2200      	movs	r2, #0
 80148c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80148c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d00b      	beq.n	80148e8 <tcp_slowtmr+0x554>
 80148d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80148d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148d8:	6912      	ldr	r2, [r2, #16]
 80148da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80148dc:	4610      	mov	r0, r2
 80148de:	4798      	blx	r3
 80148e0:	4603      	mov	r3, r0
 80148e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80148e6:	e002      	b.n	80148ee <tcp_slowtmr+0x55a>
 80148e8:	2300      	movs	r3, #0
 80148ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80148ee:	4b13      	ldr	r3, [pc, #76]	@ (801493c <tcp_slowtmr+0x5a8>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	f47f ad60 	bne.w	80143b8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80148f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d102      	bne.n	8014906 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8014900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014902:	f004 f875 	bl	80189f0 <tcp_output>
  while (pcb != NULL) {
 8014906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014908:	2b00      	cmp	r3, #0
 801490a:	f47f ad5c 	bne.w	80143c6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801490e:	2300      	movs	r3, #0
 8014910:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8014912:	4b0b      	ldr	r3, [pc, #44]	@ (8014940 <tcp_slowtmr+0x5ac>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014918:	e067      	b.n	80149ea <tcp_slowtmr+0x656>
 801491a:	bf00      	nop
 801491c:	2000c9ac 	.word	0x2000c9ac
 8014920:	10624dd3 	.word	0x10624dd3
 8014924:	000124f8 	.word	0x000124f8
 8014928:	2000c9b8 	.word	0x2000c9b8
 801492c:	08020e14 	.word	0x08020e14
 8014930:	0802124c 	.word	0x0802124c
 8014934:	08020e58 	.word	0x08020e58
 8014938:	08021278 	.word	0x08021278
 801493c:	2000c9c0 	.word	0x2000c9c0
 8014940:	2000c9bc 	.word	0x2000c9bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014946:	7d1b      	ldrb	r3, [r3, #20]
 8014948:	2b0a      	cmp	r3, #10
 801494a:	d006      	beq.n	801495a <tcp_slowtmr+0x5c6>
 801494c:	4b2b      	ldr	r3, [pc, #172]	@ (80149fc <tcp_slowtmr+0x668>)
 801494e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8014952:	492b      	ldr	r1, [pc, #172]	@ (8014a00 <tcp_slowtmr+0x66c>)
 8014954:	482b      	ldr	r0, [pc, #172]	@ (8014a04 <tcp_slowtmr+0x670>)
 8014956:	f008 fdd1 	bl	801d4fc <iprintf>
    pcb_remove = 0;
 801495a:	2300      	movs	r3, #0
 801495c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014960:	4b29      	ldr	r3, [pc, #164]	@ (8014a08 <tcp_slowtmr+0x674>)
 8014962:	681a      	ldr	r2, [r3, #0]
 8014964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014966:	6a1b      	ldr	r3, [r3, #32]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	2bf0      	cmp	r3, #240	@ 0xf0
 801496c:	d904      	bls.n	8014978 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801496e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014972:	3301      	adds	r3, #1
 8014974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801497c:	2b00      	cmp	r3, #0
 801497e:	d02f      	beq.n	80149e0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014980:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014982:	f000 fbcf 	bl	8015124 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014988:	2b00      	cmp	r3, #0
 801498a:	d010      	beq.n	80149ae <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801498c:	4b1f      	ldr	r3, [pc, #124]	@ (8014a0c <tcp_slowtmr+0x678>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014992:	429a      	cmp	r2, r3
 8014994:	d106      	bne.n	80149a4 <tcp_slowtmr+0x610>
 8014996:	4b19      	ldr	r3, [pc, #100]	@ (80149fc <tcp_slowtmr+0x668>)
 8014998:	f240 52af 	movw	r2, #1455	@ 0x5af
 801499c:	491c      	ldr	r1, [pc, #112]	@ (8014a10 <tcp_slowtmr+0x67c>)
 801499e:	4819      	ldr	r0, [pc, #100]	@ (8014a04 <tcp_slowtmr+0x670>)
 80149a0:	f008 fdac 	bl	801d4fc <iprintf>
        prev->next = pcb->next;
 80149a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149a6:	68da      	ldr	r2, [r3, #12]
 80149a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149aa:	60da      	str	r2, [r3, #12]
 80149ac:	e00f      	b.n	80149ce <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80149ae:	4b17      	ldr	r3, [pc, #92]	@ (8014a0c <tcp_slowtmr+0x678>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d006      	beq.n	80149c6 <tcp_slowtmr+0x632>
 80149b8:	4b10      	ldr	r3, [pc, #64]	@ (80149fc <tcp_slowtmr+0x668>)
 80149ba:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80149be:	4915      	ldr	r1, [pc, #84]	@ (8014a14 <tcp_slowtmr+0x680>)
 80149c0:	4810      	ldr	r0, [pc, #64]	@ (8014a04 <tcp_slowtmr+0x670>)
 80149c2:	f008 fd9b 	bl	801d4fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80149c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	4a10      	ldr	r2, [pc, #64]	@ (8014a0c <tcp_slowtmr+0x678>)
 80149cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80149ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80149d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80149d8:	69f8      	ldr	r0, [r7, #28]
 80149da:	f7fe ff83 	bl	80138e4 <tcp_free>
 80149de:	e004      	b.n	80149ea <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80149e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80149e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80149ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d1a9      	bne.n	8014944 <tcp_slowtmr+0x5b0>
    }
  }
}
 80149f0:	bf00      	nop
 80149f2:	bf00      	nop
 80149f4:	3730      	adds	r7, #48	@ 0x30
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bdb0      	pop	{r4, r5, r7, pc}
 80149fa:	bf00      	nop
 80149fc:	08020e14 	.word	0x08020e14
 8014a00:	080212a4 	.word	0x080212a4
 8014a04:	08020e58 	.word	0x08020e58
 8014a08:	2000c9ac 	.word	0x2000c9ac
 8014a0c:	2000c9bc 	.word	0x2000c9bc
 8014a10:	080212d4 	.word	0x080212d4
 8014a14:	080212fc 	.word	0x080212fc

08014a18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8014ad4 <tcp_fasttmr+0xbc>)
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	3301      	adds	r3, #1
 8014a24:	b2da      	uxtb	r2, r3
 8014a26:	4b2b      	ldr	r3, [pc, #172]	@ (8014ad4 <tcp_fasttmr+0xbc>)
 8014a28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8014ad8 <tcp_fasttmr+0xc0>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014a30:	e048      	b.n	8014ac4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	7f9a      	ldrb	r2, [r3, #30]
 8014a36:	4b27      	ldr	r3, [pc, #156]	@ (8014ad4 <tcp_fasttmr+0xbc>)
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d03f      	beq.n	8014abe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014a3e:	4b25      	ldr	r3, [pc, #148]	@ (8014ad4 <tcp_fasttmr+0xbc>)
 8014a40:	781a      	ldrb	r2, [r3, #0]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	8b5b      	ldrh	r3, [r3, #26]
 8014a4a:	f003 0301 	and.w	r3, r3, #1
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d010      	beq.n	8014a74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	8b5b      	ldrh	r3, [r3, #26]
 8014a56:	f043 0302 	orr.w	r3, r3, #2
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f003 ffc5 	bl	80189f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8b5b      	ldrh	r3, [r3, #26]
 8014a6a:	f023 0303 	bic.w	r3, r3, #3
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	8b5b      	ldrh	r3, [r3, #26]
 8014a78:	f003 0308 	and.w	r3, r3, #8
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d009      	beq.n	8014a94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	8b5b      	ldrh	r3, [r3, #26]
 8014a84:	f023 0308 	bic.w	r3, r3, #8
 8014a88:	b29a      	uxth	r2, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff f8bc 	bl	8013c0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00a      	beq.n	8014ab8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8014adc <tcp_fasttmr+0xc4>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 f819 	bl	8014ae0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014aae:	4b0b      	ldr	r3, [pc, #44]	@ (8014adc <tcp_fasttmr+0xc4>)
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d000      	beq.n	8014ab8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014ab6:	e7b8      	b.n	8014a2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	607b      	str	r3, [r7, #4]
 8014abc:	e002      	b.n	8014ac4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d1b3      	bne.n	8014a32 <tcp_fasttmr+0x1a>
    }
  }
}
 8014aca:	bf00      	nop
 8014acc:	bf00      	nop
 8014ace:	3708      	adds	r7, #8
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	2000c9c2 	.word	0x2000c9c2
 8014ad8:	2000c9b8 	.word	0x2000c9b8
 8014adc:	2000c9c0 	.word	0x2000c9c0

08014ae0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014ae0:	b590      	push	{r4, r7, lr}
 8014ae2:	b085      	sub	sp, #20
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d109      	bne.n	8014b02 <tcp_process_refused_data+0x22>
 8014aee:	4b37      	ldr	r3, [pc, #220]	@ (8014bcc <tcp_process_refused_data+0xec>)
 8014af0:	f240 6209 	movw	r2, #1545	@ 0x609
 8014af4:	4936      	ldr	r1, [pc, #216]	@ (8014bd0 <tcp_process_refused_data+0xf0>)
 8014af6:	4837      	ldr	r0, [pc, #220]	@ (8014bd4 <tcp_process_refused_data+0xf4>)
 8014af8:	f008 fd00 	bl	801d4fc <iprintf>
 8014afc:	f06f 030f 	mvn.w	r3, #15
 8014b00:	e060      	b.n	8014bc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b06:	7b5b      	ldrb	r3, [r3, #13]
 8014b08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d00b      	beq.n	8014b38 <tcp_process_refused_data+0x58>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6918      	ldr	r0, [r3, #16]
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	68ba      	ldr	r2, [r7, #8]
 8014b2e:	6879      	ldr	r1, [r7, #4]
 8014b30:	47a0      	blx	r4
 8014b32:	4603      	mov	r3, r0
 8014b34:	73fb      	strb	r3, [r7, #15]
 8014b36:	e007      	b.n	8014b48 <tcp_process_refused_data+0x68>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	68ba      	ldr	r2, [r7, #8]
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	2000      	movs	r0, #0
 8014b40:	f000 f8c2 	bl	8014cc8 <tcp_recv_null>
 8014b44:	4603      	mov	r3, r0
 8014b46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d12a      	bne.n	8014ba6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014b50:	7bbb      	ldrb	r3, [r7, #14]
 8014b52:	f003 0320 	and.w	r3, r3, #32
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d033      	beq.n	8014bc2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014b62:	d005      	beq.n	8014b70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b68:	3301      	adds	r3, #1
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00b      	beq.n	8014b92 <tcp_process_refused_data+0xb2>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6918      	ldr	r0, [r3, #16]
 8014b84:	2300      	movs	r3, #0
 8014b86:	2200      	movs	r2, #0
 8014b88:	6879      	ldr	r1, [r7, #4]
 8014b8a:	47a0      	blx	r4
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	73fb      	strb	r3, [r7, #15]
 8014b90:	e001      	b.n	8014b96 <tcp_process_refused_data+0xb6>
 8014b92:	2300      	movs	r3, #0
 8014b94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b9a:	f113 0f0d 	cmn.w	r3, #13
 8014b9e:	d110      	bne.n	8014bc2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014ba0:	f06f 030c 	mvn.w	r3, #12
 8014ba4:	e00e      	b.n	8014bc4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014baa:	f113 0f0d 	cmn.w	r3, #13
 8014bae:	d102      	bne.n	8014bb6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014bb0:	f06f 030c 	mvn.w	r3, #12
 8014bb4:	e006      	b.n	8014bc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8014bbc:	f06f 0304 	mvn.w	r3, #4
 8014bc0:	e000      	b.n	8014bc4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014bc2:	2300      	movs	r3, #0
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3714      	adds	r7, #20
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd90      	pop	{r4, r7, pc}
 8014bcc:	08020e14 	.word	0x08020e14
 8014bd0:	08021324 	.word	0x08021324
 8014bd4:	08020e58 	.word	0x08020e58

08014bd8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014be0:	e007      	b.n	8014bf2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 f80a 	bl	8014c02 <tcp_seg_free>
    seg = next;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d1f4      	bne.n	8014be2 <tcp_segs_free+0xa>
  }
}
 8014bf8:	bf00      	nop
 8014bfa:	bf00      	nop
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014c02:	b580      	push	{r7, lr}
 8014c04:	b082      	sub	sp, #8
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00c      	beq.n	8014c2a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d004      	beq.n	8014c22 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fe fbb5 	bl	801338c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014c22:	6879      	ldr	r1, [r7, #4]
 8014c24:	2003      	movs	r0, #3
 8014c26:	f7fd fd3f 	bl	80126a8 <memp_free>
  }
}
 8014c2a:	bf00      	nop
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
	...

08014c34 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d107      	bne.n	8014c56 <tcp_setprio+0x22>
 8014c46:	4b07      	ldr	r3, [pc, #28]	@ (8014c64 <tcp_setprio+0x30>)
 8014c48:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8014c4c:	4906      	ldr	r1, [pc, #24]	@ (8014c68 <tcp_setprio+0x34>)
 8014c4e:	4807      	ldr	r0, [pc, #28]	@ (8014c6c <tcp_setprio+0x38>)
 8014c50:	f008 fc54 	bl	801d4fc <iprintf>
 8014c54:	e002      	b.n	8014c5c <tcp_setprio+0x28>

  pcb->prio = prio;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	78fa      	ldrb	r2, [r7, #3]
 8014c5a:	755a      	strb	r2, [r3, #21]
}
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	08020e14 	.word	0x08020e14
 8014c68:	0802134c 	.word	0x0802134c
 8014c6c:	08020e58 	.word	0x08020e58

08014c70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d106      	bne.n	8014c8c <tcp_seg_copy+0x1c>
 8014c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8014cbc <tcp_seg_copy+0x4c>)
 8014c80:	f240 6282 	movw	r2, #1666	@ 0x682
 8014c84:	490e      	ldr	r1, [pc, #56]	@ (8014cc0 <tcp_seg_copy+0x50>)
 8014c86:	480f      	ldr	r0, [pc, #60]	@ (8014cc4 <tcp_seg_copy+0x54>)
 8014c88:	f008 fc38 	bl	801d4fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014c8c:	2003      	movs	r0, #3
 8014c8e:	f7fd fc95 	bl	80125bc <memp_malloc>
 8014c92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d101      	bne.n	8014c9e <tcp_seg_copy+0x2e>
    return NULL;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	e00a      	b.n	8014cb4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014c9e:	2210      	movs	r2, #16
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f008 fddd 	bl	801d862 <memcpy>
  pbuf_ref(cseg->p);
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fe fc13 	bl	80134d8 <pbuf_ref>
  return cseg;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	08020e14 	.word	0x08020e14
 8014cc0:	08021368 	.word	0x08021368
 8014cc4:	08020e58 	.word	0x08020e58

08014cc8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
 8014cd4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d109      	bne.n	8014cf0 <tcp_recv_null+0x28>
 8014cdc:	4b12      	ldr	r3, [pc, #72]	@ (8014d28 <tcp_recv_null+0x60>)
 8014cde:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014ce2:	4912      	ldr	r1, [pc, #72]	@ (8014d2c <tcp_recv_null+0x64>)
 8014ce4:	4812      	ldr	r0, [pc, #72]	@ (8014d30 <tcp_recv_null+0x68>)
 8014ce6:	f008 fc09 	bl	801d4fc <iprintf>
 8014cea:	f06f 030f 	mvn.w	r3, #15
 8014cee:	e016      	b.n	8014d1e <tcp_recv_null+0x56>

  if (p != NULL) {
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d009      	beq.n	8014d0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	891b      	ldrh	r3, [r3, #8]
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	68b8      	ldr	r0, [r7, #8]
 8014cfe:	f7ff fab3 	bl	8014268 <tcp_recved>
    pbuf_free(p);
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f7fe fb42 	bl	801338c <pbuf_free>
 8014d08:	e008      	b.n	8014d1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d104      	bne.n	8014d1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014d12:	68b8      	ldr	r0, [r7, #8]
 8014d14:	f7fe ffe4 	bl	8013ce0 <tcp_close>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	e000      	b.n	8014d1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014d1c:	2300      	movs	r3, #0
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	08020e14 	.word	0x08020e14
 8014d2c:	08021384 	.word	0x08021384
 8014d30:	08020e58 	.word	0x08020e58

08014d34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b086      	sub	sp, #24
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	db01      	blt.n	8014d4a <tcp_kill_prio+0x16>
 8014d46:	79fb      	ldrb	r3, [r7, #7]
 8014d48:	e000      	b.n	8014d4c <tcp_kill_prio+0x18>
 8014d4a:	237f      	movs	r3, #127	@ 0x7f
 8014d4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014d4e:	7afb      	ldrb	r3, [r7, #11]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d034      	beq.n	8014dbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014d54:	7afb      	ldrb	r3, [r7, #11]
 8014d56:	3b01      	subs	r3, #1
 8014d58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d62:	4b19      	ldr	r3, [pc, #100]	@ (8014dc8 <tcp_kill_prio+0x94>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	617b      	str	r3, [r7, #20]
 8014d68:	e01f      	b.n	8014daa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	7d5b      	ldrb	r3, [r3, #21]
 8014d6e:	7afa      	ldrb	r2, [r7, #11]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d80c      	bhi.n	8014d8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014d78:	7afa      	ldrb	r2, [r7, #11]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d112      	bne.n	8014da4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014d7e:	4b13      	ldr	r3, [pc, #76]	@ (8014dcc <tcp_kill_prio+0x98>)
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	6a1b      	ldr	r3, [r3, #32]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d80a      	bhi.n	8014da4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8014dcc <tcp_kill_prio+0x98>)
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	6a1b      	ldr	r3, [r3, #32]
 8014d96:	1ad3      	subs	r3, r2, r3
 8014d98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	7d5b      	ldrb	r3, [r3, #21]
 8014da2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	617b      	str	r3, [r7, #20]
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d1dc      	bne.n	8014d6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d004      	beq.n	8014dc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014db6:	6938      	ldr	r0, [r7, #16]
 8014db8:	f7ff f87c 	bl	8013eb4 <tcp_abort>
 8014dbc:	e000      	b.n	8014dc0 <tcp_kill_prio+0x8c>
    return;
 8014dbe:	bf00      	nop
  }
}
 8014dc0:	3718      	adds	r7, #24
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	2000c9b8 	.word	0x2000c9b8
 8014dcc:	2000c9ac 	.word	0x2000c9ac

08014dd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b086      	sub	sp, #24
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014dda:	79fb      	ldrb	r3, [r7, #7]
 8014ddc:	2b08      	cmp	r3, #8
 8014dde:	d009      	beq.n	8014df4 <tcp_kill_state+0x24>
 8014de0:	79fb      	ldrb	r3, [r7, #7]
 8014de2:	2b09      	cmp	r3, #9
 8014de4:	d006      	beq.n	8014df4 <tcp_kill_state+0x24>
 8014de6:	4b1a      	ldr	r3, [pc, #104]	@ (8014e50 <tcp_kill_state+0x80>)
 8014de8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014dec:	4919      	ldr	r1, [pc, #100]	@ (8014e54 <tcp_kill_state+0x84>)
 8014dee:	481a      	ldr	r0, [pc, #104]	@ (8014e58 <tcp_kill_state+0x88>)
 8014df0:	f008 fb84 	bl	801d4fc <iprintf>

  inactivity = 0;
 8014df4:	2300      	movs	r3, #0
 8014df6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014dfc:	4b17      	ldr	r3, [pc, #92]	@ (8014e5c <tcp_kill_state+0x8c>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	617b      	str	r3, [r7, #20]
 8014e02:	e017      	b.n	8014e34 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	7d1b      	ldrb	r3, [r3, #20]
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d10f      	bne.n	8014e2e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014e0e:	4b14      	ldr	r3, [pc, #80]	@ (8014e60 <tcp_kill_state+0x90>)
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	6a1b      	ldr	r3, [r3, #32]
 8014e16:	1ad3      	subs	r3, r2, r3
 8014e18:	68fa      	ldr	r2, [r7, #12]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d807      	bhi.n	8014e2e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014e1e:	4b10      	ldr	r3, [pc, #64]	@ (8014e60 <tcp_kill_state+0x90>)
 8014e20:	681a      	ldr	r2, [r3, #0]
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	6a1b      	ldr	r3, [r3, #32]
 8014e26:	1ad3      	subs	r3, r2, r3
 8014e28:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	617b      	str	r3, [r7, #20]
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d1e4      	bne.n	8014e04 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d003      	beq.n	8014e48 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014e40:	2100      	movs	r1, #0
 8014e42:	6938      	ldr	r0, [r7, #16]
 8014e44:	f7fe ff78 	bl	8013d38 <tcp_abandon>
  }
}
 8014e48:	bf00      	nop
 8014e4a:	3718      	adds	r7, #24
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	08020e14 	.word	0x08020e14
 8014e54:	080213a0 	.word	0x080213a0
 8014e58:	08020e58 	.word	0x08020e58
 8014e5c:	2000c9b8 	.word	0x2000c9b8
 8014e60:	2000c9ac 	.word	0x2000c9ac

08014e64 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e72:	4b12      	ldr	r3, [pc, #72]	@ (8014ebc <tcp_kill_timewait+0x58>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	60fb      	str	r3, [r7, #12]
 8014e78:	e012      	b.n	8014ea0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014e7a:	4b11      	ldr	r3, [pc, #68]	@ (8014ec0 <tcp_kill_timewait+0x5c>)
 8014e7c:	681a      	ldr	r2, [r3, #0]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	6a1b      	ldr	r3, [r3, #32]
 8014e82:	1ad3      	subs	r3, r2, r3
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d807      	bhi.n	8014e9a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec0 <tcp_kill_timewait+0x5c>)
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	6a1b      	ldr	r3, [r3, #32]
 8014e92:	1ad3      	subs	r3, r2, r3
 8014e94:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	60fb      	str	r3, [r7, #12]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d1e9      	bne.n	8014e7a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d002      	beq.n	8014eb2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014eac:	68b8      	ldr	r0, [r7, #8]
 8014eae:	f7ff f801 	bl	8013eb4 <tcp_abort>
  }
}
 8014eb2:	bf00      	nop
 8014eb4:	3710      	adds	r7, #16
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	2000c9bc 	.word	0x2000c9bc
 8014ec0:	2000c9ac 	.word	0x2000c9ac

08014ec4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014eca:	4b10      	ldr	r3, [pc, #64]	@ (8014f0c <tcp_handle_closepend+0x48>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014ed0:	e014      	b.n	8014efc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	8b5b      	ldrh	r3, [r3, #26]
 8014edc:	f003 0308 	and.w	r3, r3, #8
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d009      	beq.n	8014ef8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	8b5b      	ldrh	r3, [r3, #26]
 8014ee8:	f023 0308 	bic.w	r3, r3, #8
 8014eec:	b29a      	uxth	r2, r3
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7fe fe8a 	bl	8013c0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d1e7      	bne.n	8014ed2 <tcp_handle_closepend+0xe>
  }
}
 8014f02:	bf00      	nop
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	2000c9b8 	.word	0x2000c9b8

08014f10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	4603      	mov	r3, r0
 8014f18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014f1a:	2001      	movs	r0, #1
 8014f1c:	f7fd fb4e 	bl	80125bc <memp_malloc>
 8014f20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d126      	bne.n	8014f76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014f28:	f7ff ffcc 	bl	8014ec4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014f2c:	f7ff ff9a 	bl	8014e64 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014f30:	2001      	movs	r0, #1
 8014f32:	f7fd fb43 	bl	80125bc <memp_malloc>
 8014f36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d11b      	bne.n	8014f76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014f3e:	2009      	movs	r0, #9
 8014f40:	f7ff ff46 	bl	8014dd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014f44:	2001      	movs	r0, #1
 8014f46:	f7fd fb39 	bl	80125bc <memp_malloc>
 8014f4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d111      	bne.n	8014f76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014f52:	2008      	movs	r0, #8
 8014f54:	f7ff ff3c 	bl	8014dd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014f58:	2001      	movs	r0, #1
 8014f5a:	f7fd fb2f 	bl	80125bc <memp_malloc>
 8014f5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d107      	bne.n	8014f76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014f66:	79fb      	ldrb	r3, [r7, #7]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7ff fee3 	bl	8014d34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014f6e:	2001      	movs	r0, #1
 8014f70:	f7fd fb24 	bl	80125bc <memp_malloc>
 8014f74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d03f      	beq.n	8014ffc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014f7c:	229c      	movs	r2, #156	@ 0x9c
 8014f7e:	2100      	movs	r1, #0
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	f008 fb70 	bl	801d666 <memset>
    pcb->prio = prio;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	79fa      	ldrb	r2, [r7, #7]
 8014f8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014f92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	22ff      	movs	r2, #255	@ 0xff
 8014faa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014fb2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2206      	movs	r2, #6
 8014fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2206      	movs	r2, #6
 8014fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014fc8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2201      	movs	r2, #1
 8014fce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015008 <tcp_alloc+0xf8>)
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014fda:	4b0c      	ldr	r3, [pc, #48]	@ (801500c <tcp_alloc+0xfc>)
 8014fdc:	781a      	ldrb	r2, [r3, #0]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014fe8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	4a08      	ldr	r2, [pc, #32]	@ (8015010 <tcp_alloc+0x100>)
 8014ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	4a07      	ldr	r2, [pc, #28]	@ (8015014 <tcp_alloc+0x104>)
 8014ff8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	2000c9ac 	.word	0x2000c9ac
 801500c:	2000c9c2 	.word	0x2000c9c2
 8015010:	08014cc9 	.word	0x08014cc9
 8015014:	006ddd00 	.word	0x006ddd00

08015018 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801501c:	2040      	movs	r0, #64	@ 0x40
 801501e:	f7ff ff77 	bl	8014f10 <tcp_alloc>
 8015022:	4603      	mov	r3, r0
}
 8015024:	4618      	mov	r0, r3
 8015026:	bd80      	pop	{r7, pc}

08015028 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d00e      	beq.n	8015056 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	7d1b      	ldrb	r3, [r3, #20]
 801503c:	2b01      	cmp	r3, #1
 801503e:	d106      	bne.n	801504e <tcp_recv+0x26>
 8015040:	4b07      	ldr	r3, [pc, #28]	@ (8015060 <tcp_recv+0x38>)
 8015042:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015046:	4907      	ldr	r1, [pc, #28]	@ (8015064 <tcp_recv+0x3c>)
 8015048:	4807      	ldr	r0, [pc, #28]	@ (8015068 <tcp_recv+0x40>)
 801504a:	f008 fa57 	bl	801d4fc <iprintf>
    pcb->recv = recv;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	683a      	ldr	r2, [r7, #0]
 8015052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	08020e14 	.word	0x08020e14
 8015064:	080213b0 	.word	0x080213b0
 8015068:	08020e58 	.word	0x08020e58

0801506c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d00e      	beq.n	801509a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	7d1b      	ldrb	r3, [r3, #20]
 8015080:	2b01      	cmp	r3, #1
 8015082:	d106      	bne.n	8015092 <tcp_sent+0x26>
 8015084:	4b07      	ldr	r3, [pc, #28]	@ (80150a4 <tcp_sent+0x38>)
 8015086:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801508a:	4907      	ldr	r1, [pc, #28]	@ (80150a8 <tcp_sent+0x3c>)
 801508c:	4807      	ldr	r0, [pc, #28]	@ (80150ac <tcp_sent+0x40>)
 801508e:	f008 fa35 	bl	801d4fc <iprintf>
    pcb->sent = sent;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801509a:	bf00      	nop
 801509c:	3708      	adds	r7, #8
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	08020e14 	.word	0x08020e14
 80150a8:	080213d8 	.word	0x080213d8
 80150ac:	08020e58 	.word	0x08020e58

080150b0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d00e      	beq.n	80150de <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	7d1b      	ldrb	r3, [r3, #20]
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d106      	bne.n	80150d6 <tcp_err+0x26>
 80150c8:	4b07      	ldr	r3, [pc, #28]	@ (80150e8 <tcp_err+0x38>)
 80150ca:	f640 020d 	movw	r2, #2061	@ 0x80d
 80150ce:	4907      	ldr	r1, [pc, #28]	@ (80150ec <tcp_err+0x3c>)
 80150d0:	4807      	ldr	r0, [pc, #28]	@ (80150f0 <tcp_err+0x40>)
 80150d2:	f008 fa13 	bl	801d4fc <iprintf>
    pcb->errf = err;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	683a      	ldr	r2, [r7, #0]
 80150da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80150de:	bf00      	nop
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	08020e14 	.word	0x08020e14
 80150ec:	08021400 	.word	0x08021400
 80150f0:	08020e58 	.word	0x08020e58

080150f4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80150f4:	b480      	push	{r7}
 80150f6:	b085      	sub	sp, #20
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d008      	beq.n	8015116 <tcp_accept+0x22>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	7d1b      	ldrb	r3, [r3, #20]
 8015108:	2b01      	cmp	r3, #1
 801510a:	d104      	bne.n	8015116 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	683a      	ldr	r2, [r7, #0]
 8015114:	619a      	str	r2, [r3, #24]
  }
}
 8015116:	bf00      	nop
 8015118:	3714      	adds	r7, #20
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
	...

08015124 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d107      	bne.n	8015142 <tcp_pcb_purge+0x1e>
 8015132:	4b21      	ldr	r3, [pc, #132]	@ (80151b8 <tcp_pcb_purge+0x94>)
 8015134:	f640 0251 	movw	r2, #2129	@ 0x851
 8015138:	4920      	ldr	r1, [pc, #128]	@ (80151bc <tcp_pcb_purge+0x98>)
 801513a:	4821      	ldr	r0, [pc, #132]	@ (80151c0 <tcp_pcb_purge+0x9c>)
 801513c:	f008 f9de 	bl	801d4fc <iprintf>
 8015140:	e037      	b.n	80151b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	7d1b      	ldrb	r3, [r3, #20]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d033      	beq.n	80151b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801514e:	2b0a      	cmp	r3, #10
 8015150:	d02f      	beq.n	80151b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015156:	2b01      	cmp	r3, #1
 8015158:	d02b      	beq.n	80151b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801515e:	2b00      	cmp	r3, #0
 8015160:	d007      	beq.n	8015172 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015166:	4618      	mov	r0, r3
 8015168:	f7fe f910 	bl	801338c <pbuf_free>
      pcb->refused_data = NULL;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2200      	movs	r2, #0
 8015170:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015176:	2b00      	cmp	r3, #0
 8015178:	d002      	beq.n	8015180 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 f986 	bl	801548c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015186:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801518c:	4618      	mov	r0, r3
 801518e:	f7ff fd23 	bl	8014bd8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff fd1e 	bl	8014bd8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2200      	movs	r2, #0
 80151a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80151b2:	3708      	adds	r7, #8
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	08020e14 	.word	0x08020e14
 80151bc:	08021460 	.word	0x08021460
 80151c0:	08020e58 	.word	0x08020e58

080151c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d106      	bne.n	80151e2 <tcp_pcb_remove+0x1e>
 80151d4:	4b3e      	ldr	r3, [pc, #248]	@ (80152d0 <tcp_pcb_remove+0x10c>)
 80151d6:	f640 0283 	movw	r2, #2179	@ 0x883
 80151da:	493e      	ldr	r1, [pc, #248]	@ (80152d4 <tcp_pcb_remove+0x110>)
 80151dc:	483e      	ldr	r0, [pc, #248]	@ (80152d8 <tcp_pcb_remove+0x114>)
 80151de:	f008 f98d 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d106      	bne.n	80151f6 <tcp_pcb_remove+0x32>
 80151e8:	4b39      	ldr	r3, [pc, #228]	@ (80152d0 <tcp_pcb_remove+0x10c>)
 80151ea:	f640 0284 	movw	r2, #2180	@ 0x884
 80151ee:	493b      	ldr	r1, [pc, #236]	@ (80152dc <tcp_pcb_remove+0x118>)
 80151f0:	4839      	ldr	r0, [pc, #228]	@ (80152d8 <tcp_pcb_remove+0x114>)
 80151f2:	f008 f983 	bl	801d4fc <iprintf>

  TCP_RMV(pcblist, pcb);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	683a      	ldr	r2, [r7, #0]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d105      	bne.n	801520c <tcp_pcb_remove+0x48>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	68da      	ldr	r2, [r3, #12]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	601a      	str	r2, [r3, #0]
 801520a:	e013      	b.n	8015234 <tcp_pcb_remove+0x70>
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	60fb      	str	r3, [r7, #12]
 8015212:	e00c      	b.n	801522e <tcp_pcb_remove+0x6a>
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	429a      	cmp	r2, r3
 801521c:	d104      	bne.n	8015228 <tcp_pcb_remove+0x64>
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	68da      	ldr	r2, [r3, #12]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	60da      	str	r2, [r3, #12]
 8015226:	e005      	b.n	8015234 <tcp_pcb_remove+0x70>
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	60fb      	str	r3, [r7, #12]
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1ef      	bne.n	8015214 <tcp_pcb_remove+0x50>
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	2200      	movs	r2, #0
 8015238:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801523a:	6838      	ldr	r0, [r7, #0]
 801523c:	f7ff ff72 	bl	8015124 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	7d1b      	ldrb	r3, [r3, #20]
 8015244:	2b0a      	cmp	r3, #10
 8015246:	d013      	beq.n	8015270 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801524c:	2b01      	cmp	r3, #1
 801524e:	d00f      	beq.n	8015270 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	8b5b      	ldrh	r3, [r3, #26]
 8015254:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015258:	2b00      	cmp	r3, #0
 801525a:	d009      	beq.n	8015270 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	8b5b      	ldrh	r3, [r3, #26]
 8015260:	f043 0302 	orr.w	r3, r3, #2
 8015264:	b29a      	uxth	r2, r3
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801526a:	6838      	ldr	r0, [r7, #0]
 801526c:	f003 fbc0 	bl	80189f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	7d1b      	ldrb	r3, [r3, #20]
 8015274:	2b01      	cmp	r3, #1
 8015276:	d020      	beq.n	80152ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801527c:	2b00      	cmp	r3, #0
 801527e:	d006      	beq.n	801528e <tcp_pcb_remove+0xca>
 8015280:	4b13      	ldr	r3, [pc, #76]	@ (80152d0 <tcp_pcb_remove+0x10c>)
 8015282:	f640 0293 	movw	r2, #2195	@ 0x893
 8015286:	4916      	ldr	r1, [pc, #88]	@ (80152e0 <tcp_pcb_remove+0x11c>)
 8015288:	4813      	ldr	r0, [pc, #76]	@ (80152d8 <tcp_pcb_remove+0x114>)
 801528a:	f008 f937 	bl	801d4fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015292:	2b00      	cmp	r3, #0
 8015294:	d006      	beq.n	80152a4 <tcp_pcb_remove+0xe0>
 8015296:	4b0e      	ldr	r3, [pc, #56]	@ (80152d0 <tcp_pcb_remove+0x10c>)
 8015298:	f640 0294 	movw	r2, #2196	@ 0x894
 801529c:	4911      	ldr	r1, [pc, #68]	@ (80152e4 <tcp_pcb_remove+0x120>)
 801529e:	480e      	ldr	r0, [pc, #56]	@ (80152d8 <tcp_pcb_remove+0x114>)
 80152a0:	f008 f92c 	bl	801d4fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d006      	beq.n	80152ba <tcp_pcb_remove+0xf6>
 80152ac:	4b08      	ldr	r3, [pc, #32]	@ (80152d0 <tcp_pcb_remove+0x10c>)
 80152ae:	f640 0296 	movw	r2, #2198	@ 0x896
 80152b2:	490d      	ldr	r1, [pc, #52]	@ (80152e8 <tcp_pcb_remove+0x124>)
 80152b4:	4808      	ldr	r0, [pc, #32]	@ (80152d8 <tcp_pcb_remove+0x114>)
 80152b6:	f008 f921 	bl	801d4fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	2200      	movs	r2, #0
 80152be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2200      	movs	r2, #0
 80152c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80152c6:	bf00      	nop
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	08020e14 	.word	0x08020e14
 80152d4:	0802147c 	.word	0x0802147c
 80152d8:	08020e58 	.word	0x08020e58
 80152dc:	08021498 	.word	0x08021498
 80152e0:	080214b8 	.word	0x080214b8
 80152e4:	080214d0 	.word	0x080214d0
 80152e8:	080214ec 	.word	0x080214ec

080152ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <tcp_next_iss+0x1c>
 80152fa:	4b0a      	ldr	r3, [pc, #40]	@ (8015324 <tcp_next_iss+0x38>)
 80152fc:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015300:	4909      	ldr	r1, [pc, #36]	@ (8015328 <tcp_next_iss+0x3c>)
 8015302:	480a      	ldr	r0, [pc, #40]	@ (801532c <tcp_next_iss+0x40>)
 8015304:	f008 f8fa 	bl	801d4fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015308:	4b09      	ldr	r3, [pc, #36]	@ (8015330 <tcp_next_iss+0x44>)
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	4b09      	ldr	r3, [pc, #36]	@ (8015334 <tcp_next_iss+0x48>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4413      	add	r3, r2
 8015312:	4a07      	ldr	r2, [pc, #28]	@ (8015330 <tcp_next_iss+0x44>)
 8015314:	6013      	str	r3, [r2, #0]
  return iss;
 8015316:	4b06      	ldr	r3, [pc, #24]	@ (8015330 <tcp_next_iss+0x44>)
 8015318:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801531a:	4618      	mov	r0, r3
 801531c:	3708      	adds	r7, #8
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	08020e14 	.word	0x08020e14
 8015328:	08021504 	.word	0x08021504
 801532c:	08020e58 	.word	0x08020e58
 8015330:	200000a0 	.word	0x200000a0
 8015334:	2000c9ac 	.word	0x2000c9ac

08015338 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b086      	sub	sp, #24
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d106      	bne.n	801535a <tcp_eff_send_mss_netif+0x22>
 801534c:	4b14      	ldr	r3, [pc, #80]	@ (80153a0 <tcp_eff_send_mss_netif+0x68>)
 801534e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015352:	4914      	ldr	r1, [pc, #80]	@ (80153a4 <tcp_eff_send_mss_netif+0x6c>)
 8015354:	4814      	ldr	r0, [pc, #80]	@ (80153a8 <tcp_eff_send_mss_netif+0x70>)
 8015356:	f008 f8d1 	bl	801d4fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d101      	bne.n	8015364 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015360:	89fb      	ldrh	r3, [r7, #14]
 8015362:	e019      	b.n	8015398 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015368:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801536a:	8afb      	ldrh	r3, [r7, #22]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d012      	beq.n	8015396 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015370:	2328      	movs	r3, #40	@ 0x28
 8015372:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015374:	8afa      	ldrh	r2, [r7, #22]
 8015376:	8abb      	ldrh	r3, [r7, #20]
 8015378:	429a      	cmp	r2, r3
 801537a:	d904      	bls.n	8015386 <tcp_eff_send_mss_netif+0x4e>
 801537c:	8afa      	ldrh	r2, [r7, #22]
 801537e:	8abb      	ldrh	r3, [r7, #20]
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	b29b      	uxth	r3, r3
 8015384:	e000      	b.n	8015388 <tcp_eff_send_mss_netif+0x50>
 8015386:	2300      	movs	r3, #0
 8015388:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801538a:	8a7a      	ldrh	r2, [r7, #18]
 801538c:	89fb      	ldrh	r3, [r7, #14]
 801538e:	4293      	cmp	r3, r2
 8015390:	bf28      	it	cs
 8015392:	4613      	movcs	r3, r2
 8015394:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015396:	89fb      	ldrh	r3, [r7, #14]
}
 8015398:	4618      	mov	r0, r3
 801539a:	3718      	adds	r7, #24
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	08020e14 	.word	0x08020e14
 80153a4:	08021520 	.word	0x08021520
 80153a8:	08020e58 	.word	0x08020e58

080153ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d119      	bne.n	80153f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80153c0:	4b10      	ldr	r3, [pc, #64]	@ (8015404 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80153c2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80153c6:	4910      	ldr	r1, [pc, #64]	@ (8015408 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80153c8:	4810      	ldr	r0, [pc, #64]	@ (801540c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80153ca:	f008 f897 	bl	801d4fc <iprintf>

  while (pcb != NULL) {
 80153ce:	e011      	b.n	80153f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d108      	bne.n	80153ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f7fe fd66 	bl	8013eb4 <tcp_abort>
      pcb = next;
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	60fb      	str	r3, [r7, #12]
 80153ec:	e002      	b.n	80153f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1ea      	bne.n	80153d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80153fa:	bf00      	nop
 80153fc:	bf00      	nop
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	08020e14 	.word	0x08020e14
 8015408:	08021548 	.word	0x08021548
 801540c:	08020e58 	.word	0x08020e58

08015410 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d02a      	beq.n	8015476 <tcp_netif_ip_addr_changed+0x66>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d026      	beq.n	8015476 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015428:	4b15      	ldr	r3, [pc, #84]	@ (8015480 <tcp_netif_ip_addr_changed+0x70>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	4619      	mov	r1, r3
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f7ff ffbc 	bl	80153ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015434:	4b13      	ldr	r3, [pc, #76]	@ (8015484 <tcp_netif_ip_addr_changed+0x74>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	4619      	mov	r1, r3
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f7ff ffb6 	bl	80153ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d017      	beq.n	8015476 <tcp_netif_ip_addr_changed+0x66>
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d013      	beq.n	8015476 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801544e:	4b0e      	ldr	r3, [pc, #56]	@ (8015488 <tcp_netif_ip_addr_changed+0x78>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	60fb      	str	r3, [r7, #12]
 8015454:	e00c      	b.n	8015470 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	429a      	cmp	r2, r3
 8015460:	d103      	bne.n	801546a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	60fb      	str	r3, [r7, #12]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d1ef      	bne.n	8015456 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015476:	bf00      	nop
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	2000c9b8 	.word	0x2000c9b8
 8015484:	2000c9b0 	.word	0x2000c9b0
 8015488:	2000c9b4 	.word	0x2000c9b4

0801548c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015498:	2b00      	cmp	r3, #0
 801549a:	d007      	beq.n	80154ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff fb99 	bl	8014bd8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80154ac:	bf00      	nop
 80154ae:	3708      	adds	r7, #8
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}

080154b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80154b4:	b590      	push	{r4, r7, lr}
 80154b6:	b08d      	sub	sp, #52	@ 0x34
 80154b8:	af04      	add	r7, sp, #16
 80154ba:	6078      	str	r0, [r7, #4]
 80154bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d105      	bne.n	80154d0 <tcp_input+0x1c>
 80154c4:	4b9b      	ldr	r3, [pc, #620]	@ (8015734 <tcp_input+0x280>)
 80154c6:	2283      	movs	r2, #131	@ 0x83
 80154c8:	499b      	ldr	r1, [pc, #620]	@ (8015738 <tcp_input+0x284>)
 80154ca:	489c      	ldr	r0, [pc, #624]	@ (801573c <tcp_input+0x288>)
 80154cc:	f008 f816 	bl	801d4fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	4a9a      	ldr	r2, [pc, #616]	@ (8015740 <tcp_input+0x28c>)
 80154d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	895b      	ldrh	r3, [r3, #10]
 80154dc:	2b13      	cmp	r3, #19
 80154de:	f240 83d1 	bls.w	8015c84 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80154e2:	4b98      	ldr	r3, [pc, #608]	@ (8015744 <tcp_input+0x290>)
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	4a97      	ldr	r2, [pc, #604]	@ (8015744 <tcp_input+0x290>)
 80154e8:	6812      	ldr	r2, [r2, #0]
 80154ea:	4611      	mov	r1, r2
 80154ec:	4618      	mov	r0, r3
 80154ee:	f006 f867 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 80154f2:	4603      	mov	r3, r0
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	f040 83c7 	bne.w	8015c88 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80154fa:	4b92      	ldr	r3, [pc, #584]	@ (8015744 <tcp_input+0x290>)
 80154fc:	695b      	ldr	r3, [r3, #20]
 80154fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015502:	2be0      	cmp	r3, #224	@ 0xe0
 8015504:	f000 83c0 	beq.w	8015c88 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015508:	4b8d      	ldr	r3, [pc, #564]	@ (8015740 <tcp_input+0x28c>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	899b      	ldrh	r3, [r3, #12]
 801550e:	b29b      	uxth	r3, r3
 8015510:	4618      	mov	r0, r3
 8015512:	f7fc fb7b 	bl	8011c0c <lwip_htons>
 8015516:	4603      	mov	r3, r0
 8015518:	0b1b      	lsrs	r3, r3, #12
 801551a:	b29b      	uxth	r3, r3
 801551c:	b2db      	uxtb	r3, r3
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015522:	7cbb      	ldrb	r3, [r7, #18]
 8015524:	2b13      	cmp	r3, #19
 8015526:	f240 83b1 	bls.w	8015c8c <tcp_input+0x7d8>
 801552a:	7cbb      	ldrb	r3, [r7, #18]
 801552c:	b29a      	uxth	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	891b      	ldrh	r3, [r3, #8]
 8015532:	429a      	cmp	r2, r3
 8015534:	f200 83aa 	bhi.w	8015c8c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015538:	7cbb      	ldrb	r3, [r7, #18]
 801553a:	b29b      	uxth	r3, r3
 801553c:	3b14      	subs	r3, #20
 801553e:	b29a      	uxth	r2, r3
 8015540:	4b81      	ldr	r3, [pc, #516]	@ (8015748 <tcp_input+0x294>)
 8015542:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015544:	4b81      	ldr	r3, [pc, #516]	@ (801574c <tcp_input+0x298>)
 8015546:	2200      	movs	r2, #0
 8015548:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	895a      	ldrh	r2, [r3, #10]
 801554e:	7cbb      	ldrb	r3, [r7, #18]
 8015550:	b29b      	uxth	r3, r3
 8015552:	429a      	cmp	r2, r3
 8015554:	d309      	bcc.n	801556a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015556:	4b7c      	ldr	r3, [pc, #496]	@ (8015748 <tcp_input+0x294>)
 8015558:	881a      	ldrh	r2, [r3, #0]
 801555a:	4b7d      	ldr	r3, [pc, #500]	@ (8015750 <tcp_input+0x29c>)
 801555c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801555e:	7cbb      	ldrb	r3, [r7, #18]
 8015560:	4619      	mov	r1, r3
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f7fd fe8c 	bl	8013280 <pbuf_remove_header>
 8015568:	e04e      	b.n	8015608 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d105      	bne.n	801557e <tcp_input+0xca>
 8015572:	4b70      	ldr	r3, [pc, #448]	@ (8015734 <tcp_input+0x280>)
 8015574:	22c2      	movs	r2, #194	@ 0xc2
 8015576:	4977      	ldr	r1, [pc, #476]	@ (8015754 <tcp_input+0x2a0>)
 8015578:	4870      	ldr	r0, [pc, #448]	@ (801573c <tcp_input+0x288>)
 801557a:	f007 ffbf 	bl	801d4fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801557e:	2114      	movs	r1, #20
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7fd fe7d 	bl	8013280 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	895a      	ldrh	r2, [r3, #10]
 801558a:	4b71      	ldr	r3, [pc, #452]	@ (8015750 <tcp_input+0x29c>)
 801558c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801558e:	4b6e      	ldr	r3, [pc, #440]	@ (8015748 <tcp_input+0x294>)
 8015590:	881a      	ldrh	r2, [r3, #0]
 8015592:	4b6f      	ldr	r3, [pc, #444]	@ (8015750 <tcp_input+0x29c>)
 8015594:	881b      	ldrh	r3, [r3, #0]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801559a:	4b6d      	ldr	r3, [pc, #436]	@ (8015750 <tcp_input+0x29c>)
 801559c:	881b      	ldrh	r3, [r3, #0]
 801559e:	4619      	mov	r1, r3
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f7fd fe6d 	bl	8013280 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	895b      	ldrh	r3, [r3, #10]
 80155ac:	8a3a      	ldrh	r2, [r7, #16]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	f200 836e 	bhi.w	8015c90 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	4a64      	ldr	r2, [pc, #400]	@ (801574c <tcp_input+0x298>)
 80155bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	8a3a      	ldrh	r2, [r7, #16]
 80155c4:	4611      	mov	r1, r2
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fd fe5a 	bl	8013280 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	891a      	ldrh	r2, [r3, #8]
 80155d0:	8a3b      	ldrh	r3, [r7, #16]
 80155d2:	1ad3      	subs	r3, r2, r3
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	895b      	ldrh	r3, [r3, #10]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d005      	beq.n	80155ee <tcp_input+0x13a>
 80155e2:	4b54      	ldr	r3, [pc, #336]	@ (8015734 <tcp_input+0x280>)
 80155e4:	22df      	movs	r2, #223	@ 0xdf
 80155e6:	495c      	ldr	r1, [pc, #368]	@ (8015758 <tcp_input+0x2a4>)
 80155e8:	4854      	ldr	r0, [pc, #336]	@ (801573c <tcp_input+0x288>)
 80155ea:	f007 ff87 	bl	801d4fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	891a      	ldrh	r2, [r3, #8]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	891b      	ldrh	r3, [r3, #8]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d005      	beq.n	8015608 <tcp_input+0x154>
 80155fc:	4b4d      	ldr	r3, [pc, #308]	@ (8015734 <tcp_input+0x280>)
 80155fe:	22e0      	movs	r2, #224	@ 0xe0
 8015600:	4956      	ldr	r1, [pc, #344]	@ (801575c <tcp_input+0x2a8>)
 8015602:	484e      	ldr	r0, [pc, #312]	@ (801573c <tcp_input+0x288>)
 8015604:	f007 ff7a 	bl	801d4fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015608:	4b4d      	ldr	r3, [pc, #308]	@ (8015740 <tcp_input+0x28c>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	881b      	ldrh	r3, [r3, #0]
 801560e:	b29b      	uxth	r3, r3
 8015610:	4a4b      	ldr	r2, [pc, #300]	@ (8015740 <tcp_input+0x28c>)
 8015612:	6814      	ldr	r4, [r2, #0]
 8015614:	4618      	mov	r0, r3
 8015616:	f7fc faf9 	bl	8011c0c <lwip_htons>
 801561a:	4603      	mov	r3, r0
 801561c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801561e:	4b48      	ldr	r3, [pc, #288]	@ (8015740 <tcp_input+0x28c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	885b      	ldrh	r3, [r3, #2]
 8015624:	b29b      	uxth	r3, r3
 8015626:	4a46      	ldr	r2, [pc, #280]	@ (8015740 <tcp_input+0x28c>)
 8015628:	6814      	ldr	r4, [r2, #0]
 801562a:	4618      	mov	r0, r3
 801562c:	f7fc faee 	bl	8011c0c <lwip_htons>
 8015630:	4603      	mov	r3, r0
 8015632:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015634:	4b42      	ldr	r3, [pc, #264]	@ (8015740 <tcp_input+0x28c>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	4a41      	ldr	r2, [pc, #260]	@ (8015740 <tcp_input+0x28c>)
 801563c:	6814      	ldr	r4, [r2, #0]
 801563e:	4618      	mov	r0, r3
 8015640:	f7fc fafa 	bl	8011c38 <lwip_htonl>
 8015644:	4603      	mov	r3, r0
 8015646:	6063      	str	r3, [r4, #4]
 8015648:	6863      	ldr	r3, [r4, #4]
 801564a:	4a45      	ldr	r2, [pc, #276]	@ (8015760 <tcp_input+0x2ac>)
 801564c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801564e:	4b3c      	ldr	r3, [pc, #240]	@ (8015740 <tcp_input+0x28c>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	689b      	ldr	r3, [r3, #8]
 8015654:	4a3a      	ldr	r2, [pc, #232]	@ (8015740 <tcp_input+0x28c>)
 8015656:	6814      	ldr	r4, [r2, #0]
 8015658:	4618      	mov	r0, r3
 801565a:	f7fc faed 	bl	8011c38 <lwip_htonl>
 801565e:	4603      	mov	r3, r0
 8015660:	60a3      	str	r3, [r4, #8]
 8015662:	68a3      	ldr	r3, [r4, #8]
 8015664:	4a3f      	ldr	r2, [pc, #252]	@ (8015764 <tcp_input+0x2b0>)
 8015666:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015668:	4b35      	ldr	r3, [pc, #212]	@ (8015740 <tcp_input+0x28c>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	89db      	ldrh	r3, [r3, #14]
 801566e:	b29b      	uxth	r3, r3
 8015670:	4a33      	ldr	r2, [pc, #204]	@ (8015740 <tcp_input+0x28c>)
 8015672:	6814      	ldr	r4, [r2, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	f7fc fac9 	bl	8011c0c <lwip_htons>
 801567a:	4603      	mov	r3, r0
 801567c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801567e:	4b30      	ldr	r3, [pc, #192]	@ (8015740 <tcp_input+0x28c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	899b      	ldrh	r3, [r3, #12]
 8015684:	b29b      	uxth	r3, r3
 8015686:	4618      	mov	r0, r3
 8015688:	f7fc fac0 	bl	8011c0c <lwip_htons>
 801568c:	4603      	mov	r3, r0
 801568e:	b2db      	uxtb	r3, r3
 8015690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015694:	b2da      	uxtb	r2, r3
 8015696:	4b34      	ldr	r3, [pc, #208]	@ (8015768 <tcp_input+0x2b4>)
 8015698:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	891a      	ldrh	r2, [r3, #8]
 801569e:	4b33      	ldr	r3, [pc, #204]	@ (801576c <tcp_input+0x2b8>)
 80156a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80156a2:	4b31      	ldr	r3, [pc, #196]	@ (8015768 <tcp_input+0x2b4>)
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	f003 0303 	and.w	r3, r3, #3
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00c      	beq.n	80156c8 <tcp_input+0x214>
    tcplen++;
 80156ae:	4b2f      	ldr	r3, [pc, #188]	@ (801576c <tcp_input+0x2b8>)
 80156b0:	881b      	ldrh	r3, [r3, #0]
 80156b2:	3301      	adds	r3, #1
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	4b2d      	ldr	r3, [pc, #180]	@ (801576c <tcp_input+0x2b8>)
 80156b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	891a      	ldrh	r2, [r3, #8]
 80156be:	4b2b      	ldr	r3, [pc, #172]	@ (801576c <tcp_input+0x2b8>)
 80156c0:	881b      	ldrh	r3, [r3, #0]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	f200 82e6 	bhi.w	8015c94 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80156c8:	2300      	movs	r3, #0
 80156ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80156cc:	4b28      	ldr	r3, [pc, #160]	@ (8015770 <tcp_input+0x2bc>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	61fb      	str	r3, [r7, #28]
 80156d2:	e09d      	b.n	8015810 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	7d1b      	ldrb	r3, [r3, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d105      	bne.n	80156e8 <tcp_input+0x234>
 80156dc:	4b15      	ldr	r3, [pc, #84]	@ (8015734 <tcp_input+0x280>)
 80156de:	22fb      	movs	r2, #251	@ 0xfb
 80156e0:	4924      	ldr	r1, [pc, #144]	@ (8015774 <tcp_input+0x2c0>)
 80156e2:	4816      	ldr	r0, [pc, #88]	@ (801573c <tcp_input+0x288>)
 80156e4:	f007 ff0a 	bl	801d4fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	7d1b      	ldrb	r3, [r3, #20]
 80156ec:	2b0a      	cmp	r3, #10
 80156ee:	d105      	bne.n	80156fc <tcp_input+0x248>
 80156f0:	4b10      	ldr	r3, [pc, #64]	@ (8015734 <tcp_input+0x280>)
 80156f2:	22fc      	movs	r2, #252	@ 0xfc
 80156f4:	4920      	ldr	r1, [pc, #128]	@ (8015778 <tcp_input+0x2c4>)
 80156f6:	4811      	ldr	r0, [pc, #68]	@ (801573c <tcp_input+0x288>)
 80156f8:	f007 ff00 	bl	801d4fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	7d1b      	ldrb	r3, [r3, #20]
 8015700:	2b01      	cmp	r3, #1
 8015702:	d105      	bne.n	8015710 <tcp_input+0x25c>
 8015704:	4b0b      	ldr	r3, [pc, #44]	@ (8015734 <tcp_input+0x280>)
 8015706:	22fd      	movs	r2, #253	@ 0xfd
 8015708:	491c      	ldr	r1, [pc, #112]	@ (801577c <tcp_input+0x2c8>)
 801570a:	480c      	ldr	r0, [pc, #48]	@ (801573c <tcp_input+0x288>)
 801570c:	f007 fef6 	bl	801d4fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	7a1b      	ldrb	r3, [r3, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d033      	beq.n	8015780 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	7a1a      	ldrb	r2, [r3, #8]
 801571c:	4b09      	ldr	r3, [pc, #36]	@ (8015744 <tcp_input+0x290>)
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015724:	3301      	adds	r3, #1
 8015726:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015728:	429a      	cmp	r2, r3
 801572a:	d029      	beq.n	8015780 <tcp_input+0x2cc>
      prev = pcb;
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	61bb      	str	r3, [r7, #24]
      continue;
 8015730:	e06b      	b.n	801580a <tcp_input+0x356>
 8015732:	bf00      	nop
 8015734:	0802157c 	.word	0x0802157c
 8015738:	080215b0 	.word	0x080215b0
 801573c:	080215c8 	.word	0x080215c8
 8015740:	2000c9d4 	.word	0x2000c9d4
 8015744:	20009258 	.word	0x20009258
 8015748:	2000c9d8 	.word	0x2000c9d8
 801574c:	2000c9dc 	.word	0x2000c9dc
 8015750:	2000c9da 	.word	0x2000c9da
 8015754:	080215f0 	.word	0x080215f0
 8015758:	08021600 	.word	0x08021600
 801575c:	0802160c 	.word	0x0802160c
 8015760:	2000c9e4 	.word	0x2000c9e4
 8015764:	2000c9e8 	.word	0x2000c9e8
 8015768:	2000c9f0 	.word	0x2000c9f0
 801576c:	2000c9ee 	.word	0x2000c9ee
 8015770:	2000c9b8 	.word	0x2000c9b8
 8015774:	0802162c 	.word	0x0802162c
 8015778:	08021654 	.word	0x08021654
 801577c:	08021680 	.word	0x08021680
    }

    if (pcb->remote_port == tcphdr->src &&
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	8b1a      	ldrh	r2, [r3, #24]
 8015784:	4b72      	ldr	r3, [pc, #456]	@ (8015950 <tcp_input+0x49c>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	881b      	ldrh	r3, [r3, #0]
 801578a:	b29b      	uxth	r3, r3
 801578c:	429a      	cmp	r2, r3
 801578e:	d13a      	bne.n	8015806 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	8ada      	ldrh	r2, [r3, #22]
 8015794:	4b6e      	ldr	r3, [pc, #440]	@ (8015950 <tcp_input+0x49c>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	885b      	ldrh	r3, [r3, #2]
 801579a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801579c:	429a      	cmp	r2, r3
 801579e:	d132      	bne.n	8015806 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	4b6b      	ldr	r3, [pc, #428]	@ (8015954 <tcp_input+0x4a0>)
 80157a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d12c      	bne.n	8015806 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	4b68      	ldr	r3, [pc, #416]	@ (8015954 <tcp_input+0x4a0>)
 80157b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d126      	bne.n	8015806 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	69fa      	ldr	r2, [r7, #28]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d106      	bne.n	80157d0 <tcp_input+0x31c>
 80157c2:	4b65      	ldr	r3, [pc, #404]	@ (8015958 <tcp_input+0x4a4>)
 80157c4:	f240 120d 	movw	r2, #269	@ 0x10d
 80157c8:	4964      	ldr	r1, [pc, #400]	@ (801595c <tcp_input+0x4a8>)
 80157ca:	4865      	ldr	r0, [pc, #404]	@ (8015960 <tcp_input+0x4ac>)
 80157cc:	f007 fe96 	bl	801d4fc <iprintf>
      if (prev != NULL) {
 80157d0:	69bb      	ldr	r3, [r7, #24]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00a      	beq.n	80157ec <tcp_input+0x338>
        prev->next = pcb->next;
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	68da      	ldr	r2, [r3, #12]
 80157da:	69bb      	ldr	r3, [r7, #24]
 80157dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80157de:	4b61      	ldr	r3, [pc, #388]	@ (8015964 <tcp_input+0x4b0>)
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80157e6:	4a5f      	ldr	r2, [pc, #380]	@ (8015964 <tcp_input+0x4b0>)
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d111      	bne.n	801581a <tcp_input+0x366>
 80157f6:	4b58      	ldr	r3, [pc, #352]	@ (8015958 <tcp_input+0x4a4>)
 80157f8:	f240 1215 	movw	r2, #277	@ 0x115
 80157fc:	495a      	ldr	r1, [pc, #360]	@ (8015968 <tcp_input+0x4b4>)
 80157fe:	4858      	ldr	r0, [pc, #352]	@ (8015960 <tcp_input+0x4ac>)
 8015800:	f007 fe7c 	bl	801d4fc <iprintf>
      break;
 8015804:	e009      	b.n	801581a <tcp_input+0x366>
    }
    prev = pcb;
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	61fb      	str	r3, [r7, #28]
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f47f af5e 	bne.w	80156d4 <tcp_input+0x220>
 8015818:	e000      	b.n	801581c <tcp_input+0x368>
      break;
 801581a:	bf00      	nop
  }

  if (pcb == NULL) {
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	2b00      	cmp	r3, #0
 8015820:	f040 80aa 	bne.w	8015978 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015824:	4b51      	ldr	r3, [pc, #324]	@ (801596c <tcp_input+0x4b8>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	61fb      	str	r3, [r7, #28]
 801582a:	e03f      	b.n	80158ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801582c:	69fb      	ldr	r3, [r7, #28]
 801582e:	7d1b      	ldrb	r3, [r3, #20]
 8015830:	2b0a      	cmp	r3, #10
 8015832:	d006      	beq.n	8015842 <tcp_input+0x38e>
 8015834:	4b48      	ldr	r3, [pc, #288]	@ (8015958 <tcp_input+0x4a4>)
 8015836:	f240 121f 	movw	r2, #287	@ 0x11f
 801583a:	494d      	ldr	r1, [pc, #308]	@ (8015970 <tcp_input+0x4bc>)
 801583c:	4848      	ldr	r0, [pc, #288]	@ (8015960 <tcp_input+0x4ac>)
 801583e:	f007 fe5d 	bl	801d4fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	7a1b      	ldrb	r3, [r3, #8]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d009      	beq.n	801585e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	7a1a      	ldrb	r2, [r3, #8]
 801584e:	4b41      	ldr	r3, [pc, #260]	@ (8015954 <tcp_input+0x4a0>)
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015856:	3301      	adds	r3, #1
 8015858:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801585a:	429a      	cmp	r2, r3
 801585c:	d122      	bne.n	80158a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	8b1a      	ldrh	r2, [r3, #24]
 8015862:	4b3b      	ldr	r3, [pc, #236]	@ (8015950 <tcp_input+0x49c>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	881b      	ldrh	r3, [r3, #0]
 8015868:	b29b      	uxth	r3, r3
 801586a:	429a      	cmp	r2, r3
 801586c:	d11b      	bne.n	80158a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	8ada      	ldrh	r2, [r3, #22]
 8015872:	4b37      	ldr	r3, [pc, #220]	@ (8015950 <tcp_input+0x49c>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	885b      	ldrh	r3, [r3, #2]
 8015878:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801587a:	429a      	cmp	r2, r3
 801587c:	d113      	bne.n	80158a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	685a      	ldr	r2, [r3, #4]
 8015882:	4b34      	ldr	r3, [pc, #208]	@ (8015954 <tcp_input+0x4a0>)
 8015884:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015886:	429a      	cmp	r2, r3
 8015888:	d10d      	bne.n	80158a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	681a      	ldr	r2, [r3, #0]
 801588e:	4b31      	ldr	r3, [pc, #196]	@ (8015954 <tcp_input+0x4a0>)
 8015890:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015892:	429a      	cmp	r2, r3
 8015894:	d107      	bne.n	80158a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015896:	69f8      	ldr	r0, [r7, #28]
 8015898:	f000 fb56 	bl	8015f48 <tcp_timewait_input>
        }
        pbuf_free(p);
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7fd fd75 	bl	801338c <pbuf_free>
        return;
 80158a2:	e1fd      	b.n	8015ca0 <tcp_input+0x7ec>
        continue;
 80158a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	61fb      	str	r3, [r7, #28]
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1bc      	bne.n	801582c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80158b2:	2300      	movs	r3, #0
 80158b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80158b6:	4b2f      	ldr	r3, [pc, #188]	@ (8015974 <tcp_input+0x4c0>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	617b      	str	r3, [r7, #20]
 80158bc:	e02a      	b.n	8015914 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	7a1b      	ldrb	r3, [r3, #8]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d00c      	beq.n	80158e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	7a1a      	ldrb	r2, [r3, #8]
 80158ca:	4b22      	ldr	r3, [pc, #136]	@ (8015954 <tcp_input+0x4a0>)
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80158d2:	3301      	adds	r3, #1
 80158d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d002      	beq.n	80158e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	61bb      	str	r3, [r7, #24]
        continue;
 80158de:	e016      	b.n	801590e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	8ada      	ldrh	r2, [r3, #22]
 80158e4:	4b1a      	ldr	r3, [pc, #104]	@ (8015950 <tcp_input+0x49c>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	885b      	ldrh	r3, [r3, #2]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d10c      	bne.n	801590a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	4b17      	ldr	r3, [pc, #92]	@ (8015954 <tcp_input+0x4a0>)
 80158f6:	695b      	ldr	r3, [r3, #20]
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d00f      	beq.n	801591c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d00d      	beq.n	801591e <tcp_input+0x46a>
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d009      	beq.n	801591e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	617b      	str	r3, [r7, #20]
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d1d1      	bne.n	80158be <tcp_input+0x40a>
 801591a:	e000      	b.n	801591e <tcp_input+0x46a>
            break;
 801591c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d029      	beq.n	8015978 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d00a      	beq.n	8015940 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	68da      	ldr	r2, [r3, #12]
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015932:	4b10      	ldr	r3, [pc, #64]	@ (8015974 <tcp_input+0x4c0>)
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801593a:	4a0e      	ldr	r2, [pc, #56]	@ (8015974 <tcp_input+0x4c0>)
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015940:	6978      	ldr	r0, [r7, #20]
 8015942:	f000 fa03 	bl	8015d4c <tcp_listen_input>
      }
      pbuf_free(p);
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7fd fd20 	bl	801338c <pbuf_free>
      return;
 801594c:	e1a8      	b.n	8015ca0 <tcp_input+0x7ec>
 801594e:	bf00      	nop
 8015950:	2000c9d4 	.word	0x2000c9d4
 8015954:	20009258 	.word	0x20009258
 8015958:	0802157c 	.word	0x0802157c
 801595c:	080216a8 	.word	0x080216a8
 8015960:	080215c8 	.word	0x080215c8
 8015964:	2000c9b8 	.word	0x2000c9b8
 8015968:	080216d4 	.word	0x080216d4
 801596c:	2000c9bc 	.word	0x2000c9bc
 8015970:	08021700 	.word	0x08021700
 8015974:	2000c9b4 	.word	0x2000c9b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015978:	69fb      	ldr	r3, [r7, #28]
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 8158 	beq.w	8015c30 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015980:	4b95      	ldr	r3, [pc, #596]	@ (8015bd8 <tcp_input+0x724>)
 8015982:	2200      	movs	r2, #0
 8015984:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	891a      	ldrh	r2, [r3, #8]
 801598a:	4b93      	ldr	r3, [pc, #588]	@ (8015bd8 <tcp_input+0x724>)
 801598c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801598e:	4a92      	ldr	r2, [pc, #584]	@ (8015bd8 <tcp_input+0x724>)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015994:	4b91      	ldr	r3, [pc, #580]	@ (8015bdc <tcp_input+0x728>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4a8f      	ldr	r2, [pc, #572]	@ (8015bd8 <tcp_input+0x724>)
 801599a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801599c:	4b90      	ldr	r3, [pc, #576]	@ (8015be0 <tcp_input+0x72c>)
 801599e:	2200      	movs	r2, #0
 80159a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80159a2:	4b90      	ldr	r3, [pc, #576]	@ (8015be4 <tcp_input+0x730>)
 80159a4:	2200      	movs	r2, #0
 80159a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80159a8:	4b8f      	ldr	r3, [pc, #572]	@ (8015be8 <tcp_input+0x734>)
 80159aa:	2200      	movs	r2, #0
 80159ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80159ae:	4b8f      	ldr	r3, [pc, #572]	@ (8015bec <tcp_input+0x738>)
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	f003 0308 	and.w	r3, r3, #8
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d006      	beq.n	80159c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	7b5b      	ldrb	r3, [r3, #13]
 80159be:	f043 0301 	orr.w	r3, r3, #1
 80159c2:	b2da      	uxtb	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d017      	beq.n	8015a00 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80159d0:	69f8      	ldr	r0, [r7, #28]
 80159d2:	f7ff f885 	bl	8014ae0 <tcp_process_refused_data>
 80159d6:	4603      	mov	r3, r0
 80159d8:	f113 0f0d 	cmn.w	r3, #13
 80159dc:	d007      	beq.n	80159ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80159de:	69fb      	ldr	r3, [r7, #28]
 80159e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00c      	beq.n	8015a00 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80159e6:	4b82      	ldr	r3, [pc, #520]	@ (8015bf0 <tcp_input+0x73c>)
 80159e8:	881b      	ldrh	r3, [r3, #0]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d008      	beq.n	8015a00 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	f040 80e3 	bne.w	8015bbe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80159f8:	69f8      	ldr	r0, [r7, #28]
 80159fa:	f003 fdff 	bl	80195fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80159fe:	e0de      	b.n	8015bbe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015a00:	4a7c      	ldr	r2, [pc, #496]	@ (8015bf4 <tcp_input+0x740>)
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015a06:	69f8      	ldr	r0, [r7, #28]
 8015a08:	f000 fb18 	bl	801603c <tcp_process>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a14:	f113 0f0d 	cmn.w	r3, #13
 8015a18:	f000 80d3 	beq.w	8015bc2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015a1c:	4b71      	ldr	r3, [pc, #452]	@ (8015be4 <tcp_input+0x730>)
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	f003 0308 	and.w	r3, r3, #8
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d015      	beq.n	8015a54 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d008      	beq.n	8015a44 <tcp_input+0x590>
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015a38:	69fa      	ldr	r2, [r7, #28]
 8015a3a:	6912      	ldr	r2, [r2, #16]
 8015a3c:	f06f 010d 	mvn.w	r1, #13
 8015a40:	4610      	mov	r0, r2
 8015a42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015a44:	69f9      	ldr	r1, [r7, #28]
 8015a46:	486c      	ldr	r0, [pc, #432]	@ (8015bf8 <tcp_input+0x744>)
 8015a48:	f7ff fbbc 	bl	80151c4 <tcp_pcb_remove>
        tcp_free(pcb);
 8015a4c:	69f8      	ldr	r0, [r7, #28]
 8015a4e:	f7fd ff49 	bl	80138e4 <tcp_free>
 8015a52:	e0da      	b.n	8015c0a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015a54:	2300      	movs	r3, #0
 8015a56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015a58:	4b63      	ldr	r3, [pc, #396]	@ (8015be8 <tcp_input+0x734>)
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d01d      	beq.n	8015a9c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015a60:	4b61      	ldr	r3, [pc, #388]	@ (8015be8 <tcp_input+0x734>)
 8015a62:	881b      	ldrh	r3, [r3, #0]
 8015a64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015a66:	69fb      	ldr	r3, [r7, #28]
 8015a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d00a      	beq.n	8015a86 <tcp_input+0x5d2>
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a76:	69fa      	ldr	r2, [r7, #28]
 8015a78:	6910      	ldr	r0, [r2, #16]
 8015a7a:	89fa      	ldrh	r2, [r7, #14]
 8015a7c:	69f9      	ldr	r1, [r7, #28]
 8015a7e:	4798      	blx	r3
 8015a80:	4603      	mov	r3, r0
 8015a82:	74fb      	strb	r3, [r7, #19]
 8015a84:	e001      	b.n	8015a8a <tcp_input+0x5d6>
 8015a86:	2300      	movs	r3, #0
 8015a88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a8e:	f113 0f0d 	cmn.w	r3, #13
 8015a92:	f000 8098 	beq.w	8015bc6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015a96:	4b54      	ldr	r3, [pc, #336]	@ (8015be8 <tcp_input+0x734>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015a9c:	69f8      	ldr	r0, [r7, #28]
 8015a9e:	f000 f915 	bl	8015ccc <tcp_input_delayed_close>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f040 8090 	bne.w	8015bca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8015be0 <tcp_input+0x72c>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d041      	beq.n	8015b36 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015ab2:	69fb      	ldr	r3, [r7, #28]
 8015ab4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d006      	beq.n	8015ac8 <tcp_input+0x614>
 8015aba:	4b50      	ldr	r3, [pc, #320]	@ (8015bfc <tcp_input+0x748>)
 8015abc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015ac0:	494f      	ldr	r1, [pc, #316]	@ (8015c00 <tcp_input+0x74c>)
 8015ac2:	4850      	ldr	r0, [pc, #320]	@ (8015c04 <tcp_input+0x750>)
 8015ac4:	f007 fd1a 	bl	801d4fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	8b5b      	ldrh	r3, [r3, #26]
 8015acc:	f003 0310 	and.w	r3, r3, #16
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d008      	beq.n	8015ae6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015ad4:	4b42      	ldr	r3, [pc, #264]	@ (8015be0 <tcp_input+0x72c>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f7fd fc57 	bl	801338c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015ade:	69f8      	ldr	r0, [r7, #28]
 8015ae0:	f7fe f9e8 	bl	8013eb4 <tcp_abort>
            goto aborted;
 8015ae4:	e091      	b.n	8015c0a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d00c      	beq.n	8015b0a <tcp_input+0x656>
 8015af0:	69fb      	ldr	r3, [r7, #28]
 8015af2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015af6:	69fb      	ldr	r3, [r7, #28]
 8015af8:	6918      	ldr	r0, [r3, #16]
 8015afa:	4b39      	ldr	r3, [pc, #228]	@ (8015be0 <tcp_input+0x72c>)
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	2300      	movs	r3, #0
 8015b00:	69f9      	ldr	r1, [r7, #28]
 8015b02:	47a0      	blx	r4
 8015b04:	4603      	mov	r3, r0
 8015b06:	74fb      	strb	r3, [r7, #19]
 8015b08:	e008      	b.n	8015b1c <tcp_input+0x668>
 8015b0a:	4b35      	ldr	r3, [pc, #212]	@ (8015be0 <tcp_input+0x72c>)
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	2300      	movs	r3, #0
 8015b10:	69f9      	ldr	r1, [r7, #28]
 8015b12:	2000      	movs	r0, #0
 8015b14:	f7ff f8d8 	bl	8014cc8 <tcp_recv_null>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b20:	f113 0f0d 	cmn.w	r3, #13
 8015b24:	d053      	beq.n	8015bce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d003      	beq.n	8015b36 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8015be0 <tcp_input+0x72c>)
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015b36:	4b2b      	ldr	r3, [pc, #172]	@ (8015be4 <tcp_input+0x730>)
 8015b38:	781b      	ldrb	r3, [r3, #0]
 8015b3a:	f003 0320 	and.w	r3, r3, #32
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d030      	beq.n	8015ba4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d009      	beq.n	8015b5e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b4e:	7b5a      	ldrb	r2, [r3, #13]
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b54:	f042 0220 	orr.w	r2, r2, #32
 8015b58:	b2d2      	uxtb	r2, r2
 8015b5a:	735a      	strb	r2, [r3, #13]
 8015b5c:	e022      	b.n	8015ba4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b62:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015b66:	d005      	beq.n	8015b74 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	b29a      	uxth	r2, r3
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00b      	beq.n	8015b96 <tcp_input+0x6e2>
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	6918      	ldr	r0, [r3, #16]
 8015b88:	2300      	movs	r3, #0
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	69f9      	ldr	r1, [r7, #28]
 8015b8e:	47a0      	blx	r4
 8015b90:	4603      	mov	r3, r0
 8015b92:	74fb      	strb	r3, [r7, #19]
 8015b94:	e001      	b.n	8015b9a <tcp_input+0x6e6>
 8015b96:	2300      	movs	r3, #0
 8015b98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b9e:	f113 0f0d 	cmn.w	r3, #13
 8015ba2:	d016      	beq.n	8015bd2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015ba4:	4b13      	ldr	r3, [pc, #76]	@ (8015bf4 <tcp_input+0x740>)
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015baa:	69f8      	ldr	r0, [r7, #28]
 8015bac:	f000 f88e 	bl	8015ccc <tcp_input_delayed_close>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d128      	bne.n	8015c08 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015bb6:	69f8      	ldr	r0, [r7, #28]
 8015bb8:	f002 ff1a 	bl	80189f0 <tcp_output>
 8015bbc:	e025      	b.n	8015c0a <tcp_input+0x756>
        goto aborted;
 8015bbe:	bf00      	nop
 8015bc0:	e023      	b.n	8015c0a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015bc2:	bf00      	nop
 8015bc4:	e021      	b.n	8015c0a <tcp_input+0x756>
              goto aborted;
 8015bc6:	bf00      	nop
 8015bc8:	e01f      	b.n	8015c0a <tcp_input+0x756>
          goto aborted;
 8015bca:	bf00      	nop
 8015bcc:	e01d      	b.n	8015c0a <tcp_input+0x756>
            goto aborted;
 8015bce:	bf00      	nop
 8015bd0:	e01b      	b.n	8015c0a <tcp_input+0x756>
              goto aborted;
 8015bd2:	bf00      	nop
 8015bd4:	e019      	b.n	8015c0a <tcp_input+0x756>
 8015bd6:	bf00      	nop
 8015bd8:	2000c9c4 	.word	0x2000c9c4
 8015bdc:	2000c9d4 	.word	0x2000c9d4
 8015be0:	2000c9f4 	.word	0x2000c9f4
 8015be4:	2000c9f1 	.word	0x2000c9f1
 8015be8:	2000c9ec 	.word	0x2000c9ec
 8015bec:	2000c9f0 	.word	0x2000c9f0
 8015bf0:	2000c9ee 	.word	0x2000c9ee
 8015bf4:	2000c9f8 	.word	0x2000c9f8
 8015bf8:	2000c9b8 	.word	0x2000c9b8
 8015bfc:	0802157c 	.word	0x0802157c
 8015c00:	08021730 	.word	0x08021730
 8015c04:	080215c8 	.word	0x080215c8
          goto aborted;
 8015c08:	bf00      	nop
    tcp_input_pcb = NULL;
 8015c0a:	4b27      	ldr	r3, [pc, #156]	@ (8015ca8 <tcp_input+0x7f4>)
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015c10:	4b26      	ldr	r3, [pc, #152]	@ (8015cac <tcp_input+0x7f8>)
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015c16:	4b26      	ldr	r3, [pc, #152]	@ (8015cb0 <tcp_input+0x7fc>)
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d03f      	beq.n	8015c9e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015c1e:	4b24      	ldr	r3, [pc, #144]	@ (8015cb0 <tcp_input+0x7fc>)
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fd fbb2 	bl	801338c <pbuf_free>
      inseg.p = NULL;
 8015c28:	4b21      	ldr	r3, [pc, #132]	@ (8015cb0 <tcp_input+0x7fc>)
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015c2e:	e036      	b.n	8015c9e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015c30:	4b20      	ldr	r3, [pc, #128]	@ (8015cb4 <tcp_input+0x800>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	899b      	ldrh	r3, [r3, #12]
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7fb ffe7 	bl	8011c0c <lwip_htons>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	f003 0304 	and.w	r3, r3, #4
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d118      	bne.n	8015c7c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8015cb8 <tcp_input+0x804>)
 8015c4c:	6819      	ldr	r1, [r3, #0]
 8015c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015cbc <tcp_input+0x808>)
 8015c50:	881b      	ldrh	r3, [r3, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	4b1a      	ldr	r3, [pc, #104]	@ (8015cc0 <tcp_input+0x80c>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c5a:	4b16      	ldr	r3, [pc, #88]	@ (8015cb4 <tcp_input+0x800>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c5e:	885b      	ldrh	r3, [r3, #2]
 8015c60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c62:	4a14      	ldr	r2, [pc, #80]	@ (8015cb4 <tcp_input+0x800>)
 8015c64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c66:	8812      	ldrh	r2, [r2, #0]
 8015c68:	b292      	uxth	r2, r2
 8015c6a:	9202      	str	r2, [sp, #8]
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	4b15      	ldr	r3, [pc, #84]	@ (8015cc4 <tcp_input+0x810>)
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	4b15      	ldr	r3, [pc, #84]	@ (8015cc8 <tcp_input+0x814>)
 8015c74:	4602      	mov	r2, r0
 8015c76:	2000      	movs	r0, #0
 8015c78:	f003 fc6e 	bl	8019558 <tcp_rst>
    pbuf_free(p);
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7fd fb85 	bl	801338c <pbuf_free>
  return;
 8015c82:	e00c      	b.n	8015c9e <tcp_input+0x7ea>
    goto dropped;
 8015c84:	bf00      	nop
 8015c86:	e006      	b.n	8015c96 <tcp_input+0x7e2>
    goto dropped;
 8015c88:	bf00      	nop
 8015c8a:	e004      	b.n	8015c96 <tcp_input+0x7e2>
    goto dropped;
 8015c8c:	bf00      	nop
 8015c8e:	e002      	b.n	8015c96 <tcp_input+0x7e2>
      goto dropped;
 8015c90:	bf00      	nop
 8015c92:	e000      	b.n	8015c96 <tcp_input+0x7e2>
      goto dropped;
 8015c94:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7fd fb78 	bl	801338c <pbuf_free>
 8015c9c:	e000      	b.n	8015ca0 <tcp_input+0x7ec>
  return;
 8015c9e:	bf00      	nop
}
 8015ca0:	3724      	adds	r7, #36	@ 0x24
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd90      	pop	{r4, r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	2000c9f8 	.word	0x2000c9f8
 8015cac:	2000c9f4 	.word	0x2000c9f4
 8015cb0:	2000c9c4 	.word	0x2000c9c4
 8015cb4:	2000c9d4 	.word	0x2000c9d4
 8015cb8:	2000c9e8 	.word	0x2000c9e8
 8015cbc:	2000c9ee 	.word	0x2000c9ee
 8015cc0:	2000c9e4 	.word	0x2000c9e4
 8015cc4:	20009268 	.word	0x20009268
 8015cc8:	2000926c 	.word	0x2000926c

08015ccc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d106      	bne.n	8015ce8 <tcp_input_delayed_close+0x1c>
 8015cda:	4b17      	ldr	r3, [pc, #92]	@ (8015d38 <tcp_input_delayed_close+0x6c>)
 8015cdc:	f240 225a 	movw	r2, #602	@ 0x25a
 8015ce0:	4916      	ldr	r1, [pc, #88]	@ (8015d3c <tcp_input_delayed_close+0x70>)
 8015ce2:	4817      	ldr	r0, [pc, #92]	@ (8015d40 <tcp_input_delayed_close+0x74>)
 8015ce4:	f007 fc0a 	bl	801d4fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015ce8:	4b16      	ldr	r3, [pc, #88]	@ (8015d44 <tcp_input_delayed_close+0x78>)
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	f003 0310 	and.w	r3, r3, #16
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d01c      	beq.n	8015d2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	8b5b      	ldrh	r3, [r3, #26]
 8015cf8:	f003 0310 	and.w	r3, r3, #16
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10d      	bne.n	8015d1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d008      	beq.n	8015d1c <tcp_input_delayed_close+0x50>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	6912      	ldr	r2, [r2, #16]
 8015d14:	f06f 010e 	mvn.w	r1, #14
 8015d18:	4610      	mov	r0, r2
 8015d1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015d1c:	6879      	ldr	r1, [r7, #4]
 8015d1e:	480a      	ldr	r0, [pc, #40]	@ (8015d48 <tcp_input_delayed_close+0x7c>)
 8015d20:	f7ff fa50 	bl	80151c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f7fd fddd 	bl	80138e4 <tcp_free>
    return 1;
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	e000      	b.n	8015d30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015d2e:	2300      	movs	r3, #0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	0802157c 	.word	0x0802157c
 8015d3c:	0802174c 	.word	0x0802174c
 8015d40:	080215c8 	.word	0x080215c8
 8015d44:	2000c9f1 	.word	0x2000c9f1
 8015d48:	2000c9b8 	.word	0x2000c9b8

08015d4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015d4c:	b590      	push	{r4, r7, lr}
 8015d4e:	b08b      	sub	sp, #44	@ 0x2c
 8015d50:	af04      	add	r7, sp, #16
 8015d52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015d54:	4b6f      	ldr	r3, [pc, #444]	@ (8015f14 <tcp_listen_input+0x1c8>)
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f003 0304 	and.w	r3, r3, #4
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f040 80d2 	bne.w	8015f06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d106      	bne.n	8015d76 <tcp_listen_input+0x2a>
 8015d68:	4b6b      	ldr	r3, [pc, #428]	@ (8015f18 <tcp_listen_input+0x1cc>)
 8015d6a:	f240 2281 	movw	r2, #641	@ 0x281
 8015d6e:	496b      	ldr	r1, [pc, #428]	@ (8015f1c <tcp_listen_input+0x1d0>)
 8015d70:	486b      	ldr	r0, [pc, #428]	@ (8015f20 <tcp_listen_input+0x1d4>)
 8015d72:	f007 fbc3 	bl	801d4fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015d76:	4b67      	ldr	r3, [pc, #412]	@ (8015f14 <tcp_listen_input+0x1c8>)
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	f003 0310 	and.w	r3, r3, #16
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d019      	beq.n	8015db6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d82:	4b68      	ldr	r3, [pc, #416]	@ (8015f24 <tcp_listen_input+0x1d8>)
 8015d84:	6819      	ldr	r1, [r3, #0]
 8015d86:	4b68      	ldr	r3, [pc, #416]	@ (8015f28 <tcp_listen_input+0x1dc>)
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	4b67      	ldr	r3, [pc, #412]	@ (8015f2c <tcp_listen_input+0x1e0>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d92:	4b67      	ldr	r3, [pc, #412]	@ (8015f30 <tcp_listen_input+0x1e4>)
 8015d94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d96:	885b      	ldrh	r3, [r3, #2]
 8015d98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d9a:	4a65      	ldr	r2, [pc, #404]	@ (8015f30 <tcp_listen_input+0x1e4>)
 8015d9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d9e:	8812      	ldrh	r2, [r2, #0]
 8015da0:	b292      	uxth	r2, r2
 8015da2:	9202      	str	r2, [sp, #8]
 8015da4:	9301      	str	r3, [sp, #4]
 8015da6:	4b63      	ldr	r3, [pc, #396]	@ (8015f34 <tcp_listen_input+0x1e8>)
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	4b63      	ldr	r3, [pc, #396]	@ (8015f38 <tcp_listen_input+0x1ec>)
 8015dac:	4602      	mov	r2, r0
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f003 fbd2 	bl	8019558 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015db4:	e0a9      	b.n	8015f0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015db6:	4b57      	ldr	r3, [pc, #348]	@ (8015f14 <tcp_listen_input+0x1c8>)
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	f003 0302 	and.w	r3, r3, #2
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f000 80a3 	beq.w	8015f0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	7d5b      	ldrb	r3, [r3, #21]
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7ff f8a1 	bl	8014f10 <tcp_alloc>
 8015dce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d111      	bne.n	8015dfa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	699b      	ldr	r3, [r3, #24]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00a      	beq.n	8015df4 <tcp_listen_input+0xa8>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	699b      	ldr	r3, [r3, #24]
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	6910      	ldr	r0, [r2, #16]
 8015de6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dea:	2100      	movs	r1, #0
 8015dec:	4798      	blx	r3
 8015dee:	4603      	mov	r3, r0
 8015df0:	73bb      	strb	r3, [r7, #14]
      return;
 8015df2:	e08b      	b.n	8015f0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015df4:	23f0      	movs	r3, #240	@ 0xf0
 8015df6:	73bb      	strb	r3, [r7, #14]
      return;
 8015df8:	e088      	b.n	8015f0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015dfa:	4b50      	ldr	r3, [pc, #320]	@ (8015f3c <tcp_listen_input+0x1f0>)
 8015dfc:	695a      	ldr	r2, [r3, #20]
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015e02:	4b4e      	ldr	r3, [pc, #312]	@ (8015f3c <tcp_listen_input+0x1f0>)
 8015e04:	691a      	ldr	r2, [r3, #16]
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	8ada      	ldrh	r2, [r3, #22]
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015e12:	4b47      	ldr	r3, [pc, #284]	@ (8015f30 <tcp_listen_input+0x1e4>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	881b      	ldrh	r3, [r3, #0]
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	697b      	ldr	r3, [r7, #20]
 8015e1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	2203      	movs	r2, #3
 8015e22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015e24:	4b41      	ldr	r3, [pc, #260]	@ (8015f2c <tcp_listen_input+0x1e0>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8015e36:	6978      	ldr	r0, [r7, #20]
 8015e38:	f7ff fa58 	bl	80152ec <tcp_next_iss>
 8015e3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	693a      	ldr	r2, [r7, #16]
 8015e42:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	693a      	ldr	r2, [r7, #16]
 8015e48:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	693a      	ldr	r2, [r7, #16]
 8015e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	693a      	ldr	r2, [r7, #16]
 8015e54:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015e56:	4b35      	ldr	r3, [pc, #212]	@ (8015f2c <tcp_listen_input+0x1e0>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	1e5a      	subs	r2, r3, #1
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	691a      	ldr	r2, [r3, #16]
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	687a      	ldr	r2, [r7, #4]
 8015e6c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	7a5b      	ldrb	r3, [r3, #9]
 8015e72:	f003 030c 	and.w	r3, r3, #12
 8015e76:	b2da      	uxtb	r2, r3
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	7a1a      	ldrb	r2, [r3, #8]
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015e84:	4b2e      	ldr	r3, [pc, #184]	@ (8015f40 <tcp_listen_input+0x1f4>)
 8015e86:	681a      	ldr	r2, [r3, #0]
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	60da      	str	r2, [r3, #12]
 8015e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8015f40 <tcp_listen_input+0x1f4>)
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	6013      	str	r3, [r2, #0]
 8015e92:	f003 fd23 	bl	80198dc <tcp_timer_needed>
 8015e96:	4b2b      	ldr	r3, [pc, #172]	@ (8015f44 <tcp_listen_input+0x1f8>)
 8015e98:	2201      	movs	r2, #1
 8015e9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015e9c:	6978      	ldr	r0, [r7, #20]
 8015e9e:	f001 fd8b 	bl	80179b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015ea2:	4b23      	ldr	r3, [pc, #140]	@ (8015f30 <tcp_listen_input+0x1e4>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	89db      	ldrh	r3, [r3, #14]
 8015ea8:	b29a      	uxth	r2, r3
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015eb6:	697b      	ldr	r3, [r7, #20]
 8015eb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	3304      	adds	r3, #4
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f005 f8e5 	bl	801b094 <ip4_route>
 8015eca:	4601      	mov	r1, r0
 8015ecc:	697b      	ldr	r3, [r7, #20]
 8015ece:	3304      	adds	r3, #4
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f7ff fa30 	bl	8015338 <tcp_eff_send_mss_netif>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	461a      	mov	r2, r3
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015ee0:	2112      	movs	r1, #18
 8015ee2:	6978      	ldr	r0, [r7, #20]
 8015ee4:	f002 fc96 	bl	8018814 <tcp_enqueue_flags>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d004      	beq.n	8015efe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	6978      	ldr	r0, [r7, #20]
 8015ef8:	f7fd ff1e 	bl	8013d38 <tcp_abandon>
      return;
 8015efc:	e006      	b.n	8015f0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015efe:	6978      	ldr	r0, [r7, #20]
 8015f00:	f002 fd76 	bl	80189f0 <tcp_output>
  return;
 8015f04:	e001      	b.n	8015f0a <tcp_listen_input+0x1be>
    return;
 8015f06:	bf00      	nop
 8015f08:	e000      	b.n	8015f0c <tcp_listen_input+0x1c0>
  return;
 8015f0a:	bf00      	nop
}
 8015f0c:	371c      	adds	r7, #28
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd90      	pop	{r4, r7, pc}
 8015f12:	bf00      	nop
 8015f14:	2000c9f0 	.word	0x2000c9f0
 8015f18:	0802157c 	.word	0x0802157c
 8015f1c:	08021774 	.word	0x08021774
 8015f20:	080215c8 	.word	0x080215c8
 8015f24:	2000c9e8 	.word	0x2000c9e8
 8015f28:	2000c9ee 	.word	0x2000c9ee
 8015f2c:	2000c9e4 	.word	0x2000c9e4
 8015f30:	2000c9d4 	.word	0x2000c9d4
 8015f34:	20009268 	.word	0x20009268
 8015f38:	2000926c 	.word	0x2000926c
 8015f3c:	20009258 	.word	0x20009258
 8015f40:	2000c9b8 	.word	0x2000c9b8
 8015f44:	2000c9c0 	.word	0x2000c9c0

08015f48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b086      	sub	sp, #24
 8015f4c:	af04      	add	r7, sp, #16
 8015f4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015f50:	4b2f      	ldr	r3, [pc, #188]	@ (8016010 <tcp_timewait_input+0xc8>)
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	f003 0304 	and.w	r3, r3, #4
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d153      	bne.n	8016004 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d106      	bne.n	8015f70 <tcp_timewait_input+0x28>
 8015f62:	4b2c      	ldr	r3, [pc, #176]	@ (8016014 <tcp_timewait_input+0xcc>)
 8015f64:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015f68:	492b      	ldr	r1, [pc, #172]	@ (8016018 <tcp_timewait_input+0xd0>)
 8015f6a:	482c      	ldr	r0, [pc, #176]	@ (801601c <tcp_timewait_input+0xd4>)
 8015f6c:	f007 fac6 	bl	801d4fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015f70:	4b27      	ldr	r3, [pc, #156]	@ (8016010 <tcp_timewait_input+0xc8>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	f003 0302 	and.w	r3, r3, #2
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d02a      	beq.n	8015fd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015f7c:	4b28      	ldr	r3, [pc, #160]	@ (8016020 <tcp_timewait_input+0xd8>)
 8015f7e:	681a      	ldr	r2, [r3, #0]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f84:	1ad3      	subs	r3, r2, r3
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	db2d      	blt.n	8015fe6 <tcp_timewait_input+0x9e>
 8015f8a:	4b25      	ldr	r3, [pc, #148]	@ (8016020 <tcp_timewait_input+0xd8>)
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f92:	6879      	ldr	r1, [r7, #4]
 8015f94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015f96:	440b      	add	r3, r1
 8015f98:	1ad3      	subs	r3, r2, r3
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	dc23      	bgt.n	8015fe6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015f9e:	4b21      	ldr	r3, [pc, #132]	@ (8016024 <tcp_timewait_input+0xdc>)
 8015fa0:	6819      	ldr	r1, [r3, #0]
 8015fa2:	4b21      	ldr	r3, [pc, #132]	@ (8016028 <tcp_timewait_input+0xe0>)
 8015fa4:	881b      	ldrh	r3, [r3, #0]
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8016020 <tcp_timewait_input+0xd8>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fae:	4b1f      	ldr	r3, [pc, #124]	@ (801602c <tcp_timewait_input+0xe4>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fb2:	885b      	ldrh	r3, [r3, #2]
 8015fb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fb6:	4a1d      	ldr	r2, [pc, #116]	@ (801602c <tcp_timewait_input+0xe4>)
 8015fb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fba:	8812      	ldrh	r2, [r2, #0]
 8015fbc:	b292      	uxth	r2, r2
 8015fbe:	9202      	str	r2, [sp, #8]
 8015fc0:	9301      	str	r3, [sp, #4]
 8015fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8016030 <tcp_timewait_input+0xe8>)
 8015fc4:	9300      	str	r3, [sp, #0]
 8015fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8016034 <tcp_timewait_input+0xec>)
 8015fc8:	4602      	mov	r2, r0
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f003 fac4 	bl	8019558 <tcp_rst>
      return;
 8015fd0:	e01b      	b.n	801600a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8016010 <tcp_timewait_input+0xc8>)
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	f003 0301 	and.w	r3, r3, #1
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d003      	beq.n	8015fe6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015fde:	4b16      	ldr	r3, [pc, #88]	@ (8016038 <tcp_timewait_input+0xf0>)
 8015fe0:	681a      	ldr	r2, [r3, #0]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015fe6:	4b10      	ldr	r3, [pc, #64]	@ (8016028 <tcp_timewait_input+0xe0>)
 8015fe8:	881b      	ldrh	r3, [r3, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d00c      	beq.n	8016008 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	8b5b      	ldrh	r3, [r3, #26]
 8015ff2:	f043 0302 	orr.w	r3, r3, #2
 8015ff6:	b29a      	uxth	r2, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f002 fcf7 	bl	80189f0 <tcp_output>
  }
  return;
 8016002:	e001      	b.n	8016008 <tcp_timewait_input+0xc0>
    return;
 8016004:	bf00      	nop
 8016006:	e000      	b.n	801600a <tcp_timewait_input+0xc2>
  return;
 8016008:	bf00      	nop
}
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	2000c9f0 	.word	0x2000c9f0
 8016014:	0802157c 	.word	0x0802157c
 8016018:	08021794 	.word	0x08021794
 801601c:	080215c8 	.word	0x080215c8
 8016020:	2000c9e4 	.word	0x2000c9e4
 8016024:	2000c9e8 	.word	0x2000c9e8
 8016028:	2000c9ee 	.word	0x2000c9ee
 801602c:	2000c9d4 	.word	0x2000c9d4
 8016030:	20009268 	.word	0x20009268
 8016034:	2000926c 	.word	0x2000926c
 8016038:	2000c9ac 	.word	0x2000c9ac

0801603c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801603c:	b590      	push	{r4, r7, lr}
 801603e:	b08d      	sub	sp, #52	@ 0x34
 8016040:	af04      	add	r7, sp, #16
 8016042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016044:	2300      	movs	r3, #0
 8016046:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016048:	2300      	movs	r3, #0
 801604a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d106      	bne.n	8016060 <tcp_process+0x24>
 8016052:	4b9d      	ldr	r3, [pc, #628]	@ (80162c8 <tcp_process+0x28c>)
 8016054:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016058:	499c      	ldr	r1, [pc, #624]	@ (80162cc <tcp_process+0x290>)
 801605a:	489d      	ldr	r0, [pc, #628]	@ (80162d0 <tcp_process+0x294>)
 801605c:	f007 fa4e 	bl	801d4fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016060:	4b9c      	ldr	r3, [pc, #624]	@ (80162d4 <tcp_process+0x298>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	f003 0304 	and.w	r3, r3, #4
 8016068:	2b00      	cmp	r3, #0
 801606a:	d04e      	beq.n	801610a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	7d1b      	ldrb	r3, [r3, #20]
 8016070:	2b02      	cmp	r3, #2
 8016072:	d108      	bne.n	8016086 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016078:	4b97      	ldr	r3, [pc, #604]	@ (80162d8 <tcp_process+0x29c>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	429a      	cmp	r2, r3
 801607e:	d123      	bne.n	80160c8 <tcp_process+0x8c>
        acceptable = 1;
 8016080:	2301      	movs	r3, #1
 8016082:	76fb      	strb	r3, [r7, #27]
 8016084:	e020      	b.n	80160c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801608a:	4b94      	ldr	r3, [pc, #592]	@ (80162dc <tcp_process+0x2a0>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	429a      	cmp	r2, r3
 8016090:	d102      	bne.n	8016098 <tcp_process+0x5c>
        acceptable = 1;
 8016092:	2301      	movs	r3, #1
 8016094:	76fb      	strb	r3, [r7, #27]
 8016096:	e017      	b.n	80160c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016098:	4b90      	ldr	r3, [pc, #576]	@ (80162dc <tcp_process+0x2a0>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	db10      	blt.n	80160c8 <tcp_process+0x8c>
 80160a6:	4b8d      	ldr	r3, [pc, #564]	@ (80162dc <tcp_process+0x2a0>)
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ae:	6879      	ldr	r1, [r7, #4]
 80160b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80160b2:	440b      	add	r3, r1
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	dc06      	bgt.n	80160c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	8b5b      	ldrh	r3, [r3, #26]
 80160be:	f043 0302 	orr.w	r3, r3, #2
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80160c8:	7efb      	ldrb	r3, [r7, #27]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d01b      	beq.n	8016106 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	7d1b      	ldrb	r3, [r3, #20]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d106      	bne.n	80160e4 <tcp_process+0xa8>
 80160d6:	4b7c      	ldr	r3, [pc, #496]	@ (80162c8 <tcp_process+0x28c>)
 80160d8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80160dc:	4980      	ldr	r1, [pc, #512]	@ (80162e0 <tcp_process+0x2a4>)
 80160de:	487c      	ldr	r0, [pc, #496]	@ (80162d0 <tcp_process+0x294>)
 80160e0:	f007 fa0c 	bl	801d4fc <iprintf>
      recv_flags |= TF_RESET;
 80160e4:	4b7f      	ldr	r3, [pc, #508]	@ (80162e4 <tcp_process+0x2a8>)
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	f043 0308 	orr.w	r3, r3, #8
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	4b7d      	ldr	r3, [pc, #500]	@ (80162e4 <tcp_process+0x2a8>)
 80160f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	8b5b      	ldrh	r3, [r3, #26]
 80160f6:	f023 0301 	bic.w	r3, r3, #1
 80160fa:	b29a      	uxth	r2, r3
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016100:	f06f 030d 	mvn.w	r3, #13
 8016104:	e37a      	b.n	80167fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016106:	2300      	movs	r3, #0
 8016108:	e378      	b.n	80167fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801610a:	4b72      	ldr	r3, [pc, #456]	@ (80162d4 <tcp_process+0x298>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	f003 0302 	and.w	r3, r3, #2
 8016112:	2b00      	cmp	r3, #0
 8016114:	d010      	beq.n	8016138 <tcp_process+0xfc>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	7d1b      	ldrb	r3, [r3, #20]
 801611a:	2b02      	cmp	r3, #2
 801611c:	d00c      	beq.n	8016138 <tcp_process+0xfc>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	7d1b      	ldrb	r3, [r3, #20]
 8016122:	2b03      	cmp	r3, #3
 8016124:	d008      	beq.n	8016138 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	8b5b      	ldrh	r3, [r3, #26]
 801612a:	f043 0302 	orr.w	r3, r3, #2
 801612e:	b29a      	uxth	r2, r3
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016134:	2300      	movs	r3, #0
 8016136:	e361      	b.n	80167fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	8b5b      	ldrh	r3, [r3, #26]
 801613c:	f003 0310 	and.w	r3, r3, #16
 8016140:	2b00      	cmp	r3, #0
 8016142:	d103      	bne.n	801614c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016144:	4b68      	ldr	r3, [pc, #416]	@ (80162e8 <tcp_process+0x2ac>)
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2200      	movs	r2, #0
 8016150:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2200      	movs	r2, #0
 8016158:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f001 fc2b 	bl	80179b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	7d1b      	ldrb	r3, [r3, #20]
 8016166:	3b02      	subs	r3, #2
 8016168:	2b07      	cmp	r3, #7
 801616a:	f200 8337 	bhi.w	80167dc <tcp_process+0x7a0>
 801616e:	a201      	add	r2, pc, #4	@ (adr r2, 8016174 <tcp_process+0x138>)
 8016170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016174:	08016195 	.word	0x08016195
 8016178:	080163c5 	.word	0x080163c5
 801617c:	0801653d 	.word	0x0801653d
 8016180:	08016567 	.word	0x08016567
 8016184:	0801668b 	.word	0x0801668b
 8016188:	0801653d 	.word	0x0801653d
 801618c:	08016717 	.word	0x08016717
 8016190:	080167a7 	.word	0x080167a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016194:	4b4f      	ldr	r3, [pc, #316]	@ (80162d4 <tcp_process+0x298>)
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	f003 0310 	and.w	r3, r3, #16
 801619c:	2b00      	cmp	r3, #0
 801619e:	f000 80e4 	beq.w	801636a <tcp_process+0x32e>
 80161a2:	4b4c      	ldr	r3, [pc, #304]	@ (80162d4 <tcp_process+0x298>)
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	f003 0302 	and.w	r3, r3, #2
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	f000 80dd 	beq.w	801636a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161b4:	1c5a      	adds	r2, r3, #1
 80161b6:	4b48      	ldr	r3, [pc, #288]	@ (80162d8 <tcp_process+0x29c>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	f040 80d5 	bne.w	801636a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80161c0:	4b46      	ldr	r3, [pc, #280]	@ (80162dc <tcp_process+0x2a0>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	1c5a      	adds	r2, r3, #1
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80161d2:	4b41      	ldr	r3, [pc, #260]	@ (80162d8 <tcp_process+0x29c>)
 80161d4:	681a      	ldr	r2, [r3, #0]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80161da:	4b44      	ldr	r3, [pc, #272]	@ (80162ec <tcp_process+0x2b0>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	89db      	ldrh	r3, [r3, #14]
 80161e0:	b29a      	uxth	r2, r3
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80161f4:	4b39      	ldr	r3, [pc, #228]	@ (80162dc <tcp_process+0x2a0>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	1e5a      	subs	r2, r3, #1
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2204      	movs	r2, #4
 8016202:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3304      	adds	r3, #4
 801620c:	4618      	mov	r0, r3
 801620e:	f004 ff41 	bl	801b094 <ip4_route>
 8016212:	4601      	mov	r1, r0
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	3304      	adds	r3, #4
 8016218:	461a      	mov	r2, r3
 801621a:	4620      	mov	r0, r4
 801621c:	f7ff f88c 	bl	8015338 <tcp_eff_send_mss_netif>
 8016220:	4603      	mov	r3, r0
 8016222:	461a      	mov	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801622c:	009a      	lsls	r2, r3, #2
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016232:	005b      	lsls	r3, r3, #1
 8016234:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016238:	428b      	cmp	r3, r1
 801623a:	bf38      	it	cc
 801623c:	460b      	movcc	r3, r1
 801623e:	429a      	cmp	r2, r3
 8016240:	d204      	bcs.n	801624c <tcp_process+0x210>
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	b29b      	uxth	r3, r3
 801624a:	e00d      	b.n	8016268 <tcp_process+0x22c>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016250:	005b      	lsls	r3, r3, #1
 8016252:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016256:	4293      	cmp	r3, r2
 8016258:	d904      	bls.n	8016264 <tcp_process+0x228>
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801625e:	005b      	lsls	r3, r3, #1
 8016260:	b29b      	uxth	r3, r3
 8016262:	e001      	b.n	8016268 <tcp_process+0x22c>
 8016264:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016268:	687a      	ldr	r2, [r7, #4]
 801626a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016274:	2b00      	cmp	r3, #0
 8016276:	d106      	bne.n	8016286 <tcp_process+0x24a>
 8016278:	4b13      	ldr	r3, [pc, #76]	@ (80162c8 <tcp_process+0x28c>)
 801627a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801627e:	491c      	ldr	r1, [pc, #112]	@ (80162f0 <tcp_process+0x2b4>)
 8016280:	4813      	ldr	r0, [pc, #76]	@ (80162d0 <tcp_process+0x294>)
 8016282:	f007 f93b 	bl	801d4fc <iprintf>
        --pcb->snd_queuelen;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801628c:	3b01      	subs	r3, #1
 801628e:	b29a      	uxth	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801629a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d12a      	bne.n	80162f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d106      	bne.n	80162bc <tcp_process+0x280>
 80162ae:	4b06      	ldr	r3, [pc, #24]	@ (80162c8 <tcp_process+0x28c>)
 80162b0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80162b4:	490f      	ldr	r1, [pc, #60]	@ (80162f4 <tcp_process+0x2b8>)
 80162b6:	4806      	ldr	r0, [pc, #24]	@ (80162d0 <tcp_process+0x294>)
 80162b8:	f007 f920 	bl	801d4fc <iprintf>
          pcb->unsent = rseg->next;
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80162c4:	e01c      	b.n	8016300 <tcp_process+0x2c4>
 80162c6:	bf00      	nop
 80162c8:	0802157c 	.word	0x0802157c
 80162cc:	080217b4 	.word	0x080217b4
 80162d0:	080215c8 	.word	0x080215c8
 80162d4:	2000c9f0 	.word	0x2000c9f0
 80162d8:	2000c9e8 	.word	0x2000c9e8
 80162dc:	2000c9e4 	.word	0x2000c9e4
 80162e0:	080217d0 	.word	0x080217d0
 80162e4:	2000c9f1 	.word	0x2000c9f1
 80162e8:	2000c9ac 	.word	0x2000c9ac
 80162ec:	2000c9d4 	.word	0x2000c9d4
 80162f0:	080217f0 	.word	0x080217f0
 80162f4:	08021808 	.word	0x08021808
        } else {
          pcb->unacked = rseg->next;
 80162f8:	69fb      	ldr	r3, [r7, #28]
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016300:	69f8      	ldr	r0, [r7, #28]
 8016302:	f7fe fc7e 	bl	8014c02 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801630a:	2b00      	cmp	r3, #0
 801630c:	d104      	bne.n	8016318 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016314:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016316:	e006      	b.n	8016326 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2200      	movs	r2, #0
 801631c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2200      	movs	r2, #0
 8016322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801632c:	2b00      	cmp	r3, #0
 801632e:	d00a      	beq.n	8016346 <tcp_process+0x30a>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	6910      	ldr	r0, [r2, #16]
 801633a:	2200      	movs	r2, #0
 801633c:	6879      	ldr	r1, [r7, #4]
 801633e:	4798      	blx	r3
 8016340:	4603      	mov	r3, r0
 8016342:	76bb      	strb	r3, [r7, #26]
 8016344:	e001      	b.n	801634a <tcp_process+0x30e>
 8016346:	2300      	movs	r3, #0
 8016348:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801634a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801634e:	f113 0f0d 	cmn.w	r3, #13
 8016352:	d102      	bne.n	801635a <tcp_process+0x31e>
          return ERR_ABRT;
 8016354:	f06f 030c 	mvn.w	r3, #12
 8016358:	e250      	b.n	80167fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	8b5b      	ldrh	r3, [r3, #26]
 801635e:	f043 0302 	orr.w	r3, r3, #2
 8016362:	b29a      	uxth	r2, r3
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016368:	e23a      	b.n	80167e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801636a:	4b98      	ldr	r3, [pc, #608]	@ (80165cc <tcp_process+0x590>)
 801636c:	781b      	ldrb	r3, [r3, #0]
 801636e:	f003 0310 	and.w	r3, r3, #16
 8016372:	2b00      	cmp	r3, #0
 8016374:	f000 8234 	beq.w	80167e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016378:	4b95      	ldr	r3, [pc, #596]	@ (80165d0 <tcp_process+0x594>)
 801637a:	6819      	ldr	r1, [r3, #0]
 801637c:	4b95      	ldr	r3, [pc, #596]	@ (80165d4 <tcp_process+0x598>)
 801637e:	881b      	ldrh	r3, [r3, #0]
 8016380:	461a      	mov	r2, r3
 8016382:	4b95      	ldr	r3, [pc, #596]	@ (80165d8 <tcp_process+0x59c>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016388:	4b94      	ldr	r3, [pc, #592]	@ (80165dc <tcp_process+0x5a0>)
 801638a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801638c:	885b      	ldrh	r3, [r3, #2]
 801638e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016390:	4a92      	ldr	r2, [pc, #584]	@ (80165dc <tcp_process+0x5a0>)
 8016392:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016394:	8812      	ldrh	r2, [r2, #0]
 8016396:	b292      	uxth	r2, r2
 8016398:	9202      	str	r2, [sp, #8]
 801639a:	9301      	str	r3, [sp, #4]
 801639c:	4b90      	ldr	r3, [pc, #576]	@ (80165e0 <tcp_process+0x5a4>)
 801639e:	9300      	str	r3, [sp, #0]
 80163a0:	4b90      	ldr	r3, [pc, #576]	@ (80165e4 <tcp_process+0x5a8>)
 80163a2:	4602      	mov	r2, r0
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f003 f8d7 	bl	8019558 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80163b0:	2b05      	cmp	r3, #5
 80163b2:	f200 8215 	bhi.w	80167e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2200      	movs	r2, #0
 80163ba:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f002 fea3 	bl	8019108 <tcp_rexmit_rto>
      break;
 80163c2:	e20d      	b.n	80167e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80163c4:	4b81      	ldr	r3, [pc, #516]	@ (80165cc <tcp_process+0x590>)
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	f003 0310 	and.w	r3, r3, #16
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	f000 80a1 	beq.w	8016514 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80163d2:	4b7f      	ldr	r3, [pc, #508]	@ (80165d0 <tcp_process+0x594>)
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163da:	1ad3      	subs	r3, r2, r3
 80163dc:	3b01      	subs	r3, #1
 80163de:	2b00      	cmp	r3, #0
 80163e0:	db7e      	blt.n	80164e0 <tcp_process+0x4a4>
 80163e2:	4b7b      	ldr	r3, [pc, #492]	@ (80165d0 <tcp_process+0x594>)
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80163ea:	1ad3      	subs	r3, r2, r3
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	dc77      	bgt.n	80164e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2204      	movs	r2, #4
 80163f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d102      	bne.n	8016404 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80163fe:	23fa      	movs	r3, #250	@ 0xfa
 8016400:	76bb      	strb	r3, [r7, #26]
 8016402:	e01d      	b.n	8016440 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016408:	699b      	ldr	r3, [r3, #24]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d106      	bne.n	801641c <tcp_process+0x3e0>
 801640e:	4b76      	ldr	r3, [pc, #472]	@ (80165e8 <tcp_process+0x5ac>)
 8016410:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016414:	4975      	ldr	r1, [pc, #468]	@ (80165ec <tcp_process+0x5b0>)
 8016416:	4876      	ldr	r0, [pc, #472]	@ (80165f0 <tcp_process+0x5b4>)
 8016418:	f007 f870 	bl	801d4fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016420:	699b      	ldr	r3, [r3, #24]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00a      	beq.n	801643c <tcp_process+0x400>
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801642a:	699b      	ldr	r3, [r3, #24]
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	6910      	ldr	r0, [r2, #16]
 8016430:	2200      	movs	r2, #0
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	4798      	blx	r3
 8016436:	4603      	mov	r3, r0
 8016438:	76bb      	strb	r3, [r7, #26]
 801643a:	e001      	b.n	8016440 <tcp_process+0x404>
 801643c:	23f0      	movs	r3, #240	@ 0xf0
 801643e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016440:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d00a      	beq.n	801645e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016448:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801644c:	f113 0f0d 	cmn.w	r3, #13
 8016450:	d002      	beq.n	8016458 <tcp_process+0x41c>
              tcp_abort(pcb);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f7fd fd2e 	bl	8013eb4 <tcp_abort>
            }
            return ERR_ABRT;
 8016458:	f06f 030c 	mvn.w	r3, #12
 801645c:	e1ce      	b.n	80167fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 fae0 	bl	8016a24 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016464:	4b63      	ldr	r3, [pc, #396]	@ (80165f4 <tcp_process+0x5b8>)
 8016466:	881b      	ldrh	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d005      	beq.n	8016478 <tcp_process+0x43c>
            recv_acked--;
 801646c:	4b61      	ldr	r3, [pc, #388]	@ (80165f4 <tcp_process+0x5b8>)
 801646e:	881b      	ldrh	r3, [r3, #0]
 8016470:	3b01      	subs	r3, #1
 8016472:	b29a      	uxth	r2, r3
 8016474:	4b5f      	ldr	r3, [pc, #380]	@ (80165f4 <tcp_process+0x5b8>)
 8016476:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801647c:	009a      	lsls	r2, r3, #2
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016482:	005b      	lsls	r3, r3, #1
 8016484:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016488:	428b      	cmp	r3, r1
 801648a:	bf38      	it	cc
 801648c:	460b      	movcc	r3, r1
 801648e:	429a      	cmp	r2, r3
 8016490:	d204      	bcs.n	801649c <tcp_process+0x460>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016496:	009b      	lsls	r3, r3, #2
 8016498:	b29b      	uxth	r3, r3
 801649a:	e00d      	b.n	80164b8 <tcp_process+0x47c>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80164a0:	005b      	lsls	r3, r3, #1
 80164a2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d904      	bls.n	80164b4 <tcp_process+0x478>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	e001      	b.n	80164b8 <tcp_process+0x47c>
 80164b4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80164be:	4b4e      	ldr	r3, [pc, #312]	@ (80165f8 <tcp_process+0x5bc>)
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	f003 0320 	and.w	r3, r3, #32
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d037      	beq.n	801653a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	8b5b      	ldrh	r3, [r3, #26]
 80164ce:	f043 0302 	orr.w	r3, r3, #2
 80164d2:	b29a      	uxth	r2, r3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2207      	movs	r2, #7
 80164dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80164de:	e02c      	b.n	801653a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80164e0:	4b3b      	ldr	r3, [pc, #236]	@ (80165d0 <tcp_process+0x594>)
 80164e2:	6819      	ldr	r1, [r3, #0]
 80164e4:	4b3b      	ldr	r3, [pc, #236]	@ (80165d4 <tcp_process+0x598>)
 80164e6:	881b      	ldrh	r3, [r3, #0]
 80164e8:	461a      	mov	r2, r3
 80164ea:	4b3b      	ldr	r3, [pc, #236]	@ (80165d8 <tcp_process+0x59c>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80164f0:	4b3a      	ldr	r3, [pc, #232]	@ (80165dc <tcp_process+0x5a0>)
 80164f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80164f4:	885b      	ldrh	r3, [r3, #2]
 80164f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80164f8:	4a38      	ldr	r2, [pc, #224]	@ (80165dc <tcp_process+0x5a0>)
 80164fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80164fc:	8812      	ldrh	r2, [r2, #0]
 80164fe:	b292      	uxth	r2, r2
 8016500:	9202      	str	r2, [sp, #8]
 8016502:	9301      	str	r3, [sp, #4]
 8016504:	4b36      	ldr	r3, [pc, #216]	@ (80165e0 <tcp_process+0x5a4>)
 8016506:	9300      	str	r3, [sp, #0]
 8016508:	4b36      	ldr	r3, [pc, #216]	@ (80165e4 <tcp_process+0x5a8>)
 801650a:	4602      	mov	r2, r0
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f003 f823 	bl	8019558 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016512:	e167      	b.n	80167e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016514:	4b2d      	ldr	r3, [pc, #180]	@ (80165cc <tcp_process+0x590>)
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	f003 0302 	and.w	r3, r3, #2
 801651c:	2b00      	cmp	r3, #0
 801651e:	f000 8161 	beq.w	80167e4 <tcp_process+0x7a8>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016526:	1e5a      	subs	r2, r3, #1
 8016528:	4b2b      	ldr	r3, [pc, #172]	@ (80165d8 <tcp_process+0x59c>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	429a      	cmp	r2, r3
 801652e:	f040 8159 	bne.w	80167e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f002 fe0a 	bl	801914c <tcp_rexmit>
      break;
 8016538:	e154      	b.n	80167e4 <tcp_process+0x7a8>
 801653a:	e153      	b.n	80167e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	f000 fa71 	bl	8016a24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016542:	4b2d      	ldr	r3, [pc, #180]	@ (80165f8 <tcp_process+0x5bc>)
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	f003 0320 	and.w	r3, r3, #32
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 814c 	beq.w	80167e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	8b5b      	ldrh	r3, [r3, #26]
 8016554:	f043 0302 	orr.w	r3, r3, #2
 8016558:	b29a      	uxth	r2, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2207      	movs	r2, #7
 8016562:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016564:	e140      	b.n	80167e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f000 fa5c 	bl	8016a24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801656c:	4b22      	ldr	r3, [pc, #136]	@ (80165f8 <tcp_process+0x5bc>)
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	f003 0320 	and.w	r3, r3, #32
 8016574:	2b00      	cmp	r3, #0
 8016576:	d071      	beq.n	801665c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016578:	4b14      	ldr	r3, [pc, #80]	@ (80165cc <tcp_process+0x590>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	f003 0310 	and.w	r3, r3, #16
 8016580:	2b00      	cmp	r3, #0
 8016582:	d060      	beq.n	8016646 <tcp_process+0x60a>
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016588:	4b11      	ldr	r3, [pc, #68]	@ (80165d0 <tcp_process+0x594>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	429a      	cmp	r2, r3
 801658e:	d15a      	bne.n	8016646 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016594:	2b00      	cmp	r3, #0
 8016596:	d156      	bne.n	8016646 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	8b5b      	ldrh	r3, [r3, #26]
 801659c:	f043 0302 	orr.w	r3, r3, #2
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7fe fdbc 	bl	8015124 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80165ac:	4b13      	ldr	r3, [pc, #76]	@ (80165fc <tcp_process+0x5c0>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d105      	bne.n	80165c2 <tcp_process+0x586>
 80165b6:	4b11      	ldr	r3, [pc, #68]	@ (80165fc <tcp_process+0x5c0>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	68db      	ldr	r3, [r3, #12]
 80165bc:	4a0f      	ldr	r2, [pc, #60]	@ (80165fc <tcp_process+0x5c0>)
 80165be:	6013      	str	r3, [r2, #0]
 80165c0:	e02e      	b.n	8016620 <tcp_process+0x5e4>
 80165c2:	4b0e      	ldr	r3, [pc, #56]	@ (80165fc <tcp_process+0x5c0>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	617b      	str	r3, [r7, #20]
 80165c8:	e027      	b.n	801661a <tcp_process+0x5de>
 80165ca:	bf00      	nop
 80165cc:	2000c9f0 	.word	0x2000c9f0
 80165d0:	2000c9e8 	.word	0x2000c9e8
 80165d4:	2000c9ee 	.word	0x2000c9ee
 80165d8:	2000c9e4 	.word	0x2000c9e4
 80165dc:	2000c9d4 	.word	0x2000c9d4
 80165e0:	20009268 	.word	0x20009268
 80165e4:	2000926c 	.word	0x2000926c
 80165e8:	0802157c 	.word	0x0802157c
 80165ec:	0802181c 	.word	0x0802181c
 80165f0:	080215c8 	.word	0x080215c8
 80165f4:	2000c9ec 	.word	0x2000c9ec
 80165f8:	2000c9f1 	.word	0x2000c9f1
 80165fc:	2000c9b8 	.word	0x2000c9b8
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	429a      	cmp	r2, r3
 8016608:	d104      	bne.n	8016614 <tcp_process+0x5d8>
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	68da      	ldr	r2, [r3, #12]
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	60da      	str	r2, [r3, #12]
 8016612:	e005      	b.n	8016620 <tcp_process+0x5e4>
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	617b      	str	r3, [r7, #20]
 801661a:	697b      	ldr	r3, [r7, #20]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1ef      	bne.n	8016600 <tcp_process+0x5c4>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2200      	movs	r2, #0
 8016624:	60da      	str	r2, [r3, #12]
 8016626:	4b77      	ldr	r3, [pc, #476]	@ (8016804 <tcp_process+0x7c8>)
 8016628:	2201      	movs	r2, #1
 801662a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	220a      	movs	r2, #10
 8016630:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016632:	4b75      	ldr	r3, [pc, #468]	@ (8016808 <tcp_process+0x7cc>)
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	60da      	str	r2, [r3, #12]
 801663a:	4a73      	ldr	r2, [pc, #460]	@ (8016808 <tcp_process+0x7cc>)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6013      	str	r3, [r2, #0]
 8016640:	f003 f94c 	bl	80198dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016644:	e0d2      	b.n	80167ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	8b5b      	ldrh	r3, [r3, #26]
 801664a:	f043 0302 	orr.w	r3, r3, #2
 801664e:	b29a      	uxth	r2, r3
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2208      	movs	r2, #8
 8016658:	751a      	strb	r2, [r3, #20]
      break;
 801665a:	e0c7      	b.n	80167ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801665c:	4b6b      	ldr	r3, [pc, #428]	@ (801680c <tcp_process+0x7d0>)
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	f003 0310 	and.w	r3, r3, #16
 8016664:	2b00      	cmp	r3, #0
 8016666:	f000 80c1 	beq.w	80167ec <tcp_process+0x7b0>
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801666e:	4b68      	ldr	r3, [pc, #416]	@ (8016810 <tcp_process+0x7d4>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	429a      	cmp	r2, r3
 8016674:	f040 80ba 	bne.w	80167ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801667c:	2b00      	cmp	r3, #0
 801667e:	f040 80b5 	bne.w	80167ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2206      	movs	r2, #6
 8016686:	751a      	strb	r2, [r3, #20]
      break;
 8016688:	e0b0      	b.n	80167ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f000 f9ca 	bl	8016a24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016690:	4b60      	ldr	r3, [pc, #384]	@ (8016814 <tcp_process+0x7d8>)
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	f003 0320 	and.w	r3, r3, #32
 8016698:	2b00      	cmp	r3, #0
 801669a:	f000 80a9 	beq.w	80167f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	8b5b      	ldrh	r3, [r3, #26]
 80166a2:	f043 0302 	orr.w	r3, r3, #2
 80166a6:	b29a      	uxth	r2, r3
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f7fe fd39 	bl	8015124 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80166b2:	4b59      	ldr	r3, [pc, #356]	@ (8016818 <tcp_process+0x7dc>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d105      	bne.n	80166c8 <tcp_process+0x68c>
 80166bc:	4b56      	ldr	r3, [pc, #344]	@ (8016818 <tcp_process+0x7dc>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	68db      	ldr	r3, [r3, #12]
 80166c2:	4a55      	ldr	r2, [pc, #340]	@ (8016818 <tcp_process+0x7dc>)
 80166c4:	6013      	str	r3, [r2, #0]
 80166c6:	e013      	b.n	80166f0 <tcp_process+0x6b4>
 80166c8:	4b53      	ldr	r3, [pc, #332]	@ (8016818 <tcp_process+0x7dc>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	613b      	str	r3, [r7, #16]
 80166ce:	e00c      	b.n	80166ea <tcp_process+0x6ae>
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	687a      	ldr	r2, [r7, #4]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d104      	bne.n	80166e4 <tcp_process+0x6a8>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	68da      	ldr	r2, [r3, #12]
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	60da      	str	r2, [r3, #12]
 80166e2:	e005      	b.n	80166f0 <tcp_process+0x6b4>
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	613b      	str	r3, [r7, #16]
 80166ea:	693b      	ldr	r3, [r7, #16]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d1ef      	bne.n	80166d0 <tcp_process+0x694>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2200      	movs	r2, #0
 80166f4:	60da      	str	r2, [r3, #12]
 80166f6:	4b43      	ldr	r3, [pc, #268]	@ (8016804 <tcp_process+0x7c8>)
 80166f8:	2201      	movs	r2, #1
 80166fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	220a      	movs	r2, #10
 8016700:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016702:	4b41      	ldr	r3, [pc, #260]	@ (8016808 <tcp_process+0x7cc>)
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	60da      	str	r2, [r3, #12]
 801670a:	4a3f      	ldr	r2, [pc, #252]	@ (8016808 <tcp_process+0x7cc>)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6013      	str	r3, [r2, #0]
 8016710:	f003 f8e4 	bl	80198dc <tcp_timer_needed>
      }
      break;
 8016714:	e06c      	b.n	80167f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f000 f984 	bl	8016a24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801671c:	4b3b      	ldr	r3, [pc, #236]	@ (801680c <tcp_process+0x7d0>)
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	f003 0310 	and.w	r3, r3, #16
 8016724:	2b00      	cmp	r3, #0
 8016726:	d065      	beq.n	80167f4 <tcp_process+0x7b8>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801672c:	4b38      	ldr	r3, [pc, #224]	@ (8016810 <tcp_process+0x7d4>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	429a      	cmp	r2, r3
 8016732:	d15f      	bne.n	80167f4 <tcp_process+0x7b8>
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016738:	2b00      	cmp	r3, #0
 801673a:	d15b      	bne.n	80167f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f7fe fcf1 	bl	8015124 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016742:	4b35      	ldr	r3, [pc, #212]	@ (8016818 <tcp_process+0x7dc>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	687a      	ldr	r2, [r7, #4]
 8016748:	429a      	cmp	r2, r3
 801674a:	d105      	bne.n	8016758 <tcp_process+0x71c>
 801674c:	4b32      	ldr	r3, [pc, #200]	@ (8016818 <tcp_process+0x7dc>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	68db      	ldr	r3, [r3, #12]
 8016752:	4a31      	ldr	r2, [pc, #196]	@ (8016818 <tcp_process+0x7dc>)
 8016754:	6013      	str	r3, [r2, #0]
 8016756:	e013      	b.n	8016780 <tcp_process+0x744>
 8016758:	4b2f      	ldr	r3, [pc, #188]	@ (8016818 <tcp_process+0x7dc>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	60fb      	str	r3, [r7, #12]
 801675e:	e00c      	b.n	801677a <tcp_process+0x73e>
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	68db      	ldr	r3, [r3, #12]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	429a      	cmp	r2, r3
 8016768:	d104      	bne.n	8016774 <tcp_process+0x738>
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	68da      	ldr	r2, [r3, #12]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	60da      	str	r2, [r3, #12]
 8016772:	e005      	b.n	8016780 <tcp_process+0x744>
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	68db      	ldr	r3, [r3, #12]
 8016778:	60fb      	str	r3, [r7, #12]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d1ef      	bne.n	8016760 <tcp_process+0x724>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2200      	movs	r2, #0
 8016784:	60da      	str	r2, [r3, #12]
 8016786:	4b1f      	ldr	r3, [pc, #124]	@ (8016804 <tcp_process+0x7c8>)
 8016788:	2201      	movs	r2, #1
 801678a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	220a      	movs	r2, #10
 8016790:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016792:	4b1d      	ldr	r3, [pc, #116]	@ (8016808 <tcp_process+0x7cc>)
 8016794:	681a      	ldr	r2, [r3, #0]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	60da      	str	r2, [r3, #12]
 801679a:	4a1b      	ldr	r2, [pc, #108]	@ (8016808 <tcp_process+0x7cc>)
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6013      	str	r3, [r2, #0]
 80167a0:	f003 f89c 	bl	80198dc <tcp_timer_needed>
      }
      break;
 80167a4:	e026      	b.n	80167f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f000 f93c 	bl	8016a24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80167ac:	4b17      	ldr	r3, [pc, #92]	@ (801680c <tcp_process+0x7d0>)
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	f003 0310 	and.w	r3, r3, #16
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d01f      	beq.n	80167f8 <tcp_process+0x7bc>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167bc:	4b14      	ldr	r3, [pc, #80]	@ (8016810 <tcp_process+0x7d4>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d119      	bne.n	80167f8 <tcp_process+0x7bc>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d115      	bne.n	80167f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80167cc:	4b11      	ldr	r3, [pc, #68]	@ (8016814 <tcp_process+0x7d8>)
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	f043 0310 	orr.w	r3, r3, #16
 80167d4:	b2da      	uxtb	r2, r3
 80167d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016814 <tcp_process+0x7d8>)
 80167d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80167da:	e00d      	b.n	80167f8 <tcp_process+0x7bc>
    default:
      break;
 80167dc:	bf00      	nop
 80167de:	e00c      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167e0:	bf00      	nop
 80167e2:	e00a      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167e4:	bf00      	nop
 80167e6:	e008      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167e8:	bf00      	nop
 80167ea:	e006      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167ec:	bf00      	nop
 80167ee:	e004      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167f0:	bf00      	nop
 80167f2:	e002      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167f4:	bf00      	nop
 80167f6:	e000      	b.n	80167fa <tcp_process+0x7be>
      break;
 80167f8:	bf00      	nop
  }
  return ERR_OK;
 80167fa:	2300      	movs	r3, #0
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3724      	adds	r7, #36	@ 0x24
 8016800:	46bd      	mov	sp, r7
 8016802:	bd90      	pop	{r4, r7, pc}
 8016804:	2000c9c0 	.word	0x2000c9c0
 8016808:	2000c9bc 	.word	0x2000c9bc
 801680c:	2000c9f0 	.word	0x2000c9f0
 8016810:	2000c9e8 	.word	0x2000c9e8
 8016814:	2000c9f1 	.word	0x2000c9f1
 8016818:	2000c9b8 	.word	0x2000c9b8

0801681c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801681c:	b590      	push	{r4, r7, lr}
 801681e:	b085      	sub	sp, #20
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d106      	bne.n	801683a <tcp_oos_insert_segment+0x1e>
 801682c:	4b3b      	ldr	r3, [pc, #236]	@ (801691c <tcp_oos_insert_segment+0x100>)
 801682e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016832:	493b      	ldr	r1, [pc, #236]	@ (8016920 <tcp_oos_insert_segment+0x104>)
 8016834:	483b      	ldr	r0, [pc, #236]	@ (8016924 <tcp_oos_insert_segment+0x108>)
 8016836:	f006 fe61 	bl	801d4fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	68db      	ldr	r3, [r3, #12]
 801683e:	899b      	ldrh	r3, [r3, #12]
 8016840:	b29b      	uxth	r3, r3
 8016842:	4618      	mov	r0, r3
 8016844:	f7fb f9e2 	bl	8011c0c <lwip_htons>
 8016848:	4603      	mov	r3, r0
 801684a:	b2db      	uxtb	r3, r3
 801684c:	f003 0301 	and.w	r3, r3, #1
 8016850:	2b00      	cmp	r3, #0
 8016852:	d028      	beq.n	80168a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016854:	6838      	ldr	r0, [r7, #0]
 8016856:	f7fe f9bf 	bl	8014bd8 <tcp_segs_free>
    next = NULL;
 801685a:	2300      	movs	r3, #0
 801685c:	603b      	str	r3, [r7, #0]
 801685e:	e056      	b.n	801690e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	899b      	ldrh	r3, [r3, #12]
 8016866:	b29b      	uxth	r3, r3
 8016868:	4618      	mov	r0, r3
 801686a:	f7fb f9cf 	bl	8011c0c <lwip_htons>
 801686e:	4603      	mov	r3, r0
 8016870:	b2db      	uxtb	r3, r3
 8016872:	f003 0301 	and.w	r3, r3, #1
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00d      	beq.n	8016896 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	899b      	ldrh	r3, [r3, #12]
 8016880:	b29c      	uxth	r4, r3
 8016882:	2001      	movs	r0, #1
 8016884:	f7fb f9c2 	bl	8011c0c <lwip_htons>
 8016888:	4603      	mov	r3, r0
 801688a:	461a      	mov	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	68db      	ldr	r3, [r3, #12]
 8016890:	4322      	orrs	r2, r4
 8016892:	b292      	uxth	r2, r2
 8016894:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80168a0:	68f8      	ldr	r0, [r7, #12]
 80168a2:	f7fe f9ae 	bl	8014c02 <tcp_seg_free>
    while (next &&
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00e      	beq.n	80168ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	891b      	ldrh	r3, [r3, #8]
 80168b0:	461a      	mov	r2, r3
 80168b2:	4b1d      	ldr	r3, [pc, #116]	@ (8016928 <tcp_oos_insert_segment+0x10c>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	441a      	add	r2, r3
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	685b      	ldr	r3, [r3, #4]
 80168be:	6839      	ldr	r1, [r7, #0]
 80168c0:	8909      	ldrh	r1, [r1, #8]
 80168c2:	440b      	add	r3, r1
 80168c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	daca      	bge.n	8016860 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d01e      	beq.n	801690e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	891b      	ldrh	r3, [r3, #8]
 80168d4:	461a      	mov	r2, r3
 80168d6:	4b14      	ldr	r3, [pc, #80]	@ (8016928 <tcp_oos_insert_segment+0x10c>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	441a      	add	r2, r3
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dd12      	ble.n	801690e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	68db      	ldr	r3, [r3, #12]
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	b29a      	uxth	r2, r3
 80168f0:	4b0d      	ldr	r3, [pc, #52]	@ (8016928 <tcp_oos_insert_segment+0x10c>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	b29a      	uxth	r2, r3
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	685a      	ldr	r2, [r3, #4]
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	891b      	ldrh	r3, [r3, #8]
 8016906:	4619      	mov	r1, r3
 8016908:	4610      	mov	r0, r2
 801690a:	f7fc fbb9 	bl	8013080 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	683a      	ldr	r2, [r7, #0]
 8016912:	601a      	str	r2, [r3, #0]
}
 8016914:	bf00      	nop
 8016916:	3714      	adds	r7, #20
 8016918:	46bd      	mov	sp, r7
 801691a:	bd90      	pop	{r4, r7, pc}
 801691c:	0802157c 	.word	0x0802157c
 8016920:	0802183c 	.word	0x0802183c
 8016924:	080215c8 	.word	0x080215c8
 8016928:	2000c9e4 	.word	0x2000c9e4

0801692c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801692c:	b5b0      	push	{r4, r5, r7, lr}
 801692e:	b086      	sub	sp, #24
 8016930:	af00      	add	r7, sp, #0
 8016932:	60f8      	str	r0, [r7, #12]
 8016934:	60b9      	str	r1, [r7, #8]
 8016936:	607a      	str	r2, [r7, #4]
 8016938:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801693a:	e03e      	b.n	80169ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	4618      	mov	r0, r3
 801694c:	f7fc fdac 	bl	80134a8 <pbuf_clen>
 8016950:	4603      	mov	r3, r0
 8016952:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801695a:	8a7a      	ldrh	r2, [r7, #18]
 801695c:	429a      	cmp	r2, r3
 801695e:	d906      	bls.n	801696e <tcp_free_acked_segments+0x42>
 8016960:	4b2a      	ldr	r3, [pc, #168]	@ (8016a0c <tcp_free_acked_segments+0xe0>)
 8016962:	f240 4257 	movw	r2, #1111	@ 0x457
 8016966:	492a      	ldr	r1, [pc, #168]	@ (8016a10 <tcp_free_acked_segments+0xe4>)
 8016968:	482a      	ldr	r0, [pc, #168]	@ (8016a14 <tcp_free_acked_segments+0xe8>)
 801696a:	f006 fdc7 	bl	801d4fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016974:	8a7b      	ldrh	r3, [r7, #18]
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	b29a      	uxth	r2, r3
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	891a      	ldrh	r2, [r3, #8]
 8016984:	4b24      	ldr	r3, [pc, #144]	@ (8016a18 <tcp_free_acked_segments+0xec>)
 8016986:	881b      	ldrh	r3, [r3, #0]
 8016988:	4413      	add	r3, r2
 801698a:	b29a      	uxth	r2, r3
 801698c:	4b22      	ldr	r3, [pc, #136]	@ (8016a18 <tcp_free_acked_segments+0xec>)
 801698e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016990:	6978      	ldr	r0, [r7, #20]
 8016992:	f7fe f936 	bl	8014c02 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801699c:	2b00      	cmp	r3, #0
 801699e:	d00c      	beq.n	80169ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d109      	bne.n	80169ba <tcp_free_acked_segments+0x8e>
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d106      	bne.n	80169ba <tcp_free_acked_segments+0x8e>
 80169ac:	4b17      	ldr	r3, [pc, #92]	@ (8016a0c <tcp_free_acked_segments+0xe0>)
 80169ae:	f240 4261 	movw	r2, #1121	@ 0x461
 80169b2:	491a      	ldr	r1, [pc, #104]	@ (8016a1c <tcp_free_acked_segments+0xf0>)
 80169b4:	4817      	ldr	r0, [pc, #92]	@ (8016a14 <tcp_free_acked_segments+0xe8>)
 80169b6:	f006 fda1 	bl	801d4fc <iprintf>
  while (seg_list != NULL &&
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d020      	beq.n	8016a02 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	68db      	ldr	r3, [r3, #12]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7fb f936 	bl	8011c38 <lwip_htonl>
 80169cc:	4604      	mov	r4, r0
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	891b      	ldrh	r3, [r3, #8]
 80169d2:	461d      	mov	r5, r3
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	899b      	ldrh	r3, [r3, #12]
 80169da:	b29b      	uxth	r3, r3
 80169dc:	4618      	mov	r0, r3
 80169de:	f7fb f915 	bl	8011c0c <lwip_htons>
 80169e2:	4603      	mov	r3, r0
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	f003 0303 	and.w	r3, r3, #3
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d001      	beq.n	80169f2 <tcp_free_acked_segments+0xc6>
 80169ee:	2301      	movs	r3, #1
 80169f0:	e000      	b.n	80169f4 <tcp_free_acked_segments+0xc8>
 80169f2:	2300      	movs	r3, #0
 80169f4:	442b      	add	r3, r5
 80169f6:	18e2      	adds	r2, r4, r3
 80169f8:	4b09      	ldr	r3, [pc, #36]	@ (8016a20 <tcp_free_acked_segments+0xf4>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	dd9c      	ble.n	801693c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016a02:	68bb      	ldr	r3, [r7, #8]
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3718      	adds	r7, #24
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8016a0c:	0802157c 	.word	0x0802157c
 8016a10:	08021864 	.word	0x08021864
 8016a14:	080215c8 	.word	0x080215c8
 8016a18:	2000c9ec 	.word	0x2000c9ec
 8016a1c:	0802188c 	.word	0x0802188c
 8016a20:	2000c9e8 	.word	0x2000c9e8

08016a24 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016a24:	b5b0      	push	{r4, r5, r7, lr}
 8016a26:	b094      	sub	sp, #80	@ 0x50
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d106      	bne.n	8016a44 <tcp_receive+0x20>
 8016a36:	4b91      	ldr	r3, [pc, #580]	@ (8016c7c <tcp_receive+0x258>)
 8016a38:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016a3c:	4990      	ldr	r1, [pc, #576]	@ (8016c80 <tcp_receive+0x25c>)
 8016a3e:	4891      	ldr	r0, [pc, #580]	@ (8016c84 <tcp_receive+0x260>)
 8016a40:	f006 fd5c 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	7d1b      	ldrb	r3, [r3, #20]
 8016a48:	2b03      	cmp	r3, #3
 8016a4a:	d806      	bhi.n	8016a5a <tcp_receive+0x36>
 8016a4c:	4b8b      	ldr	r3, [pc, #556]	@ (8016c7c <tcp_receive+0x258>)
 8016a4e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016a52:	498d      	ldr	r1, [pc, #564]	@ (8016c88 <tcp_receive+0x264>)
 8016a54:	488b      	ldr	r0, [pc, #556]	@ (8016c84 <tcp_receive+0x260>)
 8016a56:	f006 fd51 	bl	801d4fc <iprintf>

  if (flags & TCP_ACK) {
 8016a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8016c8c <tcp_receive+0x268>)
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	f003 0310 	and.w	r3, r3, #16
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	f000 8264 	beq.w	8016f30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016a6e:	461a      	mov	r2, r3
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016a74:	4413      	add	r3, r2
 8016a76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a7c:	4b84      	ldr	r3, [pc, #528]	@ (8016c90 <tcp_receive+0x26c>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	1ad3      	subs	r3, r2, r3
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	db1b      	blt.n	8016abe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a8a:	4b81      	ldr	r3, [pc, #516]	@ (8016c90 <tcp_receive+0x26c>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d106      	bne.n	8016aa0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016a96:	4b7f      	ldr	r3, [pc, #508]	@ (8016c94 <tcp_receive+0x270>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	1ad3      	subs	r3, r2, r3
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	db0e      	blt.n	8016abe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8016c94 <tcp_receive+0x270>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d125      	bne.n	8016af8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016aac:	4b7a      	ldr	r3, [pc, #488]	@ (8016c98 <tcp_receive+0x274>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	89db      	ldrh	r3, [r3, #14]
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d91c      	bls.n	8016af8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016abe:	4b76      	ldr	r3, [pc, #472]	@ (8016c98 <tcp_receive+0x274>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	89db      	ldrh	r3, [r3, #14]
 8016ac4:	b29a      	uxth	r2, r3
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d205      	bcs.n	8016ae8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8016ae8:	4b69      	ldr	r3, [pc, #420]	@ (8016c90 <tcp_receive+0x26c>)
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016af0:	4b68      	ldr	r3, [pc, #416]	@ (8016c94 <tcp_receive+0x270>)
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016af8:	4b66      	ldr	r3, [pc, #408]	@ (8016c94 <tcp_receive+0x270>)
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	dc58      	bgt.n	8016bb8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016b06:	4b65      	ldr	r3, [pc, #404]	@ (8016c9c <tcp_receive+0x278>)
 8016b08:	881b      	ldrh	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d14b      	bne.n	8016ba6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8016b18:	4413      	add	r3, r2
 8016b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	d142      	bne.n	8016ba6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	db3d      	blt.n	8016ba6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016b2e:	4b59      	ldr	r3, [pc, #356]	@ (8016c94 <tcp_receive+0x270>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d137      	bne.n	8016ba6 <tcp_receive+0x182>
              found_dupack = 1;
 8016b36:	2301      	movs	r3, #1
 8016b38:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016b40:	2bff      	cmp	r3, #255	@ 0xff
 8016b42:	d007      	beq.n	8016b54 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	b2da      	uxtb	r2, r3
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016b5a:	2b03      	cmp	r3, #3
 8016b5c:	d91b      	bls.n	8016b96 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b68:	4413      	add	r3, r2
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d30a      	bcc.n	8016b8c <tcp_receive+0x168>
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b80:	4413      	add	r3, r2
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016b8a:	e004      	b.n	8016b96 <tcp_receive+0x172>
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016b9c:	2b02      	cmp	r3, #2
 8016b9e:	d902      	bls.n	8016ba6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f002 fb3f 	bl	8019224 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	f040 8161 	bne.w	8016e70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016bb6:	e15b      	b.n	8016e70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016bb8:	4b36      	ldr	r3, [pc, #216]	@ (8016c94 <tcp_receive+0x270>)
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016bc0:	1ad3      	subs	r3, r2, r3
 8016bc2:	3b01      	subs	r3, #1
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	f2c0 814e 	blt.w	8016e66 <tcp_receive+0x442>
 8016bca:	4b32      	ldr	r3, [pc, #200]	@ (8016c94 <tcp_receive+0x270>)
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	f300 8146 	bgt.w	8016e66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	8b5b      	ldrh	r3, [r3, #26]
 8016bde:	f003 0304 	and.w	r3, r3, #4
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d010      	beq.n	8016c08 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	8b5b      	ldrh	r3, [r3, #26]
 8016bea:	f023 0304 	bic.w	r3, r3, #4
 8016bee:	b29a      	uxth	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016c16:	10db      	asrs	r3, r3, #3
 8016c18:	b21b      	sxth	r3, r3
 8016c1a:	b29a      	uxth	r2, r3
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	4413      	add	r3, r2
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	b21a      	sxth	r2, r3
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016c30:	4b18      	ldr	r3, [pc, #96]	@ (8016c94 <tcp_receive+0x270>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	b29a      	uxth	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	1ad3      	subs	r3, r2, r3
 8016c3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2200      	movs	r2, #0
 8016c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8016c48:	4b12      	ldr	r3, [pc, #72]	@ (8016c94 <tcp_receive+0x270>)
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	7d1b      	ldrb	r3, [r3, #20]
 8016c54:	2b03      	cmp	r3, #3
 8016c56:	f240 8097 	bls.w	8016d88 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d245      	bcs.n	8016cf6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	8b5b      	ldrh	r3, [r3, #26]
 8016c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d014      	beq.n	8016ca0 <tcp_receive+0x27c>
 8016c76:	2301      	movs	r3, #1
 8016c78:	e013      	b.n	8016ca2 <tcp_receive+0x27e>
 8016c7a:	bf00      	nop
 8016c7c:	0802157c 	.word	0x0802157c
 8016c80:	080218ac 	.word	0x080218ac
 8016c84:	080215c8 	.word	0x080215c8
 8016c88:	080218c8 	.word	0x080218c8
 8016c8c:	2000c9f0 	.word	0x2000c9f0
 8016c90:	2000c9e4 	.word	0x2000c9e4
 8016c94:	2000c9e8 	.word	0x2000c9e8
 8016c98:	2000c9d4 	.word	0x2000c9d4
 8016c9c:	2000c9ee 	.word	0x2000c9ee
 8016ca0:	2302      	movs	r3, #2
 8016ca2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016ca6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016cb0:	fb12 f303 	smulbb	r3, r2, r3
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016cb8:	4293      	cmp	r3, r2
 8016cba:	bf28      	it	cs
 8016cbc:	4613      	movcs	r3, r2
 8016cbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016cc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016cc8:	4413      	add	r3, r2
 8016cca:	b29a      	uxth	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d309      	bcc.n	8016cea <tcp_receive+0x2c6>
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016cdc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016cde:	4413      	add	r3, r2
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016ce8:	e04e      	b.n	8016d88 <tcp_receive+0x364>
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016cf0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016cf4:	e048      	b.n	8016d88 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016cfc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016cfe:	4413      	add	r3, r2
 8016d00:	b29a      	uxth	r2, r3
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d309      	bcc.n	8016d20 <tcp_receive+0x2fc>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016d12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016d14:	4413      	add	r3, r2
 8016d16:	b29a      	uxth	r2, r3
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016d1e:	e004      	b.n	8016d2a <tcp_receive+0x306>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d326      	bcc.n	8016d88 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016d46:	1ad3      	subs	r3, r2, r3
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d5a:	4413      	add	r3, r2
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d30a      	bcc.n	8016d7e <tcp_receive+0x35a>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d72:	4413      	add	r3, r2
 8016d74:	b29a      	uxth	r2, r3
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016d7c:	e004      	b.n	8016d88 <tcp_receive+0x364>
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d90:	4a98      	ldr	r2, [pc, #608]	@ (8016ff4 <tcp_receive+0x5d0>)
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f7ff fdca 	bl	801692c <tcp_free_acked_segments>
 8016d98:	4602      	mov	r2, r0
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016da6:	4a94      	ldr	r2, [pc, #592]	@ (8016ff8 <tcp_receive+0x5d4>)
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f7ff fdbf 	bl	801692c <tcp_free_acked_segments>
 8016dae:	4602      	mov	r2, r0
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d104      	bne.n	8016dc6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016dc2:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016dc4:	e002      	b.n	8016dcc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d103      	bne.n	8016de2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016de8:	4b84      	ldr	r3, [pc, #528]	@ (8016ffc <tcp_receive+0x5d8>)
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	4413      	add	r3, r2
 8016dee:	b29a      	uxth	r2, r3
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8b5b      	ldrh	r3, [r3, #26]
 8016dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d035      	beq.n	8016e6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d118      	bne.n	8016e3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d00c      	beq.n	8016e2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7fa ff0a 	bl	8011c38 <lwip_htonl>
 8016e24:	4603      	mov	r3, r0
 8016e26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	dc20      	bgt.n	8016e6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	8b5b      	ldrh	r3, [r3, #26]
 8016e30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016e34:	b29a      	uxth	r2, r3
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016e3a:	e018      	b.n	8016e6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7fa fef5 	bl	8011c38 <lwip_htonl>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	1ae3      	subs	r3, r4, r3
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	dc0b      	bgt.n	8016e6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	8b5b      	ldrh	r3, [r3, #26]
 8016e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016e64:	e003      	b.n	8016e6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f002 fbc8 	bl	80195fc <tcp_send_empty_ack>
 8016e6c:	e000      	b.n	8016e70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016e6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d05b      	beq.n	8016f30 <tcp_receive+0x50c>
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e7c:	4b60      	ldr	r3, [pc, #384]	@ (8017000 <tcp_receive+0x5dc>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	1ad3      	subs	r3, r2, r3
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	da54      	bge.n	8016f30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016e86:	4b5f      	ldr	r3, [pc, #380]	@ (8017004 <tcp_receive+0x5e0>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e90:	b29b      	uxth	r3, r3
 8016e92:	1ad3      	subs	r3, r2, r3
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016e9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016ea4:	10db      	asrs	r3, r3, #3
 8016ea6:	b21b      	sxth	r3, r3
 8016ea8:	b29b      	uxth	r3, r3
 8016eaa:	1ad3      	subs	r3, r2, r3
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016eb8:	b29a      	uxth	r2, r3
 8016eba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ebe:	4413      	add	r3, r2
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	b21a      	sxth	r2, r3
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8016ec8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	da05      	bge.n	8016edc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016ed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ed4:	425b      	negs	r3, r3
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016edc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016ee6:	109b      	asrs	r3, r3, #2
 8016ee8:	b21b      	sxth	r3, r3
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	b29b      	uxth	r3, r3
 8016ef0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016f00:	4413      	add	r3, r2
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	b21a      	sxth	r2, r3
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016f10:	10db      	asrs	r3, r3, #3
 8016f12:	b21b      	sxth	r3, r3
 8016f14:	b29a      	uxth	r2, r3
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	4413      	add	r3, r2
 8016f20:	b29b      	uxth	r3, r3
 8016f22:	b21a      	sxth	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016f30:	4b35      	ldr	r3, [pc, #212]	@ (8017008 <tcp_receive+0x5e4>)
 8016f32:	881b      	ldrh	r3, [r3, #0]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	f000 84df 	beq.w	80178f8 <tcp_receive+0xed4>
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	7d1b      	ldrb	r3, [r3, #20]
 8016f3e:	2b06      	cmp	r3, #6
 8016f40:	f200 84da 	bhi.w	80178f8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f48:	4b30      	ldr	r3, [pc, #192]	@ (801700c <tcp_receive+0x5e8>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	1ad3      	subs	r3, r2, r3
 8016f4e:	3b01      	subs	r3, #1
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	f2c0 808f 	blt.w	8017074 <tcp_receive+0x650>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8017008 <tcp_receive+0x5e4>)
 8016f5c:	881b      	ldrh	r3, [r3, #0]
 8016f5e:	4619      	mov	r1, r3
 8016f60:	4b2a      	ldr	r3, [pc, #168]	@ (801700c <tcp_receive+0x5e8>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	440b      	add	r3, r1
 8016f66:	1ad3      	subs	r3, r2, r3
 8016f68:	3301      	adds	r3, #1
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	f300 8082 	bgt.w	8017074 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016f70:	4b27      	ldr	r3, [pc, #156]	@ (8017010 <tcp_receive+0x5ec>)
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f7a:	4b24      	ldr	r3, [pc, #144]	@ (801700c <tcp_receive+0x5e8>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	1ad3      	subs	r3, r2, r3
 8016f80:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016f82:	4b23      	ldr	r3, [pc, #140]	@ (8017010 <tcp_receive+0x5ec>)
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d106      	bne.n	8016f98 <tcp_receive+0x574>
 8016f8a:	4b22      	ldr	r3, [pc, #136]	@ (8017014 <tcp_receive+0x5f0>)
 8016f8c:	f240 5294 	movw	r2, #1428	@ 0x594
 8016f90:	4921      	ldr	r1, [pc, #132]	@ (8017018 <tcp_receive+0x5f4>)
 8016f92:	4822      	ldr	r0, [pc, #136]	@ (801701c <tcp_receive+0x5f8>)
 8016f94:	f006 fab2 	bl	801d4fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016f9e:	4293      	cmp	r3, r2
 8016fa0:	d906      	bls.n	8016fb0 <tcp_receive+0x58c>
 8016fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8017014 <tcp_receive+0x5f0>)
 8016fa4:	f240 5295 	movw	r2, #1429	@ 0x595
 8016fa8:	491d      	ldr	r1, [pc, #116]	@ (8017020 <tcp_receive+0x5fc>)
 8016faa:	481c      	ldr	r0, [pc, #112]	@ (801701c <tcp_receive+0x5f8>)
 8016fac:	f006 faa6 	bl	801d4fc <iprintf>
      off = (u16_t)off32;
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016fb6:	4b16      	ldr	r3, [pc, #88]	@ (8017010 <tcp_receive+0x5ec>)
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	891b      	ldrh	r3, [r3, #8]
 8016fbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d906      	bls.n	8016fd2 <tcp_receive+0x5ae>
 8016fc4:	4b13      	ldr	r3, [pc, #76]	@ (8017014 <tcp_receive+0x5f0>)
 8016fc6:	f240 5297 	movw	r2, #1431	@ 0x597
 8016fca:	4916      	ldr	r1, [pc, #88]	@ (8017024 <tcp_receive+0x600>)
 8016fcc:	4813      	ldr	r0, [pc, #76]	@ (801701c <tcp_receive+0x5f8>)
 8016fce:	f006 fa95 	bl	801d4fc <iprintf>
      inseg.len -= off;
 8016fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8017010 <tcp_receive+0x5ec>)
 8016fd4:	891a      	ldrh	r2, [r3, #8]
 8016fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016fda:	1ad3      	subs	r3, r2, r3
 8016fdc:	b29a      	uxth	r2, r3
 8016fde:	4b0c      	ldr	r3, [pc, #48]	@ (8017010 <tcp_receive+0x5ec>)
 8016fe0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8017010 <tcp_receive+0x5ec>)
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	891a      	ldrh	r2, [r3, #8]
 8016fe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016fec:	1ad3      	subs	r3, r2, r3
 8016fee:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016ff0:	e02a      	b.n	8017048 <tcp_receive+0x624>
 8016ff2:	bf00      	nop
 8016ff4:	080218e4 	.word	0x080218e4
 8016ff8:	080218ec 	.word	0x080218ec
 8016ffc:	2000c9ec 	.word	0x2000c9ec
 8017000:	2000c9e8 	.word	0x2000c9e8
 8017004:	2000c9ac 	.word	0x2000c9ac
 8017008:	2000c9ee 	.word	0x2000c9ee
 801700c:	2000c9e4 	.word	0x2000c9e4
 8017010:	2000c9c4 	.word	0x2000c9c4
 8017014:	0802157c 	.word	0x0802157c
 8017018:	080218f4 	.word	0x080218f4
 801701c:	080215c8 	.word	0x080215c8
 8017020:	08021904 	.word	0x08021904
 8017024:	08021914 	.word	0x08021914
        off -= p->len;
 8017028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801702a:	895b      	ldrh	r3, [r3, #10]
 801702c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017038:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801703a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801703c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801703e:	2200      	movs	r2, #0
 8017040:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801704a:	895b      	ldrh	r3, [r3, #10]
 801704c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017050:	429a      	cmp	r2, r3
 8017052:	d8e9      	bhi.n	8017028 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017058:	4619      	mov	r1, r3
 801705a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801705c:	f7fc f910 	bl	8013280 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017064:	4a90      	ldr	r2, [pc, #576]	@ (80172a8 <tcp_receive+0x884>)
 8017066:	6013      	str	r3, [r2, #0]
 8017068:	4b90      	ldr	r3, [pc, #576]	@ (80172ac <tcp_receive+0x888>)
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	4a8e      	ldr	r2, [pc, #568]	@ (80172a8 <tcp_receive+0x884>)
 801706e:	6812      	ldr	r2, [r2, #0]
 8017070:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017072:	e00d      	b.n	8017090 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017074:	4b8c      	ldr	r3, [pc, #560]	@ (80172a8 <tcp_receive+0x884>)
 8017076:	681a      	ldr	r2, [r3, #0]
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801707c:	1ad3      	subs	r3, r2, r3
 801707e:	2b00      	cmp	r3, #0
 8017080:	da06      	bge.n	8017090 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	8b5b      	ldrh	r3, [r3, #26]
 8017086:	f043 0302 	orr.w	r3, r3, #2
 801708a:	b29a      	uxth	r2, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017090:	4b85      	ldr	r3, [pc, #532]	@ (80172a8 <tcp_receive+0x884>)
 8017092:	681a      	ldr	r2, [r3, #0]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017098:	1ad3      	subs	r3, r2, r3
 801709a:	2b00      	cmp	r3, #0
 801709c:	f2c0 8427 	blt.w	80178ee <tcp_receive+0xeca>
 80170a0:	4b81      	ldr	r3, [pc, #516]	@ (80172a8 <tcp_receive+0x884>)
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170a8:	6879      	ldr	r1, [r7, #4]
 80170aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80170ac:	440b      	add	r3, r1
 80170ae:	1ad3      	subs	r3, r2, r3
 80170b0:	3301      	adds	r3, #1
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	f300 841b 	bgt.w	80178ee <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170bc:	4b7a      	ldr	r3, [pc, #488]	@ (80172a8 <tcp_receive+0x884>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	f040 8298 	bne.w	80175f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80170c6:	4b79      	ldr	r3, [pc, #484]	@ (80172ac <tcp_receive+0x888>)
 80170c8:	891c      	ldrh	r4, [r3, #8]
 80170ca:	4b78      	ldr	r3, [pc, #480]	@ (80172ac <tcp_receive+0x888>)
 80170cc:	68db      	ldr	r3, [r3, #12]
 80170ce:	899b      	ldrh	r3, [r3, #12]
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7fa fd9a 	bl	8011c0c <lwip_htons>
 80170d8:	4603      	mov	r3, r0
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	f003 0303 	and.w	r3, r3, #3
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d001      	beq.n	80170e8 <tcp_receive+0x6c4>
 80170e4:	2301      	movs	r3, #1
 80170e6:	e000      	b.n	80170ea <tcp_receive+0x6c6>
 80170e8:	2300      	movs	r3, #0
 80170ea:	4423      	add	r3, r4
 80170ec:	b29a      	uxth	r2, r3
 80170ee:	4b70      	ldr	r3, [pc, #448]	@ (80172b0 <tcp_receive+0x88c>)
 80170f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80170f6:	4b6e      	ldr	r3, [pc, #440]	@ (80172b0 <tcp_receive+0x88c>)
 80170f8:	881b      	ldrh	r3, [r3, #0]
 80170fa:	429a      	cmp	r2, r3
 80170fc:	d274      	bcs.n	80171e8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80170fe:	4b6b      	ldr	r3, [pc, #428]	@ (80172ac <tcp_receive+0x888>)
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	899b      	ldrh	r3, [r3, #12]
 8017104:	b29b      	uxth	r3, r3
 8017106:	4618      	mov	r0, r3
 8017108:	f7fa fd80 	bl	8011c0c <lwip_htons>
 801710c:	4603      	mov	r3, r0
 801710e:	b2db      	uxtb	r3, r3
 8017110:	f003 0301 	and.w	r3, r3, #1
 8017114:	2b00      	cmp	r3, #0
 8017116:	d01e      	beq.n	8017156 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017118:	4b64      	ldr	r3, [pc, #400]	@ (80172ac <tcp_receive+0x888>)
 801711a:	68db      	ldr	r3, [r3, #12]
 801711c:	899b      	ldrh	r3, [r3, #12]
 801711e:	b29b      	uxth	r3, r3
 8017120:	b21b      	sxth	r3, r3
 8017122:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017126:	b21c      	sxth	r4, r3
 8017128:	4b60      	ldr	r3, [pc, #384]	@ (80172ac <tcp_receive+0x888>)
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	899b      	ldrh	r3, [r3, #12]
 801712e:	b29b      	uxth	r3, r3
 8017130:	4618      	mov	r0, r3
 8017132:	f7fa fd6b 	bl	8011c0c <lwip_htons>
 8017136:	4603      	mov	r3, r0
 8017138:	b2db      	uxtb	r3, r3
 801713a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801713e:	b29b      	uxth	r3, r3
 8017140:	4618      	mov	r0, r3
 8017142:	f7fa fd63 	bl	8011c0c <lwip_htons>
 8017146:	4603      	mov	r3, r0
 8017148:	b21b      	sxth	r3, r3
 801714a:	4323      	orrs	r3, r4
 801714c:	b21a      	sxth	r2, r3
 801714e:	4b57      	ldr	r3, [pc, #348]	@ (80172ac <tcp_receive+0x888>)
 8017150:	68db      	ldr	r3, [r3, #12]
 8017152:	b292      	uxth	r2, r2
 8017154:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801715a:	4b54      	ldr	r3, [pc, #336]	@ (80172ac <tcp_receive+0x888>)
 801715c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801715e:	4b53      	ldr	r3, [pc, #332]	@ (80172ac <tcp_receive+0x888>)
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	899b      	ldrh	r3, [r3, #12]
 8017164:	b29b      	uxth	r3, r3
 8017166:	4618      	mov	r0, r3
 8017168:	f7fa fd50 	bl	8011c0c <lwip_htons>
 801716c:	4603      	mov	r3, r0
 801716e:	b2db      	uxtb	r3, r3
 8017170:	f003 0302 	and.w	r3, r3, #2
 8017174:	2b00      	cmp	r3, #0
 8017176:	d005      	beq.n	8017184 <tcp_receive+0x760>
            inseg.len -= 1;
 8017178:	4b4c      	ldr	r3, [pc, #304]	@ (80172ac <tcp_receive+0x888>)
 801717a:	891b      	ldrh	r3, [r3, #8]
 801717c:	3b01      	subs	r3, #1
 801717e:	b29a      	uxth	r2, r3
 8017180:	4b4a      	ldr	r3, [pc, #296]	@ (80172ac <tcp_receive+0x888>)
 8017182:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017184:	4b49      	ldr	r3, [pc, #292]	@ (80172ac <tcp_receive+0x888>)
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	4a48      	ldr	r2, [pc, #288]	@ (80172ac <tcp_receive+0x888>)
 801718a:	8912      	ldrh	r2, [r2, #8]
 801718c:	4611      	mov	r1, r2
 801718e:	4618      	mov	r0, r3
 8017190:	f7fb ff76 	bl	8013080 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017194:	4b45      	ldr	r3, [pc, #276]	@ (80172ac <tcp_receive+0x888>)
 8017196:	891c      	ldrh	r4, [r3, #8]
 8017198:	4b44      	ldr	r3, [pc, #272]	@ (80172ac <tcp_receive+0x888>)
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	899b      	ldrh	r3, [r3, #12]
 801719e:	b29b      	uxth	r3, r3
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7fa fd33 	bl	8011c0c <lwip_htons>
 80171a6:	4603      	mov	r3, r0
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	f003 0303 	and.w	r3, r3, #3
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d001      	beq.n	80171b6 <tcp_receive+0x792>
 80171b2:	2301      	movs	r3, #1
 80171b4:	e000      	b.n	80171b8 <tcp_receive+0x794>
 80171b6:	2300      	movs	r3, #0
 80171b8:	4423      	add	r3, r4
 80171ba:	b29a      	uxth	r2, r3
 80171bc:	4b3c      	ldr	r3, [pc, #240]	@ (80172b0 <tcp_receive+0x88c>)
 80171be:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80171c0:	4b3b      	ldr	r3, [pc, #236]	@ (80172b0 <tcp_receive+0x88c>)
 80171c2:	881b      	ldrh	r3, [r3, #0]
 80171c4:	461a      	mov	r2, r3
 80171c6:	4b38      	ldr	r3, [pc, #224]	@ (80172a8 <tcp_receive+0x884>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	441a      	add	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171d0:	6879      	ldr	r1, [r7, #4]
 80171d2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80171d4:	440b      	add	r3, r1
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d006      	beq.n	80171e8 <tcp_receive+0x7c4>
 80171da:	4b36      	ldr	r3, [pc, #216]	@ (80172b4 <tcp_receive+0x890>)
 80171dc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80171e0:	4935      	ldr	r1, [pc, #212]	@ (80172b8 <tcp_receive+0x894>)
 80171e2:	4836      	ldr	r0, [pc, #216]	@ (80172bc <tcp_receive+0x898>)
 80171e4:	f006 f98a 	bl	801d4fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f000 80e6 	beq.w	80173be <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80171f2:	4b2e      	ldr	r3, [pc, #184]	@ (80172ac <tcp_receive+0x888>)
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	899b      	ldrh	r3, [r3, #12]
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7fa fd06 	bl	8011c0c <lwip_htons>
 8017200:	4603      	mov	r3, r0
 8017202:	b2db      	uxtb	r3, r3
 8017204:	f003 0301 	and.w	r3, r3, #1
 8017208:	2b00      	cmp	r3, #0
 801720a:	d010      	beq.n	801722e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801720c:	e00a      	b.n	8017224 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017212:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801721e:	68f8      	ldr	r0, [r7, #12]
 8017220:	f7fd fcef 	bl	8014c02 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017228:	2b00      	cmp	r3, #0
 801722a:	d1f0      	bne.n	801720e <tcp_receive+0x7ea>
 801722c:	e0c7      	b.n	80173be <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017232:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017234:	e051      	b.n	80172da <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	899b      	ldrh	r3, [r3, #12]
 801723c:	b29b      	uxth	r3, r3
 801723e:	4618      	mov	r0, r3
 8017240:	f7fa fce4 	bl	8011c0c <lwip_htons>
 8017244:	4603      	mov	r3, r0
 8017246:	b2db      	uxtb	r3, r3
 8017248:	f003 0301 	and.w	r3, r3, #1
 801724c:	2b00      	cmp	r3, #0
 801724e:	d03c      	beq.n	80172ca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017250:	4b16      	ldr	r3, [pc, #88]	@ (80172ac <tcp_receive+0x888>)
 8017252:	68db      	ldr	r3, [r3, #12]
 8017254:	899b      	ldrh	r3, [r3, #12]
 8017256:	b29b      	uxth	r3, r3
 8017258:	4618      	mov	r0, r3
 801725a:	f7fa fcd7 	bl	8011c0c <lwip_htons>
 801725e:	4603      	mov	r3, r0
 8017260:	b2db      	uxtb	r3, r3
 8017262:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017266:	2b00      	cmp	r3, #0
 8017268:	d12f      	bne.n	80172ca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801726a:	4b10      	ldr	r3, [pc, #64]	@ (80172ac <tcp_receive+0x888>)
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	899b      	ldrh	r3, [r3, #12]
 8017270:	b29c      	uxth	r4, r3
 8017272:	2001      	movs	r0, #1
 8017274:	f7fa fcca 	bl	8011c0c <lwip_htons>
 8017278:	4603      	mov	r3, r0
 801727a:	461a      	mov	r2, r3
 801727c:	4b0b      	ldr	r3, [pc, #44]	@ (80172ac <tcp_receive+0x888>)
 801727e:	68db      	ldr	r3, [r3, #12]
 8017280:	4322      	orrs	r2, r4
 8017282:	b292      	uxth	r2, r2
 8017284:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017286:	4b09      	ldr	r3, [pc, #36]	@ (80172ac <tcp_receive+0x888>)
 8017288:	891c      	ldrh	r4, [r3, #8]
 801728a:	4b08      	ldr	r3, [pc, #32]	@ (80172ac <tcp_receive+0x888>)
 801728c:	68db      	ldr	r3, [r3, #12]
 801728e:	899b      	ldrh	r3, [r3, #12]
 8017290:	b29b      	uxth	r3, r3
 8017292:	4618      	mov	r0, r3
 8017294:	f7fa fcba 	bl	8011c0c <lwip_htons>
 8017298:	4603      	mov	r3, r0
 801729a:	b2db      	uxtb	r3, r3
 801729c:	f003 0303 	and.w	r3, r3, #3
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d00d      	beq.n	80172c0 <tcp_receive+0x89c>
 80172a4:	2301      	movs	r3, #1
 80172a6:	e00c      	b.n	80172c2 <tcp_receive+0x89e>
 80172a8:	2000c9e4 	.word	0x2000c9e4
 80172ac:	2000c9c4 	.word	0x2000c9c4
 80172b0:	2000c9ee 	.word	0x2000c9ee
 80172b4:	0802157c 	.word	0x0802157c
 80172b8:	08021924 	.word	0x08021924
 80172bc:	080215c8 	.word	0x080215c8
 80172c0:	2300      	movs	r3, #0
 80172c2:	4423      	add	r3, r4
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	4b98      	ldr	r3, [pc, #608]	@ (8017528 <tcp_receive+0xb04>)
 80172c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80172ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80172ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80172d4:	6938      	ldr	r0, [r7, #16]
 80172d6:	f7fd fc94 	bl	8014c02 <tcp_seg_free>
            while (next &&
 80172da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d00e      	beq.n	80172fe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80172e0:	4b91      	ldr	r3, [pc, #580]	@ (8017528 <tcp_receive+0xb04>)
 80172e2:	881b      	ldrh	r3, [r3, #0]
 80172e4:	461a      	mov	r2, r3
 80172e6:	4b91      	ldr	r3, [pc, #580]	@ (801752c <tcp_receive+0xb08>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	441a      	add	r2, r3
 80172ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172ee:	68db      	ldr	r3, [r3, #12]
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80172f4:	8909      	ldrh	r1, [r1, #8]
 80172f6:	440b      	add	r3, r1
 80172f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	da9b      	bge.n	8017236 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80172fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017300:	2b00      	cmp	r3, #0
 8017302:	d059      	beq.n	80173b8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017304:	4b88      	ldr	r3, [pc, #544]	@ (8017528 <tcp_receive+0xb04>)
 8017306:	881b      	ldrh	r3, [r3, #0]
 8017308:	461a      	mov	r2, r3
 801730a:	4b88      	ldr	r3, [pc, #544]	@ (801752c <tcp_receive+0xb08>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	441a      	add	r2, r3
 8017310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017312:	68db      	ldr	r3, [r3, #12]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017318:	2b00      	cmp	r3, #0
 801731a:	dd4d      	ble.n	80173b8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	b29a      	uxth	r2, r3
 8017324:	4b81      	ldr	r3, [pc, #516]	@ (801752c <tcp_receive+0xb08>)
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	b29b      	uxth	r3, r3
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	b29a      	uxth	r2, r3
 801732e:	4b80      	ldr	r3, [pc, #512]	@ (8017530 <tcp_receive+0xb0c>)
 8017330:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017332:	4b7f      	ldr	r3, [pc, #508]	@ (8017530 <tcp_receive+0xb0c>)
 8017334:	68db      	ldr	r3, [r3, #12]
 8017336:	899b      	ldrh	r3, [r3, #12]
 8017338:	b29b      	uxth	r3, r3
 801733a:	4618      	mov	r0, r3
 801733c:	f7fa fc66 	bl	8011c0c <lwip_htons>
 8017340:	4603      	mov	r3, r0
 8017342:	b2db      	uxtb	r3, r3
 8017344:	f003 0302 	and.w	r3, r3, #2
 8017348:	2b00      	cmp	r3, #0
 801734a:	d005      	beq.n	8017358 <tcp_receive+0x934>
                inseg.len -= 1;
 801734c:	4b78      	ldr	r3, [pc, #480]	@ (8017530 <tcp_receive+0xb0c>)
 801734e:	891b      	ldrh	r3, [r3, #8]
 8017350:	3b01      	subs	r3, #1
 8017352:	b29a      	uxth	r2, r3
 8017354:	4b76      	ldr	r3, [pc, #472]	@ (8017530 <tcp_receive+0xb0c>)
 8017356:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017358:	4b75      	ldr	r3, [pc, #468]	@ (8017530 <tcp_receive+0xb0c>)
 801735a:	685b      	ldr	r3, [r3, #4]
 801735c:	4a74      	ldr	r2, [pc, #464]	@ (8017530 <tcp_receive+0xb0c>)
 801735e:	8912      	ldrh	r2, [r2, #8]
 8017360:	4611      	mov	r1, r2
 8017362:	4618      	mov	r0, r3
 8017364:	f7fb fe8c 	bl	8013080 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017368:	4b71      	ldr	r3, [pc, #452]	@ (8017530 <tcp_receive+0xb0c>)
 801736a:	891c      	ldrh	r4, [r3, #8]
 801736c:	4b70      	ldr	r3, [pc, #448]	@ (8017530 <tcp_receive+0xb0c>)
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	899b      	ldrh	r3, [r3, #12]
 8017372:	b29b      	uxth	r3, r3
 8017374:	4618      	mov	r0, r3
 8017376:	f7fa fc49 	bl	8011c0c <lwip_htons>
 801737a:	4603      	mov	r3, r0
 801737c:	b2db      	uxtb	r3, r3
 801737e:	f003 0303 	and.w	r3, r3, #3
 8017382:	2b00      	cmp	r3, #0
 8017384:	d001      	beq.n	801738a <tcp_receive+0x966>
 8017386:	2301      	movs	r3, #1
 8017388:	e000      	b.n	801738c <tcp_receive+0x968>
 801738a:	2300      	movs	r3, #0
 801738c:	4423      	add	r3, r4
 801738e:	b29a      	uxth	r2, r3
 8017390:	4b65      	ldr	r3, [pc, #404]	@ (8017528 <tcp_receive+0xb04>)
 8017392:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017394:	4b64      	ldr	r3, [pc, #400]	@ (8017528 <tcp_receive+0xb04>)
 8017396:	881b      	ldrh	r3, [r3, #0]
 8017398:	461a      	mov	r2, r3
 801739a:	4b64      	ldr	r3, [pc, #400]	@ (801752c <tcp_receive+0xb08>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	441a      	add	r2, r3
 80173a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d006      	beq.n	80173b8 <tcp_receive+0x994>
 80173aa:	4b62      	ldr	r3, [pc, #392]	@ (8017534 <tcp_receive+0xb10>)
 80173ac:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80173b0:	4961      	ldr	r1, [pc, #388]	@ (8017538 <tcp_receive+0xb14>)
 80173b2:	4862      	ldr	r0, [pc, #392]	@ (801753c <tcp_receive+0xb18>)
 80173b4:	f006 f8a2 	bl	801d4fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80173bc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80173be:	4b5a      	ldr	r3, [pc, #360]	@ (8017528 <tcp_receive+0xb04>)
 80173c0:	881b      	ldrh	r3, [r3, #0]
 80173c2:	461a      	mov	r2, r3
 80173c4:	4b59      	ldr	r3, [pc, #356]	@ (801752c <tcp_receive+0xb08>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	441a      	add	r2, r3
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80173d2:	4b55      	ldr	r3, [pc, #340]	@ (8017528 <tcp_receive+0xb04>)
 80173d4:	881b      	ldrh	r3, [r3, #0]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d206      	bcs.n	80173e8 <tcp_receive+0x9c4>
 80173da:	4b56      	ldr	r3, [pc, #344]	@ (8017534 <tcp_receive+0xb10>)
 80173dc:	f240 6207 	movw	r2, #1543	@ 0x607
 80173e0:	4957      	ldr	r1, [pc, #348]	@ (8017540 <tcp_receive+0xb1c>)
 80173e2:	4856      	ldr	r0, [pc, #344]	@ (801753c <tcp_receive+0xb18>)
 80173e4:	f006 f88a 	bl	801d4fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80173ec:	4b4e      	ldr	r3, [pc, #312]	@ (8017528 <tcp_receive+0xb04>)
 80173ee:	881b      	ldrh	r3, [r3, #0]
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	b29a      	uxth	r2, r3
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f7fc fedb 	bl	80141b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80173fe:	4b4c      	ldr	r3, [pc, #304]	@ (8017530 <tcp_receive+0xb0c>)
 8017400:	685b      	ldr	r3, [r3, #4]
 8017402:	891b      	ldrh	r3, [r3, #8]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d006      	beq.n	8017416 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017408:	4b49      	ldr	r3, [pc, #292]	@ (8017530 <tcp_receive+0xb0c>)
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	4a4d      	ldr	r2, [pc, #308]	@ (8017544 <tcp_receive+0xb20>)
 801740e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017410:	4b47      	ldr	r3, [pc, #284]	@ (8017530 <tcp_receive+0xb0c>)
 8017412:	2200      	movs	r2, #0
 8017414:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017416:	4b46      	ldr	r3, [pc, #280]	@ (8017530 <tcp_receive+0xb0c>)
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	899b      	ldrh	r3, [r3, #12]
 801741c:	b29b      	uxth	r3, r3
 801741e:	4618      	mov	r0, r3
 8017420:	f7fa fbf4 	bl	8011c0c <lwip_htons>
 8017424:	4603      	mov	r3, r0
 8017426:	b2db      	uxtb	r3, r3
 8017428:	f003 0301 	and.w	r3, r3, #1
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 80b8 	beq.w	80175a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017432:	4b45      	ldr	r3, [pc, #276]	@ (8017548 <tcp_receive+0xb24>)
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	f043 0320 	orr.w	r3, r3, #32
 801743a:	b2da      	uxtb	r2, r3
 801743c:	4b42      	ldr	r3, [pc, #264]	@ (8017548 <tcp_receive+0xb24>)
 801743e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017440:	e0af      	b.n	80175a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017446:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	685b      	ldr	r3, [r3, #4]
 8017450:	4a36      	ldr	r2, [pc, #216]	@ (801752c <tcp_receive+0xb08>)
 8017452:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	891b      	ldrh	r3, [r3, #8]
 8017458:	461c      	mov	r4, r3
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	899b      	ldrh	r3, [r3, #12]
 8017460:	b29b      	uxth	r3, r3
 8017462:	4618      	mov	r0, r3
 8017464:	f7fa fbd2 	bl	8011c0c <lwip_htons>
 8017468:	4603      	mov	r3, r0
 801746a:	b2db      	uxtb	r3, r3
 801746c:	f003 0303 	and.w	r3, r3, #3
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <tcp_receive+0xa54>
 8017474:	2301      	movs	r3, #1
 8017476:	e000      	b.n	801747a <tcp_receive+0xa56>
 8017478:	2300      	movs	r3, #0
 801747a:	191a      	adds	r2, r3, r4
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017480:	441a      	add	r2, r3
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801748a:	461c      	mov	r4, r3
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	891b      	ldrh	r3, [r3, #8]
 8017490:	461d      	mov	r5, r3
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	899b      	ldrh	r3, [r3, #12]
 8017498:	b29b      	uxth	r3, r3
 801749a:	4618      	mov	r0, r3
 801749c:	f7fa fbb6 	bl	8011c0c <lwip_htons>
 80174a0:	4603      	mov	r3, r0
 80174a2:	b2db      	uxtb	r3, r3
 80174a4:	f003 0303 	and.w	r3, r3, #3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d001      	beq.n	80174b0 <tcp_receive+0xa8c>
 80174ac:	2301      	movs	r3, #1
 80174ae:	e000      	b.n	80174b2 <tcp_receive+0xa8e>
 80174b0:	2300      	movs	r3, #0
 80174b2:	442b      	add	r3, r5
 80174b4:	429c      	cmp	r4, r3
 80174b6:	d206      	bcs.n	80174c6 <tcp_receive+0xaa2>
 80174b8:	4b1e      	ldr	r3, [pc, #120]	@ (8017534 <tcp_receive+0xb10>)
 80174ba:	f240 622b 	movw	r2, #1579	@ 0x62b
 80174be:	4923      	ldr	r1, [pc, #140]	@ (801754c <tcp_receive+0xb28>)
 80174c0:	481e      	ldr	r0, [pc, #120]	@ (801753c <tcp_receive+0xb18>)
 80174c2:	f006 f81b 	bl	801d4fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	891b      	ldrh	r3, [r3, #8]
 80174ca:	461c      	mov	r4, r3
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	68db      	ldr	r3, [r3, #12]
 80174d0:	899b      	ldrh	r3, [r3, #12]
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7fa fb99 	bl	8011c0c <lwip_htons>
 80174da:	4603      	mov	r3, r0
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	f003 0303 	and.w	r3, r3, #3
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d001      	beq.n	80174ea <tcp_receive+0xac6>
 80174e6:	2301      	movs	r3, #1
 80174e8:	e000      	b.n	80174ec <tcp_receive+0xac8>
 80174ea:	2300      	movs	r3, #0
 80174ec:	1919      	adds	r1, r3, r4
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80174f2:	b28b      	uxth	r3, r1
 80174f4:	1ad3      	subs	r3, r2, r3
 80174f6:	b29a      	uxth	r2, r3
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7fc fe59 	bl	80141b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	891b      	ldrh	r3, [r3, #8]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d028      	beq.n	801755e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801750c:	4b0d      	ldr	r3, [pc, #52]	@ (8017544 <tcp_receive+0xb20>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d01d      	beq.n	8017550 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017514:	4b0b      	ldr	r3, [pc, #44]	@ (8017544 <tcp_receive+0xb20>)
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	68bb      	ldr	r3, [r7, #8]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	4619      	mov	r1, r3
 801751e:	4610      	mov	r0, r2
 8017520:	f7fc f802 	bl	8013528 <pbuf_cat>
 8017524:	e018      	b.n	8017558 <tcp_receive+0xb34>
 8017526:	bf00      	nop
 8017528:	2000c9ee 	.word	0x2000c9ee
 801752c:	2000c9e4 	.word	0x2000c9e4
 8017530:	2000c9c4 	.word	0x2000c9c4
 8017534:	0802157c 	.word	0x0802157c
 8017538:	0802195c 	.word	0x0802195c
 801753c:	080215c8 	.word	0x080215c8
 8017540:	08021998 	.word	0x08021998
 8017544:	2000c9f4 	.word	0x2000c9f4
 8017548:	2000c9f1 	.word	0x2000c9f1
 801754c:	080219b8 	.word	0x080219b8
            } else {
              recv_data = cseg->p;
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	4a70      	ldr	r2, [pc, #448]	@ (8017718 <tcp_receive+0xcf4>)
 8017556:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	2200      	movs	r2, #0
 801755c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	899b      	ldrh	r3, [r3, #12]
 8017564:	b29b      	uxth	r3, r3
 8017566:	4618      	mov	r0, r3
 8017568:	f7fa fb50 	bl	8011c0c <lwip_htons>
 801756c:	4603      	mov	r3, r0
 801756e:	b2db      	uxtb	r3, r3
 8017570:	f003 0301 	and.w	r3, r3, #1
 8017574:	2b00      	cmp	r3, #0
 8017576:	d00d      	beq.n	8017594 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017578:	4b68      	ldr	r3, [pc, #416]	@ (801771c <tcp_receive+0xcf8>)
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	f043 0320 	orr.w	r3, r3, #32
 8017580:	b2da      	uxtb	r2, r3
 8017582:	4b66      	ldr	r3, [pc, #408]	@ (801771c <tcp_receive+0xcf8>)
 8017584:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	7d1b      	ldrb	r3, [r3, #20]
 801758a:	2b04      	cmp	r3, #4
 801758c:	d102      	bne.n	8017594 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2207      	movs	r2, #7
 8017592:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	681a      	ldr	r2, [r3, #0]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801759c:	68b8      	ldr	r0, [r7, #8]
 801759e:	f7fd fb30 	bl	8014c02 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d008      	beq.n	80175bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	685a      	ldr	r2, [r3, #4]
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80175b6:	429a      	cmp	r2, r3
 80175b8:	f43f af43 	beq.w	8017442 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	8b5b      	ldrh	r3, [r3, #26]
 80175c0:	f003 0301 	and.w	r3, r3, #1
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d00e      	beq.n	80175e6 <tcp_receive+0xbc2>
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	8b5b      	ldrh	r3, [r3, #26]
 80175cc:	f023 0301 	bic.w	r3, r3, #1
 80175d0:	b29a      	uxth	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	835a      	strh	r2, [r3, #26]
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	8b5b      	ldrh	r3, [r3, #26]
 80175da:	f043 0302 	orr.w	r3, r3, #2
 80175de:	b29a      	uxth	r2, r3
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80175e4:	e187      	b.n	80178f6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	8b5b      	ldrh	r3, [r3, #26]
 80175ea:	f043 0301 	orr.w	r3, r3, #1
 80175ee:	b29a      	uxth	r2, r3
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80175f4:	e17f      	b.n	80178f6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d106      	bne.n	801760c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80175fe:	4848      	ldr	r0, [pc, #288]	@ (8017720 <tcp_receive+0xcfc>)
 8017600:	f7fd fb36 	bl	8014c70 <tcp_seg_copy>
 8017604:	4602      	mov	r2, r0
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	675a      	str	r2, [r3, #116]	@ 0x74
 801760a:	e16c      	b.n	80178e6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801760c:	2300      	movs	r3, #0
 801760e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017616:	e156      	b.n	80178c6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8017618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	685a      	ldr	r2, [r3, #4]
 801761e:	4b41      	ldr	r3, [pc, #260]	@ (8017724 <tcp_receive+0xd00>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	429a      	cmp	r2, r3
 8017624:	d11d      	bne.n	8017662 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017626:	4b3e      	ldr	r3, [pc, #248]	@ (8017720 <tcp_receive+0xcfc>)
 8017628:	891a      	ldrh	r2, [r3, #8]
 801762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801762c:	891b      	ldrh	r3, [r3, #8]
 801762e:	429a      	cmp	r2, r3
 8017630:	f240 814e 	bls.w	80178d0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017634:	483a      	ldr	r0, [pc, #232]	@ (8017720 <tcp_receive+0xcfc>)
 8017636:	f7fd fb1b 	bl	8014c70 <tcp_seg_copy>
 801763a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	2b00      	cmp	r3, #0
 8017640:	f000 8148 	beq.w	80178d4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017646:	2b00      	cmp	r3, #0
 8017648:	d003      	beq.n	8017652 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801764c:	697a      	ldr	r2, [r7, #20]
 801764e:	601a      	str	r2, [r3, #0]
 8017650:	e002      	b.n	8017658 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	697a      	ldr	r2, [r7, #20]
 8017656:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017658:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801765a:	6978      	ldr	r0, [r7, #20]
 801765c:	f7ff f8de 	bl	801681c <tcp_oos_insert_segment>
                }
                break;
 8017660:	e138      	b.n	80178d4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017664:	2b00      	cmp	r3, #0
 8017666:	d117      	bne.n	8017698 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017668:	4b2e      	ldr	r3, [pc, #184]	@ (8017724 <tcp_receive+0xd00>)
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801766e:	68db      	ldr	r3, [r3, #12]
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	1ad3      	subs	r3, r2, r3
 8017674:	2b00      	cmp	r3, #0
 8017676:	da57      	bge.n	8017728 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017678:	4829      	ldr	r0, [pc, #164]	@ (8017720 <tcp_receive+0xcfc>)
 801767a:	f7fd faf9 	bl	8014c70 <tcp_seg_copy>
 801767e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017680:	69bb      	ldr	r3, [r7, #24]
 8017682:	2b00      	cmp	r3, #0
 8017684:	f000 8128 	beq.w	80178d8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	69ba      	ldr	r2, [r7, #24]
 801768c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801768e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017690:	69b8      	ldr	r0, [r7, #24]
 8017692:	f7ff f8c3 	bl	801681c <tcp_oos_insert_segment>
                  }
                  break;
 8017696:	e11f      	b.n	80178d8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017698:	4b22      	ldr	r3, [pc, #136]	@ (8017724 <tcp_receive+0xd00>)
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	1ad3      	subs	r3, r2, r3
 80176a4:	3b01      	subs	r3, #1
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	db3e      	blt.n	8017728 <tcp_receive+0xd04>
 80176aa:	4b1e      	ldr	r3, [pc, #120]	@ (8017724 <tcp_receive+0xd00>)
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176b0:	68db      	ldr	r3, [r3, #12]
 80176b2:	685b      	ldr	r3, [r3, #4]
 80176b4:	1ad3      	subs	r3, r2, r3
 80176b6:	3301      	adds	r3, #1
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	dc35      	bgt.n	8017728 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80176bc:	4818      	ldr	r0, [pc, #96]	@ (8017720 <tcp_receive+0xcfc>)
 80176be:	f7fd fad7 	bl	8014c70 <tcp_seg_copy>
 80176c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	f000 8108 	beq.w	80178dc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80176cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176ce:	68db      	ldr	r3, [r3, #12]
 80176d0:	685b      	ldr	r3, [r3, #4]
 80176d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80176d4:	8912      	ldrh	r2, [r2, #8]
 80176d6:	441a      	add	r2, r3
 80176d8:	4b12      	ldr	r3, [pc, #72]	@ (8017724 <tcp_receive+0xd00>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	1ad3      	subs	r3, r2, r3
 80176de:	2b00      	cmp	r3, #0
 80176e0:	dd12      	ble.n	8017708 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80176e2:	4b10      	ldr	r3, [pc, #64]	@ (8017724 <tcp_receive+0xd00>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	b29a      	uxth	r2, r3
 80176e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176ea:	68db      	ldr	r3, [r3, #12]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	1ad3      	subs	r3, r2, r3
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80176f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176fa:	685a      	ldr	r2, [r3, #4]
 80176fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176fe:	891b      	ldrh	r3, [r3, #8]
 8017700:	4619      	mov	r1, r3
 8017702:	4610      	mov	r0, r2
 8017704:	f7fb fcbc 	bl	8013080 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801770a:	69fa      	ldr	r2, [r7, #28]
 801770c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801770e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017710:	69f8      	ldr	r0, [r7, #28]
 8017712:	f7ff f883 	bl	801681c <tcp_oos_insert_segment>
                  }
                  break;
 8017716:	e0e1      	b.n	80178dc <tcp_receive+0xeb8>
 8017718:	2000c9f4 	.word	0x2000c9f4
 801771c:	2000c9f1 	.word	0x2000c9f1
 8017720:	2000c9c4 	.word	0x2000c9c4
 8017724:	2000c9e4 	.word	0x2000c9e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801772a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	f040 80c5 	bne.w	80178c0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017736:	4b7f      	ldr	r3, [pc, #508]	@ (8017934 <tcp_receive+0xf10>)
 8017738:	681a      	ldr	r2, [r3, #0]
 801773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	685b      	ldr	r3, [r3, #4]
 8017740:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017742:	2b00      	cmp	r3, #0
 8017744:	f340 80bc 	ble.w	80178c0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801774a:	68db      	ldr	r3, [r3, #12]
 801774c:	899b      	ldrh	r3, [r3, #12]
 801774e:	b29b      	uxth	r3, r3
 8017750:	4618      	mov	r0, r3
 8017752:	f7fa fa5b 	bl	8011c0c <lwip_htons>
 8017756:	4603      	mov	r3, r0
 8017758:	b2db      	uxtb	r3, r3
 801775a:	f003 0301 	and.w	r3, r3, #1
 801775e:	2b00      	cmp	r3, #0
 8017760:	f040 80be 	bne.w	80178e0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017764:	4874      	ldr	r0, [pc, #464]	@ (8017938 <tcp_receive+0xf14>)
 8017766:	f7fd fa83 	bl	8014c70 <tcp_seg_copy>
 801776a:	4602      	mov	r2, r0
 801776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801776e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	f000 80b5 	beq.w	80178e4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017782:	8912      	ldrh	r2, [r2, #8]
 8017784:	441a      	add	r2, r3
 8017786:	4b6b      	ldr	r3, [pc, #428]	@ (8017934 <tcp_receive+0xf10>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	1ad3      	subs	r3, r2, r3
 801778c:	2b00      	cmp	r3, #0
 801778e:	dd12      	ble.n	80177b6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017790:	4b68      	ldr	r3, [pc, #416]	@ (8017934 <tcp_receive+0xf10>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	b29a      	uxth	r2, r3
 8017796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017798:	68db      	ldr	r3, [r3, #12]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	b29b      	uxth	r3, r3
 801779e:	1ad3      	subs	r3, r2, r3
 80177a0:	b29a      	uxth	r2, r3
 80177a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80177a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177a8:	685a      	ldr	r2, [r3, #4]
 80177aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177ac:	891b      	ldrh	r3, [r3, #8]
 80177ae:	4619      	mov	r1, r3
 80177b0:	4610      	mov	r0, r2
 80177b2:	f7fb fc65 	bl	8013080 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80177b6:	4b61      	ldr	r3, [pc, #388]	@ (801793c <tcp_receive+0xf18>)
 80177b8:	881b      	ldrh	r3, [r3, #0]
 80177ba:	461a      	mov	r2, r3
 80177bc:	4b5d      	ldr	r3, [pc, #372]	@ (8017934 <tcp_receive+0xf10>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	441a      	add	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177c6:	6879      	ldr	r1, [r7, #4]
 80177c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80177ca:	440b      	add	r3, r1
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	f340 8088 	ble.w	80178e4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80177d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	68db      	ldr	r3, [r3, #12]
 80177da:	899b      	ldrh	r3, [r3, #12]
 80177dc:	b29b      	uxth	r3, r3
 80177de:	4618      	mov	r0, r3
 80177e0:	f7fa fa14 	bl	8011c0c <lwip_htons>
 80177e4:	4603      	mov	r3, r0
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	f003 0301 	and.w	r3, r3, #1
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d021      	beq.n	8017834 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80177f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	899b      	ldrh	r3, [r3, #12]
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	b21b      	sxth	r3, r3
 80177fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017800:	b21c      	sxth	r4, r3
 8017802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	68db      	ldr	r3, [r3, #12]
 8017808:	899b      	ldrh	r3, [r3, #12]
 801780a:	b29b      	uxth	r3, r3
 801780c:	4618      	mov	r0, r3
 801780e:	f7fa f9fd 	bl	8011c0c <lwip_htons>
 8017812:	4603      	mov	r3, r0
 8017814:	b2db      	uxtb	r3, r3
 8017816:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801781a:	b29b      	uxth	r3, r3
 801781c:	4618      	mov	r0, r3
 801781e:	f7fa f9f5 	bl	8011c0c <lwip_htons>
 8017822:	4603      	mov	r3, r0
 8017824:	b21b      	sxth	r3, r3
 8017826:	4323      	orrs	r3, r4
 8017828:	b21a      	sxth	r2, r3
 801782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	b292      	uxth	r2, r2
 8017832:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017838:	b29a      	uxth	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801783e:	4413      	add	r3, r2
 8017840:	b299      	uxth	r1, r3
 8017842:	4b3c      	ldr	r3, [pc, #240]	@ (8017934 <tcp_receive+0xf10>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	b29a      	uxth	r2, r3
 8017848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	1a8a      	subs	r2, r1, r2
 801784e:	b292      	uxth	r2, r2
 8017850:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	685a      	ldr	r2, [r3, #4]
 8017858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	891b      	ldrh	r3, [r3, #8]
 801785e:	4619      	mov	r1, r3
 8017860:	4610      	mov	r0, r2
 8017862:	f7fb fc0d 	bl	8013080 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	891c      	ldrh	r4, [r3, #8]
 801786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	899b      	ldrh	r3, [r3, #12]
 8017874:	b29b      	uxth	r3, r3
 8017876:	4618      	mov	r0, r3
 8017878:	f7fa f9c8 	bl	8011c0c <lwip_htons>
 801787c:	4603      	mov	r3, r0
 801787e:	b2db      	uxtb	r3, r3
 8017880:	f003 0303 	and.w	r3, r3, #3
 8017884:	2b00      	cmp	r3, #0
 8017886:	d001      	beq.n	801788c <tcp_receive+0xe68>
 8017888:	2301      	movs	r3, #1
 801788a:	e000      	b.n	801788e <tcp_receive+0xe6a>
 801788c:	2300      	movs	r3, #0
 801788e:	4423      	add	r3, r4
 8017890:	b29a      	uxth	r2, r3
 8017892:	4b2a      	ldr	r3, [pc, #168]	@ (801793c <tcp_receive+0xf18>)
 8017894:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017896:	4b29      	ldr	r3, [pc, #164]	@ (801793c <tcp_receive+0xf18>)
 8017898:	881b      	ldrh	r3, [r3, #0]
 801789a:	461a      	mov	r2, r3
 801789c:	4b25      	ldr	r3, [pc, #148]	@ (8017934 <tcp_receive+0xf10>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	441a      	add	r2, r3
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178a6:	6879      	ldr	r1, [r7, #4]
 80178a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80178aa:	440b      	add	r3, r1
 80178ac:	429a      	cmp	r2, r3
 80178ae:	d019      	beq.n	80178e4 <tcp_receive+0xec0>
 80178b0:	4b23      	ldr	r3, [pc, #140]	@ (8017940 <tcp_receive+0xf1c>)
 80178b2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80178b6:	4923      	ldr	r1, [pc, #140]	@ (8017944 <tcp_receive+0xf20>)
 80178b8:	4823      	ldr	r0, [pc, #140]	@ (8017948 <tcp_receive+0xf24>)
 80178ba:	f005 fe1f 	bl	801d4fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80178be:	e011      	b.n	80178e4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80178c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80178c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	f47f aea5 	bne.w	8017618 <tcp_receive+0xbf4>
 80178ce:	e00a      	b.n	80178e6 <tcp_receive+0xec2>
                break;
 80178d0:	bf00      	nop
 80178d2:	e008      	b.n	80178e6 <tcp_receive+0xec2>
                break;
 80178d4:	bf00      	nop
 80178d6:	e006      	b.n	80178e6 <tcp_receive+0xec2>
                  break;
 80178d8:	bf00      	nop
 80178da:	e004      	b.n	80178e6 <tcp_receive+0xec2>
                  break;
 80178dc:	bf00      	nop
 80178de:	e002      	b.n	80178e6 <tcp_receive+0xec2>
                  break;
 80178e0:	bf00      	nop
 80178e2:	e000      	b.n	80178e6 <tcp_receive+0xec2>
                break;
 80178e4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f001 fe88 	bl	80195fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80178ec:	e003      	b.n	80178f6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f001 fe84 	bl	80195fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80178f4:	e01a      	b.n	801792c <tcp_receive+0xf08>
 80178f6:	e019      	b.n	801792c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80178f8:	4b0e      	ldr	r3, [pc, #56]	@ (8017934 <tcp_receive+0xf10>)
 80178fa:	681a      	ldr	r2, [r3, #0]
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017900:	1ad3      	subs	r3, r2, r3
 8017902:	2b00      	cmp	r3, #0
 8017904:	db0a      	blt.n	801791c <tcp_receive+0xef8>
 8017906:	4b0b      	ldr	r3, [pc, #44]	@ (8017934 <tcp_receive+0xf10>)
 8017908:	681a      	ldr	r2, [r3, #0]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801790e:	6879      	ldr	r1, [r7, #4]
 8017910:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017912:	440b      	add	r3, r1
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	3301      	adds	r3, #1
 8017918:	2b00      	cmp	r3, #0
 801791a:	dd07      	ble.n	801792c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	8b5b      	ldrh	r3, [r3, #26]
 8017920:	f043 0302 	orr.w	r3, r3, #2
 8017924:	b29a      	uxth	r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801792a:	e7ff      	b.n	801792c <tcp_receive+0xf08>
 801792c:	bf00      	nop
 801792e:	3750      	adds	r7, #80	@ 0x50
 8017930:	46bd      	mov	sp, r7
 8017932:	bdb0      	pop	{r4, r5, r7, pc}
 8017934:	2000c9e4 	.word	0x2000c9e4
 8017938:	2000c9c4 	.word	0x2000c9c4
 801793c:	2000c9ee 	.word	0x2000c9ee
 8017940:	0802157c 	.word	0x0802157c
 8017944:	08021924 	.word	0x08021924
 8017948:	080215c8 	.word	0x080215c8

0801794c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801794c:	b480      	push	{r7}
 801794e:	b083      	sub	sp, #12
 8017950:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017952:	4b15      	ldr	r3, [pc, #84]	@ (80179a8 <tcp_get_next_optbyte+0x5c>)
 8017954:	881b      	ldrh	r3, [r3, #0]
 8017956:	1c5a      	adds	r2, r3, #1
 8017958:	b291      	uxth	r1, r2
 801795a:	4a13      	ldr	r2, [pc, #76]	@ (80179a8 <tcp_get_next_optbyte+0x5c>)
 801795c:	8011      	strh	r1, [r2, #0]
 801795e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017960:	4b12      	ldr	r3, [pc, #72]	@ (80179ac <tcp_get_next_optbyte+0x60>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d004      	beq.n	8017972 <tcp_get_next_optbyte+0x26>
 8017968:	4b11      	ldr	r3, [pc, #68]	@ (80179b0 <tcp_get_next_optbyte+0x64>)
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	88fa      	ldrh	r2, [r7, #6]
 801796e:	429a      	cmp	r2, r3
 8017970:	d208      	bcs.n	8017984 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017972:	4b10      	ldr	r3, [pc, #64]	@ (80179b4 <tcp_get_next_optbyte+0x68>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	3314      	adds	r3, #20
 8017978:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801797a:	88fb      	ldrh	r3, [r7, #6]
 801797c:	683a      	ldr	r2, [r7, #0]
 801797e:	4413      	add	r3, r2
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	e00b      	b.n	801799c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017984:	88fb      	ldrh	r3, [r7, #6]
 8017986:	b2da      	uxtb	r2, r3
 8017988:	4b09      	ldr	r3, [pc, #36]	@ (80179b0 <tcp_get_next_optbyte+0x64>)
 801798a:	881b      	ldrh	r3, [r3, #0]
 801798c:	b2db      	uxtb	r3, r3
 801798e:	1ad3      	subs	r3, r2, r3
 8017990:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017992:	4b06      	ldr	r3, [pc, #24]	@ (80179ac <tcp_get_next_optbyte+0x60>)
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	797b      	ldrb	r3, [r7, #5]
 8017998:	4413      	add	r3, r2
 801799a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801799c:	4618      	mov	r0, r3
 801799e:	370c      	adds	r7, #12
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr
 80179a8:	2000c9e0 	.word	0x2000c9e0
 80179ac:	2000c9dc 	.word	0x2000c9dc
 80179b0:	2000c9da 	.word	0x2000c9da
 80179b4:	2000c9d4 	.word	0x2000c9d4

080179b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d106      	bne.n	80179d4 <tcp_parseopt+0x1c>
 80179c6:	4b32      	ldr	r3, [pc, #200]	@ (8017a90 <tcp_parseopt+0xd8>)
 80179c8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80179cc:	4931      	ldr	r1, [pc, #196]	@ (8017a94 <tcp_parseopt+0xdc>)
 80179ce:	4832      	ldr	r0, [pc, #200]	@ (8017a98 <tcp_parseopt+0xe0>)
 80179d0:	f005 fd94 	bl	801d4fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80179d4:	4b31      	ldr	r3, [pc, #196]	@ (8017a9c <tcp_parseopt+0xe4>)
 80179d6:	881b      	ldrh	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d056      	beq.n	8017a8a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80179dc:	4b30      	ldr	r3, [pc, #192]	@ (8017aa0 <tcp_parseopt+0xe8>)
 80179de:	2200      	movs	r2, #0
 80179e0:	801a      	strh	r2, [r3, #0]
 80179e2:	e046      	b.n	8017a72 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80179e4:	f7ff ffb2 	bl	801794c <tcp_get_next_optbyte>
 80179e8:	4603      	mov	r3, r0
 80179ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80179ec:	7bfb      	ldrb	r3, [r7, #15]
 80179ee:	2b02      	cmp	r3, #2
 80179f0:	d006      	beq.n	8017a00 <tcp_parseopt+0x48>
 80179f2:	2b02      	cmp	r3, #2
 80179f4:	dc2a      	bgt.n	8017a4c <tcp_parseopt+0x94>
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d042      	beq.n	8017a80 <tcp_parseopt+0xc8>
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d038      	beq.n	8017a70 <tcp_parseopt+0xb8>
 80179fe:	e025      	b.n	8017a4c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017a00:	f7ff ffa4 	bl	801794c <tcp_get_next_optbyte>
 8017a04:	4603      	mov	r3, r0
 8017a06:	2b04      	cmp	r3, #4
 8017a08:	d13c      	bne.n	8017a84 <tcp_parseopt+0xcc>
 8017a0a:	4b25      	ldr	r3, [pc, #148]	@ (8017aa0 <tcp_parseopt+0xe8>)
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	3301      	adds	r3, #1
 8017a10:	4a22      	ldr	r2, [pc, #136]	@ (8017a9c <tcp_parseopt+0xe4>)
 8017a12:	8812      	ldrh	r2, [r2, #0]
 8017a14:	4293      	cmp	r3, r2
 8017a16:	da35      	bge.n	8017a84 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017a18:	f7ff ff98 	bl	801794c <tcp_get_next_optbyte>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	021b      	lsls	r3, r3, #8
 8017a20:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017a22:	f7ff ff93 	bl	801794c <tcp_get_next_optbyte>
 8017a26:	4603      	mov	r3, r0
 8017a28:	461a      	mov	r2, r3
 8017a2a:	89bb      	ldrh	r3, [r7, #12]
 8017a2c:	4313      	orrs	r3, r2
 8017a2e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017a30:	89bb      	ldrh	r3, [r7, #12]
 8017a32:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8017a36:	d804      	bhi.n	8017a42 <tcp_parseopt+0x8a>
 8017a38:	89bb      	ldrh	r3, [r7, #12]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d001      	beq.n	8017a42 <tcp_parseopt+0x8a>
 8017a3e:	89ba      	ldrh	r2, [r7, #12]
 8017a40:	e001      	b.n	8017a46 <tcp_parseopt+0x8e>
 8017a42:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8017a4a:	e012      	b.n	8017a72 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017a4c:	f7ff ff7e 	bl	801794c <tcp_get_next_optbyte>
 8017a50:	4603      	mov	r3, r0
 8017a52:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017a54:	7afb      	ldrb	r3, [r7, #11]
 8017a56:	2b01      	cmp	r3, #1
 8017a58:	d916      	bls.n	8017a88 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017a5a:	7afb      	ldrb	r3, [r7, #11]
 8017a5c:	b29a      	uxth	r2, r3
 8017a5e:	4b10      	ldr	r3, [pc, #64]	@ (8017aa0 <tcp_parseopt+0xe8>)
 8017a60:	881b      	ldrh	r3, [r3, #0]
 8017a62:	4413      	add	r3, r2
 8017a64:	b29b      	uxth	r3, r3
 8017a66:	3b02      	subs	r3, #2
 8017a68:	b29a      	uxth	r2, r3
 8017a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8017aa0 <tcp_parseopt+0xe8>)
 8017a6c:	801a      	strh	r2, [r3, #0]
 8017a6e:	e000      	b.n	8017a72 <tcp_parseopt+0xba>
          break;
 8017a70:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017a72:	4b0b      	ldr	r3, [pc, #44]	@ (8017aa0 <tcp_parseopt+0xe8>)
 8017a74:	881a      	ldrh	r2, [r3, #0]
 8017a76:	4b09      	ldr	r3, [pc, #36]	@ (8017a9c <tcp_parseopt+0xe4>)
 8017a78:	881b      	ldrh	r3, [r3, #0]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d3b2      	bcc.n	80179e4 <tcp_parseopt+0x2c>
 8017a7e:	e004      	b.n	8017a8a <tcp_parseopt+0xd2>
          return;
 8017a80:	bf00      	nop
 8017a82:	e002      	b.n	8017a8a <tcp_parseopt+0xd2>
            return;
 8017a84:	bf00      	nop
 8017a86:	e000      	b.n	8017a8a <tcp_parseopt+0xd2>
            return;
 8017a88:	bf00      	nop
      }
    }
  }
}
 8017a8a:	3710      	adds	r7, #16
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	0802157c 	.word	0x0802157c
 8017a94:	080219e0 	.word	0x080219e0
 8017a98:	080215c8 	.word	0x080215c8
 8017a9c:	2000c9d8 	.word	0x2000c9d8
 8017aa0:	2000c9e0 	.word	0x2000c9e0

08017aa4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017aa8:	4b05      	ldr	r3, [pc, #20]	@ (8017ac0 <tcp_trigger_input_pcb_close+0x1c>)
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	f043 0310 	orr.w	r3, r3, #16
 8017ab0:	b2da      	uxtb	r2, r3
 8017ab2:	4b03      	ldr	r3, [pc, #12]	@ (8017ac0 <tcp_trigger_input_pcb_close+0x1c>)
 8017ab4:	701a      	strb	r2, [r3, #0]
}
 8017ab6:	bf00      	nop
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abe:	4770      	bx	lr
 8017ac0:	2000c9f1 	.word	0x2000c9f1

08017ac4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d00a      	beq.n	8017aec <tcp_route+0x28>
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	7a1b      	ldrb	r3, [r3, #8]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d006      	beq.n	8017aec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	7a1b      	ldrb	r3, [r3, #8]
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7fb f8c4 	bl	8012c70 <netif_get_by_index>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	e003      	b.n	8017af4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f003 fad1 	bl	801b094 <ip4_route>
 8017af2:	4603      	mov	r3, r0
  }
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017afc:	b590      	push	{r4, r7, lr}
 8017afe:	b087      	sub	sp, #28
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	60b9      	str	r1, [r7, #8]
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	4613      	mov	r3, r2
 8017b0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d105      	bne.n	8017b1e <tcp_create_segment+0x22>
 8017b12:	4b43      	ldr	r3, [pc, #268]	@ (8017c20 <tcp_create_segment+0x124>)
 8017b14:	22a3      	movs	r2, #163	@ 0xa3
 8017b16:	4943      	ldr	r1, [pc, #268]	@ (8017c24 <tcp_create_segment+0x128>)
 8017b18:	4843      	ldr	r0, [pc, #268]	@ (8017c28 <tcp_create_segment+0x12c>)
 8017b1a:	f005 fcef 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d105      	bne.n	8017b30 <tcp_create_segment+0x34>
 8017b24:	4b3e      	ldr	r3, [pc, #248]	@ (8017c20 <tcp_create_segment+0x124>)
 8017b26:	22a4      	movs	r2, #164	@ 0xa4
 8017b28:	4940      	ldr	r1, [pc, #256]	@ (8017c2c <tcp_create_segment+0x130>)
 8017b2a:	483f      	ldr	r0, [pc, #252]	@ (8017c28 <tcp_create_segment+0x12c>)
 8017b2c:	f005 fce6 	bl	801d4fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017b30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017b34:	009b      	lsls	r3, r3, #2
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	f003 0304 	and.w	r3, r3, #4
 8017b3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017b3e:	2003      	movs	r0, #3
 8017b40:	f7fa fd3c 	bl	80125bc <memp_malloc>
 8017b44:	6138      	str	r0, [r7, #16]
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d104      	bne.n	8017b56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017b4c:	68b8      	ldr	r0, [r7, #8]
 8017b4e:	f7fb fc1d 	bl	801338c <pbuf_free>
    return NULL;
 8017b52:	2300      	movs	r3, #0
 8017b54:	e060      	b.n	8017c18 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017b5c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	2200      	movs	r2, #0
 8017b62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	68ba      	ldr	r2, [r7, #8]
 8017b68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	891a      	ldrh	r2, [r3, #8]
 8017b6e:	7dfb      	ldrb	r3, [r7, #23]
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d205      	bcs.n	8017b82 <tcp_create_segment+0x86>
 8017b76:	4b2a      	ldr	r3, [pc, #168]	@ (8017c20 <tcp_create_segment+0x124>)
 8017b78:	22b0      	movs	r2, #176	@ 0xb0
 8017b7a:	492d      	ldr	r1, [pc, #180]	@ (8017c30 <tcp_create_segment+0x134>)
 8017b7c:	482a      	ldr	r0, [pc, #168]	@ (8017c28 <tcp_create_segment+0x12c>)
 8017b7e:	f005 fcbd 	bl	801d4fc <iprintf>
  seg->len = p->tot_len - optlen;
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	891a      	ldrh	r2, [r3, #8]
 8017b86:	7dfb      	ldrb	r3, [r7, #23]
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	1ad3      	subs	r3, r2, r3
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017b92:	2114      	movs	r1, #20
 8017b94:	68b8      	ldr	r0, [r7, #8]
 8017b96:	f7fb fb63 	bl	8013260 <pbuf_add_header>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d004      	beq.n	8017baa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017ba0:	6938      	ldr	r0, [r7, #16]
 8017ba2:	f7fd f82e 	bl	8014c02 <tcp_seg_free>
    return NULL;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	e036      	b.n	8017c18 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	685a      	ldr	r2, [r3, #4]
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	8ada      	ldrh	r2, [r3, #22]
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	68dc      	ldr	r4, [r3, #12]
 8017bbc:	4610      	mov	r0, r2
 8017bbe:	f7fa f825 	bl	8011c0c <lwip_htons>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	8b1a      	ldrh	r2, [r3, #24]
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	68dc      	ldr	r4, [r3, #12]
 8017bce:	4610      	mov	r0, r2
 8017bd0:	f7fa f81c 	bl	8011c0c <lwip_htons>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	68dc      	ldr	r4, [r3, #12]
 8017bdc:	6838      	ldr	r0, [r7, #0]
 8017bde:	f7fa f82b 	bl	8011c38 <lwip_htonl>
 8017be2:	4603      	mov	r3, r0
 8017be4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017be6:	7dfb      	ldrb	r3, [r7, #23]
 8017be8:	089b      	lsrs	r3, r3, #2
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	3305      	adds	r3, #5
 8017bee:	b29b      	uxth	r3, r3
 8017bf0:	031b      	lsls	r3, r3, #12
 8017bf2:	b29a      	uxth	r2, r3
 8017bf4:	79fb      	ldrb	r3, [r7, #7]
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	b29a      	uxth	r2, r3
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	68dc      	ldr	r4, [r3, #12]
 8017c00:	4610      	mov	r0, r2
 8017c02:	f7fa f803 	bl	8011c0c <lwip_htons>
 8017c06:	4603      	mov	r3, r0
 8017c08:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	68db      	ldr	r3, [r3, #12]
 8017c0e:	2200      	movs	r2, #0
 8017c10:	749a      	strb	r2, [r3, #18]
 8017c12:	2200      	movs	r2, #0
 8017c14:	74da      	strb	r2, [r3, #19]
  return seg;
 8017c16:	693b      	ldr	r3, [r7, #16]
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	371c      	adds	r7, #28
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd90      	pop	{r4, r7, pc}
 8017c20:	080219fc 	.word	0x080219fc
 8017c24:	08021a30 	.word	0x08021a30
 8017c28:	08021a50 	.word	0x08021a50
 8017c2c:	08021a78 	.word	0x08021a78
 8017c30:	08021a9c 	.word	0x08021a9c

08017c34 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b086      	sub	sp, #24
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	607b      	str	r3, [r7, #4]
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	73fb      	strb	r3, [r7, #15]
 8017c40:	460b      	mov	r3, r1
 8017c42:	81bb      	strh	r3, [r7, #12]
 8017c44:	4613      	mov	r3, r2
 8017c46:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017c48:	89bb      	ldrh	r3, [r7, #12]
 8017c4a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d105      	bne.n	8017c5e <tcp_pbuf_prealloc+0x2a>
 8017c52:	4b30      	ldr	r3, [pc, #192]	@ (8017d14 <tcp_pbuf_prealloc+0xe0>)
 8017c54:	22e8      	movs	r2, #232	@ 0xe8
 8017c56:	4930      	ldr	r1, [pc, #192]	@ (8017d18 <tcp_pbuf_prealloc+0xe4>)
 8017c58:	4830      	ldr	r0, [pc, #192]	@ (8017d1c <tcp_pbuf_prealloc+0xe8>)
 8017c5a:	f005 fc4f 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017c5e:	6a3b      	ldr	r3, [r7, #32]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d105      	bne.n	8017c70 <tcp_pbuf_prealloc+0x3c>
 8017c64:	4b2b      	ldr	r3, [pc, #172]	@ (8017d14 <tcp_pbuf_prealloc+0xe0>)
 8017c66:	22e9      	movs	r2, #233	@ 0xe9
 8017c68:	492d      	ldr	r1, [pc, #180]	@ (8017d20 <tcp_pbuf_prealloc+0xec>)
 8017c6a:	482c      	ldr	r0, [pc, #176]	@ (8017d1c <tcp_pbuf_prealloc+0xe8>)
 8017c6c:	f005 fc46 	bl	801d4fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017c70:	89ba      	ldrh	r2, [r7, #12]
 8017c72:	897b      	ldrh	r3, [r7, #10]
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d221      	bcs.n	8017cbc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017c78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017c7c:	f003 0302 	and.w	r3, r3, #2
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d111      	bne.n	8017ca8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017c84:	6a3b      	ldr	r3, [r7, #32]
 8017c86:	8b5b      	ldrh	r3, [r3, #26]
 8017c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d115      	bne.n	8017cbc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017c90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d007      	beq.n	8017ca8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017c98:	6a3b      	ldr	r3, [r7, #32]
 8017c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d103      	bne.n	8017ca8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017ca0:	6a3b      	ldr	r3, [r7, #32]
 8017ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d009      	beq.n	8017cbc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017ca8:	89bb      	ldrh	r3, [r7, #12]
 8017caa:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017cae:	f023 0203 	bic.w	r2, r3, #3
 8017cb2:	897b      	ldrh	r3, [r7, #10]
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	bf28      	it	cs
 8017cb8:	4613      	movcs	r3, r2
 8017cba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017cbc:	8af9      	ldrh	r1, [r7, #22]
 8017cbe:	7bfb      	ldrb	r3, [r7, #15]
 8017cc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7fb f87d 	bl	8012dc4 <pbuf_alloc>
 8017cca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017ccc:	693b      	ldr	r3, [r7, #16]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d101      	bne.n	8017cd6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	e019      	b.n	8017d0a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d006      	beq.n	8017cec <tcp_pbuf_prealloc+0xb8>
 8017cde:	4b0d      	ldr	r3, [pc, #52]	@ (8017d14 <tcp_pbuf_prealloc+0xe0>)
 8017ce0:	f240 120b 	movw	r2, #267	@ 0x10b
 8017ce4:	490f      	ldr	r1, [pc, #60]	@ (8017d24 <tcp_pbuf_prealloc+0xf0>)
 8017ce6:	480d      	ldr	r0, [pc, #52]	@ (8017d1c <tcp_pbuf_prealloc+0xe8>)
 8017ce8:	f005 fc08 	bl	801d4fc <iprintf>
  *oversize = p->len - length;
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	895a      	ldrh	r2, [r3, #10]
 8017cf0:	89bb      	ldrh	r3, [r7, #12]
 8017cf2:	1ad3      	subs	r3, r2, r3
 8017cf4:	b29a      	uxth	r2, r3
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	89ba      	ldrh	r2, [r7, #12]
 8017cfe:	811a      	strh	r2, [r3, #8]
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	891a      	ldrh	r2, [r3, #8]
 8017d04:	693b      	ldr	r3, [r7, #16]
 8017d06:	815a      	strh	r2, [r3, #10]
  return p;
 8017d08:	693b      	ldr	r3, [r7, #16]
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3718      	adds	r7, #24
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	080219fc 	.word	0x080219fc
 8017d18:	08021ab4 	.word	0x08021ab4
 8017d1c:	08021a50 	.word	0x08021a50
 8017d20:	08021ad8 	.word	0x08021ad8
 8017d24:	08021af8 	.word	0x08021af8

08017d28 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	460b      	mov	r3, r1
 8017d32:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d106      	bne.n	8017d48 <tcp_write_checks+0x20>
 8017d3a:	4b33      	ldr	r3, [pc, #204]	@ (8017e08 <tcp_write_checks+0xe0>)
 8017d3c:	f240 1233 	movw	r2, #307	@ 0x133
 8017d40:	4932      	ldr	r1, [pc, #200]	@ (8017e0c <tcp_write_checks+0xe4>)
 8017d42:	4833      	ldr	r0, [pc, #204]	@ (8017e10 <tcp_write_checks+0xe8>)
 8017d44:	f005 fbda 	bl	801d4fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	7d1b      	ldrb	r3, [r3, #20]
 8017d4c:	2b04      	cmp	r3, #4
 8017d4e:	d00e      	beq.n	8017d6e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017d54:	2b07      	cmp	r3, #7
 8017d56:	d00a      	beq.n	8017d6e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017d5c:	2b02      	cmp	r3, #2
 8017d5e:	d006      	beq.n	8017d6e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017d64:	2b03      	cmp	r3, #3
 8017d66:	d002      	beq.n	8017d6e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017d68:	f06f 030a 	mvn.w	r3, #10
 8017d6c:	e048      	b.n	8017e00 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017d6e:	887b      	ldrh	r3, [r7, #2]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d101      	bne.n	8017d78 <tcp_write_checks+0x50>
    return ERR_OK;
 8017d74:	2300      	movs	r3, #0
 8017d76:	e043      	b.n	8017e00 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017d7e:	887a      	ldrh	r2, [r7, #2]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d909      	bls.n	8017d98 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	8b5b      	ldrh	r3, [r3, #26]
 8017d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d8c:	b29a      	uxth	r2, r3
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017d92:	f04f 33ff 	mov.w	r3, #4294967295
 8017d96:	e033      	b.n	8017e00 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017d9e:	2b08      	cmp	r3, #8
 8017da0:	d909      	bls.n	8017db6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	8b5b      	ldrh	r3, [r3, #26]
 8017da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017db0:	f04f 33ff 	mov.w	r3, #4294967295
 8017db4:	e024      	b.n	8017e00 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d00f      	beq.n	8017de0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d11a      	bne.n	8017dfe <tcp_write_checks+0xd6>
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d116      	bne.n	8017dfe <tcp_write_checks+0xd6>
 8017dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8017e08 <tcp_write_checks+0xe0>)
 8017dd2:	f240 1255 	movw	r2, #341	@ 0x155
 8017dd6:	490f      	ldr	r1, [pc, #60]	@ (8017e14 <tcp_write_checks+0xec>)
 8017dd8:	480d      	ldr	r0, [pc, #52]	@ (8017e10 <tcp_write_checks+0xe8>)
 8017dda:	f005 fb8f 	bl	801d4fc <iprintf>
 8017dde:	e00e      	b.n	8017dfe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d103      	bne.n	8017df0 <tcp_write_checks+0xc8>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d006      	beq.n	8017dfe <tcp_write_checks+0xd6>
 8017df0:	4b05      	ldr	r3, [pc, #20]	@ (8017e08 <tcp_write_checks+0xe0>)
 8017df2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8017df6:	4908      	ldr	r1, [pc, #32]	@ (8017e18 <tcp_write_checks+0xf0>)
 8017df8:	4805      	ldr	r0, [pc, #20]	@ (8017e10 <tcp_write_checks+0xe8>)
 8017dfa:	f005 fb7f 	bl	801d4fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017dfe:	2300      	movs	r3, #0
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3708      	adds	r7, #8
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}
 8017e08:	080219fc 	.word	0x080219fc
 8017e0c:	08021b0c 	.word	0x08021b0c
 8017e10:	08021a50 	.word	0x08021a50
 8017e14:	08021b2c 	.word	0x08021b2c
 8017e18:	08021b68 	.word	0x08021b68

08017e1c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017e1c:	b590      	push	{r4, r7, lr}
 8017e1e:	b09b      	sub	sp, #108	@ 0x6c
 8017e20:	af04      	add	r7, sp, #16
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	4611      	mov	r1, r2
 8017e28:	461a      	mov	r2, r3
 8017e2a:	460b      	mov	r3, r1
 8017e2c:	80fb      	strh	r3, [r7, #6]
 8017e2e:	4613      	mov	r3, r2
 8017e30:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017e32:	2300      	movs	r3, #0
 8017e34:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017e36:	2300      	movs	r3, #0
 8017e38:	653b      	str	r3, [r7, #80]	@ 0x50
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017e3e:	2300      	movs	r3, #0
 8017e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017e42:	2300      	movs	r3, #0
 8017e44:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017e46:	2300      	movs	r3, #0
 8017e48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017e52:	2300      	movs	r3, #0
 8017e54:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017e56:	2300      	movs	r3, #0
 8017e58:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d109      	bne.n	8017e78 <tcp_write+0x5c>
 8017e64:	4ba4      	ldr	r3, [pc, #656]	@ (80180f8 <tcp_write+0x2dc>)
 8017e66:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8017e6a:	49a4      	ldr	r1, [pc, #656]	@ (80180fc <tcp_write+0x2e0>)
 8017e6c:	48a4      	ldr	r0, [pc, #656]	@ (8018100 <tcp_write+0x2e4>)
 8017e6e:	f005 fb45 	bl	801d4fc <iprintf>
 8017e72:	f06f 030f 	mvn.w	r3, #15
 8017e76:	e32a      	b.n	80184ce <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017e7e:	085b      	lsrs	r3, r3, #1
 8017e80:	b29a      	uxth	r2, r3
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e86:	4293      	cmp	r3, r2
 8017e88:	bf28      	it	cs
 8017e8a:	4613      	movcs	r3, r2
 8017e8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d102      	bne.n	8017e9a <tcp_write+0x7e>
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e98:	e000      	b.n	8017e9c <tcp_write+0x80>
 8017e9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d109      	bne.n	8017eb8 <tcp_write+0x9c>
 8017ea4:	4b94      	ldr	r3, [pc, #592]	@ (80180f8 <tcp_write+0x2dc>)
 8017ea6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8017eaa:	4996      	ldr	r1, [pc, #600]	@ (8018104 <tcp_write+0x2e8>)
 8017eac:	4894      	ldr	r0, [pc, #592]	@ (8018100 <tcp_write+0x2e4>)
 8017eae:	f005 fb25 	bl	801d4fc <iprintf>
 8017eb2:	f06f 030f 	mvn.w	r3, #15
 8017eb6:	e30a      	b.n	80184ce <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017eb8:	88fb      	ldrh	r3, [r7, #6]
 8017eba:	4619      	mov	r1, r3
 8017ebc:	68f8      	ldr	r0, [r7, #12]
 8017ebe:	f7ff ff33 	bl	8017d28 <tcp_write_checks>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8017ec8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d002      	beq.n	8017ed6 <tcp_write+0xba>
    return err;
 8017ed0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017ed4:	e2fb      	b.n	80184ce <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017edc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	f000 80f6 	beq.w	80180dc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8017ef6:	e002      	b.n	8017efe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d1f8      	bne.n	8017ef8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f08:	7a9b      	ldrb	r3, [r3, #10]
 8017f0a:	009b      	lsls	r3, r3, #2
 8017f0c:	b29b      	uxth	r3, r3
 8017f0e:	f003 0304 	and.w	r3, r3, #4
 8017f12:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017f14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f18:	891b      	ldrh	r3, [r3, #8]
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	8c3b      	ldrh	r3, [r7, #32]
 8017f1e:	440b      	add	r3, r1
 8017f20:	429a      	cmp	r2, r3
 8017f22:	da06      	bge.n	8017f32 <tcp_write+0x116>
 8017f24:	4b74      	ldr	r3, [pc, #464]	@ (80180f8 <tcp_write+0x2dc>)
 8017f26:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017f2a:	4977      	ldr	r1, [pc, #476]	@ (8018108 <tcp_write+0x2ec>)
 8017f2c:	4874      	ldr	r0, [pc, #464]	@ (8018100 <tcp_write+0x2e4>)
 8017f2e:	f005 fae5 	bl	801d4fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f34:	891a      	ldrh	r2, [r3, #8]
 8017f36:	8c3b      	ldrh	r3, [r7, #32]
 8017f38:	4413      	add	r3, r2
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f3e:	1ad3      	subs	r3, r2, r3
 8017f40:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017f48:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017f4a:	8a7b      	ldrh	r3, [r7, #18]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d026      	beq.n	8017f9e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017f50:	8a7b      	ldrh	r3, [r7, #18]
 8017f52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d206      	bcs.n	8017f66 <tcp_write+0x14a>
 8017f58:	4b67      	ldr	r3, [pc, #412]	@ (80180f8 <tcp_write+0x2dc>)
 8017f5a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017f5e:	496b      	ldr	r1, [pc, #428]	@ (801810c <tcp_write+0x2f0>)
 8017f60:	4867      	ldr	r0, [pc, #412]	@ (8018100 <tcp_write+0x2e4>)
 8017f62:	f005 facb 	bl	801d4fc <iprintf>
      seg = last_unsent;
 8017f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017f6a:	8a7b      	ldrh	r3, [r7, #18]
 8017f6c:	88fa      	ldrh	r2, [r7, #6]
 8017f6e:	4293      	cmp	r3, r2
 8017f70:	bf28      	it	cs
 8017f72:	4613      	movcs	r3, r2
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	bf28      	it	cs
 8017f7c:	4613      	movcs	r3, r2
 8017f7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017f80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f86:	4413      	add	r3, r2
 8017f88:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017f8c:	8a7a      	ldrh	r2, [r7, #18]
 8017f8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f90:	1ad3      	subs	r3, r2, r3
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017f96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017f98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f9a:	1ad3      	subs	r3, r2, r3
 8017f9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017f9e:	8a7b      	ldrh	r3, [r7, #18]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d00b      	beq.n	8017fbc <tcp_write+0x1a0>
 8017fa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017fa8:	88fb      	ldrh	r3, [r7, #6]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d006      	beq.n	8017fbc <tcp_write+0x1a0>
 8017fae:	4b52      	ldr	r3, [pc, #328]	@ (80180f8 <tcp_write+0x2dc>)
 8017fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017fb4:	4956      	ldr	r1, [pc, #344]	@ (8018110 <tcp_write+0x2f4>)
 8017fb6:	4852      	ldr	r0, [pc, #328]	@ (8018100 <tcp_write+0x2e4>)
 8017fb8:	f005 faa0 	bl	801d4fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017fbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017fc0:	88fb      	ldrh	r3, [r7, #6]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	f080 8167 	bcs.w	8018296 <tcp_write+0x47a>
 8017fc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	f000 8163 	beq.w	8018296 <tcp_write+0x47a>
 8017fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fd2:	891b      	ldrh	r3, [r3, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f000 815e 	beq.w	8018296 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017fda:	88fa      	ldrh	r2, [r7, #6]
 8017fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017fe0:	1ad2      	subs	r2, r2, r3
 8017fe2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	bfa8      	it	ge
 8017fe8:	4613      	movge	r3, r2
 8017fea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fee:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017ff0:	797b      	ldrb	r3, [r7, #5]
 8017ff2:	f003 0301 	and.w	r3, r3, #1
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d027      	beq.n	801804a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017ffa:	f107 0012 	add.w	r0, r7, #18
 8017ffe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018000:	8bf9      	ldrh	r1, [r7, #30]
 8018002:	2301      	movs	r3, #1
 8018004:	9302      	str	r3, [sp, #8]
 8018006:	797b      	ldrb	r3, [r7, #5]
 8018008:	9301      	str	r3, [sp, #4]
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	9300      	str	r3, [sp, #0]
 801800e:	4603      	mov	r3, r0
 8018010:	2000      	movs	r0, #0
 8018012:	f7ff fe0f 	bl	8017c34 <tcp_pbuf_prealloc>
 8018016:	6578      	str	r0, [r7, #84]	@ 0x54
 8018018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801801a:	2b00      	cmp	r3, #0
 801801c:	f000 8225 	beq.w	801846a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018022:	6858      	ldr	r0, [r3, #4]
 8018024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018028:	68ba      	ldr	r2, [r7, #8]
 801802a:	4413      	add	r3, r2
 801802c:	8bfa      	ldrh	r2, [r7, #30]
 801802e:	4619      	mov	r1, r3
 8018030:	f005 fc17 	bl	801d862 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018034:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018036:	f7fb fa37 	bl	80134a8 <pbuf_clen>
 801803a:	4603      	mov	r3, r0
 801803c:	461a      	mov	r2, r3
 801803e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018042:	4413      	add	r3, r2
 8018044:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018048:	e041      	b.n	80180ce <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801804a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018050:	e002      	b.n	8018058 <tcp_write+0x23c>
 8018052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	637b      	str	r3, [r7, #52]	@ 0x34
 8018058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d1f8      	bne.n	8018052 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018062:	7b1b      	ldrb	r3, [r3, #12]
 8018064:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018068:	2b00      	cmp	r3, #0
 801806a:	d115      	bne.n	8018098 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801806c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801806e:	685b      	ldr	r3, [r3, #4]
 8018070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018072:	8952      	ldrh	r2, [r2, #10]
 8018074:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018076:	68ba      	ldr	r2, [r7, #8]
 8018078:	429a      	cmp	r2, r3
 801807a:	d10d      	bne.n	8018098 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801807c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018080:	2b00      	cmp	r3, #0
 8018082:	d006      	beq.n	8018092 <tcp_write+0x276>
 8018084:	4b1c      	ldr	r3, [pc, #112]	@ (80180f8 <tcp_write+0x2dc>)
 8018086:	f240 2231 	movw	r2, #561	@ 0x231
 801808a:	4922      	ldr	r1, [pc, #136]	@ (8018114 <tcp_write+0x2f8>)
 801808c:	481c      	ldr	r0, [pc, #112]	@ (8018100 <tcp_write+0x2e4>)
 801808e:	f005 fa35 	bl	801d4fc <iprintf>
          extendlen = seglen;
 8018092:	8bfb      	ldrh	r3, [r7, #30]
 8018094:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018096:	e01a      	b.n	80180ce <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018098:	8bfb      	ldrh	r3, [r7, #30]
 801809a:	2201      	movs	r2, #1
 801809c:	4619      	mov	r1, r3
 801809e:	2000      	movs	r0, #0
 80180a0:	f7fa fe90 	bl	8012dc4 <pbuf_alloc>
 80180a4:	6578      	str	r0, [r7, #84]	@ 0x54
 80180a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f000 81e0 	beq.w	801846e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80180ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80180b2:	68ba      	ldr	r2, [r7, #8]
 80180b4:	441a      	add	r2, r3
 80180b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180b8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80180ba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80180bc:	f7fb f9f4 	bl	80134a8 <pbuf_clen>
 80180c0:	4603      	mov	r3, r0
 80180c2:	461a      	mov	r2, r3
 80180c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80180c8:	4413      	add	r3, r2
 80180ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80180ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80180d2:	8bfb      	ldrh	r3, [r7, #30]
 80180d4:	4413      	add	r3, r2
 80180d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80180da:	e0dc      	b.n	8018296 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	f000 80d7 	beq.w	8018296 <tcp_write+0x47a>
 80180e8:	4b03      	ldr	r3, [pc, #12]	@ (80180f8 <tcp_write+0x2dc>)
 80180ea:	f240 224a 	movw	r2, #586	@ 0x24a
 80180ee:	490a      	ldr	r1, [pc, #40]	@ (8018118 <tcp_write+0x2fc>)
 80180f0:	4803      	ldr	r0, [pc, #12]	@ (8018100 <tcp_write+0x2e4>)
 80180f2:	f005 fa03 	bl	801d4fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80180f6:	e0ce      	b.n	8018296 <tcp_write+0x47a>
 80180f8:	080219fc 	.word	0x080219fc
 80180fc:	08021b9c 	.word	0x08021b9c
 8018100:	08021a50 	.word	0x08021a50
 8018104:	08021bb4 	.word	0x08021bb4
 8018108:	08021be8 	.word	0x08021be8
 801810c:	08021c00 	.word	0x08021c00
 8018110:	08021c20 	.word	0x08021c20
 8018114:	08021c40 	.word	0x08021c40
 8018118:	08021c6c 	.word	0x08021c6c
    struct pbuf *p;
    u16_t left = len - pos;
 801811c:	88fa      	ldrh	r2, [r7, #6]
 801811e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018122:	1ad3      	subs	r3, r2, r3
 8018124:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018126:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801812a:	b29b      	uxth	r3, r3
 801812c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801812e:	1ad3      	subs	r3, r2, r3
 8018130:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018132:	8b7a      	ldrh	r2, [r7, #26]
 8018134:	8bbb      	ldrh	r3, [r7, #28]
 8018136:	4293      	cmp	r3, r2
 8018138:	bf28      	it	cs
 801813a:	4613      	movcs	r3, r2
 801813c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801813e:	797b      	ldrb	r3, [r7, #5]
 8018140:	f003 0301 	and.w	r3, r3, #1
 8018144:	2b00      	cmp	r3, #0
 8018146:	d036      	beq.n	80181b6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018148:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801814c:	b29a      	uxth	r2, r3
 801814e:	8b3b      	ldrh	r3, [r7, #24]
 8018150:	4413      	add	r3, r2
 8018152:	b299      	uxth	r1, r3
 8018154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018156:	2b00      	cmp	r3, #0
 8018158:	bf0c      	ite	eq
 801815a:	2301      	moveq	r3, #1
 801815c:	2300      	movne	r3, #0
 801815e:	b2db      	uxtb	r3, r3
 8018160:	f107 0012 	add.w	r0, r7, #18
 8018164:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018166:	9302      	str	r3, [sp, #8]
 8018168:	797b      	ldrb	r3, [r7, #5]
 801816a:	9301      	str	r3, [sp, #4]
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	9300      	str	r3, [sp, #0]
 8018170:	4603      	mov	r3, r0
 8018172:	2036      	movs	r0, #54	@ 0x36
 8018174:	f7ff fd5e 	bl	8017c34 <tcp_pbuf_prealloc>
 8018178:	6338      	str	r0, [r7, #48]	@ 0x30
 801817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801817c:	2b00      	cmp	r3, #0
 801817e:	f000 8178 	beq.w	8018472 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018184:	895b      	ldrh	r3, [r3, #10]
 8018186:	8b3a      	ldrh	r2, [r7, #24]
 8018188:	429a      	cmp	r2, r3
 801818a:	d906      	bls.n	801819a <tcp_write+0x37e>
 801818c:	4b8c      	ldr	r3, [pc, #560]	@ (80183c0 <tcp_write+0x5a4>)
 801818e:	f240 2266 	movw	r2, #614	@ 0x266
 8018192:	498c      	ldr	r1, [pc, #560]	@ (80183c4 <tcp_write+0x5a8>)
 8018194:	488c      	ldr	r0, [pc, #560]	@ (80183c8 <tcp_write+0x5ac>)
 8018196:	f005 f9b1 	bl	801d4fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801819c:	685a      	ldr	r2, [r3, #4]
 801819e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80181a2:	18d0      	adds	r0, r2, r3
 80181a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80181a8:	68ba      	ldr	r2, [r7, #8]
 80181aa:	4413      	add	r3, r2
 80181ac:	8b3a      	ldrh	r2, [r7, #24]
 80181ae:	4619      	mov	r1, r3
 80181b0:	f005 fb57 	bl	801d862 <memcpy>
 80181b4:	e02f      	b.n	8018216 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80181b6:	8a7b      	ldrh	r3, [r7, #18]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d006      	beq.n	80181ca <tcp_write+0x3ae>
 80181bc:	4b80      	ldr	r3, [pc, #512]	@ (80183c0 <tcp_write+0x5a4>)
 80181be:	f240 2271 	movw	r2, #625	@ 0x271
 80181c2:	4982      	ldr	r1, [pc, #520]	@ (80183cc <tcp_write+0x5b0>)
 80181c4:	4880      	ldr	r0, [pc, #512]	@ (80183c8 <tcp_write+0x5ac>)
 80181c6:	f005 f999 	bl	801d4fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80181ca:	8b3b      	ldrh	r3, [r7, #24]
 80181cc:	2201      	movs	r2, #1
 80181ce:	4619      	mov	r1, r3
 80181d0:	2036      	movs	r0, #54	@ 0x36
 80181d2:	f7fa fdf7 	bl	8012dc4 <pbuf_alloc>
 80181d6:	6178      	str	r0, [r7, #20]
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	f000 814b 	beq.w	8018476 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80181e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80181e4:	68ba      	ldr	r2, [r7, #8]
 80181e6:	441a      	add	r2, r3
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80181ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80181f6:	4619      	mov	r1, r3
 80181f8:	2036      	movs	r0, #54	@ 0x36
 80181fa:	f7fa fde3 	bl	8012dc4 <pbuf_alloc>
 80181fe:	6338      	str	r0, [r7, #48]	@ 0x30
 8018200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018202:	2b00      	cmp	r3, #0
 8018204:	d103      	bne.n	801820e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018206:	6978      	ldr	r0, [r7, #20]
 8018208:	f7fb f8c0 	bl	801338c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801820c:	e136      	b.n	801847c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801820e:	6979      	ldr	r1, [r7, #20]
 8018210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018212:	f7fb f989 	bl	8013528 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018218:	f7fb f946 	bl	80134a8 <pbuf_clen>
 801821c:	4603      	mov	r3, r0
 801821e:	461a      	mov	r2, r3
 8018220:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018224:	4413      	add	r3, r2
 8018226:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801822a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801822e:	2b09      	cmp	r3, #9
 8018230:	d903      	bls.n	801823a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018232:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018234:	f7fb f8aa 	bl	801338c <pbuf_free>
      goto memerr;
 8018238:	e120      	b.n	801847c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801823e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018242:	441a      	add	r2, r3
 8018244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	4613      	mov	r3, r2
 801824c:	2200      	movs	r2, #0
 801824e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018250:	68f8      	ldr	r0, [r7, #12]
 8018252:	f7ff fc53 	bl	8017afc <tcp_create_segment>
 8018256:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8018258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801825a:	2b00      	cmp	r3, #0
 801825c:	f000 810d 	beq.w	801847a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018262:	2b00      	cmp	r3, #0
 8018264:	d102      	bne.n	801826c <tcp_write+0x450>
      queue = seg;
 8018266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018268:	647b      	str	r3, [r7, #68]	@ 0x44
 801826a:	e00c      	b.n	8018286 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801826c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801826e:	2b00      	cmp	r3, #0
 8018270:	d106      	bne.n	8018280 <tcp_write+0x464>
 8018272:	4b53      	ldr	r3, [pc, #332]	@ (80183c0 <tcp_write+0x5a4>)
 8018274:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018278:	4955      	ldr	r1, [pc, #340]	@ (80183d0 <tcp_write+0x5b4>)
 801827a:	4853      	ldr	r0, [pc, #332]	@ (80183c8 <tcp_write+0x5ac>)
 801827c:	f005 f93e 	bl	801d4fc <iprintf>
      prev_seg->next = seg;
 8018280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018282:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018284:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018288:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801828a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801828e:	8b3b      	ldrh	r3, [r7, #24]
 8018290:	4413      	add	r3, r2
 8018292:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8018296:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801829a:	88fb      	ldrh	r3, [r7, #6]
 801829c:	429a      	cmp	r2, r3
 801829e:	f4ff af3d 	bcc.w	801811c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80182a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d02c      	beq.n	8018302 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80182a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182ae:	e01e      	b.n	80182ee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80182b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b2:	891a      	ldrh	r2, [r3, #8]
 80182b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182b6:	4413      	add	r3, r2
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182bc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80182be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d110      	bne.n	80182e8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80182c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182c8:	685b      	ldr	r3, [r3, #4]
 80182ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80182cc:	8952      	ldrh	r2, [r2, #10]
 80182ce:	4413      	add	r3, r2
 80182d0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80182d2:	68b9      	ldr	r1, [r7, #8]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f005 fac4 	bl	801d862 <memcpy>
        p->len += oversize_used;
 80182da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182dc:	895a      	ldrh	r2, [r3, #10]
 80182de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182e0:	4413      	add	r3, r2
 80182e2:	b29a      	uxth	r2, r3
 80182e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182e6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80182e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d1dd      	bne.n	80182b0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80182f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182f6:	891a      	ldrh	r2, [r3, #8]
 80182f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182fa:	4413      	add	r3, r2
 80182fc:	b29a      	uxth	r2, r3
 80182fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018300:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018302:	8a7a      	ldrh	r2, [r7, #18]
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801830a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801830c:	2b00      	cmp	r3, #0
 801830e:	d018      	beq.n	8018342 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018312:	2b00      	cmp	r3, #0
 8018314:	d106      	bne.n	8018324 <tcp_write+0x508>
 8018316:	4b2a      	ldr	r3, [pc, #168]	@ (80183c0 <tcp_write+0x5a4>)
 8018318:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801831c:	492d      	ldr	r1, [pc, #180]	@ (80183d4 <tcp_write+0x5b8>)
 801831e:	482a      	ldr	r0, [pc, #168]	@ (80183c8 <tcp_write+0x5ac>)
 8018320:	f005 f8ec 	bl	801d4fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018326:	685b      	ldr	r3, [r3, #4]
 8018328:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801832a:	4618      	mov	r0, r3
 801832c:	f7fb f8fc 	bl	8013528 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018332:	891a      	ldrh	r2, [r3, #8]
 8018334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018336:	891b      	ldrh	r3, [r3, #8]
 8018338:	4413      	add	r3, r2
 801833a:	b29a      	uxth	r2, r3
 801833c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801833e:	811a      	strh	r2, [r3, #8]
 8018340:	e037      	b.n	80183b2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018342:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018344:	2b00      	cmp	r3, #0
 8018346:	d034      	beq.n	80183b2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801834a:	2b00      	cmp	r3, #0
 801834c:	d003      	beq.n	8018356 <tcp_write+0x53a>
 801834e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d106      	bne.n	8018364 <tcp_write+0x548>
 8018356:	4b1a      	ldr	r3, [pc, #104]	@ (80183c0 <tcp_write+0x5a4>)
 8018358:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801835c:	491e      	ldr	r1, [pc, #120]	@ (80183d8 <tcp_write+0x5bc>)
 801835e:	481a      	ldr	r0, [pc, #104]	@ (80183c8 <tcp_write+0x5ac>)
 8018360:	f005 f8cc 	bl	801d4fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018366:	685b      	ldr	r3, [r3, #4]
 8018368:	62bb      	str	r3, [r7, #40]	@ 0x28
 801836a:	e009      	b.n	8018380 <tcp_write+0x564>
      p->tot_len += extendlen;
 801836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801836e:	891a      	ldrh	r2, [r3, #8]
 8018370:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018372:	4413      	add	r3, r2
 8018374:	b29a      	uxth	r2, r3
 8018376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018378:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d1f1      	bne.n	801836c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801838a:	891a      	ldrh	r2, [r3, #8]
 801838c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801838e:	4413      	add	r3, r2
 8018390:	b29a      	uxth	r2, r3
 8018392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018394:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018398:	895a      	ldrh	r2, [r3, #10]
 801839a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801839c:	4413      	add	r3, r2
 801839e:	b29a      	uxth	r2, r3
 80183a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183a2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80183a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183a6:	891a      	ldrh	r2, [r3, #8]
 80183a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80183aa:	4413      	add	r3, r2
 80183ac:	b29a      	uxth	r2, r3
 80183ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183b0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80183b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d111      	bne.n	80183dc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80183bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80183be:	e010      	b.n	80183e2 <tcp_write+0x5c6>
 80183c0:	080219fc 	.word	0x080219fc
 80183c4:	08021c9c 	.word	0x08021c9c
 80183c8:	08021a50 	.word	0x08021a50
 80183cc:	08021cdc 	.word	0x08021cdc
 80183d0:	08021cec 	.word	0x08021cec
 80183d4:	08021d00 	.word	0x08021d00
 80183d8:	08021d38 	.word	0x08021d38
  } else {
    last_unsent->next = queue;
 80183dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80183e0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80183e6:	88fb      	ldrh	r3, [r7, #6]
 80183e8:	441a      	add	r2, r3
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80183f4:	88fb      	ldrh	r3, [r7, #6]
 80183f6:	1ad3      	subs	r3, r2, r3
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018406:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018410:	2b00      	cmp	r3, #0
 8018412:	d00e      	beq.n	8018432 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018418:	2b00      	cmp	r3, #0
 801841a:	d10a      	bne.n	8018432 <tcp_write+0x616>
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018420:	2b00      	cmp	r3, #0
 8018422:	d106      	bne.n	8018432 <tcp_write+0x616>
 8018424:	4b2c      	ldr	r3, [pc, #176]	@ (80184d8 <tcp_write+0x6bc>)
 8018426:	f240 3212 	movw	r2, #786	@ 0x312
 801842a:	492c      	ldr	r1, [pc, #176]	@ (80184dc <tcp_write+0x6c0>)
 801842c:	482c      	ldr	r0, [pc, #176]	@ (80184e0 <tcp_write+0x6c4>)
 801842e:	f005 f865 	bl	801d4fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018434:	2b00      	cmp	r3, #0
 8018436:	d016      	beq.n	8018466 <tcp_write+0x64a>
 8018438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801843a:	68db      	ldr	r3, [r3, #12]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d012      	beq.n	8018466 <tcp_write+0x64a>
 8018440:	797b      	ldrb	r3, [r7, #5]
 8018442:	f003 0302 	and.w	r3, r3, #2
 8018446:	2b00      	cmp	r3, #0
 8018448:	d10d      	bne.n	8018466 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801844a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801844c:	68db      	ldr	r3, [r3, #12]
 801844e:	899b      	ldrh	r3, [r3, #12]
 8018450:	b29c      	uxth	r4, r3
 8018452:	2008      	movs	r0, #8
 8018454:	f7f9 fbda 	bl	8011c0c <lwip_htons>
 8018458:	4603      	mov	r3, r0
 801845a:	461a      	mov	r2, r3
 801845c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	4322      	orrs	r2, r4
 8018462:	b292      	uxth	r2, r2
 8018464:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018466:	2300      	movs	r3, #0
 8018468:	e031      	b.n	80184ce <tcp_write+0x6b2>
          goto memerr;
 801846a:	bf00      	nop
 801846c:	e006      	b.n	801847c <tcp_write+0x660>
            goto memerr;
 801846e:	bf00      	nop
 8018470:	e004      	b.n	801847c <tcp_write+0x660>
        goto memerr;
 8018472:	bf00      	nop
 8018474:	e002      	b.n	801847c <tcp_write+0x660>
        goto memerr;
 8018476:	bf00      	nop
 8018478:	e000      	b.n	801847c <tcp_write+0x660>
      goto memerr;
 801847a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	8b5b      	ldrh	r3, [r3, #26]
 8018480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018484:	b29a      	uxth	r2, r3
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801848a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801848c:	2b00      	cmp	r3, #0
 801848e:	d002      	beq.n	8018496 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018490:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018492:	f7fa ff7b 	bl	801338c <pbuf_free>
  }
  if (queue != NULL) {
 8018496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018498:	2b00      	cmp	r3, #0
 801849a:	d002      	beq.n	80184a2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801849c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801849e:	f7fc fb9b 	bl	8014bd8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d00e      	beq.n	80184ca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d10a      	bne.n	80184ca <tcp_write+0x6ae>
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d106      	bne.n	80184ca <tcp_write+0x6ae>
 80184bc:	4b06      	ldr	r3, [pc, #24]	@ (80184d8 <tcp_write+0x6bc>)
 80184be:	f240 3227 	movw	r2, #807	@ 0x327
 80184c2:	4906      	ldr	r1, [pc, #24]	@ (80184dc <tcp_write+0x6c0>)
 80184c4:	4806      	ldr	r0, [pc, #24]	@ (80184e0 <tcp_write+0x6c4>)
 80184c6:	f005 f819 	bl	801d4fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80184ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	375c      	adds	r7, #92	@ 0x5c
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd90      	pop	{r4, r7, pc}
 80184d6:	bf00      	nop
 80184d8:	080219fc 	.word	0x080219fc
 80184dc:	08021d70 	.word	0x08021d70
 80184e0:	08021a50 	.word	0x08021a50

080184e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80184e4:	b590      	push	{r4, r7, lr}
 80184e6:	b08b      	sub	sp, #44	@ 0x2c
 80184e8:	af02      	add	r7, sp, #8
 80184ea:	6078      	str	r0, [r7, #4]
 80184ec:	460b      	mov	r3, r1
 80184ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80184f0:	2300      	movs	r3, #0
 80184f2:	61fb      	str	r3, [r7, #28]
 80184f4:	2300      	movs	r3, #0
 80184f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80184f8:	2300      	movs	r3, #0
 80184fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d106      	bne.n	8018510 <tcp_split_unsent_seg+0x2c>
 8018502:	4b95      	ldr	r3, [pc, #596]	@ (8018758 <tcp_split_unsent_seg+0x274>)
 8018504:	f240 324b 	movw	r2, #843	@ 0x34b
 8018508:	4994      	ldr	r1, [pc, #592]	@ (801875c <tcp_split_unsent_seg+0x278>)
 801850a:	4895      	ldr	r0, [pc, #596]	@ (8018760 <tcp_split_unsent_seg+0x27c>)
 801850c:	f004 fff6 	bl	801d4fc <iprintf>

  useg = pcb->unsent;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018514:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d102      	bne.n	8018522 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801851c:	f04f 33ff 	mov.w	r3, #4294967295
 8018520:	e116      	b.n	8018750 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018522:	887b      	ldrh	r3, [r7, #2]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d109      	bne.n	801853c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018528:	4b8b      	ldr	r3, [pc, #556]	@ (8018758 <tcp_split_unsent_seg+0x274>)
 801852a:	f240 3253 	movw	r2, #851	@ 0x353
 801852e:	498d      	ldr	r1, [pc, #564]	@ (8018764 <tcp_split_unsent_seg+0x280>)
 8018530:	488b      	ldr	r0, [pc, #556]	@ (8018760 <tcp_split_unsent_seg+0x27c>)
 8018532:	f004 ffe3 	bl	801d4fc <iprintf>
    return ERR_VAL;
 8018536:	f06f 0305 	mvn.w	r3, #5
 801853a:	e109      	b.n	8018750 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801853c:	697b      	ldr	r3, [r7, #20]
 801853e:	891b      	ldrh	r3, [r3, #8]
 8018540:	887a      	ldrh	r2, [r7, #2]
 8018542:	429a      	cmp	r2, r3
 8018544:	d301      	bcc.n	801854a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018546:	2300      	movs	r3, #0
 8018548:	e102      	b.n	8018750 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801854e:	887a      	ldrh	r2, [r7, #2]
 8018550:	429a      	cmp	r2, r3
 8018552:	d906      	bls.n	8018562 <tcp_split_unsent_seg+0x7e>
 8018554:	4b80      	ldr	r3, [pc, #512]	@ (8018758 <tcp_split_unsent_seg+0x274>)
 8018556:	f240 325b 	movw	r2, #859	@ 0x35b
 801855a:	4983      	ldr	r1, [pc, #524]	@ (8018768 <tcp_split_unsent_seg+0x284>)
 801855c:	4880      	ldr	r0, [pc, #512]	@ (8018760 <tcp_split_unsent_seg+0x27c>)
 801855e:	f004 ffcd 	bl	801d4fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	891b      	ldrh	r3, [r3, #8]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d106      	bne.n	8018578 <tcp_split_unsent_seg+0x94>
 801856a:	4b7b      	ldr	r3, [pc, #492]	@ (8018758 <tcp_split_unsent_seg+0x274>)
 801856c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018570:	497e      	ldr	r1, [pc, #504]	@ (801876c <tcp_split_unsent_seg+0x288>)
 8018572:	487b      	ldr	r0, [pc, #492]	@ (8018760 <tcp_split_unsent_seg+0x27c>)
 8018574:	f004 ffc2 	bl	801d4fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	7a9b      	ldrb	r3, [r3, #10]
 801857c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801857e:	7bfb      	ldrb	r3, [r7, #15]
 8018580:	009b      	lsls	r3, r3, #2
 8018582:	b2db      	uxtb	r3, r3
 8018584:	f003 0304 	and.w	r3, r3, #4
 8018588:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	891a      	ldrh	r2, [r3, #8]
 801858e:	887b      	ldrh	r3, [r7, #2]
 8018590:	1ad3      	subs	r3, r2, r3
 8018592:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018594:	7bbb      	ldrb	r3, [r7, #14]
 8018596:	b29a      	uxth	r2, r3
 8018598:	89bb      	ldrh	r3, [r7, #12]
 801859a:	4413      	add	r3, r2
 801859c:	b29b      	uxth	r3, r3
 801859e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80185a2:	4619      	mov	r1, r3
 80185a4:	2036      	movs	r0, #54	@ 0x36
 80185a6:	f7fa fc0d 	bl	8012dc4 <pbuf_alloc>
 80185aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f000 80b7 	beq.w	8018722 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	891a      	ldrh	r2, [r3, #8]
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	891b      	ldrh	r3, [r3, #8]
 80185be:	1ad3      	subs	r3, r2, r3
 80185c0:	b29a      	uxth	r2, r3
 80185c2:	887b      	ldrh	r3, [r7, #2]
 80185c4:	4413      	add	r3, r2
 80185c6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	6858      	ldr	r0, [r3, #4]
 80185cc:	693b      	ldr	r3, [r7, #16]
 80185ce:	685a      	ldr	r2, [r3, #4]
 80185d0:	7bbb      	ldrb	r3, [r7, #14]
 80185d2:	18d1      	adds	r1, r2, r3
 80185d4:	897b      	ldrh	r3, [r7, #10]
 80185d6:	89ba      	ldrh	r2, [r7, #12]
 80185d8:	f7fb f8ce 	bl	8013778 <pbuf_copy_partial>
 80185dc:	4603      	mov	r3, r0
 80185de:	461a      	mov	r2, r3
 80185e0:	89bb      	ldrh	r3, [r7, #12]
 80185e2:	4293      	cmp	r3, r2
 80185e4:	f040 809f 	bne.w	8018726 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	68db      	ldr	r3, [r3, #12]
 80185ec:	899b      	ldrh	r3, [r3, #12]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f9 fb0b 	bl	8011c0c <lwip_htons>
 80185f6:	4603      	mov	r3, r0
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80185fe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018600:	2300      	movs	r3, #0
 8018602:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018604:	7efb      	ldrb	r3, [r7, #27]
 8018606:	f003 0308 	and.w	r3, r3, #8
 801860a:	2b00      	cmp	r3, #0
 801860c:	d007      	beq.n	801861e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801860e:	7efb      	ldrb	r3, [r7, #27]
 8018610:	f023 0308 	bic.w	r3, r3, #8
 8018614:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018616:	7ebb      	ldrb	r3, [r7, #26]
 8018618:	f043 0308 	orr.w	r3, r3, #8
 801861c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801861e:	7efb      	ldrb	r3, [r7, #27]
 8018620:	f003 0301 	and.w	r3, r3, #1
 8018624:	2b00      	cmp	r3, #0
 8018626:	d007      	beq.n	8018638 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018628:	7efb      	ldrb	r3, [r7, #27]
 801862a:	f023 0301 	bic.w	r3, r3, #1
 801862e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018630:	7ebb      	ldrb	r3, [r7, #26]
 8018632:	f043 0301 	orr.w	r3, r3, #1
 8018636:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	4618      	mov	r0, r3
 8018640:	f7f9 fafa 	bl	8011c38 <lwip_htonl>
 8018644:	4602      	mov	r2, r0
 8018646:	887b      	ldrh	r3, [r7, #2]
 8018648:	18d1      	adds	r1, r2, r3
 801864a:	7eba      	ldrb	r2, [r7, #26]
 801864c:	7bfb      	ldrb	r3, [r7, #15]
 801864e:	9300      	str	r3, [sp, #0]
 8018650:	460b      	mov	r3, r1
 8018652:	6939      	ldr	r1, [r7, #16]
 8018654:	6878      	ldr	r0, [r7, #4]
 8018656:	f7ff fa51 	bl	8017afc <tcp_create_segment>
 801865a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d063      	beq.n	801872a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	4618      	mov	r0, r3
 8018668:	f7fa ff1e 	bl	80134a8 <pbuf_clen>
 801866c:	4603      	mov	r3, r0
 801866e:	461a      	mov	r2, r3
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018676:	1a9b      	subs	r3, r3, r2
 8018678:	b29a      	uxth	r2, r3
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	6858      	ldr	r0, [r3, #4]
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	685b      	ldr	r3, [r3, #4]
 8018688:	891a      	ldrh	r2, [r3, #8]
 801868a:	89bb      	ldrh	r3, [r7, #12]
 801868c:	1ad3      	subs	r3, r2, r3
 801868e:	b29b      	uxth	r3, r3
 8018690:	4619      	mov	r1, r3
 8018692:	f7fa fcf5 	bl	8013080 <pbuf_realloc>
  useg->len -= remainder;
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	891a      	ldrh	r2, [r3, #8]
 801869a:	89bb      	ldrh	r3, [r7, #12]
 801869c:	1ad3      	subs	r3, r2, r3
 801869e:	b29a      	uxth	r2, r3
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80186a4:	697b      	ldr	r3, [r7, #20]
 80186a6:	68db      	ldr	r3, [r3, #12]
 80186a8:	899b      	ldrh	r3, [r3, #12]
 80186aa:	b29c      	uxth	r4, r3
 80186ac:	7efb      	ldrb	r3, [r7, #27]
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7f9 faab 	bl	8011c0c <lwip_htons>
 80186b6:	4603      	mov	r3, r0
 80186b8:	461a      	mov	r2, r3
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	4322      	orrs	r2, r4
 80186c0:	b292      	uxth	r2, r2
 80186c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	4618      	mov	r0, r3
 80186ca:	f7fa feed 	bl	80134a8 <pbuf_clen>
 80186ce:	4603      	mov	r3, r0
 80186d0:	461a      	mov	r2, r3
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80186d8:	4413      	add	r3, r2
 80186da:	b29a      	uxth	r2, r3
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80186e2:	69fb      	ldr	r3, [r7, #28]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fa fede 	bl	80134a8 <pbuf_clen>
 80186ec:	4603      	mov	r3, r0
 80186ee:	461a      	mov	r2, r3
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80186f6:	4413      	add	r3, r2
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	681a      	ldr	r2, [r3, #0]
 8018704:	69fb      	ldr	r3, [r7, #28]
 8018706:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	69fa      	ldr	r2, [r7, #28]
 801870c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d103      	bne.n	801871e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2200      	movs	r2, #0
 801871a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801871e:	2300      	movs	r3, #0
 8018720:	e016      	b.n	8018750 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018722:	bf00      	nop
 8018724:	e002      	b.n	801872c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018726:	bf00      	nop
 8018728:	e000      	b.n	801872c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801872a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d006      	beq.n	8018740 <tcp_split_unsent_seg+0x25c>
 8018732:	4b09      	ldr	r3, [pc, #36]	@ (8018758 <tcp_split_unsent_seg+0x274>)
 8018734:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018738:	490d      	ldr	r1, [pc, #52]	@ (8018770 <tcp_split_unsent_seg+0x28c>)
 801873a:	4809      	ldr	r0, [pc, #36]	@ (8018760 <tcp_split_unsent_seg+0x27c>)
 801873c:	f004 fede 	bl	801d4fc <iprintf>
  if (p != NULL) {
 8018740:	693b      	ldr	r3, [r7, #16]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d002      	beq.n	801874c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018746:	6938      	ldr	r0, [r7, #16]
 8018748:	f7fa fe20 	bl	801338c <pbuf_free>
  }

  return ERR_MEM;
 801874c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018750:	4618      	mov	r0, r3
 8018752:	3724      	adds	r7, #36	@ 0x24
 8018754:	46bd      	mov	sp, r7
 8018756:	bd90      	pop	{r4, r7, pc}
 8018758:	080219fc 	.word	0x080219fc
 801875c:	08021d90 	.word	0x08021d90
 8018760:	08021a50 	.word	0x08021a50
 8018764:	08021db4 	.word	0x08021db4
 8018768:	08021dd8 	.word	0x08021dd8
 801876c:	08021de8 	.word	0x08021de8
 8018770:	08021df8 	.word	0x08021df8

08018774 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018774:	b590      	push	{r4, r7, lr}
 8018776:	b085      	sub	sp, #20
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d106      	bne.n	8018790 <tcp_send_fin+0x1c>
 8018782:	4b21      	ldr	r3, [pc, #132]	@ (8018808 <tcp_send_fin+0x94>)
 8018784:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018788:	4920      	ldr	r1, [pc, #128]	@ (801880c <tcp_send_fin+0x98>)
 801878a:	4821      	ldr	r0, [pc, #132]	@ (8018810 <tcp_send_fin+0x9c>)
 801878c:	f004 feb6 	bl	801d4fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018794:	2b00      	cmp	r3, #0
 8018796:	d02e      	beq.n	80187f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801879c:	60fb      	str	r3, [r7, #12]
 801879e:	e002      	b.n	80187a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d1f8      	bne.n	80187a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	68db      	ldr	r3, [r3, #12]
 80187b2:	899b      	ldrh	r3, [r3, #12]
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7f9 fa28 	bl	8011c0c <lwip_htons>
 80187bc:	4603      	mov	r3, r0
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	f003 0307 	and.w	r3, r3, #7
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d116      	bne.n	80187f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	68db      	ldr	r3, [r3, #12]
 80187cc:	899b      	ldrh	r3, [r3, #12]
 80187ce:	b29c      	uxth	r4, r3
 80187d0:	2001      	movs	r0, #1
 80187d2:	f7f9 fa1b 	bl	8011c0c <lwip_htons>
 80187d6:	4603      	mov	r3, r0
 80187d8:	461a      	mov	r2, r3
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	68db      	ldr	r3, [r3, #12]
 80187de:	4322      	orrs	r2, r4
 80187e0:	b292      	uxth	r2, r2
 80187e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	8b5b      	ldrh	r3, [r3, #26]
 80187e8:	f043 0320 	orr.w	r3, r3, #32
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80187f2:	2300      	movs	r3, #0
 80187f4:	e004      	b.n	8018800 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80187f6:	2101      	movs	r1, #1
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f000 f80b 	bl	8018814 <tcp_enqueue_flags>
 80187fe:	4603      	mov	r3, r0
}
 8018800:	4618      	mov	r0, r3
 8018802:	3714      	adds	r7, #20
 8018804:	46bd      	mov	sp, r7
 8018806:	bd90      	pop	{r4, r7, pc}
 8018808:	080219fc 	.word	0x080219fc
 801880c:	08021e04 	.word	0x08021e04
 8018810:	08021a50 	.word	0x08021a50

08018814 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b08a      	sub	sp, #40	@ 0x28
 8018818:	af02      	add	r7, sp, #8
 801881a:	6078      	str	r0, [r7, #4]
 801881c:	460b      	mov	r3, r1
 801881e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018820:	2300      	movs	r3, #0
 8018822:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018824:	2300      	movs	r3, #0
 8018826:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018828:	78fb      	ldrb	r3, [r7, #3]
 801882a:	f003 0303 	and.w	r3, r3, #3
 801882e:	2b00      	cmp	r3, #0
 8018830:	d106      	bne.n	8018840 <tcp_enqueue_flags+0x2c>
 8018832:	4b67      	ldr	r3, [pc, #412]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 8018834:	f240 4211 	movw	r2, #1041	@ 0x411
 8018838:	4966      	ldr	r1, [pc, #408]	@ (80189d4 <tcp_enqueue_flags+0x1c0>)
 801883a:	4867      	ldr	r0, [pc, #412]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 801883c:	f004 fe5e 	bl	801d4fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d106      	bne.n	8018854 <tcp_enqueue_flags+0x40>
 8018846:	4b62      	ldr	r3, [pc, #392]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 8018848:	f240 4213 	movw	r2, #1043	@ 0x413
 801884c:	4963      	ldr	r1, [pc, #396]	@ (80189dc <tcp_enqueue_flags+0x1c8>)
 801884e:	4862      	ldr	r0, [pc, #392]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 8018850:	f004 fe54 	bl	801d4fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018854:	78fb      	ldrb	r3, [r7, #3]
 8018856:	f003 0302 	and.w	r3, r3, #2
 801885a:	2b00      	cmp	r3, #0
 801885c:	d001      	beq.n	8018862 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801885e:	2301      	movs	r3, #1
 8018860:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018862:	7ffb      	ldrb	r3, [r7, #31]
 8018864:	009b      	lsls	r3, r3, #2
 8018866:	b2db      	uxtb	r3, r3
 8018868:	f003 0304 	and.w	r3, r3, #4
 801886c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801886e:	7dfb      	ldrb	r3, [r7, #23]
 8018870:	b29b      	uxth	r3, r3
 8018872:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018876:	4619      	mov	r1, r3
 8018878:	2036      	movs	r0, #54	@ 0x36
 801887a:	f7fa faa3 	bl	8012dc4 <pbuf_alloc>
 801887e:	6138      	str	r0, [r7, #16]
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d109      	bne.n	801889a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	8b5b      	ldrh	r3, [r3, #26]
 801888a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801888e:	b29a      	uxth	r2, r3
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018894:	f04f 33ff 	mov.w	r3, #4294967295
 8018898:	e095      	b.n	80189c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	895a      	ldrh	r2, [r3, #10]
 801889e:	7dfb      	ldrb	r3, [r7, #23]
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d206      	bcs.n	80188b4 <tcp_enqueue_flags+0xa0>
 80188a6:	4b4a      	ldr	r3, [pc, #296]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 80188a8:	f240 4239 	movw	r2, #1081	@ 0x439
 80188ac:	494c      	ldr	r1, [pc, #304]	@ (80189e0 <tcp_enqueue_flags+0x1cc>)
 80188ae:	484a      	ldr	r0, [pc, #296]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 80188b0:	f004 fe24 	bl	801d4fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80188b8:	78fa      	ldrb	r2, [r7, #3]
 80188ba:	7ffb      	ldrb	r3, [r7, #31]
 80188bc:	9300      	str	r3, [sp, #0]
 80188be:	460b      	mov	r3, r1
 80188c0:	6939      	ldr	r1, [r7, #16]
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7ff f91a 	bl	8017afc <tcp_create_segment>
 80188c8:	60f8      	str	r0, [r7, #12]
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d109      	bne.n	80188e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	8b5b      	ldrh	r3, [r3, #26]
 80188d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188d8:	b29a      	uxth	r2, r3
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80188de:	f04f 33ff 	mov.w	r3, #4294967295
 80188e2:	e070      	b.n	80189c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	68db      	ldr	r3, [r3, #12]
 80188e8:	f003 0303 	and.w	r3, r3, #3
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d006      	beq.n	80188fe <tcp_enqueue_flags+0xea>
 80188f0:	4b37      	ldr	r3, [pc, #220]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 80188f2:	f240 4242 	movw	r2, #1090	@ 0x442
 80188f6:	493b      	ldr	r1, [pc, #236]	@ (80189e4 <tcp_enqueue_flags+0x1d0>)
 80188f8:	4837      	ldr	r0, [pc, #220]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 80188fa:	f004 fdff 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	891b      	ldrh	r3, [r3, #8]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d006      	beq.n	8018914 <tcp_enqueue_flags+0x100>
 8018906:	4b32      	ldr	r3, [pc, #200]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 8018908:	f240 4243 	movw	r2, #1091	@ 0x443
 801890c:	4936      	ldr	r1, [pc, #216]	@ (80189e8 <tcp_enqueue_flags+0x1d4>)
 801890e:	4832      	ldr	r0, [pc, #200]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 8018910:	f004 fdf4 	bl	801d4fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018918:	2b00      	cmp	r3, #0
 801891a:	d103      	bne.n	8018924 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	68fa      	ldr	r2, [r7, #12]
 8018920:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018922:	e00d      	b.n	8018940 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018928:	61bb      	str	r3, [r7, #24]
 801892a:	e002      	b.n	8018932 <tcp_enqueue_flags+0x11e>
 801892c:	69bb      	ldr	r3, [r7, #24]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	61bb      	str	r3, [r7, #24]
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d1f8      	bne.n	801892c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801893a:	69bb      	ldr	r3, [r7, #24]
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2200      	movs	r2, #0
 8018944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018948:	78fb      	ldrb	r3, [r7, #3]
 801894a:	f003 0302 	and.w	r3, r3, #2
 801894e:	2b00      	cmp	r3, #0
 8018950:	d104      	bne.n	801895c <tcp_enqueue_flags+0x148>
 8018952:	78fb      	ldrb	r3, [r7, #3]
 8018954:	f003 0301 	and.w	r3, r3, #1
 8018958:	2b00      	cmp	r3, #0
 801895a:	d004      	beq.n	8018966 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018960:	1c5a      	adds	r2, r3, #1
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018966:	78fb      	ldrb	r3, [r7, #3]
 8018968:	f003 0301 	and.w	r3, r3, #1
 801896c:	2b00      	cmp	r3, #0
 801896e:	d006      	beq.n	801897e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	8b5b      	ldrh	r3, [r3, #26]
 8018974:	f043 0320 	orr.w	r3, r3, #32
 8018978:	b29a      	uxth	r2, r3
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	685b      	ldr	r3, [r3, #4]
 8018982:	4618      	mov	r0, r3
 8018984:	f7fa fd90 	bl	80134a8 <pbuf_clen>
 8018988:	4603      	mov	r3, r0
 801898a:	461a      	mov	r2, r3
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018992:	4413      	add	r3, r2
 8018994:	b29a      	uxth	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d00e      	beq.n	80189c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d10a      	bne.n	80189c4 <tcp_enqueue_flags+0x1b0>
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d106      	bne.n	80189c4 <tcp_enqueue_flags+0x1b0>
 80189b6:	4b06      	ldr	r3, [pc, #24]	@ (80189d0 <tcp_enqueue_flags+0x1bc>)
 80189b8:	f240 4265 	movw	r2, #1125	@ 0x465
 80189bc:	490b      	ldr	r1, [pc, #44]	@ (80189ec <tcp_enqueue_flags+0x1d8>)
 80189be:	4806      	ldr	r0, [pc, #24]	@ (80189d8 <tcp_enqueue_flags+0x1c4>)
 80189c0:	f004 fd9c 	bl	801d4fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3720      	adds	r7, #32
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}
 80189ce:	bf00      	nop
 80189d0:	080219fc 	.word	0x080219fc
 80189d4:	08021e20 	.word	0x08021e20
 80189d8:	08021a50 	.word	0x08021a50
 80189dc:	08021e78 	.word	0x08021e78
 80189e0:	08021e98 	.word	0x08021e98
 80189e4:	08021ed4 	.word	0x08021ed4
 80189e8:	08021eec 	.word	0x08021eec
 80189ec:	08021f18 	.word	0x08021f18

080189f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80189f0:	b5b0      	push	{r4, r5, r7, lr}
 80189f2:	b08a      	sub	sp, #40	@ 0x28
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d106      	bne.n	8018a0c <tcp_output+0x1c>
 80189fe:	4b8a      	ldr	r3, [pc, #552]	@ (8018c28 <tcp_output+0x238>)
 8018a00:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018a04:	4989      	ldr	r1, [pc, #548]	@ (8018c2c <tcp_output+0x23c>)
 8018a06:	488a      	ldr	r0, [pc, #552]	@ (8018c30 <tcp_output+0x240>)
 8018a08:	f004 fd78 	bl	801d4fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	7d1b      	ldrb	r3, [r3, #20]
 8018a10:	2b01      	cmp	r3, #1
 8018a12:	d106      	bne.n	8018a22 <tcp_output+0x32>
 8018a14:	4b84      	ldr	r3, [pc, #528]	@ (8018c28 <tcp_output+0x238>)
 8018a16:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018a1a:	4986      	ldr	r1, [pc, #536]	@ (8018c34 <tcp_output+0x244>)
 8018a1c:	4884      	ldr	r0, [pc, #528]	@ (8018c30 <tcp_output+0x240>)
 8018a1e:	f004 fd6d 	bl	801d4fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018a22:	4b85      	ldr	r3, [pc, #532]	@ (8018c38 <tcp_output+0x248>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d101      	bne.n	8018a30 <tcp_output+0x40>
    return ERR_OK;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	e1ce      	b.n	8018dce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018a3c:	4293      	cmp	r3, r2
 8018a3e:	bf28      	it	cs
 8018a40:	4613      	movcs	r3, r2
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d10b      	bne.n	8018a6a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	8b5b      	ldrh	r3, [r3, #26]
 8018a56:	f003 0302 	and.w	r3, r3, #2
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	f000 81aa 	beq.w	8018db4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f000 fdcb 	bl	80195fc <tcp_send_empty_ack>
 8018a66:	4603      	mov	r3, r0
 8018a68:	e1b1      	b.n	8018dce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018a6a:	6879      	ldr	r1, [r7, #4]
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	3304      	adds	r3, #4
 8018a70:	461a      	mov	r2, r3
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f7ff f826 	bl	8017ac4 <tcp_route>
 8018a78:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d102      	bne.n	8018a86 <tcp_output+0x96>
    return ERR_RTE;
 8018a80:	f06f 0303 	mvn.w	r3, #3
 8018a84:	e1a3      	b.n	8018dce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d003      	beq.n	8018a94 <tcp_output+0xa4>
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d111      	bne.n	8018ab8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d002      	beq.n	8018aa0 <tcp_output+0xb0>
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	3304      	adds	r3, #4
 8018a9e:	e000      	b.n	8018aa2 <tcp_output+0xb2>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018aa4:	693b      	ldr	r3, [r7, #16]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d102      	bne.n	8018ab0 <tcp_output+0xc0>
      return ERR_RTE;
 8018aaa:	f06f 0303 	mvn.w	r3, #3
 8018aae:	e18e      	b.n	8018dce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018ab0:	693b      	ldr	r3, [r7, #16]
 8018ab2:	681a      	ldr	r2, [r3, #0]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aba:	68db      	ldr	r3, [r3, #12]
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7f9 f8ba 	bl	8011c38 <lwip_htonl>
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ace:	8912      	ldrh	r2, [r2, #8]
 8018ad0:	4413      	add	r3, r2
 8018ad2:	69ba      	ldr	r2, [r7, #24]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d227      	bcs.n	8018b28 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018ade:	461a      	mov	r2, r3
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	d114      	bne.n	8018b10 <tcp_output+0x120>
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d110      	bne.n	8018b10 <tcp_output+0x120>
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d10b      	bne.n	8018b10 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	2200      	movs	r2, #0
 8018afc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	2201      	movs	r2, #1
 8018b04:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	8b5b      	ldrh	r3, [r3, #26]
 8018b14:	f003 0302 	and.w	r3, r3, #2
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	f000 814d 	beq.w	8018db8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 fd6c 	bl	80195fc <tcp_send_empty_ack>
 8018b24:	4603      	mov	r3, r0
 8018b26:	e152      	b.n	8018dce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b34:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018b36:	6a3b      	ldr	r3, [r7, #32]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f000 811c 	beq.w	8018d76 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018b3e:	e002      	b.n	8018b46 <tcp_output+0x156>
 8018b40:	6a3b      	ldr	r3, [r7, #32]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	623b      	str	r3, [r7, #32]
 8018b46:	6a3b      	ldr	r3, [r7, #32]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d1f8      	bne.n	8018b40 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018b4e:	e112      	b.n	8018d76 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	899b      	ldrh	r3, [r3, #12]
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f9 f857 	bl	8011c0c <lwip_htons>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	b2db      	uxtb	r3, r3
 8018b62:	f003 0304 	and.w	r3, r3, #4
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d006      	beq.n	8018b78 <tcp_output+0x188>
 8018b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8018c28 <tcp_output+0x238>)
 8018b6c:	f240 5236 	movw	r2, #1334	@ 0x536
 8018b70:	4932      	ldr	r1, [pc, #200]	@ (8018c3c <tcp_output+0x24c>)
 8018b72:	482f      	ldr	r0, [pc, #188]	@ (8018c30 <tcp_output+0x240>)
 8018b74:	f004 fcc2 	bl	801d4fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d01f      	beq.n	8018bc0 <tcp_output+0x1d0>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	8b5b      	ldrh	r3, [r3, #26]
 8018b84:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d119      	bne.n	8018bc0 <tcp_output+0x1d0>
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d00b      	beq.n	8018bac <tcp_output+0x1bc>
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d110      	bne.n	8018bc0 <tcp_output+0x1d0>
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ba2:	891a      	ldrh	r2, [r3, #8]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	d209      	bcs.n	8018bc0 <tcp_output+0x1d0>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d004      	beq.n	8018bc0 <tcp_output+0x1d0>
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018bbc:	2b08      	cmp	r3, #8
 8018bbe:	d901      	bls.n	8018bc4 <tcp_output+0x1d4>
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	e000      	b.n	8018bc6 <tcp_output+0x1d6>
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d106      	bne.n	8018bd8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	8b5b      	ldrh	r3, [r3, #26]
 8018bce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	f000 80e4 	beq.w	8018da0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	7d1b      	ldrb	r3, [r3, #20]
 8018bdc:	2b02      	cmp	r3, #2
 8018bde:	d00d      	beq.n	8018bfc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	899b      	ldrh	r3, [r3, #12]
 8018be6:	b29c      	uxth	r4, r3
 8018be8:	2010      	movs	r0, #16
 8018bea:	f7f9 f80f 	bl	8011c0c <lwip_htons>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	461a      	mov	r2, r3
 8018bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	4322      	orrs	r2, r4
 8018bf8:	b292      	uxth	r2, r2
 8018bfa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018bfc:	697a      	ldr	r2, [r7, #20]
 8018bfe:	6879      	ldr	r1, [r7, #4]
 8018c00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c02:	f000 f909 	bl	8018e18 <tcp_output_segment>
 8018c06:	4603      	mov	r3, r0
 8018c08:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d016      	beq.n	8018c40 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	8b5b      	ldrh	r3, [r3, #26]
 8018c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c1a:	b29a      	uxth	r2, r3
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	835a      	strh	r2, [r3, #26]
      return err;
 8018c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c24:	e0d3      	b.n	8018dce <tcp_output+0x3de>
 8018c26:	bf00      	nop
 8018c28:	080219fc 	.word	0x080219fc
 8018c2c:	08021f40 	.word	0x08021f40
 8018c30:	08021a50 	.word	0x08021a50
 8018c34:	08021f58 	.word	0x08021f58
 8018c38:	2000c9f8 	.word	0x2000c9f8
 8018c3c:	08021f80 	.word	0x08021f80
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7d1b      	ldrb	r3, [r3, #20]
 8018c4c:	2b02      	cmp	r3, #2
 8018c4e:	d006      	beq.n	8018c5e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	8b5b      	ldrh	r3, [r3, #26]
 8018c54:	f023 0303 	bic.w	r3, r3, #3
 8018c58:	b29a      	uxth	r2, r3
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7f8 ffe7 	bl	8011c38 <lwip_htonl>
 8018c6a:	4604      	mov	r4, r0
 8018c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6e:	891b      	ldrh	r3, [r3, #8]
 8018c70:	461d      	mov	r5, r3
 8018c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c74:	68db      	ldr	r3, [r3, #12]
 8018c76:	899b      	ldrh	r3, [r3, #12]
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7f8 ffc6 	bl	8011c0c <lwip_htons>
 8018c80:	4603      	mov	r3, r0
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	f003 0303 	and.w	r3, r3, #3
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d001      	beq.n	8018c90 <tcp_output+0x2a0>
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	e000      	b.n	8018c92 <tcp_output+0x2a2>
 8018c90:	2300      	movs	r3, #0
 8018c92:	442b      	add	r3, r5
 8018c94:	4423      	add	r3, r4
 8018c96:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	1ad3      	subs	r3, r2, r3
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	da02      	bge.n	8018caa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	68ba      	ldr	r2, [r7, #8]
 8018ca8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cac:	891b      	ldrh	r3, [r3, #8]
 8018cae:	461c      	mov	r4, r3
 8018cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb2:	68db      	ldr	r3, [r3, #12]
 8018cb4:	899b      	ldrh	r3, [r3, #12]
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7f8 ffa7 	bl	8011c0c <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	f003 0303 	and.w	r3, r3, #3
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d001      	beq.n	8018cce <tcp_output+0x2de>
 8018cca:	2301      	movs	r3, #1
 8018ccc:	e000      	b.n	8018cd0 <tcp_output+0x2e0>
 8018cce:	2300      	movs	r3, #0
 8018cd0:	4423      	add	r3, r4
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d049      	beq.n	8018d6a <tcp_output+0x37a>
      seg->next = NULL;
 8018cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cd8:	2200      	movs	r2, #0
 8018cda:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d105      	bne.n	8018cf0 <tcp_output+0x300>
        pcb->unacked = seg;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ce8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8018cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cec:	623b      	str	r3, [r7, #32]
 8018cee:	e03f      	b.n	8018d70 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cf2:	68db      	ldr	r3, [r3, #12]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7f8 ff9e 	bl	8011c38 <lwip_htonl>
 8018cfc:	4604      	mov	r4, r0
 8018cfe:	6a3b      	ldr	r3, [r7, #32]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	685b      	ldr	r3, [r3, #4]
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7f8 ff97 	bl	8011c38 <lwip_htonl>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	1ae3      	subs	r3, r4, r3
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	da24      	bge.n	8018d5c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	3370      	adds	r3, #112	@ 0x70
 8018d16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018d18:	e002      	b.n	8018d20 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018d1a:	69fb      	ldr	r3, [r7, #28]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018d20:	69fb      	ldr	r3, [r7, #28]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d011      	beq.n	8018d4c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018d28:	69fb      	ldr	r3, [r7, #28]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	68db      	ldr	r3, [r3, #12]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7f8 ff81 	bl	8011c38 <lwip_htonl>
 8018d36:	4604      	mov	r4, r0
 8018d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d3a:	68db      	ldr	r3, [r3, #12]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7f8 ff7a 	bl	8011c38 <lwip_htonl>
 8018d44:	4603      	mov	r3, r0
 8018d46:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	dbe6      	blt.n	8018d1a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018d4c:	69fb      	ldr	r3, [r7, #28]
 8018d4e:	681a      	ldr	r2, [r3, #0]
 8018d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d52:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d58:	601a      	str	r2, [r3, #0]
 8018d5a:	e009      	b.n	8018d70 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018d5c:	6a3b      	ldr	r3, [r7, #32]
 8018d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d60:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018d62:	6a3b      	ldr	r3, [r7, #32]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	623b      	str	r3, [r7, #32]
 8018d68:	e002      	b.n	8018d70 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018d6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018d6c:	f7fb ff49 	bl	8014c02 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d74:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8018d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d012      	beq.n	8018da2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d7e:	68db      	ldr	r3, [r3, #12]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	4618      	mov	r0, r3
 8018d84:	f7f8 ff58 	bl	8011c38 <lwip_htonl>
 8018d88:	4602      	mov	r2, r0
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d8e:	1ad3      	subs	r3, r2, r3
 8018d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d92:	8912      	ldrh	r2, [r2, #8]
 8018d94:	4413      	add	r3, r2
  while (seg != NULL &&
 8018d96:	69ba      	ldr	r2, [r7, #24]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	f4bf aed9 	bcs.w	8018b50 <tcp_output+0x160>
 8018d9e:	e000      	b.n	8018da2 <tcp_output+0x3b2>
      break;
 8018da0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d108      	bne.n	8018dbc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2200      	movs	r2, #0
 8018dae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018db2:	e004      	b.n	8018dbe <tcp_output+0x3ce>
    goto output_done;
 8018db4:	bf00      	nop
 8018db6:	e002      	b.n	8018dbe <tcp_output+0x3ce>
    goto output_done;
 8018db8:	bf00      	nop
 8018dba:	e000      	b.n	8018dbe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018dbc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	8b5b      	ldrh	r3, [r3, #26]
 8018dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018dc6:	b29a      	uxth	r2, r3
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018dcc:	2300      	movs	r3, #0
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3728      	adds	r7, #40	@ 0x28
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8018dd6:	bf00      	nop

08018dd8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d106      	bne.n	8018df4 <tcp_output_segment_busy+0x1c>
 8018de6:	4b09      	ldr	r3, [pc, #36]	@ (8018e0c <tcp_output_segment_busy+0x34>)
 8018de8:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018dec:	4908      	ldr	r1, [pc, #32]	@ (8018e10 <tcp_output_segment_busy+0x38>)
 8018dee:	4809      	ldr	r0, [pc, #36]	@ (8018e14 <tcp_output_segment_busy+0x3c>)
 8018df0:	f004 fb84 	bl	801d4fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	685b      	ldr	r3, [r3, #4]
 8018df8:	7b9b      	ldrb	r3, [r3, #14]
 8018dfa:	2b01      	cmp	r3, #1
 8018dfc:	d001      	beq.n	8018e02 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018dfe:	2301      	movs	r3, #1
 8018e00:	e000      	b.n	8018e04 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018e02:	2300      	movs	r3, #0
}
 8018e04:	4618      	mov	r0, r3
 8018e06:	3708      	adds	r7, #8
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}
 8018e0c:	080219fc 	.word	0x080219fc
 8018e10:	08021f98 	.word	0x08021f98
 8018e14:	08021a50 	.word	0x08021a50

08018e18 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018e18:	b5b0      	push	{r4, r5, r7, lr}
 8018e1a:	b08c      	sub	sp, #48	@ 0x30
 8018e1c:	af04      	add	r7, sp, #16
 8018e1e:	60f8      	str	r0, [r7, #12]
 8018e20:	60b9      	str	r1, [r7, #8]
 8018e22:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d106      	bne.n	8018e38 <tcp_output_segment+0x20>
 8018e2a:	4b64      	ldr	r3, [pc, #400]	@ (8018fbc <tcp_output_segment+0x1a4>)
 8018e2c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018e30:	4963      	ldr	r1, [pc, #396]	@ (8018fc0 <tcp_output_segment+0x1a8>)
 8018e32:	4864      	ldr	r0, [pc, #400]	@ (8018fc4 <tcp_output_segment+0x1ac>)
 8018e34:	f004 fb62 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d106      	bne.n	8018e4c <tcp_output_segment+0x34>
 8018e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8018fbc <tcp_output_segment+0x1a4>)
 8018e40:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018e44:	4960      	ldr	r1, [pc, #384]	@ (8018fc8 <tcp_output_segment+0x1b0>)
 8018e46:	485f      	ldr	r0, [pc, #380]	@ (8018fc4 <tcp_output_segment+0x1ac>)
 8018e48:	f004 fb58 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d106      	bne.n	8018e60 <tcp_output_segment+0x48>
 8018e52:	4b5a      	ldr	r3, [pc, #360]	@ (8018fbc <tcp_output_segment+0x1a4>)
 8018e54:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8018e58:	495c      	ldr	r1, [pc, #368]	@ (8018fcc <tcp_output_segment+0x1b4>)
 8018e5a:	485a      	ldr	r0, [pc, #360]	@ (8018fc4 <tcp_output_segment+0x1ac>)
 8018e5c:	f004 fb4e 	bl	801d4fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018e60:	68f8      	ldr	r0, [r7, #12]
 8018e62:	f7ff ffb9 	bl	8018dd8 <tcp_output_segment_busy>
 8018e66:	4603      	mov	r3, r0
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d001      	beq.n	8018e70 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	e0a1      	b.n	8018fb4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	68dc      	ldr	r4, [r3, #12]
 8018e78:	4610      	mov	r0, r2
 8018e7a:	f7f8 fedd 	bl	8011c38 <lwip_htonl>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	68dc      	ldr	r4, [r3, #12]
 8018e8a:	4610      	mov	r0, r2
 8018e8c:	f7f8 febe 	bl	8011c0c <lwip_htons>
 8018e90:	4603      	mov	r3, r0
 8018e92:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e98:	68ba      	ldr	r2, [r7, #8]
 8018e9a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018e9c:	441a      	add	r2, r3
 8018e9e:	68bb      	ldr	r3, [r7, #8]
 8018ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	68db      	ldr	r3, [r3, #12]
 8018ea6:	3314      	adds	r3, #20
 8018ea8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	7a9b      	ldrb	r3, [r3, #10]
 8018eae:	f003 0301 	and.w	r3, r3, #1
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d015      	beq.n	8018ee2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018eb6:	68bb      	ldr	r3, [r7, #8]
 8018eb8:	3304      	adds	r3, #4
 8018eba:	461a      	mov	r2, r3
 8018ebc:	6879      	ldr	r1, [r7, #4]
 8018ebe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018ec2:	f7fc fa39 	bl	8015338 <tcp_eff_send_mss_netif>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018eca:	8b7b      	ldrh	r3, [r7, #26]
 8018ecc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7f8 feb1 	bl	8011c38 <lwip_htonl>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	69fb      	ldr	r3, [r7, #28]
 8018eda:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018edc:	69fb      	ldr	r3, [r7, #28]
 8018ede:	3304      	adds	r3, #4
 8018ee0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	da02      	bge.n	8018ef2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d10c      	bne.n	8018f14 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018efa:	4b35      	ldr	r3, [pc, #212]	@ (8018fd0 <tcp_output_segment+0x1b8>)
 8018efc:	681a      	ldr	r2, [r3, #0]
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	68db      	ldr	r3, [r3, #12]
 8018f06:	685b      	ldr	r3, [r3, #4]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7f8 fe95 	bl	8011c38 <lwip_htonl>
 8018f0e:	4602      	mov	r2, r0
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	68da      	ldr	r2, [r3, #12]
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	685b      	ldr	r3, [r3, #4]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	1ad3      	subs	r3, r2, r3
 8018f20:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	685b      	ldr	r3, [r3, #4]
 8018f26:	8959      	ldrh	r1, [r3, #10]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	685b      	ldr	r3, [r3, #4]
 8018f2c:	8b3a      	ldrh	r2, [r7, #24]
 8018f2e:	1a8a      	subs	r2, r1, r2
 8018f30:	b292      	uxth	r2, r2
 8018f32:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	685b      	ldr	r3, [r3, #4]
 8018f38:	8919      	ldrh	r1, [r3, #8]
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	685b      	ldr	r3, [r3, #4]
 8018f3e:	8b3a      	ldrh	r2, [r7, #24]
 8018f40:	1a8a      	subs	r2, r1, r2
 8018f42:	b292      	uxth	r2, r2
 8018f44:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	685b      	ldr	r3, [r3, #4]
 8018f4a:	68fa      	ldr	r2, [r7, #12]
 8018f4c:	68d2      	ldr	r2, [r2, #12]
 8018f4e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	68db      	ldr	r3, [r3, #12]
 8018f54:	2200      	movs	r2, #0
 8018f56:	741a      	strb	r2, [r3, #16]
 8018f58:	2200      	movs	r2, #0
 8018f5a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	68da      	ldr	r2, [r3, #12]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	7a9b      	ldrb	r3, [r3, #10]
 8018f64:	f003 0301 	and.w	r3, r3, #1
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d001      	beq.n	8018f70 <tcp_output_segment+0x158>
 8018f6c:	2318      	movs	r3, #24
 8018f6e:	e000      	b.n	8018f72 <tcp_output_segment+0x15a>
 8018f70:	2314      	movs	r3, #20
 8018f72:	4413      	add	r3, r2
 8018f74:	69fa      	ldr	r2, [r7, #28]
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d006      	beq.n	8018f88 <tcp_output_segment+0x170>
 8018f7a:	4b10      	ldr	r3, [pc, #64]	@ (8018fbc <tcp_output_segment+0x1a4>)
 8018f7c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018f80:	4914      	ldr	r1, [pc, #80]	@ (8018fd4 <tcp_output_segment+0x1bc>)
 8018f82:	4810      	ldr	r0, [pc, #64]	@ (8018fc4 <tcp_output_segment+0x1ac>)
 8018f84:	f004 faba 	bl	801d4fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	6858      	ldr	r0, [r3, #4]
 8018f8c:	68b9      	ldr	r1, [r7, #8]
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	1d1c      	adds	r4, r3, #4
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	7add      	ldrb	r5, [r3, #11]
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	7a9b      	ldrb	r3, [r3, #10]
 8018f9a:	687a      	ldr	r2, [r7, #4]
 8018f9c:	9202      	str	r2, [sp, #8]
 8018f9e:	2206      	movs	r2, #6
 8018fa0:	9201      	str	r2, [sp, #4]
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	462b      	mov	r3, r5
 8018fa6:	4622      	mov	r2, r4
 8018fa8:	f002 fa32 	bl	801b410 <ip4_output_if>
 8018fac:	4603      	mov	r3, r0
 8018fae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	3720      	adds	r7, #32
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bdb0      	pop	{r4, r5, r7, pc}
 8018fbc:	080219fc 	.word	0x080219fc
 8018fc0:	08021fc0 	.word	0x08021fc0
 8018fc4:	08021a50 	.word	0x08021a50
 8018fc8:	08021fe0 	.word	0x08021fe0
 8018fcc:	08022000 	.word	0x08022000
 8018fd0:	2000c9ac 	.word	0x2000c9ac
 8018fd4:	08022024 	.word	0x08022024

08018fd8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018fd8:	b5b0      	push	{r4, r5, r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d106      	bne.n	8018ff4 <tcp_rexmit_rto_prepare+0x1c>
 8018fe6:	4b31      	ldr	r3, [pc, #196]	@ (80190ac <tcp_rexmit_rto_prepare+0xd4>)
 8018fe8:	f240 6263 	movw	r2, #1635	@ 0x663
 8018fec:	4930      	ldr	r1, [pc, #192]	@ (80190b0 <tcp_rexmit_rto_prepare+0xd8>)
 8018fee:	4831      	ldr	r0, [pc, #196]	@ (80190b4 <tcp_rexmit_rto_prepare+0xdc>)
 8018ff0:	f004 fa84 	bl	801d4fc <iprintf>

  if (pcb->unacked == NULL) {
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d102      	bne.n	8019002 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018ffc:	f06f 0305 	mvn.w	r3, #5
 8019000:	e050      	b.n	80190a4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019006:	60fb      	str	r3, [r7, #12]
 8019008:	e00b      	b.n	8019022 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801900a:	68f8      	ldr	r0, [r7, #12]
 801900c:	f7ff fee4 	bl	8018dd8 <tcp_output_segment_busy>
 8019010:	4603      	mov	r3, r0
 8019012:	2b00      	cmp	r3, #0
 8019014:	d002      	beq.n	801901c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019016:	f06f 0305 	mvn.w	r3, #5
 801901a:	e043      	b.n	80190a4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	60fb      	str	r3, [r7, #12]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d1ef      	bne.n	801900a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801902a:	68f8      	ldr	r0, [r7, #12]
 801902c:	f7ff fed4 	bl	8018dd8 <tcp_output_segment_busy>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d002      	beq.n	801903c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019036:	f06f 0305 	mvn.w	r3, #5
 801903a:	e033      	b.n	80190a4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2200      	movs	r2, #0
 8019050:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	8b5b      	ldrh	r3, [r3, #26]
 8019056:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801905a:	b29a      	uxth	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	68db      	ldr	r3, [r3, #12]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	4618      	mov	r0, r3
 8019068:	f7f8 fde6 	bl	8011c38 <lwip_htonl>
 801906c:	4604      	mov	r4, r0
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	891b      	ldrh	r3, [r3, #8]
 8019072:	461d      	mov	r5, r3
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	68db      	ldr	r3, [r3, #12]
 8019078:	899b      	ldrh	r3, [r3, #12]
 801907a:	b29b      	uxth	r3, r3
 801907c:	4618      	mov	r0, r3
 801907e:	f7f8 fdc5 	bl	8011c0c <lwip_htons>
 8019082:	4603      	mov	r3, r0
 8019084:	b2db      	uxtb	r3, r3
 8019086:	f003 0303 	and.w	r3, r3, #3
 801908a:	2b00      	cmp	r3, #0
 801908c:	d001      	beq.n	8019092 <tcp_rexmit_rto_prepare+0xba>
 801908e:	2301      	movs	r3, #1
 8019090:	e000      	b.n	8019094 <tcp_rexmit_rto_prepare+0xbc>
 8019092:	2300      	movs	r3, #0
 8019094:	442b      	add	r3, r5
 8019096:	18e2      	adds	r2, r4, r3
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2200      	movs	r2, #0
 80190a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80190a2:	2300      	movs	r3, #0
}
 80190a4:	4618      	mov	r0, r3
 80190a6:	3710      	adds	r7, #16
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bdb0      	pop	{r4, r5, r7, pc}
 80190ac:	080219fc 	.word	0x080219fc
 80190b0:	08022038 	.word	0x08022038
 80190b4:	08021a50 	.word	0x08021a50

080190b8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d106      	bne.n	80190d4 <tcp_rexmit_rto_commit+0x1c>
 80190c6:	4b0d      	ldr	r3, [pc, #52]	@ (80190fc <tcp_rexmit_rto_commit+0x44>)
 80190c8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80190cc:	490c      	ldr	r1, [pc, #48]	@ (8019100 <tcp_rexmit_rto_commit+0x48>)
 80190ce:	480d      	ldr	r0, [pc, #52]	@ (8019104 <tcp_rexmit_rto_commit+0x4c>)
 80190d0:	f004 fa14 	bl	801d4fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80190da:	2bff      	cmp	r3, #255	@ 0xff
 80190dc:	d007      	beq.n	80190ee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80190e4:	3301      	adds	r3, #1
 80190e6:	b2da      	uxtb	r2, r3
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80190ee:	6878      	ldr	r0, [r7, #4]
 80190f0:	f7ff fc7e 	bl	80189f0 <tcp_output>
}
 80190f4:	bf00      	nop
 80190f6:	3708      	adds	r7, #8
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}
 80190fc:	080219fc 	.word	0x080219fc
 8019100:	0802205c 	.word	0x0802205c
 8019104:	08021a50 	.word	0x08021a50

08019108 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b082      	sub	sp, #8
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d106      	bne.n	8019124 <tcp_rexmit_rto+0x1c>
 8019116:	4b0a      	ldr	r3, [pc, #40]	@ (8019140 <tcp_rexmit_rto+0x38>)
 8019118:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801911c:	4909      	ldr	r1, [pc, #36]	@ (8019144 <tcp_rexmit_rto+0x3c>)
 801911e:	480a      	ldr	r0, [pc, #40]	@ (8019148 <tcp_rexmit_rto+0x40>)
 8019120:	f004 f9ec 	bl	801d4fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f7ff ff57 	bl	8018fd8 <tcp_rexmit_rto_prepare>
 801912a:	4603      	mov	r3, r0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d102      	bne.n	8019136 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019130:	6878      	ldr	r0, [r7, #4]
 8019132:	f7ff ffc1 	bl	80190b8 <tcp_rexmit_rto_commit>
  }
}
 8019136:	bf00      	nop
 8019138:	3708      	adds	r7, #8
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	080219fc 	.word	0x080219fc
 8019144:	08022080 	.word	0x08022080
 8019148:	08021a50 	.word	0x08021a50

0801914c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801914c:	b590      	push	{r4, r7, lr}
 801914e:	b085      	sub	sp, #20
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d106      	bne.n	8019168 <tcp_rexmit+0x1c>
 801915a:	4b2f      	ldr	r3, [pc, #188]	@ (8019218 <tcp_rexmit+0xcc>)
 801915c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019160:	492e      	ldr	r1, [pc, #184]	@ (801921c <tcp_rexmit+0xd0>)
 8019162:	482f      	ldr	r0, [pc, #188]	@ (8019220 <tcp_rexmit+0xd4>)
 8019164:	f004 f9ca 	bl	801d4fc <iprintf>

  if (pcb->unacked == NULL) {
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801916c:	2b00      	cmp	r3, #0
 801916e:	d102      	bne.n	8019176 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019170:	f06f 0305 	mvn.w	r3, #5
 8019174:	e04c      	b.n	8019210 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801917a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801917c:	68b8      	ldr	r0, [r7, #8]
 801917e:	f7ff fe2b 	bl	8018dd8 <tcp_output_segment_busy>
 8019182:	4603      	mov	r3, r0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d002      	beq.n	801918e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019188:	f06f 0305 	mvn.w	r3, #5
 801918c:	e040      	b.n	8019210 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	336c      	adds	r3, #108	@ 0x6c
 801919a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801919c:	e002      	b.n	80191a4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d011      	beq.n	80191d0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	68db      	ldr	r3, [r3, #12]
 80191b2:	685b      	ldr	r3, [r3, #4]
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7f8 fd3f 	bl	8011c38 <lwip_htonl>
 80191ba:	4604      	mov	r4, r0
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	68db      	ldr	r3, [r3, #12]
 80191c0:	685b      	ldr	r3, [r3, #4]
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7f8 fd38 	bl	8011c38 <lwip_htonl>
 80191c8:	4603      	mov	r3, r0
 80191ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	dbe6      	blt.n	801919e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	68ba      	ldr	r2, [r7, #8]
 80191dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80191de:	68bb      	ldr	r3, [r7, #8]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d103      	bne.n	80191ee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2200      	movs	r2, #0
 80191ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80191f4:	2bff      	cmp	r3, #255	@ 0xff
 80191f6:	d007      	beq.n	8019208 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80191fe:	3301      	adds	r3, #1
 8019200:	b2da      	uxtb	r2, r3
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2200      	movs	r2, #0
 801920c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801920e:	2300      	movs	r3, #0
}
 8019210:	4618      	mov	r0, r3
 8019212:	3714      	adds	r7, #20
 8019214:	46bd      	mov	sp, r7
 8019216:	bd90      	pop	{r4, r7, pc}
 8019218:	080219fc 	.word	0x080219fc
 801921c:	0802209c 	.word	0x0802209c
 8019220:	08021a50 	.word	0x08021a50

08019224 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d106      	bne.n	8019240 <tcp_rexmit_fast+0x1c>
 8019232:	4b2a      	ldr	r3, [pc, #168]	@ (80192dc <tcp_rexmit_fast+0xb8>)
 8019234:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019238:	4929      	ldr	r1, [pc, #164]	@ (80192e0 <tcp_rexmit_fast+0xbc>)
 801923a:	482a      	ldr	r0, [pc, #168]	@ (80192e4 <tcp_rexmit_fast+0xc0>)
 801923c:	f004 f95e 	bl	801d4fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019244:	2b00      	cmp	r3, #0
 8019246:	d044      	beq.n	80192d2 <tcp_rexmit_fast+0xae>
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	8b5b      	ldrh	r3, [r3, #26]
 801924c:	f003 0304 	and.w	r3, r3, #4
 8019250:	2b00      	cmp	r3, #0
 8019252:	d13e      	bne.n	80192d2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f7ff ff79 	bl	801914c <tcp_rexmit>
 801925a:	4603      	mov	r3, r0
 801925c:	2b00      	cmp	r3, #0
 801925e:	d138      	bne.n	80192d2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801926c:	4293      	cmp	r3, r2
 801926e:	bf28      	it	cs
 8019270:	4613      	movcs	r3, r2
 8019272:	b29b      	uxth	r3, r3
 8019274:	0fda      	lsrs	r2, r3, #31
 8019276:	4413      	add	r3, r2
 8019278:	105b      	asrs	r3, r3, #1
 801927a:	b29a      	uxth	r2, r3
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019288:	461a      	mov	r2, r3
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801928e:	005b      	lsls	r3, r3, #1
 8019290:	429a      	cmp	r2, r3
 8019292:	d206      	bcs.n	80192a2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019298:	005b      	lsls	r3, r3, #1
 801929a:	b29a      	uxth	r2, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80192ac:	4619      	mov	r1, r3
 80192ae:	0049      	lsls	r1, r1, #1
 80192b0:	440b      	add	r3, r1
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	4413      	add	r3, r2
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	8b5b      	ldrh	r3, [r3, #26]
 80192c2:	f043 0304 	orr.w	r3, r3, #4
 80192c6:	b29a      	uxth	r2, r3
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2200      	movs	r2, #0
 80192d0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80192d2:	bf00      	nop
 80192d4:	3708      	adds	r7, #8
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}
 80192da:	bf00      	nop
 80192dc:	080219fc 	.word	0x080219fc
 80192e0:	080220b4 	.word	0x080220b4
 80192e4:	08021a50 	.word	0x08021a50

080192e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b086      	sub	sp, #24
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	60f8      	str	r0, [r7, #12]
 80192f0:	607b      	str	r3, [r7, #4]
 80192f2:	460b      	mov	r3, r1
 80192f4:	817b      	strh	r3, [r7, #10]
 80192f6:	4613      	mov	r3, r2
 80192f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80192fa:	897a      	ldrh	r2, [r7, #10]
 80192fc:	893b      	ldrh	r3, [r7, #8]
 80192fe:	4413      	add	r3, r2
 8019300:	b29b      	uxth	r3, r3
 8019302:	3314      	adds	r3, #20
 8019304:	b29b      	uxth	r3, r3
 8019306:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801930a:	4619      	mov	r1, r3
 801930c:	2022      	movs	r0, #34	@ 0x22
 801930e:	f7f9 fd59 	bl	8012dc4 <pbuf_alloc>
 8019312:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d04d      	beq.n	80193b6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801931a:	897b      	ldrh	r3, [r7, #10]
 801931c:	3313      	adds	r3, #19
 801931e:	697a      	ldr	r2, [r7, #20]
 8019320:	8952      	ldrh	r2, [r2, #10]
 8019322:	4293      	cmp	r3, r2
 8019324:	db06      	blt.n	8019334 <tcp_output_alloc_header_common+0x4c>
 8019326:	4b26      	ldr	r3, [pc, #152]	@ (80193c0 <tcp_output_alloc_header_common+0xd8>)
 8019328:	f240 7223 	movw	r2, #1827	@ 0x723
 801932c:	4925      	ldr	r1, [pc, #148]	@ (80193c4 <tcp_output_alloc_header_common+0xdc>)
 801932e:	4826      	ldr	r0, [pc, #152]	@ (80193c8 <tcp_output_alloc_header_common+0xe0>)
 8019330:	f004 f8e4 	bl	801d4fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	685b      	ldr	r3, [r3, #4]
 8019338:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801933a:	8c3b      	ldrh	r3, [r7, #32]
 801933c:	4618      	mov	r0, r3
 801933e:	f7f8 fc65 	bl	8011c0c <lwip_htons>
 8019342:	4603      	mov	r3, r0
 8019344:	461a      	mov	r2, r3
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801934a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801934c:	4618      	mov	r0, r3
 801934e:	f7f8 fc5d 	bl	8011c0c <lwip_htons>
 8019352:	4603      	mov	r3, r0
 8019354:	461a      	mov	r2, r3
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019360:	68f8      	ldr	r0, [r7, #12]
 8019362:	f7f8 fc69 	bl	8011c38 <lwip_htonl>
 8019366:	4602      	mov	r2, r0
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801936c:	897b      	ldrh	r3, [r7, #10]
 801936e:	089b      	lsrs	r3, r3, #2
 8019370:	b29b      	uxth	r3, r3
 8019372:	3305      	adds	r3, #5
 8019374:	b29b      	uxth	r3, r3
 8019376:	031b      	lsls	r3, r3, #12
 8019378:	b29a      	uxth	r2, r3
 801937a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801937e:	b29b      	uxth	r3, r3
 8019380:	4313      	orrs	r3, r2
 8019382:	b29b      	uxth	r3, r3
 8019384:	4618      	mov	r0, r3
 8019386:	f7f8 fc41 	bl	8011c0c <lwip_htons>
 801938a:	4603      	mov	r3, r0
 801938c:	461a      	mov	r2, r3
 801938e:	693b      	ldr	r3, [r7, #16]
 8019390:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019392:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019394:	4618      	mov	r0, r3
 8019396:	f7f8 fc39 	bl	8011c0c <lwip_htons>
 801939a:	4603      	mov	r3, r0
 801939c:	461a      	mov	r2, r3
 801939e:	693b      	ldr	r3, [r7, #16]
 80193a0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	2200      	movs	r2, #0
 80193a6:	741a      	strb	r2, [r3, #16]
 80193a8:	2200      	movs	r2, #0
 80193aa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	2200      	movs	r2, #0
 80193b0:	749a      	strb	r2, [r3, #18]
 80193b2:	2200      	movs	r2, #0
 80193b4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80193b6:	697b      	ldr	r3, [r7, #20]
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	3718      	adds	r7, #24
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	080219fc 	.word	0x080219fc
 80193c4:	080220d4 	.word	0x080220d4
 80193c8:	08021a50 	.word	0x08021a50

080193cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80193cc:	b5b0      	push	{r4, r5, r7, lr}
 80193ce:	b08a      	sub	sp, #40	@ 0x28
 80193d0:	af04      	add	r7, sp, #16
 80193d2:	60f8      	str	r0, [r7, #12]
 80193d4:	607b      	str	r3, [r7, #4]
 80193d6:	460b      	mov	r3, r1
 80193d8:	817b      	strh	r3, [r7, #10]
 80193da:	4613      	mov	r3, r2
 80193dc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d106      	bne.n	80193f2 <tcp_output_alloc_header+0x26>
 80193e4:	4b15      	ldr	r3, [pc, #84]	@ (801943c <tcp_output_alloc_header+0x70>)
 80193e6:	f240 7242 	movw	r2, #1858	@ 0x742
 80193ea:	4915      	ldr	r1, [pc, #84]	@ (8019440 <tcp_output_alloc_header+0x74>)
 80193ec:	4815      	ldr	r0, [pc, #84]	@ (8019444 <tcp_output_alloc_header+0x78>)
 80193ee:	f004 f885 	bl	801d4fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	8adb      	ldrh	r3, [r3, #22]
 80193fa:	68fa      	ldr	r2, [r7, #12]
 80193fc:	8b12      	ldrh	r2, [r2, #24]
 80193fe:	68f9      	ldr	r1, [r7, #12]
 8019400:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019402:	893d      	ldrh	r5, [r7, #8]
 8019404:	897c      	ldrh	r4, [r7, #10]
 8019406:	9103      	str	r1, [sp, #12]
 8019408:	2110      	movs	r1, #16
 801940a:	9102      	str	r1, [sp, #8]
 801940c:	9201      	str	r2, [sp, #4]
 801940e:	9300      	str	r3, [sp, #0]
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	462a      	mov	r2, r5
 8019414:	4621      	mov	r1, r4
 8019416:	f7ff ff67 	bl	80192e8 <tcp_output_alloc_header_common>
 801941a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801941c:	697b      	ldr	r3, [r7, #20]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d006      	beq.n	8019430 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019426:	68fa      	ldr	r2, [r7, #12]
 8019428:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801942a:	441a      	add	r2, r3
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019430:	697b      	ldr	r3, [r7, #20]
}
 8019432:	4618      	mov	r0, r3
 8019434:	3718      	adds	r7, #24
 8019436:	46bd      	mov	sp, r7
 8019438:	bdb0      	pop	{r4, r5, r7, pc}
 801943a:	bf00      	nop
 801943c:	080219fc 	.word	0x080219fc
 8019440:	08022104 	.word	0x08022104
 8019444:	08021a50 	.word	0x08021a50

08019448 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b088      	sub	sp, #32
 801944c:	af00      	add	r7, sp, #0
 801944e:	60f8      	str	r0, [r7, #12]
 8019450:	60b9      	str	r1, [r7, #8]
 8019452:	4611      	mov	r1, r2
 8019454:	461a      	mov	r2, r3
 8019456:	460b      	mov	r3, r1
 8019458:	71fb      	strb	r3, [r7, #7]
 801945a:	4613      	mov	r3, r2
 801945c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801945e:	2300      	movs	r3, #0
 8019460:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d106      	bne.n	8019476 <tcp_output_fill_options+0x2e>
 8019468:	4b12      	ldr	r3, [pc, #72]	@ (80194b4 <tcp_output_fill_options+0x6c>)
 801946a:	f240 7256 	movw	r2, #1878	@ 0x756
 801946e:	4912      	ldr	r1, [pc, #72]	@ (80194b8 <tcp_output_fill_options+0x70>)
 8019470:	4812      	ldr	r0, [pc, #72]	@ (80194bc <tcp_output_fill_options+0x74>)
 8019472:	f004 f843 	bl	801d4fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801947c:	69bb      	ldr	r3, [r7, #24]
 801947e:	3314      	adds	r3, #20
 8019480:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019482:	8bfb      	ldrh	r3, [r7, #30]
 8019484:	009b      	lsls	r3, r3, #2
 8019486:	461a      	mov	r2, r3
 8019488:	79fb      	ldrb	r3, [r7, #7]
 801948a:	009b      	lsls	r3, r3, #2
 801948c:	f003 0304 	and.w	r3, r3, #4
 8019490:	4413      	add	r3, r2
 8019492:	3314      	adds	r3, #20
 8019494:	69ba      	ldr	r2, [r7, #24]
 8019496:	4413      	add	r3, r2
 8019498:	697a      	ldr	r2, [r7, #20]
 801949a:	429a      	cmp	r2, r3
 801949c:	d006      	beq.n	80194ac <tcp_output_fill_options+0x64>
 801949e:	4b05      	ldr	r3, [pc, #20]	@ (80194b4 <tcp_output_fill_options+0x6c>)
 80194a0:	f240 7275 	movw	r2, #1909	@ 0x775
 80194a4:	4906      	ldr	r1, [pc, #24]	@ (80194c0 <tcp_output_fill_options+0x78>)
 80194a6:	4805      	ldr	r0, [pc, #20]	@ (80194bc <tcp_output_fill_options+0x74>)
 80194a8:	f004 f828 	bl	801d4fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80194ac:	bf00      	nop
 80194ae:	3720      	adds	r7, #32
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}
 80194b4:	080219fc 	.word	0x080219fc
 80194b8:	0802212c 	.word	0x0802212c
 80194bc:	08021a50 	.word	0x08021a50
 80194c0:	08022024 	.word	0x08022024

080194c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b08a      	sub	sp, #40	@ 0x28
 80194c8:	af04      	add	r7, sp, #16
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	607a      	str	r2, [r7, #4]
 80194d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d106      	bne.n	80194e6 <tcp_output_control_segment+0x22>
 80194d8:	4b1c      	ldr	r3, [pc, #112]	@ (801954c <tcp_output_control_segment+0x88>)
 80194da:	f240 7287 	movw	r2, #1927	@ 0x787
 80194de:	491c      	ldr	r1, [pc, #112]	@ (8019550 <tcp_output_control_segment+0x8c>)
 80194e0:	481c      	ldr	r0, [pc, #112]	@ (8019554 <tcp_output_control_segment+0x90>)
 80194e2:	f004 f80b 	bl	801d4fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80194e6:	683a      	ldr	r2, [r7, #0]
 80194e8:	6879      	ldr	r1, [r7, #4]
 80194ea:	68f8      	ldr	r0, [r7, #12]
 80194ec:	f7fe faea 	bl	8017ac4 <tcp_route>
 80194f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d102      	bne.n	80194fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80194f8:	23fc      	movs	r3, #252	@ 0xfc
 80194fa:	75fb      	strb	r3, [r7, #23]
 80194fc:	e01c      	b.n	8019538 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d006      	beq.n	8019512 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	7adb      	ldrb	r3, [r3, #11]
 8019508:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	7a9b      	ldrb	r3, [r3, #10]
 801950e:	757b      	strb	r3, [r7, #21]
 8019510:	e003      	b.n	801951a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019512:	23ff      	movs	r3, #255	@ 0xff
 8019514:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019516:	2300      	movs	r3, #0
 8019518:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801951a:	7dba      	ldrb	r2, [r7, #22]
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	9302      	str	r3, [sp, #8]
 8019520:	2306      	movs	r3, #6
 8019522:	9301      	str	r3, [sp, #4]
 8019524:	7d7b      	ldrb	r3, [r7, #21]
 8019526:	9300      	str	r3, [sp, #0]
 8019528:	4613      	mov	r3, r2
 801952a:	683a      	ldr	r2, [r7, #0]
 801952c:	6879      	ldr	r1, [r7, #4]
 801952e:	68b8      	ldr	r0, [r7, #8]
 8019530:	f001 ff6e 	bl	801b410 <ip4_output_if>
 8019534:	4603      	mov	r3, r0
 8019536:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019538:	68b8      	ldr	r0, [r7, #8]
 801953a:	f7f9 ff27 	bl	801338c <pbuf_free>
  return err;
 801953e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019542:	4618      	mov	r0, r3
 8019544:	3718      	adds	r7, #24
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}
 801954a:	bf00      	nop
 801954c:	080219fc 	.word	0x080219fc
 8019550:	08022154 	.word	0x08022154
 8019554:	08021a50 	.word	0x08021a50

08019558 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019558:	b590      	push	{r4, r7, lr}
 801955a:	b08b      	sub	sp, #44	@ 0x2c
 801955c:	af04      	add	r7, sp, #16
 801955e:	60f8      	str	r0, [r7, #12]
 8019560:	60b9      	str	r1, [r7, #8]
 8019562:	607a      	str	r2, [r7, #4]
 8019564:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d106      	bne.n	801957a <tcp_rst+0x22>
 801956c:	4b1f      	ldr	r3, [pc, #124]	@ (80195ec <tcp_rst+0x94>)
 801956e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019572:	491f      	ldr	r1, [pc, #124]	@ (80195f0 <tcp_rst+0x98>)
 8019574:	481f      	ldr	r0, [pc, #124]	@ (80195f4 <tcp_rst+0x9c>)
 8019576:	f003 ffc1 	bl	801d4fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801957c:	2b00      	cmp	r3, #0
 801957e:	d106      	bne.n	801958e <tcp_rst+0x36>
 8019580:	4b1a      	ldr	r3, [pc, #104]	@ (80195ec <tcp_rst+0x94>)
 8019582:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8019586:	491c      	ldr	r1, [pc, #112]	@ (80195f8 <tcp_rst+0xa0>)
 8019588:	481a      	ldr	r0, [pc, #104]	@ (80195f4 <tcp_rst+0x9c>)
 801958a:	f003 ffb7 	bl	801d4fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801958e:	2300      	movs	r3, #0
 8019590:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019592:	f246 0308 	movw	r3, #24584	@ 0x6008
 8019596:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019598:	7dfb      	ldrb	r3, [r7, #23]
 801959a:	b29c      	uxth	r4, r3
 801959c:	68b8      	ldr	r0, [r7, #8]
 801959e:	f7f8 fb4b 	bl	8011c38 <lwip_htonl>
 80195a2:	4602      	mov	r2, r0
 80195a4:	8abb      	ldrh	r3, [r7, #20]
 80195a6:	9303      	str	r3, [sp, #12]
 80195a8:	2314      	movs	r3, #20
 80195aa:	9302      	str	r3, [sp, #8]
 80195ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80195ae:	9301      	str	r3, [sp, #4]
 80195b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80195b2:	9300      	str	r3, [sp, #0]
 80195b4:	4613      	mov	r3, r2
 80195b6:	2200      	movs	r2, #0
 80195b8:	4621      	mov	r1, r4
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f7ff fe94 	bl	80192e8 <tcp_output_alloc_header_common>
 80195c0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d00c      	beq.n	80195e2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80195c8:	7dfb      	ldrb	r3, [r7, #23]
 80195ca:	2200      	movs	r2, #0
 80195cc:	6939      	ldr	r1, [r7, #16]
 80195ce:	68f8      	ldr	r0, [r7, #12]
 80195d0:	f7ff ff3a 	bl	8019448 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80195d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d6:	683a      	ldr	r2, [r7, #0]
 80195d8:	6939      	ldr	r1, [r7, #16]
 80195da:	68f8      	ldr	r0, [r7, #12]
 80195dc:	f7ff ff72 	bl	80194c4 <tcp_output_control_segment>
 80195e0:	e000      	b.n	80195e4 <tcp_rst+0x8c>
    return;
 80195e2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80195e4:	371c      	adds	r7, #28
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd90      	pop	{r4, r7, pc}
 80195ea:	bf00      	nop
 80195ec:	080219fc 	.word	0x080219fc
 80195f0:	08022180 	.word	0x08022180
 80195f4:	08021a50 	.word	0x08021a50
 80195f8:	0802219c 	.word	0x0802219c

080195fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80195fc:	b590      	push	{r4, r7, lr}
 80195fe:	b087      	sub	sp, #28
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019604:	2300      	movs	r3, #0
 8019606:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019608:	2300      	movs	r3, #0
 801960a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d106      	bne.n	8019620 <tcp_send_empty_ack+0x24>
 8019612:	4b28      	ldr	r3, [pc, #160]	@ (80196b4 <tcp_send_empty_ack+0xb8>)
 8019614:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019618:	4927      	ldr	r1, [pc, #156]	@ (80196b8 <tcp_send_empty_ack+0xbc>)
 801961a:	4828      	ldr	r0, [pc, #160]	@ (80196bc <tcp_send_empty_ack+0xc0>)
 801961c:	f003 ff6e 	bl	801d4fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019620:	7dfb      	ldrb	r3, [r7, #23]
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	b2db      	uxtb	r3, r3
 8019626:	f003 0304 	and.w	r3, r3, #4
 801962a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801962c:	7d7b      	ldrb	r3, [r7, #21]
 801962e:	b29c      	uxth	r4, r3
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019634:	4618      	mov	r0, r3
 8019636:	f7f8 faff 	bl	8011c38 <lwip_htonl>
 801963a:	4603      	mov	r3, r0
 801963c:	2200      	movs	r2, #0
 801963e:	4621      	mov	r1, r4
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f7ff fec3 	bl	80193cc <tcp_output_alloc_header>
 8019646:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019648:	693b      	ldr	r3, [r7, #16]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d109      	bne.n	8019662 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	8b5b      	ldrh	r3, [r3, #26]
 8019652:	f043 0303 	orr.w	r3, r3, #3
 8019656:	b29a      	uxth	r2, r3
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801965c:	f06f 0301 	mvn.w	r3, #1
 8019660:	e023      	b.n	80196aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019662:	7dbb      	ldrb	r3, [r7, #22]
 8019664:	7dfa      	ldrb	r2, [r7, #23]
 8019666:	6939      	ldr	r1, [r7, #16]
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7ff feed 	bl	8019448 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801966e:	687a      	ldr	r2, [r7, #4]
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	3304      	adds	r3, #4
 8019674:	6939      	ldr	r1, [r7, #16]
 8019676:	6878      	ldr	r0, [r7, #4]
 8019678:	f7ff ff24 	bl	80194c4 <tcp_output_control_segment>
 801967c:	4603      	mov	r3, r0
 801967e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d007      	beq.n	8019698 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	8b5b      	ldrh	r3, [r3, #26]
 801968c:	f043 0303 	orr.w	r3, r3, #3
 8019690:	b29a      	uxth	r2, r3
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	835a      	strh	r2, [r3, #26]
 8019696:	e006      	b.n	80196a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	8b5b      	ldrh	r3, [r3, #26]
 801969c:	f023 0303 	bic.w	r3, r3, #3
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80196a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	371c      	adds	r7, #28
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd90      	pop	{r4, r7, pc}
 80196b2:	bf00      	nop
 80196b4:	080219fc 	.word	0x080219fc
 80196b8:	080221b8 	.word	0x080221b8
 80196bc:	08021a50 	.word	0x08021a50

080196c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80196c0:	b590      	push	{r4, r7, lr}
 80196c2:	b087      	sub	sp, #28
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80196c8:	2300      	movs	r3, #0
 80196ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d106      	bne.n	80196e0 <tcp_keepalive+0x20>
 80196d2:	4b18      	ldr	r3, [pc, #96]	@ (8019734 <tcp_keepalive+0x74>)
 80196d4:	f640 0224 	movw	r2, #2084	@ 0x824
 80196d8:	4917      	ldr	r1, [pc, #92]	@ (8019738 <tcp_keepalive+0x78>)
 80196da:	4818      	ldr	r0, [pc, #96]	@ (801973c <tcp_keepalive+0x7c>)
 80196dc:	f003 ff0e 	bl	801d4fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80196e0:	7dfb      	ldrb	r3, [r7, #23]
 80196e2:	b29c      	uxth	r4, r3
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80196e8:	3b01      	subs	r3, #1
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f8 faa4 	bl	8011c38 <lwip_htonl>
 80196f0:	4603      	mov	r3, r0
 80196f2:	2200      	movs	r2, #0
 80196f4:	4621      	mov	r1, r4
 80196f6:	6878      	ldr	r0, [r7, #4]
 80196f8:	f7ff fe68 	bl	80193cc <tcp_output_alloc_header>
 80196fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80196fe:	693b      	ldr	r3, [r7, #16]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d102      	bne.n	801970a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019704:	f04f 33ff 	mov.w	r3, #4294967295
 8019708:	e010      	b.n	801972c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801970a:	7dfb      	ldrb	r3, [r7, #23]
 801970c:	2200      	movs	r2, #0
 801970e:	6939      	ldr	r1, [r7, #16]
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	f7ff fe99 	bl	8019448 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019716:	687a      	ldr	r2, [r7, #4]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	3304      	adds	r3, #4
 801971c:	6939      	ldr	r1, [r7, #16]
 801971e:	6878      	ldr	r0, [r7, #4]
 8019720:	f7ff fed0 	bl	80194c4 <tcp_output_control_segment>
 8019724:	4603      	mov	r3, r0
 8019726:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801972c:	4618      	mov	r0, r3
 801972e:	371c      	adds	r7, #28
 8019730:	46bd      	mov	sp, r7
 8019732:	bd90      	pop	{r4, r7, pc}
 8019734:	080219fc 	.word	0x080219fc
 8019738:	080221d8 	.word	0x080221d8
 801973c:	08021a50 	.word	0x08021a50

08019740 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019740:	b590      	push	{r4, r7, lr}
 8019742:	b08b      	sub	sp, #44	@ 0x2c
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019748:	2300      	movs	r3, #0
 801974a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d106      	bne.n	8019762 <tcp_zero_window_probe+0x22>
 8019754:	4b4c      	ldr	r3, [pc, #304]	@ (8019888 <tcp_zero_window_probe+0x148>)
 8019756:	f640 024f 	movw	r2, #2127	@ 0x84f
 801975a:	494c      	ldr	r1, [pc, #304]	@ (801988c <tcp_zero_window_probe+0x14c>)
 801975c:	484c      	ldr	r0, [pc, #304]	@ (8019890 <tcp_zero_window_probe+0x150>)
 801975e:	f003 fecd 	bl	801d4fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019766:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019768:	6a3b      	ldr	r3, [r7, #32]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d101      	bne.n	8019772 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801976e:	2300      	movs	r3, #0
 8019770:	e086      	b.n	8019880 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019778:	2bff      	cmp	r3, #255	@ 0xff
 801977a:	d007      	beq.n	801978c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019782:	3301      	adds	r3, #1
 8019784:	b2da      	uxtb	r2, r3
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801978c:	6a3b      	ldr	r3, [r7, #32]
 801978e:	68db      	ldr	r3, [r3, #12]
 8019790:	899b      	ldrh	r3, [r3, #12]
 8019792:	b29b      	uxth	r3, r3
 8019794:	4618      	mov	r0, r3
 8019796:	f7f8 fa39 	bl	8011c0c <lwip_htons>
 801979a:	4603      	mov	r3, r0
 801979c:	b2db      	uxtb	r3, r3
 801979e:	f003 0301 	and.w	r3, r3, #1
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d005      	beq.n	80197b2 <tcp_zero_window_probe+0x72>
 80197a6:	6a3b      	ldr	r3, [r7, #32]
 80197a8:	891b      	ldrh	r3, [r3, #8]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d101      	bne.n	80197b2 <tcp_zero_window_probe+0x72>
 80197ae:	2301      	movs	r3, #1
 80197b0:	e000      	b.n	80197b4 <tcp_zero_window_probe+0x74>
 80197b2:	2300      	movs	r3, #0
 80197b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80197b6:	7ffb      	ldrb	r3, [r7, #31]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	bf0c      	ite	eq
 80197bc:	2301      	moveq	r3, #1
 80197be:	2300      	movne	r3, #0
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80197c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80197c8:	b299      	uxth	r1, r3
 80197ca:	6a3b      	ldr	r3, [r7, #32]
 80197cc:	68db      	ldr	r3, [r3, #12]
 80197ce:	685b      	ldr	r3, [r3, #4]
 80197d0:	8bba      	ldrh	r2, [r7, #28]
 80197d2:	6878      	ldr	r0, [r7, #4]
 80197d4:	f7ff fdfa 	bl	80193cc <tcp_output_alloc_header>
 80197d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80197da:	69bb      	ldr	r3, [r7, #24]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d102      	bne.n	80197e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80197e0:	f04f 33ff 	mov.w	r3, #4294967295
 80197e4:	e04c      	b.n	8019880 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80197e6:	69bb      	ldr	r3, [r7, #24]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80197ec:	7ffb      	ldrb	r3, [r7, #31]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d011      	beq.n	8019816 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80197f2:	697b      	ldr	r3, [r7, #20]
 80197f4:	899b      	ldrh	r3, [r3, #12]
 80197f6:	b29b      	uxth	r3, r3
 80197f8:	b21b      	sxth	r3, r3
 80197fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80197fe:	b21c      	sxth	r4, r3
 8019800:	2011      	movs	r0, #17
 8019802:	f7f8 fa03 	bl	8011c0c <lwip_htons>
 8019806:	4603      	mov	r3, r0
 8019808:	b21b      	sxth	r3, r3
 801980a:	4323      	orrs	r3, r4
 801980c:	b21b      	sxth	r3, r3
 801980e:	b29a      	uxth	r2, r3
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	819a      	strh	r2, [r3, #12]
 8019814:	e010      	b.n	8019838 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019816:	69bb      	ldr	r3, [r7, #24]
 8019818:	685b      	ldr	r3, [r3, #4]
 801981a:	3314      	adds	r3, #20
 801981c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801981e:	6a3b      	ldr	r3, [r7, #32]
 8019820:	6858      	ldr	r0, [r3, #4]
 8019822:	6a3b      	ldr	r3, [r7, #32]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	891a      	ldrh	r2, [r3, #8]
 8019828:	6a3b      	ldr	r3, [r7, #32]
 801982a:	891b      	ldrh	r3, [r3, #8]
 801982c:	1ad3      	subs	r3, r2, r3
 801982e:	b29b      	uxth	r3, r3
 8019830:	2201      	movs	r2, #1
 8019832:	6939      	ldr	r1, [r7, #16]
 8019834:	f7f9 ffa0 	bl	8013778 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019838:	6a3b      	ldr	r3, [r7, #32]
 801983a:	68db      	ldr	r3, [r3, #12]
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	4618      	mov	r0, r3
 8019840:	f7f8 f9fa 	bl	8011c38 <lwip_htonl>
 8019844:	4603      	mov	r3, r0
 8019846:	3301      	adds	r3, #1
 8019848:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	1ad3      	subs	r3, r2, r3
 8019852:	2b00      	cmp	r3, #0
 8019854:	da02      	bge.n	801985c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	68fa      	ldr	r2, [r7, #12]
 801985a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801985c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019860:	2200      	movs	r2, #0
 8019862:	69b9      	ldr	r1, [r7, #24]
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f7ff fdef 	bl	8019448 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801986a:	687a      	ldr	r2, [r7, #4]
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	3304      	adds	r3, #4
 8019870:	69b9      	ldr	r1, [r7, #24]
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f7ff fe26 	bl	80194c4 <tcp_output_control_segment>
 8019878:	4603      	mov	r3, r0
 801987a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801987c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019880:	4618      	mov	r0, r3
 8019882:	372c      	adds	r7, #44	@ 0x2c
 8019884:	46bd      	mov	sp, r7
 8019886:	bd90      	pop	{r4, r7, pc}
 8019888:	080219fc 	.word	0x080219fc
 801988c:	080221f4 	.word	0x080221f4
 8019890:	08021a50 	.word	0x08021a50

08019894 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b082      	sub	sp, #8
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801989c:	f7fa f85a 	bl	8013954 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80198a0:	4b0a      	ldr	r3, [pc, #40]	@ (80198cc <tcpip_tcp_timer+0x38>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d103      	bne.n	80198b0 <tcpip_tcp_timer+0x1c>
 80198a8:	4b09      	ldr	r3, [pc, #36]	@ (80198d0 <tcpip_tcp_timer+0x3c>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d005      	beq.n	80198bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80198b0:	2200      	movs	r2, #0
 80198b2:	4908      	ldr	r1, [pc, #32]	@ (80198d4 <tcpip_tcp_timer+0x40>)
 80198b4:	20fa      	movs	r0, #250	@ 0xfa
 80198b6:	f000 f8f3 	bl	8019aa0 <sys_timeout>
 80198ba:	e003      	b.n	80198c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80198bc:	4b06      	ldr	r3, [pc, #24]	@ (80198d8 <tcpip_tcp_timer+0x44>)
 80198be:	2200      	movs	r2, #0
 80198c0:	601a      	str	r2, [r3, #0]
  }
}
 80198c2:	bf00      	nop
 80198c4:	bf00      	nop
 80198c6:	3708      	adds	r7, #8
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	2000c9b8 	.word	0x2000c9b8
 80198d0:	2000c9bc 	.word	0x2000c9bc
 80198d4:	08019895 	.word	0x08019895
 80198d8:	2000ca04 	.word	0x2000ca04

080198dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80198e0:	4b0a      	ldr	r3, [pc, #40]	@ (801990c <tcp_timer_needed+0x30>)
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d10f      	bne.n	8019908 <tcp_timer_needed+0x2c>
 80198e8:	4b09      	ldr	r3, [pc, #36]	@ (8019910 <tcp_timer_needed+0x34>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d103      	bne.n	80198f8 <tcp_timer_needed+0x1c>
 80198f0:	4b08      	ldr	r3, [pc, #32]	@ (8019914 <tcp_timer_needed+0x38>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d007      	beq.n	8019908 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80198f8:	4b04      	ldr	r3, [pc, #16]	@ (801990c <tcp_timer_needed+0x30>)
 80198fa:	2201      	movs	r2, #1
 80198fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80198fe:	2200      	movs	r2, #0
 8019900:	4905      	ldr	r1, [pc, #20]	@ (8019918 <tcp_timer_needed+0x3c>)
 8019902:	20fa      	movs	r0, #250	@ 0xfa
 8019904:	f000 f8cc 	bl	8019aa0 <sys_timeout>
  }
}
 8019908:	bf00      	nop
 801990a:	bd80      	pop	{r7, pc}
 801990c:	2000ca04 	.word	0x2000ca04
 8019910:	2000c9b8 	.word	0x2000c9b8
 8019914:	2000c9bc 	.word	0x2000c9bc
 8019918:	08019895 	.word	0x08019895

0801991c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b086      	sub	sp, #24
 8019920:	af00      	add	r7, sp, #0
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019928:	200a      	movs	r0, #10
 801992a:	f7f8 fe47 	bl	80125bc <memp_malloc>
 801992e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d109      	bne.n	801994a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d151      	bne.n	80199e0 <sys_timeout_abs+0xc4>
 801993c:	4b2a      	ldr	r3, [pc, #168]	@ (80199e8 <sys_timeout_abs+0xcc>)
 801993e:	22be      	movs	r2, #190	@ 0xbe
 8019940:	492a      	ldr	r1, [pc, #168]	@ (80199ec <sys_timeout_abs+0xd0>)
 8019942:	482b      	ldr	r0, [pc, #172]	@ (80199f0 <sys_timeout_abs+0xd4>)
 8019944:	f003 fdda 	bl	801d4fc <iprintf>
    return;
 8019948:	e04a      	b.n	80199e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	2200      	movs	r2, #0
 801994e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019950:	693b      	ldr	r3, [r7, #16]
 8019952:	68ba      	ldr	r2, [r7, #8]
 8019954:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801995c:	693b      	ldr	r3, [r7, #16]
 801995e:	68fa      	ldr	r2, [r7, #12]
 8019960:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019962:	4b24      	ldr	r3, [pc, #144]	@ (80199f4 <sys_timeout_abs+0xd8>)
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d103      	bne.n	8019972 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801996a:	4a22      	ldr	r2, [pc, #136]	@ (80199f4 <sys_timeout_abs+0xd8>)
 801996c:	693b      	ldr	r3, [r7, #16]
 801996e:	6013      	str	r3, [r2, #0]
    return;
 8019970:	e037      	b.n	80199e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	685a      	ldr	r2, [r3, #4]
 8019976:	4b1f      	ldr	r3, [pc, #124]	@ (80199f4 <sys_timeout_abs+0xd8>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	685b      	ldr	r3, [r3, #4]
 801997c:	1ad3      	subs	r3, r2, r3
 801997e:	0fdb      	lsrs	r3, r3, #31
 8019980:	f003 0301 	and.w	r3, r3, #1
 8019984:	b2db      	uxtb	r3, r3
 8019986:	2b00      	cmp	r3, #0
 8019988:	d007      	beq.n	801999a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801998a:	4b1a      	ldr	r3, [pc, #104]	@ (80199f4 <sys_timeout_abs+0xd8>)
 801998c:	681a      	ldr	r2, [r3, #0]
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019992:	4a18      	ldr	r2, [pc, #96]	@ (80199f4 <sys_timeout_abs+0xd8>)
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	6013      	str	r3, [r2, #0]
 8019998:	e023      	b.n	80199e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801999a:	4b16      	ldr	r3, [pc, #88]	@ (80199f4 <sys_timeout_abs+0xd8>)
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	617b      	str	r3, [r7, #20]
 80199a0:	e01a      	b.n	80199d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d00b      	beq.n	80199c2 <sys_timeout_abs+0xa6>
 80199aa:	693b      	ldr	r3, [r7, #16]
 80199ac:	685a      	ldr	r2, [r3, #4]
 80199ae:	697b      	ldr	r3, [r7, #20]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	1ad3      	subs	r3, r2, r3
 80199b6:	0fdb      	lsrs	r3, r3, #31
 80199b8:	f003 0301 	and.w	r3, r3, #1
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d007      	beq.n	80199d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	681a      	ldr	r2, [r3, #0]
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	693a      	ldr	r2, [r7, #16]
 80199ce:	601a      	str	r2, [r3, #0]
        break;
 80199d0:	e007      	b.n	80199e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80199d2:	697b      	ldr	r3, [r7, #20]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	617b      	str	r3, [r7, #20]
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d1e1      	bne.n	80199a2 <sys_timeout_abs+0x86>
 80199de:	e000      	b.n	80199e2 <sys_timeout_abs+0xc6>
    return;
 80199e0:	bf00      	nop
      }
    }
  }
}
 80199e2:	3718      	adds	r7, #24
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	08022218 	.word	0x08022218
 80199ec:	0802224c 	.word	0x0802224c
 80199f0:	0802228c 	.word	0x0802228c
 80199f4:	2000c9fc 	.word	0x2000c9fc

080199f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b086      	sub	sp, #24
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	685b      	ldr	r3, [r3, #4]
 8019a08:	4798      	blx	r3

  now = sys_now();
 8019a0a:	f7f2 fcc5 	bl	800c398 <sys_now>
 8019a0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019a10:	697b      	ldr	r3, [r7, #20]
 8019a12:	681a      	ldr	r2, [r3, #0]
 8019a14:	4b0f      	ldr	r3, [pc, #60]	@ (8019a54 <lwip_cyclic_timer+0x5c>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	4413      	add	r3, r2
 8019a1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019a1c:	68fa      	ldr	r2, [r7, #12]
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	1ad3      	subs	r3, r2, r3
 8019a22:	0fdb      	lsrs	r3, r3, #31
 8019a24:	f003 0301 	and.w	r3, r3, #1
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d009      	beq.n	8019a42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	681a      	ldr	r2, [r3, #0]
 8019a32:	693b      	ldr	r3, [r7, #16]
 8019a34:	4413      	add	r3, r2
 8019a36:	687a      	ldr	r2, [r7, #4]
 8019a38:	4907      	ldr	r1, [pc, #28]	@ (8019a58 <lwip_cyclic_timer+0x60>)
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7ff ff6e 	bl	801991c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019a40:	e004      	b.n	8019a4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019a42:	687a      	ldr	r2, [r7, #4]
 8019a44:	4904      	ldr	r1, [pc, #16]	@ (8019a58 <lwip_cyclic_timer+0x60>)
 8019a46:	68f8      	ldr	r0, [r7, #12]
 8019a48:	f7ff ff68 	bl	801991c <sys_timeout_abs>
}
 8019a4c:	bf00      	nop
 8019a4e:	3718      	adds	r7, #24
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	2000ca00 	.word	0x2000ca00
 8019a58:	080199f9 	.word	0x080199f9

08019a5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019a62:	2301      	movs	r3, #1
 8019a64:	607b      	str	r3, [r7, #4]
 8019a66:	e00e      	b.n	8019a86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019a68:	4a0b      	ldr	r2, [pc, #44]	@ (8019a98 <sys_timeouts_init+0x3c>)
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	00db      	lsls	r3, r3, #3
 8019a74:	4a08      	ldr	r2, [pc, #32]	@ (8019a98 <sys_timeouts_init+0x3c>)
 8019a76:	4413      	add	r3, r2
 8019a78:	461a      	mov	r2, r3
 8019a7a:	4908      	ldr	r1, [pc, #32]	@ (8019a9c <sys_timeouts_init+0x40>)
 8019a7c:	f000 f810 	bl	8019aa0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	3301      	adds	r3, #1
 8019a84:	607b      	str	r3, [r7, #4]
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	2b02      	cmp	r3, #2
 8019a8a:	d9ed      	bls.n	8019a68 <sys_timeouts_init+0xc>
  }
}
 8019a8c:	bf00      	nop
 8019a8e:	bf00      	nop
 8019a90:	3708      	adds	r7, #8
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}
 8019a96:	bf00      	nop
 8019a98:	08022e94 	.word	0x08022e94
 8019a9c:	080199f9 	.word	0x080199f9

08019aa0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b086      	sub	sp, #24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019ab2:	d306      	bcc.n	8019ac2 <sys_timeout+0x22>
 8019ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8019ae0 <sys_timeout+0x40>)
 8019ab6:	f240 1229 	movw	r2, #297	@ 0x129
 8019aba:	490a      	ldr	r1, [pc, #40]	@ (8019ae4 <sys_timeout+0x44>)
 8019abc:	480a      	ldr	r0, [pc, #40]	@ (8019ae8 <sys_timeout+0x48>)
 8019abe:	f003 fd1d 	bl	801d4fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019ac2:	f7f2 fc69 	bl	800c398 <sys_now>
 8019ac6:	4602      	mov	r2, r0
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	4413      	add	r3, r2
 8019acc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	68b9      	ldr	r1, [r7, #8]
 8019ad2:	6978      	ldr	r0, [r7, #20]
 8019ad4:	f7ff ff22 	bl	801991c <sys_timeout_abs>
#endif
}
 8019ad8:	bf00      	nop
 8019ada:	3718      	adds	r7, #24
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}
 8019ae0:	08022218 	.word	0x08022218
 8019ae4:	080222b4 	.word	0x080222b4
 8019ae8:	0802228c 	.word	0x0802228c

08019aec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019af2:	f7f2 fc51 	bl	800c398 <sys_now>
 8019af6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019af8:	4b17      	ldr	r3, [pc, #92]	@ (8019b58 <sys_check_timeouts+0x6c>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d022      	beq.n	8019b4a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	68fa      	ldr	r2, [r7, #12]
 8019b0a:	1ad3      	subs	r3, r2, r3
 8019b0c:	0fdb      	lsrs	r3, r3, #31
 8019b0e:	f003 0301 	and.w	r3, r3, #1
 8019b12:	b2db      	uxtb	r3, r3
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d11a      	bne.n	8019b4e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8019b58 <sys_check_timeouts+0x6c>)
 8019b1e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	689b      	ldr	r3, [r3, #8]
 8019b24:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	68db      	ldr	r3, [r3, #12]
 8019b2a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019b2c:	68bb      	ldr	r3, [r7, #8]
 8019b2e:	685b      	ldr	r3, [r3, #4]
 8019b30:	4a0a      	ldr	r2, [pc, #40]	@ (8019b5c <sys_check_timeouts+0x70>)
 8019b32:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019b34:	68b9      	ldr	r1, [r7, #8]
 8019b36:	200a      	movs	r0, #10
 8019b38:	f7f8 fdb6 	bl	80126a8 <memp_free>
    if (handler != NULL) {
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d0da      	beq.n	8019af8 <sys_check_timeouts+0xc>
      handler(arg);
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	6838      	ldr	r0, [r7, #0]
 8019b46:	4798      	blx	r3
  do {
 8019b48:	e7d6      	b.n	8019af8 <sys_check_timeouts+0xc>
      return;
 8019b4a:	bf00      	nop
 8019b4c:	e000      	b.n	8019b50 <sys_check_timeouts+0x64>
      return;
 8019b4e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019b50:	3710      	adds	r7, #16
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}
 8019b56:	bf00      	nop
 8019b58:	2000c9fc 	.word	0x2000c9fc
 8019b5c:	2000ca00 	.word	0x2000ca00

08019b60 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019b66:	4b16      	ldr	r3, [pc, #88]	@ (8019bc0 <sys_timeouts_sleeptime+0x60>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d102      	bne.n	8019b74 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b72:	e020      	b.n	8019bb6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019b74:	f7f2 fc10 	bl	800c398 <sys_now>
 8019b78:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019b7a:	4b11      	ldr	r3, [pc, #68]	@ (8019bc0 <sys_timeouts_sleeptime+0x60>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	685a      	ldr	r2, [r3, #4]
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	1ad3      	subs	r3, r2, r3
 8019b84:	0fdb      	lsrs	r3, r3, #31
 8019b86:	f003 0301 	and.w	r3, r3, #1
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d001      	beq.n	8019b94 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019b90:	2300      	movs	r3, #0
 8019b92:	e010      	b.n	8019bb6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019b94:	4b0a      	ldr	r3, [pc, #40]	@ (8019bc0 <sys_timeouts_sleeptime+0x60>)
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	685a      	ldr	r2, [r3, #4]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	1ad3      	subs	r3, r2, r3
 8019b9e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	da06      	bge.n	8019bb4 <sys_timeouts_sleeptime+0x54>
 8019ba6:	4b07      	ldr	r3, [pc, #28]	@ (8019bc4 <sys_timeouts_sleeptime+0x64>)
 8019ba8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019bac:	4906      	ldr	r1, [pc, #24]	@ (8019bc8 <sys_timeouts_sleeptime+0x68>)
 8019bae:	4807      	ldr	r0, [pc, #28]	@ (8019bcc <sys_timeouts_sleeptime+0x6c>)
 8019bb0:	f003 fca4 	bl	801d4fc <iprintf>
    return ret;
 8019bb4:	683b      	ldr	r3, [r7, #0]
  }
}
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	3708      	adds	r7, #8
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	2000c9fc 	.word	0x2000c9fc
 8019bc4:	08022218 	.word	0x08022218
 8019bc8:	080222ec 	.word	0x080222ec
 8019bcc:	0802228c 	.word	0x0802228c

08019bd0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019bd4:	f003 fb0e 	bl	801d1f4 <rand>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019be0:	b29b      	uxth	r3, r3
 8019be2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	4b01      	ldr	r3, [pc, #4]	@ (8019bf0 <udp_init+0x20>)
 8019bea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019bec:	bf00      	nop
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	200000a4 	.word	0x200000a4

08019bf4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	60b9      	str	r1, [r7, #8]
 8019bfe:	4613      	mov	r3, r2
 8019c00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d105      	bne.n	8019c14 <udp_input_local_match+0x20>
 8019c08:	4b27      	ldr	r3, [pc, #156]	@ (8019ca8 <udp_input_local_match+0xb4>)
 8019c0a:	2287      	movs	r2, #135	@ 0x87
 8019c0c:	4927      	ldr	r1, [pc, #156]	@ (8019cac <udp_input_local_match+0xb8>)
 8019c0e:	4828      	ldr	r0, [pc, #160]	@ (8019cb0 <udp_input_local_match+0xbc>)
 8019c10:	f003 fc74 	bl	801d4fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019c14:	68bb      	ldr	r3, [r7, #8]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d105      	bne.n	8019c26 <udp_input_local_match+0x32>
 8019c1a:	4b23      	ldr	r3, [pc, #140]	@ (8019ca8 <udp_input_local_match+0xb4>)
 8019c1c:	2288      	movs	r2, #136	@ 0x88
 8019c1e:	4925      	ldr	r1, [pc, #148]	@ (8019cb4 <udp_input_local_match+0xc0>)
 8019c20:	4823      	ldr	r0, [pc, #140]	@ (8019cb0 <udp_input_local_match+0xbc>)
 8019c22:	f003 fc6b 	bl	801d4fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	7a1b      	ldrb	r3, [r3, #8]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d00b      	beq.n	8019c46 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	7a1a      	ldrb	r2, [r3, #8]
 8019c32:	4b21      	ldr	r3, [pc, #132]	@ (8019cb8 <udp_input_local_match+0xc4>)
 8019c34:	685b      	ldr	r3, [r3, #4]
 8019c36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019c3a:	3301      	adds	r3, #1
 8019c3c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	d001      	beq.n	8019c46 <udp_input_local_match+0x52>
    return 0;
 8019c42:	2300      	movs	r3, #0
 8019c44:	e02b      	b.n	8019c9e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019c46:	79fb      	ldrb	r3, [r7, #7]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d018      	beq.n	8019c7e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d013      	beq.n	8019c7a <udp_input_local_match+0x86>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d00f      	beq.n	8019c7a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019c5a:	4b17      	ldr	r3, [pc, #92]	@ (8019cb8 <udp_input_local_match+0xc4>)
 8019c5c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c62:	d00a      	beq.n	8019c7a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	681a      	ldr	r2, [r3, #0]
 8019c68:	4b13      	ldr	r3, [pc, #76]	@ (8019cb8 <udp_input_local_match+0xc4>)
 8019c6a:	695b      	ldr	r3, [r3, #20]
 8019c6c:	405a      	eors	r2, r3
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	3308      	adds	r3, #8
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d110      	bne.n	8019c9c <udp_input_local_match+0xa8>
          return 1;
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	e00f      	b.n	8019c9e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d009      	beq.n	8019c98 <udp_input_local_match+0xa4>
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d005      	beq.n	8019c98 <udp_input_local_match+0xa4>
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	4b09      	ldr	r3, [pc, #36]	@ (8019cb8 <udp_input_local_match+0xc4>)
 8019c92:	695b      	ldr	r3, [r3, #20]
 8019c94:	429a      	cmp	r2, r3
 8019c96:	d101      	bne.n	8019c9c <udp_input_local_match+0xa8>
        return 1;
 8019c98:	2301      	movs	r3, #1
 8019c9a:	e000      	b.n	8019c9e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019c9c:	2300      	movs	r3, #0
}
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	3710      	adds	r7, #16
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	bd80      	pop	{r7, pc}
 8019ca6:	bf00      	nop
 8019ca8:	08022300 	.word	0x08022300
 8019cac:	08022330 	.word	0x08022330
 8019cb0:	08022354 	.word	0x08022354
 8019cb4:	0802237c 	.word	0x0802237c
 8019cb8:	20009258 	.word	0x20009258

08019cbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b08d      	sub	sp, #52	@ 0x34
 8019cc0:	af02      	add	r7, sp, #8
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d105      	bne.n	8019cdc <udp_input+0x20>
 8019cd0:	4b7c      	ldr	r3, [pc, #496]	@ (8019ec4 <udp_input+0x208>)
 8019cd2:	22cf      	movs	r2, #207	@ 0xcf
 8019cd4:	497c      	ldr	r1, [pc, #496]	@ (8019ec8 <udp_input+0x20c>)
 8019cd6:	487d      	ldr	r0, [pc, #500]	@ (8019ecc <udp_input+0x210>)
 8019cd8:	f003 fc10 	bl	801d4fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d105      	bne.n	8019cee <udp_input+0x32>
 8019ce2:	4b78      	ldr	r3, [pc, #480]	@ (8019ec4 <udp_input+0x208>)
 8019ce4:	22d0      	movs	r2, #208	@ 0xd0
 8019ce6:	497a      	ldr	r1, [pc, #488]	@ (8019ed0 <udp_input+0x214>)
 8019ce8:	4878      	ldr	r0, [pc, #480]	@ (8019ecc <udp_input+0x210>)
 8019cea:	f003 fc07 	bl	801d4fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	895b      	ldrh	r3, [r3, #10]
 8019cf2:	2b07      	cmp	r3, #7
 8019cf4:	d803      	bhi.n	8019cfe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019cf6:	6878      	ldr	r0, [r7, #4]
 8019cf8:	f7f9 fb48 	bl	801338c <pbuf_free>
    goto end;
 8019cfc:	e0de      	b.n	8019ebc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	685b      	ldr	r3, [r3, #4]
 8019d02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019d04:	4b73      	ldr	r3, [pc, #460]	@ (8019ed4 <udp_input+0x218>)
 8019d06:	695b      	ldr	r3, [r3, #20]
 8019d08:	4a72      	ldr	r2, [pc, #456]	@ (8019ed4 <udp_input+0x218>)
 8019d0a:	6812      	ldr	r2, [r2, #0]
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f001 fc56 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 8019d14:	4603      	mov	r3, r0
 8019d16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019d18:	697b      	ldr	r3, [r7, #20]
 8019d1a:	881b      	ldrh	r3, [r3, #0]
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f7f7 ff74 	bl	8011c0c <lwip_htons>
 8019d24:	4603      	mov	r3, r0
 8019d26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019d28:	697b      	ldr	r3, [r7, #20]
 8019d2a:	885b      	ldrh	r3, [r3, #2]
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7f7 ff6c 	bl	8011c0c <lwip_htons>
 8019d34:	4603      	mov	r3, r0
 8019d36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019d40:	2300      	movs	r3, #0
 8019d42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019d44:	4b64      	ldr	r3, [pc, #400]	@ (8019ed8 <udp_input+0x21c>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d4a:	e054      	b.n	8019df6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d4e:	8a5b      	ldrh	r3, [r3, #18]
 8019d50:	89fa      	ldrh	r2, [r7, #14]
 8019d52:	429a      	cmp	r2, r3
 8019d54:	d14a      	bne.n	8019dec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019d56:	7cfb      	ldrb	r3, [r7, #19]
 8019d58:	461a      	mov	r2, r3
 8019d5a:	6839      	ldr	r1, [r7, #0]
 8019d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019d5e:	f7ff ff49 	bl	8019bf4 <udp_input_local_match>
 8019d62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d041      	beq.n	8019dec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d6a:	7c1b      	ldrb	r3, [r3, #16]
 8019d6c:	f003 0304 	and.w	r3, r3, #4
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d11d      	bne.n	8019db0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019d74:	69fb      	ldr	r3, [r7, #28]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d102      	bne.n	8019d80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d7c:	61fb      	str	r3, [r7, #28]
 8019d7e:	e017      	b.n	8019db0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019d80:	7cfb      	ldrb	r3, [r7, #19]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d014      	beq.n	8019db0 <udp_input+0xf4>
 8019d86:	4b53      	ldr	r3, [pc, #332]	@ (8019ed4 <udp_input+0x218>)
 8019d88:	695b      	ldr	r3, [r3, #20]
 8019d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d8e:	d10f      	bne.n	8019db0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019d90:	69fb      	ldr	r3, [r7, #28]
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	3304      	adds	r3, #4
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	d008      	beq.n	8019db0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da0:	681a      	ldr	r2, [r3, #0]
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	3304      	adds	r3, #4
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	d101      	bne.n	8019db0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db2:	8a9b      	ldrh	r3, [r3, #20]
 8019db4:	8a3a      	ldrh	r2, [r7, #16]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d118      	bne.n	8019dec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dbc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d005      	beq.n	8019dce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dc4:	685a      	ldr	r2, [r3, #4]
 8019dc6:	4b43      	ldr	r3, [pc, #268]	@ (8019ed4 <udp_input+0x218>)
 8019dc8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019dca:	429a      	cmp	r2, r3
 8019dcc:	d10e      	bne.n	8019dec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019dce:	6a3b      	ldr	r3, [r7, #32]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d014      	beq.n	8019dfe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd6:	68da      	ldr	r2, [r3, #12]
 8019dd8:	6a3b      	ldr	r3, [r7, #32]
 8019dda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8019ed8 <udp_input+0x21c>)
 8019dde:	681a      	ldr	r2, [r3, #0]
 8019de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019de4:	4a3c      	ldr	r2, [pc, #240]	@ (8019ed8 <udp_input+0x21c>)
 8019de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019dea:	e008      	b.n	8019dfe <udp_input+0x142>
      }
    }

    prev = pcb;
 8019dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df2:	68db      	ldr	r3, [r3, #12]
 8019df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8019df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d1a7      	bne.n	8019d4c <udp_input+0x90>
 8019dfc:	e000      	b.n	8019e00 <udp_input+0x144>
        break;
 8019dfe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d101      	bne.n	8019e0a <udp_input+0x14e>
    pcb = uncon_pcb;
 8019e06:	69fb      	ldr	r3, [r7, #28]
 8019e08:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d002      	beq.n	8019e16 <udp_input+0x15a>
    for_us = 1;
 8019e10:	2301      	movs	r3, #1
 8019e12:	76fb      	strb	r3, [r7, #27]
 8019e14:	e00a      	b.n	8019e2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	3304      	adds	r3, #4
 8019e1a:	681a      	ldr	r2, [r3, #0]
 8019e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8019ed4 <udp_input+0x218>)
 8019e1e:	695b      	ldr	r3, [r3, #20]
 8019e20:	429a      	cmp	r2, r3
 8019e22:	bf0c      	ite	eq
 8019e24:	2301      	moveq	r3, #1
 8019e26:	2300      	movne	r3, #0
 8019e28:	b2db      	uxtb	r3, r3
 8019e2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019e2c:	7efb      	ldrb	r3, [r7, #27]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d041      	beq.n	8019eb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019e32:	2108      	movs	r1, #8
 8019e34:	6878      	ldr	r0, [r7, #4]
 8019e36:	f7f9 fa23 	bl	8013280 <pbuf_remove_header>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d00a      	beq.n	8019e56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019e40:	4b20      	ldr	r3, [pc, #128]	@ (8019ec4 <udp_input+0x208>)
 8019e42:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8019e46:	4925      	ldr	r1, [pc, #148]	@ (8019edc <udp_input+0x220>)
 8019e48:	4820      	ldr	r0, [pc, #128]	@ (8019ecc <udp_input+0x210>)
 8019e4a:	f003 fb57 	bl	801d4fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019e4e:	6878      	ldr	r0, [r7, #4]
 8019e50:	f7f9 fa9c 	bl	801338c <pbuf_free>
      goto end;
 8019e54:	e032      	b.n	8019ebc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d012      	beq.n	8019e82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e5e:	699b      	ldr	r3, [r3, #24]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d00a      	beq.n	8019e7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e66:	699c      	ldr	r4, [r3, #24]
 8019e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6a:	69d8      	ldr	r0, [r3, #28]
 8019e6c:	8a3b      	ldrh	r3, [r7, #16]
 8019e6e:	9300      	str	r3, [sp, #0]
 8019e70:	4b1b      	ldr	r3, [pc, #108]	@ (8019ee0 <udp_input+0x224>)
 8019e72:	687a      	ldr	r2, [r7, #4]
 8019e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019e76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019e78:	e021      	b.n	8019ebe <udp_input+0x202>
        pbuf_free(p);
 8019e7a:	6878      	ldr	r0, [r7, #4]
 8019e7c:	f7f9 fa86 	bl	801338c <pbuf_free>
        goto end;
 8019e80:	e01c      	b.n	8019ebc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019e82:	7cfb      	ldrb	r3, [r7, #19]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d112      	bne.n	8019eae <udp_input+0x1f2>
 8019e88:	4b12      	ldr	r3, [pc, #72]	@ (8019ed4 <udp_input+0x218>)
 8019e8a:	695b      	ldr	r3, [r3, #20]
 8019e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019e90:	2be0      	cmp	r3, #224	@ 0xe0
 8019e92:	d00c      	beq.n	8019eae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019e94:	4b0f      	ldr	r3, [pc, #60]	@ (8019ed4 <udp_input+0x218>)
 8019e96:	899b      	ldrh	r3, [r3, #12]
 8019e98:	3308      	adds	r3, #8
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	b21b      	sxth	r3, r3
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	6878      	ldr	r0, [r7, #4]
 8019ea2:	f7f9 fa60 	bl	8013366 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019ea6:	2103      	movs	r1, #3
 8019ea8:	6878      	ldr	r0, [r7, #4]
 8019eaa:	f001 f869 	bl	801af80 <icmp_dest_unreach>
      pbuf_free(p);
 8019eae:	6878      	ldr	r0, [r7, #4]
 8019eb0:	f7f9 fa6c 	bl	801338c <pbuf_free>
  return;
 8019eb4:	e003      	b.n	8019ebe <udp_input+0x202>
    pbuf_free(p);
 8019eb6:	6878      	ldr	r0, [r7, #4]
 8019eb8:	f7f9 fa68 	bl	801338c <pbuf_free>
  return;
 8019ebc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019ebe:	372c      	adds	r7, #44	@ 0x2c
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd90      	pop	{r4, r7, pc}
 8019ec4:	08022300 	.word	0x08022300
 8019ec8:	080223a4 	.word	0x080223a4
 8019ecc:	08022354 	.word	0x08022354
 8019ed0:	080223bc 	.word	0x080223bc
 8019ed4:	20009258 	.word	0x20009258
 8019ed8:	2000ca08 	.word	0x2000ca08
 8019edc:	080223d8 	.word	0x080223d8
 8019ee0:	20009268 	.word	0x20009268

08019ee4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b085      	sub	sp, #20
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d01e      	beq.n	8019f32 <udp_netif_ip_addr_changed+0x4e>
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d01a      	beq.n	8019f32 <udp_netif_ip_addr_changed+0x4e>
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d017      	beq.n	8019f32 <udp_netif_ip_addr_changed+0x4e>
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d013      	beq.n	8019f32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8019f40 <udp_netif_ip_addr_changed+0x5c>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	60fb      	str	r3, [r7, #12]
 8019f10:	e00c      	b.n	8019f2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	681a      	ldr	r2, [r3, #0]
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d103      	bne.n	8019f26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	681a      	ldr	r2, [r3, #0]
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	60fb      	str	r3, [r7, #12]
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d1ef      	bne.n	8019f12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019f32:	bf00      	nop
 8019f34:	3714      	adds	r7, #20
 8019f36:	46bd      	mov	sp, r7
 8019f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3c:	4770      	bx	lr
 8019f3e:	bf00      	nop
 8019f40:	2000ca08 	.word	0x2000ca08

08019f44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019f4c:	4915      	ldr	r1, [pc, #84]	@ (8019fa4 <etharp_free_entry+0x60>)
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	4613      	mov	r3, r2
 8019f52:	005b      	lsls	r3, r3, #1
 8019f54:	4413      	add	r3, r2
 8019f56:	00db      	lsls	r3, r3, #3
 8019f58:	440b      	add	r3, r1
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d013      	beq.n	8019f88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019f60:	4910      	ldr	r1, [pc, #64]	@ (8019fa4 <etharp_free_entry+0x60>)
 8019f62:	687a      	ldr	r2, [r7, #4]
 8019f64:	4613      	mov	r3, r2
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	4413      	add	r3, r2
 8019f6a:	00db      	lsls	r3, r3, #3
 8019f6c:	440b      	add	r3, r1
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	4618      	mov	r0, r3
 8019f72:	f7f9 fa0b 	bl	801338c <pbuf_free>
    arp_table[i].q = NULL;
 8019f76:	490b      	ldr	r1, [pc, #44]	@ (8019fa4 <etharp_free_entry+0x60>)
 8019f78:	687a      	ldr	r2, [r7, #4]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	005b      	lsls	r3, r3, #1
 8019f7e:	4413      	add	r3, r2
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	440b      	add	r3, r1
 8019f84:	2200      	movs	r2, #0
 8019f86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019f88:	4906      	ldr	r1, [pc, #24]	@ (8019fa4 <etharp_free_entry+0x60>)
 8019f8a:	687a      	ldr	r2, [r7, #4]
 8019f8c:	4613      	mov	r3, r2
 8019f8e:	005b      	lsls	r3, r3, #1
 8019f90:	4413      	add	r3, r2
 8019f92:	00db      	lsls	r3, r3, #3
 8019f94:	440b      	add	r3, r1
 8019f96:	3314      	adds	r3, #20
 8019f98:	2200      	movs	r2, #0
 8019f9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019f9c:	bf00      	nop
 8019f9e:	3708      	adds	r7, #8
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	2000ca0c 	.word	0x2000ca0c

08019fa8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019fae:	2300      	movs	r3, #0
 8019fb0:	607b      	str	r3, [r7, #4]
 8019fb2:	e096      	b.n	801a0e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019fb4:	494f      	ldr	r1, [pc, #316]	@ (801a0f4 <etharp_tmr+0x14c>)
 8019fb6:	687a      	ldr	r2, [r7, #4]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	005b      	lsls	r3, r3, #1
 8019fbc:	4413      	add	r3, r2
 8019fbe:	00db      	lsls	r3, r3, #3
 8019fc0:	440b      	add	r3, r1
 8019fc2:	3314      	adds	r3, #20
 8019fc4:	781b      	ldrb	r3, [r3, #0]
 8019fc6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019fc8:	78fb      	ldrb	r3, [r7, #3]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	f000 8086 	beq.w	801a0dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019fd0:	4948      	ldr	r1, [pc, #288]	@ (801a0f4 <etharp_tmr+0x14c>)
 8019fd2:	687a      	ldr	r2, [r7, #4]
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	005b      	lsls	r3, r3, #1
 8019fd8:	4413      	add	r3, r2
 8019fda:	00db      	lsls	r3, r3, #3
 8019fdc:	440b      	add	r3, r1
 8019fde:	3312      	adds	r3, #18
 8019fe0:	881b      	ldrh	r3, [r3, #0]
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	b298      	uxth	r0, r3
 8019fe6:	4943      	ldr	r1, [pc, #268]	@ (801a0f4 <etharp_tmr+0x14c>)
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	4613      	mov	r3, r2
 8019fec:	005b      	lsls	r3, r3, #1
 8019fee:	4413      	add	r3, r2
 8019ff0:	00db      	lsls	r3, r3, #3
 8019ff2:	440b      	add	r3, r1
 8019ff4:	3312      	adds	r3, #18
 8019ff6:	4602      	mov	r2, r0
 8019ff8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019ffa:	493e      	ldr	r1, [pc, #248]	@ (801a0f4 <etharp_tmr+0x14c>)
 8019ffc:	687a      	ldr	r2, [r7, #4]
 8019ffe:	4613      	mov	r3, r2
 801a000:	005b      	lsls	r3, r3, #1
 801a002:	4413      	add	r3, r2
 801a004:	00db      	lsls	r3, r3, #3
 801a006:	440b      	add	r3, r1
 801a008:	3312      	adds	r3, #18
 801a00a:	881b      	ldrh	r3, [r3, #0]
 801a00c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a010:	d215      	bcs.n	801a03e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a012:	4938      	ldr	r1, [pc, #224]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a014:	687a      	ldr	r2, [r7, #4]
 801a016:	4613      	mov	r3, r2
 801a018:	005b      	lsls	r3, r3, #1
 801a01a:	4413      	add	r3, r2
 801a01c:	00db      	lsls	r3, r3, #3
 801a01e:	440b      	add	r3, r1
 801a020:	3314      	adds	r3, #20
 801a022:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a024:	2b01      	cmp	r3, #1
 801a026:	d10e      	bne.n	801a046 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a028:	4932      	ldr	r1, [pc, #200]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a02a:	687a      	ldr	r2, [r7, #4]
 801a02c:	4613      	mov	r3, r2
 801a02e:	005b      	lsls	r3, r3, #1
 801a030:	4413      	add	r3, r2
 801a032:	00db      	lsls	r3, r3, #3
 801a034:	440b      	add	r3, r1
 801a036:	3312      	adds	r3, #18
 801a038:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a03a:	2b04      	cmp	r3, #4
 801a03c:	d903      	bls.n	801a046 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7ff ff80 	bl	8019f44 <etharp_free_entry>
 801a044:	e04a      	b.n	801a0dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a046:	492b      	ldr	r1, [pc, #172]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a048:	687a      	ldr	r2, [r7, #4]
 801a04a:	4613      	mov	r3, r2
 801a04c:	005b      	lsls	r3, r3, #1
 801a04e:	4413      	add	r3, r2
 801a050:	00db      	lsls	r3, r3, #3
 801a052:	440b      	add	r3, r1
 801a054:	3314      	adds	r3, #20
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	2b03      	cmp	r3, #3
 801a05a:	d10a      	bne.n	801a072 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a05c:	4925      	ldr	r1, [pc, #148]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a05e:	687a      	ldr	r2, [r7, #4]
 801a060:	4613      	mov	r3, r2
 801a062:	005b      	lsls	r3, r3, #1
 801a064:	4413      	add	r3, r2
 801a066:	00db      	lsls	r3, r3, #3
 801a068:	440b      	add	r3, r1
 801a06a:	3314      	adds	r3, #20
 801a06c:	2204      	movs	r2, #4
 801a06e:	701a      	strb	r2, [r3, #0]
 801a070:	e034      	b.n	801a0dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a072:	4920      	ldr	r1, [pc, #128]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a074:	687a      	ldr	r2, [r7, #4]
 801a076:	4613      	mov	r3, r2
 801a078:	005b      	lsls	r3, r3, #1
 801a07a:	4413      	add	r3, r2
 801a07c:	00db      	lsls	r3, r3, #3
 801a07e:	440b      	add	r3, r1
 801a080:	3314      	adds	r3, #20
 801a082:	781b      	ldrb	r3, [r3, #0]
 801a084:	2b04      	cmp	r3, #4
 801a086:	d10a      	bne.n	801a09e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a088:	491a      	ldr	r1, [pc, #104]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	4613      	mov	r3, r2
 801a08e:	005b      	lsls	r3, r3, #1
 801a090:	4413      	add	r3, r2
 801a092:	00db      	lsls	r3, r3, #3
 801a094:	440b      	add	r3, r1
 801a096:	3314      	adds	r3, #20
 801a098:	2202      	movs	r2, #2
 801a09a:	701a      	strb	r2, [r3, #0]
 801a09c:	e01e      	b.n	801a0dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a09e:	4915      	ldr	r1, [pc, #84]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a0a0:	687a      	ldr	r2, [r7, #4]
 801a0a2:	4613      	mov	r3, r2
 801a0a4:	005b      	lsls	r3, r3, #1
 801a0a6:	4413      	add	r3, r2
 801a0a8:	00db      	lsls	r3, r3, #3
 801a0aa:	440b      	add	r3, r1
 801a0ac:	3314      	adds	r3, #20
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d113      	bne.n	801a0dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a0b4:	490f      	ldr	r1, [pc, #60]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a0b6:	687a      	ldr	r2, [r7, #4]
 801a0b8:	4613      	mov	r3, r2
 801a0ba:	005b      	lsls	r3, r3, #1
 801a0bc:	4413      	add	r3, r2
 801a0be:	00db      	lsls	r3, r3, #3
 801a0c0:	440b      	add	r3, r1
 801a0c2:	3308      	adds	r3, #8
 801a0c4:	6818      	ldr	r0, [r3, #0]
 801a0c6:	687a      	ldr	r2, [r7, #4]
 801a0c8:	4613      	mov	r3, r2
 801a0ca:	005b      	lsls	r3, r3, #1
 801a0cc:	4413      	add	r3, r2
 801a0ce:	00db      	lsls	r3, r3, #3
 801a0d0:	4a08      	ldr	r2, [pc, #32]	@ (801a0f4 <etharp_tmr+0x14c>)
 801a0d2:	4413      	add	r3, r2
 801a0d4:	3304      	adds	r3, #4
 801a0d6:	4619      	mov	r1, r3
 801a0d8:	f000 fe3e 	bl	801ad58 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	3301      	adds	r3, #1
 801a0e0:	607b      	str	r3, [r7, #4]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	2b09      	cmp	r3, #9
 801a0e6:	f77f af65 	ble.w	8019fb4 <etharp_tmr+0xc>
      }
    }
  }
}
 801a0ea:	bf00      	nop
 801a0ec:	bf00      	nop
 801a0ee:	3708      	adds	r7, #8
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}
 801a0f4:	2000ca0c 	.word	0x2000ca0c

0801a0f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b08a      	sub	sp, #40	@ 0x28
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	60f8      	str	r0, [r7, #12]
 801a100:	460b      	mov	r3, r1
 801a102:	607a      	str	r2, [r7, #4]
 801a104:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a106:	230a      	movs	r3, #10
 801a108:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a10a:	230a      	movs	r3, #10
 801a10c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a10e:	230a      	movs	r3, #10
 801a110:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a112:	2300      	movs	r3, #0
 801a114:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a116:	230a      	movs	r3, #10
 801a118:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a11a:	2300      	movs	r3, #0
 801a11c:	83bb      	strh	r3, [r7, #28]
 801a11e:	2300      	movs	r3, #0
 801a120:	837b      	strh	r3, [r7, #26]
 801a122:	2300      	movs	r3, #0
 801a124:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a126:	2300      	movs	r3, #0
 801a128:	843b      	strh	r3, [r7, #32]
 801a12a:	e0ae      	b.n	801a28a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a12c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a130:	49a6      	ldr	r1, [pc, #664]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a132:	4613      	mov	r3, r2
 801a134:	005b      	lsls	r3, r3, #1
 801a136:	4413      	add	r3, r2
 801a138:	00db      	lsls	r3, r3, #3
 801a13a:	440b      	add	r3, r1
 801a13c:	3314      	adds	r3, #20
 801a13e:	781b      	ldrb	r3, [r3, #0]
 801a140:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a142:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a146:	2b0a      	cmp	r3, #10
 801a148:	d105      	bne.n	801a156 <etharp_find_entry+0x5e>
 801a14a:	7dfb      	ldrb	r3, [r7, #23]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d102      	bne.n	801a156 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a150:	8c3b      	ldrh	r3, [r7, #32]
 801a152:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a154:	e095      	b.n	801a282 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a156:	7dfb      	ldrb	r3, [r7, #23]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	f000 8092 	beq.w	801a282 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a15e:	7dfb      	ldrb	r3, [r7, #23]
 801a160:	2b01      	cmp	r3, #1
 801a162:	d009      	beq.n	801a178 <etharp_find_entry+0x80>
 801a164:	7dfb      	ldrb	r3, [r7, #23]
 801a166:	2b01      	cmp	r3, #1
 801a168:	d806      	bhi.n	801a178 <etharp_find_entry+0x80>
 801a16a:	4b99      	ldr	r3, [pc, #612]	@ (801a3d0 <etharp_find_entry+0x2d8>)
 801a16c:	f240 1223 	movw	r2, #291	@ 0x123
 801a170:	4998      	ldr	r1, [pc, #608]	@ (801a3d4 <etharp_find_entry+0x2dc>)
 801a172:	4899      	ldr	r0, [pc, #612]	@ (801a3d8 <etharp_find_entry+0x2e0>)
 801a174:	f003 f9c2 	bl	801d4fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d020      	beq.n	801a1c0 <etharp_find_entry+0xc8>
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	6819      	ldr	r1, [r3, #0]
 801a182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a186:	4891      	ldr	r0, [pc, #580]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a188:	4613      	mov	r3, r2
 801a18a:	005b      	lsls	r3, r3, #1
 801a18c:	4413      	add	r3, r2
 801a18e:	00db      	lsls	r3, r3, #3
 801a190:	4403      	add	r3, r0
 801a192:	3304      	adds	r3, #4
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	4299      	cmp	r1, r3
 801a198:	d112      	bne.n	801a1c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d00c      	beq.n	801a1ba <etharp_find_entry+0xc2>
 801a1a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1a4:	4989      	ldr	r1, [pc, #548]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a1a6:	4613      	mov	r3, r2
 801a1a8:	005b      	lsls	r3, r3, #1
 801a1aa:	4413      	add	r3, r2
 801a1ac:	00db      	lsls	r3, r3, #3
 801a1ae:	440b      	add	r3, r1
 801a1b0:	3308      	adds	r3, #8
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	687a      	ldr	r2, [r7, #4]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d102      	bne.n	801a1c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a1ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a1be:	e100      	b.n	801a3c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a1c0:	7dfb      	ldrb	r3, [r7, #23]
 801a1c2:	2b01      	cmp	r3, #1
 801a1c4:	d140      	bne.n	801a248 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a1c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1ca:	4980      	ldr	r1, [pc, #512]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	005b      	lsls	r3, r3, #1
 801a1d0:	4413      	add	r3, r2
 801a1d2:	00db      	lsls	r3, r3, #3
 801a1d4:	440b      	add	r3, r1
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d01a      	beq.n	801a212 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a1dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1e0:	497a      	ldr	r1, [pc, #488]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a1e2:	4613      	mov	r3, r2
 801a1e4:	005b      	lsls	r3, r3, #1
 801a1e6:	4413      	add	r3, r2
 801a1e8:	00db      	lsls	r3, r3, #3
 801a1ea:	440b      	add	r3, r1
 801a1ec:	3312      	adds	r3, #18
 801a1ee:	881b      	ldrh	r3, [r3, #0]
 801a1f0:	8bba      	ldrh	r2, [r7, #28]
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d845      	bhi.n	801a282 <etharp_find_entry+0x18a>
            old_queue = i;
 801a1f6:	8c3b      	ldrh	r3, [r7, #32]
 801a1f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a1fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1fe:	4973      	ldr	r1, [pc, #460]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a200:	4613      	mov	r3, r2
 801a202:	005b      	lsls	r3, r3, #1
 801a204:	4413      	add	r3, r2
 801a206:	00db      	lsls	r3, r3, #3
 801a208:	440b      	add	r3, r1
 801a20a:	3312      	adds	r3, #18
 801a20c:	881b      	ldrh	r3, [r3, #0]
 801a20e:	83bb      	strh	r3, [r7, #28]
 801a210:	e037      	b.n	801a282 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a216:	496d      	ldr	r1, [pc, #436]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a218:	4613      	mov	r3, r2
 801a21a:	005b      	lsls	r3, r3, #1
 801a21c:	4413      	add	r3, r2
 801a21e:	00db      	lsls	r3, r3, #3
 801a220:	440b      	add	r3, r1
 801a222:	3312      	adds	r3, #18
 801a224:	881b      	ldrh	r3, [r3, #0]
 801a226:	8b7a      	ldrh	r2, [r7, #26]
 801a228:	429a      	cmp	r2, r3
 801a22a:	d82a      	bhi.n	801a282 <etharp_find_entry+0x18a>
            old_pending = i;
 801a22c:	8c3b      	ldrh	r3, [r7, #32]
 801a22e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a234:	4965      	ldr	r1, [pc, #404]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a236:	4613      	mov	r3, r2
 801a238:	005b      	lsls	r3, r3, #1
 801a23a:	4413      	add	r3, r2
 801a23c:	00db      	lsls	r3, r3, #3
 801a23e:	440b      	add	r3, r1
 801a240:	3312      	adds	r3, #18
 801a242:	881b      	ldrh	r3, [r3, #0]
 801a244:	837b      	strh	r3, [r7, #26]
 801a246:	e01c      	b.n	801a282 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a248:	7dfb      	ldrb	r3, [r7, #23]
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d919      	bls.n	801a282 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a24e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a252:	495e      	ldr	r1, [pc, #376]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a254:	4613      	mov	r3, r2
 801a256:	005b      	lsls	r3, r3, #1
 801a258:	4413      	add	r3, r2
 801a25a:	00db      	lsls	r3, r3, #3
 801a25c:	440b      	add	r3, r1
 801a25e:	3312      	adds	r3, #18
 801a260:	881b      	ldrh	r3, [r3, #0]
 801a262:	8b3a      	ldrh	r2, [r7, #24]
 801a264:	429a      	cmp	r2, r3
 801a266:	d80c      	bhi.n	801a282 <etharp_find_entry+0x18a>
            old_stable = i;
 801a268:	8c3b      	ldrh	r3, [r7, #32]
 801a26a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a26c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a270:	4956      	ldr	r1, [pc, #344]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a272:	4613      	mov	r3, r2
 801a274:	005b      	lsls	r3, r3, #1
 801a276:	4413      	add	r3, r2
 801a278:	00db      	lsls	r3, r3, #3
 801a27a:	440b      	add	r3, r1
 801a27c:	3312      	adds	r3, #18
 801a27e:	881b      	ldrh	r3, [r3, #0]
 801a280:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a282:	8c3b      	ldrh	r3, [r7, #32]
 801a284:	3301      	adds	r3, #1
 801a286:	b29b      	uxth	r3, r3
 801a288:	843b      	strh	r3, [r7, #32]
 801a28a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a28e:	2b09      	cmp	r3, #9
 801a290:	f77f af4c 	ble.w	801a12c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a294:	7afb      	ldrb	r3, [r7, #11]
 801a296:	f003 0302 	and.w	r3, r3, #2
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d108      	bne.n	801a2b0 <etharp_find_entry+0x1b8>
 801a29e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a2a2:	2b0a      	cmp	r3, #10
 801a2a4:	d107      	bne.n	801a2b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a2a6:	7afb      	ldrb	r3, [r7, #11]
 801a2a8:	f003 0301 	and.w	r3, r3, #1
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d102      	bne.n	801a2b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 801a2b4:	e085      	b.n	801a3c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a2b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a2ba:	2b09      	cmp	r3, #9
 801a2bc:	dc02      	bgt.n	801a2c4 <etharp_find_entry+0x1cc>
    i = empty;
 801a2be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a2c0:	843b      	strh	r3, [r7, #32]
 801a2c2:	e039      	b.n	801a338 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a2c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a2c8:	2b09      	cmp	r3, #9
 801a2ca:	dc14      	bgt.n	801a2f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a2cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a2ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a2d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2d4:	493d      	ldr	r1, [pc, #244]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	4413      	add	r3, r2
 801a2dc:	00db      	lsls	r3, r3, #3
 801a2de:	440b      	add	r3, r1
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d018      	beq.n	801a318 <etharp_find_entry+0x220>
 801a2e6:	4b3a      	ldr	r3, [pc, #232]	@ (801a3d0 <etharp_find_entry+0x2d8>)
 801a2e8:	f240 126d 	movw	r2, #365	@ 0x16d
 801a2ec:	493b      	ldr	r1, [pc, #236]	@ (801a3dc <etharp_find_entry+0x2e4>)
 801a2ee:	483a      	ldr	r0, [pc, #232]	@ (801a3d8 <etharp_find_entry+0x2e0>)
 801a2f0:	f003 f904 	bl	801d4fc <iprintf>
 801a2f4:	e010      	b.n	801a318 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a2f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a2fa:	2b09      	cmp	r3, #9
 801a2fc:	dc02      	bgt.n	801a304 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a2fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a300:	843b      	strh	r3, [r7, #32]
 801a302:	e009      	b.n	801a318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a304:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a308:	2b09      	cmp	r3, #9
 801a30a:	dc02      	bgt.n	801a312 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a30c:	8bfb      	ldrh	r3, [r7, #30]
 801a30e:	843b      	strh	r3, [r7, #32]
 801a310:	e002      	b.n	801a318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a312:	f04f 33ff 	mov.w	r3, #4294967295
 801a316:	e054      	b.n	801a3c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a31c:	2b09      	cmp	r3, #9
 801a31e:	dd06      	ble.n	801a32e <etharp_find_entry+0x236>
 801a320:	4b2b      	ldr	r3, [pc, #172]	@ (801a3d0 <etharp_find_entry+0x2d8>)
 801a322:	f240 127f 	movw	r2, #383	@ 0x17f
 801a326:	492e      	ldr	r1, [pc, #184]	@ (801a3e0 <etharp_find_entry+0x2e8>)
 801a328:	482b      	ldr	r0, [pc, #172]	@ (801a3d8 <etharp_find_entry+0x2e0>)
 801a32a:	f003 f8e7 	bl	801d4fc <iprintf>
    etharp_free_entry(i);
 801a32e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a332:	4618      	mov	r0, r3
 801a334:	f7ff fe06 	bl	8019f44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a338:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a33c:	2b09      	cmp	r3, #9
 801a33e:	dd06      	ble.n	801a34e <etharp_find_entry+0x256>
 801a340:	4b23      	ldr	r3, [pc, #140]	@ (801a3d0 <etharp_find_entry+0x2d8>)
 801a342:	f240 1283 	movw	r2, #387	@ 0x183
 801a346:	4926      	ldr	r1, [pc, #152]	@ (801a3e0 <etharp_find_entry+0x2e8>)
 801a348:	4823      	ldr	r0, [pc, #140]	@ (801a3d8 <etharp_find_entry+0x2e0>)
 801a34a:	f003 f8d7 	bl	801d4fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a34e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a352:	491e      	ldr	r1, [pc, #120]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a354:	4613      	mov	r3, r2
 801a356:	005b      	lsls	r3, r3, #1
 801a358:	4413      	add	r3, r2
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	440b      	add	r3, r1
 801a35e:	3314      	adds	r3, #20
 801a360:	781b      	ldrb	r3, [r3, #0]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d006      	beq.n	801a374 <etharp_find_entry+0x27c>
 801a366:	4b1a      	ldr	r3, [pc, #104]	@ (801a3d0 <etharp_find_entry+0x2d8>)
 801a368:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a36c:	491d      	ldr	r1, [pc, #116]	@ (801a3e4 <etharp_find_entry+0x2ec>)
 801a36e:	481a      	ldr	r0, [pc, #104]	@ (801a3d8 <etharp_find_entry+0x2e0>)
 801a370:	f003 f8c4 	bl	801d4fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d00b      	beq.n	801a392 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a37a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	6819      	ldr	r1, [r3, #0]
 801a382:	4812      	ldr	r0, [pc, #72]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a384:	4613      	mov	r3, r2
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	4413      	add	r3, r2
 801a38a:	00db      	lsls	r3, r3, #3
 801a38c:	4403      	add	r3, r0
 801a38e:	3304      	adds	r3, #4
 801a390:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a396:	490d      	ldr	r1, [pc, #52]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a398:	4613      	mov	r3, r2
 801a39a:	005b      	lsls	r3, r3, #1
 801a39c:	4413      	add	r3, r2
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	440b      	add	r3, r1
 801a3a2:	3312      	adds	r3, #18
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a3a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3ac:	4907      	ldr	r1, [pc, #28]	@ (801a3cc <etharp_find_entry+0x2d4>)
 801a3ae:	4613      	mov	r3, r2
 801a3b0:	005b      	lsls	r3, r3, #1
 801a3b2:	4413      	add	r3, r2
 801a3b4:	00db      	lsls	r3, r3, #3
 801a3b6:	440b      	add	r3, r1
 801a3b8:	3308      	adds	r3, #8
 801a3ba:	687a      	ldr	r2, [r7, #4]
 801a3bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a3be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	3728      	adds	r7, #40	@ 0x28
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}
 801a3ca:	bf00      	nop
 801a3cc:	2000ca0c 	.word	0x2000ca0c
 801a3d0:	08022664 	.word	0x08022664
 801a3d4:	0802269c 	.word	0x0802269c
 801a3d8:	080226dc 	.word	0x080226dc
 801a3dc:	08022704 	.word	0x08022704
 801a3e0:	0802271c 	.word	0x0802271c
 801a3e4:	08022730 	.word	0x08022730

0801a3e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b088      	sub	sp, #32
 801a3ec:	af02      	add	r7, sp, #8
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	607a      	str	r2, [r7, #4]
 801a3f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a3fc:	2b06      	cmp	r3, #6
 801a3fe:	d006      	beq.n	801a40e <etharp_update_arp_entry+0x26>
 801a400:	4b48      	ldr	r3, [pc, #288]	@ (801a524 <etharp_update_arp_entry+0x13c>)
 801a402:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a406:	4948      	ldr	r1, [pc, #288]	@ (801a528 <etharp_update_arp_entry+0x140>)
 801a408:	4848      	ldr	r0, [pc, #288]	@ (801a52c <etharp_update_arp_entry+0x144>)
 801a40a:	f003 f877 	bl	801d4fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d012      	beq.n	801a43a <etharp_update_arp_entry+0x52>
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d00e      	beq.n	801a43a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a41c:	68bb      	ldr	r3, [r7, #8]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	68f9      	ldr	r1, [r7, #12]
 801a422:	4618      	mov	r0, r3
 801a424:	f001 f8cc 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801a428:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d105      	bne.n	801a43a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a42e:	68bb      	ldr	r3, [r7, #8]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a436:	2be0      	cmp	r3, #224	@ 0xe0
 801a438:	d102      	bne.n	801a440 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a43a:	f06f 030f 	mvn.w	r3, #15
 801a43e:	e06c      	b.n	801a51a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a440:	78fb      	ldrb	r3, [r7, #3]
 801a442:	68fa      	ldr	r2, [r7, #12]
 801a444:	4619      	mov	r1, r3
 801a446:	68b8      	ldr	r0, [r7, #8]
 801a448:	f7ff fe56 	bl	801a0f8 <etharp_find_entry>
 801a44c:	4603      	mov	r3, r0
 801a44e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a450:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a454:	2b00      	cmp	r3, #0
 801a456:	da02      	bge.n	801a45e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a458:	8afb      	ldrh	r3, [r7, #22]
 801a45a:	b25b      	sxtb	r3, r3
 801a45c:	e05d      	b.n	801a51a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a45e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a462:	4933      	ldr	r1, [pc, #204]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a464:	4613      	mov	r3, r2
 801a466:	005b      	lsls	r3, r3, #1
 801a468:	4413      	add	r3, r2
 801a46a:	00db      	lsls	r3, r3, #3
 801a46c:	440b      	add	r3, r1
 801a46e:	3314      	adds	r3, #20
 801a470:	2202      	movs	r2, #2
 801a472:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a478:	492d      	ldr	r1, [pc, #180]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a47a:	4613      	mov	r3, r2
 801a47c:	005b      	lsls	r3, r3, #1
 801a47e:	4413      	add	r3, r2
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	440b      	add	r3, r1
 801a484:	3308      	adds	r3, #8
 801a486:	68fa      	ldr	r2, [r7, #12]
 801a488:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a48a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a48e:	4613      	mov	r3, r2
 801a490:	005b      	lsls	r3, r3, #1
 801a492:	4413      	add	r3, r2
 801a494:	00db      	lsls	r3, r3, #3
 801a496:	3308      	adds	r3, #8
 801a498:	4a25      	ldr	r2, [pc, #148]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a49a:	4413      	add	r3, r2
 801a49c:	3304      	adds	r3, #4
 801a49e:	2206      	movs	r2, #6
 801a4a0:	6879      	ldr	r1, [r7, #4]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f003 f9dd 	bl	801d862 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a4a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a4ac:	4920      	ldr	r1, [pc, #128]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	005b      	lsls	r3, r3, #1
 801a4b2:	4413      	add	r3, r2
 801a4b4:	00db      	lsls	r3, r3, #3
 801a4b6:	440b      	add	r3, r1
 801a4b8:	3312      	adds	r3, #18
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a4be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a4c2:	491b      	ldr	r1, [pc, #108]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a4c4:	4613      	mov	r3, r2
 801a4c6:	005b      	lsls	r3, r3, #1
 801a4c8:	4413      	add	r3, r2
 801a4ca:	00db      	lsls	r3, r3, #3
 801a4cc:	440b      	add	r3, r1
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d021      	beq.n	801a518 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a4d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a4d8:	4915      	ldr	r1, [pc, #84]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a4da:	4613      	mov	r3, r2
 801a4dc:	005b      	lsls	r3, r3, #1
 801a4de:	4413      	add	r3, r2
 801a4e0:	00db      	lsls	r3, r3, #3
 801a4e2:	440b      	add	r3, r1
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a4e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a4ec:	4910      	ldr	r1, [pc, #64]	@ (801a530 <etharp_update_arp_entry+0x148>)
 801a4ee:	4613      	mov	r3, r2
 801a4f0:	005b      	lsls	r3, r3, #1
 801a4f2:	4413      	add	r3, r2
 801a4f4:	00db      	lsls	r3, r3, #3
 801a4f6:	440b      	add	r3, r1
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a502:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a506:	9300      	str	r3, [sp, #0]
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	6939      	ldr	r1, [r7, #16]
 801a50c:	68f8      	ldr	r0, [r7, #12]
 801a50e:	f001 fff5 	bl	801c4fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a512:	6938      	ldr	r0, [r7, #16]
 801a514:	f7f8 ff3a 	bl	801338c <pbuf_free>
  }
  return ERR_OK;
 801a518:	2300      	movs	r3, #0
}
 801a51a:	4618      	mov	r0, r3
 801a51c:	3718      	adds	r7, #24
 801a51e:	46bd      	mov	sp, r7
 801a520:	bd80      	pop	{r7, pc}
 801a522:	bf00      	nop
 801a524:	08022664 	.word	0x08022664
 801a528:	0802275c 	.word	0x0802275c
 801a52c:	080226dc 	.word	0x080226dc
 801a530:	2000ca0c 	.word	0x2000ca0c

0801a534 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a534:	b5b0      	push	{r4, r5, r7, lr}
 801a536:	b08a      	sub	sp, #40	@ 0x28
 801a538:	af04      	add	r7, sp, #16
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d107      	bne.n	801a554 <etharp_input+0x20>
 801a544:	4b3d      	ldr	r3, [pc, #244]	@ (801a63c <etharp_input+0x108>)
 801a546:	f240 228a 	movw	r2, #650	@ 0x28a
 801a54a:	493d      	ldr	r1, [pc, #244]	@ (801a640 <etharp_input+0x10c>)
 801a54c:	483d      	ldr	r0, [pc, #244]	@ (801a644 <etharp_input+0x110>)
 801a54e:	f002 ffd5 	bl	801d4fc <iprintf>
 801a552:	e06f      	b.n	801a634 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	881b      	ldrh	r3, [r3, #0]
 801a55e:	b29b      	uxth	r3, r3
 801a560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a564:	d10c      	bne.n	801a580 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a566:	693b      	ldr	r3, [r7, #16]
 801a568:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a56a:	2b06      	cmp	r3, #6
 801a56c:	d108      	bne.n	801a580 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a56e:	693b      	ldr	r3, [r7, #16]
 801a570:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a572:	2b04      	cmp	r3, #4
 801a574:	d104      	bne.n	801a580 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	885b      	ldrh	r3, [r3, #2]
 801a57a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a57c:	2b08      	cmp	r3, #8
 801a57e:	d003      	beq.n	801a588 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	f7f8 ff03 	bl	801338c <pbuf_free>
    return;
 801a586:	e055      	b.n	801a634 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	330e      	adds	r3, #14
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	3318      	adds	r3, #24
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	3304      	adds	r3, #4
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d102      	bne.n	801a5a8 <etharp_input+0x74>
    for_us = 0;
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	75fb      	strb	r3, [r7, #23]
 801a5a6:	e009      	b.n	801a5bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a5a8:	68ba      	ldr	r2, [r7, #8]
 801a5aa:	683b      	ldr	r3, [r7, #0]
 801a5ac:	3304      	adds	r3, #4
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	bf0c      	ite	eq
 801a5b4:	2301      	moveq	r3, #1
 801a5b6:	2300      	movne	r3, #0
 801a5b8:	b2db      	uxtb	r3, r3
 801a5ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a5bc:	693b      	ldr	r3, [r7, #16]
 801a5be:	f103 0208 	add.w	r2, r3, #8
 801a5c2:	7dfb      	ldrb	r3, [r7, #23]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d001      	beq.n	801a5cc <etharp_input+0x98>
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e000      	b.n	801a5ce <etharp_input+0x9a>
 801a5cc:	2302      	movs	r3, #2
 801a5ce:	f107 010c 	add.w	r1, r7, #12
 801a5d2:	6838      	ldr	r0, [r7, #0]
 801a5d4:	f7ff ff08 	bl	801a3e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a5d8:	693b      	ldr	r3, [r7, #16]
 801a5da:	88db      	ldrh	r3, [r3, #6]
 801a5dc:	b29b      	uxth	r3, r3
 801a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a5e2:	d003      	beq.n	801a5ec <etharp_input+0xb8>
 801a5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a5e8:	d01e      	beq.n	801a628 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a5ea:	e020      	b.n	801a62e <etharp_input+0xfa>
      if (for_us) {
 801a5ec:	7dfb      	ldrb	r3, [r7, #23]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d01c      	beq.n	801a62c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a5f8:	693b      	ldr	r3, [r7, #16]
 801a5fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a604:	683b      	ldr	r3, [r7, #0]
 801a606:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a608:	693a      	ldr	r2, [r7, #16]
 801a60a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a60c:	2102      	movs	r1, #2
 801a60e:	9103      	str	r1, [sp, #12]
 801a610:	f107 010c 	add.w	r1, r7, #12
 801a614:	9102      	str	r1, [sp, #8]
 801a616:	9201      	str	r2, [sp, #4]
 801a618:	9300      	str	r3, [sp, #0]
 801a61a:	462b      	mov	r3, r5
 801a61c:	4622      	mov	r2, r4
 801a61e:	4601      	mov	r1, r0
 801a620:	6838      	ldr	r0, [r7, #0]
 801a622:	f000 faeb 	bl	801abfc <etharp_raw>
      break;
 801a626:	e001      	b.n	801a62c <etharp_input+0xf8>
      break;
 801a628:	bf00      	nop
 801a62a:	e000      	b.n	801a62e <etharp_input+0xfa>
      break;
 801a62c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a62e:	6878      	ldr	r0, [r7, #4]
 801a630:	f7f8 feac 	bl	801338c <pbuf_free>
}
 801a634:	3718      	adds	r7, #24
 801a636:	46bd      	mov	sp, r7
 801a638:	bdb0      	pop	{r4, r5, r7, pc}
 801a63a:	bf00      	nop
 801a63c:	08022664 	.word	0x08022664
 801a640:	080227b4 	.word	0x080227b4
 801a644:	080226dc 	.word	0x080226dc

0801a648 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b086      	sub	sp, #24
 801a64c:	af02      	add	r7, sp, #8
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	4613      	mov	r3, r2
 801a654:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a656:	79fa      	ldrb	r2, [r7, #7]
 801a658:	4944      	ldr	r1, [pc, #272]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a65a:	4613      	mov	r3, r2
 801a65c:	005b      	lsls	r3, r3, #1
 801a65e:	4413      	add	r3, r2
 801a660:	00db      	lsls	r3, r3, #3
 801a662:	440b      	add	r3, r1
 801a664:	3314      	adds	r3, #20
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d806      	bhi.n	801a67a <etharp_output_to_arp_index+0x32>
 801a66c:	4b40      	ldr	r3, [pc, #256]	@ (801a770 <etharp_output_to_arp_index+0x128>)
 801a66e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a672:	4940      	ldr	r1, [pc, #256]	@ (801a774 <etharp_output_to_arp_index+0x12c>)
 801a674:	4840      	ldr	r0, [pc, #256]	@ (801a778 <etharp_output_to_arp_index+0x130>)
 801a676:	f002 ff41 	bl	801d4fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a67a:	79fa      	ldrb	r2, [r7, #7]
 801a67c:	493b      	ldr	r1, [pc, #236]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a67e:	4613      	mov	r3, r2
 801a680:	005b      	lsls	r3, r3, #1
 801a682:	4413      	add	r3, r2
 801a684:	00db      	lsls	r3, r3, #3
 801a686:	440b      	add	r3, r1
 801a688:	3314      	adds	r3, #20
 801a68a:	781b      	ldrb	r3, [r3, #0]
 801a68c:	2b02      	cmp	r3, #2
 801a68e:	d153      	bne.n	801a738 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a690:	79fa      	ldrb	r2, [r7, #7]
 801a692:	4936      	ldr	r1, [pc, #216]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a694:	4613      	mov	r3, r2
 801a696:	005b      	lsls	r3, r3, #1
 801a698:	4413      	add	r3, r2
 801a69a:	00db      	lsls	r3, r3, #3
 801a69c:	440b      	add	r3, r1
 801a69e:	3312      	adds	r3, #18
 801a6a0:	881b      	ldrh	r3, [r3, #0]
 801a6a2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a6a6:	d919      	bls.n	801a6dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a6a8:	79fa      	ldrb	r2, [r7, #7]
 801a6aa:	4613      	mov	r3, r2
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	4413      	add	r3, r2
 801a6b0:	00db      	lsls	r3, r3, #3
 801a6b2:	4a2e      	ldr	r2, [pc, #184]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a6b4:	4413      	add	r3, r2
 801a6b6:	3304      	adds	r3, #4
 801a6b8:	4619      	mov	r1, r3
 801a6ba:	68f8      	ldr	r0, [r7, #12]
 801a6bc:	f000 fb4c 	bl	801ad58 <etharp_request>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d138      	bne.n	801a738 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a6c6:	79fa      	ldrb	r2, [r7, #7]
 801a6c8:	4928      	ldr	r1, [pc, #160]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a6ca:	4613      	mov	r3, r2
 801a6cc:	005b      	lsls	r3, r3, #1
 801a6ce:	4413      	add	r3, r2
 801a6d0:	00db      	lsls	r3, r3, #3
 801a6d2:	440b      	add	r3, r1
 801a6d4:	3314      	adds	r3, #20
 801a6d6:	2203      	movs	r2, #3
 801a6d8:	701a      	strb	r2, [r3, #0]
 801a6da:	e02d      	b.n	801a738 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a6dc:	79fa      	ldrb	r2, [r7, #7]
 801a6de:	4923      	ldr	r1, [pc, #140]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a6e0:	4613      	mov	r3, r2
 801a6e2:	005b      	lsls	r3, r3, #1
 801a6e4:	4413      	add	r3, r2
 801a6e6:	00db      	lsls	r3, r3, #3
 801a6e8:	440b      	add	r3, r1
 801a6ea:	3312      	adds	r3, #18
 801a6ec:	881b      	ldrh	r3, [r3, #0]
 801a6ee:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a6f2:	d321      	bcc.n	801a738 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a6f4:	79fa      	ldrb	r2, [r7, #7]
 801a6f6:	4613      	mov	r3, r2
 801a6f8:	005b      	lsls	r3, r3, #1
 801a6fa:	4413      	add	r3, r2
 801a6fc:	00db      	lsls	r3, r3, #3
 801a6fe:	4a1b      	ldr	r2, [pc, #108]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a700:	4413      	add	r3, r2
 801a702:	1d19      	adds	r1, r3, #4
 801a704:	79fa      	ldrb	r2, [r7, #7]
 801a706:	4613      	mov	r3, r2
 801a708:	005b      	lsls	r3, r3, #1
 801a70a:	4413      	add	r3, r2
 801a70c:	00db      	lsls	r3, r3, #3
 801a70e:	3308      	adds	r3, #8
 801a710:	4a16      	ldr	r2, [pc, #88]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a712:	4413      	add	r3, r2
 801a714:	3304      	adds	r3, #4
 801a716:	461a      	mov	r2, r3
 801a718:	68f8      	ldr	r0, [r7, #12]
 801a71a:	f000 fafb 	bl	801ad14 <etharp_request_dst>
 801a71e:	4603      	mov	r3, r0
 801a720:	2b00      	cmp	r3, #0
 801a722:	d109      	bne.n	801a738 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a724:	79fa      	ldrb	r2, [r7, #7]
 801a726:	4911      	ldr	r1, [pc, #68]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a728:	4613      	mov	r3, r2
 801a72a:	005b      	lsls	r3, r3, #1
 801a72c:	4413      	add	r3, r2
 801a72e:	00db      	lsls	r3, r3, #3
 801a730:	440b      	add	r3, r1
 801a732:	3314      	adds	r3, #20
 801a734:	2203      	movs	r2, #3
 801a736:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a73e:	79fa      	ldrb	r2, [r7, #7]
 801a740:	4613      	mov	r3, r2
 801a742:	005b      	lsls	r3, r3, #1
 801a744:	4413      	add	r3, r2
 801a746:	00db      	lsls	r3, r3, #3
 801a748:	3308      	adds	r3, #8
 801a74a:	4a08      	ldr	r2, [pc, #32]	@ (801a76c <etharp_output_to_arp_index+0x124>)
 801a74c:	4413      	add	r3, r2
 801a74e:	3304      	adds	r3, #4
 801a750:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a754:	9200      	str	r2, [sp, #0]
 801a756:	460a      	mov	r2, r1
 801a758:	68b9      	ldr	r1, [r7, #8]
 801a75a:	68f8      	ldr	r0, [r7, #12]
 801a75c:	f001 fece 	bl	801c4fc <ethernet_output>
 801a760:	4603      	mov	r3, r0
}
 801a762:	4618      	mov	r0, r3
 801a764:	3710      	adds	r7, #16
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}
 801a76a:	bf00      	nop
 801a76c:	2000ca0c 	.word	0x2000ca0c
 801a770:	08022664 	.word	0x08022664
 801a774:	080227d4 	.word	0x080227d4
 801a778:	080226dc 	.word	0x080226dc

0801a77c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b08a      	sub	sp, #40	@ 0x28
 801a780:	af02      	add	r7, sp, #8
 801a782:	60f8      	str	r0, [r7, #12]
 801a784:	60b9      	str	r1, [r7, #8]
 801a786:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d106      	bne.n	801a7a0 <etharp_output+0x24>
 801a792:	4b73      	ldr	r3, [pc, #460]	@ (801a960 <etharp_output+0x1e4>)
 801a794:	f240 321e 	movw	r2, #798	@ 0x31e
 801a798:	4972      	ldr	r1, [pc, #456]	@ (801a964 <etharp_output+0x1e8>)
 801a79a:	4873      	ldr	r0, [pc, #460]	@ (801a968 <etharp_output+0x1ec>)
 801a79c:	f002 feae 	bl	801d4fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d106      	bne.n	801a7b4 <etharp_output+0x38>
 801a7a6:	4b6e      	ldr	r3, [pc, #440]	@ (801a960 <etharp_output+0x1e4>)
 801a7a8:	f240 321f 	movw	r2, #799	@ 0x31f
 801a7ac:	496f      	ldr	r1, [pc, #444]	@ (801a96c <etharp_output+0x1f0>)
 801a7ae:	486e      	ldr	r0, [pc, #440]	@ (801a968 <etharp_output+0x1ec>)
 801a7b0:	f002 fea4 	bl	801d4fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d106      	bne.n	801a7c8 <etharp_output+0x4c>
 801a7ba:	4b69      	ldr	r3, [pc, #420]	@ (801a960 <etharp_output+0x1e4>)
 801a7bc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a7c0:	496b      	ldr	r1, [pc, #428]	@ (801a970 <etharp_output+0x1f4>)
 801a7c2:	4869      	ldr	r0, [pc, #420]	@ (801a968 <etharp_output+0x1ec>)
 801a7c4:	f002 fe9a 	bl	801d4fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	68f9      	ldr	r1, [r7, #12]
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f000 fef6 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d002      	beq.n	801a7e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a7da:	4b66      	ldr	r3, [pc, #408]	@ (801a974 <etharp_output+0x1f8>)
 801a7dc:	61fb      	str	r3, [r7, #28]
 801a7de:	e0af      	b.n	801a940 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a7e8:	2be0      	cmp	r3, #224	@ 0xe0
 801a7ea:	d118      	bne.n	801a81e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a7ec:	2301      	movs	r3, #1
 801a7ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a7f4:	235e      	movs	r3, #94	@ 0x5e
 801a7f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	3301      	adds	r3, #1
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a802:	b2db      	uxtb	r3, r3
 801a804:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	3302      	adds	r3, #2
 801a80a:	781b      	ldrb	r3, [r3, #0]
 801a80c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	3303      	adds	r3, #3
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a816:	f107 0310 	add.w	r3, r7, #16
 801a81a:	61fb      	str	r3, [r7, #28]
 801a81c:	e090      	b.n	801a940 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681a      	ldr	r2, [r3, #0]
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	3304      	adds	r3, #4
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	405a      	eors	r2, r3
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	3308      	adds	r3, #8
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4013      	ands	r3, r2
 801a832:	2b00      	cmp	r3, #0
 801a834:	d012      	beq.n	801a85c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a83c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a840:	4293      	cmp	r3, r2
 801a842:	d00b      	beq.n	801a85c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	330c      	adds	r3, #12
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d003      	beq.n	801a856 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	330c      	adds	r3, #12
 801a852:	61bb      	str	r3, [r7, #24]
 801a854:	e002      	b.n	801a85c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a856:	f06f 0303 	mvn.w	r3, #3
 801a85a:	e07d      	b.n	801a958 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a85c:	4b46      	ldr	r3, [pc, #280]	@ (801a978 <etharp_output+0x1fc>)
 801a85e:	781b      	ldrb	r3, [r3, #0]
 801a860:	4619      	mov	r1, r3
 801a862:	4a46      	ldr	r2, [pc, #280]	@ (801a97c <etharp_output+0x200>)
 801a864:	460b      	mov	r3, r1
 801a866:	005b      	lsls	r3, r3, #1
 801a868:	440b      	add	r3, r1
 801a86a:	00db      	lsls	r3, r3, #3
 801a86c:	4413      	add	r3, r2
 801a86e:	3314      	adds	r3, #20
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	2b01      	cmp	r3, #1
 801a874:	d925      	bls.n	801a8c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a876:	4b40      	ldr	r3, [pc, #256]	@ (801a978 <etharp_output+0x1fc>)
 801a878:	781b      	ldrb	r3, [r3, #0]
 801a87a:	4619      	mov	r1, r3
 801a87c:	4a3f      	ldr	r2, [pc, #252]	@ (801a97c <etharp_output+0x200>)
 801a87e:	460b      	mov	r3, r1
 801a880:	005b      	lsls	r3, r3, #1
 801a882:	440b      	add	r3, r1
 801a884:	00db      	lsls	r3, r3, #3
 801a886:	4413      	add	r3, r2
 801a888:	3308      	adds	r3, #8
 801a88a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a88c:	68fa      	ldr	r2, [r7, #12]
 801a88e:	429a      	cmp	r2, r3
 801a890:	d117      	bne.n	801a8c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a892:	69bb      	ldr	r3, [r7, #24]
 801a894:	681a      	ldr	r2, [r3, #0]
 801a896:	4b38      	ldr	r3, [pc, #224]	@ (801a978 <etharp_output+0x1fc>)
 801a898:	781b      	ldrb	r3, [r3, #0]
 801a89a:	4618      	mov	r0, r3
 801a89c:	4937      	ldr	r1, [pc, #220]	@ (801a97c <etharp_output+0x200>)
 801a89e:	4603      	mov	r3, r0
 801a8a0:	005b      	lsls	r3, r3, #1
 801a8a2:	4403      	add	r3, r0
 801a8a4:	00db      	lsls	r3, r3, #3
 801a8a6:	440b      	add	r3, r1
 801a8a8:	3304      	adds	r3, #4
 801a8aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d108      	bne.n	801a8c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a8b0:	4b31      	ldr	r3, [pc, #196]	@ (801a978 <etharp_output+0x1fc>)
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	461a      	mov	r2, r3
 801a8b6:	68b9      	ldr	r1, [r7, #8]
 801a8b8:	68f8      	ldr	r0, [r7, #12]
 801a8ba:	f7ff fec5 	bl	801a648 <etharp_output_to_arp_index>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	e04a      	b.n	801a958 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	75fb      	strb	r3, [r7, #23]
 801a8c6:	e031      	b.n	801a92c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a8c8:	7dfa      	ldrb	r2, [r7, #23]
 801a8ca:	492c      	ldr	r1, [pc, #176]	@ (801a97c <etharp_output+0x200>)
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	005b      	lsls	r3, r3, #1
 801a8d0:	4413      	add	r3, r2
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	440b      	add	r3, r1
 801a8d6:	3314      	adds	r3, #20
 801a8d8:	781b      	ldrb	r3, [r3, #0]
 801a8da:	2b01      	cmp	r3, #1
 801a8dc:	d923      	bls.n	801a926 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a8de:	7dfa      	ldrb	r2, [r7, #23]
 801a8e0:	4926      	ldr	r1, [pc, #152]	@ (801a97c <etharp_output+0x200>)
 801a8e2:	4613      	mov	r3, r2
 801a8e4:	005b      	lsls	r3, r3, #1
 801a8e6:	4413      	add	r3, r2
 801a8e8:	00db      	lsls	r3, r3, #3
 801a8ea:	440b      	add	r3, r1
 801a8ec:	3308      	adds	r3, #8
 801a8ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a8f0:	68fa      	ldr	r2, [r7, #12]
 801a8f2:	429a      	cmp	r2, r3
 801a8f4:	d117      	bne.n	801a926 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a8f6:	69bb      	ldr	r3, [r7, #24]
 801a8f8:	6819      	ldr	r1, [r3, #0]
 801a8fa:	7dfa      	ldrb	r2, [r7, #23]
 801a8fc:	481f      	ldr	r0, [pc, #124]	@ (801a97c <etharp_output+0x200>)
 801a8fe:	4613      	mov	r3, r2
 801a900:	005b      	lsls	r3, r3, #1
 801a902:	4413      	add	r3, r2
 801a904:	00db      	lsls	r3, r3, #3
 801a906:	4403      	add	r3, r0
 801a908:	3304      	adds	r3, #4
 801a90a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a90c:	4299      	cmp	r1, r3
 801a90e:	d10a      	bne.n	801a926 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a910:	4a19      	ldr	r2, [pc, #100]	@ (801a978 <etharp_output+0x1fc>)
 801a912:	7dfb      	ldrb	r3, [r7, #23]
 801a914:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a916:	7dfb      	ldrb	r3, [r7, #23]
 801a918:	461a      	mov	r2, r3
 801a91a:	68b9      	ldr	r1, [r7, #8]
 801a91c:	68f8      	ldr	r0, [r7, #12]
 801a91e:	f7ff fe93 	bl	801a648 <etharp_output_to_arp_index>
 801a922:	4603      	mov	r3, r0
 801a924:	e018      	b.n	801a958 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a926:	7dfb      	ldrb	r3, [r7, #23]
 801a928:	3301      	adds	r3, #1
 801a92a:	75fb      	strb	r3, [r7, #23]
 801a92c:	7dfb      	ldrb	r3, [r7, #23]
 801a92e:	2b09      	cmp	r3, #9
 801a930:	d9ca      	bls.n	801a8c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a932:	68ba      	ldr	r2, [r7, #8]
 801a934:	69b9      	ldr	r1, [r7, #24]
 801a936:	68f8      	ldr	r0, [r7, #12]
 801a938:	f000 f822 	bl	801a980 <etharp_query>
 801a93c:	4603      	mov	r3, r0
 801a93e:	e00b      	b.n	801a958 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a94a:	9300      	str	r3, [sp, #0]
 801a94c:	69fb      	ldr	r3, [r7, #28]
 801a94e:	68b9      	ldr	r1, [r7, #8]
 801a950:	68f8      	ldr	r0, [r7, #12]
 801a952:	f001 fdd3 	bl	801c4fc <ethernet_output>
 801a956:	4603      	mov	r3, r0
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3720      	adds	r7, #32
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	08022664 	.word	0x08022664
 801a964:	080227b4 	.word	0x080227b4
 801a968:	080226dc 	.word	0x080226dc
 801a96c:	08022804 	.word	0x08022804
 801a970:	080227a4 	.word	0x080227a4
 801a974:	08022eb0 	.word	0x08022eb0
 801a978:	2000cafc 	.word	0x2000cafc
 801a97c:	2000ca0c 	.word	0x2000ca0c

0801a980 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b08c      	sub	sp, #48	@ 0x30
 801a984:	af02      	add	r7, sp, #8
 801a986:	60f8      	str	r0, [r7, #12]
 801a988:	60b9      	str	r1, [r7, #8]
 801a98a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	3326      	adds	r3, #38	@ 0x26
 801a990:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a992:	23ff      	movs	r3, #255	@ 0xff
 801a994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801a998:	2300      	movs	r3, #0
 801a99a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	68f9      	ldr	r1, [r7, #12]
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f000 fe0c 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d10c      	bne.n	801a9c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a9b6:	2be0      	cmp	r3, #224	@ 0xe0
 801a9b8:	d006      	beq.n	801a9c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d003      	beq.n	801a9c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d102      	bne.n	801a9ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a9c8:	f06f 030f 	mvn.w	r3, #15
 801a9cc:	e101      	b.n	801abd2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a9ce:	68fa      	ldr	r2, [r7, #12]
 801a9d0:	2101      	movs	r1, #1
 801a9d2:	68b8      	ldr	r0, [r7, #8]
 801a9d4:	f7ff fb90 	bl	801a0f8 <etharp_find_entry>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a9dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	da02      	bge.n	801a9ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a9e4:	8a7b      	ldrh	r3, [r7, #18]
 801a9e6:	b25b      	sxtb	r3, r3
 801a9e8:	e0f3      	b.n	801abd2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a9ea:	8a7b      	ldrh	r3, [r7, #18]
 801a9ec:	2b7e      	cmp	r3, #126	@ 0x7e
 801a9ee:	d906      	bls.n	801a9fe <etharp_query+0x7e>
 801a9f0:	4b7a      	ldr	r3, [pc, #488]	@ (801abdc <etharp_query+0x25c>)
 801a9f2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801a9f6:	497a      	ldr	r1, [pc, #488]	@ (801abe0 <etharp_query+0x260>)
 801a9f8:	487a      	ldr	r0, [pc, #488]	@ (801abe4 <etharp_query+0x264>)
 801a9fa:	f002 fd7f 	bl	801d4fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a9fe:	8a7b      	ldrh	r3, [r7, #18]
 801aa00:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801aa02:	7c7a      	ldrb	r2, [r7, #17]
 801aa04:	4978      	ldr	r1, [pc, #480]	@ (801abe8 <etharp_query+0x268>)
 801aa06:	4613      	mov	r3, r2
 801aa08:	005b      	lsls	r3, r3, #1
 801aa0a:	4413      	add	r3, r2
 801aa0c:	00db      	lsls	r3, r3, #3
 801aa0e:	440b      	add	r3, r1
 801aa10:	3314      	adds	r3, #20
 801aa12:	781b      	ldrb	r3, [r3, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d115      	bne.n	801aa44 <etharp_query+0xc4>
    is_new_entry = 1;
 801aa18:	2301      	movs	r3, #1
 801aa1a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801aa1c:	7c7a      	ldrb	r2, [r7, #17]
 801aa1e:	4972      	ldr	r1, [pc, #456]	@ (801abe8 <etharp_query+0x268>)
 801aa20:	4613      	mov	r3, r2
 801aa22:	005b      	lsls	r3, r3, #1
 801aa24:	4413      	add	r3, r2
 801aa26:	00db      	lsls	r3, r3, #3
 801aa28:	440b      	add	r3, r1
 801aa2a:	3314      	adds	r3, #20
 801aa2c:	2201      	movs	r2, #1
 801aa2e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801aa30:	7c7a      	ldrb	r2, [r7, #17]
 801aa32:	496d      	ldr	r1, [pc, #436]	@ (801abe8 <etharp_query+0x268>)
 801aa34:	4613      	mov	r3, r2
 801aa36:	005b      	lsls	r3, r3, #1
 801aa38:	4413      	add	r3, r2
 801aa3a:	00db      	lsls	r3, r3, #3
 801aa3c:	440b      	add	r3, r1
 801aa3e:	3308      	adds	r3, #8
 801aa40:	68fa      	ldr	r2, [r7, #12]
 801aa42:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801aa44:	7c7a      	ldrb	r2, [r7, #17]
 801aa46:	4968      	ldr	r1, [pc, #416]	@ (801abe8 <etharp_query+0x268>)
 801aa48:	4613      	mov	r3, r2
 801aa4a:	005b      	lsls	r3, r3, #1
 801aa4c:	4413      	add	r3, r2
 801aa4e:	00db      	lsls	r3, r3, #3
 801aa50:	440b      	add	r3, r1
 801aa52:	3314      	adds	r3, #20
 801aa54:	781b      	ldrb	r3, [r3, #0]
 801aa56:	2b01      	cmp	r3, #1
 801aa58:	d011      	beq.n	801aa7e <etharp_query+0xfe>
 801aa5a:	7c7a      	ldrb	r2, [r7, #17]
 801aa5c:	4962      	ldr	r1, [pc, #392]	@ (801abe8 <etharp_query+0x268>)
 801aa5e:	4613      	mov	r3, r2
 801aa60:	005b      	lsls	r3, r3, #1
 801aa62:	4413      	add	r3, r2
 801aa64:	00db      	lsls	r3, r3, #3
 801aa66:	440b      	add	r3, r1
 801aa68:	3314      	adds	r3, #20
 801aa6a:	781b      	ldrb	r3, [r3, #0]
 801aa6c:	2b01      	cmp	r3, #1
 801aa6e:	d806      	bhi.n	801aa7e <etharp_query+0xfe>
 801aa70:	4b5a      	ldr	r3, [pc, #360]	@ (801abdc <etharp_query+0x25c>)
 801aa72:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801aa76:	495d      	ldr	r1, [pc, #372]	@ (801abec <etharp_query+0x26c>)
 801aa78:	485a      	ldr	r0, [pc, #360]	@ (801abe4 <etharp_query+0x264>)
 801aa7a:	f002 fd3f 	bl	801d4fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801aa7e:	6a3b      	ldr	r3, [r7, #32]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d102      	bne.n	801aa8a <etharp_query+0x10a>
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d10c      	bne.n	801aaa4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801aa8a:	68b9      	ldr	r1, [r7, #8]
 801aa8c:	68f8      	ldr	r0, [r7, #12]
 801aa8e:	f000 f963 	bl	801ad58 <etharp_request>
 801aa92:	4603      	mov	r3, r0
 801aa94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d102      	bne.n	801aaa4 <etharp_query+0x124>
      return result;
 801aa9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801aaa2:	e096      	b.n	801abd2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d106      	bne.n	801aab8 <etharp_query+0x138>
 801aaaa:	4b4c      	ldr	r3, [pc, #304]	@ (801abdc <etharp_query+0x25c>)
 801aaac:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801aab0:	494f      	ldr	r1, [pc, #316]	@ (801abf0 <etharp_query+0x270>)
 801aab2:	484c      	ldr	r0, [pc, #304]	@ (801abe4 <etharp_query+0x264>)
 801aab4:	f002 fd22 	bl	801d4fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801aab8:	7c7a      	ldrb	r2, [r7, #17]
 801aaba:	494b      	ldr	r1, [pc, #300]	@ (801abe8 <etharp_query+0x268>)
 801aabc:	4613      	mov	r3, r2
 801aabe:	005b      	lsls	r3, r3, #1
 801aac0:	4413      	add	r3, r2
 801aac2:	00db      	lsls	r3, r3, #3
 801aac4:	440b      	add	r3, r1
 801aac6:	3314      	adds	r3, #20
 801aac8:	781b      	ldrb	r3, [r3, #0]
 801aaca:	2b01      	cmp	r3, #1
 801aacc:	d917      	bls.n	801aafe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801aace:	4a49      	ldr	r2, [pc, #292]	@ (801abf4 <etharp_query+0x274>)
 801aad0:	7c7b      	ldrb	r3, [r7, #17]
 801aad2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801aad4:	7c7a      	ldrb	r2, [r7, #17]
 801aad6:	4613      	mov	r3, r2
 801aad8:	005b      	lsls	r3, r3, #1
 801aada:	4413      	add	r3, r2
 801aadc:	00db      	lsls	r3, r3, #3
 801aade:	3308      	adds	r3, #8
 801aae0:	4a41      	ldr	r2, [pc, #260]	@ (801abe8 <etharp_query+0x268>)
 801aae2:	4413      	add	r3, r2
 801aae4:	3304      	adds	r3, #4
 801aae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aaea:	9200      	str	r2, [sp, #0]
 801aaec:	697a      	ldr	r2, [r7, #20]
 801aaee:	6879      	ldr	r1, [r7, #4]
 801aaf0:	68f8      	ldr	r0, [r7, #12]
 801aaf2:	f001 fd03 	bl	801c4fc <ethernet_output>
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801aafc:	e067      	b.n	801abce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aafe:	7c7a      	ldrb	r2, [r7, #17]
 801ab00:	4939      	ldr	r1, [pc, #228]	@ (801abe8 <etharp_query+0x268>)
 801ab02:	4613      	mov	r3, r2
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	00db      	lsls	r3, r3, #3
 801ab0a:	440b      	add	r3, r1
 801ab0c:	3314      	adds	r3, #20
 801ab0e:	781b      	ldrb	r3, [r3, #0]
 801ab10:	2b01      	cmp	r3, #1
 801ab12:	d15c      	bne.n	801abce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ab14:	2300      	movs	r3, #0
 801ab16:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ab1c:	e01c      	b.n	801ab58 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ab1e:	69fb      	ldr	r3, [r7, #28]
 801ab20:	895a      	ldrh	r2, [r3, #10]
 801ab22:	69fb      	ldr	r3, [r7, #28]
 801ab24:	891b      	ldrh	r3, [r3, #8]
 801ab26:	429a      	cmp	r2, r3
 801ab28:	d10a      	bne.n	801ab40 <etharp_query+0x1c0>
 801ab2a:	69fb      	ldr	r3, [r7, #28]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d006      	beq.n	801ab40 <etharp_query+0x1c0>
 801ab32:	4b2a      	ldr	r3, [pc, #168]	@ (801abdc <etharp_query+0x25c>)
 801ab34:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ab38:	492f      	ldr	r1, [pc, #188]	@ (801abf8 <etharp_query+0x278>)
 801ab3a:	482a      	ldr	r0, [pc, #168]	@ (801abe4 <etharp_query+0x264>)
 801ab3c:	f002 fcde 	bl	801d4fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ab40:	69fb      	ldr	r3, [r7, #28]
 801ab42:	7b1b      	ldrb	r3, [r3, #12]
 801ab44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d002      	beq.n	801ab52 <etharp_query+0x1d2>
        copy_needed = 1;
 801ab4c:	2301      	movs	r3, #1
 801ab4e:	61bb      	str	r3, [r7, #24]
        break;
 801ab50:	e005      	b.n	801ab5e <etharp_query+0x1de>
      }
      p = p->next;
 801ab52:	69fb      	ldr	r3, [r7, #28]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d1df      	bne.n	801ab1e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ab5e:	69bb      	ldr	r3, [r7, #24]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d007      	beq.n	801ab74 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ab64:	687a      	ldr	r2, [r7, #4]
 801ab66:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ab6a:	200e      	movs	r0, #14
 801ab6c:	f7f8 fe76 	bl	801385c <pbuf_clone>
 801ab70:	61f8      	str	r0, [r7, #28]
 801ab72:	e004      	b.n	801ab7e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ab78:	69f8      	ldr	r0, [r7, #28]
 801ab7a:	f7f8 fcad 	bl	80134d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ab7e:	69fb      	ldr	r3, [r7, #28]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d021      	beq.n	801abc8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ab84:	7c7a      	ldrb	r2, [r7, #17]
 801ab86:	4918      	ldr	r1, [pc, #96]	@ (801abe8 <etharp_query+0x268>)
 801ab88:	4613      	mov	r3, r2
 801ab8a:	005b      	lsls	r3, r3, #1
 801ab8c:	4413      	add	r3, r2
 801ab8e:	00db      	lsls	r3, r3, #3
 801ab90:	440b      	add	r3, r1
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d00a      	beq.n	801abae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ab98:	7c7a      	ldrb	r2, [r7, #17]
 801ab9a:	4913      	ldr	r1, [pc, #76]	@ (801abe8 <etharp_query+0x268>)
 801ab9c:	4613      	mov	r3, r2
 801ab9e:	005b      	lsls	r3, r3, #1
 801aba0:	4413      	add	r3, r2
 801aba2:	00db      	lsls	r3, r3, #3
 801aba4:	440b      	add	r3, r1
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	4618      	mov	r0, r3
 801abaa:	f7f8 fbef 	bl	801338c <pbuf_free>
      }
      arp_table[i].q = p;
 801abae:	7c7a      	ldrb	r2, [r7, #17]
 801abb0:	490d      	ldr	r1, [pc, #52]	@ (801abe8 <etharp_query+0x268>)
 801abb2:	4613      	mov	r3, r2
 801abb4:	005b      	lsls	r3, r3, #1
 801abb6:	4413      	add	r3, r2
 801abb8:	00db      	lsls	r3, r3, #3
 801abba:	440b      	add	r3, r1
 801abbc:	69fa      	ldr	r2, [r7, #28]
 801abbe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801abc0:	2300      	movs	r3, #0
 801abc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801abc6:	e002      	b.n	801abce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801abc8:	23ff      	movs	r3, #255	@ 0xff
 801abca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801abce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3728      	adds	r7, #40	@ 0x28
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}
 801abda:	bf00      	nop
 801abdc:	08022664 	.word	0x08022664
 801abe0:	08022810 	.word	0x08022810
 801abe4:	080226dc 	.word	0x080226dc
 801abe8:	2000ca0c 	.word	0x2000ca0c
 801abec:	08022820 	.word	0x08022820
 801abf0:	08022804 	.word	0x08022804
 801abf4:	2000cafc 	.word	0x2000cafc
 801abf8:	08022848 	.word	0x08022848

0801abfc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b08a      	sub	sp, #40	@ 0x28
 801ac00:	af02      	add	r7, sp, #8
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	607a      	str	r2, [r7, #4]
 801ac08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d106      	bne.n	801ac22 <etharp_raw+0x26>
 801ac14:	4b3a      	ldr	r3, [pc, #232]	@ (801ad00 <etharp_raw+0x104>)
 801ac16:	f240 4257 	movw	r2, #1111	@ 0x457
 801ac1a:	493a      	ldr	r1, [pc, #232]	@ (801ad04 <etharp_raw+0x108>)
 801ac1c:	483a      	ldr	r0, [pc, #232]	@ (801ad08 <etharp_raw+0x10c>)
 801ac1e:	f002 fc6d 	bl	801d4fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ac22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ac26:	211c      	movs	r1, #28
 801ac28:	200e      	movs	r0, #14
 801ac2a:	f7f8 f8cb 	bl	8012dc4 <pbuf_alloc>
 801ac2e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ac30:	69bb      	ldr	r3, [r7, #24]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d102      	bne.n	801ac3c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ac36:	f04f 33ff 	mov.w	r3, #4294967295
 801ac3a:	e05d      	b.n	801acf8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ac3c:	69bb      	ldr	r3, [r7, #24]
 801ac3e:	895b      	ldrh	r3, [r3, #10]
 801ac40:	2b1b      	cmp	r3, #27
 801ac42:	d806      	bhi.n	801ac52 <etharp_raw+0x56>
 801ac44:	4b2e      	ldr	r3, [pc, #184]	@ (801ad00 <etharp_raw+0x104>)
 801ac46:	f240 4262 	movw	r2, #1122	@ 0x462
 801ac4a:	4930      	ldr	r1, [pc, #192]	@ (801ad0c <etharp_raw+0x110>)
 801ac4c:	482e      	ldr	r0, [pc, #184]	@ (801ad08 <etharp_raw+0x10c>)
 801ac4e:	f002 fc55 	bl	801d4fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ac52:	69bb      	ldr	r3, [r7, #24]
 801ac54:	685b      	ldr	r3, [r3, #4]
 801ac56:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ac58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7f6 ffd6 	bl	8011c0c <lwip_htons>
 801ac60:	4603      	mov	r3, r0
 801ac62:	461a      	mov	r2, r3
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ac6e:	2b06      	cmp	r3, #6
 801ac70:	d006      	beq.n	801ac80 <etharp_raw+0x84>
 801ac72:	4b23      	ldr	r3, [pc, #140]	@ (801ad00 <etharp_raw+0x104>)
 801ac74:	f240 4269 	movw	r2, #1129	@ 0x469
 801ac78:	4925      	ldr	r1, [pc, #148]	@ (801ad10 <etharp_raw+0x114>)
 801ac7a:	4823      	ldr	r0, [pc, #140]	@ (801ad08 <etharp_raw+0x10c>)
 801ac7c:	f002 fc3e 	bl	801d4fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	3308      	adds	r3, #8
 801ac84:	2206      	movs	r2, #6
 801ac86:	6839      	ldr	r1, [r7, #0]
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f002 fdea 	bl	801d862 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	3312      	adds	r3, #18
 801ac92:	2206      	movs	r2, #6
 801ac94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ac96:	4618      	mov	r0, r3
 801ac98:	f002 fde3 	bl	801d862 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	330e      	adds	r3, #14
 801aca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aca2:	6812      	ldr	r2, [r2, #0]
 801aca4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	3318      	adds	r3, #24
 801acaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801acac:	6812      	ldr	r2, [r2, #0]
 801acae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	2200      	movs	r2, #0
 801acb4:	701a      	strb	r2, [r3, #0]
 801acb6:	2200      	movs	r2, #0
 801acb8:	f042 0201 	orr.w	r2, r2, #1
 801acbc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801acbe:	697b      	ldr	r3, [r7, #20]
 801acc0:	2200      	movs	r2, #0
 801acc2:	f042 0208 	orr.w	r2, r2, #8
 801acc6:	709a      	strb	r2, [r3, #2]
 801acc8:	2200      	movs	r2, #0
 801acca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801accc:	697b      	ldr	r3, [r7, #20]
 801acce:	2206      	movs	r2, #6
 801acd0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801acd2:	697b      	ldr	r3, [r7, #20]
 801acd4:	2204      	movs	r2, #4
 801acd6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801acd8:	f640 0306 	movw	r3, #2054	@ 0x806
 801acdc:	9300      	str	r3, [sp, #0]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	68ba      	ldr	r2, [r7, #8]
 801ace2:	69b9      	ldr	r1, [r7, #24]
 801ace4:	68f8      	ldr	r0, [r7, #12]
 801ace6:	f001 fc09 	bl	801c4fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801acea:	69b8      	ldr	r0, [r7, #24]
 801acec:	f7f8 fb4e 	bl	801338c <pbuf_free>
  p = NULL;
 801acf0:	2300      	movs	r3, #0
 801acf2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801acf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801acf8:	4618      	mov	r0, r3
 801acfa:	3720      	adds	r7, #32
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd80      	pop	{r7, pc}
 801ad00:	08022664 	.word	0x08022664
 801ad04:	080227b4 	.word	0x080227b4
 801ad08:	080226dc 	.word	0x080226dc
 801ad0c:	08022864 	.word	0x08022864
 801ad10:	08022898 	.word	0x08022898

0801ad14 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b088      	sub	sp, #32
 801ad18:	af04      	add	r7, sp, #16
 801ad1a:	60f8      	str	r0, [r7, #12]
 801ad1c:	60b9      	str	r1, [r7, #8]
 801ad1e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ad30:	2201      	movs	r2, #1
 801ad32:	9203      	str	r2, [sp, #12]
 801ad34:	68ba      	ldr	r2, [r7, #8]
 801ad36:	9202      	str	r2, [sp, #8]
 801ad38:	4a06      	ldr	r2, [pc, #24]	@ (801ad54 <etharp_request_dst+0x40>)
 801ad3a:	9201      	str	r2, [sp, #4]
 801ad3c:	9300      	str	r3, [sp, #0]
 801ad3e:	4603      	mov	r3, r0
 801ad40:	687a      	ldr	r2, [r7, #4]
 801ad42:	68f8      	ldr	r0, [r7, #12]
 801ad44:	f7ff ff5a 	bl	801abfc <etharp_raw>
 801ad48:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	3710      	adds	r7, #16
 801ad4e:	46bd      	mov	sp, r7
 801ad50:	bd80      	pop	{r7, pc}
 801ad52:	bf00      	nop
 801ad54:	08022eb8 	.word	0x08022eb8

0801ad58 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ad62:	4a05      	ldr	r2, [pc, #20]	@ (801ad78 <etharp_request+0x20>)
 801ad64:	6839      	ldr	r1, [r7, #0]
 801ad66:	6878      	ldr	r0, [r7, #4]
 801ad68:	f7ff ffd4 	bl	801ad14 <etharp_request_dst>
 801ad6c:	4603      	mov	r3, r0
}
 801ad6e:	4618      	mov	r0, r3
 801ad70:	3708      	adds	r7, #8
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	08022eb0 	.word	0x08022eb0

0801ad7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b08e      	sub	sp, #56	@ 0x38
 801ad80:	af04      	add	r7, sp, #16
 801ad82:	6078      	str	r0, [r7, #4]
 801ad84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ad86:	4b78      	ldr	r3, [pc, #480]	@ (801af68 <icmp_input+0x1ec>)
 801ad88:	689b      	ldr	r3, [r3, #8]
 801ad8a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801ad8c:	6a3b      	ldr	r3, [r7, #32]
 801ad8e:	781b      	ldrb	r3, [r3, #0]
 801ad90:	f003 030f 	and.w	r3, r3, #15
 801ad94:	b2db      	uxtb	r3, r3
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801ad9c:	8bfb      	ldrh	r3, [r7, #30]
 801ad9e:	2b13      	cmp	r3, #19
 801ada0:	f240 80cf 	bls.w	801af42 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	895b      	ldrh	r3, [r3, #10]
 801ada8:	2b03      	cmp	r3, #3
 801adaa:	f240 80cc 	bls.w	801af46 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	685b      	ldr	r3, [r3, #4]
 801adb2:	781b      	ldrb	r3, [r3, #0]
 801adb4:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801adb6:	7f7b      	ldrb	r3, [r7, #29]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	f000 80bb 	beq.w	801af34 <icmp_input+0x1b8>
 801adbe:	2b08      	cmp	r3, #8
 801adc0:	f040 80bb 	bne.w	801af3a <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801adc4:	4b69      	ldr	r3, [pc, #420]	@ (801af6c <icmp_input+0x1f0>)
 801adc6:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801adc8:	4b67      	ldr	r3, [pc, #412]	@ (801af68 <icmp_input+0x1ec>)
 801adca:	695b      	ldr	r3, [r3, #20]
 801adcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801add0:	2be0      	cmp	r3, #224	@ 0xe0
 801add2:	d102      	bne.n	801adda <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	3304      	adds	r3, #4
 801add8:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801adda:	4b63      	ldr	r3, [pc, #396]	@ (801af68 <icmp_input+0x1ec>)
 801addc:	695b      	ldr	r3, [r3, #20]
 801adde:	4a62      	ldr	r2, [pc, #392]	@ (801af68 <icmp_input+0x1ec>)
 801ade0:	6812      	ldr	r2, [r2, #0]
 801ade2:	4611      	mov	r1, r2
 801ade4:	4618      	mov	r0, r3
 801ade6:	f000 fbeb 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801adea:	4603      	mov	r3, r0
 801adec:	2b00      	cmp	r3, #0
 801adee:	d002      	beq.n	801adf6 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801adf0:	683b      	ldr	r3, [r7, #0]
 801adf2:	3304      	adds	r3, #4
 801adf4:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	891b      	ldrh	r3, [r3, #8]
 801adfa:	2b07      	cmp	r3, #7
 801adfc:	f240 80a5 	bls.w	801af4a <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ae00:	8bfb      	ldrh	r3, [r7, #30]
 801ae02:	330e      	adds	r3, #14
 801ae04:	4619      	mov	r1, r3
 801ae06:	6878      	ldr	r0, [r7, #4]
 801ae08:	f7f8 fa2a 	bl	8013260 <pbuf_add_header>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d04b      	beq.n	801aeaa <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	891a      	ldrh	r2, [r3, #8]
 801ae16:	8bfb      	ldrh	r3, [r7, #30]
 801ae18:	4413      	add	r3, r2
 801ae1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	891b      	ldrh	r3, [r3, #8]
 801ae20:	8b7a      	ldrh	r2, [r7, #26]
 801ae22:	429a      	cmp	r2, r3
 801ae24:	f0c0 8096 	bcc.w	801af54 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ae28:	8b7b      	ldrh	r3, [r7, #26]
 801ae2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae2e:	4619      	mov	r1, r3
 801ae30:	200e      	movs	r0, #14
 801ae32:	f7f7 ffc7 	bl	8012dc4 <pbuf_alloc>
 801ae36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ae38:	697b      	ldr	r3, [r7, #20]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	f000 808c 	beq.w	801af58 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	895b      	ldrh	r3, [r3, #10]
 801ae44:	461a      	mov	r2, r3
 801ae46:	8bfb      	ldrh	r3, [r7, #30]
 801ae48:	3308      	adds	r3, #8
 801ae4a:	429a      	cmp	r2, r3
 801ae4c:	d203      	bcs.n	801ae56 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ae4e:	6978      	ldr	r0, [r7, #20]
 801ae50:	f7f8 fa9c 	bl	801338c <pbuf_free>
          goto icmperr;
 801ae54:	e081      	b.n	801af5a <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ae56:	697b      	ldr	r3, [r7, #20]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	8bfa      	ldrh	r2, [r7, #30]
 801ae5c:	6a39      	ldr	r1, [r7, #32]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f002 fcff 	bl	801d862 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ae64:	8bfb      	ldrh	r3, [r7, #30]
 801ae66:	4619      	mov	r1, r3
 801ae68:	6978      	ldr	r0, [r7, #20]
 801ae6a:	f7f8 fa09 	bl	8013280 <pbuf_remove_header>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d009      	beq.n	801ae88 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ae74:	4b3e      	ldr	r3, [pc, #248]	@ (801af70 <icmp_input+0x1f4>)
 801ae76:	22b6      	movs	r2, #182	@ 0xb6
 801ae78:	493e      	ldr	r1, [pc, #248]	@ (801af74 <icmp_input+0x1f8>)
 801ae7a:	483f      	ldr	r0, [pc, #252]	@ (801af78 <icmp_input+0x1fc>)
 801ae7c:	f002 fb3e 	bl	801d4fc <iprintf>
          pbuf_free(r);
 801ae80:	6978      	ldr	r0, [r7, #20]
 801ae82:	f7f8 fa83 	bl	801338c <pbuf_free>
          goto icmperr;
 801ae86:	e068      	b.n	801af5a <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ae88:	6879      	ldr	r1, [r7, #4]
 801ae8a:	6978      	ldr	r0, [r7, #20]
 801ae8c:	f7f8 fba2 	bl	80135d4 <pbuf_copy>
 801ae90:	4603      	mov	r3, r0
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d003      	beq.n	801ae9e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ae96:	6978      	ldr	r0, [r7, #20]
 801ae98:	f7f8 fa78 	bl	801338c <pbuf_free>
          goto icmperr;
 801ae9c:	e05d      	b.n	801af5a <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	f7f8 fa74 	bl	801338c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801aea4:	697b      	ldr	r3, [r7, #20]
 801aea6:	607b      	str	r3, [r7, #4]
 801aea8:	e00f      	b.n	801aeca <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801aeaa:	8bfb      	ldrh	r3, [r7, #30]
 801aeac:	330e      	adds	r3, #14
 801aeae:	4619      	mov	r1, r3
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7f8 f9e5 	bl	8013280 <pbuf_remove_header>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d006      	beq.n	801aeca <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801aebc:	4b2c      	ldr	r3, [pc, #176]	@ (801af70 <icmp_input+0x1f4>)
 801aebe:	22c7      	movs	r2, #199	@ 0xc7
 801aec0:	492e      	ldr	r1, [pc, #184]	@ (801af7c <icmp_input+0x200>)
 801aec2:	482d      	ldr	r0, [pc, #180]	@ (801af78 <icmp_input+0x1fc>)
 801aec4:	f002 fb1a 	bl	801d4fc <iprintf>
          goto icmperr;
 801aec8:	e047      	b.n	801af5a <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	685b      	ldr	r3, [r3, #4]
 801aece:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801aed0:	8bfb      	ldrh	r3, [r7, #30]
 801aed2:	4619      	mov	r1, r3
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f7f8 f9c3 	bl	8013260 <pbuf_add_header>
 801aeda:	4603      	mov	r3, r0
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d12b      	bne.n	801af38 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aee8:	681a      	ldr	r2, [r3, #0]
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801aeee:	4b1e      	ldr	r3, [pc, #120]	@ (801af68 <icmp_input+0x1ec>)
 801aef0:	691a      	ldr	r2, [r3, #16]
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801aef6:	693b      	ldr	r3, [r7, #16]
 801aef8:	2200      	movs	r2, #0
 801aefa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801aefc:	693b      	ldr	r3, [r7, #16]
 801aefe:	2200      	movs	r2, #0
 801af00:	709a      	strb	r2, [r3, #2]
 801af02:	2200      	movs	r2, #0
 801af04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	22ff      	movs	r2, #255	@ 0xff
 801af0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	2200      	movs	r2, #0
 801af10:	729a      	strb	r2, [r3, #10]
 801af12:	2200      	movs	r2, #0
 801af14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	9302      	str	r3, [sp, #8]
 801af1a:	2301      	movs	r3, #1
 801af1c:	9301      	str	r3, [sp, #4]
 801af1e:	2300      	movs	r3, #0
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	23ff      	movs	r3, #255	@ 0xff
 801af24:	2200      	movs	r2, #0
 801af26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f000 fa71 	bl	801b410 <ip4_output_if>
 801af2e:	4603      	mov	r3, r0
 801af30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801af32:	e001      	b.n	801af38 <icmp_input+0x1bc>
      break;
 801af34:	bf00      	nop
 801af36:	e000      	b.n	801af3a <icmp_input+0x1be>
      break;
 801af38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f7f8 fa26 	bl	801338c <pbuf_free>
  return;
 801af40:	e00f      	b.n	801af62 <icmp_input+0x1e6>
    goto lenerr;
 801af42:	bf00      	nop
 801af44:	e002      	b.n	801af4c <icmp_input+0x1d0>
    goto lenerr;
 801af46:	bf00      	nop
 801af48:	e000      	b.n	801af4c <icmp_input+0x1d0>
        goto lenerr;
 801af4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801af4c:	6878      	ldr	r0, [r7, #4]
 801af4e:	f7f8 fa1d 	bl	801338c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801af52:	e006      	b.n	801af62 <icmp_input+0x1e6>
          goto icmperr;
 801af54:	bf00      	nop
 801af56:	e000      	b.n	801af5a <icmp_input+0x1de>
          goto icmperr;
 801af58:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801af5a:	6878      	ldr	r0, [r7, #4]
 801af5c:	f7f8 fa16 	bl	801338c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801af60:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801af62:	3728      	adds	r7, #40	@ 0x28
 801af64:	46bd      	mov	sp, r7
 801af66:	bd80      	pop	{r7, pc}
 801af68:	20009258 	.word	0x20009258
 801af6c:	2000926c 	.word	0x2000926c
 801af70:	080228dc 	.word	0x080228dc
 801af74:	08022914 	.word	0x08022914
 801af78:	0802294c 	.word	0x0802294c
 801af7c:	08022974 	.word	0x08022974

0801af80 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b082      	sub	sp, #8
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
 801af88:	460b      	mov	r3, r1
 801af8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801af8c:	78fb      	ldrb	r3, [r7, #3]
 801af8e:	461a      	mov	r2, r3
 801af90:	2103      	movs	r1, #3
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	f000 f814 	bl	801afc0 <icmp_send_response>
}
 801af98:	bf00      	nop
 801af9a:	3708      	adds	r7, #8
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}

0801afa0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
 801afa8:	460b      	mov	r3, r1
 801afaa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801afac:	78fb      	ldrb	r3, [r7, #3]
 801afae:	461a      	mov	r2, r3
 801afb0:	210b      	movs	r1, #11
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 f804 	bl	801afc0 <icmp_send_response>
}
 801afb8:	bf00      	nop
 801afba:	3708      	adds	r7, #8
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bd80      	pop	{r7, pc}

0801afc0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b08c      	sub	sp, #48	@ 0x30
 801afc4:	af04      	add	r7, sp, #16
 801afc6:	6078      	str	r0, [r7, #4]
 801afc8:	460b      	mov	r3, r1
 801afca:	70fb      	strb	r3, [r7, #3]
 801afcc:	4613      	mov	r3, r2
 801afce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801afd0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801afd4:	2124      	movs	r1, #36	@ 0x24
 801afd6:	2022      	movs	r0, #34	@ 0x22
 801afd8:	f7f7 fef4 	bl	8012dc4 <pbuf_alloc>
 801afdc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801afde:	69fb      	ldr	r3, [r7, #28]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d04c      	beq.n	801b07e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	895b      	ldrh	r3, [r3, #10]
 801afe8:	2b23      	cmp	r3, #35	@ 0x23
 801afea:	d806      	bhi.n	801affa <icmp_send_response+0x3a>
 801afec:	4b26      	ldr	r3, [pc, #152]	@ (801b088 <icmp_send_response+0xc8>)
 801afee:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801aff2:	4926      	ldr	r1, [pc, #152]	@ (801b08c <icmp_send_response+0xcc>)
 801aff4:	4826      	ldr	r0, [pc, #152]	@ (801b090 <icmp_send_response+0xd0>)
 801aff6:	f002 fa81 	bl	801d4fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	685b      	ldr	r3, [r3, #4]
 801affe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b000:	69fb      	ldr	r3, [r7, #28]
 801b002:	685b      	ldr	r3, [r3, #4]
 801b004:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b006:	697b      	ldr	r3, [r7, #20]
 801b008:	78fa      	ldrb	r2, [r7, #3]
 801b00a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	78ba      	ldrb	r2, [r7, #2]
 801b010:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	2200      	movs	r2, #0
 801b016:	711a      	strb	r2, [r3, #4]
 801b018:	2200      	movs	r2, #0
 801b01a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	2200      	movs	r2, #0
 801b020:	719a      	strb	r2, [r3, #6]
 801b022:	2200      	movs	r2, #0
 801b024:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b026:	69fb      	ldr	r3, [r7, #28]
 801b028:	685b      	ldr	r3, [r3, #4]
 801b02a:	f103 0008 	add.w	r0, r3, #8
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	685b      	ldr	r3, [r3, #4]
 801b032:	221c      	movs	r2, #28
 801b034:	4619      	mov	r1, r3
 801b036:	f002 fc14 	bl	801d862 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b03a:	69bb      	ldr	r3, [r7, #24]
 801b03c:	68db      	ldr	r3, [r3, #12]
 801b03e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b040:	f107 030c 	add.w	r3, r7, #12
 801b044:	4618      	mov	r0, r3
 801b046:	f000 f825 	bl	801b094 <ip4_route>
 801b04a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b04c:	693b      	ldr	r3, [r7, #16]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d011      	beq.n	801b076 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	2200      	movs	r2, #0
 801b056:	709a      	strb	r2, [r3, #2]
 801b058:	2200      	movs	r2, #0
 801b05a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b05c:	f107 020c 	add.w	r2, r7, #12
 801b060:	693b      	ldr	r3, [r7, #16]
 801b062:	9302      	str	r3, [sp, #8]
 801b064:	2301      	movs	r3, #1
 801b066:	9301      	str	r3, [sp, #4]
 801b068:	2300      	movs	r3, #0
 801b06a:	9300      	str	r3, [sp, #0]
 801b06c:	23ff      	movs	r3, #255	@ 0xff
 801b06e:	2100      	movs	r1, #0
 801b070:	69f8      	ldr	r0, [r7, #28]
 801b072:	f000 f9cd 	bl	801b410 <ip4_output_if>
  }
  pbuf_free(q);
 801b076:	69f8      	ldr	r0, [r7, #28]
 801b078:	f7f8 f988 	bl	801338c <pbuf_free>
 801b07c:	e000      	b.n	801b080 <icmp_send_response+0xc0>
    return;
 801b07e:	bf00      	nop
}
 801b080:	3720      	adds	r7, #32
 801b082:	46bd      	mov	sp, r7
 801b084:	bd80      	pop	{r7, pc}
 801b086:	bf00      	nop
 801b088:	080228dc 	.word	0x080228dc
 801b08c:	080229a8 	.word	0x080229a8
 801b090:	0802294c 	.word	0x0802294c

0801b094 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b094:	b480      	push	{r7}
 801b096:	b085      	sub	sp, #20
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b09c:	4b33      	ldr	r3, [pc, #204]	@ (801b16c <ip4_route+0xd8>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	60fb      	str	r3, [r7, #12]
 801b0a2:	e036      	b.n	801b112 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b0aa:	f003 0301 	and.w	r3, r3, #1
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d02b      	beq.n	801b10c <ip4_route+0x78>
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b0ba:	089b      	lsrs	r3, r3, #2
 801b0bc:	f003 0301 	and.w	r3, r3, #1
 801b0c0:	b2db      	uxtb	r3, r3
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d022      	beq.n	801b10c <ip4_route+0x78>
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	3304      	adds	r3, #4
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d01d      	beq.n	801b10c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	3304      	adds	r3, #4
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	405a      	eors	r2, r3
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	3308      	adds	r3, #8
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4013      	ands	r3, r2
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d101      	bne.n	801b0ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	e038      	b.n	801b15e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b0f2:	f003 0302 	and.w	r3, r3, #2
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d108      	bne.n	801b10c <ip4_route+0x78>
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	681a      	ldr	r2, [r3, #0]
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	330c      	adds	r3, #12
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	429a      	cmp	r2, r3
 801b106:	d101      	bne.n	801b10c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	e028      	b.n	801b15e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	60fb      	str	r3, [r7, #12]
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d1c5      	bne.n	801b0a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b118:	4b15      	ldr	r3, [pc, #84]	@ (801b170 <ip4_route+0xdc>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d01a      	beq.n	801b156 <ip4_route+0xc2>
 801b120:	4b13      	ldr	r3, [pc, #76]	@ (801b170 <ip4_route+0xdc>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b128:	f003 0301 	and.w	r3, r3, #1
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d012      	beq.n	801b156 <ip4_route+0xc2>
 801b130:	4b0f      	ldr	r3, [pc, #60]	@ (801b170 <ip4_route+0xdc>)
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b138:	f003 0304 	and.w	r3, r3, #4
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d00a      	beq.n	801b156 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b140:	4b0b      	ldr	r3, [pc, #44]	@ (801b170 <ip4_route+0xdc>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	3304      	adds	r3, #4
 801b146:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d004      	beq.n	801b156 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	b2db      	uxtb	r3, r3
 801b152:	2b7f      	cmp	r3, #127	@ 0x7f
 801b154:	d101      	bne.n	801b15a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b156:	2300      	movs	r3, #0
 801b158:	e001      	b.n	801b15e <ip4_route+0xca>
  }

  return netif_default;
 801b15a:	4b05      	ldr	r3, [pc, #20]	@ (801b170 <ip4_route+0xdc>)
 801b15c:	681b      	ldr	r3, [r3, #0]
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3714      	adds	r7, #20
 801b162:	46bd      	mov	sp, r7
 801b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b168:	4770      	bx	lr
 801b16a:	bf00      	nop
 801b16c:	2000c9a0 	.word	0x2000c9a0
 801b170:	2000c9a4 	.word	0x2000c9a4

0801b174 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b082      	sub	sp, #8
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b182:	f003 0301 	and.w	r3, r3, #1
 801b186:	b2db      	uxtb	r3, r3
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d016      	beq.n	801b1ba <ip4_input_accept+0x46>
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	3304      	adds	r3, #4
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d011      	beq.n	801b1ba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b196:	4b0b      	ldr	r3, [pc, #44]	@ (801b1c4 <ip4_input_accept+0x50>)
 801b198:	695a      	ldr	r2, [r3, #20]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	3304      	adds	r3, #4
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d008      	beq.n	801b1b6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b1a4:	4b07      	ldr	r3, [pc, #28]	@ (801b1c4 <ip4_input_accept+0x50>)
 801b1a6:	695b      	ldr	r3, [r3, #20]
 801b1a8:	6879      	ldr	r1, [r7, #4]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f000 fa08 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801b1b0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d001      	beq.n	801b1ba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	e000      	b.n	801b1bc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b1ba:	2300      	movs	r3, #0
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	3708      	adds	r7, #8
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd80      	pop	{r7, pc}
 801b1c4:	20009258 	.word	0x20009258

0801b1c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b086      	sub	sp, #24
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	6078      	str	r0, [r7, #4]
 801b1d0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	685b      	ldr	r3, [r3, #4]
 801b1d6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	781b      	ldrb	r3, [r3, #0]
 801b1dc:	091b      	lsrs	r3, r3, #4
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	2b04      	cmp	r3, #4
 801b1e2:	d004      	beq.n	801b1ee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b1e4:	6878      	ldr	r0, [r7, #4]
 801b1e6:	f7f8 f8d1 	bl	801338c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	e107      	b.n	801b3fe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b1ee:	697b      	ldr	r3, [r7, #20]
 801b1f0:	781b      	ldrb	r3, [r3, #0]
 801b1f2:	f003 030f 	and.w	r3, r3, #15
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	009b      	lsls	r3, r3, #2
 801b1fa:	b2db      	uxtb	r3, r3
 801b1fc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b1fe:	697b      	ldr	r3, [r7, #20]
 801b200:	885b      	ldrh	r3, [r3, #2]
 801b202:	b29b      	uxth	r3, r3
 801b204:	4618      	mov	r0, r3
 801b206:	f7f6 fd01 	bl	8011c0c <lwip_htons>
 801b20a:	4603      	mov	r3, r0
 801b20c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	891b      	ldrh	r3, [r3, #8]
 801b212:	89ba      	ldrh	r2, [r7, #12]
 801b214:	429a      	cmp	r2, r3
 801b216:	d204      	bcs.n	801b222 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b218:	89bb      	ldrh	r3, [r7, #12]
 801b21a:	4619      	mov	r1, r3
 801b21c:	6878      	ldr	r0, [r7, #4]
 801b21e:	f7f7 ff2f 	bl	8013080 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	895b      	ldrh	r3, [r3, #10]
 801b226:	89fa      	ldrh	r2, [r7, #14]
 801b228:	429a      	cmp	r2, r3
 801b22a:	d807      	bhi.n	801b23c <ip4_input+0x74>
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	891b      	ldrh	r3, [r3, #8]
 801b230:	89ba      	ldrh	r2, [r7, #12]
 801b232:	429a      	cmp	r2, r3
 801b234:	d802      	bhi.n	801b23c <ip4_input+0x74>
 801b236:	89fb      	ldrh	r3, [r7, #14]
 801b238:	2b13      	cmp	r3, #19
 801b23a:	d804      	bhi.n	801b246 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b23c:	6878      	ldr	r0, [r7, #4]
 801b23e:	f7f8 f8a5 	bl	801338c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b242:	2300      	movs	r3, #0
 801b244:	e0db      	b.n	801b3fe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	691b      	ldr	r3, [r3, #16]
 801b24a:	4a6f      	ldr	r2, [pc, #444]	@ (801b408 <ip4_input+0x240>)
 801b24c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	68db      	ldr	r3, [r3, #12]
 801b252:	4a6d      	ldr	r2, [pc, #436]	@ (801b408 <ip4_input+0x240>)
 801b254:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b256:	4b6c      	ldr	r3, [pc, #432]	@ (801b408 <ip4_input+0x240>)
 801b258:	695b      	ldr	r3, [r3, #20]
 801b25a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b25e:	2be0      	cmp	r3, #224	@ 0xe0
 801b260:	d112      	bne.n	801b288 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b268:	f003 0301 	and.w	r3, r3, #1
 801b26c:	b2db      	uxtb	r3, r3
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d007      	beq.n	801b282 <ip4_input+0xba>
 801b272:	683b      	ldr	r3, [r7, #0]
 801b274:	3304      	adds	r3, #4
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d002      	beq.n	801b282 <ip4_input+0xba>
      netif = inp;
 801b27c:	683b      	ldr	r3, [r7, #0]
 801b27e:	613b      	str	r3, [r7, #16]
 801b280:	e02a      	b.n	801b2d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b282:	2300      	movs	r3, #0
 801b284:	613b      	str	r3, [r7, #16]
 801b286:	e027      	b.n	801b2d8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b288:	6838      	ldr	r0, [r7, #0]
 801b28a:	f7ff ff73 	bl	801b174 <ip4_input_accept>
 801b28e:	4603      	mov	r3, r0
 801b290:	2b00      	cmp	r3, #0
 801b292:	d002      	beq.n	801b29a <ip4_input+0xd2>
      netif = inp;
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	613b      	str	r3, [r7, #16]
 801b298:	e01e      	b.n	801b2d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b29a:	2300      	movs	r3, #0
 801b29c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b29e:	4b5a      	ldr	r3, [pc, #360]	@ (801b408 <ip4_input+0x240>)
 801b2a0:	695b      	ldr	r3, [r3, #20]
 801b2a2:	b2db      	uxtb	r3, r3
 801b2a4:	2b7f      	cmp	r3, #127	@ 0x7f
 801b2a6:	d017      	beq.n	801b2d8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b2a8:	4b58      	ldr	r3, [pc, #352]	@ (801b40c <ip4_input+0x244>)
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	613b      	str	r3, [r7, #16]
 801b2ae:	e00e      	b.n	801b2ce <ip4_input+0x106>
          if (netif == inp) {
 801b2b0:	693a      	ldr	r2, [r7, #16]
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d006      	beq.n	801b2c6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b2b8:	6938      	ldr	r0, [r7, #16]
 801b2ba:	f7ff ff5b 	bl	801b174 <ip4_input_accept>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d108      	bne.n	801b2d6 <ip4_input+0x10e>
 801b2c4:	e000      	b.n	801b2c8 <ip4_input+0x100>
            continue;
 801b2c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	613b      	str	r3, [r7, #16]
 801b2ce:	693b      	ldr	r3, [r7, #16]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d1ed      	bne.n	801b2b0 <ip4_input+0xe8>
 801b2d4:	e000      	b.n	801b2d8 <ip4_input+0x110>
            break;
 801b2d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b2d8:	4b4b      	ldr	r3, [pc, #300]	@ (801b408 <ip4_input+0x240>)
 801b2da:	691b      	ldr	r3, [r3, #16]
 801b2dc:	6839      	ldr	r1, [r7, #0]
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f000 f96e 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d105      	bne.n	801b2f6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b2ea:	4b47      	ldr	r3, [pc, #284]	@ (801b408 <ip4_input+0x240>)
 801b2ec:	691b      	ldr	r3, [r3, #16]
 801b2ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b2f2:	2be0      	cmp	r3, #224	@ 0xe0
 801b2f4:	d104      	bne.n	801b300 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b2f6:	6878      	ldr	r0, [r7, #4]
 801b2f8:	f7f8 f848 	bl	801338c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	e07e      	b.n	801b3fe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d104      	bne.n	801b310 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b306:	6878      	ldr	r0, [r7, #4]
 801b308:	f7f8 f840 	bl	801338c <pbuf_free>
    return ERR_OK;
 801b30c:	2300      	movs	r3, #0
 801b30e:	e076      	b.n	801b3fe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	88db      	ldrh	r3, [r3, #6]
 801b314:	b29b      	uxth	r3, r3
 801b316:	461a      	mov	r2, r3
 801b318:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b31c:	4013      	ands	r3, r2
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d00b      	beq.n	801b33a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b322:	6878      	ldr	r0, [r7, #4]
 801b324:	f000 fd22 	bl	801bd6c <ip4_reass>
 801b328:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d101      	bne.n	801b334 <ip4_input+0x16c>
      return ERR_OK;
 801b330:	2300      	movs	r3, #0
 801b332:	e064      	b.n	801b3fe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	685b      	ldr	r3, [r3, #4]
 801b338:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b33a:	4a33      	ldr	r2, [pc, #204]	@ (801b408 <ip4_input+0x240>)
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b340:	4a31      	ldr	r2, [pc, #196]	@ (801b408 <ip4_input+0x240>)
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b346:	4a30      	ldr	r2, [pc, #192]	@ (801b408 <ip4_input+0x240>)
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	f003 030f 	and.w	r3, r3, #15
 801b354:	b2db      	uxtb	r3, r3
 801b356:	009b      	lsls	r3, r3, #2
 801b358:	b2db      	uxtb	r3, r3
 801b35a:	461a      	mov	r2, r3
 801b35c:	4b2a      	ldr	r3, [pc, #168]	@ (801b408 <ip4_input+0x240>)
 801b35e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b360:	89fb      	ldrh	r3, [r7, #14]
 801b362:	4619      	mov	r1, r3
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	f7f7 ff8b 	bl	8013280 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	7a5b      	ldrb	r3, [r3, #9]
 801b36e:	2b11      	cmp	r3, #17
 801b370:	d006      	beq.n	801b380 <ip4_input+0x1b8>
 801b372:	2b11      	cmp	r3, #17
 801b374:	dc13      	bgt.n	801b39e <ip4_input+0x1d6>
 801b376:	2b01      	cmp	r3, #1
 801b378:	d00c      	beq.n	801b394 <ip4_input+0x1cc>
 801b37a:	2b06      	cmp	r3, #6
 801b37c:	d005      	beq.n	801b38a <ip4_input+0x1c2>
 801b37e:	e00e      	b.n	801b39e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b380:	6839      	ldr	r1, [r7, #0]
 801b382:	6878      	ldr	r0, [r7, #4]
 801b384:	f7fe fc9a 	bl	8019cbc <udp_input>
        break;
 801b388:	e026      	b.n	801b3d8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b38a:	6839      	ldr	r1, [r7, #0]
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f7fa f891 	bl	80154b4 <tcp_input>
        break;
 801b392:	e021      	b.n	801b3d8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b394:	6839      	ldr	r1, [r7, #0]
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	f7ff fcf0 	bl	801ad7c <icmp_input>
        break;
 801b39c:	e01c      	b.n	801b3d8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b39e:	4b1a      	ldr	r3, [pc, #104]	@ (801b408 <ip4_input+0x240>)
 801b3a0:	695b      	ldr	r3, [r3, #20]
 801b3a2:	6939      	ldr	r1, [r7, #16]
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f000 f90b 	bl	801b5c0 <ip4_addr_isbroadcast_u32>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d10f      	bne.n	801b3d0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b3b0:	4b15      	ldr	r3, [pc, #84]	@ (801b408 <ip4_input+0x240>)
 801b3b2:	695b      	ldr	r3, [r3, #20]
 801b3b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b3b8:	2be0      	cmp	r3, #224	@ 0xe0
 801b3ba:	d009      	beq.n	801b3d0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b3bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b3c0:	4619      	mov	r1, r3
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	f7f7 ffcf 	bl	8013366 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b3c8:	2102      	movs	r1, #2
 801b3ca:	6878      	ldr	r0, [r7, #4]
 801b3cc:	f7ff fdd8 	bl	801af80 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b3d0:	6878      	ldr	r0, [r7, #4]
 801b3d2:	f7f7 ffdb 	bl	801338c <pbuf_free>
        break;
 801b3d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b3d8:	4b0b      	ldr	r3, [pc, #44]	@ (801b408 <ip4_input+0x240>)
 801b3da:	2200      	movs	r2, #0
 801b3dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b3de:	4b0a      	ldr	r3, [pc, #40]	@ (801b408 <ip4_input+0x240>)
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b3e4:	4b08      	ldr	r3, [pc, #32]	@ (801b408 <ip4_input+0x240>)
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b3ea:	4b07      	ldr	r3, [pc, #28]	@ (801b408 <ip4_input+0x240>)
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b3f0:	4b05      	ldr	r3, [pc, #20]	@ (801b408 <ip4_input+0x240>)
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b3f6:	4b04      	ldr	r3, [pc, #16]	@ (801b408 <ip4_input+0x240>)
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b3fc:	2300      	movs	r3, #0
}
 801b3fe:	4618      	mov	r0, r3
 801b400:	3718      	adds	r7, #24
 801b402:	46bd      	mov	sp, r7
 801b404:	bd80      	pop	{r7, pc}
 801b406:	bf00      	nop
 801b408:	20009258 	.word	0x20009258
 801b40c:	2000c9a0 	.word	0x2000c9a0

0801b410 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b08a      	sub	sp, #40	@ 0x28
 801b414:	af04      	add	r7, sp, #16
 801b416:	60f8      	str	r0, [r7, #12]
 801b418:	60b9      	str	r1, [r7, #8]
 801b41a:	607a      	str	r2, [r7, #4]
 801b41c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b41e:	68bb      	ldr	r3, [r7, #8]
 801b420:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d009      	beq.n	801b43c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b428:	68bb      	ldr	r3, [r7, #8]
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d003      	beq.n	801b436 <ip4_output_if+0x26>
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d102      	bne.n	801b43c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b438:	3304      	adds	r3, #4
 801b43a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b43c:	78fa      	ldrb	r2, [r7, #3]
 801b43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b440:	9302      	str	r3, [sp, #8]
 801b442:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b446:	9301      	str	r3, [sp, #4]
 801b448:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b44c:	9300      	str	r3, [sp, #0]
 801b44e:	4613      	mov	r3, r2
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	6979      	ldr	r1, [r7, #20]
 801b454:	68f8      	ldr	r0, [r7, #12]
 801b456:	f000 f805 	bl	801b464 <ip4_output_if_src>
 801b45a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	3718      	adds	r7, #24
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}

0801b464 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b088      	sub	sp, #32
 801b468:	af00      	add	r7, sp, #0
 801b46a:	60f8      	str	r0, [r7, #12]
 801b46c:	60b9      	str	r1, [r7, #8]
 801b46e:	607a      	str	r2, [r7, #4]
 801b470:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	7b9b      	ldrb	r3, [r3, #14]
 801b476:	2b01      	cmp	r3, #1
 801b478:	d006      	beq.n	801b488 <ip4_output_if_src+0x24>
 801b47a:	4b4b      	ldr	r3, [pc, #300]	@ (801b5a8 <ip4_output_if_src+0x144>)
 801b47c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b480:	494a      	ldr	r1, [pc, #296]	@ (801b5ac <ip4_output_if_src+0x148>)
 801b482:	484b      	ldr	r0, [pc, #300]	@ (801b5b0 <ip4_output_if_src+0x14c>)
 801b484:	f002 f83a 	bl	801d4fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d060      	beq.n	801b550 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b48e:	2314      	movs	r3, #20
 801b490:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b492:	2114      	movs	r1, #20
 801b494:	68f8      	ldr	r0, [r7, #12]
 801b496:	f7f7 fee3 	bl	8013260 <pbuf_add_header>
 801b49a:	4603      	mov	r3, r0
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d002      	beq.n	801b4a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b4a0:	f06f 0301 	mvn.w	r3, #1
 801b4a4:	e07c      	b.n	801b5a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	895b      	ldrh	r3, [r3, #10]
 801b4b0:	2b13      	cmp	r3, #19
 801b4b2:	d806      	bhi.n	801b4c2 <ip4_output_if_src+0x5e>
 801b4b4:	4b3c      	ldr	r3, [pc, #240]	@ (801b5a8 <ip4_output_if_src+0x144>)
 801b4b6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b4ba:	493e      	ldr	r1, [pc, #248]	@ (801b5b4 <ip4_output_if_src+0x150>)
 801b4bc:	483c      	ldr	r0, [pc, #240]	@ (801b5b0 <ip4_output_if_src+0x14c>)
 801b4be:	f002 f81d 	bl	801d4fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b4c2:	69fb      	ldr	r3, [r7, #28]
 801b4c4:	78fa      	ldrb	r2, [r7, #3]
 801b4c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b4c8:	69fb      	ldr	r3, [r7, #28]
 801b4ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b4ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	69fb      	ldr	r3, [r7, #28]
 801b4d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b4d8:	8b7b      	ldrh	r3, [r7, #26]
 801b4da:	089b      	lsrs	r3, r3, #2
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4e4:	b2da      	uxtb	r2, r3
 801b4e6:	69fb      	ldr	r3, [r7, #28]
 801b4e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b4f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	891b      	ldrh	r3, [r3, #8]
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7f6 fb88 	bl	8011c0c <lwip_htons>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	461a      	mov	r2, r3
 801b500:	69fb      	ldr	r3, [r7, #28]
 801b502:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b504:	69fb      	ldr	r3, [r7, #28]
 801b506:	2200      	movs	r2, #0
 801b508:	719a      	strb	r2, [r3, #6]
 801b50a:	2200      	movs	r2, #0
 801b50c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b50e:	4b2a      	ldr	r3, [pc, #168]	@ (801b5b8 <ip4_output_if_src+0x154>)
 801b510:	881b      	ldrh	r3, [r3, #0]
 801b512:	4618      	mov	r0, r3
 801b514:	f7f6 fb7a 	bl	8011c0c <lwip_htons>
 801b518:	4603      	mov	r3, r0
 801b51a:	461a      	mov	r2, r3
 801b51c:	69fb      	ldr	r3, [r7, #28]
 801b51e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b520:	4b25      	ldr	r3, [pc, #148]	@ (801b5b8 <ip4_output_if_src+0x154>)
 801b522:	881b      	ldrh	r3, [r3, #0]
 801b524:	3301      	adds	r3, #1
 801b526:	b29a      	uxth	r2, r3
 801b528:	4b23      	ldr	r3, [pc, #140]	@ (801b5b8 <ip4_output_if_src+0x154>)
 801b52a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d104      	bne.n	801b53c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b532:	4b22      	ldr	r3, [pc, #136]	@ (801b5bc <ip4_output_if_src+0x158>)
 801b534:	681a      	ldr	r2, [r3, #0]
 801b536:	69fb      	ldr	r3, [r7, #28]
 801b538:	60da      	str	r2, [r3, #12]
 801b53a:	e003      	b.n	801b544 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	681a      	ldr	r2, [r3, #0]
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	2200      	movs	r2, #0
 801b548:	729a      	strb	r2, [r3, #10]
 801b54a:	2200      	movs	r2, #0
 801b54c:	72da      	strb	r2, [r3, #11]
 801b54e:	e00f      	b.n	801b570 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	895b      	ldrh	r3, [r3, #10]
 801b554:	2b13      	cmp	r3, #19
 801b556:	d802      	bhi.n	801b55e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b558:	f06f 0301 	mvn.w	r3, #1
 801b55c:	e020      	b.n	801b5a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	685b      	ldr	r3, [r3, #4]
 801b562:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	691b      	ldr	r3, [r3, #16]
 801b568:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b56a:	f107 0314 	add.w	r3, r7, #20
 801b56e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b572:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b574:	2b00      	cmp	r3, #0
 801b576:	d00c      	beq.n	801b592 <ip4_output_if_src+0x12e>
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	891a      	ldrh	r2, [r3, #8]
 801b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b57e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b580:	429a      	cmp	r2, r3
 801b582:	d906      	bls.n	801b592 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b584:	687a      	ldr	r2, [r7, #4]
 801b586:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b588:	68f8      	ldr	r0, [r7, #12]
 801b58a:	f000 fde3 	bl	801c154 <ip4_frag>
 801b58e:	4603      	mov	r3, r0
 801b590:	e006      	b.n	801b5a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b594:	695b      	ldr	r3, [r3, #20]
 801b596:	687a      	ldr	r2, [r7, #4]
 801b598:	68f9      	ldr	r1, [r7, #12]
 801b59a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b59c:	4798      	blx	r3
 801b59e:	4603      	mov	r3, r0
}
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	3720      	adds	r7, #32
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	bd80      	pop	{r7, pc}
 801b5a8:	080229d4 	.word	0x080229d4
 801b5ac:	08022a08 	.word	0x08022a08
 801b5b0:	08022a14 	.word	0x08022a14
 801b5b4:	08022a3c 	.word	0x08022a3c
 801b5b8:	2000cafe 	.word	0x2000cafe
 801b5bc:	08022eac 	.word	0x08022eac

0801b5c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
 801b5c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5d4:	d002      	beq.n	801b5dc <ip4_addr_isbroadcast_u32+0x1c>
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d101      	bne.n	801b5e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b5dc:	2301      	movs	r3, #1
 801b5de:	e02a      	b.n	801b636 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b5e6:	f003 0302 	and.w	r3, r3, #2
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d101      	bne.n	801b5f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	e021      	b.n	801b636 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	3304      	adds	r3, #4
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	687a      	ldr	r2, [r7, #4]
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d101      	bne.n	801b602 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b5fe:	2300      	movs	r3, #0
 801b600:	e019      	b.n	801b636 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b602:	68fa      	ldr	r2, [r7, #12]
 801b604:	683b      	ldr	r3, [r7, #0]
 801b606:	3304      	adds	r3, #4
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	405a      	eors	r2, r3
 801b60c:	683b      	ldr	r3, [r7, #0]
 801b60e:	3308      	adds	r3, #8
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	4013      	ands	r3, r2
 801b614:	2b00      	cmp	r3, #0
 801b616:	d10d      	bne.n	801b634 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	3308      	adds	r3, #8
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	43da      	mvns	r2, r3
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	3308      	adds	r3, #8
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b62c:	429a      	cmp	r2, r3
 801b62e:	d101      	bne.n	801b634 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b630:	2301      	movs	r3, #1
 801b632:	e000      	b.n	801b636 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b634:	2300      	movs	r3, #0
  }
}
 801b636:	4618      	mov	r0, r3
 801b638:	3714      	adds	r7, #20
 801b63a:	46bd      	mov	sp, r7
 801b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b640:	4770      	bx	lr
	...

0801b644 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b082      	sub	sp, #8
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801b64c:	2210      	movs	r2, #16
 801b64e:	4904      	ldr	r1, [pc, #16]	@ (801b660 <ip4addr_ntoa+0x1c>)
 801b650:	6878      	ldr	r0, [r7, #4]
 801b652:	f000 f807 	bl	801b664 <ip4addr_ntoa_r>
 801b656:	4603      	mov	r3, r0
}
 801b658:	4618      	mov	r0, r3
 801b65a:	3708      	adds	r7, #8
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}
 801b660:	2000cb00 	.word	0x2000cb00

0801b664 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801b664:	b480      	push	{r7}
 801b666:	b08d      	sub	sp, #52	@ 0x34
 801b668:	af00      	add	r7, sp, #0
 801b66a:	60f8      	str	r0, [r7, #12]
 801b66c:	60b9      	str	r1, [r7, #8]
 801b66e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801b670:	2300      	movs	r3, #0
 801b672:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801b67e:	f107 0318 	add.w	r3, r7, #24
 801b682:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b684:	2300      	movs	r3, #0
 801b686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b68a:	e058      	b.n	801b73e <ip4addr_ntoa_r+0xda>
    i = 0;
 801b68c:	2300      	movs	r3, #0
 801b68e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b694:	781a      	ldrb	r2, [r3, #0]
 801b696:	4b32      	ldr	r3, [pc, #200]	@ (801b760 <ip4addr_ntoa_r+0xfc>)
 801b698:	fba3 1302 	umull	r1, r3, r3, r2
 801b69c:	08d9      	lsrs	r1, r3, #3
 801b69e:	460b      	mov	r3, r1
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	440b      	add	r3, r1
 801b6a4:	005b      	lsls	r3, r3, #1
 801b6a6:	1ad3      	subs	r3, r2, r3
 801b6a8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6ac:	781b      	ldrb	r3, [r3, #0]
 801b6ae:	4a2c      	ldr	r2, [pc, #176]	@ (801b760 <ip4addr_ntoa_r+0xfc>)
 801b6b0:	fba2 2303 	umull	r2, r3, r2, r3
 801b6b4:	08db      	lsrs	r3, r3, #3
 801b6b6:	b2da      	uxtb	r2, r3
 801b6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6ba:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801b6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b6c0:	1c5a      	adds	r2, r3, #1
 801b6c2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b6c6:	4619      	mov	r1, r3
 801b6c8:	7ffb      	ldrb	r3, [r7, #31]
 801b6ca:	3330      	adds	r3, #48	@ 0x30
 801b6cc:	b2da      	uxtb	r2, r3
 801b6ce:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801b6d2:	443b      	add	r3, r7
 801b6d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d1d8      	bne.n	801b692 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801b6e0:	e011      	b.n	801b706 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801b6e2:	6a3b      	ldr	r3, [r7, #32]
 801b6e4:	1c5a      	adds	r2, r3, #1
 801b6e6:	623a      	str	r2, [r7, #32]
 801b6e8:	687a      	ldr	r2, [r7, #4]
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	dc01      	bgt.n	801b6f2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801b6ee:	2300      	movs	r3, #0
 801b6f0:	e030      	b.n	801b754 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801b6f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6f8:	1c59      	adds	r1, r3, #1
 801b6fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b6fc:	3230      	adds	r2, #48	@ 0x30
 801b6fe:	443a      	add	r2, r7
 801b700:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801b704:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801b706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b70a:	1e5a      	subs	r2, r3, #1
 801b70c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b710:	2b00      	cmp	r3, #0
 801b712:	d1e6      	bne.n	801b6e2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801b714:	6a3b      	ldr	r3, [r7, #32]
 801b716:	1c5a      	adds	r2, r3, #1
 801b718:	623a      	str	r2, [r7, #32]
 801b71a:	687a      	ldr	r2, [r7, #4]
 801b71c:	429a      	cmp	r2, r3
 801b71e:	dc01      	bgt.n	801b724 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801b720:	2300      	movs	r3, #0
 801b722:	e017      	b.n	801b754 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801b724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b726:	1c5a      	adds	r2, r3, #1
 801b728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b72a:	222e      	movs	r2, #46	@ 0x2e
 801b72c:	701a      	strb	r2, [r3, #0]
    ap++;
 801b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b730:	3301      	adds	r3, #1
 801b732:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b738:	3301      	adds	r3, #1
 801b73a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b73e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b742:	2b03      	cmp	r3, #3
 801b744:	d9a2      	bls.n	801b68c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801b746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b748:	3b01      	subs	r3, #1
 801b74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b74e:	2200      	movs	r2, #0
 801b750:	701a      	strb	r2, [r3, #0]
  return buf;
 801b752:	68bb      	ldr	r3, [r7, #8]
}
 801b754:	4618      	mov	r0, r3
 801b756:	3734      	adds	r7, #52	@ 0x34
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr
 801b760:	cccccccd 	.word	0xcccccccd

0801b764 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b084      	sub	sp, #16
 801b768:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b76a:	2300      	movs	r3, #0
 801b76c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b76e:	4b12      	ldr	r3, [pc, #72]	@ (801b7b8 <ip_reass_tmr+0x54>)
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b774:	e018      	b.n	801b7a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	7fdb      	ldrb	r3, [r3, #31]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d00b      	beq.n	801b796 <ip_reass_tmr+0x32>
      r->timer--;
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	7fdb      	ldrb	r3, [r3, #31]
 801b782:	3b01      	subs	r3, #1
 801b784:	b2da      	uxtb	r2, r3
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	60fb      	str	r3, [r7, #12]
 801b794:	e008      	b.n	801b7a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b7a0:	68b9      	ldr	r1, [r7, #8]
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f000 f80a 	bl	801b7bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d1e3      	bne.n	801b776 <ip_reass_tmr+0x12>
    }
  }
}
 801b7ae:	bf00      	nop
 801b7b0:	bf00      	nop
 801b7b2:	3710      	adds	r7, #16
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	2000cb10 	.word	0x2000cb10

0801b7bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b088      	sub	sp, #32
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
 801b7c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b7ca:	683a      	ldr	r2, [r7, #0]
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d105      	bne.n	801b7de <ip_reass_free_complete_datagram+0x22>
 801b7d2:	4b45      	ldr	r3, [pc, #276]	@ (801b8e8 <ip_reass_free_complete_datagram+0x12c>)
 801b7d4:	22ab      	movs	r2, #171	@ 0xab
 801b7d6:	4945      	ldr	r1, [pc, #276]	@ (801b8ec <ip_reass_free_complete_datagram+0x130>)
 801b7d8:	4845      	ldr	r0, [pc, #276]	@ (801b8f0 <ip_reass_free_complete_datagram+0x134>)
 801b7da:	f001 fe8f 	bl	801d4fc <iprintf>
  if (prev != NULL) {
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d00a      	beq.n	801b7fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b7e4:	683b      	ldr	r3, [r7, #0]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	687a      	ldr	r2, [r7, #4]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	d005      	beq.n	801b7fa <ip_reass_free_complete_datagram+0x3e>
 801b7ee:	4b3e      	ldr	r3, [pc, #248]	@ (801b8e8 <ip_reass_free_complete_datagram+0x12c>)
 801b7f0:	22ad      	movs	r2, #173	@ 0xad
 801b7f2:	4940      	ldr	r1, [pc, #256]	@ (801b8f4 <ip_reass_free_complete_datagram+0x138>)
 801b7f4:	483e      	ldr	r0, [pc, #248]	@ (801b8f0 <ip_reass_free_complete_datagram+0x134>)
 801b7f6:	f001 fe81 	bl	801d4fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	685b      	ldr	r3, [r3, #4]
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b802:	697b      	ldr	r3, [r7, #20]
 801b804:	889b      	ldrh	r3, [r3, #4]
 801b806:	b29b      	uxth	r3, r3
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d12a      	bne.n	801b862 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	685b      	ldr	r3, [r3, #4]
 801b810:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b812:	697b      	ldr	r3, [r7, #20]
 801b814:	681a      	ldr	r2, [r3, #0]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b81a:	69bb      	ldr	r3, [r7, #24]
 801b81c:	6858      	ldr	r0, [r3, #4]
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	3308      	adds	r3, #8
 801b822:	2214      	movs	r2, #20
 801b824:	4619      	mov	r1, r3
 801b826:	f002 f81c 	bl	801d862 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b82a:	2101      	movs	r1, #1
 801b82c:	69b8      	ldr	r0, [r7, #24]
 801b82e:	f7ff fbb7 	bl	801afa0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b832:	69b8      	ldr	r0, [r7, #24]
 801b834:	f7f7 fe38 	bl	80134a8 <pbuf_clen>
 801b838:	4603      	mov	r3, r0
 801b83a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b83c:	8bfa      	ldrh	r2, [r7, #30]
 801b83e:	8a7b      	ldrh	r3, [r7, #18]
 801b840:	4413      	add	r3, r2
 801b842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b846:	db05      	blt.n	801b854 <ip_reass_free_complete_datagram+0x98>
 801b848:	4b27      	ldr	r3, [pc, #156]	@ (801b8e8 <ip_reass_free_complete_datagram+0x12c>)
 801b84a:	22bc      	movs	r2, #188	@ 0xbc
 801b84c:	492a      	ldr	r1, [pc, #168]	@ (801b8f8 <ip_reass_free_complete_datagram+0x13c>)
 801b84e:	4828      	ldr	r0, [pc, #160]	@ (801b8f0 <ip_reass_free_complete_datagram+0x134>)
 801b850:	f001 fe54 	bl	801d4fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b854:	8bfa      	ldrh	r2, [r7, #30]
 801b856:	8a7b      	ldrh	r3, [r7, #18]
 801b858:	4413      	add	r3, r2
 801b85a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b85c:	69b8      	ldr	r0, [r7, #24]
 801b85e:	f7f7 fd95 	bl	801338c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	685b      	ldr	r3, [r3, #4]
 801b866:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b868:	e01f      	b.n	801b8aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b86a:	69bb      	ldr	r3, [r7, #24]
 801b86c:	685b      	ldr	r3, [r3, #4]
 801b86e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b870:	69bb      	ldr	r3, [r7, #24]
 801b872:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b87a:	68f8      	ldr	r0, [r7, #12]
 801b87c:	f7f7 fe14 	bl	80134a8 <pbuf_clen>
 801b880:	4603      	mov	r3, r0
 801b882:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b884:	8bfa      	ldrh	r2, [r7, #30]
 801b886:	8a7b      	ldrh	r3, [r7, #18]
 801b888:	4413      	add	r3, r2
 801b88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b88e:	db05      	blt.n	801b89c <ip_reass_free_complete_datagram+0xe0>
 801b890:	4b15      	ldr	r3, [pc, #84]	@ (801b8e8 <ip_reass_free_complete_datagram+0x12c>)
 801b892:	22cc      	movs	r2, #204	@ 0xcc
 801b894:	4918      	ldr	r1, [pc, #96]	@ (801b8f8 <ip_reass_free_complete_datagram+0x13c>)
 801b896:	4816      	ldr	r0, [pc, #88]	@ (801b8f0 <ip_reass_free_complete_datagram+0x134>)
 801b898:	f001 fe30 	bl	801d4fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b89c:	8bfa      	ldrh	r2, [r7, #30]
 801b89e:	8a7b      	ldrh	r3, [r7, #18]
 801b8a0:	4413      	add	r3, r2
 801b8a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b8a4:	68f8      	ldr	r0, [r7, #12]
 801b8a6:	f7f7 fd71 	bl	801338c <pbuf_free>
  while (p != NULL) {
 801b8aa:	69bb      	ldr	r3, [r7, #24]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d1dc      	bne.n	801b86a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b8b0:	6839      	ldr	r1, [r7, #0]
 801b8b2:	6878      	ldr	r0, [r7, #4]
 801b8b4:	f000 f8c2 	bl	801ba3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b8b8:	4b10      	ldr	r3, [pc, #64]	@ (801b8fc <ip_reass_free_complete_datagram+0x140>)
 801b8ba:	881b      	ldrh	r3, [r3, #0]
 801b8bc:	8bfa      	ldrh	r2, [r7, #30]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d905      	bls.n	801b8ce <ip_reass_free_complete_datagram+0x112>
 801b8c2:	4b09      	ldr	r3, [pc, #36]	@ (801b8e8 <ip_reass_free_complete_datagram+0x12c>)
 801b8c4:	22d2      	movs	r2, #210	@ 0xd2
 801b8c6:	490e      	ldr	r1, [pc, #56]	@ (801b900 <ip_reass_free_complete_datagram+0x144>)
 801b8c8:	4809      	ldr	r0, [pc, #36]	@ (801b8f0 <ip_reass_free_complete_datagram+0x134>)
 801b8ca:	f001 fe17 	bl	801d4fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b8ce:	4b0b      	ldr	r3, [pc, #44]	@ (801b8fc <ip_reass_free_complete_datagram+0x140>)
 801b8d0:	881a      	ldrh	r2, [r3, #0]
 801b8d2:	8bfb      	ldrh	r3, [r7, #30]
 801b8d4:	1ad3      	subs	r3, r2, r3
 801b8d6:	b29a      	uxth	r2, r3
 801b8d8:	4b08      	ldr	r3, [pc, #32]	@ (801b8fc <ip_reass_free_complete_datagram+0x140>)
 801b8da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b8dc:	8bfb      	ldrh	r3, [r7, #30]
}
 801b8de:	4618      	mov	r0, r3
 801b8e0:	3720      	adds	r7, #32
 801b8e2:	46bd      	mov	sp, r7
 801b8e4:	bd80      	pop	{r7, pc}
 801b8e6:	bf00      	nop
 801b8e8:	08022a6c 	.word	0x08022a6c
 801b8ec:	08022aa8 	.word	0x08022aa8
 801b8f0:	08022ab4 	.word	0x08022ab4
 801b8f4:	08022adc 	.word	0x08022adc
 801b8f8:	08022af0 	.word	0x08022af0
 801b8fc:	2000cb14 	.word	0x2000cb14
 801b900:	08022b10 	.word	0x08022b10

0801b904 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b08a      	sub	sp, #40	@ 0x28
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
 801b90c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b90e:	2300      	movs	r3, #0
 801b910:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b912:	2300      	movs	r3, #0
 801b914:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b916:	2300      	movs	r3, #0
 801b918:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b91a:	2300      	movs	r3, #0
 801b91c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b91e:	2300      	movs	r3, #0
 801b920:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b922:	4b28      	ldr	r3, [pc, #160]	@ (801b9c4 <ip_reass_remove_oldest_datagram+0xc0>)
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b928:	e030      	b.n	801b98c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92c:	695a      	ldr	r2, [r3, #20]
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	68db      	ldr	r3, [r3, #12]
 801b932:	429a      	cmp	r2, r3
 801b934:	d10c      	bne.n	801b950 <ip_reass_remove_oldest_datagram+0x4c>
 801b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b938:	699a      	ldr	r2, [r3, #24]
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	691b      	ldr	r3, [r3, #16]
 801b93e:	429a      	cmp	r2, r3
 801b940:	d106      	bne.n	801b950 <ip_reass_remove_oldest_datagram+0x4c>
 801b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b944:	899a      	ldrh	r2, [r3, #12]
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	889b      	ldrh	r3, [r3, #4]
 801b94a:	b29b      	uxth	r3, r3
 801b94c:	429a      	cmp	r2, r3
 801b94e:	d014      	beq.n	801b97a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	3301      	adds	r3, #1
 801b954:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b956:	6a3b      	ldr	r3, [r7, #32]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d104      	bne.n	801b966 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b960:	69fb      	ldr	r3, [r7, #28]
 801b962:	61bb      	str	r3, [r7, #24]
 801b964:	e009      	b.n	801b97a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b968:	7fda      	ldrb	r2, [r3, #31]
 801b96a:	6a3b      	ldr	r3, [r7, #32]
 801b96c:	7fdb      	ldrb	r3, [r3, #31]
 801b96e:	429a      	cmp	r2, r3
 801b970:	d803      	bhi.n	801b97a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b974:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b976:	69fb      	ldr	r3, [r7, #28]
 801b978:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d001      	beq.n	801b986 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b984:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d1cb      	bne.n	801b92a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b992:	6a3b      	ldr	r3, [r7, #32]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d008      	beq.n	801b9aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b998:	69b9      	ldr	r1, [r7, #24]
 801b99a:	6a38      	ldr	r0, [r7, #32]
 801b99c:	f7ff ff0e 	bl	801b7bc <ip_reass_free_complete_datagram>
 801b9a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b9a2:	697a      	ldr	r2, [r7, #20]
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	4413      	add	r3, r2
 801b9a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b9aa:	697a      	ldr	r2, [r7, #20]
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	da02      	bge.n	801b9b8 <ip_reass_remove_oldest_datagram+0xb4>
 801b9b2:	693b      	ldr	r3, [r7, #16]
 801b9b4:	2b01      	cmp	r3, #1
 801b9b6:	dcac      	bgt.n	801b912 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b9b8:	697b      	ldr	r3, [r7, #20]
}
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	3728      	adds	r7, #40	@ 0x28
 801b9be:	46bd      	mov	sp, r7
 801b9c0:	bd80      	pop	{r7, pc}
 801b9c2:	bf00      	nop
 801b9c4:	2000cb10 	.word	0x2000cb10

0801b9c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b9d2:	2004      	movs	r0, #4
 801b9d4:	f7f6 fdf2 	bl	80125bc <memp_malloc>
 801b9d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d110      	bne.n	801ba02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b9e0:	6839      	ldr	r1, [r7, #0]
 801b9e2:	6878      	ldr	r0, [r7, #4]
 801b9e4:	f7ff ff8e 	bl	801b904 <ip_reass_remove_oldest_datagram>
 801b9e8:	4602      	mov	r2, r0
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	4293      	cmp	r3, r2
 801b9ee:	dc03      	bgt.n	801b9f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b9f0:	2004      	movs	r0, #4
 801b9f2:	f7f6 fde3 	bl	80125bc <memp_malloc>
 801b9f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d101      	bne.n	801ba02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	e016      	b.n	801ba30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ba02:	2220      	movs	r2, #32
 801ba04:	2100      	movs	r1, #0
 801ba06:	68f8      	ldr	r0, [r7, #12]
 801ba08:	f001 fe2d 	bl	801d666 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	220f      	movs	r2, #15
 801ba10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ba12:	4b09      	ldr	r3, [pc, #36]	@ (801ba38 <ip_reass_enqueue_new_datagram+0x70>)
 801ba14:	681a      	ldr	r2, [r3, #0]
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ba1a:	4a07      	ldr	r2, [pc, #28]	@ (801ba38 <ip_reass_enqueue_new_datagram+0x70>)
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	3308      	adds	r3, #8
 801ba24:	2214      	movs	r2, #20
 801ba26:	6879      	ldr	r1, [r7, #4]
 801ba28:	4618      	mov	r0, r3
 801ba2a:	f001 ff1a 	bl	801d862 <memcpy>
  return ipr;
 801ba2e:	68fb      	ldr	r3, [r7, #12]
}
 801ba30:	4618      	mov	r0, r3
 801ba32:	3710      	adds	r7, #16
 801ba34:	46bd      	mov	sp, r7
 801ba36:	bd80      	pop	{r7, pc}
 801ba38:	2000cb10 	.word	0x2000cb10

0801ba3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b082      	sub	sp, #8
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	6078      	str	r0, [r7, #4]
 801ba44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ba46:	4b10      	ldr	r3, [pc, #64]	@ (801ba88 <ip_reass_dequeue_datagram+0x4c>)
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	687a      	ldr	r2, [r7, #4]
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d104      	bne.n	801ba5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	4a0c      	ldr	r2, [pc, #48]	@ (801ba88 <ip_reass_dequeue_datagram+0x4c>)
 801ba56:	6013      	str	r3, [r2, #0]
 801ba58:	e00d      	b.n	801ba76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ba5a:	683b      	ldr	r3, [r7, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d106      	bne.n	801ba6e <ip_reass_dequeue_datagram+0x32>
 801ba60:	4b0a      	ldr	r3, [pc, #40]	@ (801ba8c <ip_reass_dequeue_datagram+0x50>)
 801ba62:	f240 1245 	movw	r2, #325	@ 0x145
 801ba66:	490a      	ldr	r1, [pc, #40]	@ (801ba90 <ip_reass_dequeue_datagram+0x54>)
 801ba68:	480a      	ldr	r0, [pc, #40]	@ (801ba94 <ip_reass_dequeue_datagram+0x58>)
 801ba6a:	f001 fd47 	bl	801d4fc <iprintf>
    prev->next = ipr->next;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681a      	ldr	r2, [r3, #0]
 801ba72:	683b      	ldr	r3, [r7, #0]
 801ba74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ba76:	6879      	ldr	r1, [r7, #4]
 801ba78:	2004      	movs	r0, #4
 801ba7a:	f7f6 fe15 	bl	80126a8 <memp_free>
}
 801ba7e:	bf00      	nop
 801ba80:	3708      	adds	r7, #8
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	2000cb10 	.word	0x2000cb10
 801ba8c:	08022a6c 	.word	0x08022a6c
 801ba90:	08022b34 	.word	0x08022b34
 801ba94:	08022ab4 	.word	0x08022ab4

0801ba98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b08c      	sub	sp, #48	@ 0x30
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	60f8      	str	r0, [r7, #12]
 801baa0:	60b9      	str	r1, [r7, #8]
 801baa2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801baa4:	2300      	movs	r3, #0
 801baa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801baa8:	2301      	movs	r3, #1
 801baaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	685b      	ldr	r3, [r3, #4]
 801bab0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bab2:	69fb      	ldr	r3, [r7, #28]
 801bab4:	885b      	ldrh	r3, [r3, #2]
 801bab6:	b29b      	uxth	r3, r3
 801bab8:	4618      	mov	r0, r3
 801baba:	f7f6 f8a7 	bl	8011c0c <lwip_htons>
 801babe:	4603      	mov	r3, r0
 801bac0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bac2:	69fb      	ldr	r3, [r7, #28]
 801bac4:	781b      	ldrb	r3, [r3, #0]
 801bac6:	f003 030f 	and.w	r3, r3, #15
 801baca:	b2db      	uxtb	r3, r3
 801bacc:	009b      	lsls	r3, r3, #2
 801bace:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bad0:	7e7b      	ldrb	r3, [r7, #25]
 801bad2:	b29b      	uxth	r3, r3
 801bad4:	8b7a      	ldrh	r2, [r7, #26]
 801bad6:	429a      	cmp	r2, r3
 801bad8:	d202      	bcs.n	801bae0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bada:	f04f 33ff 	mov.w	r3, #4294967295
 801bade:	e135      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bae0:	7e7b      	ldrb	r3, [r7, #25]
 801bae2:	b29b      	uxth	r3, r3
 801bae4:	8b7a      	ldrh	r2, [r7, #26]
 801bae6:	1ad3      	subs	r3, r2, r3
 801bae8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801baea:	69fb      	ldr	r3, [r7, #28]
 801baec:	88db      	ldrh	r3, [r3, #6]
 801baee:	b29b      	uxth	r3, r3
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7f6 f88b 	bl	8011c0c <lwip_htons>
 801baf6:	4603      	mov	r3, r0
 801baf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bafc:	b29b      	uxth	r3, r3
 801bafe:	00db      	lsls	r3, r3, #3
 801bb00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	685b      	ldr	r3, [r3, #4]
 801bb06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	701a      	strb	r2, [r3, #0]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	705a      	strb	r2, [r3, #1]
 801bb12:	2200      	movs	r2, #0
 801bb14:	709a      	strb	r2, [r3, #2]
 801bb16:	2200      	movs	r2, #0
 801bb18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb1c:	8afa      	ldrh	r2, [r7, #22]
 801bb1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bb20:	8afa      	ldrh	r2, [r7, #22]
 801bb22:	8b7b      	ldrh	r3, [r7, #26]
 801bb24:	4413      	add	r3, r2
 801bb26:	b29a      	uxth	r2, r3
 801bb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb2e:	88db      	ldrh	r3, [r3, #6]
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	8afa      	ldrh	r2, [r7, #22]
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d902      	bls.n	801bb3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb38:	f04f 33ff 	mov.w	r3, #4294967295
 801bb3c:	e106      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	685b      	ldr	r3, [r3, #4]
 801bb42:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb44:	e068      	b.n	801bc18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb48:	685b      	ldr	r3, [r3, #4]
 801bb4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb4e:	889b      	ldrh	r3, [r3, #4]
 801bb50:	b29a      	uxth	r2, r3
 801bb52:	693b      	ldr	r3, [r7, #16]
 801bb54:	889b      	ldrh	r3, [r3, #4]
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d235      	bcs.n	801bbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d020      	beq.n	801bbaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb6a:	889b      	ldrh	r3, [r3, #4]
 801bb6c:	b29a      	uxth	r2, r3
 801bb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb70:	88db      	ldrh	r3, [r3, #6]
 801bb72:	b29b      	uxth	r3, r3
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d307      	bcc.n	801bb88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb7a:	88db      	ldrh	r3, [r3, #6]
 801bb7c:	b29a      	uxth	r2, r3
 801bb7e:	693b      	ldr	r3, [r7, #16]
 801bb80:	889b      	ldrh	r3, [r3, #4]
 801bb82:	b29b      	uxth	r3, r3
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d902      	bls.n	801bb8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb88:	f04f 33ff 	mov.w	r3, #4294967295
 801bb8c:	e0de      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb90:	68ba      	ldr	r2, [r7, #8]
 801bb92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb96:	88db      	ldrh	r3, [r3, #6]
 801bb98:	b29a      	uxth	r2, r3
 801bb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb9c:	889b      	ldrh	r3, [r3, #4]
 801bb9e:	b29b      	uxth	r3, r3
 801bba0:	429a      	cmp	r2, r3
 801bba2:	d03d      	beq.n	801bc20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bba4:	2300      	movs	r3, #0
 801bba6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bba8:	e03a      	b.n	801bc20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbac:	88db      	ldrh	r3, [r3, #6]
 801bbae:	b29a      	uxth	r2, r3
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	889b      	ldrh	r3, [r3, #4]
 801bbb4:	b29b      	uxth	r3, r3
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d902      	bls.n	801bbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbba:	f04f 33ff 	mov.w	r3, #4294967295
 801bbbe:	e0c5      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	68ba      	ldr	r2, [r7, #8]
 801bbc4:	605a      	str	r2, [r3, #4]
      break;
 801bbc6:	e02b      	b.n	801bc20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbca:	889b      	ldrh	r3, [r3, #4]
 801bbcc:	b29a      	uxth	r2, r3
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	889b      	ldrh	r3, [r3, #4]
 801bbd2:	b29b      	uxth	r3, r3
 801bbd4:	429a      	cmp	r2, r3
 801bbd6:	d102      	bne.n	801bbde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbd8:	f04f 33ff 	mov.w	r3, #4294967295
 801bbdc:	e0b6      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbe0:	889b      	ldrh	r3, [r3, #4]
 801bbe2:	b29a      	uxth	r2, r3
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	88db      	ldrh	r3, [r3, #6]
 801bbe8:	b29b      	uxth	r3, r3
 801bbea:	429a      	cmp	r2, r3
 801bbec:	d202      	bcs.n	801bbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbee:	f04f 33ff 	mov.w	r3, #4294967295
 801bbf2:	e0ab      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d009      	beq.n	801bc0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbfc:	88db      	ldrh	r3, [r3, #6]
 801bbfe:	b29a      	uxth	r2, r3
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	889b      	ldrh	r3, [r3, #4]
 801bc04:	b29b      	uxth	r3, r3
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d001      	beq.n	801bc0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bc0e:	693b      	ldr	r3, [r7, #16]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801bc14:	693b      	ldr	r3, [r7, #16]
 801bc16:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d193      	bne.n	801bb46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bc1e:	e000      	b.n	801bc22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bc20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d12d      	bne.n	801bc84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d01c      	beq.n	801bc68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc30:	88db      	ldrh	r3, [r3, #6]
 801bc32:	b29a      	uxth	r2, r3
 801bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc36:	889b      	ldrh	r3, [r3, #4]
 801bc38:	b29b      	uxth	r3, r3
 801bc3a:	429a      	cmp	r2, r3
 801bc3c:	d906      	bls.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bc3e:	4b45      	ldr	r3, [pc, #276]	@ (801bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc40:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bc44:	4944      	ldr	r1, [pc, #272]	@ (801bd58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bc46:	4845      	ldr	r0, [pc, #276]	@ (801bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc48:	f001 fc58 	bl	801d4fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc4e:	68ba      	ldr	r2, [r7, #8]
 801bc50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc54:	88db      	ldrh	r3, [r3, #6]
 801bc56:	b29a      	uxth	r2, r3
 801bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc5a:	889b      	ldrh	r3, [r3, #4]
 801bc5c:	b29b      	uxth	r3, r3
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d010      	beq.n	801bc84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bc62:	2300      	movs	r3, #0
 801bc64:	623b      	str	r3, [r7, #32]
 801bc66:	e00d      	b.n	801bc84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	685b      	ldr	r3, [r3, #4]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d006      	beq.n	801bc7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bc70:	4b38      	ldr	r3, [pc, #224]	@ (801bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc72:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801bc76:	493a      	ldr	r1, [pc, #232]	@ (801bd60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bc78:	4838      	ldr	r0, [pc, #224]	@ (801bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc7a:	f001 fc3f 	bl	801d4fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	68ba      	ldr	r2, [r7, #8]
 801bc82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d105      	bne.n	801bc96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	7f9b      	ldrb	r3, [r3, #30]
 801bc8e:	f003 0301 	and.w	r3, r3, #1
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d059      	beq.n	801bd4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bc96:	6a3b      	ldr	r3, [r7, #32]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d04f      	beq.n	801bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	685b      	ldr	r3, [r3, #4]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d006      	beq.n	801bcb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	685b      	ldr	r3, [r3, #4]
 801bca8:	685b      	ldr	r3, [r3, #4]
 801bcaa:	889b      	ldrh	r3, [r3, #4]
 801bcac:	b29b      	uxth	r3, r3
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d002      	beq.n	801bcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	623b      	str	r3, [r7, #32]
 801bcb6:	e041      	b.n	801bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bcc2:	e012      	b.n	801bcea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcc6:	685b      	ldr	r3, [r3, #4]
 801bcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bccc:	88db      	ldrh	r3, [r3, #6]
 801bcce:	b29a      	uxth	r2, r3
 801bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcd2:	889b      	ldrh	r3, [r3, #4]
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	d002      	beq.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bcda:	2300      	movs	r3, #0
 801bcdc:	623b      	str	r3, [r7, #32]
            break;
 801bcde:	e007      	b.n	801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bce2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d1e9      	bne.n	801bcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bcf0:	6a3b      	ldr	r3, [r7, #32]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d022      	beq.n	801bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	685b      	ldr	r3, [r3, #4]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d106      	bne.n	801bd0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bcfe:	4b15      	ldr	r3, [pc, #84]	@ (801bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd00:	f240 12df 	movw	r2, #479	@ 0x1df
 801bd04:	4917      	ldr	r1, [pc, #92]	@ (801bd64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bd06:	4815      	ldr	r0, [pc, #84]	@ (801bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd08:	f001 fbf8 	bl	801d4fc <iprintf>
          LWIP_ASSERT("sanity check",
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	685b      	ldr	r3, [r3, #4]
 801bd10:	685b      	ldr	r3, [r3, #4]
 801bd12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d106      	bne.n	801bd26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bd18:	4b0e      	ldr	r3, [pc, #56]	@ (801bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bd1e:	4911      	ldr	r1, [pc, #68]	@ (801bd64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bd20:	480e      	ldr	r0, [pc, #56]	@ (801bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd22:	f001 fbeb 	bl	801d4fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d006      	beq.n	801bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bd2e:	4b09      	ldr	r3, [pc, #36]	@ (801bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd30:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bd34:	490c      	ldr	r1, [pc, #48]	@ (801bd68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bd36:	4809      	ldr	r0, [pc, #36]	@ (801bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd38:	f001 fbe0 	bl	801d4fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bd3c:	6a3b      	ldr	r3, [r7, #32]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	bf14      	ite	ne
 801bd42:	2301      	movne	r3, #1
 801bd44:	2300      	moveq	r3, #0
 801bd46:	b2db      	uxtb	r3, r3
 801bd48:	e000      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bd4a:	2300      	movs	r3, #0
}
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	3730      	adds	r7, #48	@ 0x30
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bd80      	pop	{r7, pc}
 801bd54:	08022a6c 	.word	0x08022a6c
 801bd58:	08022b50 	.word	0x08022b50
 801bd5c:	08022ab4 	.word	0x08022ab4
 801bd60:	08022b70 	.word	0x08022b70
 801bd64:	08022ba8 	.word	0x08022ba8
 801bd68:	08022bb8 	.word	0x08022bb8

0801bd6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b08e      	sub	sp, #56	@ 0x38
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	685b      	ldr	r3, [r3, #4]
 801bd78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd7c:	781b      	ldrb	r3, [r3, #0]
 801bd7e:	f003 030f 	and.w	r3, r3, #15
 801bd82:	b2db      	uxtb	r3, r3
 801bd84:	009b      	lsls	r3, r3, #2
 801bd86:	b2db      	uxtb	r3, r3
 801bd88:	2b14      	cmp	r3, #20
 801bd8a:	f040 8171 	bne.w	801c070 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd90:	88db      	ldrh	r3, [r3, #6]
 801bd92:	b29b      	uxth	r3, r3
 801bd94:	4618      	mov	r0, r3
 801bd96:	f7f5 ff39 	bl	8011c0c <lwip_htons>
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bda0:	b29b      	uxth	r3, r3
 801bda2:	00db      	lsls	r3, r3, #3
 801bda4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bda8:	885b      	ldrh	r3, [r3, #2]
 801bdaa:	b29b      	uxth	r3, r3
 801bdac:	4618      	mov	r0, r3
 801bdae:	f7f5 ff2d 	bl	8011c0c <lwip_htons>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb8:	781b      	ldrb	r3, [r3, #0]
 801bdba:	f003 030f 	and.w	r3, r3, #15
 801bdbe:	b2db      	uxtb	r3, r3
 801bdc0:	009b      	lsls	r3, r3, #2
 801bdc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801bdc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bdca:	b29b      	uxth	r3, r3
 801bdcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bdce:	429a      	cmp	r2, r3
 801bdd0:	f0c0 8150 	bcc.w	801c074 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bdd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bdd8:	b29b      	uxth	r3, r3
 801bdda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bddc:	1ad3      	subs	r3, r2, r3
 801bdde:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bde0:	6878      	ldr	r0, [r7, #4]
 801bde2:	f7f7 fb61 	bl	80134a8 <pbuf_clen>
 801bde6:	4603      	mov	r3, r0
 801bde8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bdea:	4b8c      	ldr	r3, [pc, #560]	@ (801c01c <ip4_reass+0x2b0>)
 801bdec:	881b      	ldrh	r3, [r3, #0]
 801bdee:	461a      	mov	r2, r3
 801bdf0:	8c3b      	ldrh	r3, [r7, #32]
 801bdf2:	4413      	add	r3, r2
 801bdf4:	2b0a      	cmp	r3, #10
 801bdf6:	dd10      	ble.n	801be1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bdf8:	8c3b      	ldrh	r3, [r7, #32]
 801bdfa:	4619      	mov	r1, r3
 801bdfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bdfe:	f7ff fd81 	bl	801b904 <ip_reass_remove_oldest_datagram>
 801be02:	4603      	mov	r3, r0
 801be04:	2b00      	cmp	r3, #0
 801be06:	f000 8137 	beq.w	801c078 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801be0a:	4b84      	ldr	r3, [pc, #528]	@ (801c01c <ip4_reass+0x2b0>)
 801be0c:	881b      	ldrh	r3, [r3, #0]
 801be0e:	461a      	mov	r2, r3
 801be10:	8c3b      	ldrh	r3, [r7, #32]
 801be12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801be14:	2b0a      	cmp	r3, #10
 801be16:	f300 812f 	bgt.w	801c078 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801be1a:	4b81      	ldr	r3, [pc, #516]	@ (801c020 <ip4_reass+0x2b4>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	633b      	str	r3, [r7, #48]	@ 0x30
 801be20:	e015      	b.n	801be4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be24:	695a      	ldr	r2, [r3, #20]
 801be26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be28:	68db      	ldr	r3, [r3, #12]
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d10c      	bne.n	801be48 <ip4_reass+0xdc>
 801be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be30:	699a      	ldr	r2, [r3, #24]
 801be32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be34:	691b      	ldr	r3, [r3, #16]
 801be36:	429a      	cmp	r2, r3
 801be38:	d106      	bne.n	801be48 <ip4_reass+0xdc>
 801be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be3c:	899a      	ldrh	r2, [r3, #12]
 801be3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be40:	889b      	ldrh	r3, [r3, #4]
 801be42:	b29b      	uxth	r3, r3
 801be44:	429a      	cmp	r2, r3
 801be46:	d006      	beq.n	801be56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801be48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	633b      	str	r3, [r7, #48]	@ 0x30
 801be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be50:	2b00      	cmp	r3, #0
 801be52:	d1e6      	bne.n	801be22 <ip4_reass+0xb6>
 801be54:	e000      	b.n	801be58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801be56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801be58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d109      	bne.n	801be72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801be5e:	8c3b      	ldrh	r3, [r7, #32]
 801be60:	4619      	mov	r1, r3
 801be62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801be64:	f7ff fdb0 	bl	801b9c8 <ip_reass_enqueue_new_datagram>
 801be68:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d11c      	bne.n	801beaa <ip4_reass+0x13e>
      goto nullreturn;
 801be70:	e105      	b.n	801c07e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801be72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be74:	88db      	ldrh	r3, [r3, #6]
 801be76:	b29b      	uxth	r3, r3
 801be78:	4618      	mov	r0, r3
 801be7a:	f7f5 fec7 	bl	8011c0c <lwip_htons>
 801be7e:	4603      	mov	r3, r0
 801be80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be84:	2b00      	cmp	r3, #0
 801be86:	d110      	bne.n	801beaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801be88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be8a:	89db      	ldrh	r3, [r3, #14]
 801be8c:	4618      	mov	r0, r3
 801be8e:	f7f5 febd 	bl	8011c0c <lwip_htons>
 801be92:	4603      	mov	r3, r0
 801be94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d006      	beq.n	801beaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801be9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be9e:	3308      	adds	r3, #8
 801bea0:	2214      	movs	r2, #20
 801bea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bea4:	4618      	mov	r0, r3
 801bea6:	f001 fcdc 	bl	801d862 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beac:	88db      	ldrh	r3, [r3, #6]
 801beae:	b29b      	uxth	r3, r3
 801beb0:	f003 0320 	and.w	r3, r3, #32
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	bf0c      	ite	eq
 801beb8:	2301      	moveq	r3, #1
 801beba:	2300      	movne	r3, #0
 801bebc:	b2db      	uxtb	r3, r3
 801bebe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bec0:	69fb      	ldr	r3, [r7, #28]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d00e      	beq.n	801bee4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bec6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801beca:	4413      	add	r3, r2
 801becc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bece:	8b7a      	ldrh	r2, [r7, #26]
 801bed0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801bed2:	429a      	cmp	r2, r3
 801bed4:	f0c0 80a0 	bcc.w	801c018 <ip4_reass+0x2ac>
 801bed8:	8b7b      	ldrh	r3, [r7, #26]
 801beda:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801bede:	4293      	cmp	r3, r2
 801bee0:	f200 809a 	bhi.w	801c018 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bee4:	69fa      	ldr	r2, [r7, #28]
 801bee6:	6879      	ldr	r1, [r7, #4]
 801bee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801beea:	f7ff fdd5 	bl	801ba98 <ip_reass_chain_frag_into_datagram_and_validate>
 801beee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bef6:	f000 809b 	beq.w	801c030 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801befa:	4b48      	ldr	r3, [pc, #288]	@ (801c01c <ip4_reass+0x2b0>)
 801befc:	881a      	ldrh	r2, [r3, #0]
 801befe:	8c3b      	ldrh	r3, [r7, #32]
 801bf00:	4413      	add	r3, r2
 801bf02:	b29a      	uxth	r2, r3
 801bf04:	4b45      	ldr	r3, [pc, #276]	@ (801c01c <ip4_reass+0x2b0>)
 801bf06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d00d      	beq.n	801bf2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bf0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bf10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf12:	4413      	add	r3, r2
 801bf14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf18:	8a7a      	ldrh	r2, [r7, #18]
 801bf1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801bf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf1e:	7f9b      	ldrb	r3, [r3, #30]
 801bf20:	f043 0301 	orr.w	r3, r3, #1
 801bf24:	b2da      	uxtb	r2, r3
 801bf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bf2a:	697b      	ldr	r3, [r7, #20]
 801bf2c:	2b01      	cmp	r3, #1
 801bf2e:	d171      	bne.n	801c014 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf32:	8b9b      	ldrh	r3, [r3, #28]
 801bf34:	3314      	adds	r3, #20
 801bf36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801bf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf3a:	685b      	ldr	r3, [r3, #4]
 801bf3c:	685b      	ldr	r3, [r3, #4]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf44:	685b      	ldr	r3, [r3, #4]
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf4c:	3308      	adds	r3, #8
 801bf4e:	2214      	movs	r2, #20
 801bf50:	4619      	mov	r1, r3
 801bf52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf54:	f001 fc85 	bl	801d862 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bf58:	8a3b      	ldrh	r3, [r7, #16]
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f7f5 fe56 	bl	8011c0c <lwip_htons>
 801bf60:	4603      	mov	r3, r0
 801bf62:	461a      	mov	r2, r3
 801bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801bf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	719a      	strb	r2, [r3, #6]
 801bf6e:	2200      	movs	r2, #0
 801bf70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf74:	2200      	movs	r2, #0
 801bf76:	729a      	strb	r2, [r3, #10]
 801bf78:	2200      	movs	r2, #0
 801bf7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf7e:	685b      	ldr	r3, [r3, #4]
 801bf80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801bf82:	e00d      	b.n	801bfa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801bf84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf86:	685b      	ldr	r3, [r3, #4]
 801bf88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bf8a:	2114      	movs	r1, #20
 801bf8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801bf8e:	f7f7 f977 	bl	8013280 <pbuf_remove_header>
      pbuf_cat(p, r);
 801bf92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bf94:	6878      	ldr	r0, [r7, #4]
 801bf96:	f7f7 fac7 	bl	8013528 <pbuf_cat>
      r = iprh->next_pbuf;
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801bfa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d1ee      	bne.n	801bf84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bfa6:	4b1e      	ldr	r3, [pc, #120]	@ (801c020 <ip4_reass+0x2b4>)
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bfac:	429a      	cmp	r2, r3
 801bfae:	d102      	bne.n	801bfb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bfb4:	e010      	b.n	801bfd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bfb6:	4b1a      	ldr	r3, [pc, #104]	@ (801c020 <ip4_reass+0x2b4>)
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bfbc:	e007      	b.n	801bfce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bfc4:	429a      	cmp	r2, r3
 801bfc6:	d006      	beq.n	801bfd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d1f4      	bne.n	801bfbe <ip4_reass+0x252>
 801bfd4:	e000      	b.n	801bfd8 <ip4_reass+0x26c>
          break;
 801bfd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bfd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bfda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bfdc:	f7ff fd2e 	bl	801ba3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bfe0:	6878      	ldr	r0, [r7, #4]
 801bfe2:	f7f7 fa61 	bl	80134a8 <pbuf_clen>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bfea:	4b0c      	ldr	r3, [pc, #48]	@ (801c01c <ip4_reass+0x2b0>)
 801bfec:	881b      	ldrh	r3, [r3, #0]
 801bfee:	8c3a      	ldrh	r2, [r7, #32]
 801bff0:	429a      	cmp	r2, r3
 801bff2:	d906      	bls.n	801c002 <ip4_reass+0x296>
 801bff4:	4b0b      	ldr	r3, [pc, #44]	@ (801c024 <ip4_reass+0x2b8>)
 801bff6:	f240 229b 	movw	r2, #667	@ 0x29b
 801bffa:	490b      	ldr	r1, [pc, #44]	@ (801c028 <ip4_reass+0x2bc>)
 801bffc:	480b      	ldr	r0, [pc, #44]	@ (801c02c <ip4_reass+0x2c0>)
 801bffe:	f001 fa7d 	bl	801d4fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c002:	4b06      	ldr	r3, [pc, #24]	@ (801c01c <ip4_reass+0x2b0>)
 801c004:	881a      	ldrh	r2, [r3, #0]
 801c006:	8c3b      	ldrh	r3, [r7, #32]
 801c008:	1ad3      	subs	r3, r2, r3
 801c00a:	b29a      	uxth	r2, r3
 801c00c:	4b03      	ldr	r3, [pc, #12]	@ (801c01c <ip4_reass+0x2b0>)
 801c00e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	e038      	b.n	801c086 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c014:	2300      	movs	r3, #0
 801c016:	e036      	b.n	801c086 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c018:	bf00      	nop
 801c01a:	e00a      	b.n	801c032 <ip4_reass+0x2c6>
 801c01c:	2000cb14 	.word	0x2000cb14
 801c020:	2000cb10 	.word	0x2000cb10
 801c024:	08022a6c 	.word	0x08022a6c
 801c028:	08022bdc 	.word	0x08022bdc
 801c02c:	08022ab4 	.word	0x08022ab4
    goto nullreturn_ipr;
 801c030:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c034:	2b00      	cmp	r3, #0
 801c036:	d106      	bne.n	801c046 <ip4_reass+0x2da>
 801c038:	4b15      	ldr	r3, [pc, #84]	@ (801c090 <ip4_reass+0x324>)
 801c03a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c03e:	4915      	ldr	r1, [pc, #84]	@ (801c094 <ip4_reass+0x328>)
 801c040:	4815      	ldr	r0, [pc, #84]	@ (801c098 <ip4_reass+0x32c>)
 801c042:	f001 fa5b 	bl	801d4fc <iprintf>
  if (ipr->p == NULL) {
 801c046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c048:	685b      	ldr	r3, [r3, #4]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d116      	bne.n	801c07c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c04e:	4b13      	ldr	r3, [pc, #76]	@ (801c09c <ip4_reass+0x330>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c054:	429a      	cmp	r2, r3
 801c056:	d006      	beq.n	801c066 <ip4_reass+0x2fa>
 801c058:	4b0d      	ldr	r3, [pc, #52]	@ (801c090 <ip4_reass+0x324>)
 801c05a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c05e:	4910      	ldr	r1, [pc, #64]	@ (801c0a0 <ip4_reass+0x334>)
 801c060:	480d      	ldr	r0, [pc, #52]	@ (801c098 <ip4_reass+0x32c>)
 801c062:	f001 fa4b 	bl	801d4fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c066:	2100      	movs	r1, #0
 801c068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c06a:	f7ff fce7 	bl	801ba3c <ip_reass_dequeue_datagram>
 801c06e:	e006      	b.n	801c07e <ip4_reass+0x312>
    goto nullreturn;
 801c070:	bf00      	nop
 801c072:	e004      	b.n	801c07e <ip4_reass+0x312>
    goto nullreturn;
 801c074:	bf00      	nop
 801c076:	e002      	b.n	801c07e <ip4_reass+0x312>
      goto nullreturn;
 801c078:	bf00      	nop
 801c07a:	e000      	b.n	801c07e <ip4_reass+0x312>
  }

nullreturn:
 801c07c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c07e:	6878      	ldr	r0, [r7, #4]
 801c080:	f7f7 f984 	bl	801338c <pbuf_free>
  return NULL;
 801c084:	2300      	movs	r3, #0
}
 801c086:	4618      	mov	r0, r3
 801c088:	3738      	adds	r7, #56	@ 0x38
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}
 801c08e:	bf00      	nop
 801c090:	08022a6c 	.word	0x08022a6c
 801c094:	08022bf8 	.word	0x08022bf8
 801c098:	08022ab4 	.word	0x08022ab4
 801c09c:	2000cb10 	.word	0x2000cb10
 801c0a0:	08022c04 	.word	0x08022c04

0801c0a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c0a8:	2005      	movs	r0, #5
 801c0aa:	f7f6 fa87 	bl	80125bc <memp_malloc>
 801c0ae:	4603      	mov	r3, r0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b082      	sub	sp, #8
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d106      	bne.n	801c0d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c0c2:	4b07      	ldr	r3, [pc, #28]	@ (801c0e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c0c4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c0c8:	4906      	ldr	r1, [pc, #24]	@ (801c0e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c0ca:	4807      	ldr	r0, [pc, #28]	@ (801c0e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c0cc:	f001 fa16 	bl	801d4fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c0d0:	6879      	ldr	r1, [r7, #4]
 801c0d2:	2005      	movs	r0, #5
 801c0d4:	f7f6 fae8 	bl	80126a8 <memp_free>
}
 801c0d8:	bf00      	nop
 801c0da:	3708      	adds	r7, #8
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	bd80      	pop	{r7, pc}
 801c0e0:	08022a6c 	.word	0x08022a6c
 801c0e4:	08022c24 	.word	0x08022c24
 801c0e8:	08022ab4 	.word	0x08022ab4

0801c0ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b084      	sub	sp, #16
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d106      	bne.n	801c10c <ipfrag_free_pbuf_custom+0x20>
 801c0fe:	4b11      	ldr	r3, [pc, #68]	@ (801c144 <ipfrag_free_pbuf_custom+0x58>)
 801c100:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c104:	4910      	ldr	r1, [pc, #64]	@ (801c148 <ipfrag_free_pbuf_custom+0x5c>)
 801c106:	4811      	ldr	r0, [pc, #68]	@ (801c14c <ipfrag_free_pbuf_custom+0x60>)
 801c108:	f001 f9f8 	bl	801d4fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c10c:	68fa      	ldr	r2, [r7, #12]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	429a      	cmp	r2, r3
 801c112:	d006      	beq.n	801c122 <ipfrag_free_pbuf_custom+0x36>
 801c114:	4b0b      	ldr	r3, [pc, #44]	@ (801c144 <ipfrag_free_pbuf_custom+0x58>)
 801c116:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c11a:	490d      	ldr	r1, [pc, #52]	@ (801c150 <ipfrag_free_pbuf_custom+0x64>)
 801c11c:	480b      	ldr	r0, [pc, #44]	@ (801c14c <ipfrag_free_pbuf_custom+0x60>)
 801c11e:	f001 f9ed 	bl	801d4fc <iprintf>
  if (pcr->original != NULL) {
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	695b      	ldr	r3, [r3, #20]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d004      	beq.n	801c134 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	695b      	ldr	r3, [r3, #20]
 801c12e:	4618      	mov	r0, r3
 801c130:	f7f7 f92c 	bl	801338c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c134:	68f8      	ldr	r0, [r7, #12]
 801c136:	f7ff ffbd 	bl	801c0b4 <ip_frag_free_pbuf_custom_ref>
}
 801c13a:	bf00      	nop
 801c13c:	3710      	adds	r7, #16
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}
 801c142:	bf00      	nop
 801c144:	08022a6c 	.word	0x08022a6c
 801c148:	08022c30 	.word	0x08022c30
 801c14c:	08022ab4 	.word	0x08022ab4
 801c150:	08022c3c 	.word	0x08022c3c

0801c154 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b094      	sub	sp, #80	@ 0x50
 801c158:	af02      	add	r7, sp, #8
 801c15a:	60f8      	str	r0, [r7, #12]
 801c15c:	60b9      	str	r1, [r7, #8]
 801c15e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c160:	2300      	movs	r3, #0
 801c162:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c166:	68bb      	ldr	r3, [r7, #8]
 801c168:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c16a:	3b14      	subs	r3, #20
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	da00      	bge.n	801c172 <ip4_frag+0x1e>
 801c170:	3307      	adds	r3, #7
 801c172:	10db      	asrs	r3, r3, #3
 801c174:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c176:	2314      	movs	r3, #20
 801c178:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c182:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	f003 030f 	and.w	r3, r3, #15
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	009b      	lsls	r3, r3, #2
 801c190:	b2db      	uxtb	r3, r3
 801c192:	2b14      	cmp	r3, #20
 801c194:	d002      	beq.n	801c19c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c196:	f06f 0305 	mvn.w	r3, #5
 801c19a:	e110      	b.n	801c3be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	895b      	ldrh	r3, [r3, #10]
 801c1a0:	2b13      	cmp	r3, #19
 801c1a2:	d809      	bhi.n	801c1b8 <ip4_frag+0x64>
 801c1a4:	4b88      	ldr	r3, [pc, #544]	@ (801c3c8 <ip4_frag+0x274>)
 801c1a6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c1aa:	4988      	ldr	r1, [pc, #544]	@ (801c3cc <ip4_frag+0x278>)
 801c1ac:	4888      	ldr	r0, [pc, #544]	@ (801c3d0 <ip4_frag+0x27c>)
 801c1ae:	f001 f9a5 	bl	801d4fc <iprintf>
 801c1b2:	f06f 0305 	mvn.w	r3, #5
 801c1b6:	e102      	b.n	801c3be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1ba:	88db      	ldrh	r3, [r3, #6]
 801c1bc:	b29b      	uxth	r3, r3
 801c1be:	4618      	mov	r0, r3
 801c1c0:	f7f5 fd24 	bl	8011c0c <lwip_htons>
 801c1c4:	4603      	mov	r3, r0
 801c1c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c1c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c1ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c1ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c1d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c1d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	891b      	ldrh	r3, [r3, #8]
 801c1de:	3b14      	subs	r3, #20
 801c1e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c1e4:	e0e1      	b.n	801c3aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c1e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c1e8:	00db      	lsls	r3, r3, #3
 801c1ea:	b29b      	uxth	r3, r3
 801c1ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c1f0:	4293      	cmp	r3, r2
 801c1f2:	bf28      	it	cs
 801c1f4:	4613      	movcs	r3, r2
 801c1f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c1f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c1fc:	2114      	movs	r1, #20
 801c1fe:	200e      	movs	r0, #14
 801c200:	f7f6 fde0 	bl	8012dc4 <pbuf_alloc>
 801c204:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c208:	2b00      	cmp	r3, #0
 801c20a:	f000 80d5 	beq.w	801c3b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c210:	895b      	ldrh	r3, [r3, #10]
 801c212:	2b13      	cmp	r3, #19
 801c214:	d806      	bhi.n	801c224 <ip4_frag+0xd0>
 801c216:	4b6c      	ldr	r3, [pc, #432]	@ (801c3c8 <ip4_frag+0x274>)
 801c218:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c21c:	496d      	ldr	r1, [pc, #436]	@ (801c3d4 <ip4_frag+0x280>)
 801c21e:	486c      	ldr	r0, [pc, #432]	@ (801c3d0 <ip4_frag+0x27c>)
 801c220:	f001 f96c 	bl	801d4fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c226:	685b      	ldr	r3, [r3, #4]
 801c228:	2214      	movs	r2, #20
 801c22a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c22c:	4618      	mov	r0, r3
 801c22e:	f001 fb18 	bl	801d862 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c234:	685b      	ldr	r3, [r3, #4]
 801c236:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c238:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c23a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c23e:	e064      	b.n	801c30a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	895a      	ldrh	r2, [r3, #10]
 801c244:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c246:	1ad3      	subs	r3, r2, r3
 801c248:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	895b      	ldrh	r3, [r3, #10]
 801c24e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c250:	429a      	cmp	r2, r3
 801c252:	d906      	bls.n	801c262 <ip4_frag+0x10e>
 801c254:	4b5c      	ldr	r3, [pc, #368]	@ (801c3c8 <ip4_frag+0x274>)
 801c256:	f240 322d 	movw	r2, #813	@ 0x32d
 801c25a:	495f      	ldr	r1, [pc, #380]	@ (801c3d8 <ip4_frag+0x284>)
 801c25c:	485c      	ldr	r0, [pc, #368]	@ (801c3d0 <ip4_frag+0x27c>)
 801c25e:	f001 f94d 	bl	801d4fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c262:	8bfa      	ldrh	r2, [r7, #30]
 801c264:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c268:	4293      	cmp	r3, r2
 801c26a:	bf28      	it	cs
 801c26c:	4613      	movcs	r3, r2
 801c26e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c272:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c276:	2b00      	cmp	r3, #0
 801c278:	d105      	bne.n	801c286 <ip4_frag+0x132>
        poff = 0;
 801c27a:	2300      	movs	r3, #0
 801c27c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	60fb      	str	r3, [r7, #12]
        continue;
 801c284:	e041      	b.n	801c30a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c286:	f7ff ff0d 	bl	801c0a4 <ip_frag_alloc_pbuf_custom_ref>
 801c28a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c28c:	69bb      	ldr	r3, [r7, #24]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d103      	bne.n	801c29a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c294:	f7f7 f87a 	bl	801338c <pbuf_free>
        goto memerr;
 801c298:	e08f      	b.n	801c3ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c29a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c2a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c2a2:	4413      	add	r3, r2
 801c2a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c2a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c2ac:	9201      	str	r2, [sp, #4]
 801c2ae:	9300      	str	r3, [sp, #0]
 801c2b0:	4603      	mov	r3, r0
 801c2b2:	2241      	movs	r2, #65	@ 0x41
 801c2b4:	2000      	movs	r0, #0
 801c2b6:	f7f6 feaf 	bl	8013018 <pbuf_alloced_custom>
 801c2ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c2bc:	697b      	ldr	r3, [r7, #20]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d106      	bne.n	801c2d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c2c2:	69b8      	ldr	r0, [r7, #24]
 801c2c4:	f7ff fef6 	bl	801c0b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c2c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c2ca:	f7f7 f85f 	bl	801338c <pbuf_free>
        goto memerr;
 801c2ce:	e074      	b.n	801c3ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c2d0:	68f8      	ldr	r0, [r7, #12]
 801c2d2:	f7f7 f901 	bl	80134d8 <pbuf_ref>
      pcr->original = p;
 801c2d6:	69bb      	ldr	r3, [r7, #24]
 801c2d8:	68fa      	ldr	r2, [r7, #12]
 801c2da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c2dc:	69bb      	ldr	r3, [r7, #24]
 801c2de:	4a3f      	ldr	r2, [pc, #252]	@ (801c3dc <ip4_frag+0x288>)
 801c2e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c2e2:	6979      	ldr	r1, [r7, #20]
 801c2e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c2e6:	f7f7 f91f 	bl	8013528 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c2ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c2ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c2f2:	1ad3      	subs	r3, r2, r3
 801c2f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c2f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d004      	beq.n	801c30a <ip4_frag+0x1b6>
        poff = 0;
 801c300:	2300      	movs	r3, #0
 801c302:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c30a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d196      	bne.n	801c240 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c312:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c318:	4413      	add	r3, r2
 801c31a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c31c:	68bb      	ldr	r3, [r7, #8]
 801c31e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c320:	f1a3 0213 	sub.w	r2, r3, #19
 801c324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c328:	429a      	cmp	r2, r3
 801c32a:	bfcc      	ite	gt
 801c32c:	2301      	movgt	r3, #1
 801c32e:	2300      	movle	r3, #0
 801c330:	b2db      	uxtb	r3, r3
 801c332:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c33c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c33e:	6a3b      	ldr	r3, [r7, #32]
 801c340:	2b00      	cmp	r3, #0
 801c342:	d002      	beq.n	801c34a <ip4_frag+0x1f6>
 801c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c346:	2b00      	cmp	r3, #0
 801c348:	d003      	beq.n	801c352 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c34a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c34c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c350:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c352:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c354:	4618      	mov	r0, r3
 801c356:	f7f5 fc59 	bl	8011c0c <lwip_htons>
 801c35a:	4603      	mov	r3, r0
 801c35c:	461a      	mov	r2, r3
 801c35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c360:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c362:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c364:	3314      	adds	r3, #20
 801c366:	b29b      	uxth	r3, r3
 801c368:	4618      	mov	r0, r3
 801c36a:	f7f5 fc4f 	bl	8011c0c <lwip_htons>
 801c36e:	4603      	mov	r3, r0
 801c370:	461a      	mov	r2, r3
 801c372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c374:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c378:	2200      	movs	r2, #0
 801c37a:	729a      	strb	r2, [r3, #10]
 801c37c:	2200      	movs	r2, #0
 801c37e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	695b      	ldr	r3, [r3, #20]
 801c384:	687a      	ldr	r2, [r7, #4]
 801c386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c388:	68b8      	ldr	r0, [r7, #8]
 801c38a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c38c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c38e:	f7f6 fffd 	bl	801338c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c392:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c396:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c398:	1ad3      	subs	r3, r2, r3
 801c39a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c39e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c3a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c3a4:	4413      	add	r3, r2
 801c3a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c3aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	f47f af19 	bne.w	801c1e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	e002      	b.n	801c3be <ip4_frag+0x26a>
      goto memerr;
 801c3b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c3ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c3be:	4618      	mov	r0, r3
 801c3c0:	3748      	adds	r7, #72	@ 0x48
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	bd80      	pop	{r7, pc}
 801c3c6:	bf00      	nop
 801c3c8:	08022a6c 	.word	0x08022a6c
 801c3cc:	08022c48 	.word	0x08022c48
 801c3d0:	08022ab4 	.word	0x08022ab4
 801c3d4:	08022c64 	.word	0x08022c64
 801c3d8:	08022c84 	.word	0x08022c84
 801c3dc:	0801c0ed 	.word	0x0801c0ed

0801c3e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b086      	sub	sp, #24
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
 801c3e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c3ea:	230e      	movs	r3, #14
 801c3ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	895b      	ldrh	r3, [r3, #10]
 801c3f2:	2b0e      	cmp	r3, #14
 801c3f4:	d96e      	bls.n	801c4d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	7bdb      	ldrb	r3, [r3, #15]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d106      	bne.n	801c40c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c3fe:	683b      	ldr	r3, [r7, #0]
 801c400:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c404:	3301      	adds	r3, #1
 801c406:	b2da      	uxtb	r2, r3
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	685b      	ldr	r3, [r3, #4]
 801c410:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	7b1a      	ldrb	r2, [r3, #12]
 801c416:	7b5b      	ldrb	r3, [r3, #13]
 801c418:	021b      	lsls	r3, r3, #8
 801c41a:	4313      	orrs	r3, r2
 801c41c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c41e:	693b      	ldr	r3, [r7, #16]
 801c420:	781b      	ldrb	r3, [r3, #0]
 801c422:	f003 0301 	and.w	r3, r3, #1
 801c426:	2b00      	cmp	r3, #0
 801c428:	d023      	beq.n	801c472 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c42a:	693b      	ldr	r3, [r7, #16]
 801c42c:	781b      	ldrb	r3, [r3, #0]
 801c42e:	2b01      	cmp	r3, #1
 801c430:	d10f      	bne.n	801c452 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c432:	693b      	ldr	r3, [r7, #16]
 801c434:	785b      	ldrb	r3, [r3, #1]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d11b      	bne.n	801c472 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c43a:	693b      	ldr	r3, [r7, #16]
 801c43c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c43e:	2b5e      	cmp	r3, #94	@ 0x5e
 801c440:	d117      	bne.n	801c472 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	7b5b      	ldrb	r3, [r3, #13]
 801c446:	f043 0310 	orr.w	r3, r3, #16
 801c44a:	b2da      	uxtb	r2, r3
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	735a      	strb	r2, [r3, #13]
 801c450:	e00f      	b.n	801c472 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c452:	693b      	ldr	r3, [r7, #16]
 801c454:	2206      	movs	r2, #6
 801c456:	4928      	ldr	r1, [pc, #160]	@ (801c4f8 <ethernet_input+0x118>)
 801c458:	4618      	mov	r0, r3
 801c45a:	f001 f8da 	bl	801d612 <memcmp>
 801c45e:	4603      	mov	r3, r0
 801c460:	2b00      	cmp	r3, #0
 801c462:	d106      	bne.n	801c472 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	7b5b      	ldrb	r3, [r3, #13]
 801c468:	f043 0308 	orr.w	r3, r3, #8
 801c46c:	b2da      	uxtb	r2, r3
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c472:	89fb      	ldrh	r3, [r7, #14]
 801c474:	2b08      	cmp	r3, #8
 801c476:	d003      	beq.n	801c480 <ethernet_input+0xa0>
 801c478:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c47c:	d014      	beq.n	801c4a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c47e:	e032      	b.n	801c4e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c480:	683b      	ldr	r3, [r7, #0]
 801c482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c486:	f003 0308 	and.w	r3, r3, #8
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d024      	beq.n	801c4d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c48e:	8afb      	ldrh	r3, [r7, #22]
 801c490:	4619      	mov	r1, r3
 801c492:	6878      	ldr	r0, [r7, #4]
 801c494:	f7f6 fef4 	bl	8013280 <pbuf_remove_header>
 801c498:	4603      	mov	r3, r0
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d11e      	bne.n	801c4dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c49e:	6839      	ldr	r1, [r7, #0]
 801c4a0:	6878      	ldr	r0, [r7, #4]
 801c4a2:	f7fe fe91 	bl	801b1c8 <ip4_input>
      break;
 801c4a6:	e013      	b.n	801c4d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c4ae:	f003 0308 	and.w	r3, r3, #8
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d014      	beq.n	801c4e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c4b6:	8afb      	ldrh	r3, [r7, #22]
 801c4b8:	4619      	mov	r1, r3
 801c4ba:	6878      	ldr	r0, [r7, #4]
 801c4bc:	f7f6 fee0 	bl	8013280 <pbuf_remove_header>
 801c4c0:	4603      	mov	r3, r0
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d10e      	bne.n	801c4e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c4c6:	6839      	ldr	r1, [r7, #0]
 801c4c8:	6878      	ldr	r0, [r7, #4]
 801c4ca:	f7fe f833 	bl	801a534 <etharp_input>
      break;
 801c4ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	e00c      	b.n	801c4ee <ethernet_input+0x10e>
    goto free_and_return;
 801c4d4:	bf00      	nop
 801c4d6:	e006      	b.n	801c4e6 <ethernet_input+0x106>
        goto free_and_return;
 801c4d8:	bf00      	nop
 801c4da:	e004      	b.n	801c4e6 <ethernet_input+0x106>
        goto free_and_return;
 801c4dc:	bf00      	nop
 801c4de:	e002      	b.n	801c4e6 <ethernet_input+0x106>
        goto free_and_return;
 801c4e0:	bf00      	nop
 801c4e2:	e000      	b.n	801c4e6 <ethernet_input+0x106>
        goto free_and_return;
 801c4e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c4e6:	6878      	ldr	r0, [r7, #4]
 801c4e8:	f7f6 ff50 	bl	801338c <pbuf_free>
  return ERR_OK;
 801c4ec:	2300      	movs	r3, #0
}
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	3718      	adds	r7, #24
 801c4f2:	46bd      	mov	sp, r7
 801c4f4:	bd80      	pop	{r7, pc}
 801c4f6:	bf00      	nop
 801c4f8:	08022eb0 	.word	0x08022eb0

0801c4fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b086      	sub	sp, #24
 801c500:	af00      	add	r7, sp, #0
 801c502:	60f8      	str	r0, [r7, #12]
 801c504:	60b9      	str	r1, [r7, #8]
 801c506:	607a      	str	r2, [r7, #4]
 801c508:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c50a:	8c3b      	ldrh	r3, [r7, #32]
 801c50c:	4618      	mov	r0, r3
 801c50e:	f7f5 fb7d 	bl	8011c0c <lwip_htons>
 801c512:	4603      	mov	r3, r0
 801c514:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c516:	210e      	movs	r1, #14
 801c518:	68b8      	ldr	r0, [r7, #8]
 801c51a:	f7f6 fea1 	bl	8013260 <pbuf_add_header>
 801c51e:	4603      	mov	r3, r0
 801c520:	2b00      	cmp	r3, #0
 801c522:	d125      	bne.n	801c570 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	685b      	ldr	r3, [r3, #4]
 801c528:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c52a:	693b      	ldr	r3, [r7, #16]
 801c52c:	8afa      	ldrh	r2, [r7, #22]
 801c52e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c530:	693b      	ldr	r3, [r7, #16]
 801c532:	2206      	movs	r2, #6
 801c534:	6839      	ldr	r1, [r7, #0]
 801c536:	4618      	mov	r0, r3
 801c538:	f001 f993 	bl	801d862 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c53c:	693b      	ldr	r3, [r7, #16]
 801c53e:	3306      	adds	r3, #6
 801c540:	2206      	movs	r2, #6
 801c542:	6879      	ldr	r1, [r7, #4]
 801c544:	4618      	mov	r0, r3
 801c546:	f001 f98c 	bl	801d862 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c550:	2b06      	cmp	r3, #6
 801c552:	d006      	beq.n	801c562 <ethernet_output+0x66>
 801c554:	4b0a      	ldr	r3, [pc, #40]	@ (801c580 <ethernet_output+0x84>)
 801c556:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c55a:	490a      	ldr	r1, [pc, #40]	@ (801c584 <ethernet_output+0x88>)
 801c55c:	480a      	ldr	r0, [pc, #40]	@ (801c588 <ethernet_output+0x8c>)
 801c55e:	f000 ffcd 	bl	801d4fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	699b      	ldr	r3, [r3, #24]
 801c566:	68b9      	ldr	r1, [r7, #8]
 801c568:	68f8      	ldr	r0, [r7, #12]
 801c56a:	4798      	blx	r3
 801c56c:	4603      	mov	r3, r0
 801c56e:	e002      	b.n	801c576 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c570:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c572:	f06f 0301 	mvn.w	r3, #1
}
 801c576:	4618      	mov	r0, r3
 801c578:	3718      	adds	r7, #24
 801c57a:	46bd      	mov	sp, r7
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	bf00      	nop
 801c580:	08022c94 	.word	0x08022c94
 801c584:	08022ccc 	.word	0x08022ccc
 801c588:	08022d00 	.word	0x08022d00

0801c58c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b086      	sub	sp, #24
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
 801c594:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	60bb      	str	r3, [r7, #8]
 801c59a:	2304      	movs	r3, #4
 801c59c:	60fb      	str	r3, [r7, #12]
 801c59e:	2300      	movs	r3, #0
 801c5a0:	613b      	str	r3, [r7, #16]
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c5a6:	f107 0308 	add.w	r3, r7, #8
 801c5aa:	2100      	movs	r1, #0
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7f2 fc0f 	bl	800edd0 <osMessageCreate>
 801c5b2:	4602      	mov	r2, r0
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d102      	bne.n	801c5c6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c4:	e000      	b.n	801c5c8 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c5c6:	2300      	movs	r3, #0
}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	3718      	adds	r7, #24
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}

0801c5d0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c5d0:	b580      	push	{r7, lr}
 801c5d2:	b084      	sub	sp, #16
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
 801c5d8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	6839      	ldr	r1, [r7, #0]
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	f7f2 fc1c 	bl	800ee20 <osMessagePut>
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d102      	bne.n	801c5f4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	73fb      	strb	r3, [r7, #15]
 801c5f2:	e001      	b.n	801c5f8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c5f4:	23ff      	movs	r3, #255	@ 0xff
 801c5f6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c5fc:	4618      	mov	r0, r3
 801c5fe:	3710      	adds	r7, #16
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}

0801c604 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c604:	b580      	push	{r7, lr}
 801c606:	b08c      	sub	sp, #48	@ 0x30
 801c608:	af00      	add	r7, sp, #0
 801c60a:	61f8      	str	r0, [r7, #28]
 801c60c:	61b9      	str	r1, [r7, #24]
 801c60e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c610:	f7f2 fa1c 	bl	800ea4c <osKernelSysTick>
 801c614:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c616:	697b      	ldr	r3, [r7, #20]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d017      	beq.n	801c64c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c61c:	69fb      	ldr	r3, [r7, #28]
 801c61e:	6819      	ldr	r1, [r3, #0]
 801c620:	f107 0320 	add.w	r3, r7, #32
 801c624:	697a      	ldr	r2, [r7, #20]
 801c626:	4618      	mov	r0, r3
 801c628:	f7f2 fc3a 	bl	800eea0 <osMessageGet>

    if(event.status == osEventMessage)
 801c62c:	6a3b      	ldr	r3, [r7, #32]
 801c62e:	2b10      	cmp	r3, #16
 801c630:	d109      	bne.n	801c646 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c634:	461a      	mov	r2, r3
 801c636:	69bb      	ldr	r3, [r7, #24]
 801c638:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c63a:	f7f2 fa07 	bl	800ea4c <osKernelSysTick>
 801c63e:	4602      	mov	r2, r0
 801c640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c642:	1ad3      	subs	r3, r2, r3
 801c644:	e019      	b.n	801c67a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c646:	f04f 33ff 	mov.w	r3, #4294967295
 801c64a:	e016      	b.n	801c67a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c64c:	69fb      	ldr	r3, [r7, #28]
 801c64e:	6819      	ldr	r1, [r3, #0]
 801c650:	463b      	mov	r3, r7
 801c652:	f04f 32ff 	mov.w	r2, #4294967295
 801c656:	4618      	mov	r0, r3
 801c658:	f7f2 fc22 	bl	800eea0 <osMessageGet>
 801c65c:	f107 0320 	add.w	r3, r7, #32
 801c660:	463a      	mov	r2, r7
 801c662:	ca07      	ldmia	r2, {r0, r1, r2}
 801c664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c66a:	461a      	mov	r2, r3
 801c66c:	69bb      	ldr	r3, [r7, #24]
 801c66e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c670:	f7f2 f9ec 	bl	800ea4c <osKernelSysTick>
 801c674:	4602      	mov	r2, r0
 801c676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c678:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c67a:	4618      	mov	r0, r3
 801c67c:	3730      	adds	r7, #48	@ 0x30
 801c67e:	46bd      	mov	sp, r7
 801c680:	bd80      	pop	{r7, pc}

0801c682 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c682:	b480      	push	{r7}
 801c684:	b083      	sub	sp, #12
 801c686:	af00      	add	r7, sp, #0
 801c688:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d101      	bne.n	801c696 <sys_mbox_valid+0x14>
    return 0;
 801c692:	2300      	movs	r3, #0
 801c694:	e000      	b.n	801c698 <sys_mbox_valid+0x16>
  else
    return 1;
 801c696:	2301      	movs	r3, #1
}
 801c698:	4618      	mov	r0, r3
 801c69a:	370c      	adds	r7, #12
 801c69c:	46bd      	mov	sp, r7
 801c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a2:	4770      	bx	lr

0801c6a4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c6a8:	4803      	ldr	r0, [pc, #12]	@ (801c6b8 <sys_init+0x14>)
 801c6aa:	f7f2 fa3f 	bl	800eb2c <osMutexCreate>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	4a02      	ldr	r2, [pc, #8]	@ (801c6bc <sys_init+0x18>)
 801c6b2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c6b4:	bf00      	nop
 801c6b6:	bd80      	pop	{r7, pc}
 801c6b8:	08022ec0 	.word	0x08022ec0
 801c6bc:	2000cb18 	.word	0x2000cb18

0801c6c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b084      	sub	sp, #16
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	60bb      	str	r3, [r7, #8]
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c6d0:	f107 0308 	add.w	r3, r7, #8
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	f7f2 fa29 	bl	800eb2c <osMutexCreate>
 801c6da:	4602      	mov	r2, r0
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d102      	bne.n	801c6ee <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ec:	e000      	b.n	801c6f0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c6ee:	2300      	movs	r3, #0
}
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	3710      	adds	r7, #16
 801c6f4:	46bd      	mov	sp, r7
 801c6f6:	bd80      	pop	{r7, pc}

0801c6f8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	f04f 31ff 	mov.w	r1, #4294967295
 801c708:	4618      	mov	r0, r3
 801c70a:	f7f2 fa27 	bl	800eb5c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c70e:	bf00      	nop
 801c710:	3708      	adds	r7, #8
 801c712:	46bd      	mov	sp, r7
 801c714:	bd80      	pop	{r7, pc}

0801c716 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c716:	b580      	push	{r7, lr}
 801c718:	b082      	sub	sp, #8
 801c71a:	af00      	add	r7, sp, #0
 801c71c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	4618      	mov	r0, r3
 801c724:	f7f2 fa68 	bl	800ebf8 <osMutexRelease>
}
 801c728:	bf00      	nop
 801c72a:	3708      	adds	r7, #8
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}

0801c730 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b08c      	sub	sp, #48	@ 0x30
 801c734:	af00      	add	r7, sp, #0
 801c736:	60f8      	str	r0, [r7, #12]
 801c738:	60b9      	str	r1, [r7, #8]
 801c73a:	607a      	str	r2, [r7, #4]
 801c73c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c73e:	f107 0314 	add.w	r3, r7, #20
 801c742:	2200      	movs	r2, #0
 801c744:	601a      	str	r2, [r3, #0]
 801c746:	605a      	str	r2, [r3, #4]
 801c748:	609a      	str	r2, [r3, #8]
 801c74a:	60da      	str	r2, [r3, #12]
 801c74c:	611a      	str	r2, [r3, #16]
 801c74e:	615a      	str	r2, [r3, #20]
 801c750:	619a      	str	r2, [r3, #24]
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	617b      	str	r3, [r7, #20]
 801c756:	68bb      	ldr	r3, [r7, #8]
 801c758:	61bb      	str	r3, [r7, #24]
 801c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c75c:	b21b      	sxth	r3, r3
 801c75e:	83bb      	strh	r3, [r7, #28]
 801c760:	683b      	ldr	r3, [r7, #0]
 801c762:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c764:	f107 0314 	add.w	r3, r7, #20
 801c768:	6879      	ldr	r1, [r7, #4]
 801c76a:	4618      	mov	r0, r3
 801c76c:	f7f2 f97e 	bl	800ea6c <osThreadCreate>
 801c770:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c772:	4618      	mov	r0, r3
 801c774:	3730      	adds	r7, #48	@ 0x30
 801c776:	46bd      	mov	sp, r7
 801c778:	bd80      	pop	{r7, pc}
	...

0801c77c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c77c:	b580      	push	{r7, lr}
 801c77e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c780:	4b04      	ldr	r3, [pc, #16]	@ (801c794 <sys_arch_protect+0x18>)
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	f04f 31ff 	mov.w	r1, #4294967295
 801c788:	4618      	mov	r0, r3
 801c78a:	f7f2 f9e7 	bl	800eb5c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c78e:	2301      	movs	r3, #1
}
 801c790:	4618      	mov	r0, r3
 801c792:	bd80      	pop	{r7, pc}
 801c794:	2000cb18 	.word	0x2000cb18

0801c798 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b082      	sub	sp, #8
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c7a0:	4b04      	ldr	r3, [pc, #16]	@ (801c7b4 <sys_arch_unprotect+0x1c>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7f2 fa27 	bl	800ebf8 <osMutexRelease>
}
 801c7aa:	bf00      	nop
 801c7ac:	3708      	adds	r7, #8
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	bf00      	nop
 801c7b4:	2000cb18 	.word	0x2000cb18

0801c7b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c7bc:	2200      	movs	r2, #0
 801c7be:	4912      	ldr	r1, [pc, #72]	@ (801c808 <MX_USB_DEVICE_Init+0x50>)
 801c7c0:	4812      	ldr	r0, [pc, #72]	@ (801c80c <MX_USB_DEVICE_Init+0x54>)
 801c7c2:	f7f0 fdf3 	bl	800d3ac <USBD_Init>
 801c7c6:	4603      	mov	r3, r0
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d001      	beq.n	801c7d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c7cc:	f7e5 f98a 	bl	8001ae4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c7d0:	490f      	ldr	r1, [pc, #60]	@ (801c810 <MX_USB_DEVICE_Init+0x58>)
 801c7d2:	480e      	ldr	r0, [pc, #56]	@ (801c80c <MX_USB_DEVICE_Init+0x54>)
 801c7d4:	f7f0 fe1a 	bl	800d40c <USBD_RegisterClass>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d001      	beq.n	801c7e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c7de:	f7e5 f981 	bl	8001ae4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c7e2:	490c      	ldr	r1, [pc, #48]	@ (801c814 <MX_USB_DEVICE_Init+0x5c>)
 801c7e4:	4809      	ldr	r0, [pc, #36]	@ (801c80c <MX_USB_DEVICE_Init+0x54>)
 801c7e6:	f7f0 fd11 	bl	800d20c <USBD_CDC_RegisterInterface>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d001      	beq.n	801c7f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c7f0:	f7e5 f978 	bl	8001ae4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c7f4:	4805      	ldr	r0, [pc, #20]	@ (801c80c <MX_USB_DEVICE_Init+0x54>)
 801c7f6:	f7f0 fe3f 	bl	800d478 <USBD_Start>
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d001      	beq.n	801c804 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c800:	f7e5 f970 	bl	8001ae4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c804:	bf00      	nop
 801c806:	bd80      	pop	{r7, pc}
 801c808:	200000bc 	.word	0x200000bc
 801c80c:	2000cb1c 	.word	0x2000cb1c
 801c810:	20000018 	.word	0x20000018
 801c814:	200000a8 	.word	0x200000a8

0801c818 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c81c:	2200      	movs	r2, #0
 801c81e:	4905      	ldr	r1, [pc, #20]	@ (801c834 <CDC_Init_FS+0x1c>)
 801c820:	4805      	ldr	r0, [pc, #20]	@ (801c838 <CDC_Init_FS+0x20>)
 801c822:	f7f0 fd0d 	bl	800d240 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c826:	4905      	ldr	r1, [pc, #20]	@ (801c83c <CDC_Init_FS+0x24>)
 801c828:	4803      	ldr	r0, [pc, #12]	@ (801c838 <CDC_Init_FS+0x20>)
 801c82a:	f7f0 fd2b 	bl	800d284 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c82e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c830:	4618      	mov	r0, r3
 801c832:	bd80      	pop	{r7, pc}
 801c834:	2000d5f8 	.word	0x2000d5f8
 801c838:	2000cb1c 	.word	0x2000cb1c
 801c83c:	2000cdf8 	.word	0x2000cdf8

0801c840 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c840:	b480      	push	{r7}
 801c842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c844:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c846:	4618      	mov	r0, r3
 801c848:	46bd      	mov	sp, r7
 801c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c84e:	4770      	bx	lr

0801c850 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c850:	b480      	push	{r7}
 801c852:	b083      	sub	sp, #12
 801c854:	af00      	add	r7, sp, #0
 801c856:	4603      	mov	r3, r0
 801c858:	6039      	str	r1, [r7, #0]
 801c85a:	71fb      	strb	r3, [r7, #7]
 801c85c:	4613      	mov	r3, r2
 801c85e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c860:	79fb      	ldrb	r3, [r7, #7]
 801c862:	2b23      	cmp	r3, #35	@ 0x23
 801c864:	d84a      	bhi.n	801c8fc <CDC_Control_FS+0xac>
 801c866:	a201      	add	r2, pc, #4	@ (adr r2, 801c86c <CDC_Control_FS+0x1c>)
 801c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c86c:	0801c8fd 	.word	0x0801c8fd
 801c870:	0801c8fd 	.word	0x0801c8fd
 801c874:	0801c8fd 	.word	0x0801c8fd
 801c878:	0801c8fd 	.word	0x0801c8fd
 801c87c:	0801c8fd 	.word	0x0801c8fd
 801c880:	0801c8fd 	.word	0x0801c8fd
 801c884:	0801c8fd 	.word	0x0801c8fd
 801c888:	0801c8fd 	.word	0x0801c8fd
 801c88c:	0801c8fd 	.word	0x0801c8fd
 801c890:	0801c8fd 	.word	0x0801c8fd
 801c894:	0801c8fd 	.word	0x0801c8fd
 801c898:	0801c8fd 	.word	0x0801c8fd
 801c89c:	0801c8fd 	.word	0x0801c8fd
 801c8a0:	0801c8fd 	.word	0x0801c8fd
 801c8a4:	0801c8fd 	.word	0x0801c8fd
 801c8a8:	0801c8fd 	.word	0x0801c8fd
 801c8ac:	0801c8fd 	.word	0x0801c8fd
 801c8b0:	0801c8fd 	.word	0x0801c8fd
 801c8b4:	0801c8fd 	.word	0x0801c8fd
 801c8b8:	0801c8fd 	.word	0x0801c8fd
 801c8bc:	0801c8fd 	.word	0x0801c8fd
 801c8c0:	0801c8fd 	.word	0x0801c8fd
 801c8c4:	0801c8fd 	.word	0x0801c8fd
 801c8c8:	0801c8fd 	.word	0x0801c8fd
 801c8cc:	0801c8fd 	.word	0x0801c8fd
 801c8d0:	0801c8fd 	.word	0x0801c8fd
 801c8d4:	0801c8fd 	.word	0x0801c8fd
 801c8d8:	0801c8fd 	.word	0x0801c8fd
 801c8dc:	0801c8fd 	.word	0x0801c8fd
 801c8e0:	0801c8fd 	.word	0x0801c8fd
 801c8e4:	0801c8fd 	.word	0x0801c8fd
 801c8e8:	0801c8fd 	.word	0x0801c8fd
 801c8ec:	0801c8fd 	.word	0x0801c8fd
 801c8f0:	0801c8fd 	.word	0x0801c8fd
 801c8f4:	0801c8fd 	.word	0x0801c8fd
 801c8f8:	0801c8fd 	.word	0x0801c8fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c8fc:	bf00      	nop
  }

  return (USBD_OK);
 801c8fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c900:	4618      	mov	r0, r3
 801c902:	370c      	adds	r7, #12
 801c904:	46bd      	mov	sp, r7
 801c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c90a:	4770      	bx	lr

0801c90c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c916:	6879      	ldr	r1, [r7, #4]
 801c918:	4805      	ldr	r0, [pc, #20]	@ (801c930 <CDC_Receive_FS+0x24>)
 801c91a:	f7f0 fcb3 	bl	800d284 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c91e:	4804      	ldr	r0, [pc, #16]	@ (801c930 <CDC_Receive_FS+0x24>)
 801c920:	f7f0 fd0e 	bl	800d340 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c924:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c926:	4618      	mov	r0, r3
 801c928:	3708      	adds	r7, #8
 801c92a:	46bd      	mov	sp, r7
 801c92c:	bd80      	pop	{r7, pc}
 801c92e:	bf00      	nop
 801c930:	2000cb1c 	.word	0x2000cb1c

0801c934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b084      	sub	sp, #16
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
 801c93c:	460b      	mov	r3, r1
 801c93e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801c940:	2300      	movs	r3, #0
 801c942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c944:	4b0d      	ldr	r3, [pc, #52]	@ (801c97c <CDC_Transmit_FS+0x48>)
 801c946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801c94a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c94c:	68bb      	ldr	r3, [r7, #8]
 801c94e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801c952:	2b00      	cmp	r3, #0
 801c954:	d001      	beq.n	801c95a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801c956:	2301      	movs	r3, #1
 801c958:	e00b      	b.n	801c972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c95a:	887b      	ldrh	r3, [r7, #2]
 801c95c:	461a      	mov	r2, r3
 801c95e:	6879      	ldr	r1, [r7, #4]
 801c960:	4806      	ldr	r0, [pc, #24]	@ (801c97c <CDC_Transmit_FS+0x48>)
 801c962:	f7f0 fc6d 	bl	800d240 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c966:	4805      	ldr	r0, [pc, #20]	@ (801c97c <CDC_Transmit_FS+0x48>)
 801c968:	f7f0 fcaa 	bl	800d2c0 <USBD_CDC_TransmitPacket>
 801c96c:	4603      	mov	r3, r0
 801c96e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801c970:	7bfb      	ldrb	r3, [r7, #15]
}
 801c972:	4618      	mov	r0, r3
 801c974:	3710      	adds	r7, #16
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}
 801c97a:	bf00      	nop
 801c97c:	2000cb1c 	.word	0x2000cb1c

0801c980 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c980:	b480      	push	{r7}
 801c982:	b087      	sub	sp, #28
 801c984:	af00      	add	r7, sp, #0
 801c986:	60f8      	str	r0, [r7, #12]
 801c988:	60b9      	str	r1, [r7, #8]
 801c98a:	4613      	mov	r3, r2
 801c98c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c98e:	2300      	movs	r3, #0
 801c990:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c996:	4618      	mov	r0, r3
 801c998:	371c      	adds	r7, #28
 801c99a:	46bd      	mov	sp, r7
 801c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a0:	4770      	bx	lr
	...

0801c9a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9a4:	b480      	push	{r7}
 801c9a6:	b083      	sub	sp, #12
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	6039      	str	r1, [r7, #0]
 801c9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c9b0:	683b      	ldr	r3, [r7, #0]
 801c9b2:	2212      	movs	r2, #18
 801c9b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c9b6:	4b03      	ldr	r3, [pc, #12]	@ (801c9c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c9b8:	4618      	mov	r0, r3
 801c9ba:	370c      	adds	r7, #12
 801c9bc:	46bd      	mov	sp, r7
 801c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c2:	4770      	bx	lr
 801c9c4:	200000d8 	.word	0x200000d8

0801c9c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9c8:	b480      	push	{r7}
 801c9ca:	b083      	sub	sp, #12
 801c9cc:	af00      	add	r7, sp, #0
 801c9ce:	4603      	mov	r3, r0
 801c9d0:	6039      	str	r1, [r7, #0]
 801c9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c9d4:	683b      	ldr	r3, [r7, #0]
 801c9d6:	2204      	movs	r2, #4
 801c9d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c9da:	4b03      	ldr	r3, [pc, #12]	@ (801c9e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c9dc:	4618      	mov	r0, r3
 801c9de:	370c      	adds	r7, #12
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e6:	4770      	bx	lr
 801c9e8:	200000ec 	.word	0x200000ec

0801c9ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b082      	sub	sp, #8
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	6039      	str	r1, [r7, #0]
 801c9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c9f8:	79fb      	ldrb	r3, [r7, #7]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d105      	bne.n	801ca0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c9fe:	683a      	ldr	r2, [r7, #0]
 801ca00:	4907      	ldr	r1, [pc, #28]	@ (801ca20 <USBD_FS_ProductStrDescriptor+0x34>)
 801ca02:	4808      	ldr	r0, [pc, #32]	@ (801ca24 <USBD_FS_ProductStrDescriptor+0x38>)
 801ca04:	f7f1 fefe 	bl	800e804 <USBD_GetString>
 801ca08:	e004      	b.n	801ca14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ca0a:	683a      	ldr	r2, [r7, #0]
 801ca0c:	4904      	ldr	r1, [pc, #16]	@ (801ca20 <USBD_FS_ProductStrDescriptor+0x34>)
 801ca0e:	4805      	ldr	r0, [pc, #20]	@ (801ca24 <USBD_FS_ProductStrDescriptor+0x38>)
 801ca10:	f7f1 fef8 	bl	800e804 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ca14:	4b02      	ldr	r3, [pc, #8]	@ (801ca20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ca16:	4618      	mov	r0, r3
 801ca18:	3708      	adds	r7, #8
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	bd80      	pop	{r7, pc}
 801ca1e:	bf00      	nop
 801ca20:	2000ddf8 	.word	0x2000ddf8
 801ca24:	08022d28 	.word	0x08022d28

0801ca28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b082      	sub	sp, #8
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	4603      	mov	r3, r0
 801ca30:	6039      	str	r1, [r7, #0]
 801ca32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ca34:	683a      	ldr	r2, [r7, #0]
 801ca36:	4904      	ldr	r1, [pc, #16]	@ (801ca48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ca38:	4804      	ldr	r0, [pc, #16]	@ (801ca4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ca3a:	f7f1 fee3 	bl	800e804 <USBD_GetString>
  return USBD_StrDesc;
 801ca3e:	4b02      	ldr	r3, [pc, #8]	@ (801ca48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ca40:	4618      	mov	r0, r3
 801ca42:	3708      	adds	r7, #8
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	2000ddf8 	.word	0x2000ddf8
 801ca4c:	08022d40 	.word	0x08022d40

0801ca50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	4603      	mov	r3, r0
 801ca58:	6039      	str	r1, [r7, #0]
 801ca5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ca5c:	683b      	ldr	r3, [r7, #0]
 801ca5e:	221a      	movs	r2, #26
 801ca60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ca62:	f000 f843 	bl	801caec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ca66:	4b02      	ldr	r3, [pc, #8]	@ (801ca70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ca68:	4618      	mov	r0, r3
 801ca6a:	3708      	adds	r7, #8
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	bd80      	pop	{r7, pc}
 801ca70:	200000f0 	.word	0x200000f0

0801ca74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b082      	sub	sp, #8
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	6039      	str	r1, [r7, #0]
 801ca7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ca80:	79fb      	ldrb	r3, [r7, #7]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d105      	bne.n	801ca92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ca86:	683a      	ldr	r2, [r7, #0]
 801ca88:	4907      	ldr	r1, [pc, #28]	@ (801caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ca8a:	4808      	ldr	r0, [pc, #32]	@ (801caac <USBD_FS_ConfigStrDescriptor+0x38>)
 801ca8c:	f7f1 feba 	bl	800e804 <USBD_GetString>
 801ca90:	e004      	b.n	801ca9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ca92:	683a      	ldr	r2, [r7, #0]
 801ca94:	4904      	ldr	r1, [pc, #16]	@ (801caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ca96:	4805      	ldr	r0, [pc, #20]	@ (801caac <USBD_FS_ConfigStrDescriptor+0x38>)
 801ca98:	f7f1 feb4 	bl	800e804 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ca9c:	4b02      	ldr	r3, [pc, #8]	@ (801caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ca9e:	4618      	mov	r0, r3
 801caa0:	3708      	adds	r7, #8
 801caa2:	46bd      	mov	sp, r7
 801caa4:	bd80      	pop	{r7, pc}
 801caa6:	bf00      	nop
 801caa8:	2000ddf8 	.word	0x2000ddf8
 801caac:	08022d54 	.word	0x08022d54

0801cab0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cab0:	b580      	push	{r7, lr}
 801cab2:	b082      	sub	sp, #8
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	4603      	mov	r3, r0
 801cab8:	6039      	str	r1, [r7, #0]
 801caba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cabc:	79fb      	ldrb	r3, [r7, #7]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d105      	bne.n	801cace <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cac2:	683a      	ldr	r2, [r7, #0]
 801cac4:	4907      	ldr	r1, [pc, #28]	@ (801cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cac6:	4808      	ldr	r0, [pc, #32]	@ (801cae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cac8:	f7f1 fe9c 	bl	800e804 <USBD_GetString>
 801cacc:	e004      	b.n	801cad8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cace:	683a      	ldr	r2, [r7, #0]
 801cad0:	4904      	ldr	r1, [pc, #16]	@ (801cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cad2:	4805      	ldr	r0, [pc, #20]	@ (801cae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cad4:	f7f1 fe96 	bl	800e804 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cad8:	4b02      	ldr	r3, [pc, #8]	@ (801cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cada:	4618      	mov	r0, r3
 801cadc:	3708      	adds	r7, #8
 801cade:	46bd      	mov	sp, r7
 801cae0:	bd80      	pop	{r7, pc}
 801cae2:	bf00      	nop
 801cae4:	2000ddf8 	.word	0x2000ddf8
 801cae8:	08022d60 	.word	0x08022d60

0801caec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b084      	sub	sp, #16
 801caf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801caf2:	4b0f      	ldr	r3, [pc, #60]	@ (801cb30 <Get_SerialNum+0x44>)
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801caf8:	4b0e      	ldr	r3, [pc, #56]	@ (801cb34 <Get_SerialNum+0x48>)
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cafe:	4b0e      	ldr	r3, [pc, #56]	@ (801cb38 <Get_SerialNum+0x4c>)
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cb04:	68fa      	ldr	r2, [r7, #12]
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	4413      	add	r3, r2
 801cb0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d009      	beq.n	801cb26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cb12:	2208      	movs	r2, #8
 801cb14:	4909      	ldr	r1, [pc, #36]	@ (801cb3c <Get_SerialNum+0x50>)
 801cb16:	68f8      	ldr	r0, [r7, #12]
 801cb18:	f000 f814 	bl	801cb44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cb1c:	2204      	movs	r2, #4
 801cb1e:	4908      	ldr	r1, [pc, #32]	@ (801cb40 <Get_SerialNum+0x54>)
 801cb20:	68b8      	ldr	r0, [r7, #8]
 801cb22:	f000 f80f 	bl	801cb44 <IntToUnicode>
  }
}
 801cb26:	bf00      	nop
 801cb28:	3710      	adds	r7, #16
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	bd80      	pop	{r7, pc}
 801cb2e:	bf00      	nop
 801cb30:	1fff7a10 	.word	0x1fff7a10
 801cb34:	1fff7a14 	.word	0x1fff7a14
 801cb38:	1fff7a18 	.word	0x1fff7a18
 801cb3c:	200000f2 	.word	0x200000f2
 801cb40:	20000102 	.word	0x20000102

0801cb44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cb44:	b480      	push	{r7}
 801cb46:	b087      	sub	sp, #28
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	60f8      	str	r0, [r7, #12]
 801cb4c:	60b9      	str	r1, [r7, #8]
 801cb4e:	4613      	mov	r3, r2
 801cb50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cb52:	2300      	movs	r3, #0
 801cb54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cb56:	2300      	movs	r3, #0
 801cb58:	75fb      	strb	r3, [r7, #23]
 801cb5a:	e027      	b.n	801cbac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	0f1b      	lsrs	r3, r3, #28
 801cb60:	2b09      	cmp	r3, #9
 801cb62:	d80b      	bhi.n	801cb7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	0f1b      	lsrs	r3, r3, #28
 801cb68:	b2da      	uxtb	r2, r3
 801cb6a:	7dfb      	ldrb	r3, [r7, #23]
 801cb6c:	005b      	lsls	r3, r3, #1
 801cb6e:	4619      	mov	r1, r3
 801cb70:	68bb      	ldr	r3, [r7, #8]
 801cb72:	440b      	add	r3, r1
 801cb74:	3230      	adds	r2, #48	@ 0x30
 801cb76:	b2d2      	uxtb	r2, r2
 801cb78:	701a      	strb	r2, [r3, #0]
 801cb7a:	e00a      	b.n	801cb92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	0f1b      	lsrs	r3, r3, #28
 801cb80:	b2da      	uxtb	r2, r3
 801cb82:	7dfb      	ldrb	r3, [r7, #23]
 801cb84:	005b      	lsls	r3, r3, #1
 801cb86:	4619      	mov	r1, r3
 801cb88:	68bb      	ldr	r3, [r7, #8]
 801cb8a:	440b      	add	r3, r1
 801cb8c:	3237      	adds	r2, #55	@ 0x37
 801cb8e:	b2d2      	uxtb	r2, r2
 801cb90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	011b      	lsls	r3, r3, #4
 801cb96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cb98:	7dfb      	ldrb	r3, [r7, #23]
 801cb9a:	005b      	lsls	r3, r3, #1
 801cb9c:	3301      	adds	r3, #1
 801cb9e:	68ba      	ldr	r2, [r7, #8]
 801cba0:	4413      	add	r3, r2
 801cba2:	2200      	movs	r2, #0
 801cba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cba6:	7dfb      	ldrb	r3, [r7, #23]
 801cba8:	3301      	adds	r3, #1
 801cbaa:	75fb      	strb	r3, [r7, #23]
 801cbac:	7dfa      	ldrb	r2, [r7, #23]
 801cbae:	79fb      	ldrb	r3, [r7, #7]
 801cbb0:	429a      	cmp	r2, r3
 801cbb2:	d3d3      	bcc.n	801cb5c <IntToUnicode+0x18>
  }
}
 801cbb4:	bf00      	nop
 801cbb6:	bf00      	nop
 801cbb8:	371c      	adds	r7, #28
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc0:	4770      	bx	lr
	...

0801cbc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cbc4:	b580      	push	{r7, lr}
 801cbc6:	b08a      	sub	sp, #40	@ 0x28
 801cbc8:	af00      	add	r7, sp, #0
 801cbca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cbcc:	f107 0314 	add.w	r3, r7, #20
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	601a      	str	r2, [r3, #0]
 801cbd4:	605a      	str	r2, [r3, #4]
 801cbd6:	609a      	str	r2, [r3, #8]
 801cbd8:	60da      	str	r2, [r3, #12]
 801cbda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cbe4:	d13a      	bne.n	801cc5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	613b      	str	r3, [r7, #16]
 801cbea:	4b1e      	ldr	r3, [pc, #120]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cbec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbee:	4a1d      	ldr	r2, [pc, #116]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cbf0:	f043 0301 	orr.w	r3, r3, #1
 801cbf4:	6313      	str	r3, [r2, #48]	@ 0x30
 801cbf6:	4b1b      	ldr	r3, [pc, #108]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cbf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbfa:	f003 0301 	and.w	r3, r3, #1
 801cbfe:	613b      	str	r3, [r7, #16]
 801cc00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801cc02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801cc06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cc08:	2302      	movs	r3, #2
 801cc0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc10:	2303      	movs	r3, #3
 801cc12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cc14:	230a      	movs	r3, #10
 801cc16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cc18:	f107 0314 	add.w	r3, r7, #20
 801cc1c:	4619      	mov	r1, r3
 801cc1e:	4812      	ldr	r0, [pc, #72]	@ (801cc68 <HAL_PCD_MspInit+0xa4>)
 801cc20:	f7e9 fb80 	bl	8006324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cc24:	4b0f      	ldr	r3, [pc, #60]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc28:	4a0e      	ldr	r2, [pc, #56]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cc2e:	6353      	str	r3, [r2, #52]	@ 0x34
 801cc30:	2300      	movs	r3, #0
 801cc32:	60fb      	str	r3, [r7, #12]
 801cc34:	4b0b      	ldr	r3, [pc, #44]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cc36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc38:	4a0a      	ldr	r2, [pc, #40]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cc3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801cc3e:	6453      	str	r3, [r2, #68]	@ 0x44
 801cc40:	4b08      	ldr	r3, [pc, #32]	@ (801cc64 <HAL_PCD_MspInit+0xa0>)
 801cc42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801cc48:	60fb      	str	r3, [r7, #12]
 801cc4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	2106      	movs	r1, #6
 801cc50:	2043      	movs	r0, #67	@ 0x43
 801cc52:	f7e7 fd8d 	bl	8004770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801cc56:	2043      	movs	r0, #67	@ 0x43
 801cc58:	f7e7 fda6 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801cc5c:	bf00      	nop
 801cc5e:	3728      	adds	r7, #40	@ 0x28
 801cc60:	46bd      	mov	sp, r7
 801cc62:	bd80      	pop	{r7, pc}
 801cc64:	40023800 	.word	0x40023800
 801cc68:	40020000 	.word	0x40020000

0801cc6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b082      	sub	sp, #8
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801cc80:	4619      	mov	r1, r3
 801cc82:	4610      	mov	r0, r2
 801cc84:	f7f0 fc45 	bl	800d512 <USBD_LL_SetupStage>
}
 801cc88:	bf00      	nop
 801cc8a:	3708      	adds	r7, #8
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}

0801cc90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
 801cc98:	460b      	mov	r3, r1
 801cc9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801cca2:	78fa      	ldrb	r2, [r7, #3]
 801cca4:	6879      	ldr	r1, [r7, #4]
 801cca6:	4613      	mov	r3, r2
 801cca8:	00db      	lsls	r3, r3, #3
 801ccaa:	4413      	add	r3, r2
 801ccac:	009b      	lsls	r3, r3, #2
 801ccae:	440b      	add	r3, r1
 801ccb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ccb4:	681a      	ldr	r2, [r3, #0]
 801ccb6:	78fb      	ldrb	r3, [r7, #3]
 801ccb8:	4619      	mov	r1, r3
 801ccba:	f7f0 fc7f 	bl	800d5bc <USBD_LL_DataOutStage>
}
 801ccbe:	bf00      	nop
 801ccc0:	3708      	adds	r7, #8
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bd80      	pop	{r7, pc}

0801ccc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ccc6:	b580      	push	{r7, lr}
 801ccc8:	b082      	sub	sp, #8
 801ccca:	af00      	add	r7, sp, #0
 801cccc:	6078      	str	r0, [r7, #4]
 801ccce:	460b      	mov	r3, r1
 801ccd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801ccd8:	78fa      	ldrb	r2, [r7, #3]
 801ccda:	6879      	ldr	r1, [r7, #4]
 801ccdc:	4613      	mov	r3, r2
 801ccde:	00db      	lsls	r3, r3, #3
 801cce0:	4413      	add	r3, r2
 801cce2:	009b      	lsls	r3, r3, #2
 801cce4:	440b      	add	r3, r1
 801cce6:	3320      	adds	r3, #32
 801cce8:	681a      	ldr	r2, [r3, #0]
 801ccea:	78fb      	ldrb	r3, [r7, #3]
 801ccec:	4619      	mov	r1, r3
 801ccee:	f7f0 fd21 	bl	800d734 <USBD_LL_DataInStage>
}
 801ccf2:	bf00      	nop
 801ccf4:	3708      	adds	r7, #8
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	bd80      	pop	{r7, pc}

0801ccfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ccfa:	b580      	push	{r7, lr}
 801ccfc:	b082      	sub	sp, #8
 801ccfe:	af00      	add	r7, sp, #0
 801cd00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7f0 fe65 	bl	800d9d8 <USBD_LL_SOF>
}
 801cd0e:	bf00      	nop
 801cd10:	3708      	adds	r7, #8
 801cd12:	46bd      	mov	sp, r7
 801cd14:	bd80      	pop	{r7, pc}

0801cd16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd16:	b580      	push	{r7, lr}
 801cd18:	b084      	sub	sp, #16
 801cd1a:	af00      	add	r7, sp, #0
 801cd1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cd1e:	2301      	movs	r3, #1
 801cd20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	79db      	ldrb	r3, [r3, #7]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d102      	bne.n	801cd30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	73fb      	strb	r3, [r7, #15]
 801cd2e:	e008      	b.n	801cd42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	79db      	ldrb	r3, [r3, #7]
 801cd34:	2b02      	cmp	r3, #2
 801cd36:	d102      	bne.n	801cd3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cd38:	2301      	movs	r3, #1
 801cd3a:	73fb      	strb	r3, [r7, #15]
 801cd3c:	e001      	b.n	801cd42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cd3e:	f7e4 fed1 	bl	8001ae4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cd48:	7bfa      	ldrb	r2, [r7, #15]
 801cd4a:	4611      	mov	r1, r2
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	f7f0 fdff 	bl	800d950 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cd58:	4618      	mov	r0, r3
 801cd5a:	f7f0 fda6 	bl	800d8aa <USBD_LL_Reset>
}
 801cd5e:	bf00      	nop
 801cd60:	3710      	adds	r7, #16
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}
	...

0801cd68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	b082      	sub	sp, #8
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cd76:	4618      	mov	r0, r3
 801cd78:	f7f0 fdfa 	bl	800d970 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	687a      	ldr	r2, [r7, #4]
 801cd88:	6812      	ldr	r2, [r2, #0]
 801cd8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cd8e:	f043 0301 	orr.w	r3, r3, #1
 801cd92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	7adb      	ldrb	r3, [r3, #11]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d005      	beq.n	801cda8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cd9c:	4b04      	ldr	r3, [pc, #16]	@ (801cdb0 <HAL_PCD_SuspendCallback+0x48>)
 801cd9e:	691b      	ldr	r3, [r3, #16]
 801cda0:	4a03      	ldr	r2, [pc, #12]	@ (801cdb0 <HAL_PCD_SuspendCallback+0x48>)
 801cda2:	f043 0306 	orr.w	r3, r3, #6
 801cda6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cda8:	bf00      	nop
 801cdaa:	3708      	adds	r7, #8
 801cdac:	46bd      	mov	sp, r7
 801cdae:	bd80      	pop	{r7, pc}
 801cdb0:	e000ed00 	.word	0xe000ed00

0801cdb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b082      	sub	sp, #8
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7f0 fdf0 	bl	800d9a8 <USBD_LL_Resume>
}
 801cdc8:	bf00      	nop
 801cdca:	3708      	adds	r7, #8
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b082      	sub	sp, #8
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	460b      	mov	r3, r1
 801cdda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cde2:	78fa      	ldrb	r2, [r7, #3]
 801cde4:	4611      	mov	r1, r2
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7f0 fe48 	bl	800da7c <USBD_LL_IsoOUTIncomplete>
}
 801cdec:	bf00      	nop
 801cdee:	3708      	adds	r7, #8
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}

0801cdf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b082      	sub	sp, #8
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
 801cdfc:	460b      	mov	r3, r1
 801cdfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ce06:	78fa      	ldrb	r2, [r7, #3]
 801ce08:	4611      	mov	r1, r2
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	f7f0 fe04 	bl	800da18 <USBD_LL_IsoINIncomplete>
}
 801ce10:	bf00      	nop
 801ce12:	3708      	adds	r7, #8
 801ce14:	46bd      	mov	sp, r7
 801ce16:	bd80      	pop	{r7, pc}

0801ce18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b082      	sub	sp, #8
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ce26:	4618      	mov	r0, r3
 801ce28:	f7f0 fe5a 	bl	800dae0 <USBD_LL_DevConnected>
}
 801ce2c:	bf00      	nop
 801ce2e:	3708      	adds	r7, #8
 801ce30:	46bd      	mov	sp, r7
 801ce32:	bd80      	pop	{r7, pc}

0801ce34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801ce42:	4618      	mov	r0, r3
 801ce44:	f7f0 fe57 	bl	800daf6 <USBD_LL_DevDisconnected>
}
 801ce48:	bf00      	nop
 801ce4a:	3708      	adds	r7, #8
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	bd80      	pop	{r7, pc}

0801ce50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ce50:	b580      	push	{r7, lr}
 801ce52:	b082      	sub	sp, #8
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	781b      	ldrb	r3, [r3, #0]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d13c      	bne.n	801ceda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801ce60:	4a20      	ldr	r2, [pc, #128]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	4a1e      	ldr	r2, [pc, #120]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ce70:	4b1c      	ldr	r3, [pc, #112]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801ce76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801ce78:	4b1a      	ldr	r3, [pc, #104]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce7a:	2204      	movs	r2, #4
 801ce7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ce7e:	4b19      	ldr	r3, [pc, #100]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce80:	2202      	movs	r2, #2
 801ce82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ce84:	4b17      	ldr	r3, [pc, #92]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce86:	2200      	movs	r2, #0
 801ce88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ce8a:	4b16      	ldr	r3, [pc, #88]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce8c:	2202      	movs	r2, #2
 801ce8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ce90:	4b14      	ldr	r3, [pc, #80]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce92:	2200      	movs	r2, #0
 801ce94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ce96:	4b13      	ldr	r3, [pc, #76]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce98:	2200      	movs	r2, #0
 801ce9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ce9c:	4b11      	ldr	r3, [pc, #68]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ce9e:	2200      	movs	r2, #0
 801cea0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801cea2:	4b10      	ldr	r3, [pc, #64]	@ (801cee4 <USBD_LL_Init+0x94>)
 801cea4:	2200      	movs	r2, #0
 801cea6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801cea8:	4b0e      	ldr	r3, [pc, #56]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ceaa:	2200      	movs	r2, #0
 801ceac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ceae:	480d      	ldr	r0, [pc, #52]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ceb0:	f7e9 fbed 	bl	800668e <HAL_PCD_Init>
 801ceb4:	4603      	mov	r3, r0
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d001      	beq.n	801cebe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801ceba:	f7e4 fe13 	bl	8001ae4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801cebe:	2180      	movs	r1, #128	@ 0x80
 801cec0:	4808      	ldr	r0, [pc, #32]	@ (801cee4 <USBD_LL_Init+0x94>)
 801cec2:	f7ea fe1a 	bl	8007afa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801cec6:	2240      	movs	r2, #64	@ 0x40
 801cec8:	2100      	movs	r1, #0
 801ceca:	4806      	ldr	r0, [pc, #24]	@ (801cee4 <USBD_LL_Init+0x94>)
 801cecc:	f7ea fdce 	bl	8007a6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ced0:	2280      	movs	r2, #128	@ 0x80
 801ced2:	2101      	movs	r1, #1
 801ced4:	4803      	ldr	r0, [pc, #12]	@ (801cee4 <USBD_LL_Init+0x94>)
 801ced6:	f7ea fdc9 	bl	8007a6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ceda:	2300      	movs	r3, #0
}
 801cedc:	4618      	mov	r0, r3
 801cede:	3708      	adds	r7, #8
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}
 801cee4:	2000dff8 	.word	0x2000dff8

0801cee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b084      	sub	sp, #16
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cef0:	2300      	movs	r3, #0
 801cef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cef4:	2300      	movs	r3, #0
 801cef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7e9 fcd4 	bl	80068ac <HAL_PCD_Start>
 801cf04:	4603      	mov	r3, r0
 801cf06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf08:	7bfb      	ldrb	r3, [r7, #15]
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f000 f942 	bl	801d194 <USBD_Get_USB_Status>
 801cf10:	4603      	mov	r3, r0
 801cf12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cf14:	7bbb      	ldrb	r3, [r7, #14]
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	3710      	adds	r7, #16
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	bd80      	pop	{r7, pc}

0801cf1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cf1e:	b580      	push	{r7, lr}
 801cf20:	b084      	sub	sp, #16
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	6078      	str	r0, [r7, #4]
 801cf26:	4608      	mov	r0, r1
 801cf28:	4611      	mov	r1, r2
 801cf2a:	461a      	mov	r2, r3
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	70fb      	strb	r3, [r7, #3]
 801cf30:	460b      	mov	r3, r1
 801cf32:	70bb      	strb	r3, [r7, #2]
 801cf34:	4613      	mov	r3, r2
 801cf36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf38:	2300      	movs	r3, #0
 801cf3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801cf46:	78bb      	ldrb	r3, [r7, #2]
 801cf48:	883a      	ldrh	r2, [r7, #0]
 801cf4a:	78f9      	ldrb	r1, [r7, #3]
 801cf4c:	f7ea f9a8 	bl	80072a0 <HAL_PCD_EP_Open>
 801cf50:	4603      	mov	r3, r0
 801cf52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf54:	7bfb      	ldrb	r3, [r7, #15]
 801cf56:	4618      	mov	r0, r3
 801cf58:	f000 f91c 	bl	801d194 <USBD_Get_USB_Status>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cf60:	7bbb      	ldrb	r3, [r7, #14]
}
 801cf62:	4618      	mov	r0, r3
 801cf64:	3710      	adds	r7, #16
 801cf66:	46bd      	mov	sp, r7
 801cf68:	bd80      	pop	{r7, pc}

0801cf6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cf6a:	b580      	push	{r7, lr}
 801cf6c:	b084      	sub	sp, #16
 801cf6e:	af00      	add	r7, sp, #0
 801cf70:	6078      	str	r0, [r7, #4]
 801cf72:	460b      	mov	r3, r1
 801cf74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf76:	2300      	movs	r3, #0
 801cf78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cf84:	78fa      	ldrb	r2, [r7, #3]
 801cf86:	4611      	mov	r1, r2
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ea f9f3 	bl	8007374 <HAL_PCD_EP_Close>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf92:	7bfb      	ldrb	r3, [r7, #15]
 801cf94:	4618      	mov	r0, r3
 801cf96:	f000 f8fd 	bl	801d194 <USBD_Get_USB_Status>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cf9e:	7bbb      	ldrb	r3, [r7, #14]
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	3710      	adds	r7, #16
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}

0801cfa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b084      	sub	sp, #16
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
 801cfb0:	460b      	mov	r3, r1
 801cfb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cfb4:	2300      	movs	r3, #0
 801cfb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cfb8:	2300      	movs	r3, #0
 801cfba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cfc2:	78fa      	ldrb	r2, [r7, #3]
 801cfc4:	4611      	mov	r1, r2
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	f7ea faab 	bl	8007522 <HAL_PCD_EP_SetStall>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cfd0:	7bfb      	ldrb	r3, [r7, #15]
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	f000 f8de 	bl	801d194 <USBD_Get_USB_Status>
 801cfd8:	4603      	mov	r3, r0
 801cfda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cfdc:	7bbb      	ldrb	r3, [r7, #14]
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	3710      	adds	r7, #16
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	bd80      	pop	{r7, pc}

0801cfe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cfe6:	b580      	push	{r7, lr}
 801cfe8:	b084      	sub	sp, #16
 801cfea:	af00      	add	r7, sp, #0
 801cfec:	6078      	str	r0, [r7, #4]
 801cfee:	460b      	mov	r3, r1
 801cff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cff2:	2300      	movs	r3, #0
 801cff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cff6:	2300      	movs	r3, #0
 801cff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d000:	78fa      	ldrb	r2, [r7, #3]
 801d002:	4611      	mov	r1, r2
 801d004:	4618      	mov	r0, r3
 801d006:	f7ea faef 	bl	80075e8 <HAL_PCD_EP_ClrStall>
 801d00a:	4603      	mov	r3, r0
 801d00c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d00e:	7bfb      	ldrb	r3, [r7, #15]
 801d010:	4618      	mov	r0, r3
 801d012:	f000 f8bf 	bl	801d194 <USBD_Get_USB_Status>
 801d016:	4603      	mov	r3, r0
 801d018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d01a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d01c:	4618      	mov	r0, r3
 801d01e:	3710      	adds	r7, #16
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}

0801d024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d024:	b480      	push	{r7}
 801d026:	b085      	sub	sp, #20
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
 801d02c:	460b      	mov	r3, r1
 801d02e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	da0b      	bge.n	801d058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d040:	78fb      	ldrb	r3, [r7, #3]
 801d042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d046:	68f9      	ldr	r1, [r7, #12]
 801d048:	4613      	mov	r3, r2
 801d04a:	00db      	lsls	r3, r3, #3
 801d04c:	4413      	add	r3, r2
 801d04e:	009b      	lsls	r3, r3, #2
 801d050:	440b      	add	r3, r1
 801d052:	3316      	adds	r3, #22
 801d054:	781b      	ldrb	r3, [r3, #0]
 801d056:	e00b      	b.n	801d070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d058:	78fb      	ldrb	r3, [r7, #3]
 801d05a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d05e:	68f9      	ldr	r1, [r7, #12]
 801d060:	4613      	mov	r3, r2
 801d062:	00db      	lsls	r3, r3, #3
 801d064:	4413      	add	r3, r2
 801d066:	009b      	lsls	r3, r3, #2
 801d068:	440b      	add	r3, r1
 801d06a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d06e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d070:	4618      	mov	r0, r3
 801d072:	3714      	adds	r7, #20
 801d074:	46bd      	mov	sp, r7
 801d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d07a:	4770      	bx	lr

0801d07c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b084      	sub	sp, #16
 801d080:	af00      	add	r7, sp, #0
 801d082:	6078      	str	r0, [r7, #4]
 801d084:	460b      	mov	r3, r1
 801d086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d088:	2300      	movs	r3, #0
 801d08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d08c:	2300      	movs	r3, #0
 801d08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d096:	78fa      	ldrb	r2, [r7, #3]
 801d098:	4611      	mov	r1, r2
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7ea f8dc 	bl	8007258 <HAL_PCD_SetAddress>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d0a4:	7bfb      	ldrb	r3, [r7, #15]
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	f000 f874 	bl	801d194 <USBD_Get_USB_Status>
 801d0ac:	4603      	mov	r3, r0
 801d0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	3710      	adds	r7, #16
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}

0801d0ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d0ba:	b580      	push	{r7, lr}
 801d0bc:	b086      	sub	sp, #24
 801d0be:	af00      	add	r7, sp, #0
 801d0c0:	60f8      	str	r0, [r7, #12]
 801d0c2:	607a      	str	r2, [r7, #4]
 801d0c4:	603b      	str	r3, [r7, #0]
 801d0c6:	460b      	mov	r3, r1
 801d0c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d0d8:	7af9      	ldrb	r1, [r7, #11]
 801d0da:	683b      	ldr	r3, [r7, #0]
 801d0dc:	687a      	ldr	r2, [r7, #4]
 801d0de:	f7ea f9e6 	bl	80074ae <HAL_PCD_EP_Transmit>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d0e6:	7dfb      	ldrb	r3, [r7, #23]
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f000 f853 	bl	801d194 <USBD_Get_USB_Status>
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d0f2:	7dbb      	ldrb	r3, [r7, #22]
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	3718      	adds	r7, #24
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}

0801d0fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b086      	sub	sp, #24
 801d100:	af00      	add	r7, sp, #0
 801d102:	60f8      	str	r0, [r7, #12]
 801d104:	607a      	str	r2, [r7, #4]
 801d106:	603b      	str	r3, [r7, #0]
 801d108:	460b      	mov	r3, r1
 801d10a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d10c:	2300      	movs	r3, #0
 801d10e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d110:	2300      	movs	r3, #0
 801d112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d11a:	7af9      	ldrb	r1, [r7, #11]
 801d11c:	683b      	ldr	r3, [r7, #0]
 801d11e:	687a      	ldr	r2, [r7, #4]
 801d120:	f7ea f972 	bl	8007408 <HAL_PCD_EP_Receive>
 801d124:	4603      	mov	r3, r0
 801d126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d128:	7dfb      	ldrb	r3, [r7, #23]
 801d12a:	4618      	mov	r0, r3
 801d12c:	f000 f832 	bl	801d194 <USBD_Get_USB_Status>
 801d130:	4603      	mov	r3, r0
 801d132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d134:	7dbb      	ldrb	r3, [r7, #22]
}
 801d136:	4618      	mov	r0, r3
 801d138:	3718      	adds	r7, #24
 801d13a:	46bd      	mov	sp, r7
 801d13c:	bd80      	pop	{r7, pc}

0801d13e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d13e:	b580      	push	{r7, lr}
 801d140:	b082      	sub	sp, #8
 801d142:	af00      	add	r7, sp, #0
 801d144:	6078      	str	r0, [r7, #4]
 801d146:	460b      	mov	r3, r1
 801d148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d150:	78fa      	ldrb	r2, [r7, #3]
 801d152:	4611      	mov	r1, r2
 801d154:	4618      	mov	r0, r3
 801d156:	f7ea f992 	bl	800747e <HAL_PCD_EP_GetRxCount>
 801d15a:	4603      	mov	r3, r0
}
 801d15c:	4618      	mov	r0, r3
 801d15e:	3708      	adds	r7, #8
 801d160:	46bd      	mov	sp, r7
 801d162:	bd80      	pop	{r7, pc}

0801d164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d164:	b480      	push	{r7}
 801d166:	b083      	sub	sp, #12
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d16c:	4b03      	ldr	r3, [pc, #12]	@ (801d17c <USBD_static_malloc+0x18>)
}
 801d16e:	4618      	mov	r0, r3
 801d170:	370c      	adds	r7, #12
 801d172:	46bd      	mov	sp, r7
 801d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d178:	4770      	bx	lr
 801d17a:	bf00      	nop
 801d17c:	2000e4dc 	.word	0x2000e4dc

0801d180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d180:	b480      	push	{r7}
 801d182:	b083      	sub	sp, #12
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]

}
 801d188:	bf00      	nop
 801d18a:	370c      	adds	r7, #12
 801d18c:	46bd      	mov	sp, r7
 801d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d192:	4770      	bx	lr

0801d194 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d194:	b480      	push	{r7}
 801d196:	b085      	sub	sp, #20
 801d198:	af00      	add	r7, sp, #0
 801d19a:	4603      	mov	r3, r0
 801d19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d19e:	2300      	movs	r3, #0
 801d1a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d1a2:	79fb      	ldrb	r3, [r7, #7]
 801d1a4:	2b03      	cmp	r3, #3
 801d1a6:	d817      	bhi.n	801d1d8 <USBD_Get_USB_Status+0x44>
 801d1a8:	a201      	add	r2, pc, #4	@ (adr r2, 801d1b0 <USBD_Get_USB_Status+0x1c>)
 801d1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1ae:	bf00      	nop
 801d1b0:	0801d1c1 	.word	0x0801d1c1
 801d1b4:	0801d1c7 	.word	0x0801d1c7
 801d1b8:	0801d1cd 	.word	0x0801d1cd
 801d1bc:	0801d1d3 	.word	0x0801d1d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	73fb      	strb	r3, [r7, #15]
    break;
 801d1c4:	e00b      	b.n	801d1de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d1c6:	2303      	movs	r3, #3
 801d1c8:	73fb      	strb	r3, [r7, #15]
    break;
 801d1ca:	e008      	b.n	801d1de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d1cc:	2301      	movs	r3, #1
 801d1ce:	73fb      	strb	r3, [r7, #15]
    break;
 801d1d0:	e005      	b.n	801d1de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d1d2:	2303      	movs	r3, #3
 801d1d4:	73fb      	strb	r3, [r7, #15]
    break;
 801d1d6:	e002      	b.n	801d1de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d1d8:	2303      	movs	r3, #3
 801d1da:	73fb      	strb	r3, [r7, #15]
    break;
 801d1dc:	bf00      	nop
  }
  return usb_status;
 801d1de:	7bfb      	ldrb	r3, [r7, #15]
}
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	3714      	adds	r7, #20
 801d1e4:	46bd      	mov	sp, r7
 801d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1ea:	4770      	bx	lr

0801d1ec <atoi>:
 801d1ec:	220a      	movs	r2, #10
 801d1ee:	2100      	movs	r1, #0
 801d1f0:	f000 b8b8 	b.w	801d364 <strtol>

0801d1f4 <rand>:
 801d1f4:	4b16      	ldr	r3, [pc, #88]	@ (801d250 <rand+0x5c>)
 801d1f6:	b510      	push	{r4, lr}
 801d1f8:	681c      	ldr	r4, [r3, #0]
 801d1fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d1fc:	b9b3      	cbnz	r3, 801d22c <rand+0x38>
 801d1fe:	2018      	movs	r0, #24
 801d200:	f000 fba6 	bl	801d950 <malloc>
 801d204:	4602      	mov	r2, r0
 801d206:	6320      	str	r0, [r4, #48]	@ 0x30
 801d208:	b920      	cbnz	r0, 801d214 <rand+0x20>
 801d20a:	4b12      	ldr	r3, [pc, #72]	@ (801d254 <rand+0x60>)
 801d20c:	4812      	ldr	r0, [pc, #72]	@ (801d258 <rand+0x64>)
 801d20e:	2152      	movs	r1, #82	@ 0x52
 801d210:	f000 fb36 	bl	801d880 <__assert_func>
 801d214:	4911      	ldr	r1, [pc, #68]	@ (801d25c <rand+0x68>)
 801d216:	4b12      	ldr	r3, [pc, #72]	@ (801d260 <rand+0x6c>)
 801d218:	e9c0 1300 	strd	r1, r3, [r0]
 801d21c:	4b11      	ldr	r3, [pc, #68]	@ (801d264 <rand+0x70>)
 801d21e:	6083      	str	r3, [r0, #8]
 801d220:	230b      	movs	r3, #11
 801d222:	8183      	strh	r3, [r0, #12]
 801d224:	2100      	movs	r1, #0
 801d226:	2001      	movs	r0, #1
 801d228:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d22c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d22e:	480e      	ldr	r0, [pc, #56]	@ (801d268 <rand+0x74>)
 801d230:	690b      	ldr	r3, [r1, #16]
 801d232:	694c      	ldr	r4, [r1, #20]
 801d234:	4a0d      	ldr	r2, [pc, #52]	@ (801d26c <rand+0x78>)
 801d236:	4358      	muls	r0, r3
 801d238:	fb02 0004 	mla	r0, r2, r4, r0
 801d23c:	fba3 3202 	umull	r3, r2, r3, r2
 801d240:	3301      	adds	r3, #1
 801d242:	eb40 0002 	adc.w	r0, r0, r2
 801d246:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d24a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d24e:	bd10      	pop	{r4, pc}
 801d250:	20000118 	.word	0x20000118
 801d254:	08022ec8 	.word	0x08022ec8
 801d258:	08022edf 	.word	0x08022edf
 801d25c:	abcd330e 	.word	0xabcd330e
 801d260:	e66d1234 	.word	0xe66d1234
 801d264:	0005deec 	.word	0x0005deec
 801d268:	5851f42d 	.word	0x5851f42d
 801d26c:	4c957f2d 	.word	0x4c957f2d

0801d270 <_strtol_l.isra.0>:
 801d270:	2b24      	cmp	r3, #36	@ 0x24
 801d272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d276:	4686      	mov	lr, r0
 801d278:	4690      	mov	r8, r2
 801d27a:	d801      	bhi.n	801d280 <_strtol_l.isra.0+0x10>
 801d27c:	2b01      	cmp	r3, #1
 801d27e:	d106      	bne.n	801d28e <_strtol_l.isra.0+0x1e>
 801d280:	f000 faba 	bl	801d7f8 <__errno>
 801d284:	2316      	movs	r3, #22
 801d286:	6003      	str	r3, [r0, #0]
 801d288:	2000      	movs	r0, #0
 801d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d28e:	4834      	ldr	r0, [pc, #208]	@ (801d360 <_strtol_l.isra.0+0xf0>)
 801d290:	460d      	mov	r5, r1
 801d292:	462a      	mov	r2, r5
 801d294:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d298:	5d06      	ldrb	r6, [r0, r4]
 801d29a:	f016 0608 	ands.w	r6, r6, #8
 801d29e:	d1f8      	bne.n	801d292 <_strtol_l.isra.0+0x22>
 801d2a0:	2c2d      	cmp	r4, #45	@ 0x2d
 801d2a2:	d110      	bne.n	801d2c6 <_strtol_l.isra.0+0x56>
 801d2a4:	782c      	ldrb	r4, [r5, #0]
 801d2a6:	2601      	movs	r6, #1
 801d2a8:	1c95      	adds	r5, r2, #2
 801d2aa:	f033 0210 	bics.w	r2, r3, #16
 801d2ae:	d115      	bne.n	801d2dc <_strtol_l.isra.0+0x6c>
 801d2b0:	2c30      	cmp	r4, #48	@ 0x30
 801d2b2:	d10d      	bne.n	801d2d0 <_strtol_l.isra.0+0x60>
 801d2b4:	782a      	ldrb	r2, [r5, #0]
 801d2b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d2ba:	2a58      	cmp	r2, #88	@ 0x58
 801d2bc:	d108      	bne.n	801d2d0 <_strtol_l.isra.0+0x60>
 801d2be:	786c      	ldrb	r4, [r5, #1]
 801d2c0:	3502      	adds	r5, #2
 801d2c2:	2310      	movs	r3, #16
 801d2c4:	e00a      	b.n	801d2dc <_strtol_l.isra.0+0x6c>
 801d2c6:	2c2b      	cmp	r4, #43	@ 0x2b
 801d2c8:	bf04      	itt	eq
 801d2ca:	782c      	ldrbeq	r4, [r5, #0]
 801d2cc:	1c95      	addeq	r5, r2, #2
 801d2ce:	e7ec      	b.n	801d2aa <_strtol_l.isra.0+0x3a>
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d1f6      	bne.n	801d2c2 <_strtol_l.isra.0+0x52>
 801d2d4:	2c30      	cmp	r4, #48	@ 0x30
 801d2d6:	bf14      	ite	ne
 801d2d8:	230a      	movne	r3, #10
 801d2da:	2308      	moveq	r3, #8
 801d2dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d2e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2e4:	2200      	movs	r2, #0
 801d2e6:	fbbc f9f3 	udiv	r9, ip, r3
 801d2ea:	4610      	mov	r0, r2
 801d2ec:	fb03 ca19 	mls	sl, r3, r9, ip
 801d2f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d2f4:	2f09      	cmp	r7, #9
 801d2f6:	d80f      	bhi.n	801d318 <_strtol_l.isra.0+0xa8>
 801d2f8:	463c      	mov	r4, r7
 801d2fa:	42a3      	cmp	r3, r4
 801d2fc:	dd1b      	ble.n	801d336 <_strtol_l.isra.0+0xc6>
 801d2fe:	1c57      	adds	r7, r2, #1
 801d300:	d007      	beq.n	801d312 <_strtol_l.isra.0+0xa2>
 801d302:	4581      	cmp	r9, r0
 801d304:	d314      	bcc.n	801d330 <_strtol_l.isra.0+0xc0>
 801d306:	d101      	bne.n	801d30c <_strtol_l.isra.0+0x9c>
 801d308:	45a2      	cmp	sl, r4
 801d30a:	db11      	blt.n	801d330 <_strtol_l.isra.0+0xc0>
 801d30c:	fb00 4003 	mla	r0, r0, r3, r4
 801d310:	2201      	movs	r2, #1
 801d312:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d316:	e7eb      	b.n	801d2f0 <_strtol_l.isra.0+0x80>
 801d318:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d31c:	2f19      	cmp	r7, #25
 801d31e:	d801      	bhi.n	801d324 <_strtol_l.isra.0+0xb4>
 801d320:	3c37      	subs	r4, #55	@ 0x37
 801d322:	e7ea      	b.n	801d2fa <_strtol_l.isra.0+0x8a>
 801d324:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d328:	2f19      	cmp	r7, #25
 801d32a:	d804      	bhi.n	801d336 <_strtol_l.isra.0+0xc6>
 801d32c:	3c57      	subs	r4, #87	@ 0x57
 801d32e:	e7e4      	b.n	801d2fa <_strtol_l.isra.0+0x8a>
 801d330:	f04f 32ff 	mov.w	r2, #4294967295
 801d334:	e7ed      	b.n	801d312 <_strtol_l.isra.0+0xa2>
 801d336:	1c53      	adds	r3, r2, #1
 801d338:	d108      	bne.n	801d34c <_strtol_l.isra.0+0xdc>
 801d33a:	2322      	movs	r3, #34	@ 0x22
 801d33c:	f8ce 3000 	str.w	r3, [lr]
 801d340:	4660      	mov	r0, ip
 801d342:	f1b8 0f00 	cmp.w	r8, #0
 801d346:	d0a0      	beq.n	801d28a <_strtol_l.isra.0+0x1a>
 801d348:	1e69      	subs	r1, r5, #1
 801d34a:	e006      	b.n	801d35a <_strtol_l.isra.0+0xea>
 801d34c:	b106      	cbz	r6, 801d350 <_strtol_l.isra.0+0xe0>
 801d34e:	4240      	negs	r0, r0
 801d350:	f1b8 0f00 	cmp.w	r8, #0
 801d354:	d099      	beq.n	801d28a <_strtol_l.isra.0+0x1a>
 801d356:	2a00      	cmp	r2, #0
 801d358:	d1f6      	bne.n	801d348 <_strtol_l.isra.0+0xd8>
 801d35a:	f8c8 1000 	str.w	r1, [r8]
 801d35e:	e794      	b.n	801d28a <_strtol_l.isra.0+0x1a>
 801d360:	08022fa7 	.word	0x08022fa7

0801d364 <strtol>:
 801d364:	4613      	mov	r3, r2
 801d366:	460a      	mov	r2, r1
 801d368:	4601      	mov	r1, r0
 801d36a:	4802      	ldr	r0, [pc, #8]	@ (801d374 <strtol+0x10>)
 801d36c:	6800      	ldr	r0, [r0, #0]
 801d36e:	f7ff bf7f 	b.w	801d270 <_strtol_l.isra.0>
 801d372:	bf00      	nop
 801d374:	20000118 	.word	0x20000118

0801d378 <std>:
 801d378:	2300      	movs	r3, #0
 801d37a:	b510      	push	{r4, lr}
 801d37c:	4604      	mov	r4, r0
 801d37e:	e9c0 3300 	strd	r3, r3, [r0]
 801d382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d386:	6083      	str	r3, [r0, #8]
 801d388:	8181      	strh	r1, [r0, #12]
 801d38a:	6643      	str	r3, [r0, #100]	@ 0x64
 801d38c:	81c2      	strh	r2, [r0, #14]
 801d38e:	6183      	str	r3, [r0, #24]
 801d390:	4619      	mov	r1, r3
 801d392:	2208      	movs	r2, #8
 801d394:	305c      	adds	r0, #92	@ 0x5c
 801d396:	f000 f966 	bl	801d666 <memset>
 801d39a:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d0 <std+0x58>)
 801d39c:	6263      	str	r3, [r4, #36]	@ 0x24
 801d39e:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d4 <std+0x5c>)
 801d3a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d3a2:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d8 <std+0x60>)
 801d3a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d3a6:	4b0d      	ldr	r3, [pc, #52]	@ (801d3dc <std+0x64>)
 801d3a8:	6323      	str	r3, [r4, #48]	@ 0x30
 801d3aa:	4b0d      	ldr	r3, [pc, #52]	@ (801d3e0 <std+0x68>)
 801d3ac:	6224      	str	r4, [r4, #32]
 801d3ae:	429c      	cmp	r4, r3
 801d3b0:	d006      	beq.n	801d3c0 <std+0x48>
 801d3b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d3b6:	4294      	cmp	r4, r2
 801d3b8:	d002      	beq.n	801d3c0 <std+0x48>
 801d3ba:	33d0      	adds	r3, #208	@ 0xd0
 801d3bc:	429c      	cmp	r4, r3
 801d3be:	d105      	bne.n	801d3cc <std+0x54>
 801d3c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3c8:	f000 ba40 	b.w	801d84c <__retarget_lock_init_recursive>
 801d3cc:	bd10      	pop	{r4, pc}
 801d3ce:	bf00      	nop
 801d3d0:	0801d58d 	.word	0x0801d58d
 801d3d4:	0801d5af 	.word	0x0801d5af
 801d3d8:	0801d5e7 	.word	0x0801d5e7
 801d3dc:	0801d60b 	.word	0x0801d60b
 801d3e0:	2000e6fc 	.word	0x2000e6fc

0801d3e4 <stdio_exit_handler>:
 801d3e4:	4a02      	ldr	r2, [pc, #8]	@ (801d3f0 <stdio_exit_handler+0xc>)
 801d3e6:	4903      	ldr	r1, [pc, #12]	@ (801d3f4 <stdio_exit_handler+0x10>)
 801d3e8:	4803      	ldr	r0, [pc, #12]	@ (801d3f8 <stdio_exit_handler+0x14>)
 801d3ea:	f000 b869 	b.w	801d4c0 <_fwalk_sglue>
 801d3ee:	bf00      	nop
 801d3f0:	2000010c 	.word	0x2000010c
 801d3f4:	0801e411 	.word	0x0801e411
 801d3f8:	2000011c 	.word	0x2000011c

0801d3fc <cleanup_stdio>:
 801d3fc:	6841      	ldr	r1, [r0, #4]
 801d3fe:	4b0c      	ldr	r3, [pc, #48]	@ (801d430 <cleanup_stdio+0x34>)
 801d400:	4299      	cmp	r1, r3
 801d402:	b510      	push	{r4, lr}
 801d404:	4604      	mov	r4, r0
 801d406:	d001      	beq.n	801d40c <cleanup_stdio+0x10>
 801d408:	f001 f802 	bl	801e410 <_fflush_r>
 801d40c:	68a1      	ldr	r1, [r4, #8]
 801d40e:	4b09      	ldr	r3, [pc, #36]	@ (801d434 <cleanup_stdio+0x38>)
 801d410:	4299      	cmp	r1, r3
 801d412:	d002      	beq.n	801d41a <cleanup_stdio+0x1e>
 801d414:	4620      	mov	r0, r4
 801d416:	f000 fffb 	bl	801e410 <_fflush_r>
 801d41a:	68e1      	ldr	r1, [r4, #12]
 801d41c:	4b06      	ldr	r3, [pc, #24]	@ (801d438 <cleanup_stdio+0x3c>)
 801d41e:	4299      	cmp	r1, r3
 801d420:	d004      	beq.n	801d42c <cleanup_stdio+0x30>
 801d422:	4620      	mov	r0, r4
 801d424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d428:	f000 bff2 	b.w	801e410 <_fflush_r>
 801d42c:	bd10      	pop	{r4, pc}
 801d42e:	bf00      	nop
 801d430:	2000e6fc 	.word	0x2000e6fc
 801d434:	2000e764 	.word	0x2000e764
 801d438:	2000e7cc 	.word	0x2000e7cc

0801d43c <global_stdio_init.part.0>:
 801d43c:	b510      	push	{r4, lr}
 801d43e:	4b0b      	ldr	r3, [pc, #44]	@ (801d46c <global_stdio_init.part.0+0x30>)
 801d440:	4c0b      	ldr	r4, [pc, #44]	@ (801d470 <global_stdio_init.part.0+0x34>)
 801d442:	4a0c      	ldr	r2, [pc, #48]	@ (801d474 <global_stdio_init.part.0+0x38>)
 801d444:	601a      	str	r2, [r3, #0]
 801d446:	4620      	mov	r0, r4
 801d448:	2200      	movs	r2, #0
 801d44a:	2104      	movs	r1, #4
 801d44c:	f7ff ff94 	bl	801d378 <std>
 801d450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d454:	2201      	movs	r2, #1
 801d456:	2109      	movs	r1, #9
 801d458:	f7ff ff8e 	bl	801d378 <std>
 801d45c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d460:	2202      	movs	r2, #2
 801d462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d466:	2112      	movs	r1, #18
 801d468:	f7ff bf86 	b.w	801d378 <std>
 801d46c:	2000e834 	.word	0x2000e834
 801d470:	2000e6fc 	.word	0x2000e6fc
 801d474:	0801d3e5 	.word	0x0801d3e5

0801d478 <__sfp_lock_acquire>:
 801d478:	4801      	ldr	r0, [pc, #4]	@ (801d480 <__sfp_lock_acquire+0x8>)
 801d47a:	f000 b9e8 	b.w	801d84e <__retarget_lock_acquire_recursive>
 801d47e:	bf00      	nop
 801d480:	2000e83d 	.word	0x2000e83d

0801d484 <__sfp_lock_release>:
 801d484:	4801      	ldr	r0, [pc, #4]	@ (801d48c <__sfp_lock_release+0x8>)
 801d486:	f000 b9e3 	b.w	801d850 <__retarget_lock_release_recursive>
 801d48a:	bf00      	nop
 801d48c:	2000e83d 	.word	0x2000e83d

0801d490 <__sinit>:
 801d490:	b510      	push	{r4, lr}
 801d492:	4604      	mov	r4, r0
 801d494:	f7ff fff0 	bl	801d478 <__sfp_lock_acquire>
 801d498:	6a23      	ldr	r3, [r4, #32]
 801d49a:	b11b      	cbz	r3, 801d4a4 <__sinit+0x14>
 801d49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4a0:	f7ff bff0 	b.w	801d484 <__sfp_lock_release>
 801d4a4:	4b04      	ldr	r3, [pc, #16]	@ (801d4b8 <__sinit+0x28>)
 801d4a6:	6223      	str	r3, [r4, #32]
 801d4a8:	4b04      	ldr	r3, [pc, #16]	@ (801d4bc <__sinit+0x2c>)
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d1f5      	bne.n	801d49c <__sinit+0xc>
 801d4b0:	f7ff ffc4 	bl	801d43c <global_stdio_init.part.0>
 801d4b4:	e7f2      	b.n	801d49c <__sinit+0xc>
 801d4b6:	bf00      	nop
 801d4b8:	0801d3fd 	.word	0x0801d3fd
 801d4bc:	2000e834 	.word	0x2000e834

0801d4c0 <_fwalk_sglue>:
 801d4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4c4:	4607      	mov	r7, r0
 801d4c6:	4688      	mov	r8, r1
 801d4c8:	4614      	mov	r4, r2
 801d4ca:	2600      	movs	r6, #0
 801d4cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d4d0:	f1b9 0901 	subs.w	r9, r9, #1
 801d4d4:	d505      	bpl.n	801d4e2 <_fwalk_sglue+0x22>
 801d4d6:	6824      	ldr	r4, [r4, #0]
 801d4d8:	2c00      	cmp	r4, #0
 801d4da:	d1f7      	bne.n	801d4cc <_fwalk_sglue+0xc>
 801d4dc:	4630      	mov	r0, r6
 801d4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4e2:	89ab      	ldrh	r3, [r5, #12]
 801d4e4:	2b01      	cmp	r3, #1
 801d4e6:	d907      	bls.n	801d4f8 <_fwalk_sglue+0x38>
 801d4e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d4ec:	3301      	adds	r3, #1
 801d4ee:	d003      	beq.n	801d4f8 <_fwalk_sglue+0x38>
 801d4f0:	4629      	mov	r1, r5
 801d4f2:	4638      	mov	r0, r7
 801d4f4:	47c0      	blx	r8
 801d4f6:	4306      	orrs	r6, r0
 801d4f8:	3568      	adds	r5, #104	@ 0x68
 801d4fa:	e7e9      	b.n	801d4d0 <_fwalk_sglue+0x10>

0801d4fc <iprintf>:
 801d4fc:	b40f      	push	{r0, r1, r2, r3}
 801d4fe:	b507      	push	{r0, r1, r2, lr}
 801d500:	4906      	ldr	r1, [pc, #24]	@ (801d51c <iprintf+0x20>)
 801d502:	ab04      	add	r3, sp, #16
 801d504:	6808      	ldr	r0, [r1, #0]
 801d506:	f853 2b04 	ldr.w	r2, [r3], #4
 801d50a:	6881      	ldr	r1, [r0, #8]
 801d50c:	9301      	str	r3, [sp, #4]
 801d50e:	f000 fc57 	bl	801ddc0 <_vfiprintf_r>
 801d512:	b003      	add	sp, #12
 801d514:	f85d eb04 	ldr.w	lr, [sp], #4
 801d518:	b004      	add	sp, #16
 801d51a:	4770      	bx	lr
 801d51c:	20000118 	.word	0x20000118

0801d520 <sniprintf>:
 801d520:	b40c      	push	{r2, r3}
 801d522:	b530      	push	{r4, r5, lr}
 801d524:	4b18      	ldr	r3, [pc, #96]	@ (801d588 <sniprintf+0x68>)
 801d526:	1e0c      	subs	r4, r1, #0
 801d528:	681d      	ldr	r5, [r3, #0]
 801d52a:	b09d      	sub	sp, #116	@ 0x74
 801d52c:	da08      	bge.n	801d540 <sniprintf+0x20>
 801d52e:	238b      	movs	r3, #139	@ 0x8b
 801d530:	602b      	str	r3, [r5, #0]
 801d532:	f04f 30ff 	mov.w	r0, #4294967295
 801d536:	b01d      	add	sp, #116	@ 0x74
 801d538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d53c:	b002      	add	sp, #8
 801d53e:	4770      	bx	lr
 801d540:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d544:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d548:	f04f 0300 	mov.w	r3, #0
 801d54c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d54e:	bf14      	ite	ne
 801d550:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d554:	4623      	moveq	r3, r4
 801d556:	9304      	str	r3, [sp, #16]
 801d558:	9307      	str	r3, [sp, #28]
 801d55a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d55e:	9002      	str	r0, [sp, #8]
 801d560:	9006      	str	r0, [sp, #24]
 801d562:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d566:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d568:	ab21      	add	r3, sp, #132	@ 0x84
 801d56a:	a902      	add	r1, sp, #8
 801d56c:	4628      	mov	r0, r5
 801d56e:	9301      	str	r3, [sp, #4]
 801d570:	f000 fb00 	bl	801db74 <_svfiprintf_r>
 801d574:	1c43      	adds	r3, r0, #1
 801d576:	bfbc      	itt	lt
 801d578:	238b      	movlt	r3, #139	@ 0x8b
 801d57a:	602b      	strlt	r3, [r5, #0]
 801d57c:	2c00      	cmp	r4, #0
 801d57e:	d0da      	beq.n	801d536 <sniprintf+0x16>
 801d580:	9b02      	ldr	r3, [sp, #8]
 801d582:	2200      	movs	r2, #0
 801d584:	701a      	strb	r2, [r3, #0]
 801d586:	e7d6      	b.n	801d536 <sniprintf+0x16>
 801d588:	20000118 	.word	0x20000118

0801d58c <__sread>:
 801d58c:	b510      	push	{r4, lr}
 801d58e:	460c      	mov	r4, r1
 801d590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d594:	f000 f90c 	bl	801d7b0 <_read_r>
 801d598:	2800      	cmp	r0, #0
 801d59a:	bfab      	itete	ge
 801d59c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d59e:	89a3      	ldrhlt	r3, [r4, #12]
 801d5a0:	181b      	addge	r3, r3, r0
 801d5a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d5a6:	bfac      	ite	ge
 801d5a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d5aa:	81a3      	strhlt	r3, [r4, #12]
 801d5ac:	bd10      	pop	{r4, pc}

0801d5ae <__swrite>:
 801d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b2:	461f      	mov	r7, r3
 801d5b4:	898b      	ldrh	r3, [r1, #12]
 801d5b6:	05db      	lsls	r3, r3, #23
 801d5b8:	4605      	mov	r5, r0
 801d5ba:	460c      	mov	r4, r1
 801d5bc:	4616      	mov	r6, r2
 801d5be:	d505      	bpl.n	801d5cc <__swrite+0x1e>
 801d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5c4:	2302      	movs	r3, #2
 801d5c6:	2200      	movs	r2, #0
 801d5c8:	f000 f8e0 	bl	801d78c <_lseek_r>
 801d5cc:	89a3      	ldrh	r3, [r4, #12]
 801d5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d5d6:	81a3      	strh	r3, [r4, #12]
 801d5d8:	4632      	mov	r2, r6
 801d5da:	463b      	mov	r3, r7
 801d5dc:	4628      	mov	r0, r5
 801d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5e2:	f000 b8f7 	b.w	801d7d4 <_write_r>

0801d5e6 <__sseek>:
 801d5e6:	b510      	push	{r4, lr}
 801d5e8:	460c      	mov	r4, r1
 801d5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5ee:	f000 f8cd 	bl	801d78c <_lseek_r>
 801d5f2:	1c43      	adds	r3, r0, #1
 801d5f4:	89a3      	ldrh	r3, [r4, #12]
 801d5f6:	bf15      	itete	ne
 801d5f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d5fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d5fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d602:	81a3      	strheq	r3, [r4, #12]
 801d604:	bf18      	it	ne
 801d606:	81a3      	strhne	r3, [r4, #12]
 801d608:	bd10      	pop	{r4, pc}

0801d60a <__sclose>:
 801d60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d60e:	f000 b84f 	b.w	801d6b0 <_close_r>

0801d612 <memcmp>:
 801d612:	b510      	push	{r4, lr}
 801d614:	3901      	subs	r1, #1
 801d616:	4402      	add	r2, r0
 801d618:	4290      	cmp	r0, r2
 801d61a:	d101      	bne.n	801d620 <memcmp+0xe>
 801d61c:	2000      	movs	r0, #0
 801d61e:	e005      	b.n	801d62c <memcmp+0x1a>
 801d620:	7803      	ldrb	r3, [r0, #0]
 801d622:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d626:	42a3      	cmp	r3, r4
 801d628:	d001      	beq.n	801d62e <memcmp+0x1c>
 801d62a:	1b18      	subs	r0, r3, r4
 801d62c:	bd10      	pop	{r4, pc}
 801d62e:	3001      	adds	r0, #1
 801d630:	e7f2      	b.n	801d618 <memcmp+0x6>

0801d632 <memmove>:
 801d632:	4288      	cmp	r0, r1
 801d634:	b510      	push	{r4, lr}
 801d636:	eb01 0402 	add.w	r4, r1, r2
 801d63a:	d902      	bls.n	801d642 <memmove+0x10>
 801d63c:	4284      	cmp	r4, r0
 801d63e:	4623      	mov	r3, r4
 801d640:	d807      	bhi.n	801d652 <memmove+0x20>
 801d642:	1e43      	subs	r3, r0, #1
 801d644:	42a1      	cmp	r1, r4
 801d646:	d008      	beq.n	801d65a <memmove+0x28>
 801d648:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d64c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d650:	e7f8      	b.n	801d644 <memmove+0x12>
 801d652:	4402      	add	r2, r0
 801d654:	4601      	mov	r1, r0
 801d656:	428a      	cmp	r2, r1
 801d658:	d100      	bne.n	801d65c <memmove+0x2a>
 801d65a:	bd10      	pop	{r4, pc}
 801d65c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d660:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d664:	e7f7      	b.n	801d656 <memmove+0x24>

0801d666 <memset>:
 801d666:	4402      	add	r2, r0
 801d668:	4603      	mov	r3, r0
 801d66a:	4293      	cmp	r3, r2
 801d66c:	d100      	bne.n	801d670 <memset+0xa>
 801d66e:	4770      	bx	lr
 801d670:	f803 1b01 	strb.w	r1, [r3], #1
 801d674:	e7f9      	b.n	801d66a <memset+0x4>

0801d676 <strcat>:
 801d676:	b510      	push	{r4, lr}
 801d678:	4602      	mov	r2, r0
 801d67a:	7814      	ldrb	r4, [r2, #0]
 801d67c:	4613      	mov	r3, r2
 801d67e:	3201      	adds	r2, #1
 801d680:	2c00      	cmp	r4, #0
 801d682:	d1fa      	bne.n	801d67a <strcat+0x4>
 801d684:	3b01      	subs	r3, #1
 801d686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d68a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d68e:	2a00      	cmp	r2, #0
 801d690:	d1f9      	bne.n	801d686 <strcat+0x10>
 801d692:	bd10      	pop	{r4, pc}

0801d694 <strchr>:
 801d694:	b2c9      	uxtb	r1, r1
 801d696:	4603      	mov	r3, r0
 801d698:	4618      	mov	r0, r3
 801d69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d69e:	b112      	cbz	r2, 801d6a6 <strchr+0x12>
 801d6a0:	428a      	cmp	r2, r1
 801d6a2:	d1f9      	bne.n	801d698 <strchr+0x4>
 801d6a4:	4770      	bx	lr
 801d6a6:	2900      	cmp	r1, #0
 801d6a8:	bf18      	it	ne
 801d6aa:	2000      	movne	r0, #0
 801d6ac:	4770      	bx	lr
	...

0801d6b0 <_close_r>:
 801d6b0:	b538      	push	{r3, r4, r5, lr}
 801d6b2:	4d06      	ldr	r5, [pc, #24]	@ (801d6cc <_close_r+0x1c>)
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	4604      	mov	r4, r0
 801d6b8:	4608      	mov	r0, r1
 801d6ba:	602b      	str	r3, [r5, #0]
 801d6bc:	f7e6 faee 	bl	8003c9c <_close>
 801d6c0:	1c43      	adds	r3, r0, #1
 801d6c2:	d102      	bne.n	801d6ca <_close_r+0x1a>
 801d6c4:	682b      	ldr	r3, [r5, #0]
 801d6c6:	b103      	cbz	r3, 801d6ca <_close_r+0x1a>
 801d6c8:	6023      	str	r3, [r4, #0]
 801d6ca:	bd38      	pop	{r3, r4, r5, pc}
 801d6cc:	2000e838 	.word	0x2000e838

0801d6d0 <_reclaim_reent>:
 801d6d0:	4b2d      	ldr	r3, [pc, #180]	@ (801d788 <_reclaim_reent+0xb8>)
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	4283      	cmp	r3, r0
 801d6d6:	b570      	push	{r4, r5, r6, lr}
 801d6d8:	4604      	mov	r4, r0
 801d6da:	d053      	beq.n	801d784 <_reclaim_reent+0xb4>
 801d6dc:	69c3      	ldr	r3, [r0, #28]
 801d6de:	b31b      	cbz	r3, 801d728 <_reclaim_reent+0x58>
 801d6e0:	68db      	ldr	r3, [r3, #12]
 801d6e2:	b163      	cbz	r3, 801d6fe <_reclaim_reent+0x2e>
 801d6e4:	2500      	movs	r5, #0
 801d6e6:	69e3      	ldr	r3, [r4, #28]
 801d6e8:	68db      	ldr	r3, [r3, #12]
 801d6ea:	5959      	ldr	r1, [r3, r5]
 801d6ec:	b9b1      	cbnz	r1, 801d71c <_reclaim_reent+0x4c>
 801d6ee:	3504      	adds	r5, #4
 801d6f0:	2d80      	cmp	r5, #128	@ 0x80
 801d6f2:	d1f8      	bne.n	801d6e6 <_reclaim_reent+0x16>
 801d6f4:	69e3      	ldr	r3, [r4, #28]
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	68d9      	ldr	r1, [r3, #12]
 801d6fa:	f000 f8df 	bl	801d8bc <_free_r>
 801d6fe:	69e3      	ldr	r3, [r4, #28]
 801d700:	6819      	ldr	r1, [r3, #0]
 801d702:	b111      	cbz	r1, 801d70a <_reclaim_reent+0x3a>
 801d704:	4620      	mov	r0, r4
 801d706:	f000 f8d9 	bl	801d8bc <_free_r>
 801d70a:	69e3      	ldr	r3, [r4, #28]
 801d70c:	689d      	ldr	r5, [r3, #8]
 801d70e:	b15d      	cbz	r5, 801d728 <_reclaim_reent+0x58>
 801d710:	4629      	mov	r1, r5
 801d712:	4620      	mov	r0, r4
 801d714:	682d      	ldr	r5, [r5, #0]
 801d716:	f000 f8d1 	bl	801d8bc <_free_r>
 801d71a:	e7f8      	b.n	801d70e <_reclaim_reent+0x3e>
 801d71c:	680e      	ldr	r6, [r1, #0]
 801d71e:	4620      	mov	r0, r4
 801d720:	f000 f8cc 	bl	801d8bc <_free_r>
 801d724:	4631      	mov	r1, r6
 801d726:	e7e1      	b.n	801d6ec <_reclaim_reent+0x1c>
 801d728:	6961      	ldr	r1, [r4, #20]
 801d72a:	b111      	cbz	r1, 801d732 <_reclaim_reent+0x62>
 801d72c:	4620      	mov	r0, r4
 801d72e:	f000 f8c5 	bl	801d8bc <_free_r>
 801d732:	69e1      	ldr	r1, [r4, #28]
 801d734:	b111      	cbz	r1, 801d73c <_reclaim_reent+0x6c>
 801d736:	4620      	mov	r0, r4
 801d738:	f000 f8c0 	bl	801d8bc <_free_r>
 801d73c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d73e:	b111      	cbz	r1, 801d746 <_reclaim_reent+0x76>
 801d740:	4620      	mov	r0, r4
 801d742:	f000 f8bb 	bl	801d8bc <_free_r>
 801d746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d748:	b111      	cbz	r1, 801d750 <_reclaim_reent+0x80>
 801d74a:	4620      	mov	r0, r4
 801d74c:	f000 f8b6 	bl	801d8bc <_free_r>
 801d750:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d752:	b111      	cbz	r1, 801d75a <_reclaim_reent+0x8a>
 801d754:	4620      	mov	r0, r4
 801d756:	f000 f8b1 	bl	801d8bc <_free_r>
 801d75a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d75c:	b111      	cbz	r1, 801d764 <_reclaim_reent+0x94>
 801d75e:	4620      	mov	r0, r4
 801d760:	f000 f8ac 	bl	801d8bc <_free_r>
 801d764:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d766:	b111      	cbz	r1, 801d76e <_reclaim_reent+0x9e>
 801d768:	4620      	mov	r0, r4
 801d76a:	f000 f8a7 	bl	801d8bc <_free_r>
 801d76e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d770:	b111      	cbz	r1, 801d778 <_reclaim_reent+0xa8>
 801d772:	4620      	mov	r0, r4
 801d774:	f000 f8a2 	bl	801d8bc <_free_r>
 801d778:	6a23      	ldr	r3, [r4, #32]
 801d77a:	b11b      	cbz	r3, 801d784 <_reclaim_reent+0xb4>
 801d77c:	4620      	mov	r0, r4
 801d77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d782:	4718      	bx	r3
 801d784:	bd70      	pop	{r4, r5, r6, pc}
 801d786:	bf00      	nop
 801d788:	20000118 	.word	0x20000118

0801d78c <_lseek_r>:
 801d78c:	b538      	push	{r3, r4, r5, lr}
 801d78e:	4d07      	ldr	r5, [pc, #28]	@ (801d7ac <_lseek_r+0x20>)
 801d790:	4604      	mov	r4, r0
 801d792:	4608      	mov	r0, r1
 801d794:	4611      	mov	r1, r2
 801d796:	2200      	movs	r2, #0
 801d798:	602a      	str	r2, [r5, #0]
 801d79a:	461a      	mov	r2, r3
 801d79c:	f7e6 faa5 	bl	8003cea <_lseek>
 801d7a0:	1c43      	adds	r3, r0, #1
 801d7a2:	d102      	bne.n	801d7aa <_lseek_r+0x1e>
 801d7a4:	682b      	ldr	r3, [r5, #0]
 801d7a6:	b103      	cbz	r3, 801d7aa <_lseek_r+0x1e>
 801d7a8:	6023      	str	r3, [r4, #0]
 801d7aa:	bd38      	pop	{r3, r4, r5, pc}
 801d7ac:	2000e838 	.word	0x2000e838

0801d7b0 <_read_r>:
 801d7b0:	b538      	push	{r3, r4, r5, lr}
 801d7b2:	4d07      	ldr	r5, [pc, #28]	@ (801d7d0 <_read_r+0x20>)
 801d7b4:	4604      	mov	r4, r0
 801d7b6:	4608      	mov	r0, r1
 801d7b8:	4611      	mov	r1, r2
 801d7ba:	2200      	movs	r2, #0
 801d7bc:	602a      	str	r2, [r5, #0]
 801d7be:	461a      	mov	r2, r3
 801d7c0:	f7e6 fa33 	bl	8003c2a <_read>
 801d7c4:	1c43      	adds	r3, r0, #1
 801d7c6:	d102      	bne.n	801d7ce <_read_r+0x1e>
 801d7c8:	682b      	ldr	r3, [r5, #0]
 801d7ca:	b103      	cbz	r3, 801d7ce <_read_r+0x1e>
 801d7cc:	6023      	str	r3, [r4, #0]
 801d7ce:	bd38      	pop	{r3, r4, r5, pc}
 801d7d0:	2000e838 	.word	0x2000e838

0801d7d4 <_write_r>:
 801d7d4:	b538      	push	{r3, r4, r5, lr}
 801d7d6:	4d07      	ldr	r5, [pc, #28]	@ (801d7f4 <_write_r+0x20>)
 801d7d8:	4604      	mov	r4, r0
 801d7da:	4608      	mov	r0, r1
 801d7dc:	4611      	mov	r1, r2
 801d7de:	2200      	movs	r2, #0
 801d7e0:	602a      	str	r2, [r5, #0]
 801d7e2:	461a      	mov	r2, r3
 801d7e4:	f7e6 fa3e 	bl	8003c64 <_write>
 801d7e8:	1c43      	adds	r3, r0, #1
 801d7ea:	d102      	bne.n	801d7f2 <_write_r+0x1e>
 801d7ec:	682b      	ldr	r3, [r5, #0]
 801d7ee:	b103      	cbz	r3, 801d7f2 <_write_r+0x1e>
 801d7f0:	6023      	str	r3, [r4, #0]
 801d7f2:	bd38      	pop	{r3, r4, r5, pc}
 801d7f4:	2000e838 	.word	0x2000e838

0801d7f8 <__errno>:
 801d7f8:	4b01      	ldr	r3, [pc, #4]	@ (801d800 <__errno+0x8>)
 801d7fa:	6818      	ldr	r0, [r3, #0]
 801d7fc:	4770      	bx	lr
 801d7fe:	bf00      	nop
 801d800:	20000118 	.word	0x20000118

0801d804 <__libc_init_array>:
 801d804:	b570      	push	{r4, r5, r6, lr}
 801d806:	4d0d      	ldr	r5, [pc, #52]	@ (801d83c <__libc_init_array+0x38>)
 801d808:	4c0d      	ldr	r4, [pc, #52]	@ (801d840 <__libc_init_array+0x3c>)
 801d80a:	1b64      	subs	r4, r4, r5
 801d80c:	10a4      	asrs	r4, r4, #2
 801d80e:	2600      	movs	r6, #0
 801d810:	42a6      	cmp	r6, r4
 801d812:	d109      	bne.n	801d828 <__libc_init_array+0x24>
 801d814:	4d0b      	ldr	r5, [pc, #44]	@ (801d844 <__libc_init_array+0x40>)
 801d816:	4c0c      	ldr	r4, [pc, #48]	@ (801d848 <__libc_init_array+0x44>)
 801d818:	f000 ffde 	bl	801e7d8 <_init>
 801d81c:	1b64      	subs	r4, r4, r5
 801d81e:	10a4      	asrs	r4, r4, #2
 801d820:	2600      	movs	r6, #0
 801d822:	42a6      	cmp	r6, r4
 801d824:	d105      	bne.n	801d832 <__libc_init_array+0x2e>
 801d826:	bd70      	pop	{r4, r5, r6, pc}
 801d828:	f855 3b04 	ldr.w	r3, [r5], #4
 801d82c:	4798      	blx	r3
 801d82e:	3601      	adds	r6, #1
 801d830:	e7ee      	b.n	801d810 <__libc_init_array+0xc>
 801d832:	f855 3b04 	ldr.w	r3, [r5], #4
 801d836:	4798      	blx	r3
 801d838:	3601      	adds	r6, #1
 801d83a:	e7f2      	b.n	801d822 <__libc_init_array+0x1e>
 801d83c:	080230b0 	.word	0x080230b0
 801d840:	080230b0 	.word	0x080230b0
 801d844:	080230b0 	.word	0x080230b0
 801d848:	080230b4 	.word	0x080230b4

0801d84c <__retarget_lock_init_recursive>:
 801d84c:	4770      	bx	lr

0801d84e <__retarget_lock_acquire_recursive>:
 801d84e:	4770      	bx	lr

0801d850 <__retarget_lock_release_recursive>:
 801d850:	4770      	bx	lr

0801d852 <strcpy>:
 801d852:	4603      	mov	r3, r0
 801d854:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d858:	f803 2b01 	strb.w	r2, [r3], #1
 801d85c:	2a00      	cmp	r2, #0
 801d85e:	d1f9      	bne.n	801d854 <strcpy+0x2>
 801d860:	4770      	bx	lr

0801d862 <memcpy>:
 801d862:	440a      	add	r2, r1
 801d864:	4291      	cmp	r1, r2
 801d866:	f100 33ff 	add.w	r3, r0, #4294967295
 801d86a:	d100      	bne.n	801d86e <memcpy+0xc>
 801d86c:	4770      	bx	lr
 801d86e:	b510      	push	{r4, lr}
 801d870:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d874:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d878:	4291      	cmp	r1, r2
 801d87a:	d1f9      	bne.n	801d870 <memcpy+0xe>
 801d87c:	bd10      	pop	{r4, pc}
	...

0801d880 <__assert_func>:
 801d880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d882:	4614      	mov	r4, r2
 801d884:	461a      	mov	r2, r3
 801d886:	4b09      	ldr	r3, [pc, #36]	@ (801d8ac <__assert_func+0x2c>)
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	4605      	mov	r5, r0
 801d88c:	68d8      	ldr	r0, [r3, #12]
 801d88e:	b14c      	cbz	r4, 801d8a4 <__assert_func+0x24>
 801d890:	4b07      	ldr	r3, [pc, #28]	@ (801d8b0 <__assert_func+0x30>)
 801d892:	9100      	str	r1, [sp, #0]
 801d894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d898:	4906      	ldr	r1, [pc, #24]	@ (801d8b4 <__assert_func+0x34>)
 801d89a:	462b      	mov	r3, r5
 801d89c:	f000 fde0 	bl	801e460 <fiprintf>
 801d8a0:	f000 fe94 	bl	801e5cc <abort>
 801d8a4:	4b04      	ldr	r3, [pc, #16]	@ (801d8b8 <__assert_func+0x38>)
 801d8a6:	461c      	mov	r4, r3
 801d8a8:	e7f3      	b.n	801d892 <__assert_func+0x12>
 801d8aa:	bf00      	nop
 801d8ac:	20000118 	.word	0x20000118
 801d8b0:	08022f37 	.word	0x08022f37
 801d8b4:	08022f44 	.word	0x08022f44
 801d8b8:	08022f72 	.word	0x08022f72

0801d8bc <_free_r>:
 801d8bc:	b538      	push	{r3, r4, r5, lr}
 801d8be:	4605      	mov	r5, r0
 801d8c0:	2900      	cmp	r1, #0
 801d8c2:	d041      	beq.n	801d948 <_free_r+0x8c>
 801d8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d8c8:	1f0c      	subs	r4, r1, #4
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	bfb8      	it	lt
 801d8ce:	18e4      	addlt	r4, r4, r3
 801d8d0:	f000 f8e8 	bl	801daa4 <__malloc_lock>
 801d8d4:	4a1d      	ldr	r2, [pc, #116]	@ (801d94c <_free_r+0x90>)
 801d8d6:	6813      	ldr	r3, [r2, #0]
 801d8d8:	b933      	cbnz	r3, 801d8e8 <_free_r+0x2c>
 801d8da:	6063      	str	r3, [r4, #4]
 801d8dc:	6014      	str	r4, [r2, #0]
 801d8de:	4628      	mov	r0, r5
 801d8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d8e4:	f000 b8e4 	b.w	801dab0 <__malloc_unlock>
 801d8e8:	42a3      	cmp	r3, r4
 801d8ea:	d908      	bls.n	801d8fe <_free_r+0x42>
 801d8ec:	6820      	ldr	r0, [r4, #0]
 801d8ee:	1821      	adds	r1, r4, r0
 801d8f0:	428b      	cmp	r3, r1
 801d8f2:	bf01      	itttt	eq
 801d8f4:	6819      	ldreq	r1, [r3, #0]
 801d8f6:	685b      	ldreq	r3, [r3, #4]
 801d8f8:	1809      	addeq	r1, r1, r0
 801d8fa:	6021      	streq	r1, [r4, #0]
 801d8fc:	e7ed      	b.n	801d8da <_free_r+0x1e>
 801d8fe:	461a      	mov	r2, r3
 801d900:	685b      	ldr	r3, [r3, #4]
 801d902:	b10b      	cbz	r3, 801d908 <_free_r+0x4c>
 801d904:	42a3      	cmp	r3, r4
 801d906:	d9fa      	bls.n	801d8fe <_free_r+0x42>
 801d908:	6811      	ldr	r1, [r2, #0]
 801d90a:	1850      	adds	r0, r2, r1
 801d90c:	42a0      	cmp	r0, r4
 801d90e:	d10b      	bne.n	801d928 <_free_r+0x6c>
 801d910:	6820      	ldr	r0, [r4, #0]
 801d912:	4401      	add	r1, r0
 801d914:	1850      	adds	r0, r2, r1
 801d916:	4283      	cmp	r3, r0
 801d918:	6011      	str	r1, [r2, #0]
 801d91a:	d1e0      	bne.n	801d8de <_free_r+0x22>
 801d91c:	6818      	ldr	r0, [r3, #0]
 801d91e:	685b      	ldr	r3, [r3, #4]
 801d920:	6053      	str	r3, [r2, #4]
 801d922:	4408      	add	r0, r1
 801d924:	6010      	str	r0, [r2, #0]
 801d926:	e7da      	b.n	801d8de <_free_r+0x22>
 801d928:	d902      	bls.n	801d930 <_free_r+0x74>
 801d92a:	230c      	movs	r3, #12
 801d92c:	602b      	str	r3, [r5, #0]
 801d92e:	e7d6      	b.n	801d8de <_free_r+0x22>
 801d930:	6820      	ldr	r0, [r4, #0]
 801d932:	1821      	adds	r1, r4, r0
 801d934:	428b      	cmp	r3, r1
 801d936:	bf04      	itt	eq
 801d938:	6819      	ldreq	r1, [r3, #0]
 801d93a:	685b      	ldreq	r3, [r3, #4]
 801d93c:	6063      	str	r3, [r4, #4]
 801d93e:	bf04      	itt	eq
 801d940:	1809      	addeq	r1, r1, r0
 801d942:	6021      	streq	r1, [r4, #0]
 801d944:	6054      	str	r4, [r2, #4]
 801d946:	e7ca      	b.n	801d8de <_free_r+0x22>
 801d948:	bd38      	pop	{r3, r4, r5, pc}
 801d94a:	bf00      	nop
 801d94c:	2000e844 	.word	0x2000e844

0801d950 <malloc>:
 801d950:	4b02      	ldr	r3, [pc, #8]	@ (801d95c <malloc+0xc>)
 801d952:	4601      	mov	r1, r0
 801d954:	6818      	ldr	r0, [r3, #0]
 801d956:	f000 b825 	b.w	801d9a4 <_malloc_r>
 801d95a:	bf00      	nop
 801d95c:	20000118 	.word	0x20000118

0801d960 <sbrk_aligned>:
 801d960:	b570      	push	{r4, r5, r6, lr}
 801d962:	4e0f      	ldr	r6, [pc, #60]	@ (801d9a0 <sbrk_aligned+0x40>)
 801d964:	460c      	mov	r4, r1
 801d966:	6831      	ldr	r1, [r6, #0]
 801d968:	4605      	mov	r5, r0
 801d96a:	b911      	cbnz	r1, 801d972 <sbrk_aligned+0x12>
 801d96c:	f000 fe1e 	bl	801e5ac <_sbrk_r>
 801d970:	6030      	str	r0, [r6, #0]
 801d972:	4621      	mov	r1, r4
 801d974:	4628      	mov	r0, r5
 801d976:	f000 fe19 	bl	801e5ac <_sbrk_r>
 801d97a:	1c43      	adds	r3, r0, #1
 801d97c:	d103      	bne.n	801d986 <sbrk_aligned+0x26>
 801d97e:	f04f 34ff 	mov.w	r4, #4294967295
 801d982:	4620      	mov	r0, r4
 801d984:	bd70      	pop	{r4, r5, r6, pc}
 801d986:	1cc4      	adds	r4, r0, #3
 801d988:	f024 0403 	bic.w	r4, r4, #3
 801d98c:	42a0      	cmp	r0, r4
 801d98e:	d0f8      	beq.n	801d982 <sbrk_aligned+0x22>
 801d990:	1a21      	subs	r1, r4, r0
 801d992:	4628      	mov	r0, r5
 801d994:	f000 fe0a 	bl	801e5ac <_sbrk_r>
 801d998:	3001      	adds	r0, #1
 801d99a:	d1f2      	bne.n	801d982 <sbrk_aligned+0x22>
 801d99c:	e7ef      	b.n	801d97e <sbrk_aligned+0x1e>
 801d99e:	bf00      	nop
 801d9a0:	2000e840 	.word	0x2000e840

0801d9a4 <_malloc_r>:
 801d9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9a8:	1ccd      	adds	r5, r1, #3
 801d9aa:	f025 0503 	bic.w	r5, r5, #3
 801d9ae:	3508      	adds	r5, #8
 801d9b0:	2d0c      	cmp	r5, #12
 801d9b2:	bf38      	it	cc
 801d9b4:	250c      	movcc	r5, #12
 801d9b6:	2d00      	cmp	r5, #0
 801d9b8:	4606      	mov	r6, r0
 801d9ba:	db01      	blt.n	801d9c0 <_malloc_r+0x1c>
 801d9bc:	42a9      	cmp	r1, r5
 801d9be:	d904      	bls.n	801d9ca <_malloc_r+0x26>
 801d9c0:	230c      	movs	r3, #12
 801d9c2:	6033      	str	r3, [r6, #0]
 801d9c4:	2000      	movs	r0, #0
 801d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d9ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801daa0 <_malloc_r+0xfc>
 801d9ce:	f000 f869 	bl	801daa4 <__malloc_lock>
 801d9d2:	f8d8 3000 	ldr.w	r3, [r8]
 801d9d6:	461c      	mov	r4, r3
 801d9d8:	bb44      	cbnz	r4, 801da2c <_malloc_r+0x88>
 801d9da:	4629      	mov	r1, r5
 801d9dc:	4630      	mov	r0, r6
 801d9de:	f7ff ffbf 	bl	801d960 <sbrk_aligned>
 801d9e2:	1c43      	adds	r3, r0, #1
 801d9e4:	4604      	mov	r4, r0
 801d9e6:	d158      	bne.n	801da9a <_malloc_r+0xf6>
 801d9e8:	f8d8 4000 	ldr.w	r4, [r8]
 801d9ec:	4627      	mov	r7, r4
 801d9ee:	2f00      	cmp	r7, #0
 801d9f0:	d143      	bne.n	801da7a <_malloc_r+0xd6>
 801d9f2:	2c00      	cmp	r4, #0
 801d9f4:	d04b      	beq.n	801da8e <_malloc_r+0xea>
 801d9f6:	6823      	ldr	r3, [r4, #0]
 801d9f8:	4639      	mov	r1, r7
 801d9fa:	4630      	mov	r0, r6
 801d9fc:	eb04 0903 	add.w	r9, r4, r3
 801da00:	f000 fdd4 	bl	801e5ac <_sbrk_r>
 801da04:	4581      	cmp	r9, r0
 801da06:	d142      	bne.n	801da8e <_malloc_r+0xea>
 801da08:	6821      	ldr	r1, [r4, #0]
 801da0a:	1a6d      	subs	r5, r5, r1
 801da0c:	4629      	mov	r1, r5
 801da0e:	4630      	mov	r0, r6
 801da10:	f7ff ffa6 	bl	801d960 <sbrk_aligned>
 801da14:	3001      	adds	r0, #1
 801da16:	d03a      	beq.n	801da8e <_malloc_r+0xea>
 801da18:	6823      	ldr	r3, [r4, #0]
 801da1a:	442b      	add	r3, r5
 801da1c:	6023      	str	r3, [r4, #0]
 801da1e:	f8d8 3000 	ldr.w	r3, [r8]
 801da22:	685a      	ldr	r2, [r3, #4]
 801da24:	bb62      	cbnz	r2, 801da80 <_malloc_r+0xdc>
 801da26:	f8c8 7000 	str.w	r7, [r8]
 801da2a:	e00f      	b.n	801da4c <_malloc_r+0xa8>
 801da2c:	6822      	ldr	r2, [r4, #0]
 801da2e:	1b52      	subs	r2, r2, r5
 801da30:	d420      	bmi.n	801da74 <_malloc_r+0xd0>
 801da32:	2a0b      	cmp	r2, #11
 801da34:	d917      	bls.n	801da66 <_malloc_r+0xc2>
 801da36:	1961      	adds	r1, r4, r5
 801da38:	42a3      	cmp	r3, r4
 801da3a:	6025      	str	r5, [r4, #0]
 801da3c:	bf18      	it	ne
 801da3e:	6059      	strne	r1, [r3, #4]
 801da40:	6863      	ldr	r3, [r4, #4]
 801da42:	bf08      	it	eq
 801da44:	f8c8 1000 	streq.w	r1, [r8]
 801da48:	5162      	str	r2, [r4, r5]
 801da4a:	604b      	str	r3, [r1, #4]
 801da4c:	4630      	mov	r0, r6
 801da4e:	f000 f82f 	bl	801dab0 <__malloc_unlock>
 801da52:	f104 000b 	add.w	r0, r4, #11
 801da56:	1d23      	adds	r3, r4, #4
 801da58:	f020 0007 	bic.w	r0, r0, #7
 801da5c:	1ac2      	subs	r2, r0, r3
 801da5e:	bf1c      	itt	ne
 801da60:	1a1b      	subne	r3, r3, r0
 801da62:	50a3      	strne	r3, [r4, r2]
 801da64:	e7af      	b.n	801d9c6 <_malloc_r+0x22>
 801da66:	6862      	ldr	r2, [r4, #4]
 801da68:	42a3      	cmp	r3, r4
 801da6a:	bf0c      	ite	eq
 801da6c:	f8c8 2000 	streq.w	r2, [r8]
 801da70:	605a      	strne	r2, [r3, #4]
 801da72:	e7eb      	b.n	801da4c <_malloc_r+0xa8>
 801da74:	4623      	mov	r3, r4
 801da76:	6864      	ldr	r4, [r4, #4]
 801da78:	e7ae      	b.n	801d9d8 <_malloc_r+0x34>
 801da7a:	463c      	mov	r4, r7
 801da7c:	687f      	ldr	r7, [r7, #4]
 801da7e:	e7b6      	b.n	801d9ee <_malloc_r+0x4a>
 801da80:	461a      	mov	r2, r3
 801da82:	685b      	ldr	r3, [r3, #4]
 801da84:	42a3      	cmp	r3, r4
 801da86:	d1fb      	bne.n	801da80 <_malloc_r+0xdc>
 801da88:	2300      	movs	r3, #0
 801da8a:	6053      	str	r3, [r2, #4]
 801da8c:	e7de      	b.n	801da4c <_malloc_r+0xa8>
 801da8e:	230c      	movs	r3, #12
 801da90:	6033      	str	r3, [r6, #0]
 801da92:	4630      	mov	r0, r6
 801da94:	f000 f80c 	bl	801dab0 <__malloc_unlock>
 801da98:	e794      	b.n	801d9c4 <_malloc_r+0x20>
 801da9a:	6005      	str	r5, [r0, #0]
 801da9c:	e7d6      	b.n	801da4c <_malloc_r+0xa8>
 801da9e:	bf00      	nop
 801daa0:	2000e844 	.word	0x2000e844

0801daa4 <__malloc_lock>:
 801daa4:	4801      	ldr	r0, [pc, #4]	@ (801daac <__malloc_lock+0x8>)
 801daa6:	f7ff bed2 	b.w	801d84e <__retarget_lock_acquire_recursive>
 801daaa:	bf00      	nop
 801daac:	2000e83c 	.word	0x2000e83c

0801dab0 <__malloc_unlock>:
 801dab0:	4801      	ldr	r0, [pc, #4]	@ (801dab8 <__malloc_unlock+0x8>)
 801dab2:	f7ff becd 	b.w	801d850 <__retarget_lock_release_recursive>
 801dab6:	bf00      	nop
 801dab8:	2000e83c 	.word	0x2000e83c

0801dabc <__ssputs_r>:
 801dabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dac0:	688e      	ldr	r6, [r1, #8]
 801dac2:	461f      	mov	r7, r3
 801dac4:	42be      	cmp	r6, r7
 801dac6:	680b      	ldr	r3, [r1, #0]
 801dac8:	4682      	mov	sl, r0
 801daca:	460c      	mov	r4, r1
 801dacc:	4690      	mov	r8, r2
 801dace:	d82d      	bhi.n	801db2c <__ssputs_r+0x70>
 801dad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dad8:	d026      	beq.n	801db28 <__ssputs_r+0x6c>
 801dada:	6965      	ldr	r5, [r4, #20]
 801dadc:	6909      	ldr	r1, [r1, #16]
 801dade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dae2:	eba3 0901 	sub.w	r9, r3, r1
 801dae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801daea:	1c7b      	adds	r3, r7, #1
 801daec:	444b      	add	r3, r9
 801daee:	106d      	asrs	r5, r5, #1
 801daf0:	429d      	cmp	r5, r3
 801daf2:	bf38      	it	cc
 801daf4:	461d      	movcc	r5, r3
 801daf6:	0553      	lsls	r3, r2, #21
 801daf8:	d527      	bpl.n	801db4a <__ssputs_r+0x8e>
 801dafa:	4629      	mov	r1, r5
 801dafc:	f7ff ff52 	bl	801d9a4 <_malloc_r>
 801db00:	4606      	mov	r6, r0
 801db02:	b360      	cbz	r0, 801db5e <__ssputs_r+0xa2>
 801db04:	6921      	ldr	r1, [r4, #16]
 801db06:	464a      	mov	r2, r9
 801db08:	f7ff feab 	bl	801d862 <memcpy>
 801db0c:	89a3      	ldrh	r3, [r4, #12]
 801db0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801db12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801db16:	81a3      	strh	r3, [r4, #12]
 801db18:	6126      	str	r6, [r4, #16]
 801db1a:	6165      	str	r5, [r4, #20]
 801db1c:	444e      	add	r6, r9
 801db1e:	eba5 0509 	sub.w	r5, r5, r9
 801db22:	6026      	str	r6, [r4, #0]
 801db24:	60a5      	str	r5, [r4, #8]
 801db26:	463e      	mov	r6, r7
 801db28:	42be      	cmp	r6, r7
 801db2a:	d900      	bls.n	801db2e <__ssputs_r+0x72>
 801db2c:	463e      	mov	r6, r7
 801db2e:	6820      	ldr	r0, [r4, #0]
 801db30:	4632      	mov	r2, r6
 801db32:	4641      	mov	r1, r8
 801db34:	f7ff fd7d 	bl	801d632 <memmove>
 801db38:	68a3      	ldr	r3, [r4, #8]
 801db3a:	1b9b      	subs	r3, r3, r6
 801db3c:	60a3      	str	r3, [r4, #8]
 801db3e:	6823      	ldr	r3, [r4, #0]
 801db40:	4433      	add	r3, r6
 801db42:	6023      	str	r3, [r4, #0]
 801db44:	2000      	movs	r0, #0
 801db46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db4a:	462a      	mov	r2, r5
 801db4c:	f000 fd45 	bl	801e5da <_realloc_r>
 801db50:	4606      	mov	r6, r0
 801db52:	2800      	cmp	r0, #0
 801db54:	d1e0      	bne.n	801db18 <__ssputs_r+0x5c>
 801db56:	6921      	ldr	r1, [r4, #16]
 801db58:	4650      	mov	r0, sl
 801db5a:	f7ff feaf 	bl	801d8bc <_free_r>
 801db5e:	230c      	movs	r3, #12
 801db60:	f8ca 3000 	str.w	r3, [sl]
 801db64:	89a3      	ldrh	r3, [r4, #12]
 801db66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db6a:	81a3      	strh	r3, [r4, #12]
 801db6c:	f04f 30ff 	mov.w	r0, #4294967295
 801db70:	e7e9      	b.n	801db46 <__ssputs_r+0x8a>
	...

0801db74 <_svfiprintf_r>:
 801db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db78:	4698      	mov	r8, r3
 801db7a:	898b      	ldrh	r3, [r1, #12]
 801db7c:	061b      	lsls	r3, r3, #24
 801db7e:	b09d      	sub	sp, #116	@ 0x74
 801db80:	4607      	mov	r7, r0
 801db82:	460d      	mov	r5, r1
 801db84:	4614      	mov	r4, r2
 801db86:	d510      	bpl.n	801dbaa <_svfiprintf_r+0x36>
 801db88:	690b      	ldr	r3, [r1, #16]
 801db8a:	b973      	cbnz	r3, 801dbaa <_svfiprintf_r+0x36>
 801db8c:	2140      	movs	r1, #64	@ 0x40
 801db8e:	f7ff ff09 	bl	801d9a4 <_malloc_r>
 801db92:	6028      	str	r0, [r5, #0]
 801db94:	6128      	str	r0, [r5, #16]
 801db96:	b930      	cbnz	r0, 801dba6 <_svfiprintf_r+0x32>
 801db98:	230c      	movs	r3, #12
 801db9a:	603b      	str	r3, [r7, #0]
 801db9c:	f04f 30ff 	mov.w	r0, #4294967295
 801dba0:	b01d      	add	sp, #116	@ 0x74
 801dba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dba6:	2340      	movs	r3, #64	@ 0x40
 801dba8:	616b      	str	r3, [r5, #20]
 801dbaa:	2300      	movs	r3, #0
 801dbac:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbae:	2320      	movs	r3, #32
 801dbb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dbb4:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbb8:	2330      	movs	r3, #48	@ 0x30
 801dbba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801dd58 <_svfiprintf_r+0x1e4>
 801dbbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dbc2:	f04f 0901 	mov.w	r9, #1
 801dbc6:	4623      	mov	r3, r4
 801dbc8:	469a      	mov	sl, r3
 801dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbce:	b10a      	cbz	r2, 801dbd4 <_svfiprintf_r+0x60>
 801dbd0:	2a25      	cmp	r2, #37	@ 0x25
 801dbd2:	d1f9      	bne.n	801dbc8 <_svfiprintf_r+0x54>
 801dbd4:	ebba 0b04 	subs.w	fp, sl, r4
 801dbd8:	d00b      	beq.n	801dbf2 <_svfiprintf_r+0x7e>
 801dbda:	465b      	mov	r3, fp
 801dbdc:	4622      	mov	r2, r4
 801dbde:	4629      	mov	r1, r5
 801dbe0:	4638      	mov	r0, r7
 801dbe2:	f7ff ff6b 	bl	801dabc <__ssputs_r>
 801dbe6:	3001      	adds	r0, #1
 801dbe8:	f000 80a7 	beq.w	801dd3a <_svfiprintf_r+0x1c6>
 801dbec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dbee:	445a      	add	r2, fp
 801dbf0:	9209      	str	r2, [sp, #36]	@ 0x24
 801dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	f000 809f 	beq.w	801dd3a <_svfiprintf_r+0x1c6>
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 801dc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc06:	f10a 0a01 	add.w	sl, sl, #1
 801dc0a:	9304      	str	r3, [sp, #16]
 801dc0c:	9307      	str	r3, [sp, #28]
 801dc0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dc12:	931a      	str	r3, [sp, #104]	@ 0x68
 801dc14:	4654      	mov	r4, sl
 801dc16:	2205      	movs	r2, #5
 801dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc1c:	484e      	ldr	r0, [pc, #312]	@ (801dd58 <_svfiprintf_r+0x1e4>)
 801dc1e:	f7e2 fadf 	bl	80001e0 <memchr>
 801dc22:	9a04      	ldr	r2, [sp, #16]
 801dc24:	b9d8      	cbnz	r0, 801dc5e <_svfiprintf_r+0xea>
 801dc26:	06d0      	lsls	r0, r2, #27
 801dc28:	bf44      	itt	mi
 801dc2a:	2320      	movmi	r3, #32
 801dc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dc30:	0711      	lsls	r1, r2, #28
 801dc32:	bf44      	itt	mi
 801dc34:	232b      	movmi	r3, #43	@ 0x2b
 801dc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dc3a:	f89a 3000 	ldrb.w	r3, [sl]
 801dc3e:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc40:	d015      	beq.n	801dc6e <_svfiprintf_r+0xfa>
 801dc42:	9a07      	ldr	r2, [sp, #28]
 801dc44:	4654      	mov	r4, sl
 801dc46:	2000      	movs	r0, #0
 801dc48:	f04f 0c0a 	mov.w	ip, #10
 801dc4c:	4621      	mov	r1, r4
 801dc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc52:	3b30      	subs	r3, #48	@ 0x30
 801dc54:	2b09      	cmp	r3, #9
 801dc56:	d94b      	bls.n	801dcf0 <_svfiprintf_r+0x17c>
 801dc58:	b1b0      	cbz	r0, 801dc88 <_svfiprintf_r+0x114>
 801dc5a:	9207      	str	r2, [sp, #28]
 801dc5c:	e014      	b.n	801dc88 <_svfiprintf_r+0x114>
 801dc5e:	eba0 0308 	sub.w	r3, r0, r8
 801dc62:	fa09 f303 	lsl.w	r3, r9, r3
 801dc66:	4313      	orrs	r3, r2
 801dc68:	9304      	str	r3, [sp, #16]
 801dc6a:	46a2      	mov	sl, r4
 801dc6c:	e7d2      	b.n	801dc14 <_svfiprintf_r+0xa0>
 801dc6e:	9b03      	ldr	r3, [sp, #12]
 801dc70:	1d19      	adds	r1, r3, #4
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	9103      	str	r1, [sp, #12]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	bfbb      	ittet	lt
 801dc7a:	425b      	neglt	r3, r3
 801dc7c:	f042 0202 	orrlt.w	r2, r2, #2
 801dc80:	9307      	strge	r3, [sp, #28]
 801dc82:	9307      	strlt	r3, [sp, #28]
 801dc84:	bfb8      	it	lt
 801dc86:	9204      	strlt	r2, [sp, #16]
 801dc88:	7823      	ldrb	r3, [r4, #0]
 801dc8a:	2b2e      	cmp	r3, #46	@ 0x2e
 801dc8c:	d10a      	bne.n	801dca4 <_svfiprintf_r+0x130>
 801dc8e:	7863      	ldrb	r3, [r4, #1]
 801dc90:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc92:	d132      	bne.n	801dcfa <_svfiprintf_r+0x186>
 801dc94:	9b03      	ldr	r3, [sp, #12]
 801dc96:	1d1a      	adds	r2, r3, #4
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	9203      	str	r2, [sp, #12]
 801dc9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dca0:	3402      	adds	r4, #2
 801dca2:	9305      	str	r3, [sp, #20]
 801dca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dd68 <_svfiprintf_r+0x1f4>
 801dca8:	7821      	ldrb	r1, [r4, #0]
 801dcaa:	2203      	movs	r2, #3
 801dcac:	4650      	mov	r0, sl
 801dcae:	f7e2 fa97 	bl	80001e0 <memchr>
 801dcb2:	b138      	cbz	r0, 801dcc4 <_svfiprintf_r+0x150>
 801dcb4:	9b04      	ldr	r3, [sp, #16]
 801dcb6:	eba0 000a 	sub.w	r0, r0, sl
 801dcba:	2240      	movs	r2, #64	@ 0x40
 801dcbc:	4082      	lsls	r2, r0
 801dcbe:	4313      	orrs	r3, r2
 801dcc0:	3401      	adds	r4, #1
 801dcc2:	9304      	str	r3, [sp, #16]
 801dcc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcc8:	4824      	ldr	r0, [pc, #144]	@ (801dd5c <_svfiprintf_r+0x1e8>)
 801dcca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dcce:	2206      	movs	r2, #6
 801dcd0:	f7e2 fa86 	bl	80001e0 <memchr>
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	d036      	beq.n	801dd46 <_svfiprintf_r+0x1d2>
 801dcd8:	4b21      	ldr	r3, [pc, #132]	@ (801dd60 <_svfiprintf_r+0x1ec>)
 801dcda:	bb1b      	cbnz	r3, 801dd24 <_svfiprintf_r+0x1b0>
 801dcdc:	9b03      	ldr	r3, [sp, #12]
 801dcde:	3307      	adds	r3, #7
 801dce0:	f023 0307 	bic.w	r3, r3, #7
 801dce4:	3308      	adds	r3, #8
 801dce6:	9303      	str	r3, [sp, #12]
 801dce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcea:	4433      	add	r3, r6
 801dcec:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcee:	e76a      	b.n	801dbc6 <_svfiprintf_r+0x52>
 801dcf0:	fb0c 3202 	mla	r2, ip, r2, r3
 801dcf4:	460c      	mov	r4, r1
 801dcf6:	2001      	movs	r0, #1
 801dcf8:	e7a8      	b.n	801dc4c <_svfiprintf_r+0xd8>
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	3401      	adds	r4, #1
 801dcfe:	9305      	str	r3, [sp, #20]
 801dd00:	4619      	mov	r1, r3
 801dd02:	f04f 0c0a 	mov.w	ip, #10
 801dd06:	4620      	mov	r0, r4
 801dd08:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd0c:	3a30      	subs	r2, #48	@ 0x30
 801dd0e:	2a09      	cmp	r2, #9
 801dd10:	d903      	bls.n	801dd1a <_svfiprintf_r+0x1a6>
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d0c6      	beq.n	801dca4 <_svfiprintf_r+0x130>
 801dd16:	9105      	str	r1, [sp, #20]
 801dd18:	e7c4      	b.n	801dca4 <_svfiprintf_r+0x130>
 801dd1a:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd1e:	4604      	mov	r4, r0
 801dd20:	2301      	movs	r3, #1
 801dd22:	e7f0      	b.n	801dd06 <_svfiprintf_r+0x192>
 801dd24:	ab03      	add	r3, sp, #12
 801dd26:	9300      	str	r3, [sp, #0]
 801dd28:	462a      	mov	r2, r5
 801dd2a:	4b0e      	ldr	r3, [pc, #56]	@ (801dd64 <_svfiprintf_r+0x1f0>)
 801dd2c:	a904      	add	r1, sp, #16
 801dd2e:	4638      	mov	r0, r7
 801dd30:	f3af 8000 	nop.w
 801dd34:	1c42      	adds	r2, r0, #1
 801dd36:	4606      	mov	r6, r0
 801dd38:	d1d6      	bne.n	801dce8 <_svfiprintf_r+0x174>
 801dd3a:	89ab      	ldrh	r3, [r5, #12]
 801dd3c:	065b      	lsls	r3, r3, #25
 801dd3e:	f53f af2d 	bmi.w	801db9c <_svfiprintf_r+0x28>
 801dd42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd44:	e72c      	b.n	801dba0 <_svfiprintf_r+0x2c>
 801dd46:	ab03      	add	r3, sp, #12
 801dd48:	9300      	str	r3, [sp, #0]
 801dd4a:	462a      	mov	r2, r5
 801dd4c:	4b05      	ldr	r3, [pc, #20]	@ (801dd64 <_svfiprintf_r+0x1f0>)
 801dd4e:	a904      	add	r1, sp, #16
 801dd50:	4638      	mov	r0, r7
 801dd52:	f000 f9bb 	bl	801e0cc <_printf_i>
 801dd56:	e7ed      	b.n	801dd34 <_svfiprintf_r+0x1c0>
 801dd58:	08022f73 	.word	0x08022f73
 801dd5c:	08022f7d 	.word	0x08022f7d
 801dd60:	00000000 	.word	0x00000000
 801dd64:	0801dabd 	.word	0x0801dabd
 801dd68:	08022f79 	.word	0x08022f79

0801dd6c <__sfputc_r>:
 801dd6c:	6893      	ldr	r3, [r2, #8]
 801dd6e:	3b01      	subs	r3, #1
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	b410      	push	{r4}
 801dd74:	6093      	str	r3, [r2, #8]
 801dd76:	da08      	bge.n	801dd8a <__sfputc_r+0x1e>
 801dd78:	6994      	ldr	r4, [r2, #24]
 801dd7a:	42a3      	cmp	r3, r4
 801dd7c:	db01      	blt.n	801dd82 <__sfputc_r+0x16>
 801dd7e:	290a      	cmp	r1, #10
 801dd80:	d103      	bne.n	801dd8a <__sfputc_r+0x1e>
 801dd82:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd86:	f000 bb7d 	b.w	801e484 <__swbuf_r>
 801dd8a:	6813      	ldr	r3, [r2, #0]
 801dd8c:	1c58      	adds	r0, r3, #1
 801dd8e:	6010      	str	r0, [r2, #0]
 801dd90:	7019      	strb	r1, [r3, #0]
 801dd92:	4608      	mov	r0, r1
 801dd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd98:	4770      	bx	lr

0801dd9a <__sfputs_r>:
 801dd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd9c:	4606      	mov	r6, r0
 801dd9e:	460f      	mov	r7, r1
 801dda0:	4614      	mov	r4, r2
 801dda2:	18d5      	adds	r5, r2, r3
 801dda4:	42ac      	cmp	r4, r5
 801dda6:	d101      	bne.n	801ddac <__sfputs_r+0x12>
 801dda8:	2000      	movs	r0, #0
 801ddaa:	e007      	b.n	801ddbc <__sfputs_r+0x22>
 801ddac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddb0:	463a      	mov	r2, r7
 801ddb2:	4630      	mov	r0, r6
 801ddb4:	f7ff ffda 	bl	801dd6c <__sfputc_r>
 801ddb8:	1c43      	adds	r3, r0, #1
 801ddba:	d1f3      	bne.n	801dda4 <__sfputs_r+0xa>
 801ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ddc0 <_vfiprintf_r>:
 801ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddc4:	460d      	mov	r5, r1
 801ddc6:	b09d      	sub	sp, #116	@ 0x74
 801ddc8:	4614      	mov	r4, r2
 801ddca:	4698      	mov	r8, r3
 801ddcc:	4606      	mov	r6, r0
 801ddce:	b118      	cbz	r0, 801ddd8 <_vfiprintf_r+0x18>
 801ddd0:	6a03      	ldr	r3, [r0, #32]
 801ddd2:	b90b      	cbnz	r3, 801ddd8 <_vfiprintf_r+0x18>
 801ddd4:	f7ff fb5c 	bl	801d490 <__sinit>
 801ddd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ddda:	07d9      	lsls	r1, r3, #31
 801dddc:	d405      	bmi.n	801ddea <_vfiprintf_r+0x2a>
 801ddde:	89ab      	ldrh	r3, [r5, #12]
 801dde0:	059a      	lsls	r2, r3, #22
 801dde2:	d402      	bmi.n	801ddea <_vfiprintf_r+0x2a>
 801dde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dde6:	f7ff fd32 	bl	801d84e <__retarget_lock_acquire_recursive>
 801ddea:	89ab      	ldrh	r3, [r5, #12]
 801ddec:	071b      	lsls	r3, r3, #28
 801ddee:	d501      	bpl.n	801ddf4 <_vfiprintf_r+0x34>
 801ddf0:	692b      	ldr	r3, [r5, #16]
 801ddf2:	b99b      	cbnz	r3, 801de1c <_vfiprintf_r+0x5c>
 801ddf4:	4629      	mov	r1, r5
 801ddf6:	4630      	mov	r0, r6
 801ddf8:	f000 fb82 	bl	801e500 <__swsetup_r>
 801ddfc:	b170      	cbz	r0, 801de1c <_vfiprintf_r+0x5c>
 801ddfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801de00:	07dc      	lsls	r4, r3, #31
 801de02:	d504      	bpl.n	801de0e <_vfiprintf_r+0x4e>
 801de04:	f04f 30ff 	mov.w	r0, #4294967295
 801de08:	b01d      	add	sp, #116	@ 0x74
 801de0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de0e:	89ab      	ldrh	r3, [r5, #12]
 801de10:	0598      	lsls	r0, r3, #22
 801de12:	d4f7      	bmi.n	801de04 <_vfiprintf_r+0x44>
 801de14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801de16:	f7ff fd1b 	bl	801d850 <__retarget_lock_release_recursive>
 801de1a:	e7f3      	b.n	801de04 <_vfiprintf_r+0x44>
 801de1c:	2300      	movs	r3, #0
 801de1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801de20:	2320      	movs	r3, #32
 801de22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801de26:	f8cd 800c 	str.w	r8, [sp, #12]
 801de2a:	2330      	movs	r3, #48	@ 0x30
 801de2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dfdc <_vfiprintf_r+0x21c>
 801de30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801de34:	f04f 0901 	mov.w	r9, #1
 801de38:	4623      	mov	r3, r4
 801de3a:	469a      	mov	sl, r3
 801de3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de40:	b10a      	cbz	r2, 801de46 <_vfiprintf_r+0x86>
 801de42:	2a25      	cmp	r2, #37	@ 0x25
 801de44:	d1f9      	bne.n	801de3a <_vfiprintf_r+0x7a>
 801de46:	ebba 0b04 	subs.w	fp, sl, r4
 801de4a:	d00b      	beq.n	801de64 <_vfiprintf_r+0xa4>
 801de4c:	465b      	mov	r3, fp
 801de4e:	4622      	mov	r2, r4
 801de50:	4629      	mov	r1, r5
 801de52:	4630      	mov	r0, r6
 801de54:	f7ff ffa1 	bl	801dd9a <__sfputs_r>
 801de58:	3001      	adds	r0, #1
 801de5a:	f000 80a7 	beq.w	801dfac <_vfiprintf_r+0x1ec>
 801de5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de60:	445a      	add	r2, fp
 801de62:	9209      	str	r2, [sp, #36]	@ 0x24
 801de64:	f89a 3000 	ldrb.w	r3, [sl]
 801de68:	2b00      	cmp	r3, #0
 801de6a:	f000 809f 	beq.w	801dfac <_vfiprintf_r+0x1ec>
 801de6e:	2300      	movs	r3, #0
 801de70:	f04f 32ff 	mov.w	r2, #4294967295
 801de74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de78:	f10a 0a01 	add.w	sl, sl, #1
 801de7c:	9304      	str	r3, [sp, #16]
 801de7e:	9307      	str	r3, [sp, #28]
 801de80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801de84:	931a      	str	r3, [sp, #104]	@ 0x68
 801de86:	4654      	mov	r4, sl
 801de88:	2205      	movs	r2, #5
 801de8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de8e:	4853      	ldr	r0, [pc, #332]	@ (801dfdc <_vfiprintf_r+0x21c>)
 801de90:	f7e2 f9a6 	bl	80001e0 <memchr>
 801de94:	9a04      	ldr	r2, [sp, #16]
 801de96:	b9d8      	cbnz	r0, 801ded0 <_vfiprintf_r+0x110>
 801de98:	06d1      	lsls	r1, r2, #27
 801de9a:	bf44      	itt	mi
 801de9c:	2320      	movmi	r3, #32
 801de9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dea2:	0713      	lsls	r3, r2, #28
 801dea4:	bf44      	itt	mi
 801dea6:	232b      	movmi	r3, #43	@ 0x2b
 801dea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801deac:	f89a 3000 	ldrb.w	r3, [sl]
 801deb0:	2b2a      	cmp	r3, #42	@ 0x2a
 801deb2:	d015      	beq.n	801dee0 <_vfiprintf_r+0x120>
 801deb4:	9a07      	ldr	r2, [sp, #28]
 801deb6:	4654      	mov	r4, sl
 801deb8:	2000      	movs	r0, #0
 801deba:	f04f 0c0a 	mov.w	ip, #10
 801debe:	4621      	mov	r1, r4
 801dec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dec4:	3b30      	subs	r3, #48	@ 0x30
 801dec6:	2b09      	cmp	r3, #9
 801dec8:	d94b      	bls.n	801df62 <_vfiprintf_r+0x1a2>
 801deca:	b1b0      	cbz	r0, 801defa <_vfiprintf_r+0x13a>
 801decc:	9207      	str	r2, [sp, #28]
 801dece:	e014      	b.n	801defa <_vfiprintf_r+0x13a>
 801ded0:	eba0 0308 	sub.w	r3, r0, r8
 801ded4:	fa09 f303 	lsl.w	r3, r9, r3
 801ded8:	4313      	orrs	r3, r2
 801deda:	9304      	str	r3, [sp, #16]
 801dedc:	46a2      	mov	sl, r4
 801dede:	e7d2      	b.n	801de86 <_vfiprintf_r+0xc6>
 801dee0:	9b03      	ldr	r3, [sp, #12]
 801dee2:	1d19      	adds	r1, r3, #4
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	9103      	str	r1, [sp, #12]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	bfbb      	ittet	lt
 801deec:	425b      	neglt	r3, r3
 801deee:	f042 0202 	orrlt.w	r2, r2, #2
 801def2:	9307      	strge	r3, [sp, #28]
 801def4:	9307      	strlt	r3, [sp, #28]
 801def6:	bfb8      	it	lt
 801def8:	9204      	strlt	r2, [sp, #16]
 801defa:	7823      	ldrb	r3, [r4, #0]
 801defc:	2b2e      	cmp	r3, #46	@ 0x2e
 801defe:	d10a      	bne.n	801df16 <_vfiprintf_r+0x156>
 801df00:	7863      	ldrb	r3, [r4, #1]
 801df02:	2b2a      	cmp	r3, #42	@ 0x2a
 801df04:	d132      	bne.n	801df6c <_vfiprintf_r+0x1ac>
 801df06:	9b03      	ldr	r3, [sp, #12]
 801df08:	1d1a      	adds	r2, r3, #4
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	9203      	str	r2, [sp, #12]
 801df0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801df12:	3402      	adds	r4, #2
 801df14:	9305      	str	r3, [sp, #20]
 801df16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dfec <_vfiprintf_r+0x22c>
 801df1a:	7821      	ldrb	r1, [r4, #0]
 801df1c:	2203      	movs	r2, #3
 801df1e:	4650      	mov	r0, sl
 801df20:	f7e2 f95e 	bl	80001e0 <memchr>
 801df24:	b138      	cbz	r0, 801df36 <_vfiprintf_r+0x176>
 801df26:	9b04      	ldr	r3, [sp, #16]
 801df28:	eba0 000a 	sub.w	r0, r0, sl
 801df2c:	2240      	movs	r2, #64	@ 0x40
 801df2e:	4082      	lsls	r2, r0
 801df30:	4313      	orrs	r3, r2
 801df32:	3401      	adds	r4, #1
 801df34:	9304      	str	r3, [sp, #16]
 801df36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df3a:	4829      	ldr	r0, [pc, #164]	@ (801dfe0 <_vfiprintf_r+0x220>)
 801df3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801df40:	2206      	movs	r2, #6
 801df42:	f7e2 f94d 	bl	80001e0 <memchr>
 801df46:	2800      	cmp	r0, #0
 801df48:	d03f      	beq.n	801dfca <_vfiprintf_r+0x20a>
 801df4a:	4b26      	ldr	r3, [pc, #152]	@ (801dfe4 <_vfiprintf_r+0x224>)
 801df4c:	bb1b      	cbnz	r3, 801df96 <_vfiprintf_r+0x1d6>
 801df4e:	9b03      	ldr	r3, [sp, #12]
 801df50:	3307      	adds	r3, #7
 801df52:	f023 0307 	bic.w	r3, r3, #7
 801df56:	3308      	adds	r3, #8
 801df58:	9303      	str	r3, [sp, #12]
 801df5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df5c:	443b      	add	r3, r7
 801df5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801df60:	e76a      	b.n	801de38 <_vfiprintf_r+0x78>
 801df62:	fb0c 3202 	mla	r2, ip, r2, r3
 801df66:	460c      	mov	r4, r1
 801df68:	2001      	movs	r0, #1
 801df6a:	e7a8      	b.n	801debe <_vfiprintf_r+0xfe>
 801df6c:	2300      	movs	r3, #0
 801df6e:	3401      	adds	r4, #1
 801df70:	9305      	str	r3, [sp, #20]
 801df72:	4619      	mov	r1, r3
 801df74:	f04f 0c0a 	mov.w	ip, #10
 801df78:	4620      	mov	r0, r4
 801df7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df7e:	3a30      	subs	r2, #48	@ 0x30
 801df80:	2a09      	cmp	r2, #9
 801df82:	d903      	bls.n	801df8c <_vfiprintf_r+0x1cc>
 801df84:	2b00      	cmp	r3, #0
 801df86:	d0c6      	beq.n	801df16 <_vfiprintf_r+0x156>
 801df88:	9105      	str	r1, [sp, #20]
 801df8a:	e7c4      	b.n	801df16 <_vfiprintf_r+0x156>
 801df8c:	fb0c 2101 	mla	r1, ip, r1, r2
 801df90:	4604      	mov	r4, r0
 801df92:	2301      	movs	r3, #1
 801df94:	e7f0      	b.n	801df78 <_vfiprintf_r+0x1b8>
 801df96:	ab03      	add	r3, sp, #12
 801df98:	9300      	str	r3, [sp, #0]
 801df9a:	462a      	mov	r2, r5
 801df9c:	4b12      	ldr	r3, [pc, #72]	@ (801dfe8 <_vfiprintf_r+0x228>)
 801df9e:	a904      	add	r1, sp, #16
 801dfa0:	4630      	mov	r0, r6
 801dfa2:	f3af 8000 	nop.w
 801dfa6:	4607      	mov	r7, r0
 801dfa8:	1c78      	adds	r0, r7, #1
 801dfaa:	d1d6      	bne.n	801df5a <_vfiprintf_r+0x19a>
 801dfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dfae:	07d9      	lsls	r1, r3, #31
 801dfb0:	d405      	bmi.n	801dfbe <_vfiprintf_r+0x1fe>
 801dfb2:	89ab      	ldrh	r3, [r5, #12]
 801dfb4:	059a      	lsls	r2, r3, #22
 801dfb6:	d402      	bmi.n	801dfbe <_vfiprintf_r+0x1fe>
 801dfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dfba:	f7ff fc49 	bl	801d850 <__retarget_lock_release_recursive>
 801dfbe:	89ab      	ldrh	r3, [r5, #12]
 801dfc0:	065b      	lsls	r3, r3, #25
 801dfc2:	f53f af1f 	bmi.w	801de04 <_vfiprintf_r+0x44>
 801dfc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dfc8:	e71e      	b.n	801de08 <_vfiprintf_r+0x48>
 801dfca:	ab03      	add	r3, sp, #12
 801dfcc:	9300      	str	r3, [sp, #0]
 801dfce:	462a      	mov	r2, r5
 801dfd0:	4b05      	ldr	r3, [pc, #20]	@ (801dfe8 <_vfiprintf_r+0x228>)
 801dfd2:	a904      	add	r1, sp, #16
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	f000 f879 	bl	801e0cc <_printf_i>
 801dfda:	e7e4      	b.n	801dfa6 <_vfiprintf_r+0x1e6>
 801dfdc:	08022f73 	.word	0x08022f73
 801dfe0:	08022f7d 	.word	0x08022f7d
 801dfe4:	00000000 	.word	0x00000000
 801dfe8:	0801dd9b 	.word	0x0801dd9b
 801dfec:	08022f79 	.word	0x08022f79

0801dff0 <_printf_common>:
 801dff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dff4:	4616      	mov	r6, r2
 801dff6:	4698      	mov	r8, r3
 801dff8:	688a      	ldr	r2, [r1, #8]
 801dffa:	690b      	ldr	r3, [r1, #16]
 801dffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e000:	4293      	cmp	r3, r2
 801e002:	bfb8      	it	lt
 801e004:	4613      	movlt	r3, r2
 801e006:	6033      	str	r3, [r6, #0]
 801e008:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e00c:	4607      	mov	r7, r0
 801e00e:	460c      	mov	r4, r1
 801e010:	b10a      	cbz	r2, 801e016 <_printf_common+0x26>
 801e012:	3301      	adds	r3, #1
 801e014:	6033      	str	r3, [r6, #0]
 801e016:	6823      	ldr	r3, [r4, #0]
 801e018:	0699      	lsls	r1, r3, #26
 801e01a:	bf42      	ittt	mi
 801e01c:	6833      	ldrmi	r3, [r6, #0]
 801e01e:	3302      	addmi	r3, #2
 801e020:	6033      	strmi	r3, [r6, #0]
 801e022:	6825      	ldr	r5, [r4, #0]
 801e024:	f015 0506 	ands.w	r5, r5, #6
 801e028:	d106      	bne.n	801e038 <_printf_common+0x48>
 801e02a:	f104 0a19 	add.w	sl, r4, #25
 801e02e:	68e3      	ldr	r3, [r4, #12]
 801e030:	6832      	ldr	r2, [r6, #0]
 801e032:	1a9b      	subs	r3, r3, r2
 801e034:	42ab      	cmp	r3, r5
 801e036:	dc26      	bgt.n	801e086 <_printf_common+0x96>
 801e038:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e03c:	6822      	ldr	r2, [r4, #0]
 801e03e:	3b00      	subs	r3, #0
 801e040:	bf18      	it	ne
 801e042:	2301      	movne	r3, #1
 801e044:	0692      	lsls	r2, r2, #26
 801e046:	d42b      	bmi.n	801e0a0 <_printf_common+0xb0>
 801e048:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e04c:	4641      	mov	r1, r8
 801e04e:	4638      	mov	r0, r7
 801e050:	47c8      	blx	r9
 801e052:	3001      	adds	r0, #1
 801e054:	d01e      	beq.n	801e094 <_printf_common+0xa4>
 801e056:	6823      	ldr	r3, [r4, #0]
 801e058:	6922      	ldr	r2, [r4, #16]
 801e05a:	f003 0306 	and.w	r3, r3, #6
 801e05e:	2b04      	cmp	r3, #4
 801e060:	bf02      	ittt	eq
 801e062:	68e5      	ldreq	r5, [r4, #12]
 801e064:	6833      	ldreq	r3, [r6, #0]
 801e066:	1aed      	subeq	r5, r5, r3
 801e068:	68a3      	ldr	r3, [r4, #8]
 801e06a:	bf0c      	ite	eq
 801e06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e070:	2500      	movne	r5, #0
 801e072:	4293      	cmp	r3, r2
 801e074:	bfc4      	itt	gt
 801e076:	1a9b      	subgt	r3, r3, r2
 801e078:	18ed      	addgt	r5, r5, r3
 801e07a:	2600      	movs	r6, #0
 801e07c:	341a      	adds	r4, #26
 801e07e:	42b5      	cmp	r5, r6
 801e080:	d11a      	bne.n	801e0b8 <_printf_common+0xc8>
 801e082:	2000      	movs	r0, #0
 801e084:	e008      	b.n	801e098 <_printf_common+0xa8>
 801e086:	2301      	movs	r3, #1
 801e088:	4652      	mov	r2, sl
 801e08a:	4641      	mov	r1, r8
 801e08c:	4638      	mov	r0, r7
 801e08e:	47c8      	blx	r9
 801e090:	3001      	adds	r0, #1
 801e092:	d103      	bne.n	801e09c <_printf_common+0xac>
 801e094:	f04f 30ff 	mov.w	r0, #4294967295
 801e098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e09c:	3501      	adds	r5, #1
 801e09e:	e7c6      	b.n	801e02e <_printf_common+0x3e>
 801e0a0:	18e1      	adds	r1, r4, r3
 801e0a2:	1c5a      	adds	r2, r3, #1
 801e0a4:	2030      	movs	r0, #48	@ 0x30
 801e0a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e0aa:	4422      	add	r2, r4
 801e0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e0b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e0b4:	3302      	adds	r3, #2
 801e0b6:	e7c7      	b.n	801e048 <_printf_common+0x58>
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	4622      	mov	r2, r4
 801e0bc:	4641      	mov	r1, r8
 801e0be:	4638      	mov	r0, r7
 801e0c0:	47c8      	blx	r9
 801e0c2:	3001      	adds	r0, #1
 801e0c4:	d0e6      	beq.n	801e094 <_printf_common+0xa4>
 801e0c6:	3601      	adds	r6, #1
 801e0c8:	e7d9      	b.n	801e07e <_printf_common+0x8e>
	...

0801e0cc <_printf_i>:
 801e0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e0d0:	7e0f      	ldrb	r7, [r1, #24]
 801e0d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e0d4:	2f78      	cmp	r7, #120	@ 0x78
 801e0d6:	4691      	mov	r9, r2
 801e0d8:	4680      	mov	r8, r0
 801e0da:	460c      	mov	r4, r1
 801e0dc:	469a      	mov	sl, r3
 801e0de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e0e2:	d807      	bhi.n	801e0f4 <_printf_i+0x28>
 801e0e4:	2f62      	cmp	r7, #98	@ 0x62
 801e0e6:	d80a      	bhi.n	801e0fe <_printf_i+0x32>
 801e0e8:	2f00      	cmp	r7, #0
 801e0ea:	f000 80d1 	beq.w	801e290 <_printf_i+0x1c4>
 801e0ee:	2f58      	cmp	r7, #88	@ 0x58
 801e0f0:	f000 80b8 	beq.w	801e264 <_printf_i+0x198>
 801e0f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e0f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e0fc:	e03a      	b.n	801e174 <_printf_i+0xa8>
 801e0fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e102:	2b15      	cmp	r3, #21
 801e104:	d8f6      	bhi.n	801e0f4 <_printf_i+0x28>
 801e106:	a101      	add	r1, pc, #4	@ (adr r1, 801e10c <_printf_i+0x40>)
 801e108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e10c:	0801e165 	.word	0x0801e165
 801e110:	0801e179 	.word	0x0801e179
 801e114:	0801e0f5 	.word	0x0801e0f5
 801e118:	0801e0f5 	.word	0x0801e0f5
 801e11c:	0801e0f5 	.word	0x0801e0f5
 801e120:	0801e0f5 	.word	0x0801e0f5
 801e124:	0801e179 	.word	0x0801e179
 801e128:	0801e0f5 	.word	0x0801e0f5
 801e12c:	0801e0f5 	.word	0x0801e0f5
 801e130:	0801e0f5 	.word	0x0801e0f5
 801e134:	0801e0f5 	.word	0x0801e0f5
 801e138:	0801e277 	.word	0x0801e277
 801e13c:	0801e1a3 	.word	0x0801e1a3
 801e140:	0801e231 	.word	0x0801e231
 801e144:	0801e0f5 	.word	0x0801e0f5
 801e148:	0801e0f5 	.word	0x0801e0f5
 801e14c:	0801e299 	.word	0x0801e299
 801e150:	0801e0f5 	.word	0x0801e0f5
 801e154:	0801e1a3 	.word	0x0801e1a3
 801e158:	0801e0f5 	.word	0x0801e0f5
 801e15c:	0801e0f5 	.word	0x0801e0f5
 801e160:	0801e239 	.word	0x0801e239
 801e164:	6833      	ldr	r3, [r6, #0]
 801e166:	1d1a      	adds	r2, r3, #4
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	6032      	str	r2, [r6, #0]
 801e16c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e174:	2301      	movs	r3, #1
 801e176:	e09c      	b.n	801e2b2 <_printf_i+0x1e6>
 801e178:	6833      	ldr	r3, [r6, #0]
 801e17a:	6820      	ldr	r0, [r4, #0]
 801e17c:	1d19      	adds	r1, r3, #4
 801e17e:	6031      	str	r1, [r6, #0]
 801e180:	0606      	lsls	r6, r0, #24
 801e182:	d501      	bpl.n	801e188 <_printf_i+0xbc>
 801e184:	681d      	ldr	r5, [r3, #0]
 801e186:	e003      	b.n	801e190 <_printf_i+0xc4>
 801e188:	0645      	lsls	r5, r0, #25
 801e18a:	d5fb      	bpl.n	801e184 <_printf_i+0xb8>
 801e18c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e190:	2d00      	cmp	r5, #0
 801e192:	da03      	bge.n	801e19c <_printf_i+0xd0>
 801e194:	232d      	movs	r3, #45	@ 0x2d
 801e196:	426d      	negs	r5, r5
 801e198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e19c:	4858      	ldr	r0, [pc, #352]	@ (801e300 <_printf_i+0x234>)
 801e19e:	230a      	movs	r3, #10
 801e1a0:	e011      	b.n	801e1c6 <_printf_i+0xfa>
 801e1a2:	6821      	ldr	r1, [r4, #0]
 801e1a4:	6833      	ldr	r3, [r6, #0]
 801e1a6:	0608      	lsls	r0, r1, #24
 801e1a8:	f853 5b04 	ldr.w	r5, [r3], #4
 801e1ac:	d402      	bmi.n	801e1b4 <_printf_i+0xe8>
 801e1ae:	0649      	lsls	r1, r1, #25
 801e1b0:	bf48      	it	mi
 801e1b2:	b2ad      	uxthmi	r5, r5
 801e1b4:	2f6f      	cmp	r7, #111	@ 0x6f
 801e1b6:	4852      	ldr	r0, [pc, #328]	@ (801e300 <_printf_i+0x234>)
 801e1b8:	6033      	str	r3, [r6, #0]
 801e1ba:	bf14      	ite	ne
 801e1bc:	230a      	movne	r3, #10
 801e1be:	2308      	moveq	r3, #8
 801e1c0:	2100      	movs	r1, #0
 801e1c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e1c6:	6866      	ldr	r6, [r4, #4]
 801e1c8:	60a6      	str	r6, [r4, #8]
 801e1ca:	2e00      	cmp	r6, #0
 801e1cc:	db05      	blt.n	801e1da <_printf_i+0x10e>
 801e1ce:	6821      	ldr	r1, [r4, #0]
 801e1d0:	432e      	orrs	r6, r5
 801e1d2:	f021 0104 	bic.w	r1, r1, #4
 801e1d6:	6021      	str	r1, [r4, #0]
 801e1d8:	d04b      	beq.n	801e272 <_printf_i+0x1a6>
 801e1da:	4616      	mov	r6, r2
 801e1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 801e1e0:	fb03 5711 	mls	r7, r3, r1, r5
 801e1e4:	5dc7      	ldrb	r7, [r0, r7]
 801e1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e1ea:	462f      	mov	r7, r5
 801e1ec:	42bb      	cmp	r3, r7
 801e1ee:	460d      	mov	r5, r1
 801e1f0:	d9f4      	bls.n	801e1dc <_printf_i+0x110>
 801e1f2:	2b08      	cmp	r3, #8
 801e1f4:	d10b      	bne.n	801e20e <_printf_i+0x142>
 801e1f6:	6823      	ldr	r3, [r4, #0]
 801e1f8:	07df      	lsls	r7, r3, #31
 801e1fa:	d508      	bpl.n	801e20e <_printf_i+0x142>
 801e1fc:	6923      	ldr	r3, [r4, #16]
 801e1fe:	6861      	ldr	r1, [r4, #4]
 801e200:	4299      	cmp	r1, r3
 801e202:	bfde      	ittt	le
 801e204:	2330      	movle	r3, #48	@ 0x30
 801e206:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e20a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e20e:	1b92      	subs	r2, r2, r6
 801e210:	6122      	str	r2, [r4, #16]
 801e212:	f8cd a000 	str.w	sl, [sp]
 801e216:	464b      	mov	r3, r9
 801e218:	aa03      	add	r2, sp, #12
 801e21a:	4621      	mov	r1, r4
 801e21c:	4640      	mov	r0, r8
 801e21e:	f7ff fee7 	bl	801dff0 <_printf_common>
 801e222:	3001      	adds	r0, #1
 801e224:	d14a      	bne.n	801e2bc <_printf_i+0x1f0>
 801e226:	f04f 30ff 	mov.w	r0, #4294967295
 801e22a:	b004      	add	sp, #16
 801e22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e230:	6823      	ldr	r3, [r4, #0]
 801e232:	f043 0320 	orr.w	r3, r3, #32
 801e236:	6023      	str	r3, [r4, #0]
 801e238:	4832      	ldr	r0, [pc, #200]	@ (801e304 <_printf_i+0x238>)
 801e23a:	2778      	movs	r7, #120	@ 0x78
 801e23c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e240:	6823      	ldr	r3, [r4, #0]
 801e242:	6831      	ldr	r1, [r6, #0]
 801e244:	061f      	lsls	r7, r3, #24
 801e246:	f851 5b04 	ldr.w	r5, [r1], #4
 801e24a:	d402      	bmi.n	801e252 <_printf_i+0x186>
 801e24c:	065f      	lsls	r7, r3, #25
 801e24e:	bf48      	it	mi
 801e250:	b2ad      	uxthmi	r5, r5
 801e252:	6031      	str	r1, [r6, #0]
 801e254:	07d9      	lsls	r1, r3, #31
 801e256:	bf44      	itt	mi
 801e258:	f043 0320 	orrmi.w	r3, r3, #32
 801e25c:	6023      	strmi	r3, [r4, #0]
 801e25e:	b11d      	cbz	r5, 801e268 <_printf_i+0x19c>
 801e260:	2310      	movs	r3, #16
 801e262:	e7ad      	b.n	801e1c0 <_printf_i+0xf4>
 801e264:	4826      	ldr	r0, [pc, #152]	@ (801e300 <_printf_i+0x234>)
 801e266:	e7e9      	b.n	801e23c <_printf_i+0x170>
 801e268:	6823      	ldr	r3, [r4, #0]
 801e26a:	f023 0320 	bic.w	r3, r3, #32
 801e26e:	6023      	str	r3, [r4, #0]
 801e270:	e7f6      	b.n	801e260 <_printf_i+0x194>
 801e272:	4616      	mov	r6, r2
 801e274:	e7bd      	b.n	801e1f2 <_printf_i+0x126>
 801e276:	6833      	ldr	r3, [r6, #0]
 801e278:	6825      	ldr	r5, [r4, #0]
 801e27a:	6961      	ldr	r1, [r4, #20]
 801e27c:	1d18      	adds	r0, r3, #4
 801e27e:	6030      	str	r0, [r6, #0]
 801e280:	062e      	lsls	r6, r5, #24
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	d501      	bpl.n	801e28a <_printf_i+0x1be>
 801e286:	6019      	str	r1, [r3, #0]
 801e288:	e002      	b.n	801e290 <_printf_i+0x1c4>
 801e28a:	0668      	lsls	r0, r5, #25
 801e28c:	d5fb      	bpl.n	801e286 <_printf_i+0x1ba>
 801e28e:	8019      	strh	r1, [r3, #0]
 801e290:	2300      	movs	r3, #0
 801e292:	6123      	str	r3, [r4, #16]
 801e294:	4616      	mov	r6, r2
 801e296:	e7bc      	b.n	801e212 <_printf_i+0x146>
 801e298:	6833      	ldr	r3, [r6, #0]
 801e29a:	1d1a      	adds	r2, r3, #4
 801e29c:	6032      	str	r2, [r6, #0]
 801e29e:	681e      	ldr	r6, [r3, #0]
 801e2a0:	6862      	ldr	r2, [r4, #4]
 801e2a2:	2100      	movs	r1, #0
 801e2a4:	4630      	mov	r0, r6
 801e2a6:	f7e1 ff9b 	bl	80001e0 <memchr>
 801e2aa:	b108      	cbz	r0, 801e2b0 <_printf_i+0x1e4>
 801e2ac:	1b80      	subs	r0, r0, r6
 801e2ae:	6060      	str	r0, [r4, #4]
 801e2b0:	6863      	ldr	r3, [r4, #4]
 801e2b2:	6123      	str	r3, [r4, #16]
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2ba:	e7aa      	b.n	801e212 <_printf_i+0x146>
 801e2bc:	6923      	ldr	r3, [r4, #16]
 801e2be:	4632      	mov	r2, r6
 801e2c0:	4649      	mov	r1, r9
 801e2c2:	4640      	mov	r0, r8
 801e2c4:	47d0      	blx	sl
 801e2c6:	3001      	adds	r0, #1
 801e2c8:	d0ad      	beq.n	801e226 <_printf_i+0x15a>
 801e2ca:	6823      	ldr	r3, [r4, #0]
 801e2cc:	079b      	lsls	r3, r3, #30
 801e2ce:	d413      	bmi.n	801e2f8 <_printf_i+0x22c>
 801e2d0:	68e0      	ldr	r0, [r4, #12]
 801e2d2:	9b03      	ldr	r3, [sp, #12]
 801e2d4:	4298      	cmp	r0, r3
 801e2d6:	bfb8      	it	lt
 801e2d8:	4618      	movlt	r0, r3
 801e2da:	e7a6      	b.n	801e22a <_printf_i+0x15e>
 801e2dc:	2301      	movs	r3, #1
 801e2de:	4632      	mov	r2, r6
 801e2e0:	4649      	mov	r1, r9
 801e2e2:	4640      	mov	r0, r8
 801e2e4:	47d0      	blx	sl
 801e2e6:	3001      	adds	r0, #1
 801e2e8:	d09d      	beq.n	801e226 <_printf_i+0x15a>
 801e2ea:	3501      	adds	r5, #1
 801e2ec:	68e3      	ldr	r3, [r4, #12]
 801e2ee:	9903      	ldr	r1, [sp, #12]
 801e2f0:	1a5b      	subs	r3, r3, r1
 801e2f2:	42ab      	cmp	r3, r5
 801e2f4:	dcf2      	bgt.n	801e2dc <_printf_i+0x210>
 801e2f6:	e7eb      	b.n	801e2d0 <_printf_i+0x204>
 801e2f8:	2500      	movs	r5, #0
 801e2fa:	f104 0619 	add.w	r6, r4, #25
 801e2fe:	e7f5      	b.n	801e2ec <_printf_i+0x220>
 801e300:	08022f84 	.word	0x08022f84
 801e304:	08022f95 	.word	0x08022f95

0801e308 <__sflush_r>:
 801e308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e310:	0716      	lsls	r6, r2, #28
 801e312:	4605      	mov	r5, r0
 801e314:	460c      	mov	r4, r1
 801e316:	d454      	bmi.n	801e3c2 <__sflush_r+0xba>
 801e318:	684b      	ldr	r3, [r1, #4]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	dc02      	bgt.n	801e324 <__sflush_r+0x1c>
 801e31e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e320:	2b00      	cmp	r3, #0
 801e322:	dd48      	ble.n	801e3b6 <__sflush_r+0xae>
 801e324:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e326:	2e00      	cmp	r6, #0
 801e328:	d045      	beq.n	801e3b6 <__sflush_r+0xae>
 801e32a:	2300      	movs	r3, #0
 801e32c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e330:	682f      	ldr	r7, [r5, #0]
 801e332:	6a21      	ldr	r1, [r4, #32]
 801e334:	602b      	str	r3, [r5, #0]
 801e336:	d030      	beq.n	801e39a <__sflush_r+0x92>
 801e338:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e33a:	89a3      	ldrh	r3, [r4, #12]
 801e33c:	0759      	lsls	r1, r3, #29
 801e33e:	d505      	bpl.n	801e34c <__sflush_r+0x44>
 801e340:	6863      	ldr	r3, [r4, #4]
 801e342:	1ad2      	subs	r2, r2, r3
 801e344:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e346:	b10b      	cbz	r3, 801e34c <__sflush_r+0x44>
 801e348:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e34a:	1ad2      	subs	r2, r2, r3
 801e34c:	2300      	movs	r3, #0
 801e34e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e350:	6a21      	ldr	r1, [r4, #32]
 801e352:	4628      	mov	r0, r5
 801e354:	47b0      	blx	r6
 801e356:	1c43      	adds	r3, r0, #1
 801e358:	89a3      	ldrh	r3, [r4, #12]
 801e35a:	d106      	bne.n	801e36a <__sflush_r+0x62>
 801e35c:	6829      	ldr	r1, [r5, #0]
 801e35e:	291d      	cmp	r1, #29
 801e360:	d82b      	bhi.n	801e3ba <__sflush_r+0xb2>
 801e362:	4a2a      	ldr	r2, [pc, #168]	@ (801e40c <__sflush_r+0x104>)
 801e364:	40ca      	lsrs	r2, r1
 801e366:	07d6      	lsls	r6, r2, #31
 801e368:	d527      	bpl.n	801e3ba <__sflush_r+0xb2>
 801e36a:	2200      	movs	r2, #0
 801e36c:	6062      	str	r2, [r4, #4]
 801e36e:	04d9      	lsls	r1, r3, #19
 801e370:	6922      	ldr	r2, [r4, #16]
 801e372:	6022      	str	r2, [r4, #0]
 801e374:	d504      	bpl.n	801e380 <__sflush_r+0x78>
 801e376:	1c42      	adds	r2, r0, #1
 801e378:	d101      	bne.n	801e37e <__sflush_r+0x76>
 801e37a:	682b      	ldr	r3, [r5, #0]
 801e37c:	b903      	cbnz	r3, 801e380 <__sflush_r+0x78>
 801e37e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e382:	602f      	str	r7, [r5, #0]
 801e384:	b1b9      	cbz	r1, 801e3b6 <__sflush_r+0xae>
 801e386:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e38a:	4299      	cmp	r1, r3
 801e38c:	d002      	beq.n	801e394 <__sflush_r+0x8c>
 801e38e:	4628      	mov	r0, r5
 801e390:	f7ff fa94 	bl	801d8bc <_free_r>
 801e394:	2300      	movs	r3, #0
 801e396:	6363      	str	r3, [r4, #52]	@ 0x34
 801e398:	e00d      	b.n	801e3b6 <__sflush_r+0xae>
 801e39a:	2301      	movs	r3, #1
 801e39c:	4628      	mov	r0, r5
 801e39e:	47b0      	blx	r6
 801e3a0:	4602      	mov	r2, r0
 801e3a2:	1c50      	adds	r0, r2, #1
 801e3a4:	d1c9      	bne.n	801e33a <__sflush_r+0x32>
 801e3a6:	682b      	ldr	r3, [r5, #0]
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d0c6      	beq.n	801e33a <__sflush_r+0x32>
 801e3ac:	2b1d      	cmp	r3, #29
 801e3ae:	d001      	beq.n	801e3b4 <__sflush_r+0xac>
 801e3b0:	2b16      	cmp	r3, #22
 801e3b2:	d11e      	bne.n	801e3f2 <__sflush_r+0xea>
 801e3b4:	602f      	str	r7, [r5, #0]
 801e3b6:	2000      	movs	r0, #0
 801e3b8:	e022      	b.n	801e400 <__sflush_r+0xf8>
 801e3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e3be:	b21b      	sxth	r3, r3
 801e3c0:	e01b      	b.n	801e3fa <__sflush_r+0xf2>
 801e3c2:	690f      	ldr	r7, [r1, #16]
 801e3c4:	2f00      	cmp	r7, #0
 801e3c6:	d0f6      	beq.n	801e3b6 <__sflush_r+0xae>
 801e3c8:	0793      	lsls	r3, r2, #30
 801e3ca:	680e      	ldr	r6, [r1, #0]
 801e3cc:	bf08      	it	eq
 801e3ce:	694b      	ldreq	r3, [r1, #20]
 801e3d0:	600f      	str	r7, [r1, #0]
 801e3d2:	bf18      	it	ne
 801e3d4:	2300      	movne	r3, #0
 801e3d6:	eba6 0807 	sub.w	r8, r6, r7
 801e3da:	608b      	str	r3, [r1, #8]
 801e3dc:	f1b8 0f00 	cmp.w	r8, #0
 801e3e0:	dde9      	ble.n	801e3b6 <__sflush_r+0xae>
 801e3e2:	6a21      	ldr	r1, [r4, #32]
 801e3e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e3e6:	4643      	mov	r3, r8
 801e3e8:	463a      	mov	r2, r7
 801e3ea:	4628      	mov	r0, r5
 801e3ec:	47b0      	blx	r6
 801e3ee:	2800      	cmp	r0, #0
 801e3f0:	dc08      	bgt.n	801e404 <__sflush_r+0xfc>
 801e3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e3fa:	81a3      	strh	r3, [r4, #12]
 801e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e404:	4407      	add	r7, r0
 801e406:	eba8 0800 	sub.w	r8, r8, r0
 801e40a:	e7e7      	b.n	801e3dc <__sflush_r+0xd4>
 801e40c:	20400001 	.word	0x20400001

0801e410 <_fflush_r>:
 801e410:	b538      	push	{r3, r4, r5, lr}
 801e412:	690b      	ldr	r3, [r1, #16]
 801e414:	4605      	mov	r5, r0
 801e416:	460c      	mov	r4, r1
 801e418:	b913      	cbnz	r3, 801e420 <_fflush_r+0x10>
 801e41a:	2500      	movs	r5, #0
 801e41c:	4628      	mov	r0, r5
 801e41e:	bd38      	pop	{r3, r4, r5, pc}
 801e420:	b118      	cbz	r0, 801e42a <_fflush_r+0x1a>
 801e422:	6a03      	ldr	r3, [r0, #32]
 801e424:	b90b      	cbnz	r3, 801e42a <_fflush_r+0x1a>
 801e426:	f7ff f833 	bl	801d490 <__sinit>
 801e42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d0f3      	beq.n	801e41a <_fflush_r+0xa>
 801e432:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e434:	07d0      	lsls	r0, r2, #31
 801e436:	d404      	bmi.n	801e442 <_fflush_r+0x32>
 801e438:	0599      	lsls	r1, r3, #22
 801e43a:	d402      	bmi.n	801e442 <_fflush_r+0x32>
 801e43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e43e:	f7ff fa06 	bl	801d84e <__retarget_lock_acquire_recursive>
 801e442:	4628      	mov	r0, r5
 801e444:	4621      	mov	r1, r4
 801e446:	f7ff ff5f 	bl	801e308 <__sflush_r>
 801e44a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e44c:	07da      	lsls	r2, r3, #31
 801e44e:	4605      	mov	r5, r0
 801e450:	d4e4      	bmi.n	801e41c <_fflush_r+0xc>
 801e452:	89a3      	ldrh	r3, [r4, #12]
 801e454:	059b      	lsls	r3, r3, #22
 801e456:	d4e1      	bmi.n	801e41c <_fflush_r+0xc>
 801e458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e45a:	f7ff f9f9 	bl	801d850 <__retarget_lock_release_recursive>
 801e45e:	e7dd      	b.n	801e41c <_fflush_r+0xc>

0801e460 <fiprintf>:
 801e460:	b40e      	push	{r1, r2, r3}
 801e462:	b503      	push	{r0, r1, lr}
 801e464:	4601      	mov	r1, r0
 801e466:	ab03      	add	r3, sp, #12
 801e468:	4805      	ldr	r0, [pc, #20]	@ (801e480 <fiprintf+0x20>)
 801e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e46e:	6800      	ldr	r0, [r0, #0]
 801e470:	9301      	str	r3, [sp, #4]
 801e472:	f7ff fca5 	bl	801ddc0 <_vfiprintf_r>
 801e476:	b002      	add	sp, #8
 801e478:	f85d eb04 	ldr.w	lr, [sp], #4
 801e47c:	b003      	add	sp, #12
 801e47e:	4770      	bx	lr
 801e480:	20000118 	.word	0x20000118

0801e484 <__swbuf_r>:
 801e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e486:	460e      	mov	r6, r1
 801e488:	4614      	mov	r4, r2
 801e48a:	4605      	mov	r5, r0
 801e48c:	b118      	cbz	r0, 801e496 <__swbuf_r+0x12>
 801e48e:	6a03      	ldr	r3, [r0, #32]
 801e490:	b90b      	cbnz	r3, 801e496 <__swbuf_r+0x12>
 801e492:	f7fe fffd 	bl	801d490 <__sinit>
 801e496:	69a3      	ldr	r3, [r4, #24]
 801e498:	60a3      	str	r3, [r4, #8]
 801e49a:	89a3      	ldrh	r3, [r4, #12]
 801e49c:	071a      	lsls	r2, r3, #28
 801e49e:	d501      	bpl.n	801e4a4 <__swbuf_r+0x20>
 801e4a0:	6923      	ldr	r3, [r4, #16]
 801e4a2:	b943      	cbnz	r3, 801e4b6 <__swbuf_r+0x32>
 801e4a4:	4621      	mov	r1, r4
 801e4a6:	4628      	mov	r0, r5
 801e4a8:	f000 f82a 	bl	801e500 <__swsetup_r>
 801e4ac:	b118      	cbz	r0, 801e4b6 <__swbuf_r+0x32>
 801e4ae:	f04f 37ff 	mov.w	r7, #4294967295
 801e4b2:	4638      	mov	r0, r7
 801e4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4b6:	6823      	ldr	r3, [r4, #0]
 801e4b8:	6922      	ldr	r2, [r4, #16]
 801e4ba:	1a98      	subs	r0, r3, r2
 801e4bc:	6963      	ldr	r3, [r4, #20]
 801e4be:	b2f6      	uxtb	r6, r6
 801e4c0:	4283      	cmp	r3, r0
 801e4c2:	4637      	mov	r7, r6
 801e4c4:	dc05      	bgt.n	801e4d2 <__swbuf_r+0x4e>
 801e4c6:	4621      	mov	r1, r4
 801e4c8:	4628      	mov	r0, r5
 801e4ca:	f7ff ffa1 	bl	801e410 <_fflush_r>
 801e4ce:	2800      	cmp	r0, #0
 801e4d0:	d1ed      	bne.n	801e4ae <__swbuf_r+0x2a>
 801e4d2:	68a3      	ldr	r3, [r4, #8]
 801e4d4:	3b01      	subs	r3, #1
 801e4d6:	60a3      	str	r3, [r4, #8]
 801e4d8:	6823      	ldr	r3, [r4, #0]
 801e4da:	1c5a      	adds	r2, r3, #1
 801e4dc:	6022      	str	r2, [r4, #0]
 801e4de:	701e      	strb	r6, [r3, #0]
 801e4e0:	6962      	ldr	r2, [r4, #20]
 801e4e2:	1c43      	adds	r3, r0, #1
 801e4e4:	429a      	cmp	r2, r3
 801e4e6:	d004      	beq.n	801e4f2 <__swbuf_r+0x6e>
 801e4e8:	89a3      	ldrh	r3, [r4, #12]
 801e4ea:	07db      	lsls	r3, r3, #31
 801e4ec:	d5e1      	bpl.n	801e4b2 <__swbuf_r+0x2e>
 801e4ee:	2e0a      	cmp	r6, #10
 801e4f0:	d1df      	bne.n	801e4b2 <__swbuf_r+0x2e>
 801e4f2:	4621      	mov	r1, r4
 801e4f4:	4628      	mov	r0, r5
 801e4f6:	f7ff ff8b 	bl	801e410 <_fflush_r>
 801e4fa:	2800      	cmp	r0, #0
 801e4fc:	d0d9      	beq.n	801e4b2 <__swbuf_r+0x2e>
 801e4fe:	e7d6      	b.n	801e4ae <__swbuf_r+0x2a>

0801e500 <__swsetup_r>:
 801e500:	b538      	push	{r3, r4, r5, lr}
 801e502:	4b29      	ldr	r3, [pc, #164]	@ (801e5a8 <__swsetup_r+0xa8>)
 801e504:	4605      	mov	r5, r0
 801e506:	6818      	ldr	r0, [r3, #0]
 801e508:	460c      	mov	r4, r1
 801e50a:	b118      	cbz	r0, 801e514 <__swsetup_r+0x14>
 801e50c:	6a03      	ldr	r3, [r0, #32]
 801e50e:	b90b      	cbnz	r3, 801e514 <__swsetup_r+0x14>
 801e510:	f7fe ffbe 	bl	801d490 <__sinit>
 801e514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e518:	0719      	lsls	r1, r3, #28
 801e51a:	d422      	bmi.n	801e562 <__swsetup_r+0x62>
 801e51c:	06da      	lsls	r2, r3, #27
 801e51e:	d407      	bmi.n	801e530 <__swsetup_r+0x30>
 801e520:	2209      	movs	r2, #9
 801e522:	602a      	str	r2, [r5, #0]
 801e524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e528:	81a3      	strh	r3, [r4, #12]
 801e52a:	f04f 30ff 	mov.w	r0, #4294967295
 801e52e:	e033      	b.n	801e598 <__swsetup_r+0x98>
 801e530:	0758      	lsls	r0, r3, #29
 801e532:	d512      	bpl.n	801e55a <__swsetup_r+0x5a>
 801e534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e536:	b141      	cbz	r1, 801e54a <__swsetup_r+0x4a>
 801e538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e53c:	4299      	cmp	r1, r3
 801e53e:	d002      	beq.n	801e546 <__swsetup_r+0x46>
 801e540:	4628      	mov	r0, r5
 801e542:	f7ff f9bb 	bl	801d8bc <_free_r>
 801e546:	2300      	movs	r3, #0
 801e548:	6363      	str	r3, [r4, #52]	@ 0x34
 801e54a:	89a3      	ldrh	r3, [r4, #12]
 801e54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e550:	81a3      	strh	r3, [r4, #12]
 801e552:	2300      	movs	r3, #0
 801e554:	6063      	str	r3, [r4, #4]
 801e556:	6923      	ldr	r3, [r4, #16]
 801e558:	6023      	str	r3, [r4, #0]
 801e55a:	89a3      	ldrh	r3, [r4, #12]
 801e55c:	f043 0308 	orr.w	r3, r3, #8
 801e560:	81a3      	strh	r3, [r4, #12]
 801e562:	6923      	ldr	r3, [r4, #16]
 801e564:	b94b      	cbnz	r3, 801e57a <__swsetup_r+0x7a>
 801e566:	89a3      	ldrh	r3, [r4, #12]
 801e568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e570:	d003      	beq.n	801e57a <__swsetup_r+0x7a>
 801e572:	4621      	mov	r1, r4
 801e574:	4628      	mov	r0, r5
 801e576:	f000 f884 	bl	801e682 <__smakebuf_r>
 801e57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e57e:	f013 0201 	ands.w	r2, r3, #1
 801e582:	d00a      	beq.n	801e59a <__swsetup_r+0x9a>
 801e584:	2200      	movs	r2, #0
 801e586:	60a2      	str	r2, [r4, #8]
 801e588:	6962      	ldr	r2, [r4, #20]
 801e58a:	4252      	negs	r2, r2
 801e58c:	61a2      	str	r2, [r4, #24]
 801e58e:	6922      	ldr	r2, [r4, #16]
 801e590:	b942      	cbnz	r2, 801e5a4 <__swsetup_r+0xa4>
 801e592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e596:	d1c5      	bne.n	801e524 <__swsetup_r+0x24>
 801e598:	bd38      	pop	{r3, r4, r5, pc}
 801e59a:	0799      	lsls	r1, r3, #30
 801e59c:	bf58      	it	pl
 801e59e:	6962      	ldrpl	r2, [r4, #20]
 801e5a0:	60a2      	str	r2, [r4, #8]
 801e5a2:	e7f4      	b.n	801e58e <__swsetup_r+0x8e>
 801e5a4:	2000      	movs	r0, #0
 801e5a6:	e7f7      	b.n	801e598 <__swsetup_r+0x98>
 801e5a8:	20000118 	.word	0x20000118

0801e5ac <_sbrk_r>:
 801e5ac:	b538      	push	{r3, r4, r5, lr}
 801e5ae:	4d06      	ldr	r5, [pc, #24]	@ (801e5c8 <_sbrk_r+0x1c>)
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	4604      	mov	r4, r0
 801e5b4:	4608      	mov	r0, r1
 801e5b6:	602b      	str	r3, [r5, #0]
 801e5b8:	f7e5 fba4 	bl	8003d04 <_sbrk>
 801e5bc:	1c43      	adds	r3, r0, #1
 801e5be:	d102      	bne.n	801e5c6 <_sbrk_r+0x1a>
 801e5c0:	682b      	ldr	r3, [r5, #0]
 801e5c2:	b103      	cbz	r3, 801e5c6 <_sbrk_r+0x1a>
 801e5c4:	6023      	str	r3, [r4, #0]
 801e5c6:	bd38      	pop	{r3, r4, r5, pc}
 801e5c8:	2000e838 	.word	0x2000e838

0801e5cc <abort>:
 801e5cc:	b508      	push	{r3, lr}
 801e5ce:	2006      	movs	r0, #6
 801e5d0:	f000 f8bc 	bl	801e74c <raise>
 801e5d4:	2001      	movs	r0, #1
 801e5d6:	f7e5 fb1d 	bl	8003c14 <_exit>

0801e5da <_realloc_r>:
 801e5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5de:	4607      	mov	r7, r0
 801e5e0:	4614      	mov	r4, r2
 801e5e2:	460d      	mov	r5, r1
 801e5e4:	b921      	cbnz	r1, 801e5f0 <_realloc_r+0x16>
 801e5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e5ea:	4611      	mov	r1, r2
 801e5ec:	f7ff b9da 	b.w	801d9a4 <_malloc_r>
 801e5f0:	b92a      	cbnz	r2, 801e5fe <_realloc_r+0x24>
 801e5f2:	f7ff f963 	bl	801d8bc <_free_r>
 801e5f6:	4625      	mov	r5, r4
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5fe:	f000 f8e3 	bl	801e7c8 <_malloc_usable_size_r>
 801e602:	4284      	cmp	r4, r0
 801e604:	4606      	mov	r6, r0
 801e606:	d802      	bhi.n	801e60e <_realloc_r+0x34>
 801e608:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e60c:	d8f4      	bhi.n	801e5f8 <_realloc_r+0x1e>
 801e60e:	4621      	mov	r1, r4
 801e610:	4638      	mov	r0, r7
 801e612:	f7ff f9c7 	bl	801d9a4 <_malloc_r>
 801e616:	4680      	mov	r8, r0
 801e618:	b908      	cbnz	r0, 801e61e <_realloc_r+0x44>
 801e61a:	4645      	mov	r5, r8
 801e61c:	e7ec      	b.n	801e5f8 <_realloc_r+0x1e>
 801e61e:	42b4      	cmp	r4, r6
 801e620:	4622      	mov	r2, r4
 801e622:	4629      	mov	r1, r5
 801e624:	bf28      	it	cs
 801e626:	4632      	movcs	r2, r6
 801e628:	f7ff f91b 	bl	801d862 <memcpy>
 801e62c:	4629      	mov	r1, r5
 801e62e:	4638      	mov	r0, r7
 801e630:	f7ff f944 	bl	801d8bc <_free_r>
 801e634:	e7f1      	b.n	801e61a <_realloc_r+0x40>

0801e636 <__swhatbuf_r>:
 801e636:	b570      	push	{r4, r5, r6, lr}
 801e638:	460c      	mov	r4, r1
 801e63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e63e:	2900      	cmp	r1, #0
 801e640:	b096      	sub	sp, #88	@ 0x58
 801e642:	4615      	mov	r5, r2
 801e644:	461e      	mov	r6, r3
 801e646:	da0d      	bge.n	801e664 <__swhatbuf_r+0x2e>
 801e648:	89a3      	ldrh	r3, [r4, #12]
 801e64a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e64e:	f04f 0100 	mov.w	r1, #0
 801e652:	bf14      	ite	ne
 801e654:	2340      	movne	r3, #64	@ 0x40
 801e656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e65a:	2000      	movs	r0, #0
 801e65c:	6031      	str	r1, [r6, #0]
 801e65e:	602b      	str	r3, [r5, #0]
 801e660:	b016      	add	sp, #88	@ 0x58
 801e662:	bd70      	pop	{r4, r5, r6, pc}
 801e664:	466a      	mov	r2, sp
 801e666:	f000 f879 	bl	801e75c <_fstat_r>
 801e66a:	2800      	cmp	r0, #0
 801e66c:	dbec      	blt.n	801e648 <__swhatbuf_r+0x12>
 801e66e:	9901      	ldr	r1, [sp, #4]
 801e670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e678:	4259      	negs	r1, r3
 801e67a:	4159      	adcs	r1, r3
 801e67c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e680:	e7eb      	b.n	801e65a <__swhatbuf_r+0x24>

0801e682 <__smakebuf_r>:
 801e682:	898b      	ldrh	r3, [r1, #12]
 801e684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e686:	079d      	lsls	r5, r3, #30
 801e688:	4606      	mov	r6, r0
 801e68a:	460c      	mov	r4, r1
 801e68c:	d507      	bpl.n	801e69e <__smakebuf_r+0x1c>
 801e68e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e692:	6023      	str	r3, [r4, #0]
 801e694:	6123      	str	r3, [r4, #16]
 801e696:	2301      	movs	r3, #1
 801e698:	6163      	str	r3, [r4, #20]
 801e69a:	b003      	add	sp, #12
 801e69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e69e:	ab01      	add	r3, sp, #4
 801e6a0:	466a      	mov	r2, sp
 801e6a2:	f7ff ffc8 	bl	801e636 <__swhatbuf_r>
 801e6a6:	9f00      	ldr	r7, [sp, #0]
 801e6a8:	4605      	mov	r5, r0
 801e6aa:	4639      	mov	r1, r7
 801e6ac:	4630      	mov	r0, r6
 801e6ae:	f7ff f979 	bl	801d9a4 <_malloc_r>
 801e6b2:	b948      	cbnz	r0, 801e6c8 <__smakebuf_r+0x46>
 801e6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6b8:	059a      	lsls	r2, r3, #22
 801e6ba:	d4ee      	bmi.n	801e69a <__smakebuf_r+0x18>
 801e6bc:	f023 0303 	bic.w	r3, r3, #3
 801e6c0:	f043 0302 	orr.w	r3, r3, #2
 801e6c4:	81a3      	strh	r3, [r4, #12]
 801e6c6:	e7e2      	b.n	801e68e <__smakebuf_r+0xc>
 801e6c8:	89a3      	ldrh	r3, [r4, #12]
 801e6ca:	6020      	str	r0, [r4, #0]
 801e6cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e6d0:	81a3      	strh	r3, [r4, #12]
 801e6d2:	9b01      	ldr	r3, [sp, #4]
 801e6d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e6d8:	b15b      	cbz	r3, 801e6f2 <__smakebuf_r+0x70>
 801e6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6de:	4630      	mov	r0, r6
 801e6e0:	f000 f84e 	bl	801e780 <_isatty_r>
 801e6e4:	b128      	cbz	r0, 801e6f2 <__smakebuf_r+0x70>
 801e6e6:	89a3      	ldrh	r3, [r4, #12]
 801e6e8:	f023 0303 	bic.w	r3, r3, #3
 801e6ec:	f043 0301 	orr.w	r3, r3, #1
 801e6f0:	81a3      	strh	r3, [r4, #12]
 801e6f2:	89a3      	ldrh	r3, [r4, #12]
 801e6f4:	431d      	orrs	r5, r3
 801e6f6:	81a5      	strh	r5, [r4, #12]
 801e6f8:	e7cf      	b.n	801e69a <__smakebuf_r+0x18>

0801e6fa <_raise_r>:
 801e6fa:	291f      	cmp	r1, #31
 801e6fc:	b538      	push	{r3, r4, r5, lr}
 801e6fe:	4605      	mov	r5, r0
 801e700:	460c      	mov	r4, r1
 801e702:	d904      	bls.n	801e70e <_raise_r+0x14>
 801e704:	2316      	movs	r3, #22
 801e706:	6003      	str	r3, [r0, #0]
 801e708:	f04f 30ff 	mov.w	r0, #4294967295
 801e70c:	bd38      	pop	{r3, r4, r5, pc}
 801e70e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e710:	b112      	cbz	r2, 801e718 <_raise_r+0x1e>
 801e712:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e716:	b94b      	cbnz	r3, 801e72c <_raise_r+0x32>
 801e718:	4628      	mov	r0, r5
 801e71a:	f000 f853 	bl	801e7c4 <_getpid_r>
 801e71e:	4622      	mov	r2, r4
 801e720:	4601      	mov	r1, r0
 801e722:	4628      	mov	r0, r5
 801e724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e728:	f000 b83a 	b.w	801e7a0 <_kill_r>
 801e72c:	2b01      	cmp	r3, #1
 801e72e:	d00a      	beq.n	801e746 <_raise_r+0x4c>
 801e730:	1c59      	adds	r1, r3, #1
 801e732:	d103      	bne.n	801e73c <_raise_r+0x42>
 801e734:	2316      	movs	r3, #22
 801e736:	6003      	str	r3, [r0, #0]
 801e738:	2001      	movs	r0, #1
 801e73a:	e7e7      	b.n	801e70c <_raise_r+0x12>
 801e73c:	2100      	movs	r1, #0
 801e73e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e742:	4620      	mov	r0, r4
 801e744:	4798      	blx	r3
 801e746:	2000      	movs	r0, #0
 801e748:	e7e0      	b.n	801e70c <_raise_r+0x12>
	...

0801e74c <raise>:
 801e74c:	4b02      	ldr	r3, [pc, #8]	@ (801e758 <raise+0xc>)
 801e74e:	4601      	mov	r1, r0
 801e750:	6818      	ldr	r0, [r3, #0]
 801e752:	f7ff bfd2 	b.w	801e6fa <_raise_r>
 801e756:	bf00      	nop
 801e758:	20000118 	.word	0x20000118

0801e75c <_fstat_r>:
 801e75c:	b538      	push	{r3, r4, r5, lr}
 801e75e:	4d07      	ldr	r5, [pc, #28]	@ (801e77c <_fstat_r+0x20>)
 801e760:	2300      	movs	r3, #0
 801e762:	4604      	mov	r4, r0
 801e764:	4608      	mov	r0, r1
 801e766:	4611      	mov	r1, r2
 801e768:	602b      	str	r3, [r5, #0]
 801e76a:	f7e5 faa3 	bl	8003cb4 <_fstat>
 801e76e:	1c43      	adds	r3, r0, #1
 801e770:	d102      	bne.n	801e778 <_fstat_r+0x1c>
 801e772:	682b      	ldr	r3, [r5, #0]
 801e774:	b103      	cbz	r3, 801e778 <_fstat_r+0x1c>
 801e776:	6023      	str	r3, [r4, #0]
 801e778:	bd38      	pop	{r3, r4, r5, pc}
 801e77a:	bf00      	nop
 801e77c:	2000e838 	.word	0x2000e838

0801e780 <_isatty_r>:
 801e780:	b538      	push	{r3, r4, r5, lr}
 801e782:	4d06      	ldr	r5, [pc, #24]	@ (801e79c <_isatty_r+0x1c>)
 801e784:	2300      	movs	r3, #0
 801e786:	4604      	mov	r4, r0
 801e788:	4608      	mov	r0, r1
 801e78a:	602b      	str	r3, [r5, #0]
 801e78c:	f7e5 faa2 	bl	8003cd4 <_isatty>
 801e790:	1c43      	adds	r3, r0, #1
 801e792:	d102      	bne.n	801e79a <_isatty_r+0x1a>
 801e794:	682b      	ldr	r3, [r5, #0]
 801e796:	b103      	cbz	r3, 801e79a <_isatty_r+0x1a>
 801e798:	6023      	str	r3, [r4, #0]
 801e79a:	bd38      	pop	{r3, r4, r5, pc}
 801e79c:	2000e838 	.word	0x2000e838

0801e7a0 <_kill_r>:
 801e7a0:	b538      	push	{r3, r4, r5, lr}
 801e7a2:	4d07      	ldr	r5, [pc, #28]	@ (801e7c0 <_kill_r+0x20>)
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	4608      	mov	r0, r1
 801e7aa:	4611      	mov	r1, r2
 801e7ac:	602b      	str	r3, [r5, #0]
 801e7ae:	f7e5 fa1f 	bl	8003bf0 <_kill>
 801e7b2:	1c43      	adds	r3, r0, #1
 801e7b4:	d102      	bne.n	801e7bc <_kill_r+0x1c>
 801e7b6:	682b      	ldr	r3, [r5, #0]
 801e7b8:	b103      	cbz	r3, 801e7bc <_kill_r+0x1c>
 801e7ba:	6023      	str	r3, [r4, #0]
 801e7bc:	bd38      	pop	{r3, r4, r5, pc}
 801e7be:	bf00      	nop
 801e7c0:	2000e838 	.word	0x2000e838

0801e7c4 <_getpid_r>:
 801e7c4:	f7e5 ba0c 	b.w	8003be0 <_getpid>

0801e7c8 <_malloc_usable_size_r>:
 801e7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e7cc:	1f18      	subs	r0, r3, #4
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	bfbc      	itt	lt
 801e7d2:	580b      	ldrlt	r3, [r1, r0]
 801e7d4:	18c0      	addlt	r0, r0, r3
 801e7d6:	4770      	bx	lr

0801e7d8 <_init>:
 801e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7da:	bf00      	nop
 801e7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7de:	bc08      	pop	{r3}
 801e7e0:	469e      	mov	lr, r3
 801e7e2:	4770      	bx	lr

0801e7e4 <_fini>:
 801e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7e6:	bf00      	nop
 801e7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7ea:	bc08      	pop	{r3}
 801e7ec:	469e      	mov	lr, r3
 801e7ee:	4770      	bx	lr
